
URpilot_Core_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002e6b0  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .preinit_array 00000000  0803e6b0  0803e6b0  0005cf98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0803e6b0  0803e6b0  0004e6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0803e6b4  0803e6b4  0004e6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .codigoRapido 00000000  00000000  00000000  0005cf98  2**0
                  CONTENTS
  6 .ARM          00000008  0803e6b8  0803e6b8  0004e6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .registroGP   000001b0  0803e6c0  0803e6c0  0004e6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .resetGP      00000172  0803e870  0803e870  0004e870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00002be8  20000000  0803e9e2  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000a348  20002be8  080415ca  00052be8  2**3
                  ALLOC
 11 .sram2_data   00000000  2007c000  2007c000  0005cf98  2**0
                  CONTENTS
 12 .sram2_bss    00000000  2007c000  2007c000  0005cf98  2**0
                  CONTENTS
 13 .ramRapida_data 00000068  2000cf30  080415ca  0005cf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .ramRapida_bss 0000000c  2000cf98  08041632  0005cf98  2**2
                  ALLOC
 15 ._user_heap_stack 00002800  2000cfa4  08041632  0005cfa4  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0005cf98  2**0
                  CONTENTS, READONLY
 17 .debug_info   00052e42  00000000  00000000  0005cfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00010531  00000000  00000000  000afe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000041c8  00000000  00000000  000c0340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003a58  00000000  00000000  000c4508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00044e36  00000000  00000000  000c7f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0006e0f6  00000000  00000000  0010cd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00121e72  00000000  00000000  0017ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0029ccfe  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00011dfc  00000000  00000000  0029cd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20002be8 	.word	0x20002be8
 801001c:	00000000 	.word	0x00000000
 8010020:	0803e698 	.word	0x0803e698

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20002bec 	.word	0x20002bec
 801003c:	0803e698 	.word	0x0803e698

08010040 <strlen>:
 8010040:	4603      	mov	r3, r0
 8010042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010046:	2a00      	cmp	r2, #0
 8010048:	d1fb      	bne.n	8010042 <strlen+0x2>
 801004a:	1a18      	subs	r0, r3, r0
 801004c:	3801      	subs	r0, #1
 801004e:	4770      	bx	lr

08010050 <memchr>:
 8010050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010054:	2a10      	cmp	r2, #16
 8010056:	db2b      	blt.n	80100b0 <memchr+0x60>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	d008      	beq.n	8010070 <memchr+0x20>
 801005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010062:	3a01      	subs	r2, #1
 8010064:	428b      	cmp	r3, r1
 8010066:	d02d      	beq.n	80100c4 <memchr+0x74>
 8010068:	f010 0f07 	tst.w	r0, #7
 801006c:	b342      	cbz	r2, 80100c0 <memchr+0x70>
 801006e:	d1f6      	bne.n	801005e <memchr+0xe>
 8010070:	b4f0      	push	{r4, r5, r6, r7}
 8010072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801007a:	f022 0407 	bic.w	r4, r2, #7
 801007e:	f07f 0700 	mvns.w	r7, #0
 8010082:	2300      	movs	r3, #0
 8010084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010088:	3c08      	subs	r4, #8
 801008a:	ea85 0501 	eor.w	r5, r5, r1
 801008e:	ea86 0601 	eor.w	r6, r6, r1
 8010092:	fa85 f547 	uadd8	r5, r5, r7
 8010096:	faa3 f587 	sel	r5, r3, r7
 801009a:	fa86 f647 	uadd8	r6, r6, r7
 801009e:	faa5 f687 	sel	r6, r5, r7
 80100a2:	b98e      	cbnz	r6, 80100c8 <memchr+0x78>
 80100a4:	d1ee      	bne.n	8010084 <memchr+0x34>
 80100a6:	bcf0      	pop	{r4, r5, r6, r7}
 80100a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80100ac:	f002 0207 	and.w	r2, r2, #7
 80100b0:	b132      	cbz	r2, 80100c0 <memchr+0x70>
 80100b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100b6:	3a01      	subs	r2, #1
 80100b8:	ea83 0301 	eor.w	r3, r3, r1
 80100bc:	b113      	cbz	r3, 80100c4 <memchr+0x74>
 80100be:	d1f8      	bne.n	80100b2 <memchr+0x62>
 80100c0:	2000      	movs	r0, #0
 80100c2:	4770      	bx	lr
 80100c4:	3801      	subs	r0, #1
 80100c6:	4770      	bx	lr
 80100c8:	2d00      	cmp	r5, #0
 80100ca:	bf06      	itte	eq
 80100cc:	4635      	moveq	r5, r6
 80100ce:	3803      	subeq	r0, #3
 80100d0:	3807      	subne	r0, #7
 80100d2:	f015 0f01 	tst.w	r5, #1
 80100d6:	d107      	bne.n	80100e8 <memchr+0x98>
 80100d8:	3001      	adds	r0, #1
 80100da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100de:	bf02      	ittt	eq
 80100e0:	3001      	addeq	r0, #1
 80100e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80100e6:	3001      	addeq	r0, #1
 80100e8:	bcf0      	pop	{r4, r5, r6, r7}
 80100ea:	3801      	subs	r0, #1
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop

080100f0 <__aeabi_drsub>:
 80100f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80100f4:	e002      	b.n	80100fc <__adddf3>
 80100f6:	bf00      	nop

080100f8 <__aeabi_dsub>:
 80100f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080100fc <__adddf3>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010106:	ea94 0f05 	teq	r4, r5
 801010a:	bf08      	it	eq
 801010c:	ea90 0f02 	teqeq	r0, r2
 8010110:	bf1f      	itttt	ne
 8010112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010116:	ea55 0c02 	orrsne.w	ip, r5, r2
 801011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010122:	f000 80e2 	beq.w	80102ea <__adddf3+0x1ee>
 8010126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801012e:	bfb8      	it	lt
 8010130:	426d      	neglt	r5, r5
 8010132:	dd0c      	ble.n	801014e <__adddf3+0x52>
 8010134:	442c      	add	r4, r5
 8010136:	ea80 0202 	eor.w	r2, r0, r2
 801013a:	ea81 0303 	eor.w	r3, r1, r3
 801013e:	ea82 0000 	eor.w	r0, r2, r0
 8010142:	ea83 0101 	eor.w	r1, r3, r1
 8010146:	ea80 0202 	eor.w	r2, r0, r2
 801014a:	ea81 0303 	eor.w	r3, r1, r3
 801014e:	2d36      	cmp	r5, #54	; 0x36
 8010150:	bf88      	it	hi
 8010152:	bd30      	pophi	{r4, r5, pc}
 8010154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801015c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010164:	d002      	beq.n	801016c <__adddf3+0x70>
 8010166:	4240      	negs	r0, r0
 8010168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801016c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010178:	d002      	beq.n	8010180 <__adddf3+0x84>
 801017a:	4252      	negs	r2, r2
 801017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010180:	ea94 0f05 	teq	r4, r5
 8010184:	f000 80a7 	beq.w	80102d6 <__adddf3+0x1da>
 8010188:	f1a4 0401 	sub.w	r4, r4, #1
 801018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010190:	db0d      	blt.n	80101ae <__adddf3+0xb2>
 8010192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010196:	fa22 f205 	lsr.w	r2, r2, r5
 801019a:	1880      	adds	r0, r0, r2
 801019c:	f141 0100 	adc.w	r1, r1, #0
 80101a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80101a4:	1880      	adds	r0, r0, r2
 80101a6:	fa43 f305 	asr.w	r3, r3, r5
 80101aa:	4159      	adcs	r1, r3
 80101ac:	e00e      	b.n	80101cc <__adddf3+0xd0>
 80101ae:	f1a5 0520 	sub.w	r5, r5, #32
 80101b2:	f10e 0e20 	add.w	lr, lr, #32
 80101b6:	2a01      	cmp	r2, #1
 80101b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80101bc:	bf28      	it	cs
 80101be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80101c2:	fa43 f305 	asr.w	r3, r3, r5
 80101c6:	18c0      	adds	r0, r0, r3
 80101c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80101cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80101d0:	d507      	bpl.n	80101e2 <__adddf3+0xe6>
 80101d2:	f04f 0e00 	mov.w	lr, #0
 80101d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80101da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80101de:	eb6e 0101 	sbc.w	r1, lr, r1
 80101e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80101e6:	d31b      	bcc.n	8010220 <__adddf3+0x124>
 80101e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80101ec:	d30c      	bcc.n	8010208 <__adddf3+0x10c>
 80101ee:	0849      	lsrs	r1, r1, #1
 80101f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80101f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80101f8:	f104 0401 	add.w	r4, r4, #1
 80101fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010204:	f080 809a 	bcs.w	801033c <__adddf3+0x240>
 8010208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801020c:	bf08      	it	eq
 801020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010212:	f150 0000 	adcs.w	r0, r0, #0
 8010216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801021a:	ea41 0105 	orr.w	r1, r1, r5
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010224:	4140      	adcs	r0, r0
 8010226:	eb41 0101 	adc.w	r1, r1, r1
 801022a:	3c01      	subs	r4, #1
 801022c:	bf28      	it	cs
 801022e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010232:	d2e9      	bcs.n	8010208 <__adddf3+0x10c>
 8010234:	f091 0f00 	teq	r1, #0
 8010238:	bf04      	itt	eq
 801023a:	4601      	moveq	r1, r0
 801023c:	2000      	moveq	r0, #0
 801023e:	fab1 f381 	clz	r3, r1
 8010242:	bf08      	it	eq
 8010244:	3320      	addeq	r3, #32
 8010246:	f1a3 030b 	sub.w	r3, r3, #11
 801024a:	f1b3 0220 	subs.w	r2, r3, #32
 801024e:	da0c      	bge.n	801026a <__adddf3+0x16e>
 8010250:	320c      	adds	r2, #12
 8010252:	dd08      	ble.n	8010266 <__adddf3+0x16a>
 8010254:	f102 0c14 	add.w	ip, r2, #20
 8010258:	f1c2 020c 	rsb	r2, r2, #12
 801025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010260:	fa21 f102 	lsr.w	r1, r1, r2
 8010264:	e00c      	b.n	8010280 <__adddf3+0x184>
 8010266:	f102 0214 	add.w	r2, r2, #20
 801026a:	bfd8      	it	le
 801026c:	f1c2 0c20 	rsble	ip, r2, #32
 8010270:	fa01 f102 	lsl.w	r1, r1, r2
 8010274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010278:	bfdc      	itt	le
 801027a:	ea41 010c 	orrle.w	r1, r1, ip
 801027e:	4090      	lslle	r0, r2
 8010280:	1ae4      	subs	r4, r4, r3
 8010282:	bfa2      	ittt	ge
 8010284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010288:	4329      	orrge	r1, r5
 801028a:	bd30      	popge	{r4, r5, pc}
 801028c:	ea6f 0404 	mvn.w	r4, r4
 8010290:	3c1f      	subs	r4, #31
 8010292:	da1c      	bge.n	80102ce <__adddf3+0x1d2>
 8010294:	340c      	adds	r4, #12
 8010296:	dc0e      	bgt.n	80102b6 <__adddf3+0x1ba>
 8010298:	f104 0414 	add.w	r4, r4, #20
 801029c:	f1c4 0220 	rsb	r2, r4, #32
 80102a0:	fa20 f004 	lsr.w	r0, r0, r4
 80102a4:	fa01 f302 	lsl.w	r3, r1, r2
 80102a8:	ea40 0003 	orr.w	r0, r0, r3
 80102ac:	fa21 f304 	lsr.w	r3, r1, r4
 80102b0:	ea45 0103 	orr.w	r1, r5, r3
 80102b4:	bd30      	pop	{r4, r5, pc}
 80102b6:	f1c4 040c 	rsb	r4, r4, #12
 80102ba:	f1c4 0220 	rsb	r2, r4, #32
 80102be:	fa20 f002 	lsr.w	r0, r0, r2
 80102c2:	fa01 f304 	lsl.w	r3, r1, r4
 80102c6:	ea40 0003 	orr.w	r0, r0, r3
 80102ca:	4629      	mov	r1, r5
 80102cc:	bd30      	pop	{r4, r5, pc}
 80102ce:	fa21 f004 	lsr.w	r0, r1, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f094 0f00 	teq	r4, #0
 80102da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80102de:	bf06      	itte	eq
 80102e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80102e4:	3401      	addeq	r4, #1
 80102e6:	3d01      	subne	r5, #1
 80102e8:	e74e      	b.n	8010188 <__adddf3+0x8c>
 80102ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80102ee:	bf18      	it	ne
 80102f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102f4:	d029      	beq.n	801034a <__adddf3+0x24e>
 80102f6:	ea94 0f05 	teq	r4, r5
 80102fa:	bf08      	it	eq
 80102fc:	ea90 0f02 	teqeq	r0, r2
 8010300:	d005      	beq.n	801030e <__adddf3+0x212>
 8010302:	ea54 0c00 	orrs.w	ip, r4, r0
 8010306:	bf04      	itt	eq
 8010308:	4619      	moveq	r1, r3
 801030a:	4610      	moveq	r0, r2
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	ea91 0f03 	teq	r1, r3
 8010312:	bf1e      	ittt	ne
 8010314:	2100      	movne	r1, #0
 8010316:	2000      	movne	r0, #0
 8010318:	bd30      	popne	{r4, r5, pc}
 801031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801031e:	d105      	bne.n	801032c <__adddf3+0x230>
 8010320:	0040      	lsls	r0, r0, #1
 8010322:	4149      	adcs	r1, r1
 8010324:	bf28      	it	cs
 8010326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801032a:	bd30      	pop	{r4, r5, pc}
 801032c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010330:	bf3c      	itt	cc
 8010332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010336:	bd30      	popcc	{r4, r5, pc}
 8010338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801033c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	bd30      	pop	{r4, r5, pc}
 801034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801034e:	bf1a      	itte	ne
 8010350:	4619      	movne	r1, r3
 8010352:	4610      	movne	r0, r2
 8010354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010358:	bf1c      	itt	ne
 801035a:	460b      	movne	r3, r1
 801035c:	4602      	movne	r2, r0
 801035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010362:	bf06      	itte	eq
 8010364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010368:	ea91 0f03 	teqeq	r1, r3
 801036c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	bf00      	nop

08010374 <__aeabi_ui2d>:
 8010374:	f090 0f00 	teq	r0, #0
 8010378:	bf04      	itt	eq
 801037a:	2100      	moveq	r1, #0
 801037c:	4770      	bxeq	lr
 801037e:	b530      	push	{r4, r5, lr}
 8010380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010388:	f04f 0500 	mov.w	r5, #0
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	e750      	b.n	8010234 <__adddf3+0x138>
 8010392:	bf00      	nop

08010394 <__aeabi_i2d>:
 8010394:	f090 0f00 	teq	r0, #0
 8010398:	bf04      	itt	eq
 801039a:	2100      	moveq	r1, #0
 801039c:	4770      	bxeq	lr
 801039e:	b530      	push	{r4, r5, lr}
 80103a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80103a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80103a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80103ac:	bf48      	it	mi
 80103ae:	4240      	negmi	r0, r0
 80103b0:	f04f 0100 	mov.w	r1, #0
 80103b4:	e73e      	b.n	8010234 <__adddf3+0x138>
 80103b6:	bf00      	nop

080103b8 <__aeabi_f2d>:
 80103b8:	0042      	lsls	r2, r0, #1
 80103ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80103be:	ea4f 0131 	mov.w	r1, r1, rrx
 80103c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80103c6:	bf1f      	itttt	ne
 80103c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80103cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80103d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80103d4:	4770      	bxne	lr
 80103d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80103da:	bf08      	it	eq
 80103dc:	4770      	bxeq	lr
 80103de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80103e2:	bf04      	itt	eq
 80103e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80103e8:	4770      	bxeq	lr
 80103ea:	b530      	push	{r4, r5, lr}
 80103ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80103f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80103f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80103f8:	e71c      	b.n	8010234 <__adddf3+0x138>
 80103fa:	bf00      	nop

080103fc <__aeabi_ul2d>:
 80103fc:	ea50 0201 	orrs.w	r2, r0, r1
 8010400:	bf08      	it	eq
 8010402:	4770      	bxeq	lr
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	f04f 0500 	mov.w	r5, #0
 801040a:	e00a      	b.n	8010422 <__aeabi_l2d+0x16>

0801040c <__aeabi_l2d>:
 801040c:	ea50 0201 	orrs.w	r2, r0, r1
 8010410:	bf08      	it	eq
 8010412:	4770      	bxeq	lr
 8010414:	b530      	push	{r4, r5, lr}
 8010416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801041a:	d502      	bpl.n	8010422 <__aeabi_l2d+0x16>
 801041c:	4240      	negs	r0, r0
 801041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801042e:	f43f aed8 	beq.w	80101e2 <__adddf3+0xe6>
 8010432:	f04f 0203 	mov.w	r2, #3
 8010436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801043a:	bf18      	it	ne
 801043c:	3203      	addne	r2, #3
 801043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010442:	bf18      	it	ne
 8010444:	3203      	addne	r2, #3
 8010446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801044a:	f1c2 0320 	rsb	r3, r2, #32
 801044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010452:	fa20 f002 	lsr.w	r0, r0, r2
 8010456:	fa01 fe03 	lsl.w	lr, r1, r3
 801045a:	ea40 000e 	orr.w	r0, r0, lr
 801045e:	fa21 f102 	lsr.w	r1, r1, r2
 8010462:	4414      	add	r4, r2
 8010464:	e6bd      	b.n	80101e2 <__adddf3+0xe6>
 8010466:	bf00      	nop

08010468 <__aeabi_ldivmod>:
 8010468:	b97b      	cbnz	r3, 801048a <__aeabi_ldivmod+0x22>
 801046a:	b972      	cbnz	r2, 801048a <__aeabi_ldivmod+0x22>
 801046c:	2900      	cmp	r1, #0
 801046e:	bfbe      	ittt	lt
 8010470:	2000      	movlt	r0, #0
 8010472:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8010476:	e006      	blt.n	8010486 <__aeabi_ldivmod+0x1e>
 8010478:	bf08      	it	eq
 801047a:	2800      	cmpeq	r0, #0
 801047c:	bf1c      	itt	ne
 801047e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8010482:	f04f 30ff 	movne.w	r0, #4294967295
 8010486:	f000 b9bf 	b.w	8010808 <__aeabi_idiv0>
 801048a:	f1ad 0c08 	sub.w	ip, sp, #8
 801048e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010492:	2900      	cmp	r1, #0
 8010494:	db09      	blt.n	80104aa <__aeabi_ldivmod+0x42>
 8010496:	2b00      	cmp	r3, #0
 8010498:	db1a      	blt.n	80104d0 <__aeabi_ldivmod+0x68>
 801049a:	f000 f84d 	bl	8010538 <__udivmoddi4>
 801049e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80104a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104a6:	b004      	add	sp, #16
 80104a8:	4770      	bx	lr
 80104aa:	4240      	negs	r0, r0
 80104ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	db1b      	blt.n	80104ec <__aeabi_ldivmod+0x84>
 80104b4:	f000 f840 	bl	8010538 <__udivmoddi4>
 80104b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80104bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104c0:	b004      	add	sp, #16
 80104c2:	4240      	negs	r0, r0
 80104c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80104c8:	4252      	negs	r2, r2
 80104ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80104ce:	4770      	bx	lr
 80104d0:	4252      	negs	r2, r2
 80104d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80104d6:	f000 f82f 	bl	8010538 <__udivmoddi4>
 80104da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80104de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104e2:	b004      	add	sp, #16
 80104e4:	4240      	negs	r0, r0
 80104e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80104ea:	4770      	bx	lr
 80104ec:	4252      	negs	r2, r2
 80104ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80104f2:	f000 f821 	bl	8010538 <__udivmoddi4>
 80104f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80104fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104fe:	b004      	add	sp, #16
 8010500:	4252      	negs	r2, r2
 8010502:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010506:	4770      	bx	lr

08010508 <__aeabi_uldivmod>:
 8010508:	b953      	cbnz	r3, 8010520 <__aeabi_uldivmod+0x18>
 801050a:	b94a      	cbnz	r2, 8010520 <__aeabi_uldivmod+0x18>
 801050c:	2900      	cmp	r1, #0
 801050e:	bf08      	it	eq
 8010510:	2800      	cmpeq	r0, #0
 8010512:	bf1c      	itt	ne
 8010514:	f04f 31ff 	movne.w	r1, #4294967295
 8010518:	f04f 30ff 	movne.w	r0, #4294967295
 801051c:	f000 b974 	b.w	8010808 <__aeabi_idiv0>
 8010520:	f1ad 0c08 	sub.w	ip, sp, #8
 8010524:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010528:	f000 f806 	bl	8010538 <__udivmoddi4>
 801052c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010534:	b004      	add	sp, #16
 8010536:	4770      	bx	lr

08010538 <__udivmoddi4>:
 8010538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	9d08      	ldr	r5, [sp, #32]
 801053e:	4604      	mov	r4, r0
 8010540:	468e      	mov	lr, r1
 8010542:	2b00      	cmp	r3, #0
 8010544:	d14d      	bne.n	80105e2 <__udivmoddi4+0xaa>
 8010546:	428a      	cmp	r2, r1
 8010548:	4694      	mov	ip, r2
 801054a:	d969      	bls.n	8010620 <__udivmoddi4+0xe8>
 801054c:	fab2 f282 	clz	r2, r2
 8010550:	b152      	cbz	r2, 8010568 <__udivmoddi4+0x30>
 8010552:	fa01 f302 	lsl.w	r3, r1, r2
 8010556:	f1c2 0120 	rsb	r1, r2, #32
 801055a:	fa20 f101 	lsr.w	r1, r0, r1
 801055e:	fa0c fc02 	lsl.w	ip, ip, r2
 8010562:	ea41 0e03 	orr.w	lr, r1, r3
 8010566:	4094      	lsls	r4, r2
 8010568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801056c:	0c21      	lsrs	r1, r4, #16
 801056e:	fbbe f6f8 	udiv	r6, lr, r8
 8010572:	fa1f f78c 	uxth.w	r7, ip
 8010576:	fb08 e316 	mls	r3, r8, r6, lr
 801057a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801057e:	fb06 f107 	mul.w	r1, r6, r7
 8010582:	4299      	cmp	r1, r3
 8010584:	d90a      	bls.n	801059c <__udivmoddi4+0x64>
 8010586:	eb1c 0303 	adds.w	r3, ip, r3
 801058a:	f106 30ff 	add.w	r0, r6, #4294967295
 801058e:	f080 811f 	bcs.w	80107d0 <__udivmoddi4+0x298>
 8010592:	4299      	cmp	r1, r3
 8010594:	f240 811c 	bls.w	80107d0 <__udivmoddi4+0x298>
 8010598:	3e02      	subs	r6, #2
 801059a:	4463      	add	r3, ip
 801059c:	1a5b      	subs	r3, r3, r1
 801059e:	b2a4      	uxth	r4, r4
 80105a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80105a4:	fb08 3310 	mls	r3, r8, r0, r3
 80105a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80105ac:	fb00 f707 	mul.w	r7, r0, r7
 80105b0:	42a7      	cmp	r7, r4
 80105b2:	d90a      	bls.n	80105ca <__udivmoddi4+0x92>
 80105b4:	eb1c 0404 	adds.w	r4, ip, r4
 80105b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80105bc:	f080 810a 	bcs.w	80107d4 <__udivmoddi4+0x29c>
 80105c0:	42a7      	cmp	r7, r4
 80105c2:	f240 8107 	bls.w	80107d4 <__udivmoddi4+0x29c>
 80105c6:	4464      	add	r4, ip
 80105c8:	3802      	subs	r0, #2
 80105ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80105ce:	1be4      	subs	r4, r4, r7
 80105d0:	2600      	movs	r6, #0
 80105d2:	b11d      	cbz	r5, 80105dc <__udivmoddi4+0xa4>
 80105d4:	40d4      	lsrs	r4, r2
 80105d6:	2300      	movs	r3, #0
 80105d8:	e9c5 4300 	strd	r4, r3, [r5]
 80105dc:	4631      	mov	r1, r6
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	428b      	cmp	r3, r1
 80105e4:	d909      	bls.n	80105fa <__udivmoddi4+0xc2>
 80105e6:	2d00      	cmp	r5, #0
 80105e8:	f000 80ef 	beq.w	80107ca <__udivmoddi4+0x292>
 80105ec:	2600      	movs	r6, #0
 80105ee:	e9c5 0100 	strd	r0, r1, [r5]
 80105f2:	4630      	mov	r0, r6
 80105f4:	4631      	mov	r1, r6
 80105f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fa:	fab3 f683 	clz	r6, r3
 80105fe:	2e00      	cmp	r6, #0
 8010600:	d14a      	bne.n	8010698 <__udivmoddi4+0x160>
 8010602:	428b      	cmp	r3, r1
 8010604:	d302      	bcc.n	801060c <__udivmoddi4+0xd4>
 8010606:	4282      	cmp	r2, r0
 8010608:	f200 80f9 	bhi.w	80107fe <__udivmoddi4+0x2c6>
 801060c:	1a84      	subs	r4, r0, r2
 801060e:	eb61 0303 	sbc.w	r3, r1, r3
 8010612:	2001      	movs	r0, #1
 8010614:	469e      	mov	lr, r3
 8010616:	2d00      	cmp	r5, #0
 8010618:	d0e0      	beq.n	80105dc <__udivmoddi4+0xa4>
 801061a:	e9c5 4e00 	strd	r4, lr, [r5]
 801061e:	e7dd      	b.n	80105dc <__udivmoddi4+0xa4>
 8010620:	b902      	cbnz	r2, 8010624 <__udivmoddi4+0xec>
 8010622:	deff      	udf	#255	; 0xff
 8010624:	fab2 f282 	clz	r2, r2
 8010628:	2a00      	cmp	r2, #0
 801062a:	f040 8092 	bne.w	8010752 <__udivmoddi4+0x21a>
 801062e:	eba1 010c 	sub.w	r1, r1, ip
 8010632:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010636:	fa1f fe8c 	uxth.w	lr, ip
 801063a:	2601      	movs	r6, #1
 801063c:	0c20      	lsrs	r0, r4, #16
 801063e:	fbb1 f3f7 	udiv	r3, r1, r7
 8010642:	fb07 1113 	mls	r1, r7, r3, r1
 8010646:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801064a:	fb0e f003 	mul.w	r0, lr, r3
 801064e:	4288      	cmp	r0, r1
 8010650:	d908      	bls.n	8010664 <__udivmoddi4+0x12c>
 8010652:	eb1c 0101 	adds.w	r1, ip, r1
 8010656:	f103 38ff 	add.w	r8, r3, #4294967295
 801065a:	d202      	bcs.n	8010662 <__udivmoddi4+0x12a>
 801065c:	4288      	cmp	r0, r1
 801065e:	f200 80cb 	bhi.w	80107f8 <__udivmoddi4+0x2c0>
 8010662:	4643      	mov	r3, r8
 8010664:	1a09      	subs	r1, r1, r0
 8010666:	b2a4      	uxth	r4, r4
 8010668:	fbb1 f0f7 	udiv	r0, r1, r7
 801066c:	fb07 1110 	mls	r1, r7, r0, r1
 8010670:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010674:	fb0e fe00 	mul.w	lr, lr, r0
 8010678:	45a6      	cmp	lr, r4
 801067a:	d908      	bls.n	801068e <__udivmoddi4+0x156>
 801067c:	eb1c 0404 	adds.w	r4, ip, r4
 8010680:	f100 31ff 	add.w	r1, r0, #4294967295
 8010684:	d202      	bcs.n	801068c <__udivmoddi4+0x154>
 8010686:	45a6      	cmp	lr, r4
 8010688:	f200 80bb 	bhi.w	8010802 <__udivmoddi4+0x2ca>
 801068c:	4608      	mov	r0, r1
 801068e:	eba4 040e 	sub.w	r4, r4, lr
 8010692:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8010696:	e79c      	b.n	80105d2 <__udivmoddi4+0x9a>
 8010698:	f1c6 0720 	rsb	r7, r6, #32
 801069c:	40b3      	lsls	r3, r6
 801069e:	fa22 fc07 	lsr.w	ip, r2, r7
 80106a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80106a6:	fa20 f407 	lsr.w	r4, r0, r7
 80106aa:	fa01 f306 	lsl.w	r3, r1, r6
 80106ae:	431c      	orrs	r4, r3
 80106b0:	40f9      	lsrs	r1, r7
 80106b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80106b6:	fa00 f306 	lsl.w	r3, r0, r6
 80106ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80106be:	0c20      	lsrs	r0, r4, #16
 80106c0:	fa1f fe8c 	uxth.w	lr, ip
 80106c4:	fb09 1118 	mls	r1, r9, r8, r1
 80106c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80106cc:	fb08 f00e 	mul.w	r0, r8, lr
 80106d0:	4288      	cmp	r0, r1
 80106d2:	fa02 f206 	lsl.w	r2, r2, r6
 80106d6:	d90b      	bls.n	80106f0 <__udivmoddi4+0x1b8>
 80106d8:	eb1c 0101 	adds.w	r1, ip, r1
 80106dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80106e0:	f080 8088 	bcs.w	80107f4 <__udivmoddi4+0x2bc>
 80106e4:	4288      	cmp	r0, r1
 80106e6:	f240 8085 	bls.w	80107f4 <__udivmoddi4+0x2bc>
 80106ea:	f1a8 0802 	sub.w	r8, r8, #2
 80106ee:	4461      	add	r1, ip
 80106f0:	1a09      	subs	r1, r1, r0
 80106f2:	b2a4      	uxth	r4, r4
 80106f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80106f8:	fb09 1110 	mls	r1, r9, r0, r1
 80106fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8010700:	fb00 fe0e 	mul.w	lr, r0, lr
 8010704:	458e      	cmp	lr, r1
 8010706:	d908      	bls.n	801071a <__udivmoddi4+0x1e2>
 8010708:	eb1c 0101 	adds.w	r1, ip, r1
 801070c:	f100 34ff 	add.w	r4, r0, #4294967295
 8010710:	d26c      	bcs.n	80107ec <__udivmoddi4+0x2b4>
 8010712:	458e      	cmp	lr, r1
 8010714:	d96a      	bls.n	80107ec <__udivmoddi4+0x2b4>
 8010716:	3802      	subs	r0, #2
 8010718:	4461      	add	r1, ip
 801071a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801071e:	fba0 9402 	umull	r9, r4, r0, r2
 8010722:	eba1 010e 	sub.w	r1, r1, lr
 8010726:	42a1      	cmp	r1, r4
 8010728:	46c8      	mov	r8, r9
 801072a:	46a6      	mov	lr, r4
 801072c:	d356      	bcc.n	80107dc <__udivmoddi4+0x2a4>
 801072e:	d053      	beq.n	80107d8 <__udivmoddi4+0x2a0>
 8010730:	b15d      	cbz	r5, 801074a <__udivmoddi4+0x212>
 8010732:	ebb3 0208 	subs.w	r2, r3, r8
 8010736:	eb61 010e 	sbc.w	r1, r1, lr
 801073a:	fa01 f707 	lsl.w	r7, r1, r7
 801073e:	fa22 f306 	lsr.w	r3, r2, r6
 8010742:	40f1      	lsrs	r1, r6
 8010744:	431f      	orrs	r7, r3
 8010746:	e9c5 7100 	strd	r7, r1, [r5]
 801074a:	2600      	movs	r6, #0
 801074c:	4631      	mov	r1, r6
 801074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010752:	f1c2 0320 	rsb	r3, r2, #32
 8010756:	40d8      	lsrs	r0, r3
 8010758:	fa0c fc02 	lsl.w	ip, ip, r2
 801075c:	fa21 f303 	lsr.w	r3, r1, r3
 8010760:	4091      	lsls	r1, r2
 8010762:	4301      	orrs	r1, r0
 8010764:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010768:	fa1f fe8c 	uxth.w	lr, ip
 801076c:	fbb3 f0f7 	udiv	r0, r3, r7
 8010770:	fb07 3610 	mls	r6, r7, r0, r3
 8010774:	0c0b      	lsrs	r3, r1, #16
 8010776:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801077a:	fb00 f60e 	mul.w	r6, r0, lr
 801077e:	429e      	cmp	r6, r3
 8010780:	fa04 f402 	lsl.w	r4, r4, r2
 8010784:	d908      	bls.n	8010798 <__udivmoddi4+0x260>
 8010786:	eb1c 0303 	adds.w	r3, ip, r3
 801078a:	f100 38ff 	add.w	r8, r0, #4294967295
 801078e:	d22f      	bcs.n	80107f0 <__udivmoddi4+0x2b8>
 8010790:	429e      	cmp	r6, r3
 8010792:	d92d      	bls.n	80107f0 <__udivmoddi4+0x2b8>
 8010794:	3802      	subs	r0, #2
 8010796:	4463      	add	r3, ip
 8010798:	1b9b      	subs	r3, r3, r6
 801079a:	b289      	uxth	r1, r1
 801079c:	fbb3 f6f7 	udiv	r6, r3, r7
 80107a0:	fb07 3316 	mls	r3, r7, r6, r3
 80107a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80107a8:	fb06 f30e 	mul.w	r3, r6, lr
 80107ac:	428b      	cmp	r3, r1
 80107ae:	d908      	bls.n	80107c2 <__udivmoddi4+0x28a>
 80107b0:	eb1c 0101 	adds.w	r1, ip, r1
 80107b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80107b8:	d216      	bcs.n	80107e8 <__udivmoddi4+0x2b0>
 80107ba:	428b      	cmp	r3, r1
 80107bc:	d914      	bls.n	80107e8 <__udivmoddi4+0x2b0>
 80107be:	3e02      	subs	r6, #2
 80107c0:	4461      	add	r1, ip
 80107c2:	1ac9      	subs	r1, r1, r3
 80107c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80107c8:	e738      	b.n	801063c <__udivmoddi4+0x104>
 80107ca:	462e      	mov	r6, r5
 80107cc:	4628      	mov	r0, r5
 80107ce:	e705      	b.n	80105dc <__udivmoddi4+0xa4>
 80107d0:	4606      	mov	r6, r0
 80107d2:	e6e3      	b.n	801059c <__udivmoddi4+0x64>
 80107d4:	4618      	mov	r0, r3
 80107d6:	e6f8      	b.n	80105ca <__udivmoddi4+0x92>
 80107d8:	454b      	cmp	r3, r9
 80107da:	d2a9      	bcs.n	8010730 <__udivmoddi4+0x1f8>
 80107dc:	ebb9 0802 	subs.w	r8, r9, r2
 80107e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80107e4:	3801      	subs	r0, #1
 80107e6:	e7a3      	b.n	8010730 <__udivmoddi4+0x1f8>
 80107e8:	4646      	mov	r6, r8
 80107ea:	e7ea      	b.n	80107c2 <__udivmoddi4+0x28a>
 80107ec:	4620      	mov	r0, r4
 80107ee:	e794      	b.n	801071a <__udivmoddi4+0x1e2>
 80107f0:	4640      	mov	r0, r8
 80107f2:	e7d1      	b.n	8010798 <__udivmoddi4+0x260>
 80107f4:	46d0      	mov	r8, sl
 80107f6:	e77b      	b.n	80106f0 <__udivmoddi4+0x1b8>
 80107f8:	3b02      	subs	r3, #2
 80107fa:	4461      	add	r1, ip
 80107fc:	e732      	b.n	8010664 <__udivmoddi4+0x12c>
 80107fe:	4630      	mov	r0, r6
 8010800:	e709      	b.n	8010616 <__udivmoddi4+0xde>
 8010802:	4464      	add	r4, ip
 8010804:	3802      	subs	r0, #2
 8010806:	e742      	b.n	801068e <__udivmoddi4+0x156>

08010808 <__aeabi_idiv0>:
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop

0801080c <configAHRS>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configAHRS_t, configAHRS);
 801080c:	b480      	push	{r7}
 801080e:	af00      	add	r7, sp, #0
 8010810:	4b02      	ldr	r3, [pc, #8]	; (801081c <configAHRS+0x10>)
 8010812:	4618      	mov	r0, r3
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr
 801081c:	2000a42c 	.word	0x2000a42c

08010820 <iniciarAHRS>:
**  Descripcion:    Inicia el estimador
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarAHRS(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
    memset(&ahrs, 0, sizeof(ahrs_t));
 8010824:	22a4      	movs	r2, #164	; 0xa4
 8010826:	2100      	movs	r1, #0
 8010828:	4816      	ldr	r0, [pc, #88]	; (8010884 <iniciarAHRS+0x64>)
 801082a:	f024 fd39 	bl	80352a0 <memset>
    memset(&filtroAcelAng[0], 0, sizeof(filtroPasaBajo2P_t));
 801082e:	222c      	movs	r2, #44	; 0x2c
 8010830:	2100      	movs	r1, #0
 8010832:	4815      	ldr	r0, [pc, #84]	; (8010888 <iniciarAHRS+0x68>)
 8010834:	f024 fd34 	bl	80352a0 <memset>
    memset(&filtroAcelAng[1], 0, sizeof(filtroPasaBajo2P_t));
 8010838:	222c      	movs	r2, #44	; 0x2c
 801083a:	2100      	movs	r1, #0
 801083c:	4813      	ldr	r0, [pc, #76]	; (801088c <iniciarAHRS+0x6c>)
 801083e:	f024 fd2f 	bl	80352a0 <memset>
    memset(&filtroAcelAng[2], 0, sizeof(filtroPasaBajo2P_t));
 8010842:	222c      	movs	r2, #44	; 0x2c
 8010844:	2100      	movs	r1, #0
 8010846:	4812      	ldr	r0, [pc, #72]	; (8010890 <iniciarAHRS+0x70>)
 8010848:	f024 fd2a 	bl	80352a0 <memset>

    ahrs.actitud.cuerpo.qb[0] = 1.0;
 801084c:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <iniciarAHRS+0x64>)
 801084e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010852:	601a      	str	r2, [r3, #0]

    switch (configAHRS()->filtro) {
 8010854:	f7ff ffda 	bl	801080c <configAHRS>
 8010858:	4603      	mov	r3, r0
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d002      	beq.n	8010866 <iniciarAHRS+0x46>
 8010860:	2b01      	cmp	r3, #1
 8010862:	d004      	beq.n	801086e <iniciarAHRS+0x4e>
        case MADGWICK:
            tablaFnAHRS = &tablaFnAHRSmadgwick;
            break;

        default:
            break;
 8010864:	e007      	b.n	8010876 <iniciarAHRS+0x56>
            tablaFnAHRS = &tablaFnAHRSmahony;
 8010866:	4b0b      	ldr	r3, [pc, #44]	; (8010894 <iniciarAHRS+0x74>)
 8010868:	4a0b      	ldr	r2, [pc, #44]	; (8010898 <iniciarAHRS+0x78>)
 801086a:	601a      	str	r2, [r3, #0]
        	break;
 801086c:	e003      	b.n	8010876 <iniciarAHRS+0x56>
            tablaFnAHRS = &tablaFnAHRSmadgwick;
 801086e:	4b09      	ldr	r3, [pc, #36]	; (8010894 <iniciarAHRS+0x74>)
 8010870:	4a0a      	ldr	r2, [pc, #40]	; (801089c <iniciarAHRS+0x7c>)
 8010872:	601a      	str	r2, [r3, #0]
            break;
 8010874:	bf00      	nop
    }

    tablaFnAHRS->iniciarAHRS();
 8010876:	4b07      	ldr	r3, [pc, #28]	; (8010894 <iniciarAHRS+0x74>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4798      	blx	r3
}
 801087e:	bf00      	nop
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	20002c04 	.word	0x20002c04
 8010888:	20002cac 	.word	0x20002cac
 801088c:	20002cd8 	.word	0x20002cd8
 8010890:	20002d04 	.word	0x20002d04
 8010894:	20002ca8 	.word	0x20002ca8
 8010898:	20000008 	.word	0x20000008
 801089c:	20000000 	.word	0x20000000

080108a0 <ajustarFiltroAcelAngAHRS>:
**  Descripcion:    Ajusta la frecuencia del filtro pasa bajos de la aceleracion angular
**  Parametros:     Frecuencia a ajustar
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarFiltroAcelAngAHRS(uint16_t frec)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 3; i++)
 80108aa:	2300      	movs	r3, #0
 80108ac:	73fb      	strb	r3, [r7, #15]
 80108ae:	e01c      	b.n	80108ea <ajustarFiltroAcelAngAHRS+0x4a>
        ajustarFiltroPasaBajo2P(&filtroAcelAng[i], configAHRS()->fecFiltroAcelAng, frec);
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	222c      	movs	r2, #44	; 0x2c
 80108b4:	fb02 f303 	mul.w	r3, r2, r3
 80108b8:	4a10      	ldr	r2, [pc, #64]	; (80108fc <ajustarFiltroAcelAngAHRS+0x5c>)
 80108ba:	189c      	adds	r4, r3, r2
 80108bc:	f7ff ffa6 	bl	801080c <configAHRS>
 80108c0:	4603      	mov	r3, r0
 80108c2:	885b      	ldrh	r3, [r3, #2]
 80108c4:	ee07 3a90 	vmov	s15, r3
 80108c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108cc:	88fb      	ldrh	r3, [r7, #6]
 80108ce:	ee07 3a10 	vmov	s14, r3
 80108d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80108d6:	eef0 0a47 	vmov.f32	s1, s14
 80108da:	eeb0 0a67 	vmov.f32	s0, s15
 80108de:	4620      	mov	r0, r4
 80108e0:	f00b fc84 	bl	801c1ec <ajustarFiltroPasaBajo2P>
    for (uint8_t i = 0; i < 3; i++)
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	3301      	adds	r3, #1
 80108e8:	73fb      	strb	r3, [r7, #15]
 80108ea:	7bfb      	ldrb	r3, [r7, #15]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d9df      	bls.n	80108b0 <ajustarFiltroAcelAngAHRS+0x10>
}
 80108f0:	bf00      	nop
 80108f2:	bf00      	nop
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd90      	pop	{r4, r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20002cac 	.word	0x20002cac

08010900 <actualizarActitudAHRS>:
**  Descripcion:    Actualizar el estimador de la orientacion
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarActitudAHRS(void)
{
 8010900:	b590      	push	{r4, r7, lr}
 8010902:	b08f      	sub	sp, #60	; 0x3c
 8010904:	af04      	add	r7, sp, #16
    if (imuGenOperativa() && magGenOperativo()) {
 8010906:	f015 f8e5 	bl	8025ad4 <imuGenOperativa>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d044      	beq.n	801099a <actualizarActitudAHRS+0x9a>
 8010910:	f017 f8e4 	bl	8027adc <magGenOperativo>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d03f      	beq.n	801099a <actualizarActitudAHRS+0x9a>
        float w[3], a[3], m[3];

        // Actualizacion de los angulos de Euler
        giroIMU(w);
 801091a:	f107 031c 	add.w	r3, r7, #28
 801091e:	4618      	mov	r0, r3
 8010920:	f015 f8e4 	bl	8025aec <giroIMU>
        acelIMU(a);
 8010924:	f107 0310 	add.w	r3, r7, #16
 8010928:	4618      	mov	r0, r3
 801092a:	f015 f8f9 	bl	8025b20 <acelIMU>
        campoMag(m);
 801092e:	1d3b      	adds	r3, r7, #4
 8010930:	4618      	mov	r0, r3
 8010932:	f017 f8df 	bl	8027af4 <campoMag>

        //sprintf(var, "%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f\r\n", a[0], a[1], a[2], w[0], w[1], w[2], m[0], m[1], m[2]);
        //escribirBufferUSB((uint8_t *)var, strlen(var));

        // Actualizacion del algoritmo
        tablaFnAHRS->actualizarAHRS(configAHRS()->habilitarMag, ahrs.actitud.cuerpo.qb, ahrs.actitud.cuerpo.wb, ahrs.actitud.cuerpo.bias, w, a, m);
 8010936:	4b1b      	ldr	r3, [pc, #108]	; (80109a4 <actualizarActitudAHRS+0xa4>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	685c      	ldr	r4, [r3, #4]
 801093c:	f7ff ff66 	bl	801080c <configAHRS>
 8010940:	4603      	mov	r3, r0
 8010942:	7858      	ldrb	r0, [r3, #1]
 8010944:	1d3b      	adds	r3, r7, #4
 8010946:	9302      	str	r3, [sp, #8]
 8010948:	f107 0310 	add.w	r3, r7, #16
 801094c:	9301      	str	r3, [sp, #4]
 801094e:	f107 031c 	add.w	r3, r7, #28
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	4b14      	ldr	r3, [pc, #80]	; (80109a8 <actualizarActitudAHRS+0xa8>)
 8010956:	4a15      	ldr	r2, [pc, #84]	; (80109ac <actualizarActitudAHRS+0xac>)
 8010958:	4915      	ldr	r1, [pc, #84]	; (80109b0 <actualizarActitudAHRS+0xb0>)
 801095a:	47a0      	blx	r4
        calcularVelAngularBiasAHRS(ahrs.actitud.cuerpo.wb, ahrs.actitud.cuerpo.bias);
 801095c:	4912      	ldr	r1, [pc, #72]	; (80109a8 <actualizarActitudAHRS+0xa8>)
 801095e:	4813      	ldr	r0, [pc, #76]	; (80109ac <actualizarActitudAHRS+0xac>)
 8010960:	f000 f936 	bl	8010bd0 <calcularVelAngularBiasAHRS>
        calcularEulerAHRS(ahrs.actitud.cuerpo.qb, ahrs.actitud.tierra.euler);
 8010964:	4913      	ldr	r1, [pc, #76]	; (80109b4 <actualizarActitudAHRS+0xb4>)
 8010966:	4812      	ldr	r0, [pc, #72]	; (80109b0 <actualizarActitudAHRS+0xb0>)
 8010968:	f000 f99e 	bl	8010ca8 <calcularEulerAHRS>

        // Filtro complementario en Yaw
        if (!configAHRS()->habilitarMag)
 801096c:	f7ff ff4e 	bl	801080c <configAHRS>
 8010970:	4603      	mov	r3, r0
 8010972:	785b      	ldrb	r3, [r3, #1]
 8010974:	f083 0301 	eor.w	r3, r3, #1
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00d      	beq.n	801099a <actualizarActitudAHRS+0x9a>
        	actualizarActitudYawAHRS(configAHRS()->kFC, m, w, ahrs.actitud.tierra.euler);
 801097e:	f7ff ff45 	bl	801080c <configAHRS>
 8010982:	4603      	mov	r3, r0
 8010984:	edd3 7a01 	vldr	s15, [r3, #4]
 8010988:	f107 011c 	add.w	r1, r7, #28
 801098c:	1d3b      	adds	r3, r7, #4
 801098e:	4a09      	ldr	r2, [pc, #36]	; (80109b4 <actualizarActitudAHRS+0xb4>)
 8010990:	4618      	mov	r0, r3
 8010992:	eeb0 0a67 	vmov.f32	s0, s15
 8010996:	f000 f80f 	bl	80109b8 <actualizarActitudYawAHRS>
    }
}
 801099a:	bf00      	nop
 801099c:	372c      	adds	r7, #44	; 0x2c
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd90      	pop	{r4, r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20002ca8 	.word	0x20002ca8
 80109a8:	20002c2c 	.word	0x20002c2c
 80109ac:	20002c14 	.word	0x20002c14
 80109b0:	20002c04 	.word	0x20002c04
 80109b4:	20002c78 	.word	0x20002c78

080109b8 <actualizarActitudYawAHRS>:
**  Parametros:     Ganancia del filtro complementario, campo magnetico, velocidad angular
**                  angulos Euler
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarActitudYawAHRS(float k, float *m, float *w, float *euler)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	ed2d 8b02 	vpush	{d8}
 80109be:	b08c      	sub	sp, #48	; 0x30
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80109c6:	60b8      	str	r0, [r7, #8]
 80109c8:	6079      	str	r1, [r7, #4]
 80109ca:	603a      	str	r2, [r7, #0]
    float mag[3];
    float roll, pitch;

    static uint32_t tiempoAnterior = 0;
    uint32_t tiempoActual = micros();
 80109cc:	f007 f884 	bl	8017ad8 <micros>
 80109d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    float dt = (tiempoActual - tiempoAnterior) / 1000000.0;
 80109d2:	4b79      	ldr	r3, [pc, #484]	; (8010bb8 <actualizarActitudYawAHRS+0x200>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	ee07 3a90 	vmov	s15, r3
 80109de:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80109e2:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8010ba0 <actualizarActitudYawAHRS+0x1e8>
 80109e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80109ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80109ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tiempoAnterior = tiempoActual;
 80109f2:	4a71      	ldr	r2, [pc, #452]	; (8010bb8 <actualizarActitudYawAHRS+0x200>)
 80109f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f6:	6013      	str	r3, [r2, #0]

    mag[0] = m[0];
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	617b      	str	r3, [r7, #20]
    mag[1] = m[1];
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	61bb      	str	r3, [r7, #24]
    mag[2] = -m[2];
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	3308      	adds	r3, #8
 8010a08:	edd3 7a00 	vldr	s15, [r3]
 8010a0c:	eef1 7a67 	vneg.f32	s15, s15
 8010a10:	edc7 7a07 	vstr	s15, [r7, #28]

    // Se normaliza el magnetometro
    normalizar3Array(mag);
 8010a14:	f107 0314 	add.w	r3, r7, #20
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f002 ff01 	bl	8013820 <normalizar3Array>

    // Calculo del angulo yaw
    roll = radianes(-euler[0]);
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	edd3 7a00 	vldr	s15, [r3]
 8010a24:	eef1 7a67 	vneg.f32	s15, s15
 8010a28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010a2c:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8010ba8 <actualizarActitudYawAHRS+0x1f0>
 8010a30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010a38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    pitch = radianes(-euler[1]);
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	edd3 7a00 	vldr	s15, [r3]
 8010a44:	eef1 7a67 	vneg.f32	s15, s15
 8010a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010a4c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8010ba8 <actualizarActitudYawAHRS+0x1f0>
 8010a50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010a58:	edc7 7a08 	vstr	s15, [r7, #32]

    xh = mag[0] * cosf(pitch) + mag[1] * sinf(roll) * sinf(pitch) + mag[2] * cosf(roll) * sinf(pitch);
 8010a5c:	ed97 8a05 	vldr	s16, [r7, #20]
 8010a60:	ed97 0a08 	vldr	s0, [r7, #32]
 8010a64:	f027 fc5c 	bl	8038320 <cosf>
 8010a68:	eef0 7a40 	vmov.f32	s15, s0
 8010a6c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010a70:	edd7 8a06 	vldr	s17, [r7, #24]
 8010a74:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010a78:	f028 faf2 	bl	8039060 <sinf>
 8010a7c:	eef0 7a40 	vmov.f32	s15, s0
 8010a80:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a84:	ed97 0a08 	vldr	s0, [r7, #32]
 8010a88:	f028 faea 	bl	8039060 <sinf>
 8010a8c:	eef0 7a40 	vmov.f32	s15, s0
 8010a90:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010a94:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010a98:	edd7 8a07 	vldr	s17, [r7, #28]
 8010a9c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010aa0:	f027 fc3e 	bl	8038320 <cosf>
 8010aa4:	eef0 7a40 	vmov.f32	s15, s0
 8010aa8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010aac:	ed97 0a08 	vldr	s0, [r7, #32]
 8010ab0:	f028 fad6 	bl	8039060 <sinf>
 8010ab4:	eef0 7a40 	vmov.f32	s15, s0
 8010ab8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010abc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010ac0:	4b3e      	ldr	r3, [pc, #248]	; (8010bbc <actualizarActitudYawAHRS+0x204>)
 8010ac2:	edc3 7a00 	vstr	s15, [r3]
    yh = mag[1] * cosf(roll)  - mag[2] * sinf(roll);
 8010ac6:	ed97 8a06 	vldr	s16, [r7, #24]
 8010aca:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010ace:	f027 fc27 	bl	8038320 <cosf>
 8010ad2:	eef0 7a40 	vmov.f32	s15, s0
 8010ad6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010ada:	edd7 8a07 	vldr	s17, [r7, #28]
 8010ade:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010ae2:	f028 fabd 	bl	8039060 <sinf>
 8010ae6:	eef0 7a40 	vmov.f32	s15, s0
 8010aea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010aee:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010af2:	4b33      	ldr	r3, [pc, #204]	; (8010bc0 <actualizarActitudYawAHRS+0x208>)
 8010af4:	edc3 7a00 	vstr	s15, [r3]
    yawMag = grados(atan2f(-yh, xh));
 8010af8:	4b31      	ldr	r3, [pc, #196]	; (8010bc0 <actualizarActitudYawAHRS+0x208>)
 8010afa:	edd3 7a00 	vldr	s15, [r3]
 8010afe:	eef1 7a67 	vneg.f32	s15, s15
 8010b02:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <actualizarActitudYawAHRS+0x204>)
 8010b04:	ed93 7a00 	vldr	s14, [r3]
 8010b08:	eef0 0a47 	vmov.f32	s1, s14
 8010b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8010b10:	f028 fb8a 	bl	8039228 <atan2f>
 8010b14:	eef0 7a40 	vmov.f32	s15, s0
 8010b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010b1c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8010bb0 <actualizarActitudYawAHRS+0x1f8>
 8010b20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010b28:	4b26      	ldr	r3, [pc, #152]	; (8010bc4 <actualizarActitudYawAHRS+0x20c>)
 8010b2a:	edc3 7a00 	vstr	s15, [r3]

    // Se convierte el angulo de -180 a 180 a 0 360
    if (yawMag < 0)
 8010b2e:	4b25      	ldr	r3, [pc, #148]	; (8010bc4 <actualizarActitudYawAHRS+0x20c>)
 8010b30:	edd3 7a00 	vldr	s15, [r3]
 8010b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	d509      	bpl.n	8010b52 <actualizarActitudYawAHRS+0x19a>
    	yawMag += 360;
 8010b3e:	4b21      	ldr	r3, [pc, #132]	; (8010bc4 <actualizarActitudYawAHRS+0x20c>)
 8010b40:	edd3 7a00 	vldr	s15, [r3]
 8010b44:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8010bc8 <actualizarActitudYawAHRS+0x210>
 8010b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b4c:	4b1d      	ldr	r3, [pc, #116]	; (8010bc4 <actualizarActitudYawAHRS+0x20c>)
 8010b4e:	edc3 7a00 	vstr	s15, [r3]

    // Filtro complementario
    filtro = (1 - k) * (filtro + w[2] * dt) + k * yawMag;
 8010b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	3308      	adds	r3, #8
 8010b62:	edd3 6a00 	vldr	s13, [r3]
 8010b66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010b6e:	4b17      	ldr	r3, [pc, #92]	; (8010bcc <actualizarActitudYawAHRS+0x214>)
 8010b70:	edd3 7a00 	vldr	s15, [r3]
 8010b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010b7c:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <actualizarActitudYawAHRS+0x20c>)
 8010b7e:	edd3 6a00 	vldr	s13, [r3]
 8010b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <actualizarActitudYawAHRS+0x214>)
 8010b90:	edc3 7a00 	vstr	s15, [r3]
}
 8010b94:	bf00      	nop
 8010b96:	3730      	adds	r7, #48	; 0x30
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	ecbd 8b02 	vpop	{d8}
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	00000000 	.word	0x00000000
 8010ba4:	412e8480 	.word	0x412e8480
 8010ba8:	a2529d39 	.word	0xa2529d39
 8010bac:	3f91df46 	.word	0x3f91df46
 8010bb0:	1a63c1f8 	.word	0x1a63c1f8
 8010bb4:	404ca5dc 	.word	0x404ca5dc
 8010bb8:	20002d40 	.word	0x20002d40
 8010bbc:	20002d38 	.word	0x20002d38
 8010bc0:	20002d3c 	.word	0x20002d3c
 8010bc4:	20002d30 	.word	0x20002d30
 8010bc8:	43b40000 	.word	0x43b40000
 8010bcc:	20002d34 	.word	0x20002d34

08010bd0 <calcularVelAngularBiasAHRS>:
**                  calcula el bias del giroscopio
**  Parametros:     Velocidad angular a calcular, bias a calcular
**  Retorno:        Ninguno
****************************************************************************************/
void calcularVelAngularBiasAHRS(float *w, float *bias)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
    w[0] = grados(w[0]);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	edd3 7a00 	vldr	s15, [r3]
 8010be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010be4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010be8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010bec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	edc3 7a00 	vstr	s15, [r3]
    w[1] = grados(w[1]);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	edd3 7a00 	vldr	s15, [r3]
 8010bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010c02:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010c12:	edc3 7a00 	vstr	s15, [r3]
    w[2] = grados(w[2]);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	3308      	adds	r3, #8
 8010c1a:	edd3 7a00 	vldr	s15, [r3]
 8010c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010c22:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	3308      	adds	r3, #8
 8010c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010c32:	edc3 7a00 	vstr	s15, [r3]

    bias[0] = grados(bias[0]);
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	edd3 7a00 	vldr	s15, [r3]
 8010c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010c40:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010c44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	edc3 7a00 	vstr	s15, [r3]
    bias[1] = grados(bias[1]);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	3304      	adds	r3, #4
 8010c56:	edd3 7a00 	vldr	s15, [r3]
 8010c5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010c5e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010c62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	3304      	adds	r3, #4
 8010c6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010c6e:	edc3 7a00 	vstr	s15, [r3]
    bias[2] = grados(bias[2]);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	3308      	adds	r3, #8
 8010c76:	edd3 7a00 	vldr	s15, [r3]
 8010c7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010c7e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010ca0 <calcularVelAngularBiasAHRS+0xd0>
 8010c82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	3308      	adds	r3, #8
 8010c8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010c8e:	edc3 7a00 	vstr	s15, [r3]
}
 8010c92:	bf00      	nop
 8010c94:	370c      	adds	r7, #12
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	1a63c1f8 	.word	0x1a63c1f8
 8010ca4:	404ca5dc 	.word	0x404ca5dc

08010ca8 <calcularEulerAHRS>:
**  Descripcion:    Calcula los angulos de Euler
**  Parametros:     cuaternion, euler
**  Retorno:        Ninguno
****************************************************************************************/
void calcularEulerAHRS(float *q, float *euler)
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
    // Ecuaciones sacadas de Madgwick con el conjugado implicito en las formulas
    euler[0] = atan2f(2 * q[2] * q[3] + 2 * q[0] * q[1], 2 * q[0] * q[0] + 2 * q[3] * q[3] - 1);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	edd3 7a00 	vldr	s15, [r3]
 8010cba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	330c      	adds	r3, #12
 8010cc2:	edd3 7a00 	vldr	s15, [r3]
 8010cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	edd3 7a00 	vldr	s15, [r3]
 8010cd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	3304      	adds	r3, #4
 8010cd8:	edd3 7a00 	vldr	s15, [r3]
 8010cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ce0:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	edd3 7a00 	vldr	s15, [r3]
 8010cea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	edd3 7a00 	vldr	s15, [r3]
 8010cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	330c      	adds	r3, #12
 8010cfc:	edd3 7a00 	vldr	s15, [r3]
 8010d00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	330c      	adds	r3, #12
 8010d08:	edd3 7a00 	vldr	s15, [r3]
 8010d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d1c:	eef0 0a67 	vmov.f32	s1, s15
 8010d20:	eeb0 0a46 	vmov.f32	s0, s12
 8010d24:	f028 fa80 	bl	8039228 <atan2f>
 8010d28:	eef0 7a40 	vmov.f32	s15, s0
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	edc3 7a00 	vstr	s15, [r3]
    euler[1] = -asinf(2 * (q[1] * q[3] - q[0] * q[2]));
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	3304      	adds	r3, #4
 8010d36:	ed93 7a00 	vldr	s14, [r3]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	330c      	adds	r3, #12
 8010d3e:	edd3 7a00 	vldr	s15, [r3]
 8010d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	edd3 6a00 	vldr	s13, [r3]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3308      	adds	r3, #8
 8010d50:	edd3 7a00 	vldr	s15, [r3]
 8010d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010d60:	eeb0 0a67 	vmov.f32	s0, s15
 8010d64:	f028 fa34 	bl	80391d0 <asinf>
 8010d68:	eef0 7a40 	vmov.f32	s15, s0
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	eef1 7a67 	vneg.f32	s15, s15
 8010d74:	edc3 7a00 	vstr	s15, [r3]
    euler[2] = atan2f(2 * q[1] * q[2] + 2 * q[0] * q[3], 2 * q[0] * q[0] + 2 * q[1] * q[1] - 1);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	edd3 7a00 	vldr	s15, [r3]
 8010d80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3308      	adds	r3, #8
 8010d88:	edd3 7a00 	vldr	s15, [r3]
 8010d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	edd3 7a00 	vldr	s15, [r3]
 8010d96:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	330c      	adds	r3, #12
 8010d9e:	edd3 7a00 	vldr	s15, [r3]
 8010da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010da6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	edd3 7a00 	vldr	s15, [r3]
 8010db0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	edd3 7a00 	vldr	s15, [r3]
 8010dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	edd3 7a00 	vldr	s15, [r3]
 8010dc6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3304      	adds	r3, #4
 8010dce:	edd3 7a00 	vldr	s15, [r3]
 8010dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	f103 0408 	add.w	r4, r3, #8
 8010de8:	eef0 0a67 	vmov.f32	s1, s15
 8010dec:	eeb0 0a46 	vmov.f32	s0, s12
 8010df0:	f028 fa1a 	bl	8039228 <atan2f>
 8010df4:	eef0 7a40 	vmov.f32	s15, s0
 8010df8:	edc4 7a00 	vstr	s15, [r4]

    // Conversion a grados
    euler[0] = grados(euler[0]);
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	edd3 7a00 	vldr	s15, [r3]
 8010e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010e06:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8010e90 <calcularEulerAHRS+0x1e8>
 8010e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	edc3 7a00 	vstr	s15, [r3]
    euler[1] = grados(euler[1]);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	3304      	adds	r3, #4
 8010e1c:	edd3 7a00 	vldr	s15, [r3]
 8010e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010e24:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8010e90 <calcularEulerAHRS+0x1e8>
 8010e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	3304      	adds	r3, #4
 8010e30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010e34:	edc3 7a00 	vstr	s15, [r3]
    euler[2] = grados(euler[2]);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	edd3 7a00 	vldr	s15, [r3]
 8010e40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010e44:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8010e90 <calcularEulerAHRS+0x1e8>
 8010e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	3308      	adds	r3, #8
 8010e50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010e54:	edc3 7a00 	vstr	s15, [r3]

    // Se convierte el angulo de -180 a 180 a 0 360
    if (euler[2] < 0)
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	3308      	adds	r3, #8
 8010e5c:	edd3 7a00 	vldr	s15, [r3]
 8010e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e68:	d400      	bmi.n	8010e6c <calcularEulerAHRS+0x1c4>
    	euler[2] += 360;
}
 8010e6a:	e00b      	b.n	8010e84 <calcularEulerAHRS+0x1dc>
    	euler[2] += 360;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	3308      	adds	r3, #8
 8010e70:	edd3 7a00 	vldr	s15, [r3]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	3308      	adds	r3, #8
 8010e78:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8010e98 <calcularEulerAHRS+0x1f0>
 8010e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e80:	edc3 7a00 	vstr	s15, [r3]
}
 8010e84:	bf00      	nop
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd90      	pop	{r4, r7, pc}
 8010e8c:	f3af 8000 	nop.w
 8010e90:	1a63c1f8 	.word	0x1a63c1f8
 8010e94:	404ca5dc 	.word	0x404ca5dc
 8010e98:	43b40000 	.word	0x43b40000

08010e9c <actualizarPosicionAHRS>:
**  Descripcion:    Actualizar el estimador de posicion
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarPosicionAHRS(void)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	ed2d 8b02 	vpush	{d8}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
    if (baroGenOperativo()) {
 8010ea6:	f010 f853 	bl	8020f50 <baroGenOperativo>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d028      	beq.n	8010f02 <actualizarPosicionAHRS+0x66>
        // Obtencion de la altitud
        float alt = calcularAltitudBaroAHRS(presionSueloBaro() , presionBaro());
 8010eb0:	f010 f868 	bl	8020f84 <presionSueloBaro>
 8010eb4:	eeb0 8a40 	vmov.f32	s16, s0
 8010eb8:	f010 f856 	bl	8020f68 <presionBaro>
 8010ebc:	eef0 7a40 	vmov.f32	s15, s0
 8010ec0:	eef0 0a67 	vmov.f32	s1, s15
 8010ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8010ec8:	f000 f826 	bl	8010f18 <calcularAltitudBaroAHRS>
 8010ecc:	ed87 0a01 	vstr	s0, [r7, #4]

    	if (!(isnan(alt) || isinf(alt))) {
 8010ed0:	ed97 7a01 	vldr	s14, [r7, #4]
 8010ed4:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ed8:	eeb4 7a67 	vcmp.f32	s14, s15
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	d60f      	bvs.n	8010f02 <actualizarPosicionAHRS+0x66>
 8010ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ee6:	eef0 7ae7 	vabs.f32	s15, s15
 8010eea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010f10 <actualizarPosicionAHRS+0x74>
 8010eee:	eef4 7a47 	vcmp.f32	s15, s14
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	dd00      	ble.n	8010efa <actualizarPosicionAHRS+0x5e>
    		ahrs.posicion.pos[2] = alt;
    	}
    }
}
 8010ef8:	e003      	b.n	8010f02 <actualizarPosicionAHRS+0x66>
    		ahrs.posicion.pos[2] = alt;
 8010efa:	4a06      	ldr	r2, [pc, #24]	; (8010f14 <actualizarPosicionAHRS+0x78>)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8010f02:	bf00      	nop
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	ecbd 8b02 	vpop	{d8}
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	7f7fffff 	.word	0x7f7fffff
 8010f14:	20002c04 	.word	0x20002c04

08010f18 <calcularAltitudBaroAHRS>:
**  Descripcion:    Actualizar el estimador de posicion
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
float calcularAltitudBaroAHRS(float pBase, float p)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	ed2d 8b02 	vpush	{d8}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8010f26:	edc7 0a00 	vstr	s1, [r7]
    float temp = kelvin(temperaturaSueloBaro());
 8010f2a:	f010 f839 	bl	8020fa0 <temperaturaSueloBaro>
 8010f2e:	eef0 7a40 	vmov.f32	s15, s0
 8010f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010f36:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8010fa0 <calcularAltitudBaroAHRS+0x88>
 8010f3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010f3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010f42:	edc7 7a03 	vstr	s15, [r7, #12]
    float escalado = p / pBase;
 8010f46:	edd7 6a00 	vldr	s13, [r7]
 8010f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8010f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f52:	edc7 7a02 	vstr	s15, [r7, #8]

    return 153.8462f * temp * (1.0f - expf(0.190259f * logf(escalado)));
 8010f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f5a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8010fa8 <calcularAltitudBaroAHRS+0x90>
 8010f5e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010f62:	ed97 0a02 	vldr	s0, [r7, #8]
 8010f66:	f027 fe03 	bl	8038b70 <logf>
 8010f6a:	eef0 7a40 	vmov.f32	s15, s0
 8010f6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010fac <calcularAltitudBaroAHRS+0x94>
 8010f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f76:	eeb0 0a67 	vmov.f32	s0, s15
 8010f7a:	f027 fd85 	bl	8038a88 <expf>
 8010f7e:	eef0 7a40 	vmov.f32	s15, s0
 8010f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f8a:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8010f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	ecbd 8b02 	vpop	{d8}
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	f3af 8000 	nop.w
 8010fa0:	66666666 	.word	0x66666666
 8010fa4:	40711266 	.word	0x40711266
 8010fa8:	4319d8a1 	.word	0x4319d8a1
 8010fac:	3e42d341 	.word	0x3e42d341

08010fb0 <actitudAHRS>:
**  Descripcion:    Devuelve los angulos de Euler
**  Parametros:     Puntero a los angulos
**  Retorno:        Ninguno
****************************************************************************************/
void actitudAHRS(float *angulo)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
    angulo[0] = ahrs.actitud.tierra.euler[0];
 8010fb8:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <actitudAHRS+0x30>)
 8010fba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	601a      	str	r2, [r3, #0]
    angulo[1] = ahrs.actitud.tierra.euler[1];
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	4a06      	ldr	r2, [pc, #24]	; (8010fe0 <actitudAHRS+0x30>)
 8010fc6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8010fc8:	601a      	str	r2, [r3, #0]
    angulo[2] = ahrs.actitud.tierra.euler[2];
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	4a04      	ldr	r2, [pc, #16]	; (8010fe0 <actitudAHRS+0x30>)
 8010fd0:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8010fd2:	601a      	str	r2, [r3, #0]
}
 8010fd4:	bf00      	nop
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr
 8010fe0:	20002c04 	.word	0x20002c04

08010fe4 <acelAngularAHRS>:
**  Descripcion:    Devuelve la aceleracion angular
**  Parametros:     Aceleracion angular
**  Retorno:        Ninguno
****************************************************************************************/
void acelAngularAHRS(float *acel)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
	acel[0] = ahrs.actitud.cuerpo.ab[0];
 8010fec:	4b09      	ldr	r3, [pc, #36]	; (8011014 <acelAngularAHRS+0x30>)
 8010fee:	69da      	ldr	r2, [r3, #28]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	601a      	str	r2, [r3, #0]
	acel[1] = ahrs.actitud.cuerpo.ab[1];
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	4a06      	ldr	r2, [pc, #24]	; (8011014 <acelAngularAHRS+0x30>)
 8010ffa:	6a12      	ldr	r2, [r2, #32]
 8010ffc:	601a      	str	r2, [r3, #0]
	acel[2] = ahrs.actitud.cuerpo.ab[2];
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	3308      	adds	r3, #8
 8011002:	4a04      	ldr	r2, [pc, #16]	; (8011014 <acelAngularAHRS+0x30>)
 8011004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011006:	601a      	str	r2, [r3, #0]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	20002c04 	.word	0x20002c04

08011018 <configAHRS>:
 8011018:	b480      	push	{r7}
 801101a:	af00      	add	r7, sp, #0
 801101c:	4b02      	ldr	r3, [pc, #8]	; (8011028 <configAHRS+0x10>)
 801101e:	4618      	mov	r0, r3
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	2000a42c 	.word	0x2000a42c

0801102c <iniciarMadgwick>:
**  Descripcion:    Inicia el estimador
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarMadgwick(void)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
    madgwick_t *driver = &madgwick;
 8011032:	4b1c      	ldr	r3, [pc, #112]	; (80110a4 <iniciarMadgwick+0x78>)
 8011034:	607b      	str	r3, [r7, #4]

    memset(driver, 0, sizeof(madgwick_t));
 8011036:	2224      	movs	r2, #36	; 0x24
 8011038:	2100      	movs	r1, #0
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f024 f930 	bl	80352a0 <memset>
    driver->usarMarg = configAHRS()->habilitarMag;
 8011040:	f7ff ffea 	bl	8011018 <configAHRS>
 8011044:	4603      	mov	r3, r0
 8011046:	785a      	ldrb	r2, [r3, #1]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	705a      	strb	r2, [r3, #1]
    driver->betaIni = configAHRS()->madgwick.betaIni;
 801104c:	f7ff ffe4 	bl	8011018 <configAHRS>
 8011050:	4603      	mov	r3, r0
 8011052:	6a1a      	ldr	r2, [r3, #32]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	60da      	str	r2, [r3, #12]
    driver->tiempoArranque = micros();
 8011058:	f006 fd3e 	bl	8017ad8 <micros>
 801105c:	4602      	mov	r2, r0
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	609a      	str	r2, [r3, #8]

    if (driver->usarMarg) {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	785b      	ldrb	r3, [r3, #1]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00c      	beq.n	8011084 <iniciarMadgwick+0x58>
    	driver->beta = configAHRS()->madgwick.betaMarg;
 801106a:	f7ff ffd5 	bl	8011018 <configAHRS>
 801106e:	4603      	mov	r3, r0
 8011070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	611a      	str	r2, [r3, #16]
        driver->zeta = configAHRS()->madgwick.zetaMarg;
 8011076:	f7ff ffcf 	bl	8011018 <configAHRS>
 801107a:	4603      	mov	r3, r0
 801107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	615a      	str	r2, [r3, #20]
    }
    else {
    	driver->beta = configAHRS()->madgwick.beta;
    	driver->zeta = configAHRS()->madgwick.zeta;
    }
}
 8011082:	e00b      	b.n	801109c <iniciarMadgwick+0x70>
    	driver->beta = configAHRS()->madgwick.beta;
 8011084:	f7ff ffc8 	bl	8011018 <configAHRS>
 8011088:	4603      	mov	r3, r0
 801108a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	611a      	str	r2, [r3, #16]
    	driver->zeta = configAHRS()->madgwick.zeta;
 8011090:	f7ff ffc2 	bl	8011018 <configAHRS>
 8011094:	4603      	mov	r3, r0
 8011096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	615a      	str	r2, [r3, #20]
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20002d44 	.word	0x20002d44

080110a8 <actualizarMadgwick>:
**  Parametros:     Uso del magnetometro, cuaternion, velocidad angular corregida,
**                  bias calculado, giroscopio, acelerometro, campo magnetico
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMadgwick(bool usarMag, float *q, float *vel, float *bias, float *w, float *a, float *m)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b092      	sub	sp, #72	; 0x48
 80110ac:	af02      	add	r7, sp, #8
 80110ae:	60b9      	str	r1, [r7, #8]
 80110b0:	607a      	str	r2, [r7, #4]
 80110b2:	603b      	str	r3, [r7, #0]
 80110b4:	4603      	mov	r3, r0
 80110b6:	73fb      	strb	r3, [r7, #15]
    madgwick_t *driver = &madgwick;
 80110b8:	4b73      	ldr	r3, [pc, #460]	; (8011288 <actualizarMadgwick+0x1e0>)
 80110ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    float gir[3], acel[3], mag[3];

    uint32_t tiempoActual = micros();
 80110bc:	f006 fd0c 	bl	8017ad8 <micros>
 80110c0:	63b8      	str	r0, [r7, #56]	; 0x38
    float dt = (tiempoActual - driver->tiempoAnterior) / 1000000.0;
 80110c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110c8:	1ad3      	subs	r3, r2, r3
 80110ca:	ee07 3a90 	vmov	s15, r3
 80110ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80110d2:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8011270 <actualizarMadgwick+0x1c8>
 80110d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80110da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80110de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    driver->tiempoAnterior = tiempoActual;
 80110e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110e6:	605a      	str	r2, [r3, #4]

    // Se copian las variables
    acel[0] = a[0];
 80110e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	61fb      	str	r3, [r7, #28]
    acel[1] = a[1];
 80110ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	623b      	str	r3, [r7, #32]
    acel[2] = a[2];
 80110f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	627b      	str	r3, [r7, #36]	; 0x24

    gir[0] = radianes(w[0]);
 80110fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110fc:	edd3 7a00 	vldr	s15, [r3]
 8011100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011104:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8011278 <actualizarMadgwick+0x1d0>
 8011108:	ee27 7b06 	vmul.f64	d7, d7, d6
 801110c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011110:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    gir[1] = radianes(w[1]);
 8011114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011116:	3304      	adds	r3, #4
 8011118:	edd3 7a00 	vldr	s15, [r3]
 801111c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011120:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8011278 <actualizarMadgwick+0x1d0>
 8011124:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011128:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801112c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    gir[2] = radianes(w[2]);
 8011130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011132:	3308      	adds	r3, #8
 8011134:	edd3 7a00 	vldr	s15, [r3]
 8011138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801113c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011278 <actualizarMadgwick+0x1d0>
 8011140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011148:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    mag[0] = m[0];
 801114c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	613b      	str	r3, [r7, #16]
    mag[1] = m[1];
 8011152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	617b      	str	r3, [r7, #20]
    mag[2] = m[2];
 8011158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	61bb      	str	r3, [r7, #24]

    if (usarMag)
 801115e:	7bfb      	ldrb	r3, [r7, #15]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d010      	beq.n	8011186 <actualizarMadgwick+0xde>
        actualizarConMagMadgwick(q, vel, bias, gir, acel, mag, dt);
 8011164:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011168:	f107 0310 	add.w	r3, r7, #16
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	f107 031c 	add.w	r3, r7, #28
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8011178:	4613      	mov	r3, r2
 801117a:	683a      	ldr	r2, [r7, #0]
 801117c:	6879      	ldr	r1, [r7, #4]
 801117e:	68b8      	ldr	r0, [r7, #8]
 8011180:	f000 f884 	bl	801128c <actualizarConMagMadgwick>
 8011184:	e00c      	b.n	80111a0 <actualizarMadgwick+0xf8>
    else
        actualizarSinMagMadgwick(q, vel, bias, gir, acel, dt);
 8011186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801118a:	f107 031c 	add.w	r3, r7, #28
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8011194:	4613      	mov	r3, r2
 8011196:	683a      	ldr	r2, [r7, #0]
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	68b8      	ldr	r0, [r7, #8]
 801119c:	f000 fe3a 	bl	8011e14 <actualizarSinMagMadgwick>

    if (driver->nuevaMedida) {
 80111a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a2:	789b      	ldrb	r3, [r3, #2]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d05e      	beq.n	8011266 <actualizarMadgwick+0x1be>
    	driver->nuevaMedida = false;
 80111a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111aa:	2200      	movs	r2, #0
 80111ac:	709a      	strb	r2, [r3, #2]

        // Conversion a grados
        vel[0] = grados(vel[0]);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	edd3 7a00 	vldr	s15, [r3]
 80111b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80111b8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8011280 <actualizarMadgwick+0x1d8>
 80111bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	edc3 7a00 	vstr	s15, [r3]
        vel[1] = grados(vel[1]);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	3304      	adds	r3, #4
 80111ce:	edd3 7a00 	vldr	s15, [r3]
 80111d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80111d6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8011280 <actualizarMadgwick+0x1d8>
 80111da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3304      	adds	r3, #4
 80111e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80111e6:	edc3 7a00 	vstr	s15, [r3]
        vel[2] = grados(vel[2]);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3308      	adds	r3, #8
 80111ee:	edd3 7a00 	vldr	s15, [r3]
 80111f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80111f6:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8011280 <actualizarMadgwick+0x1d8>
 80111fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	3308      	adds	r3, #8
 8011202:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011206:	edc3 7a00 	vstr	s15, [r3]

        bias[0] = grados(bias[0]);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	edd3 7a00 	vldr	s15, [r3]
 8011210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011214:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8011280 <actualizarMadgwick+0x1d8>
 8011218:	ee27 7b06 	vmul.f64	d7, d7, d6
 801121c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	edc3 7a00 	vstr	s15, [r3]
        bias[1] = grados(bias[1]);
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	3304      	adds	r3, #4
 801122a:	edd3 7a00 	vldr	s15, [r3]
 801122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011232:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8011280 <actualizarMadgwick+0x1d8>
 8011236:	ee27 7b06 	vmul.f64	d7, d7, d6
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	3304      	adds	r3, #4
 801123e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011242:	edc3 7a00 	vstr	s15, [r3]
        bias[2] = grados(bias[2]);
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	3308      	adds	r3, #8
 801124a:	edd3 7a00 	vldr	s15, [r3]
 801124e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011252:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8011280 <actualizarMadgwick+0x1d8>
 8011256:	ee27 7b06 	vmul.f64	d7, d7, d6
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	3308      	adds	r3, #8
 801125e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011262:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8011266:	bf00      	nop
 8011268:	3740      	adds	r7, #64	; 0x40
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	00000000 	.word	0x00000000
 8011274:	412e8480 	.word	0x412e8480
 8011278:	a2529d39 	.word	0xa2529d39
 801127c:	3f91df46 	.word	0x3f91df46
 8011280:	1a63c1f8 	.word	0x1a63c1f8
 8011284:	404ca5dc 	.word	0x404ca5dc
 8011288:	20002d44 	.word	0x20002d44

0801128c <actualizarConMagMadgwick>:
**  Parametros:     Cuaternion, velocidad angular corregida, bias calculado, giroscopio,
**                  acelerometro, campo magnetico, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarConMagMadgwick(float *q, float *vel, float *bias, float *w, float *a, float *m, float dt)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b0ac      	sub	sp, #176	; 0xb0
 8011290:	af02      	add	r7, sp, #8
 8011292:	6178      	str	r0, [r7, #20]
 8011294:	6139      	str	r1, [r7, #16]
 8011296:	60fa      	str	r2, [r7, #12]
 8011298:	60bb      	str	r3, [r7, #8]
 801129a:	ed87 0a01 	vstr	s0, [r7, #4]
    madgwick_t *driver = &madgwick;
 801129e:	4b11      	ldr	r3, [pc, #68]	; (80112e4 <actualizarConMagMadgwick+0x58>)
 80112a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float qDot[4];
    float s[4];
    float hx, hy;
    float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

    if (!((a[0] == 0.0f) && (a[1] == 0.0f) && (a[2] == 0.0f))) {
 80112a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80112a8:	edd3 7a00 	vldr	s15, [r3]
 80112ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b4:	d118      	bne.n	80112e8 <actualizarConMagMadgwick+0x5c>
 80112b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80112ba:	3304      	adds	r3, #4
 80112bc:	edd3 7a00 	vldr	s15, [r3]
 80112c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c8:	d10e      	bne.n	80112e8 <actualizarConMagMadgwick+0x5c>
 80112ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80112ce:	3308      	adds	r3, #8
 80112d0:	edd3 7a00 	vldr	s15, [r3]
 80112d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112dc:	f000 8586 	beq.w	8011dec <actualizarConMagMadgwick+0xb60>
 80112e0:	e002      	b.n	80112e8 <actualizarConMagMadgwick+0x5c>
 80112e2:	bf00      	nop
 80112e4:	20002d44 	.word	0x20002d44
        // Se normaliza la acelereacion
        normalizar3Array(a);
 80112e8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80112ec:	f002 fa98 	bl	8013820 <normalizar3Array>

        // Se normaliza el magnetometro
        normalizar3Array(m);
 80112f0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80112f4:	f002 fa94 	bl	8013820 <normalizar3Array>

        // Variables auxiliares del cuaternion
        _2q0mx = 2.0f * q[0] * m[0];
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	edd3 7a00 	vldr	s15, [r3]
 80112fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011306:	edd3 7a00 	vldr	s15, [r3]
 801130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801130e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
        _2q0my = 2.0f * q[0] * m[1];
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	edd3 7a00 	vldr	s15, [r3]
 8011318:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801131c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011320:	3304      	adds	r3, #4
 8011322:	edd3 7a00 	vldr	s15, [r3]
 8011326:	ee67 7a27 	vmul.f32	s15, s14, s15
 801132a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
        _2q0mz = 2.0f * q[0] * m[2];
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	edd3 7a00 	vldr	s15, [r3]
 8011334:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801133c:	3308      	adds	r3, #8
 801133e:	edd3 7a00 	vldr	s15, [r3]
 8011342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011346:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
        _2q1mx = 2.0f * q[1] * m[0];
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	3304      	adds	r3, #4
 801134e:	edd3 7a00 	vldr	s15, [r3]
 8011352:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801135a:	edd3 7a00 	vldr	s15, [r3]
 801135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011362:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
        _2q0   = 2.0f * q[0];
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	edd3 7a00 	vldr	s15, [r3]
 801136c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011370:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
        _2q1   = 2.0f * q[1];
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	3304      	adds	r3, #4
 8011378:	edd3 7a00 	vldr	s15, [r3]
 801137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011380:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        _2q2   = 2.0f * q[2];
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	3308      	adds	r3, #8
 8011388:	edd3 7a00 	vldr	s15, [r3]
 801138c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011390:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
        _2q3   = 2.0f * q[3];
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	330c      	adds	r3, #12
 8011398:	edd3 7a00 	vldr	s15, [r3]
 801139c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80113a0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        _2q0q2 = 2.0f * q[0] * q[2];
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	edd3 7a00 	vldr	s15, [r3]
 80113aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	3308      	adds	r3, #8
 80113b2:	edd3 7a00 	vldr	s15, [r3]
 80113b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        _2q2q3 = 2.0f * q[2] * q[3];
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	3308      	adds	r3, #8
 80113c2:	edd3 7a00 	vldr	s15, [r3]
 80113c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	330c      	adds	r3, #12
 80113ce:	edd3 7a00 	vldr	s15, [r3]
 80113d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113d6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        q0q0   = q[0] * q[0];
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	ed93 7a00 	vldr	s14, [r3]
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	edd3 7a00 	vldr	s15, [r3]
 80113e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113ea:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        q0q1   = q[0] * q[1];
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	ed93 7a00 	vldr	s14, [r3]
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	3304      	adds	r3, #4
 80113f8:	edd3 7a00 	vldr	s15, [r3]
 80113fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011400:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        q0q2   = q[0] * q[2];
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	ed93 7a00 	vldr	s14, [r3]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	3308      	adds	r3, #8
 801140e:	edd3 7a00 	vldr	s15, [r3]
 8011412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011416:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        q0q3   = q[0] * q[3];
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	ed93 7a00 	vldr	s14, [r3]
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	330c      	adds	r3, #12
 8011424:	edd3 7a00 	vldr	s15, [r3]
 8011428:	ee67 7a27 	vmul.f32	s15, s14, s15
 801142c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        q1q1   = q[1] * q[1];
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	3304      	adds	r3, #4
 8011434:	ed93 7a00 	vldr	s14, [r3]
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	3304      	adds	r3, #4
 801143c:	edd3 7a00 	vldr	s15, [r3]
 8011440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011444:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        q1q2   = q[1] * q[2];
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	3304      	adds	r3, #4
 801144c:	ed93 7a00 	vldr	s14, [r3]
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	3308      	adds	r3, #8
 8011454:	edd3 7a00 	vldr	s15, [r3]
 8011458:	ee67 7a27 	vmul.f32	s15, s14, s15
 801145c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        q1q3   = q[1] * q[3];
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	3304      	adds	r3, #4
 8011464:	ed93 7a00 	vldr	s14, [r3]
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	330c      	adds	r3, #12
 801146c:	edd3 7a00 	vldr	s15, [r3]
 8011470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011474:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        q2q2   = q[2] * q[2];
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	3308      	adds	r3, #8
 801147c:	ed93 7a00 	vldr	s14, [r3]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	3308      	adds	r3, #8
 8011484:	edd3 7a00 	vldr	s15, [r3]
 8011488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801148c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        q2q3   = q[2] * q[3];
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	3308      	adds	r3, #8
 8011494:	ed93 7a00 	vldr	s14, [r3]
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	330c      	adds	r3, #12
 801149c:	edd3 7a00 	vldr	s15, [r3]
 80114a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        q3q3   = q[3] * q[3];
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	330c      	adds	r3, #12
 80114ac:	ed93 7a00 	vldr	s14, [r3]
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	330c      	adds	r3, #12
 80114b4:	edd3 7a00 	vldr	s15, [r3]
 80114b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        // Direccion del campo magnetico
        hx = m[0] * q0q0 - _2q0my * q[3] + _2q0mz * q[2] + m[0] * q1q1 + _2q1 * m[1] * q[2] + _2q1 * m[2] * q[3] - m[0] * q2q2 - m[0] * q3q3;
 80114c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80114c4:	ed93 7a00 	vldr	s14, [r3]
 80114c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80114cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	330c      	adds	r3, #12
 80114d4:	edd3 6a00 	vldr	s13, [r3]
 80114d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80114dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	3308      	adds	r3, #8
 80114e8:	edd3 6a00 	vldr	s13, [r3]
 80114ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80114f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80114fc:	edd3 6a00 	vldr	s13, [r3]
 8011500:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011508:	ee37 7a27 	vadd.f32	s14, s14, s15
 801150c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011510:	3304      	adds	r3, #4
 8011512:	edd3 6a00 	vldr	s13, [r3]
 8011516:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801151a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	3308      	adds	r3, #8
 8011522:	edd3 7a00 	vldr	s15, [r3]
 8011526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801152a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801152e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011532:	3308      	adds	r3, #8
 8011534:	edd3 6a00 	vldr	s13, [r3]
 8011538:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801153c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	330c      	adds	r3, #12
 8011544:	edd3 7a00 	vldr	s15, [r3]
 8011548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011554:	edd3 6a00 	vldr	s13, [r3]
 8011558:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011568:	edd3 6a00 	vldr	s13, [r3]
 801156c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011578:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        hy = _2q0mx * q[3] + m[1] * q0q0 - _2q0mz * q[1] + _2q1mx * q[2] - m[1] * q1q1 + m[1] * q2q2 + _2q2 * m[2] * q[3] - m[1] * q3q3;
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	330c      	adds	r3, #12
 8011580:	ed93 7a00 	vldr	s14, [r3]
 8011584:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011588:	ee27 7a27 	vmul.f32	s14, s14, s15
 801158c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011590:	3304      	adds	r3, #4
 8011592:	edd3 6a00 	vldr	s13, [r3]
 8011596:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	3304      	adds	r3, #4
 80115a6:	edd3 6a00 	vldr	s13, [r3]
 80115aa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80115ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	3308      	adds	r3, #8
 80115ba:	edd3 6a00 	vldr	s13, [r3]
 80115be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80115c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80115ce:	3304      	adds	r3, #4
 80115d0:	edd3 6a00 	vldr	s13, [r3]
 80115d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80115d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80115e4:	3304      	adds	r3, #4
 80115e6:	edd3 6a00 	vldr	s13, [r3]
 80115ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80115ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80115fa:	3308      	adds	r3, #8
 80115fc:	edd3 6a00 	vldr	s13, [r3]
 8011600:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011604:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	330c      	adds	r3, #12
 801160c:	edd3 7a00 	vldr	s15, [r3]
 8011610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801161c:	3304      	adds	r3, #4
 801161e:	edd3 6a00 	vldr	s13, [r3]
 8011622:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801162e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        _2bx = sqrt(hx * hx + hy * hy);
 8011632:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011636:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801163a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801163e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011646:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801164a:	eeb0 0b47 	vmov.f64	d0, d7
 801164e:	f027 fd9f 	bl	8039190 <sqrt>
 8011652:	eeb0 7b40 	vmov.f64	d7, d0
 8011656:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801165a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        _2bz = -_2q0mx * q[2] + _2q0my * q[1] + m[2] * q0q0 + _2q1mx * q[3] - m[2] * q1q1 + _2q2 * m[1] * q[3] - m[2] * q2q2 + m[2] * q3q3;
 801165e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011662:	eeb1 7a67 	vneg.f32	s14, s15
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	3308      	adds	r3, #8
 801166a:	edd3 7a00 	vldr	s15, [r3]
 801166e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	3304      	adds	r3, #4
 8011676:	edd3 6a00 	vldr	s13, [r3]
 801167a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801167e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801168a:	3308      	adds	r3, #8
 801168c:	edd3 6a00 	vldr	s13, [r3]
 8011690:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8011694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011698:	ee37 7a27 	vadd.f32	s14, s14, s15
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	330c      	adds	r3, #12
 80116a0:	edd3 6a00 	vldr	s13, [r3]
 80116a4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80116a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116b4:	3308      	adds	r3, #8
 80116b6:	edd3 6a00 	vldr	s13, [r3]
 80116ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80116be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116ca:	3304      	adds	r3, #4
 80116cc:	edd3 6a00 	vldr	s13, [r3]
 80116d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80116d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	330c      	adds	r3, #12
 80116dc:	edd3 7a00 	vldr	s15, [r3]
 80116e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116ec:	3308      	adds	r3, #8
 80116ee:	edd3 6a00 	vldr	s13, [r3]
 80116f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80116f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011702:	3308      	adds	r3, #8
 8011704:	edd3 6a00 	vldr	s13, [r3]
 8011708:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011714:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        _4bx = 2.0f * _2bx;
 8011718:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801171c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011720:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        _4bz = 2.0f * _2bz;
 8011724:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801172c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        // Correccion del algoritmo
		s[0] = -_2q2 * (2.0f * q1q3 - _2q0q2 - a[0]) + _2q1 * (2.0f * q0q1 + _2q2q3 - a[1]) - _2bz * q[2] * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - m[0]) + (-_2bx * q[3] + _2bz * q[1]) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - m[1]) + _2bx * q[2] * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - m[2]);
 8011730:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011734:	eeb1 7a67 	vneg.f32	s14, s15
 8011738:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801173c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011740:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801174c:	edd3 7a00 	vldr	s15, [r3]
 8011750:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011758:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801175c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011760:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8011764:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801176c:	3304      	adds	r3, #4
 801176e:	edd3 7a00 	vldr	s15, [r3]
 8011772:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011776:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801177e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	3308      	adds	r3, #8
 8011786:	edd3 6a00 	vldr	s13, [r3]
 801178a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801178e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011792:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011796:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801179a:	ee36 6a67 	vsub.f32	s12, s12, s15
 801179e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80117a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80117a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80117aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80117ae:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80117b2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80117b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80117ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80117be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80117c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80117c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80117ca:	edd3 7a00 	vldr	s15, [r3]
 80117ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80117d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80117de:	eef1 6a67 	vneg.f32	s13, s15
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	330c      	adds	r3, #12
 80117e6:	edd3 7a00 	vldr	s15, [r3]
 80117ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	3304      	adds	r3, #4
 80117f2:	ed93 6a00 	vldr	s12, [r3]
 80117f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80117fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80117fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011802:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8011806:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801180a:	ee36 6a67 	vsub.f32	s12, s12, s15
 801180e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011812:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011816:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 801181a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801181e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011822:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011826:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801182a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801182e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011832:	3304      	adds	r3, #4
 8011834:	edd3 7a00 	vldr	s15, [r3]
 8011838:	ee76 7a67 	vsub.f32	s15, s12, s15
 801183c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	3308      	adds	r3, #8
 8011848:	edd3 6a00 	vldr	s13, [r3]
 801184c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011850:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011854:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8011858:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801185c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011864:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011868:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801186c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011870:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011874:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011878:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801187c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011880:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011884:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801188c:	3308      	adds	r3, #8
 801188e:	edd3 7a00 	vldr	s15, [r3]
 8011892:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801189e:	edc7 7a07 	vstr	s15, [r7, #28]
		s[1] =  _2q3 * (2.0f * q1q3 - _2q0q2 - a[0]) + _2q0 * (2.0f * q0q1 + _2q2q3 - a[1]) - 4.0f * q[1] * (1 - 2.0f * q1q1 - 2.0f * q2q2 - a[2]) + _2bz * q[3] * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - m[0]) + (_2bx * q[2] + _2bz * q[0]) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - m[1]) + (_2bx * q[2] - _4bz * q[1]) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - m[2]);
 80118a2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80118a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80118aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80118ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80118b6:	edd3 7a00 	vldr	s15, [r3]
 80118ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118be:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80118c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80118ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80118ce:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80118d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80118d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80118da:	3304      	adds	r3, #4
 80118dc:	edd3 7a00 	vldr	s15, [r3]
 80118e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80118e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80118e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	3304      	adds	r3, #4
 80118f4:	edd3 7a00 	vldr	s15, [r3]
 80118f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80118fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011900:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011904:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011908:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801190c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011910:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011918:	ee36 6a67 	vsub.f32	s12, s12, s15
 801191c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011920:	3308      	adds	r3, #8
 8011922:	edd3 7a00 	vldr	s15, [r3]
 8011926:	ee76 7a67 	vsub.f32	s15, s12, s15
 801192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801192e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	330c      	adds	r3, #12
 8011936:	edd3 6a00 	vldr	s13, [r3]
 801193a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801193e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011942:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011946:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801194a:	ee36 6a67 	vsub.f32	s12, s12, s15
 801194e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011952:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011956:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801195a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801195e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8011962:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8011966:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801196a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801196e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011972:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801197a:	edd3 7a00 	vldr	s15, [r3]
 801197e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011986:	ee37 7a27 	vadd.f32	s14, s14, s15
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	3308      	adds	r3, #8
 801198e:	edd3 6a00 	vldr	s13, [r3]
 8011992:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011996:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	ed93 6a00 	vldr	s12, [r3]
 80119a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80119a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80119a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80119ac:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80119b0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80119b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80119b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80119bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80119c0:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80119c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80119c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80119cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80119d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80119d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80119d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80119dc:	3304      	adds	r3, #4
 80119de:	edd3 7a00 	vldr	s15, [r3]
 80119e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80119e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	3308      	adds	r3, #8
 80119f2:	edd3 6a00 	vldr	s13, [r3]
 80119f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80119fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	3304      	adds	r3, #4
 8011a02:	ed93 6a00 	vldr	s12, [r3]
 8011a06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011a0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011a0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011a12:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8011a16:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011a1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011a1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011a22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011a26:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011a2a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011a2e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011a32:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011a36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011a3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011a3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011a42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a4a:	3308      	adds	r3, #8
 8011a4c:	edd3 7a00 	vldr	s15, [r3]
 8011a50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a5c:	edc7 7a08 	vstr	s15, [r7, #32]
		s[2] = -_2q0 * (2.0f * q1q3 - _2q0q2 - a[0]) + _2q3 * (2.0f * q0q1 + _2q2q3 - a[1]) - 4.0f * q[2] * (1 - 2.0f * q1q1 - 2.0f * q2q2 - a[2]) + (-_4bx * q[2] - _2bz * q[0]) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - m[0]) + (_2bx * q[1] + _2bz * q[3]) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - m[1]) + (_2bx * q[0] - _4bz * q[2]) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - m[2]);
 8011a60:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011a64:	eeb1 7a67 	vneg.f32	s14, s15
 8011a68:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011a6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011a70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011a74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a7c:	edd3 7a00 	vldr	s15, [r3]
 8011a80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a88:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8011a8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011a90:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8011a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	edd3 7a00 	vldr	s15, [r3]
 8011aa2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011aa6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	3308      	adds	r3, #8
 8011ab6:	edd3 7a00 	vldr	s15, [r3]
 8011aba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011abe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011ac2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011ac6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011aca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011ace:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011ad2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011ad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011ada:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011ade:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011ae2:	3308      	adds	r3, #8
 8011ae4:	edd3 7a00 	vldr	s15, [r3]
 8011ae8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011af4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011af8:	eef1 6a67 	vneg.f32	s13, s15
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	3308      	adds	r3, #8
 8011b00:	edd3 7a00 	vldr	s15, [r3]
 8011b04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	ed93 6a00 	vldr	s12, [r3]
 8011b0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011b12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011b16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b1a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011b1e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011b22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011b26:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011b2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011b2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011b32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011b36:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8011b3a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8011b3e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011b42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011b46:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011b4a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011b52:	edd3 7a00 	vldr	s15, [r3]
 8011b56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	3304      	adds	r3, #4
 8011b66:	edd3 6a00 	vldr	s13, [r3]
 8011b6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011b6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	330c      	adds	r3, #12
 8011b76:	ed93 6a00 	vldr	s12, [r3]
 8011b7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011b7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011b82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011b86:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8011b8a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8011b8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011b92:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011b96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011b9a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8011b9e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011ba2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011ba6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011baa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011bae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	edd3 7a00 	vldr	s15, [r3]
 8011bbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	edd3 6a00 	vldr	s13, [r3]
 8011bce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011bd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	3308      	adds	r3, #8
 8011bda:	ed93 6a00 	vldr	s12, [r3]
 8011bde:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011be2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011be6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011bea:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8011bee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011bf2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011bf6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011bfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011bfe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011c02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011c06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011c0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011c0e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011c12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011c16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011c1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011c22:	3308      	adds	r3, #8
 8011c24:	edd3 7a00 	vldr	s15, [r3]
 8011c28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s[3] =  _2q1 * (2.0f * q1q3 - _2q0q2 - a[0]) + _2q2 * (2.0f * q0q1 + _2q2q3 - a[1]) + (-_4bx * q[3] + _2bz * q[1]) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - m[0]) + (-_2bx * q[0] + _2bz * q[2]) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - m[1]) + _2bx * q[1] * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - m[2]);
 8011c38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011c3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011c40:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011c44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011c4c:	edd3 7a00 	vldr	s15, [r3]
 8011c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c54:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c5c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8011c60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011c64:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8011c68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011c70:	3304      	adds	r3, #4
 8011c72:	edd3 7a00 	vldr	s15, [r3]
 8011c76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011c7a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011c8a:	eef1 6a67 	vneg.f32	s13, s15
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	330c      	adds	r3, #12
 8011c92:	edd3 7a00 	vldr	s15, [r3]
 8011c96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	ed93 6a00 	vldr	s12, [r3]
 8011ca2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011ca6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011caa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011cae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011cb2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011cb6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011cba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011cbe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011cc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011cc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011cca:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8011cce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8011cd2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011cd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011cda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011cde:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ce6:	edd3 7a00 	vldr	s15, [r3]
 8011cea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cf6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011cfa:	eef1 6a67 	vneg.f32	s13, s15
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	edd3 7a00 	vldr	s15, [r3]
 8011d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	3308      	adds	r3, #8
 8011d0c:	ed93 6a00 	vldr	s12, [r3]
 8011d10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011d14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011d18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011d1c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8011d20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8011d24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011d28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011d2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011d30:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8011d34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011d38:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011d3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011d40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011d44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	edd3 7a00 	vldr	s15, [r3]
 8011d52:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	3304      	adds	r3, #4
 8011d62:	edd3 6a00 	vldr	s13, [r3]
 8011d66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011d6e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8011d72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011d76:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011d7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011d7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011d82:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011d86:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011d8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011d8e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011d92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011d96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011d9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011d9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011da6:	3308      	adds	r3, #8
 8011da8:	edd3 7a00 	vldr	s15, [r3]
 8011dac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011db8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        normalizar4Array(s);
 8011dbc:	f107 031c 	add.w	r3, r7, #28
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f001 fd7d 	bl	80138c0 <normalizar4Array>
        corregirCuaternionMadgwick(q, qDot, vel, bias, w, s, dt);
 8011dc6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011dca:	f107 031c 	add.w	r3, r7, #28
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	ed97 0a01 	vldr	s0, [r7, #4]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	693a      	ldr	r2, [r7, #16]
 8011ddc:	6978      	ldr	r0, [r7, #20]
 8011dde:	f000 f9cd 	bl	801217c <corregirCuaternionMadgwick>
        driver->nuevaMedida = true;
 8011de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011de6:	2201      	movs	r2, #1
 8011de8:	709a      	strb	r2, [r3, #2]
 8011dea:	e006      	b.n	8011dfa <actualizarConMagMadgwick+0xb6e>
	}
    else
        actualizarCuaternionDerivadaMadgwick(q, qDot, w);
 8011dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	4619      	mov	r1, r3
 8011df4:	6978      	ldr	r0, [r7, #20]
 8011df6:	f000 fb45 	bl	8012484 <actualizarCuaternionDerivadaMadgwick>

    actualizarCuaternionMadgwick(q, qDot, dt);
 8011dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011dfe:	ed97 0a01 	vldr	s0, [r7, #4]
 8011e02:	4619      	mov	r1, r3
 8011e04:	6978      	ldr	r0, [r7, #20]
 8011e06:	f000 fbeb 	bl	80125e0 <actualizarCuaternionMadgwick>
}
 8011e0a:	bf00      	nop
 8011e0c:	37a8      	adds	r7, #168	; 0xa8
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop

08011e14 <actualizarSinMagMadgwick>:
**  Parametros:     Cuaternion, velocidad angular corregida, bias calculado, giroscopio,
**                  acelerometro, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarSinMagMadgwick(float *q, float *vel, float *bias, float *w, float *a, float dt)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b09e      	sub	sp, #120	; 0x78
 8011e18:	af02      	add	r7, sp, #8
 8011e1a:	6178      	str	r0, [r7, #20]
 8011e1c:	6139      	str	r1, [r7, #16]
 8011e1e:	60fa      	str	r2, [r7, #12]
 8011e20:	60bb      	str	r3, [r7, #8]
 8011e22:	ed87 0a01 	vstr	s0, [r7, #4]
    madgwick_t *driver = &madgwick;
 8011e26:	4bd4      	ldr	r3, [pc, #848]	; (8012178 <actualizarSinMagMadgwick+0x364>)
 8011e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    float qDot[4];
    float s[4];
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    if (!((a[0] == 0.0f) && (a[1] == 0.0f) && (a[2] == 0.0f))) {
 8011e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e2c:	edd3 7a00 	vldr	s15, [r3]
 8011e30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e38:	d112      	bne.n	8011e60 <actualizarSinMagMadgwick+0x4c>
 8011e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	edd3 7a00 	vldr	s15, [r3]
 8011e42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4a:	d109      	bne.n	8011e60 <actualizarSinMagMadgwick+0x4c>
 8011e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e4e:	3308      	adds	r3, #8
 8011e50:	edd3 7a00 	vldr	s15, [r3]
 8011e54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	f000 8178 	beq.w	8012150 <actualizarSinMagMadgwick+0x33c>

    	// Se normaliza la acelereacion
        normalizar3Array(a);
 8011e60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011e62:	f001 fcdd 	bl	8013820 <normalizar3Array>

        // Variables auxiliares del cuaternion
        _2q0 = 2.0f * q[0];
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	edd3 7a00 	vldr	s15, [r3]
 8011e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011e70:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        _2q1 = 2.0f * q[1];
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	3304      	adds	r3, #4
 8011e78:	edd3 7a00 	vldr	s15, [r3]
 8011e7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011e80:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        _2q2 = 2.0f * q[2];
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	3308      	adds	r3, #8
 8011e88:	edd3 7a00 	vldr	s15, [r3]
 8011e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011e90:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        _2q3 = 2.0f * q[3];
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	330c      	adds	r3, #12
 8011e98:	edd3 7a00 	vldr	s15, [r3]
 8011e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011ea0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        _4q0 = 4.0f * q[0];
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	edd3 7a00 	vldr	s15, [r3]
 8011eaa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8011eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011eb2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        _4q1 = 4.0f * q[1];
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	edd3 7a00 	vldr	s15, [r3]
 8011ebe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8011ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ec6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        _4q2 = 4.0f * q[2];
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	3308      	adds	r3, #8
 8011ece:	edd3 7a00 	vldr	s15, [r3]
 8011ed2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8011ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011eda:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        _8q1 = 8.0f * q[1];
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	3304      	adds	r3, #4
 8011ee2:	edd3 7a00 	vldr	s15, [r3]
 8011ee6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8011eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011eee:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        _8q2 = 8.0f * q[2];
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	3308      	adds	r3, #8
 8011ef6:	edd3 7a00 	vldr	s15, [r3]
 8011efa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8011efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f02:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        q0q0 = q[0] * q[0];
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	ed93 7a00 	vldr	s14, [r3]
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	edd3 7a00 	vldr	s15, [r3]
 8011f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        q1q1 = q[1] * q[1];
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	ed93 7a00 	vldr	s14, [r3]
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	3304      	adds	r3, #4
 8011f26:	edd3 7a00 	vldr	s15, [r3]
 8011f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        q2q2 = q[2] * q[2];
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	3308      	adds	r3, #8
 8011f36:	ed93 7a00 	vldr	s14, [r3]
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	edd3 7a00 	vldr	s15, [r3]
 8011f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        q3q3 = q[3] * q[3];
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	330c      	adds	r3, #12
 8011f4e:	ed93 7a00 	vldr	s14, [r3]
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	330c      	adds	r3, #12
 8011f56:	edd3 7a00 	vldr	s15, [r3]
 8011f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f5e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Correccion del algoritmo
        s[0] = _4q0 * q2q2 + _2q2 * a[0] + _4q0 * q1q1 - _2q1 * a[1];
 8011f62:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011f66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f70:	edd3 6a00 	vldr	s13, [r3]
 8011f74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f80:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8011f84:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f92:	3304      	adds	r3, #4
 8011f94:	edd3 6a00 	vldr	s13, [r3]
 8011f98:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8011f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fa4:	edc7 7a06 	vstr	s15, [r7, #24]
        s[1] = _4q1 * q3q3 - _2q3 * a[0] + 4.0f * q0q0 * q[1] - _2q0 * a[1] - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * a[2];
 8011fa8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011fac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fb6:	edd3 6a00 	vldr	s13, [r3]
 8011fba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011fc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011fca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011fce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	edd3 7a00 	vldr	s15, [r3]
 8011fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	edd3 6a00 	vldr	s13, [r3]
 8011fea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8011fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ff2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ff6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ffe:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8012002:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801200a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801200e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8012012:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801201e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012020:	3308      	adds	r3, #8
 8012022:	edd3 6a00 	vldr	s13, [r3]
 8012026:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012032:	edc7 7a07 	vstr	s15, [r7, #28]
        s[2] = 4.0f * q0q0 * q[2] + _2q0 * a[0] + _4q2 * q3q3 - _2q3 * a[1] - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * a[2];
 8012036:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801203a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801203e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	3308      	adds	r3, #8
 8012046:	edd3 7a00 	vldr	s15, [r3]
 801204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801204e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012050:	edd3 6a00 	vldr	s13, [r3]
 8012054:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8012058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801205c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012060:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8012064:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801206c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012072:	3304      	adds	r3, #4
 8012074:	edd3 6a00 	vldr	s13, [r3]
 8012078:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012084:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012088:	ee37 7a67 	vsub.f32	s14, s14, s15
 801208c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8012090:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012098:	ee37 7a27 	vadd.f32	s14, s14, s15
 801209c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80120a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80120a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120ae:	3308      	adds	r3, #8
 80120b0:	edd3 6a00 	vldr	s13, [r3]
 80120b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80120b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120c0:	edc7 7a08 	vstr	s15, [r7, #32]
        s[3] = 4.0f * q1q1 * q[3] - _2q1 * a[0] + 4.0f * q2q2 * q[3] - _2q2 * a[1];
 80120c4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80120c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80120cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	330c      	adds	r3, #12
 80120d4:	edd3 7a00 	vldr	s15, [r3]
 80120d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120de:	edd3 6a00 	vldr	s13, [r3]
 80120e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80120e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80120f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80120f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	330c      	adds	r3, #12
 80120fe:	edd3 7a00 	vldr	s15, [r3]
 8012102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012106:	ee37 7a27 	vadd.f32	s14, s14, s15
 801210a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801210c:	3304      	adds	r3, #4
 801210e:	edd3 6a00 	vldr	s13, [r3]
 8012112:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801211e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        normalizar4Array(s);
 8012122:	f107 0318 	add.w	r3, r7, #24
 8012126:	4618      	mov	r0, r3
 8012128:	f001 fbca 	bl	80138c0 <normalizar4Array>
        corregirCuaternionMadgwick(q, qDot, vel, bias, w, s, dt);
 801212c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012130:	f107 0318 	add.w	r3, r7, #24
 8012134:	9301      	str	r3, [sp, #4]
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	ed97 0a01 	vldr	s0, [r7, #4]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	693a      	ldr	r2, [r7, #16]
 8012142:	6978      	ldr	r0, [r7, #20]
 8012144:	f000 f81a 	bl	801217c <corregirCuaternionMadgwick>
        driver->nuevaMedida = true;
 8012148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801214a:	2201      	movs	r2, #1
 801214c:	709a      	strb	r2, [r3, #2]
 801214e:	e006      	b.n	801215e <actualizarSinMagMadgwick+0x34a>
	}
    else
        actualizarCuaternionDerivadaMadgwick(q, qDot, w);
 8012150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	4619      	mov	r1, r3
 8012158:	6978      	ldr	r0, [r7, #20]
 801215a:	f000 f993 	bl	8012484 <actualizarCuaternionDerivadaMadgwick>

    actualizarCuaternionMadgwick(q, qDot, dt);
 801215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012162:	ed97 0a01 	vldr	s0, [r7, #4]
 8012166:	4619      	mov	r1, r3
 8012168:	6978      	ldr	r0, [r7, #20]
 801216a:	f000 fa39 	bl	80125e0 <actualizarCuaternionMadgwick>
}
 801216e:	bf00      	nop
 8012170:	3770      	adds	r7, #112	; 0x70
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20002d44 	.word	0x20002d44

0801217c <corregirCuaternionMadgwick>:
**  Parametros:     Cuaternion, Cuaternion derivada, velocidad angular corregida, bias del giroscopio,
**  				velocidad angular, correccion de la velocidad angular, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void corregirCuaternionMadgwick(float *q, float *qDot, float *vel, float *bias, float *w, float *s, float dt)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08c      	sub	sp, #48	; 0x30
 8012180:	af00      	add	r7, sp, #0
 8012182:	6178      	str	r0, [r7, #20]
 8012184:	6139      	str	r1, [r7, #16]
 8012186:	60fa      	str	r2, [r7, #12]
 8012188:	60bb      	str	r3, [r7, #8]
 801218a:	ed87 0a01 	vstr	s0, [r7, #4]
    madgwick_t *driver = &madgwick;
 801218e:	4bbb      	ldr	r3, [pc, #748]	; (801247c <corregirCuaternionMadgwick+0x300>)
 8012190:	62bb      	str	r3, [r7, #40]	; 0x28
    float beta;
    float e[3];

    beta = driver->beta;
 8012192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012194:	691b      	ldr	r3, [r3, #16]
 8012196:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!driver->arrancado) {
 8012198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	f083 0301 	eor.w	r3, r3, #1
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d00e      	beq.n	80121c4 <corregirCuaternionMadgwick+0x48>
	    if (driver->tiempoAnterior - driver->tiempoArranque >= TIEMPO_CONV_MADGWICK_INI_US)
 80121a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	1ad3      	subs	r3, r2, r3
 80121b0:	4ab3      	ldr	r2, [pc, #716]	; (8012480 <corregirCuaternionMadgwick+0x304>)
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d903      	bls.n	80121be <corregirCuaternionMadgwick+0x42>
	    	driver->arrancado = true;
 80121b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b8:	2201      	movs	r2, #1
 80121ba:	701a      	strb	r2, [r3, #0]
 80121bc:	e002      	b.n	80121c4 <corregirCuaternionMadgwick+0x48>
	    else
            beta = driver->betaIni;
 80121be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    // Compensacion del bias
    e[0] = 2 * q[0] * s[1] - 2 * q[1] * s[0] - 2 * q[2] * s[3] + 2 * q[3] * s[2];
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	edd3 7a00 	vldr	s15, [r3]
 80121ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80121ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d0:	3304      	adds	r3, #4
 80121d2:	edd3 7a00 	vldr	s15, [r3]
 80121d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	3304      	adds	r3, #4
 80121de:	edd3 7a00 	vldr	s15, [r3]
 80121e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80121e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121e8:	edd3 7a00 	vldr	s15, [r3]
 80121ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80121f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	3308      	adds	r3, #8
 80121f8:	edd3 7a00 	vldr	s15, [r3]
 80121fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012202:	330c      	adds	r3, #12
 8012204:	edd3 7a00 	vldr	s15, [r3]
 8012208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801220c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	330c      	adds	r3, #12
 8012214:	edd3 7a00 	vldr	s15, [r3]
 8012218:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801221e:	3308      	adds	r3, #8
 8012220:	edd3 7a00 	vldr	s15, [r3]
 8012224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012228:	ee77 7a27 	vadd.f32	s15, s14, s15
 801222c:	edc7 7a07 	vstr	s15, [r7, #28]
    e[1] = 2 * q[0] * s[2] + 2 * q[1] * s[3] - 2 * q[2] * s[0] - 2 * q[3] * s[1];
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	edd3 7a00 	vldr	s15, [r3]
 8012236:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801223a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801223c:	3308      	adds	r3, #8
 801223e:	edd3 7a00 	vldr	s15, [r3]
 8012242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	3304      	adds	r3, #4
 801224a:	edd3 7a00 	vldr	s15, [r3]
 801224e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012254:	330c      	adds	r3, #12
 8012256:	edd3 7a00 	vldr	s15, [r3]
 801225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801225e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	3308      	adds	r3, #8
 8012266:	edd3 7a00 	vldr	s15, [r3]
 801226a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012270:	edd3 7a00 	vldr	s15, [r3]
 8012274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012278:	ee37 7a67 	vsub.f32	s14, s14, s15
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	330c      	adds	r3, #12
 8012280:	edd3 7a00 	vldr	s15, [r3]
 8012284:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801228a:	3304      	adds	r3, #4
 801228c:	edd3 7a00 	vldr	s15, [r3]
 8012290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012298:	edc7 7a08 	vstr	s15, [r7, #32]
    e[2] = 2 * q[0] * s[3] - 2 * q[1] * s[2] + 2 * q[2] * s[1] - 2 * q[3] * s[0];
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	edd3 7a00 	vldr	s15, [r3]
 80122a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80122a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122a8:	330c      	adds	r3, #12
 80122aa:	edd3 7a00 	vldr	s15, [r3]
 80122ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	3304      	adds	r3, #4
 80122b6:	edd3 7a00 	vldr	s15, [r3]
 80122ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80122be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c0:	3308      	adds	r3, #8
 80122c2:	edd3 7a00 	vldr	s15, [r3]
 80122c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	3308      	adds	r3, #8
 80122d2:	edd3 7a00 	vldr	s15, [r3]
 80122d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80122da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122dc:	3304      	adds	r3, #4
 80122de:	edd3 7a00 	vldr	s15, [r3]
 80122e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	330c      	adds	r3, #12
 80122ee:	edd3 7a00 	vldr	s15, [r3]
 80122f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80122f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f8:	edd3 7a00 	vldr	s15, [r3]
 80122fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012304:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    driver->bias[0] += e[0] * dt * driver->zeta;
 8012308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230a:	ed93 7a06 	vldr	s14, [r3, #24]
 801230e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012312:	edd7 7a01 	vldr	s15, [r7, #4]
 8012316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	edd3 7a05 	vldr	s15, [r3, #20]
 8012320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	edc3 7a06 	vstr	s15, [r3, #24]
    driver->bias[1] += e[1] * dt * driver->zeta;
 801232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012330:	ed93 7a07 	vldr	s14, [r3, #28]
 8012334:	edd7 6a08 	vldr	s13, [r7, #32]
 8012338:	edd7 7a01 	vldr	s15, [r7, #4]
 801233c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012342:	edd3 7a05 	vldr	s15, [r3, #20]
 8012346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012350:	edc3 7a07 	vstr	s15, [r3, #28]
    driver->bias[2] += e[2] * dt * driver->zeta;
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	ed93 7a08 	vldr	s14, [r3, #32]
 801235a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801235e:	edd7 7a01 	vldr	s15, [r7, #4]
 8012362:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	edd3 7a05 	vldr	s15, [r3, #20]
 801236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	edc3 7a08 	vstr	s15, [r3, #32]

    vel[0] = w[0] - driver->bias[0];
 801237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237c:	ed93 7a00 	vldr	s14, [r3]
 8012380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012382:	edd3 7a06 	vldr	s15, [r3, #24]
 8012386:	ee77 7a67 	vsub.f32	s15, s14, s15
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	edc3 7a00 	vstr	s15, [r3]
    vel[1] = w[1] - driver->bias[1];
 8012390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012392:	3304      	adds	r3, #4
 8012394:	ed93 7a00 	vldr	s14, [r3]
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	edd3 7a07 	vldr	s15, [r3, #28]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	3304      	adds	r3, #4
 80123a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123a6:	edc3 7a00 	vstr	s15, [r3]
    vel[2] = w[2] - driver->bias[2];
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	3308      	adds	r3, #8
 80123ae:	ed93 7a00 	vldr	s14, [r3]
 80123b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	3308      	adds	r3, #8
 80123bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123c0:	edc3 7a00 	vstr	s15, [r3]

    bias[0] = driver->bias[0];
 80123c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c6:	699a      	ldr	r2, [r3, #24]
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	601a      	str	r2, [r3, #0]
    bias[1] = driver->bias[1];
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	3304      	adds	r3, #4
 80123d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123d2:	69d2      	ldr	r2, [r2, #28]
 80123d4:	601a      	str	r2, [r3, #0]
    bias[2] = driver->bias[2];
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	3308      	adds	r3, #8
 80123da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123dc:	6a12      	ldr	r2, [r2, #32]
 80123de:	601a      	str	r2, [r3, #0]

	// Tasa de cambio del cuaternion
    actualizarCuaternionDerivadaMadgwick(q, qDot, vel);
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	6939      	ldr	r1, [r7, #16]
 80123e4:	6978      	ldr	r0, [r7, #20]
 80123e6:	f000 f84d 	bl	8012484 <actualizarCuaternionDerivadaMadgwick>

    // Se aplica el feedback
    qDot[0] -= beta * s[0];
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	ed93 7a00 	vldr	s14, [r3]
 80123f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f2:	edd3 6a00 	vldr	s13, [r3]
 80123f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80123fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	edc3 7a00 	vstr	s15, [r3]
    qDot[1] -= beta * s[1];
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	3304      	adds	r3, #4
 801240c:	ed93 7a00 	vldr	s14, [r3]
 8012410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012412:	3304      	adds	r3, #4
 8012414:	edd3 6a00 	vldr	s13, [r3]
 8012418:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	3304      	adds	r3, #4
 8012424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012428:	edc3 7a00 	vstr	s15, [r3]
    qDot[2] -= beta * s[2];
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	3308      	adds	r3, #8
 8012430:	ed93 7a00 	vldr	s14, [r3]
 8012434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012436:	3308      	adds	r3, #8
 8012438:	edd3 6a00 	vldr	s13, [r3]
 801243c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	3308      	adds	r3, #8
 8012448:	ee77 7a67 	vsub.f32	s15, s14, s15
 801244c:	edc3 7a00 	vstr	s15, [r3]
    qDot[3] -= beta * s[3];
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	330c      	adds	r3, #12
 8012454:	ed93 7a00 	vldr	s14, [r3]
 8012458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245a:	330c      	adds	r3, #12
 801245c:	edd3 6a00 	vldr	s13, [r3]
 8012460:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	330c      	adds	r3, #12
 801246c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012470:	edc3 7a00 	vstr	s15, [r3]
}
 8012474:	bf00      	nop
 8012476:	3730      	adds	r7, #48	; 0x30
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	20002d44 	.word	0x20002d44
 8012480:	003d08ff 	.word	0x003d08ff

08012484 <actualizarCuaternionDerivadaMadgwick>:
**  Descripcion:    Calcula el cuaternion deriavada
**  Parametros:     Cuaternion, cuaternion derivada, velocidad angular
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCuaternionDerivadaMadgwick(float *q, float *qDot, float *w)
{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
	// Tasa de cambio del cuaternion
    qDot[0] = 0.5f * (-q[1] * w[0] - q[2] * w[1] - q[3] * w[2]);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3304      	adds	r3, #4
 8012494:	edd3 7a00 	vldr	s15, [r3]
 8012498:	eeb1 7a67 	vneg.f32	s14, s15
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	edd3 7a00 	vldr	s15, [r3]
 80124a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	3308      	adds	r3, #8
 80124aa:	edd3 6a00 	vldr	s13, [r3]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3304      	adds	r3, #4
 80124b2:	edd3 7a00 	vldr	s15, [r3]
 80124b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	330c      	adds	r3, #12
 80124c2:	edd3 6a00 	vldr	s13, [r3]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	3308      	adds	r3, #8
 80124ca:	edd3 7a00 	vldr	s15, [r3]
 80124ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80124da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	edc3 7a00 	vstr	s15, [r3]
    qDot[1] = 0.5f * ( q[0] * w[0] + q[2] * w[2] - q[3] * w[1]);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	ed93 7a00 	vldr	s14, [r3]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	edd3 7a00 	vldr	s15, [r3]
 80124f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	3308      	adds	r3, #8
 80124f8:	edd3 6a00 	vldr	s13, [r3]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	3308      	adds	r3, #8
 8012500:	edd3 7a00 	vldr	s15, [r3]
 8012504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012508:	ee37 7a27 	vadd.f32	s14, s14, s15
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	330c      	adds	r3, #12
 8012510:	edd3 6a00 	vldr	s13, [r3]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	3304      	adds	r3, #4
 8012518:	edd3 7a00 	vldr	s15, [r3]
 801251c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	3304      	adds	r3, #4
 8012528:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012530:	edc3 7a00 	vstr	s15, [r3]
    qDot[2] = 0.5f * ( q[0] * w[1] - q[1] * w[2] + q[3] * w[0]);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	ed93 7a00 	vldr	s14, [r3]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3304      	adds	r3, #4
 801253e:	edd3 7a00 	vldr	s15, [r3]
 8012542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3304      	adds	r3, #4
 801254a:	edd3 6a00 	vldr	s13, [r3]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	3308      	adds	r3, #8
 8012552:	edd3 7a00 	vldr	s15, [r3]
 8012556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801255a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	330c      	adds	r3, #12
 8012562:	edd3 6a00 	vldr	s13, [r3]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	edd3 7a00 	vldr	s15, [r3]
 801256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	3308      	adds	r3, #8
 8012578:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801257c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012580:	edc3 7a00 	vstr	s15, [r3]
    qDot[3] = 0.5f * ( q[0] * w[2] + q[1] * w[1] - q[2] * w[0]);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	ed93 7a00 	vldr	s14, [r3]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	3308      	adds	r3, #8
 801258e:	edd3 7a00 	vldr	s15, [r3]
 8012592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3304      	adds	r3, #4
 801259a:	edd3 6a00 	vldr	s13, [r3]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3304      	adds	r3, #4
 80125a2:	edd3 7a00 	vldr	s15, [r3]
 80125a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80125aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	3308      	adds	r3, #8
 80125b2:	edd3 6a00 	vldr	s13, [r3]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	edd3 7a00 	vldr	s15, [r3]
 80125bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80125c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	330c      	adds	r3, #12
 80125c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80125cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125d0:	edc3 7a00 	vstr	s15, [r3]
}
 80125d4:	bf00      	nop
 80125d6:	3714      	adds	r7, #20
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <actualizarCuaternionMadgwick>:
**  Descripcion:    Actualiza el cuaternion
**  Parametros:     Cuaternion, puntero al array del giroscopio, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCuaternionMadgwick(float *q, float *qDot, float dt)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	ed87 0a01 	vstr	s0, [r7, #4]
    // Se integra el cuaternion
	q[0] += qDot[0] * dt;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	ed93 7a00 	vldr	s14, [r3]
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	edd3 6a00 	vldr	s13, [r3]
 80125fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80125fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	edc3 7a00 	vstr	s15, [r3]
	q[1] += qDot[1] * dt;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	3304      	adds	r3, #4
 8012610:	ed93 7a00 	vldr	s14, [r3]
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	3304      	adds	r3, #4
 8012618:	edd3 6a00 	vldr	s13, [r3]
 801261c:	edd7 7a01 	vldr	s15, [r7, #4]
 8012620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	3304      	adds	r3, #4
 8012628:	ee77 7a27 	vadd.f32	s15, s14, s15
 801262c:	edc3 7a00 	vstr	s15, [r3]
	q[2] += qDot[2] * dt;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	3308      	adds	r3, #8
 8012634:	ed93 7a00 	vldr	s14, [r3]
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	3308      	adds	r3, #8
 801263c:	edd3 6a00 	vldr	s13, [r3]
 8012640:	edd7 7a01 	vldr	s15, [r7, #4]
 8012644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	3308      	adds	r3, #8
 801264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012650:	edc3 7a00 	vstr	s15, [r3]
	q[3] += qDot[3] * dt;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	330c      	adds	r3, #12
 8012658:	ed93 7a00 	vldr	s14, [r3]
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	330c      	adds	r3, #12
 8012660:	edd3 6a00 	vldr	s13, [r3]
 8012664:	edd7 7a01 	vldr	s15, [r7, #4]
 8012668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	330c      	adds	r3, #12
 8012670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012674:	edc3 7a00 	vstr	s15, [r3]

    // Se normaliza el cuaternion
    normalizar4Array(q);
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f001 f921 	bl	80138c0 <normalizar4Array>
}
 801267e:	bf00      	nop
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
	...

08012688 <configAHRS>:
 8012688:	b480      	push	{r7}
 801268a:	af00      	add	r7, sp, #0
 801268c:	4b02      	ldr	r3, [pc, #8]	; (8012698 <configAHRS+0x10>)
 801268e:	4618      	mov	r0, r3
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	2000a42c 	.word	0x2000a42c

0801269c <iniciarMahony>:
**  Descripcion:    Inicia el estimador
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarMahony(void)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
    mahony_t *driver = &mahony;
 80126a2:	4b1f      	ldr	r3, [pc, #124]	; (8012720 <iniciarMahony+0x84>)
 80126a4:	607b      	str	r3, [r7, #4]

    memset(driver, 0, sizeof(mahony_t));
 80126a6:	2228      	movs	r2, #40	; 0x28
 80126a8:	2100      	movs	r1, #0
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f022 fdf8 	bl	80352a0 <memset>
    driver->usarMarg = configAHRS()->habilitarMag;
 80126b0:	f7ff ffea 	bl	8012688 <configAHRS>
 80126b4:	4603      	mov	r3, r0
 80126b6:	785a      	ldrb	r2, [r3, #1]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	705a      	strb	r2, [r3, #1]
    driver->kpIni = configAHRS()->mahony.kpIni;
 80126bc:	f7ff ffe4 	bl	8012688 <configAHRS>
 80126c0:	4603      	mov	r3, r0
 80126c2:	689a      	ldr	r2, [r3, #8]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	619a      	str	r2, [r3, #24]
    driver->kiIni = configAHRS()->mahony.kiIni;
 80126c8:	f7ff ffde 	bl	8012688 <configAHRS>
 80126cc:	4603      	mov	r3, r0
 80126ce:	68da      	ldr	r2, [r3, #12]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	61da      	str	r2, [r3, #28]
    driver->tiempoArranque = micros();
 80126d4:	f005 fa00 	bl	8017ad8 <micros>
 80126d8:	4602      	mov	r2, r0
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	609a      	str	r2, [r3, #8]

    if (driver->usarMarg) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	785b      	ldrb	r3, [r3, #1]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00c      	beq.n	8012700 <iniciarMahony+0x64>
    	driver->kp = configAHRS()->mahony.kpMarg;
 80126e6:	f7ff ffcf 	bl	8012688 <configAHRS>
 80126ea:	4603      	mov	r3, r0
 80126ec:	699a      	ldr	r2, [r3, #24]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	621a      	str	r2, [r3, #32]
        driver->ki = configAHRS()->mahony.kiMarg;
 80126f2:	f7ff ffc9 	bl	8012688 <configAHRS>
 80126f6:	4603      	mov	r3, r0
 80126f8:	69da      	ldr	r2, [r3, #28]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    else {
    	driver->kp = configAHRS()->mahony.kp;
    	driver->ki = configAHRS()->mahony.ki;
    }
}
 80126fe:	e00b      	b.n	8012718 <iniciarMahony+0x7c>
    	driver->kp = configAHRS()->mahony.kp;
 8012700:	f7ff ffc2 	bl	8012688 <configAHRS>
 8012704:	4603      	mov	r3, r0
 8012706:	691a      	ldr	r2, [r3, #16]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	621a      	str	r2, [r3, #32]
    	driver->ki = configAHRS()->mahony.ki;
 801270c:	f7ff ffbc 	bl	8012688 <configAHRS>
 8012710:	4603      	mov	r3, r0
 8012712:	695a      	ldr	r2, [r3, #20]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012718:	bf00      	nop
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	20002d68 	.word	0x20002d68
 8012724:	00000000 	.word	0x00000000

08012728 <actualizarMahony>:
**  Descripcion:    Actualiza el algoritmo Mahony
**  Parametros:     Uso del magnetometro, cuaternion, velocidad angular corregida, bias calculado, giroscopio, acelerometro, campo magnetico
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMahony(bool usarMag, float *q, float *vel, float *bias, float *w, float *a, float *m)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b092      	sub	sp, #72	; 0x48
 801272c:	af02      	add	r7, sp, #8
 801272e:	60b9      	str	r1, [r7, #8]
 8012730:	607a      	str	r2, [r7, #4]
 8012732:	603b      	str	r3, [r7, #0]
 8012734:	4603      	mov	r3, r0
 8012736:	73fb      	strb	r3, [r7, #15]
    mahony_t *driver = &mahony;
 8012738:	4b73      	ldr	r3, [pc, #460]	; (8012908 <actualizarMahony+0x1e0>)
 801273a:	63fb      	str	r3, [r7, #60]	; 0x3c
    float gir[3], acel[3], mag[3];

    uint32_t tiempoActual = micros();
 801273c:	f005 f9cc 	bl	8017ad8 <micros>
 8012740:	63b8      	str	r0, [r7, #56]	; 0x38
    float dt = (tiempoActual - driver->tiempoAnterior) / 1000000.0;
 8012742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	ee07 3a90 	vmov	s15, r3
 801274e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8012752:	ed9f 5b67 	vldr	d5, [pc, #412]	; 80128f0 <actualizarMahony+0x1c8>
 8012756:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801275a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801275e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    driver->tiempoAnterior = tiempoActual;
 8012762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012766:	605a      	str	r2, [r3, #4]

    // Se copian las variables
    acel[0] = a[0];
 8012768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	61fb      	str	r3, [r7, #28]
    acel[1] = a[1];
 801276e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	623b      	str	r3, [r7, #32]
    acel[2] = a[2];
 8012774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	627b      	str	r3, [r7, #36]	; 0x24

    gir[0] = radianes(w[0]);
 801277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801277c:	edd3 7a00 	vldr	s15, [r3]
 8012780:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012784:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80128f8 <actualizarMahony+0x1d0>
 8012788:	ee27 7b06 	vmul.f64	d7, d7, d6
 801278c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012790:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    gir[1] = radianes(w[1]);
 8012794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012796:	3304      	adds	r3, #4
 8012798:	edd3 7a00 	vldr	s15, [r3]
 801279c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80127a0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80128f8 <actualizarMahony+0x1d0>
 80127a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80127ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    gir[2] = radianes(w[2]);
 80127b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127b2:	3308      	adds	r3, #8
 80127b4:	edd3 7a00 	vldr	s15, [r3]
 80127b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80127bc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80128f8 <actualizarMahony+0x1d0>
 80127c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80127c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    mag[0] = m[0];
 80127cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	613b      	str	r3, [r7, #16]
    mag[1] = m[1];
 80127d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	617b      	str	r3, [r7, #20]
    mag[2] = m[2];
 80127d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	61bb      	str	r3, [r7, #24]

    if (usarMag)
 80127de:	7bfb      	ldrb	r3, [r7, #15]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d010      	beq.n	8012806 <actualizarMahony+0xde>
        actualizarConMagMahony(q, vel, bias, gir, acel, mag, dt);
 80127e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80127e8:	f107 0310 	add.w	r3, r7, #16
 80127ec:	9301      	str	r3, [sp, #4]
 80127ee:	f107 031c 	add.w	r3, r7, #28
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80127f8:	4613      	mov	r3, r2
 80127fa:	683a      	ldr	r2, [r7, #0]
 80127fc:	6879      	ldr	r1, [r7, #4]
 80127fe:	68b8      	ldr	r0, [r7, #8]
 8012800:	f000 f884 	bl	801290c <actualizarConMagMahony>
 8012804:	e00c      	b.n	8012820 <actualizarMahony+0xf8>
    else
        actualizarSinMagMahony(q, vel, bias, gir, acel, dt);
 8012806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801280a:	f107 031c 	add.w	r3, r7, #28
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8012814:	4613      	mov	r3, r2
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	68b8      	ldr	r0, [r7, #8]
 801281c:	f000 fad0 	bl	8012dc0 <actualizarSinMagMahony>

    if (driver->nuevaMedida) {
 8012820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012822:	789b      	ldrb	r3, [r3, #2]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d05e      	beq.n	80128e6 <actualizarMahony+0x1be>
    	driver->nuevaMedida = false;
 8012828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801282a:	2200      	movs	r2, #0
 801282c:	709a      	strb	r2, [r3, #2]

        // Conversion a grados
        vel[0] = grados(vel[0]);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	edd3 7a00 	vldr	s15, [r3]
 8012834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012838:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8012900 <actualizarMahony+0x1d8>
 801283c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012840:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	edc3 7a00 	vstr	s15, [r3]
        vel[1] = grados(vel[1]);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	3304      	adds	r3, #4
 801284e:	edd3 7a00 	vldr	s15, [r3]
 8012852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012900 <actualizarMahony+0x1d8>
 801285a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	3304      	adds	r3, #4
 8012862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012866:	edc3 7a00 	vstr	s15, [r3]
        vel[2] = grados(vel[2]);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	3308      	adds	r3, #8
 801286e:	edd3 7a00 	vldr	s15, [r3]
 8012872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012876:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8012900 <actualizarMahony+0x1d8>
 801287a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	3308      	adds	r3, #8
 8012882:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012886:	edc3 7a00 	vstr	s15, [r3]

        bias[0] = grados(bias[0]);
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	edd3 7a00 	vldr	s15, [r3]
 8012890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012894:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8012900 <actualizarMahony+0x1d8>
 8012898:	ee27 7b06 	vmul.f64	d7, d7, d6
 801289c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	edc3 7a00 	vstr	s15, [r3]
        bias[1] = grados(bias[1]);
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	3304      	adds	r3, #4
 80128aa:	edd3 7a00 	vldr	s15, [r3]
 80128ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80128b2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8012900 <actualizarMahony+0x1d8>
 80128b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	3304      	adds	r3, #4
 80128be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80128c2:	edc3 7a00 	vstr	s15, [r3]
        bias[2] = grados(bias[2]);
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	3308      	adds	r3, #8
 80128ca:	edd3 7a00 	vldr	s15, [r3]
 80128ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80128d2:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8012900 <actualizarMahony+0x1d8>
 80128d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	3308      	adds	r3, #8
 80128de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80128e2:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80128e6:	bf00      	nop
 80128e8:	3740      	adds	r7, #64	; 0x40
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	00000000 	.word	0x00000000
 80128f4:	412e8480 	.word	0x412e8480
 80128f8:	a2529d39 	.word	0xa2529d39
 80128fc:	3f91df46 	.word	0x3f91df46
 8012900:	1a63c1f8 	.word	0x1a63c1f8
 8012904:	404ca5dc 	.word	0x404ca5dc
 8012908:	20002d68 	.word	0x20002d68

0801290c <actualizarConMagMahony>:
**  Parametros:     Cuaternion, velocidad angular corregida, bias calculado, giroscopio,
**                  acelerometro, campo magnetico, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarConMagMahony(float *q, float *vel, float *bias, float *w, float *a, float *m, float dt)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b0a0      	sub	sp, #128	; 0x80
 8012910:	af02      	add	r7, sp, #8
 8012912:	6178      	str	r0, [r7, #20]
 8012914:	6139      	str	r1, [r7, #16]
 8012916:	60fa      	str	r2, [r7, #12]
 8012918:	60bb      	str	r3, [r7, #8]
 801291a:	ed87 0a01 	vstr	s0, [r7, #4]
    mahony_t *driver = &mahony;
 801291e:	4b10      	ldr	r3, [pc, #64]	; (8012960 <actualizarConMagMahony+0x54>)
 8012920:	677b      	str	r3, [r7, #116]	; 0x74
    float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
    float hx, hy, bx, bz;
    float v[3], c[3];
    float e[3];

	if (!((a[0] == 0.0f) && (a[1] == 0.0f) && (a[2] == 0.0f))) {
 8012922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012926:	edd3 7a00 	vldr	s15, [r3]
 801292a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012932:	d117      	bne.n	8012964 <actualizarConMagMahony+0x58>
 8012934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012938:	3304      	adds	r3, #4
 801293a:	edd3 7a00 	vldr	s15, [r3]
 801293e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012946:	d10d      	bne.n	8012964 <actualizarConMagMahony+0x58>
 8012948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801294c:	3308      	adds	r3, #8
 801294e:	edd3 7a00 	vldr	s15, [r3]
 8012952:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295a:	f000 8226 	beq.w	8012daa <actualizarConMagMahony+0x49e>
 801295e:	e001      	b.n	8012964 <actualizarConMagMahony+0x58>
 8012960:	20002d68 	.word	0x20002d68
        // Se normaliza la acelereacion
        normalizar3Array(a);
 8012964:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012968:	f000 ff5a 	bl	8013820 <normalizar3Array>

        // Se normaliza el magnetometro
        normalizar3Array(m);
 801296c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8012970:	f000 ff56 	bl	8013820 <normalizar3Array>

        // Variables auxiliares del cuaternion
        q0q0 = q[0] * q[0];
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	ed93 7a00 	vldr	s14, [r3]
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	edd3 7a00 	vldr	s15, [r3]
 8012980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012984:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        q0q1 = q[0] * q[1];
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	ed93 7a00 	vldr	s14, [r3]
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	3304      	adds	r3, #4
 8012992:	edd3 7a00 	vldr	s15, [r3]
 8012996:	ee67 7a27 	vmul.f32	s15, s14, s15
 801299a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        q0q2 = q[0] * q[2];
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	ed93 7a00 	vldr	s14, [r3]
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	3308      	adds	r3, #8
 80129a8:	edd3 7a00 	vldr	s15, [r3]
 80129ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129b0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        q0q3 = q[0] * q[3];
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	ed93 7a00 	vldr	s14, [r3]
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	330c      	adds	r3, #12
 80129be:	edd3 7a00 	vldr	s15, [r3]
 80129c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129c6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        q1q1 = q[1] * q[1];
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	3304      	adds	r3, #4
 80129ce:	ed93 7a00 	vldr	s14, [r3]
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	3304      	adds	r3, #4
 80129d6:	edd3 7a00 	vldr	s15, [r3]
 80129da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129de:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        q1q2 = q[1] * q[2];
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	3304      	adds	r3, #4
 80129e6:	ed93 7a00 	vldr	s14, [r3]
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	3308      	adds	r3, #8
 80129ee:	edd3 7a00 	vldr	s15, [r3]
 80129f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129f6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        q1q3 = q[1] * q[3];
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	3304      	adds	r3, #4
 80129fe:	ed93 7a00 	vldr	s14, [r3]
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	330c      	adds	r3, #12
 8012a06:	edd3 7a00 	vldr	s15, [r3]
 8012a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a0e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        q2q2 = q[2] * q[2];
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	3308      	adds	r3, #8
 8012a16:	ed93 7a00 	vldr	s14, [r3]
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	3308      	adds	r3, #8
 8012a1e:	edd3 7a00 	vldr	s15, [r3]
 8012a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        q2q3 = q[2] * q[3];
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	ed93 7a00 	vldr	s14, [r3]
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	330c      	adds	r3, #12
 8012a36:	edd3 7a00 	vldr	s15, [r3]
 8012a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a3e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        q3q3 = q[3] * q[3];
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	330c      	adds	r3, #12
 8012a46:	ed93 7a00 	vldr	s14, [r3]
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	330c      	adds	r3, #12
 8012a4e:	edd3 7a00 	vldr	s15, [r3]
 8012a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a56:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        // Direccion de referencia del campo magnetico de la Tierra
        hx = 2.0f * (m[0] * (0.5f - q2q2 - q3q3) + m[1] * (q1q2 - q0q3) + m[2] * (q1q3 + q0q2));
 8012a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a5e:	ed93 7a00 	vldr	s14, [r3]
 8012a62:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012a66:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8012a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a6e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8012a72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a7e:	3304      	adds	r3, #4
 8012a80:	edd3 6a00 	vldr	s13, [r3]
 8012a84:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8012a88:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8012a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	edd3 6a00 	vldr	s13, [r3]
 8012aa2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8012aa6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8012aaa:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ab6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012aba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        hy = 2.0f * (m[0] * (q1q2 + q0q3) + m[1] * (0.5f - q1q1 - q3q3) + m[2] * (q2q3 - q0q1));
 8012abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ac2:	ed93 7a00 	vldr	s14, [r3]
 8012ac6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8012aca:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8012ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ada:	3304      	adds	r3, #4
 8012adc:	edd3 6a00 	vldr	s13, [r3]
 8012ae0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012ae4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012ae8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012aec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8012af0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b00:	3308      	adds	r3, #8
 8012b02:	edd3 6a00 	vldr	s13, [r3]
 8012b06:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8012b0a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8012b0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012b1e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        bx = sqrt(hx * hx + hy * hy);
 8012b22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012b26:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012b2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8012b2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8012b3e:	f026 fb27 	bl	8039190 <sqrt>
 8012b42:	eeb0 7b40 	vmov.f64	d7, d0
 8012b46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012b4a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        bz = 2.0f * (m[0] * (q1q3 - q0q2) + m[1] * (q2q3 + q0q1) + m[2] * (0.5f - q1q1 - q2q2));
 8012b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b52:	ed93 7a00 	vldr	s14, [r3]
 8012b56:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8012b5a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8012b5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b6a:	3304      	adds	r3, #4
 8012b6c:	edd3 6a00 	vldr	s13, [r3]
 8012b70:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8012b74:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8012b78:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b88:	3308      	adds	r3, #8
 8012b8a:	edd3 6a00 	vldr	s13, [r3]
 8012b8e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012b92:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012b96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012b9a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8012b9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012baa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012bae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        // Direccion estimada de la gravedad  y el campo magnetico
        v[0] = q1q3 - q0q2;
 8012bb2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012bb6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8012bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        v[1] = q0q1 + q2q3;
 8012bc2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8012bc6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        v[2] = q0q0 - 0.5f + q3q3;
 8012bd2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8012bd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012bda:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012bde:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8012be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012be6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        c[0] = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8012bea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012bee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8012bf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012bf6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8012bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012bfe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c06:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8012c0a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8012c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012c12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        c[1] = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 8012c22:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012c26:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8012c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c2e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c36:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8012c3a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012c3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012c42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        c[2] = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 8012c52:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8012c56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8012c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012c6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012c6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012c72:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8012c76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012c7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // El error es la suma del producto cruzado entre la dirección estimada y medida
        e[0] = (a[1] * v[2] - a[2] * v[1]) + (m[1] * c[2] - m[2] * c[1]);
 8012c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c8e:	3304      	adds	r3, #4
 8012c90:	ed93 7a00 	vldr	s14, [r3]
 8012c94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ca0:	3308      	adds	r3, #8
 8012ca2:	edd3 6a00 	vldr	s13, [r3]
 8012ca6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	edd3 6a00 	vldr	s13, [r3]
 8012cbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012cc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012cc8:	3308      	adds	r3, #8
 8012cca:	ed93 6a00 	vldr	s12, [r3]
 8012cce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012cd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012cd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cde:	edc7 7a06 	vstr	s15, [r7, #24]
        e[1] = (a[2] * v[0] - a[0] * v[2]) + (m[2] * c[0] - m[0] * c[2]);
 8012ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ce6:	3308      	adds	r3, #8
 8012ce8:	ed93 7a00 	vldr	s14, [r3]
 8012cec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cf8:	edd3 6a00 	vldr	s13, [r3]
 8012cfc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d0c:	3308      	adds	r3, #8
 8012d0e:	edd3 6a00 	vldr	s13, [r3]
 8012d12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d1e:	ed93 6a00 	vldr	s12, [r3]
 8012d22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012d26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012d2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d32:	edc7 7a07 	vstr	s15, [r7, #28]
        e[2] = (a[0] * v[1] - a[1] * v[0]) + (m[0] * c[1] - m[1] * c[0]);
 8012d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d3a:	ed93 7a00 	vldr	s14, [r3]
 8012d3e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	edd3 6a00 	vldr	s13, [r3]
 8012d50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d60:	edd3 6a00 	vldr	s13, [r3]
 8012d64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d70:	3304      	adds	r3, #4
 8012d72:	ed93 6a00 	vldr	s12, [r3]
 8012d76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012d7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d86:	edc7 7a08 	vstr	s15, [r7, #32]

		actualizarControladorMahony(vel, bias, w, e, driver->ei, dt);
 8012d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d8c:	330c      	adds	r3, #12
 8012d8e:	f107 0218 	add.w	r2, r7, #24
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	ed97 0a01 	vldr	s0, [r7, #4]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	68f9      	ldr	r1, [r7, #12]
 8012d9e:	6938      	ldr	r0, [r7, #16]
 8012da0:	f000 f8d6 	bl	8012f50 <actualizarControladorMahony>
		driver->nuevaMedida = true;
 8012da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012da6:	2201      	movs	r2, #1
 8012da8:	709a      	strb	r2, [r3, #2]
	}

    actualizarCuaternionMahony(q, vel, dt);
 8012daa:	ed97 0a01 	vldr	s0, [r7, #4]
 8012dae:	6939      	ldr	r1, [r7, #16]
 8012db0:	6978      	ldr	r0, [r7, #20]
 8012db2:	f000 f9cf 	bl	8013154 <actualizarCuaternionMahony>
}
 8012db6:	bf00      	nop
 8012db8:	3778      	adds	r7, #120	; 0x78
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop

08012dc0 <actualizarSinMagMahony>:
**  Parametros:     Cuaternion, velocidad angular corregida, bias calculado, giroscopio,
**                  acelerometro, incremento del tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarSinMagMahony(float *q, float *vel, float *bias, float *w, float *a, float dt)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b090      	sub	sp, #64	; 0x40
 8012dc4:	af02      	add	r7, sp, #8
 8012dc6:	6178      	str	r0, [r7, #20]
 8012dc8:	6139      	str	r1, [r7, #16]
 8012dca:	60fa      	str	r2, [r7, #12]
 8012dcc:	60bb      	str	r3, [r7, #8]
 8012dce:	ed87 0a01 	vstr	s0, [r7, #4]
    mahony_t *driver = &mahony;
 8012dd2:	4b5e      	ldr	r3, [pc, #376]	; (8012f4c <actualizarSinMagMahony+0x18c>)
 8012dd4:	637b      	str	r3, [r7, #52]	; 0x34
    float v[3];
    float e[3];

    if (!((a[0] == 0.0f) && (a[1] == 0.0f) && (a[2] == 0.0f))) {
 8012dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd8:	edd3 7a00 	vldr	s15, [r3]
 8012ddc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de4:	d112      	bne.n	8012e0c <actualizarSinMagMahony+0x4c>
 8012de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012de8:	3304      	adds	r3, #4
 8012dea:	edd3 7a00 	vldr	s15, [r3]
 8012dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df6:	d109      	bne.n	8012e0c <actualizarSinMagMahony+0x4c>
 8012df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	edd3 7a00 	vldr	s15, [r3]
 8012e00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e08:	f000 8095 	beq.w	8012f36 <actualizarSinMagMahony+0x176>
        // Se normaliza la acelereacion
        normalizar3Array(a);
 8012e0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012e0e:	f000 fd07 	bl	8013820 <normalizar3Array>

        // Direccion estimada de la gravedad
        v[0] = q[1] * q[3] - q[0] * q[2];
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	3304      	adds	r3, #4
 8012e16:	ed93 7a00 	vldr	s14, [r3]
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	330c      	adds	r3, #12
 8012e1e:	edd3 7a00 	vldr	s15, [r3]
 8012e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	edd3 6a00 	vldr	s13, [r3]
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	3308      	adds	r3, #8
 8012e30:	edd3 7a00 	vldr	s15, [r3]
 8012e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        v[1] = q[0] * q[1] + q[2] * q[3];
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	ed93 7a00 	vldr	s14, [r3]
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	3304      	adds	r3, #4
 8012e4a:	edd3 7a00 	vldr	s15, [r3]
 8012e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	3308      	adds	r3, #8
 8012e56:	edd3 6a00 	vldr	s13, [r3]
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	330c      	adds	r3, #12
 8012e5e:	edd3 7a00 	vldr	s15, [r3]
 8012e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e6a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        v[2] = q[0] * q[0] - 0.5f + q[3] * q[3];
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	ed93 7a00 	vldr	s14, [r3]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	edd3 7a00 	vldr	s15, [r3]
 8012e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012e82:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	330c      	adds	r3, #12
 8012e8a:	edd3 6a00 	vldr	s13, [r3]
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	330c      	adds	r3, #12
 8012e92:	edd3 7a00 	vldr	s15, [r3]
 8012e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

        // El error es la suma del producto cruzado entre la dirección de gravedad estimada y medida
        e[0] = (a[1] * v[2] - a[2] * v[1]);
 8012ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	ed93 7a00 	vldr	s14, [r3]
 8012eaa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb4:	3308      	adds	r3, #8
 8012eb6:	edd3 6a00 	vldr	s13, [r3]
 8012eba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        e[1] = (a[2] * v[0] - a[0] * v[2]);
 8012eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ecc:	3308      	adds	r3, #8
 8012ece:	ed93 7a00 	vldr	s14, [r3]
 8012ed2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012edc:	edd3 6a00 	vldr	s13, [r3]
 8012ee0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012eec:	edc7 7a08 	vstr	s15, [r7, #32]
        e[2] = (a[0] * v[1] - a[1] * v[0]);
 8012ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef2:	ed93 7a00 	vldr	s14, [r3]
 8012ef6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f00:	3304      	adds	r3, #4
 8012f02:	edd3 6a00 	vldr	s13, [r3]
 8012f06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		actualizarControladorMahony(vel, bias, w, e, driver->ei, dt);
 8012f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f18:	330c      	adds	r3, #12
 8012f1a:	f107 021c 	add.w	r2, r7, #28
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	ed97 0a01 	vldr	s0, [r7, #4]
 8012f24:	4613      	mov	r3, r2
 8012f26:	68ba      	ldr	r2, [r7, #8]
 8012f28:	68f9      	ldr	r1, [r7, #12]
 8012f2a:	6938      	ldr	r0, [r7, #16]
 8012f2c:	f000 f810 	bl	8012f50 <actualizarControladorMahony>
		driver->nuevaMedida = true;
 8012f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f32:	2201      	movs	r2, #1
 8012f34:	709a      	strb	r2, [r3, #2]
    }

    actualizarCuaternionMahony(q, vel, dt);
 8012f36:	ed97 0a01 	vldr	s0, [r7, #4]
 8012f3a:	6939      	ldr	r1, [r7, #16]
 8012f3c:	6978      	ldr	r0, [r7, #20]
 8012f3e:	f000 f909 	bl	8013154 <actualizarCuaternionMahony>
}
 8012f42:	bf00      	nop
 8012f44:	3738      	adds	r7, #56	; 0x38
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	20002d68 	.word	0x20002d68

08012f50 <actualizarControladorMahony>:
**  Parametros:     Velocidad angular corregida, bias calculado, giroscopio, error proprcional, error integral
**                  incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarControladorMahony(float *vel, float *bias, float *w, float *e, float *ei, float dt)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b08d      	sub	sp, #52	; 0x34
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6178      	str	r0, [r7, #20]
 8012f58:	6139      	str	r1, [r7, #16]
 8012f5a:	60fa      	str	r2, [r7, #12]
 8012f5c:	60bb      	str	r3, [r7, #8]
 8012f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	mahony_t *driver = &mahony;
 8012f62:	4b7a      	ldr	r3, [pc, #488]	; (801314c <actualizarControladorMahony+0x1fc>)
 8012f64:	627b      	str	r3, [r7, #36]	; 0x24
    float kp, ki;
    float velAng[3];

    kp = driver->kp;
 8012f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f68:	6a1b      	ldr	r3, [r3, #32]
 8012f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ki = driver->ki;
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f70:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!driver->arrancado) {
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	f083 0301 	eor.w	r3, r3, #1
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d011      	beq.n	8012fa4 <actualizarControladorMahony+0x54>
	    if (driver->tiempoAnterior - driver->tiempoArranque >= TIEMPO_CONV_MAHONY_INI_US)
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	1ad3      	subs	r3, r2, r3
 8012f8a:	4a71      	ldr	r2, [pc, #452]	; (8013150 <actualizarControladorMahony+0x200>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d903      	bls.n	8012f98 <actualizarControladorMahony+0x48>
	    	driver->arrancado = true;
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	2201      	movs	r2, #1
 8012f94:	701a      	strb	r2, [r3, #0]
 8012f96:	e005      	b.n	8012fa4 <actualizarControladorMahony+0x54>
	    else {
            kp = driver->kpIni;
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	699b      	ldr	r3, [r3, #24]
 8012f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            ki = driver->kiIni;
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	69db      	ldr	r3, [r3, #28]
 8012fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	    }
	}

    velAng[0] = w[0];
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	61bb      	str	r3, [r7, #24]
    velAng[1] = w[1];
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	61fb      	str	r3, [r7, #28]
    velAng[2] = w[2];
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	689b      	ldr	r3, [r3, #8]
 8012fb4:	623b      	str	r3, [r7, #32]

	// Calcular y aplica el feedback integral si esta habilitado
	if (ki > 0.0f) {
 8012fb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc2:	dd5c      	ble.n	801307e <actualizarControladorMahony+0x12e>
        ei[0] += ki * e[0] * dt;
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc6:	ed93 7a00 	vldr	s14, [r3]
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	edd3 6a00 	vldr	s13, [r3]
 8012fd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8012fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	edc3 7a00 	vstr	s15, [r3]
        ei[1] += ki * e[1] * dt;
 8012fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fec:	3304      	adds	r3, #4
 8012fee:	ed93 7a00 	vldr	s14, [r3]
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	edd3 6a00 	vldr	s13, [r3]
 8012ffa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013002:	edd7 7a01 	vldr	s15, [r7, #4]
 8013006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	3304      	adds	r3, #4
 801300e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013012:	edc3 7a00 	vstr	s15, [r3]
        ei[2] += ki * e[2] * dt;
 8013016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013018:	3308      	adds	r3, #8
 801301a:	ed93 7a00 	vldr	s14, [r3]
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	3308      	adds	r3, #8
 8013022:	edd3 6a00 	vldr	s13, [r3]
 8013026:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801302a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8013032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013038:	3308      	adds	r3, #8
 801303a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801303e:	edc3 7a00 	vstr	s15, [r3]

        velAng[0] += ei[0];
 8013042:	ed97 7a06 	vldr	s14, [r7, #24]
 8013046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013048:	edd3 7a00 	vldr	s15, [r3]
 801304c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013050:	edc7 7a06 	vstr	s15, [r7, #24]
        velAng[1] += ei[1];
 8013054:	ed97 7a07 	vldr	s14, [r7, #28]
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	3304      	adds	r3, #4
 801305c:	edd3 7a00 	vldr	s15, [r3]
 8013060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013064:	edc7 7a07 	vstr	s15, [r7, #28]
        velAng[2] += ei[2];
 8013068:	ed97 7a08 	vldr	s14, [r7, #32]
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	3308      	adds	r3, #8
 8013070:	edd3 7a00 	vldr	s15, [r3]
 8013074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013078:	edc7 7a08 	vstr	s15, [r7, #32]
 801307c:	e00b      	b.n	8013096 <actualizarControladorMahony+0x146>
	}
	else {
		ei[0] = 0.0f;	// Anti wind-up
 801307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013080:	f04f 0200 	mov.w	r2, #0
 8013084:	601a      	str	r2, [r3, #0]
		ei[0] = 0.0f;
 8013086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013088:	f04f 0200 	mov.w	r2, #0
 801308c:	601a      	str	r2, [r3, #0]
		ei[0] = 0.0f;
 801308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013090:	f04f 0200 	mov.w	r2, #0
 8013094:	601a      	str	r2, [r3, #0]
	}

    // Ganancia proporcional
    vel[0] = velAng[0] + kp * e[0];
 8013096:	ed97 7a06 	vldr	s14, [r7, #24]
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	edd3 6a00 	vldr	s13, [r3]
 80130a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80130a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	edc3 7a00 	vstr	s15, [r3]
    vel[1] = velAng[1] + kp * e[1];
 80130b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	3304      	adds	r3, #4
 80130ba:	edd3 6a00 	vldr	s13, [r3]
 80130be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80130c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	3304      	adds	r3, #4
 80130ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ce:	edc3 7a00 	vstr	s15, [r3]
    vel[2] = velAng[2] + kp * e[2];
 80130d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	3308      	adds	r3, #8
 80130da:	edd3 6a00 	vldr	s13, [r3]
 80130de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80130e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	3308      	adds	r3, #8
 80130ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ee:	edc3 7a00 	vstr	s15, [r3]

    // Calculo del bias
    bias[0] = vel[0] - w[0];
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	ed93 7a00 	vldr	s14, [r3]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	edd3 7a00 	vldr	s15, [r3]
 80130fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	edc3 7a00 	vstr	s15, [r3]
    bias[1] = vel[1] - w[1];
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	3304      	adds	r3, #4
 801310c:	ed93 7a00 	vldr	s14, [r3]
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	3304      	adds	r3, #4
 8013114:	edd3 7a00 	vldr	s15, [r3]
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	3304      	adds	r3, #4
 801311c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013120:	edc3 7a00 	vstr	s15, [r3]
    bias[2] = vel[2] - w[2];
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	3308      	adds	r3, #8
 8013128:	ed93 7a00 	vldr	s14, [r3]
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	3308      	adds	r3, #8
 8013130:	edd3 7a00 	vldr	s15, [r3]
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	3308      	adds	r3, #8
 8013138:	ee77 7a67 	vsub.f32	s15, s14, s15
 801313c:	edc3 7a00 	vstr	s15, [r3]
}
 8013140:	bf00      	nop
 8013142:	3734      	adds	r7, #52	; 0x34
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr
 801314c:	20002d68 	.word	0x20002d68
 8013150:	003d08ff 	.word	0x003d08ff

08013154 <actualizarCuaternionMahony>:
**  Descripcion:    Actualiza el cuaternion
**  Parametros:     Puntero al cuaternion, Puntero a la velocidad angular, incremento de tiempo
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCuaternionMahony(float *q, float *w, float dt)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b08a      	sub	sp, #40	; 0x28
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	ed87 0a01 	vstr	s0, [r7, #4]
	float gir[3];
	float q0, q1, q2;

	// Se integra la tasa de cambio de cuaternion
	gir[0] = w[0] * (0.5f * dt);
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	ed93 7a00 	vldr	s14, [r3]
 8013168:	edd7 7a01 	vldr	s15, [r7, #4]
 801316c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013170:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013178:	edc7 7a04 	vstr	s15, [r7, #16]
	gir[1] = w[1] * (0.5f * dt);
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	3304      	adds	r3, #4
 8013180:	ed93 7a00 	vldr	s14, [r3]
 8013184:	edd7 7a01 	vldr	s15, [r7, #4]
 8013188:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801318c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013194:	edc7 7a05 	vstr	s15, [r7, #20]
	gir[2] = w[2] * (0.5f * dt);
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	3308      	adds	r3, #8
 801319c:	ed93 7a00 	vldr	s14, [r3]
 80131a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80131a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80131a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131b0:	edc7 7a06 	vstr	s15, [r7, #24]

	q0 = q[0];
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	627b      	str	r3, [r7, #36]	; 0x24
	q1 = q[1];
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	623b      	str	r3, [r7, #32]
	q2 = q[2];
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	61fb      	str	r3, [r7, #28]

    q[0] += (-q1 * gir[0] - q2 * gir[1] - q[3] * gir[2]);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	ed93 7a00 	vldr	s14, [r3]
 80131cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80131d0:	eef1 6a67 	vneg.f32	s13, s15
 80131d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80131d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80131dc:	ed97 6a05 	vldr	s12, [r7, #20]
 80131e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80131e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80131e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	330c      	adds	r3, #12
 80131f0:	ed93 6a00 	vldr	s12, [r3]
 80131f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80131f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80131fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	edc3 7a00 	vstr	s15, [r3]
    q[1] += ( q0 * gir[0] + q2 * gir[2] - q[3] * gir[1]);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	3304      	adds	r3, #4
 801320e:	ed93 7a00 	vldr	s14, [r3]
 8013212:	edd7 6a04 	vldr	s13, [r7, #16]
 8013216:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801321a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801321e:	ed97 6a06 	vldr	s12, [r7, #24]
 8013222:	edd7 7a07 	vldr	s15, [r7, #28]
 8013226:	ee66 7a27 	vmul.f32	s15, s12, s15
 801322a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	330c      	adds	r3, #12
 8013232:	ed93 6a00 	vldr	s12, [r3]
 8013236:	edd7 7a05 	vldr	s15, [r7, #20]
 801323a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801323e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	3304      	adds	r3, #4
 8013246:	ee77 7a27 	vadd.f32	s15, s14, s15
 801324a:	edc3 7a00 	vstr	s15, [r3]
    q[2] += ( q0 * gir[1] - q1 * gir[2] + q[3] * gir[0]);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	3308      	adds	r3, #8
 8013252:	ed93 7a00 	vldr	s14, [r3]
 8013256:	edd7 6a05 	vldr	s13, [r7, #20]
 801325a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801325e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013262:	ed97 6a06 	vldr	s12, [r7, #24]
 8013266:	edd7 7a08 	vldr	s15, [r7, #32]
 801326a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801326e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	330c      	adds	r3, #12
 8013276:	ed93 6a00 	vldr	s12, [r3]
 801327a:	edd7 7a04 	vldr	s15, [r7, #16]
 801327e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	3308      	adds	r3, #8
 801328a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801328e:	edc3 7a00 	vstr	s15, [r3]
    q[3] += ( q0 * gir[2] + q1 * gir[1] - q2   * gir[0]);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	330c      	adds	r3, #12
 8013296:	ed93 7a00 	vldr	s14, [r3]
 801329a:	edd7 6a06 	vldr	s13, [r7, #24]
 801329e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80132a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80132a6:	ed97 6a05 	vldr	s12, [r7, #20]
 80132aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80132ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80132b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80132b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80132ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80132be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80132c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	330c      	adds	r3, #12
 80132ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132ce:	edc3 7a00 	vstr	s15, [r3]

	// Se normaliza el cuaternion
	normalizar4Array(q);
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f000 faf4 	bl	80138c0 <normalizar4Array>
}
 80132d8:	bf00      	nop
 80132da:	3728      	adds	r7, #40	; 0x28
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <calcularCRC4>:
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	2300      	movs	r3, #0
 80132ea:	81fb      	strh	r3, [r7, #14]
 80132ec:	2300      	movs	r3, #0
 80132ee:	737b      	strb	r3, [r7, #13]
 80132f0:	e03a      	b.n	8013368 <calcularCRC4+0x88>
 80132f2:	7b7b      	ldrb	r3, [r7, #13]
 80132f4:	f003 0301 	and.w	r3, r3, #1
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00c      	beq.n	8013316 <calcularCRC4+0x36>
 80132fc:	7b7b      	ldrb	r3, [r7, #13]
 80132fe:	085b      	lsrs	r3, r3, #1
 8013300:	b2db      	uxtb	r3, r3
 8013302:	005b      	lsls	r3, r3, #1
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	4413      	add	r3, r2
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	b2db      	uxtb	r3, r3
 801330c:	b29a      	uxth	r2, r3
 801330e:	89fb      	ldrh	r3, [r7, #14]
 8013310:	4053      	eors	r3, r2
 8013312:	81fb      	strh	r3, [r7, #14]
 8013314:	e00d      	b.n	8013332 <calcularCRC4+0x52>
 8013316:	7b7b      	ldrb	r3, [r7, #13]
 8013318:	085b      	lsrs	r3, r3, #1
 801331a:	b2db      	uxtb	r3, r3
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	4413      	add	r3, r2
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	0a1b      	lsrs	r3, r3, #8
 8013326:	b29b      	uxth	r3, r3
 8013328:	b2db      	uxtb	r3, r3
 801332a:	b29a      	uxth	r2, r3
 801332c:	89fb      	ldrh	r3, [r7, #14]
 801332e:	4053      	eors	r3, r2
 8013330:	81fb      	strh	r3, [r7, #14]
 8013332:	2308      	movs	r3, #8
 8013334:	733b      	strb	r3, [r7, #12]
 8013336:	e011      	b.n	801335c <calcularCRC4+0x7c>
 8013338:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801333c:	2b00      	cmp	r3, #0
 801333e:	da07      	bge.n	8013350 <calcularCRC4+0x70>
 8013340:	89fb      	ldrh	r3, [r7, #14]
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	b21b      	sxth	r3, r3
 8013346:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 801334a:	b21b      	sxth	r3, r3
 801334c:	81fb      	strh	r3, [r7, #14]
 801334e:	e002      	b.n	8013356 <calcularCRC4+0x76>
 8013350:	89fb      	ldrh	r3, [r7, #14]
 8013352:	005b      	lsls	r3, r3, #1
 8013354:	81fb      	strh	r3, [r7, #14]
 8013356:	7b3b      	ldrb	r3, [r7, #12]
 8013358:	3b01      	subs	r3, #1
 801335a:	733b      	strb	r3, [r7, #12]
 801335c:	7b3b      	ldrb	r3, [r7, #12]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1ea      	bne.n	8013338 <calcularCRC4+0x58>
 8013362:	7b7b      	ldrb	r3, [r7, #13]
 8013364:	3301      	adds	r3, #1
 8013366:	737b      	strb	r3, [r7, #13]
 8013368:	7b7b      	ldrb	r3, [r7, #13]
 801336a:	2b0f      	cmp	r3, #15
 801336c:	d9c1      	bls.n	80132f2 <calcularCRC4+0x12>
 801336e:	89fb      	ldrh	r3, [r7, #14]
 8013370:	0b1b      	lsrs	r3, r3, #12
 8013372:	b29b      	uxth	r3, r3
 8013374:	4618      	mov	r0, r3
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr

08013380 <actualizarCRC16>:
 8013380:	b480      	push	{r7}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	4603      	mov	r3, r0
 8013388:	460a      	mov	r2, r1
 801338a:	80fb      	strh	r3, [r7, #6]
 801338c:	4613      	mov	r3, r2
 801338e:	717b      	strb	r3, [r7, #5]
 8013390:	797b      	ldrb	r3, [r7, #5]
 8013392:	021b      	lsls	r3, r3, #8
 8013394:	b21a      	sxth	r2, r3
 8013396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801339a:	4053      	eors	r3, r2
 801339c:	b21b      	sxth	r3, r3
 801339e:	80fb      	strh	r3, [r7, #6]
 80133a0:	2300      	movs	r3, #0
 80133a2:	60fb      	str	r3, [r7, #12]
 80133a4:	e012      	b.n	80133cc <actualizarCRC16+0x4c>
 80133a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	da08      	bge.n	80133c0 <actualizarCRC16+0x40>
 80133ae:	88fb      	ldrh	r3, [r7, #6]
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	b21a      	sxth	r2, r3
 80133b4:	f241 0321 	movw	r3, #4129	; 0x1021
 80133b8:	4053      	eors	r3, r2
 80133ba:	b21b      	sxth	r3, r3
 80133bc:	80fb      	strh	r3, [r7, #6]
 80133be:	e002      	b.n	80133c6 <actualizarCRC16+0x46>
 80133c0:	88fb      	ldrh	r3, [r7, #6]
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	80fb      	strh	r3, [r7, #6]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	3301      	adds	r3, #1
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	2b07      	cmp	r3, #7
 80133d0:	dde9      	ble.n	80133a6 <actualizarCRC16+0x26>
 80133d2:	88fb      	ldrh	r3, [r7, #6]
 80133d4:	4618      	mov	r0, r3
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <calcularCRC16>:
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b086      	sub	sp, #24
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	4603      	mov	r3, r0
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	81fb      	strh	r3, [r7, #14]
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	617b      	str	r3, [r7, #20]
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	4413      	add	r3, r2
 80133f8:	613b      	str	r3, [r7, #16]
 80133fa:	e00b      	b.n	8013414 <calcularCRC16+0x34>
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	781a      	ldrb	r2, [r3, #0]
 8013400:	89fb      	ldrh	r3, [r7, #14]
 8013402:	4611      	mov	r1, r2
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff ffbb 	bl	8013380 <actualizarCRC16>
 801340a:	4603      	mov	r3, r0
 801340c:	81fb      	strh	r3, [r7, #14]
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	3301      	adds	r3, #1
 8013412:	617b      	str	r3, [r7, #20]
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	429a      	cmp	r2, r3
 801341a:	d1ef      	bne.n	80133fc <calcularCRC16+0x1c>
 801341c:	89fb      	ldrh	r3, [r7, #14]
 801341e:	4618      	mov	r0, r3
 8013420:	3718      	adds	r7, #24
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
	...

08013428 <distanciaNE>:
 8013428:	b082      	sub	sp, #8
 801342a:	b590      	push	{r4, r7, lr}
 801342c:	ed2d 8b02 	vpush	{d8}
 8013430:	b085      	sub	sp, #20
 8013432:	af00      	add	r7, sp, #0
 8013434:	1d3c      	adds	r4, r7, #4
 8013436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801343a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801343c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	1ad3      	subs	r3, r2, r3
 8013442:	ee07 3a90 	vmov	s15, r3
 8013446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801344a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80134a4 <distanciaNE+0x7c>
 801344e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013454:	edc3 7a00 	vstr	s15, [r3]
 8013458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	1ad3      	subs	r3, r2, r3
 801345e:	ee07 3a90 	vmov	s15, r3
 8013462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013466:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80134a4 <distanciaNE+0x7c>
 801346a:	ee27 8a87 	vmul.f32	s16, s15, s14
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	ee07 3a90 	vmov	s15, r3
 8013474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013478:	eeb0 0a67 	vmov.f32	s0, s15
 801347c:	f000 f868 	bl	8013550 <escalaLongitud>
 8013480:	eef0 7a40 	vmov.f32	s15, s0
 8013484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013486:	3304      	adds	r3, #4
 8013488:	ee68 7a27 	vmul.f32	s15, s16, s15
 801348c:	edc3 7a00 	vstr	s15, [r3]
 8013490:	bf00      	nop
 8013492:	3714      	adds	r7, #20
 8013494:	46bd      	mov	sp, r7
 8013496:	ecbd 8b02 	vpop	{d8}
 801349a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801349e:	b002      	add	sp, #8
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	3c366282 	.word	0x3c366282

080134a8 <anadirOffsetLoc>:
 80134a8:	b580      	push	{r7, lr}
 80134aa:	ed2d 8b02 	vpush	{d8}
 80134ae:	b086      	sub	sp, #24
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80134b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80134ba:	ed87 1a01 	vstr	s2, [r7, #4]
 80134be:	6038      	str	r0, [r7, #0]
 80134c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80134c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801354c <anadirOffsetLoc+0xa4>
 80134c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80134cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134d0:	ee17 3a90 	vmov	r3, s15
 80134d4:	617b      	str	r3, [r7, #20]
 80134d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80134da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801354c <anadirOffsetLoc+0xa4>
 80134de:	ee27 8a87 	vmul.f32	s16, s15, s14
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	ee07 3a90 	vmov	s15, r3
 80134ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ee:	eeb0 0a67 	vmov.f32	s0, s15
 80134f2:	f000 f82d 	bl	8013550 <escalaLongitud>
 80134f6:	eeb0 7a40 	vmov.f32	s14, s0
 80134fa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80134fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013502:	ee17 3a90 	vmov	r3, s15
 8013506:	613b      	str	r3, [r7, #16]
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	441a      	add	r2, r3
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	605a      	str	r2, [r3, #4]
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	689a      	ldr	r2, [r3, #8]
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	441a      	add	r2, r3
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	609a      	str	r2, [r3, #8]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	ee07 3a90 	vmov	s15, r3
 8013528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801352c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013538:	ee17 2a90 	vmov	r2, s15
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	601a      	str	r2, [r3, #0]
 8013540:	bf00      	nop
 8013542:	3718      	adds	r7, #24
 8013544:	46bd      	mov	sp, r7
 8013546:	ecbd 8b02 	vpop	{d8}
 801354a:	bd80      	pop	{r7, pc}
 801354c:	42b3aa02 	.word	0x42b3aa02

08013550 <escalaLongitud>:
 8013550:	b580      	push	{r7, lr}
 8013552:	b086      	sub	sp, #24
 8013554:	af00      	add	r7, sp, #0
 8013556:	ed87 0a01 	vstr	s0, [r7, #4]
 801355a:	edd7 7a01 	vldr	s15, [r7, #4]
 801355e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013562:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80135a8 <escalaLongitud+0x58>
 8013566:	ee27 7b06 	vmul.f64	d7, d7, d6
 801356a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801356e:	eeb0 0a67 	vmov.f32	s0, s15
 8013572:	f024 fed5 	bl	8038320 <cosf>
 8013576:	ed87 0a05 	vstr	s0, [r7, #20]
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	613b      	str	r3, [r7, #16]
 801357e:	4b0c      	ldr	r3, [pc, #48]	; (80135b0 <escalaLongitud+0x60>)
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	ed97 7a04 	vldr	s14, [r7, #16]
 8013586:	edd7 7a03 	vldr	s15, [r7, #12]
 801358a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013592:	dd01      	ble.n	8013598 <escalaLongitud+0x48>
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	e000      	b.n	801359a <escalaLongitud+0x4a>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	ee07 3a90 	vmov	s15, r3
 801359e:	eeb0 0a67 	vmov.f32	s0, s15
 80135a2:	3718      	adds	r7, #24
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	10b08f16 	.word	0x10b08f16
 80135ac:	3e1dfc0a 	.word	0x3e1dfc0a
 80135b0:	3c23d70a 	.word	0x3c23d70a

080135b4 <limitarUint16>:
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	4603      	mov	r3, r0
 80135bc:	80fb      	strh	r3, [r7, #6]
 80135be:	460b      	mov	r3, r1
 80135c0:	80bb      	strh	r3, [r7, #4]
 80135c2:	4613      	mov	r3, r2
 80135c4:	807b      	strh	r3, [r7, #2]
 80135c6:	88fa      	ldrh	r2, [r7, #6]
 80135c8:	88bb      	ldrh	r3, [r7, #4]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d201      	bcs.n	80135d2 <limitarUint16+0x1e>
 80135ce:	88bb      	ldrh	r3, [r7, #4]
 80135d0:	e006      	b.n	80135e0 <limitarUint16+0x2c>
 80135d2:	88fa      	ldrh	r2, [r7, #6]
 80135d4:	887b      	ldrh	r3, [r7, #2]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d901      	bls.n	80135de <limitarUint16+0x2a>
 80135da:	887b      	ldrh	r3, [r7, #2]
 80135dc:	e000      	b.n	80135e0 <limitarUint16+0x2c>
 80135de:	88fb      	ldrh	r3, [r7, #6]
 80135e0:	4618      	mov	r0, r3
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <limitarInt32>:
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
 80135f8:	68fa      	ldr	r2, [r7, #12]
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	da01      	bge.n	8013604 <limitarInt32+0x18>
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	e006      	b.n	8013612 <limitarInt32+0x26>
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	429a      	cmp	r2, r3
 801360a:	dd01      	ble.n	8013610 <limitarInt32+0x24>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	e000      	b.n	8013612 <limitarInt32+0x26>
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	4618      	mov	r0, r3
 8013614:	3714      	adds	r7, #20
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr

0801361e <limitarFloat>:
 801361e:	b480      	push	{r7}
 8013620:	b085      	sub	sp, #20
 8013622:	af00      	add	r7, sp, #0
 8013624:	ed87 0a03 	vstr	s0, [r7, #12]
 8013628:	edc7 0a02 	vstr	s1, [r7, #8]
 801362c:	ed87 1a01 	vstr	s2, [r7, #4]
 8013630:	ed97 7a03 	vldr	s14, [r7, #12]
 8013634:	edd7 7a02 	vldr	s15, [r7, #8]
 8013638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013640:	d501      	bpl.n	8013646 <limitarFloat+0x28>
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	e00b      	b.n	801365e <limitarFloat+0x40>
 8013646:	ed97 7a03 	vldr	s14, [r7, #12]
 801364a:	edd7 7a01 	vldr	s15, [r7, #4]
 801364e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013656:	dd01      	ble.n	801365c <limitarFloat+0x3e>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	e000      	b.n	801365e <limitarFloat+0x40>
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	ee07 3a90 	vmov	s15, r3
 8013662:	eeb0 0a67 	vmov.f32	s0, s15
 8013666:	3714      	adds	r7, #20
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <moduloVector2>:
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	ed93 7a00 	vldr	s14, [r3]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	edd3 7a00 	vldr	s15, [r3]
 8013684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	3304      	adds	r3, #4
 801368c:	edd3 6a00 	vldr	s13, [r3]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3304      	adds	r3, #4
 8013694:	edd3 7a00 	vldr	s15, [r3]
 8013698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136a0:	edc7 7a03 	vstr	s15, [r7, #12]
 80136a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80136a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80136ac:	eeb0 0b47 	vmov.f64	d0, d7
 80136b0:	f025 fd6e 	bl	8039190 <sqrt>
 80136b4:	eeb0 7b40 	vmov.f64	d7, d0
 80136b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80136bc:	edc7 7a02 	vstr	s15, [r7, #8]
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	ee07 3a90 	vmov	s15, r3
 80136c6:	eeb0 0a67 	vmov.f32	s0, s15
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <moduloVector3>:
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	ed93 7a00 	vldr	s14, [r3]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	edd3 7a00 	vldr	s15, [r3]
 80136e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3304      	adds	r3, #4
 80136ec:	edd3 6a00 	vldr	s13, [r3]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	3304      	adds	r3, #4
 80136f4:	edd3 7a00 	vldr	s15, [r3]
 80136f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	3308      	adds	r3, #8
 8013704:	edd3 6a00 	vldr	s13, [r3]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3308      	adds	r3, #8
 801370c:	edd3 7a00 	vldr	s15, [r3]
 8013710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013718:	edc7 7a03 	vstr	s15, [r7, #12]
 801371c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013724:	eeb0 0b47 	vmov.f64	d0, d7
 8013728:	f025 fd32 	bl	8039190 <sqrt>
 801372c:	eeb0 7b40 	vmov.f64	d7, d0
 8013730:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013734:	edc7 7a02 	vstr	s15, [r7, #8]
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	ee07 3a90 	vmov	s15, r3
 801373e:	eeb0 0a67 	vmov.f32	s0, s15
 8013742:	3710      	adds	r7, #16
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <envolverInt360>:
 8013748:	b580      	push	{r7, lr}
 801374a:	b084      	sub	sp, #16
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	ed87 0a00 	vstr	s0, [r7]
 8013754:	edd7 7a00 	vldr	s15, [r7]
 8013758:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80137ac <envolverInt360+0x64>
 801375c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013760:	edc7 7a02 	vstr	s15, [r7, #8]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	ee07 3a90 	vmov	s15, r3
 801376a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801376e:	edd7 0a02 	vldr	s1, [r7, #8]
 8013772:	eeb0 0a67 	vmov.f32	s0, s15
 8013776:	f025 fd59 	bl	803922c <fmodf>
 801377a:	ed87 0a03 	vstr	s0, [r7, #12]
 801377e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801378a:	d507      	bpl.n	801379c <envolverInt360+0x54>
 801378c:	ed97 7a03 	vldr	s14, [r7, #12]
 8013790:	edd7 7a02 	vldr	s15, [r7, #8]
 8013794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013798:	edc7 7a03 	vstr	s15, [r7, #12]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	ee07 3a90 	vmov	s15, r3
 80137a2:	eeb0 0a67 	vmov.f32	s0, s15
 80137a6:	3710      	adds	r7, #16
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	43b40000 	.word	0x43b40000

080137b0 <invSqrt>:
 80137b0:	b480      	push	{r7}
 80137b2:	b087      	sub	sp, #28
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80137ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80137be:	617b      	str	r3, [r7, #20]
 80137c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80137c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80137c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137cc:	edc7 7a04 	vstr	s15, [r7, #16]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	60fb      	str	r3, [r7, #12]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	085a      	lsrs	r2, r3, #1
 80137d8:	4b10      	ldr	r3, [pc, #64]	; (801381c <invSqrt+0x6c>)
 80137da:	1a9b      	subs	r3, r3, r2
 80137dc:	60fb      	str	r3, [r7, #12]
 80137de:	ed97 7a03 	vldr	s14, [r7, #12]
 80137e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80137e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80137ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80137ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80137f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80137f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80137fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80137fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013802:	edc7 7a03 	vstr	s15, [r7, #12]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	ee07 3a90 	vmov	s15, r3
 801380c:	eeb0 0a67 	vmov.f32	s0, s15
 8013810:	371c      	adds	r7, #28
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr
 801381a:	bf00      	nop
 801381c:	5f3759df 	.word	0x5f3759df

08013820 <normalizar3Array>:
 8013820:	b580      	push	{r7, lr}
 8013822:	b084      	sub	sp, #16
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	ed93 7a00 	vldr	s14, [r3]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	edd3 7a00 	vldr	s15, [r3]
 8013834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	3304      	adds	r3, #4
 801383c:	edd3 6a00 	vldr	s13, [r3]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	3304      	adds	r3, #4
 8013844:	edd3 7a00 	vldr	s15, [r3]
 8013848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801384c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3308      	adds	r3, #8
 8013854:	edd3 6a00 	vldr	s13, [r3]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3308      	adds	r3, #8
 801385c:	edd3 7a00 	vldr	s15, [r3]
 8013860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013868:	eeb0 0a67 	vmov.f32	s0, s15
 801386c:	f7ff ffa0 	bl	80137b0 <invSqrt>
 8013870:	ed87 0a03 	vstr	s0, [r7, #12]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	ed93 7a00 	vldr	s14, [r3]
 801387a:	edd7 7a03 	vldr	s15, [r7, #12]
 801387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	edc3 7a00 	vstr	s15, [r3]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	3304      	adds	r3, #4
 801388c:	ed93 7a00 	vldr	s14, [r3]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	3304      	adds	r3, #4
 8013894:	edd7 7a03 	vldr	s15, [r7, #12]
 8013898:	ee67 7a27 	vmul.f32	s15, s14, s15
 801389c:	edc3 7a00 	vstr	s15, [r3]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	3308      	adds	r3, #8
 80138a4:	ed93 7a00 	vldr	s14, [r3]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	3308      	adds	r3, #8
 80138ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80138b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138b4:	edc3 7a00 	vstr	s15, [r3]
 80138b8:	bf00      	nop
 80138ba:	3710      	adds	r7, #16
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <normalizar4Array>:
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	ed93 7a00 	vldr	s14, [r3]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	edd3 7a00 	vldr	s15, [r3]
 80138d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3304      	adds	r3, #4
 80138dc:	edd3 6a00 	vldr	s13, [r3]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	3304      	adds	r3, #4
 80138e4:	edd3 7a00 	vldr	s15, [r3]
 80138e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	3308      	adds	r3, #8
 80138f4:	edd3 6a00 	vldr	s13, [r3]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	3308      	adds	r3, #8
 80138fc:	edd3 7a00 	vldr	s15, [r3]
 8013900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	330c      	adds	r3, #12
 801390c:	edd3 6a00 	vldr	s13, [r3]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	330c      	adds	r3, #12
 8013914:	edd3 7a00 	vldr	s15, [r3]
 8013918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801391c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013920:	eeb0 0a67 	vmov.f32	s0, s15
 8013924:	f7ff ff44 	bl	80137b0 <invSqrt>
 8013928:	ed87 0a03 	vstr	s0, [r7, #12]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	ed93 7a00 	vldr	s14, [r3]
 8013932:	edd7 7a03 	vldr	s15, [r7, #12]
 8013936:	ee67 7a27 	vmul.f32	s15, s14, s15
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	edc3 7a00 	vstr	s15, [r3]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	3304      	adds	r3, #4
 8013944:	ed93 7a00 	vldr	s14, [r3]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	3304      	adds	r3, #4
 801394c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013954:	edc3 7a00 	vstr	s15, [r3]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	3308      	adds	r3, #8
 801395c:	ed93 7a00 	vldr	s14, [r3]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	3308      	adds	r3, #8
 8013964:	edd7 7a03 	vldr	s15, [r7, #12]
 8013968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801396c:	edc3 7a00 	vstr	s15, [r3]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	330c      	adds	r3, #12
 8013974:	ed93 7a00 	vldr	s14, [r3]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	330c      	adds	r3, #12
 801397c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013984:	edc3 7a00 	vstr	s15, [r3]
 8013988:	bf00      	nop
 801398a:	3710      	adds	r7, #16
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <inversaMatriz>:
 8013990:	b084      	sub	sp, #16
 8013992:	b590      	push	{r4, r7, lr}
 8013994:	f2ad 6d4c 	subw	sp, sp, #1612	; 0x64c
 8013998:	af62      	add	r7, sp, #392	; 0x188
 801399a:	f507 649a 	add.w	r4, r7, #1232	; 0x4d0
 801399e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80139a2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80139a6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80139aa:	4618      	mov	r0, r3
 80139ac:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80139b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80139b4:	4619      	mov	r1, r3
 80139b6:	f021 fc4b 	bl	8035250 <memcpy>
 80139ba:	f897 2664 	ldrb.w	r2, [r7, #1636]	; 0x664
 80139be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80139c2:	4611      	mov	r1, r2
 80139c4:	4618      	mov	r0, r3
 80139c6:	f000 fb35 	bl	8014034 <asignarIdentidadMatriz>
 80139ca:	f897 2664 	ldrb.w	r2, [r7, #1636]	; 0x664
 80139ce:	463b      	mov	r3, r7
 80139d0:	4611      	mov	r1, r2
 80139d2:	4618      	mov	r0, r3
 80139d4:	f000 fb2e 	bl	8014034 <asignarIdentidadMatriz>
 80139d8:	2300      	movs	r3, #0
 80139da:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
 80139de:	e12c      	b.n	8013c3a <inversaMatriz+0x2aa>
 80139e0:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 80139e4:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 80139e8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80139ec:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80139f0:	4613      	mov	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	4413      	add	r3, r2
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	4403      	add	r3, r0
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	440b      	add	r3, r1
 80139fe:	edd3 7a00 	vldr	s15, [r3]
 8013a02:	eef0 7ae7 	vabs.f32	s15, s15
 8013a06:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8013d60 <inversaMatriz+0x3d0>
 8013a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a12:	d552      	bpl.n	8013aba <inversaMatriz+0x12a>
 8013a14:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8013a18:	3301      	adds	r3, #1
 8013a1a:	f887 34be 	strb.w	r3, [r7, #1214]	; 0x4be
 8013a1e:	e046      	b.n	8013aae <inversaMatriz+0x11e>
 8013a20:	f897 24be 	ldrb.w	r2, [r7, #1214]	; 0x4be
 8013a24:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013a28:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013a2c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013a30:	4613      	mov	r3, r2
 8013a32:	009b      	lsls	r3, r3, #2
 8013a34:	4413      	add	r3, r2
 8013a36:	005b      	lsls	r3, r3, #1
 8013a38:	4403      	add	r3, r0
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	440b      	add	r3, r1
 8013a3e:	edd3 7a00 	vldr	s15, [r3]
 8013a42:	eef0 7ae7 	vabs.f32	s15, s15
 8013a46:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8013d64 <inversaMatriz+0x3d4>
 8013a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a52:	dd27      	ble.n	8013aa4 <inversaMatriz+0x114>
 8013a54:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013a58:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013a5c:	f897 14be 	ldrb.w	r1, [r7, #1214]	; 0x4be
 8013a60:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8013a64:	f000 fb0d 	bl	8014082 <intercambiarFilas>
 8013a68:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013a6c:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013a70:	f897 14be 	ldrb.w	r1, [r7, #1214]	; 0x4be
 8013a74:	4638      	mov	r0, r7
 8013a76:	f000 fb04 	bl	8014082 <intercambiarFilas>
 8013a7a:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013a7e:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013a82:	f897 14be 	ldrb.w	r1, [r7, #1214]	; 0x4be
 8013a86:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8013a8a:	f000 fafa 	bl	8014082 <intercambiarFilas>
 8013a8e:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013a92:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013a96:	f897 14be 	ldrb.w	r1, [r7, #1214]	; 0x4be
 8013a9a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8013a9e:	f000 fb3f 	bl	8014120 <intercambiarColumnas>
 8013aa2:	e00a      	b.n	8013aba <inversaMatriz+0x12a>
 8013aa4:	f897 34be 	ldrb.w	r3, [r7, #1214]	; 0x4be
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	f887 34be 	strb.w	r3, [r7, #1214]	; 0x4be
 8013aae:	f897 24be 	ldrb.w	r2, [r7, #1214]	; 0x4be
 8013ab2:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d3b2      	bcc.n	8013a20 <inversaMatriz+0x90>
 8013aba:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013abe:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013ac2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013ac6:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013aca:	4613      	mov	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	4413      	add	r3, r2
 8013ad0:	005b      	lsls	r3, r3, #1
 8013ad2:	4403      	add	r3, r0
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	440b      	add	r3, r1
 8013ad8:	edd3 7a00 	vldr	s15, [r3]
 8013adc:	eef0 7ae7 	vabs.f32	s15, s15
 8013ae0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8013d60 <inversaMatriz+0x3d0>
 8013ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aec:	d501      	bpl.n	8013af2 <inversaMatriz+0x162>
 8013aee:	2300      	movs	r3, #0
 8013af0:	e22d      	b.n	8013f4e <inversaMatriz+0x5be>
 8013af2:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8013af6:	3301      	adds	r3, #1
 8013af8:	f887 34bd 	strb.w	r3, [r7, #1213]	; 0x4bd
 8013afc:	e091      	b.n	8013c22 <inversaMatriz+0x292>
 8013afe:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013b02:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013b06:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013b0a:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013b0e:	4613      	mov	r3, r2
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	4413      	add	r3, r2
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	4403      	add	r3, r0
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	440b      	add	r3, r1
 8013b1c:	edd3 6a00 	vldr	s13, [r3]
 8013b20:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013b24:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013b28:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013b2c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013b30:	4613      	mov	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	4403      	add	r3, r0
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	440b      	add	r3, r1
 8013b3e:	ed93 7a00 	vldr	s14, [r3]
 8013b42:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013b46:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b4e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013b52:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 8013b56:	4613      	mov	r3, r2
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	4413      	add	r3, r2
 8013b5c:	005b      	lsls	r3, r3, #1
 8013b5e:	4403      	add	r3, r0
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	440b      	add	r3, r1
 8013b64:	edc3 7a00 	vstr	s15, [r3]
 8013b68:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8013b6c:	f887 34bc 	strb.w	r3, [r7, #1212]	; 0x4bc
 8013b70:	e04c      	b.n	8013c0c <inversaMatriz+0x27c>
 8013b72:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013b76:	f897 04bc 	ldrb.w	r0, [r7, #1212]	; 0x4bc
 8013b7a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013b7e:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013b82:	4613      	mov	r3, r2
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	4413      	add	r3, r2
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	4403      	add	r3, r0
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	440b      	add	r3, r1
 8013b90:	ed93 7a00 	vldr	s14, [r3]
 8013b94:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013b98:	f897 04bf 	ldrb.w	r0, [r7, #1215]	; 0x4bf
 8013b9c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013ba0:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	009b      	lsls	r3, r3, #2
 8013ba8:	4413      	add	r3, r2
 8013baa:	005b      	lsls	r3, r3, #1
 8013bac:	4403      	add	r3, r0
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	440b      	add	r3, r1
 8013bb2:	edd3 6a00 	vldr	s13, [r3]
 8013bb6:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013bba:	f897 04bc 	ldrb.w	r0, [r7, #1212]	; 0x4bc
 8013bbe:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013bc2:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	4413      	add	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4403      	add	r3, r0
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	440b      	add	r3, r1
 8013bd4:	edd3 7a00 	vldr	s15, [r3]
 8013bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013bdc:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013be0:	f897 04bc 	ldrb.w	r0, [r7, #1212]	; 0x4bc
 8013be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013be8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013bec:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4413      	add	r3, r2
 8013bf6:	005b      	lsls	r3, r3, #1
 8013bf8:	4403      	add	r3, r0
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	440b      	add	r3, r1
 8013bfe:	edc3 7a00 	vstr	s15, [r3]
 8013c02:	f897 34bc 	ldrb.w	r3, [r7, #1212]	; 0x4bc
 8013c06:	3301      	adds	r3, #1
 8013c08:	f887 34bc 	strb.w	r3, [r7, #1212]	; 0x4bc
 8013c0c:	f897 24bc 	ldrb.w	r2, [r7, #1212]	; 0x4bc
 8013c10:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d3ac      	bcc.n	8013b72 <inversaMatriz+0x1e2>
 8013c18:	f897 34bd 	ldrb.w	r3, [r7, #1213]	; 0x4bd
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	f887 34bd 	strb.w	r3, [r7, #1213]	; 0x4bd
 8013c22:	f897 24bd 	ldrb.w	r2, [r7, #1213]	; 0x4bd
 8013c26:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	f4ff af67 	bcc.w	8013afe <inversaMatriz+0x16e>
 8013c30:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8013c34:	3301      	adds	r3, #1
 8013c36:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
 8013c3a:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 8013c3e:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013c42:	429a      	cmp	r2, r3
 8013c44:	f4ff aecc 	bcc.w	80139e0 <inversaMatriz+0x50>
 8013c48:	2300      	movs	r3, #0
 8013c4a:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
 8013c4e:	e06a      	b.n	8013d26 <inversaMatriz+0x396>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f887 34ba 	strb.w	r3, [r7, #1210]	; 0x4ba
 8013c56:	e05b      	b.n	8013d10 <inversaMatriz+0x380>
 8013c58:	2300      	movs	r3, #0
 8013c5a:	f887 34b9 	strb.w	r3, [r7, #1209]	; 0x4b9
 8013c5e:	e04c      	b.n	8013cfa <inversaMatriz+0x36a>
 8013c60:	f897 24ba 	ldrb.w	r2, [r7, #1210]	; 0x4ba
 8013c64:	f897 04bb 	ldrb.w	r0, [r7, #1211]	; 0x4bb
 8013c68:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013c6c:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013c70:	4613      	mov	r3, r2
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	4413      	add	r3, r2
 8013c76:	005b      	lsls	r3, r3, #1
 8013c78:	4403      	add	r3, r0
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	440b      	add	r3, r1
 8013c7e:	ed93 7a00 	vldr	s14, [r3]
 8013c82:	f897 24ba 	ldrb.w	r2, [r7, #1210]	; 0x4ba
 8013c86:	f897 04b9 	ldrb.w	r0, [r7, #1209]	; 0x4b9
 8013c8a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013c8e:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 8013c92:	4613      	mov	r3, r2
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	4413      	add	r3, r2
 8013c98:	005b      	lsls	r3, r3, #1
 8013c9a:	4403      	add	r3, r0
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	440b      	add	r3, r1
 8013ca0:	edd3 6a00 	vldr	s13, [r3]
 8013ca4:	f897 24b9 	ldrb.w	r2, [r7, #1209]	; 0x4b9
 8013ca8:	f897 04bb 	ldrb.w	r0, [r7, #1211]	; 0x4bb
 8013cac:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013cb0:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	4413      	add	r3, r2
 8013cba:	005b      	lsls	r3, r3, #1
 8013cbc:	4403      	add	r3, r0
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	440b      	add	r3, r1
 8013cc2:	edd3 7a00 	vldr	s15, [r3]
 8013cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cca:	f897 24ba 	ldrb.w	r2, [r7, #1210]	; 0x4ba
 8013cce:	f897 04bb 	ldrb.w	r0, [r7, #1211]	; 0x4bb
 8013cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cd6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013cda:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013cde:	4613      	mov	r3, r2
 8013ce0:	009b      	lsls	r3, r3, #2
 8013ce2:	4413      	add	r3, r2
 8013ce4:	005b      	lsls	r3, r3, #1
 8013ce6:	4403      	add	r3, r0
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	440b      	add	r3, r1
 8013cec:	edc3 7a00 	vstr	s15, [r3]
 8013cf0:	f897 34b9 	ldrb.w	r3, [r7, #1209]	; 0x4b9
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	f887 34b9 	strb.w	r3, [r7, #1209]	; 0x4b9
 8013cfa:	f897 24b9 	ldrb.w	r2, [r7, #1209]	; 0x4b9
 8013cfe:	f897 34ba 	ldrb.w	r3, [r7, #1210]	; 0x4ba
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d3ac      	bcc.n	8013c60 <inversaMatriz+0x2d0>
 8013d06:	f897 34ba 	ldrb.w	r3, [r7, #1210]	; 0x4ba
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	f887 34ba 	strb.w	r3, [r7, #1210]	; 0x4ba
 8013d10:	f897 24ba 	ldrb.w	r2, [r7, #1210]	; 0x4ba
 8013d14:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d39d      	bcc.n	8013c58 <inversaMatriz+0x2c8>
 8013d1c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8013d20:	3301      	adds	r3, #1
 8013d22:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
 8013d26:	f897 24bb 	ldrb.w	r2, [r7, #1211]	; 0x4bb
 8013d2a:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d38e      	bcc.n	8013c50 <inversaMatriz+0x2c0>
 8013d32:	2300      	movs	r3, #0
 8013d34:	f887 34b8 	strb.w	r3, [r7, #1208]	; 0x4b8
 8013d38:	e0b1      	b.n	8013e9e <inversaMatriz+0x50e>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
 8013d40:	e0a1      	b.n	8013e86 <inversaMatriz+0x4f6>
 8013d42:	f897 2664 	ldrb.w	r2, [r7, #1636]	; 0x664
 8013d46:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	3b01      	subs	r3, #1
 8013d50:	f887 34b3 	strb.w	r3, [r7, #1203]	; 0x4b3
 8013d54:	f897 34b3 	ldrb.w	r3, [r7, #1203]	; 0x4b3
 8013d58:	3301      	adds	r3, #1
 8013d5a:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
 8013d5e:	e052      	b.n	8013e06 <inversaMatriz+0x476>
 8013d60:	34000000 	.word	0x34000000
 8013d64:	322bcc77 	.word	0x322bcc77
 8013d68:	7f7fffff 	.word	0x7f7fffff
 8013d6c:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013d70:	f897 04b8 	ldrb.w	r0, [r7, #1208]	; 0x4b8
 8013d74:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013d78:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	4413      	add	r3, r2
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	4403      	add	r3, r0
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	440b      	add	r3, r1
 8013d8a:	ed93 7a00 	vldr	s14, [r3]
 8013d8e:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013d92:	f897 04b6 	ldrb.w	r0, [r7, #1206]	; 0x4b6
 8013d96:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013d9a:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013d9e:	4613      	mov	r3, r2
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	4413      	add	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4403      	add	r3, r0
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	440b      	add	r3, r1
 8013dac:	edd3 6a00 	vldr	s13, [r3]
 8013db0:	f897 24b6 	ldrb.w	r2, [r7, #1206]	; 0x4b6
 8013db4:	f897 04b8 	ldrb.w	r0, [r7, #1208]	; 0x4b8
 8013db8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013dbc:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013dc0:	4613      	mov	r3, r2
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	4413      	add	r3, r2
 8013dc6:	005b      	lsls	r3, r3, #1
 8013dc8:	4403      	add	r3, r0
 8013dca:	009b      	lsls	r3, r3, #2
 8013dcc:	440b      	add	r3, r1
 8013dce:	edd3 7a00 	vldr	s15, [r3]
 8013dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013dd6:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013dda:	f897 04b8 	ldrb.w	r0, [r7, #1208]	; 0x4b8
 8013dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013de2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013de6:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013dea:	4613      	mov	r3, r2
 8013dec:	009b      	lsls	r3, r3, #2
 8013dee:	4413      	add	r3, r2
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4403      	add	r3, r0
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	440b      	add	r3, r1
 8013df8:	edc3 7a00 	vstr	s15, [r3]
 8013dfc:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8013e00:	3301      	adds	r3, #1
 8013e02:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
 8013e06:	f897 24b6 	ldrb.w	r2, [r7, #1206]	; 0x4b6
 8013e0a:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d3ac      	bcc.n	8013d6c <inversaMatriz+0x3dc>
 8013e12:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013e16:	f897 04b8 	ldrb.w	r0, [r7, #1208]	; 0x4b8
 8013e1a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013e1e:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013e22:	4613      	mov	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	4413      	add	r3, r2
 8013e28:	005b      	lsls	r3, r3, #1
 8013e2a:	4403      	add	r3, r0
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	440b      	add	r3, r1
 8013e30:	edd3 6a00 	vldr	s13, [r3]
 8013e34:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013e38:	f897 04b3 	ldrb.w	r0, [r7, #1203]	; 0x4b3
 8013e3c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013e40:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8013e44:	4613      	mov	r3, r2
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	4413      	add	r3, r2
 8013e4a:	005b      	lsls	r3, r3, #1
 8013e4c:	4403      	add	r3, r0
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	440b      	add	r3, r1
 8013e52:	ed93 7a00 	vldr	s14, [r3]
 8013e56:	f897 24b3 	ldrb.w	r2, [r7, #1203]	; 0x4b3
 8013e5a:	f897 04b8 	ldrb.w	r0, [r7, #1208]	; 0x4b8
 8013e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e62:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013e66:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	4413      	add	r3, r2
 8013e70:	005b      	lsls	r3, r3, #1
 8013e72:	4403      	add	r3, r0
 8013e74:	009b      	lsls	r3, r3, #2
 8013e76:	440b      	add	r3, r1
 8013e78:	edc3 7a00 	vstr	s15, [r3]
 8013e7c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8013e80:	3301      	adds	r3, #1
 8013e82:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
 8013e86:	f897 24b7 	ldrb.w	r2, [r7, #1207]	; 0x4b7
 8013e8a:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	f4ff af57 	bcc.w	8013d42 <inversaMatriz+0x3b2>
 8013e94:	f897 34b8 	ldrb.w	r3, [r7, #1208]	; 0x4b8
 8013e98:	3301      	adds	r3, #1
 8013e9a:	f887 34b8 	strb.w	r3, [r7, #1208]	; 0x4b8
 8013e9e:	f897 24b8 	ldrb.w	r2, [r7, #1208]	; 0x4b8
 8013ea2:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	f4ff af47 	bcc.w	8013d3a <inversaMatriz+0x3aa>
 8013eac:	2300      	movs	r3, #0
 8013eae:	f887 34b5 	strb.w	r3, [r7, #1205]	; 0x4b5
 8013eb2:	e02f      	b.n	8013f14 <inversaMatriz+0x584>
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f887 34b4 	strb.w	r3, [r7, #1204]	; 0x4b4
 8013eba:	e020      	b.n	8013efe <inversaMatriz+0x56e>
 8013ebc:	f897 24b5 	ldrb.w	r2, [r7, #1205]	; 0x4b5
 8013ec0:	f897 04b4 	ldrb.w	r0, [r7, #1204]	; 0x4b4
 8013ec4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013ec8:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 8013ecc:	4613      	mov	r3, r2
 8013ece:	009b      	lsls	r3, r3, #2
 8013ed0:	4413      	add	r3, r2
 8013ed2:	005b      	lsls	r3, r3, #1
 8013ed4:	4403      	add	r3, r0
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	440b      	add	r3, r1
 8013eda:	edd3 7a00 	vldr	s15, [r3]
 8013ede:	eef0 7ae7 	vabs.f32	s15, s15
 8013ee2:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 8013d68 <inversaMatriz+0x3d8>
 8013ee6:	eef4 7a47 	vcmp.f32	s15, s14
 8013eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eee:	d901      	bls.n	8013ef4 <inversaMatriz+0x564>
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	e02c      	b.n	8013f4e <inversaMatriz+0x5be>
 8013ef4:	f897 34b4 	ldrb.w	r3, [r7, #1204]	; 0x4b4
 8013ef8:	3301      	adds	r3, #1
 8013efa:	f887 34b4 	strb.w	r3, [r7, #1204]	; 0x4b4
 8013efe:	f897 24b4 	ldrb.w	r2, [r7, #1204]	; 0x4b4
 8013f02:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d3d8      	bcc.n	8013ebc <inversaMatriz+0x52c>
 8013f0a:	f897 34b5 	ldrb.w	r3, [r7, #1205]	; 0x4b5
 8013f0e:	3301      	adds	r3, #1
 8013f10:	f887 34b5 	strb.w	r3, [r7, #1205]	; 0x4b5
 8013f14:	f897 24b5 	ldrb.w	r2, [r7, #1205]	; 0x4b5
 8013f18:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d3c9      	bcc.n	8013eb4 <inversaMatriz+0x524>
 8013f20:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8013f24:	f5a3 6498 	sub.w	r4, r3, #1216	; 0x4c0
 8013f28:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8013f2c:	9361      	str	r3, [sp, #388]	; 0x184
 8013f2e:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013f32:	9360      	str	r3, [sp, #384]	; 0x180
 8013f34:	4668      	mov	r0, sp
 8013f36:	f104 0310 	add.w	r3, r4, #16
 8013f3a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8013f3e:	4619      	mov	r1, r3
 8013f40:	f021 f986 	bl	8035250 <memcpy>
 8013f44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013f48:	f000 f80a 	bl	8013f60 <copiarMatriz>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f207 47c4 	addw	r7, r7, #1220	; 0x4c4
 8013f54:	46bd      	mov	sp, r7
 8013f56:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013f5a:	b004      	add	sp, #16
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop

08013f60 <copiarMatriz>:
 8013f60:	b084      	sub	sp, #16
 8013f62:	b490      	push	{r4, r7}
 8013f64:	b082      	sub	sp, #8
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	f107 0410 	add.w	r4, r7, #16
 8013f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013f70:	2300      	movs	r3, #0
 8013f72:	71fb      	strb	r3, [r7, #7]
 8013f74:	e024      	b.n	8013fc0 <copiarMatriz+0x60>
 8013f76:	2300      	movs	r3, #0
 8013f78:	71bb      	strb	r3, [r7, #6]
 8013f7a:	e019      	b.n	8013fb0 <copiarMatriz+0x50>
 8013f7c:	79f9      	ldrb	r1, [r7, #7]
 8013f7e:	79b8      	ldrb	r0, [r7, #6]
 8013f80:	79fa      	ldrb	r2, [r7, #7]
 8013f82:	79bc      	ldrb	r4, [r7, #6]
 8013f84:	460b      	mov	r3, r1
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	440b      	add	r3, r1
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	4403      	add	r3, r0
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	3310      	adds	r3, #16
 8013f92:	443b      	add	r3, r7
 8013f94:	6819      	ldr	r1, [r3, #0]
 8013f96:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	4413      	add	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4423      	add	r3, r4
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	4403      	add	r3, r0
 8013fa8:	6019      	str	r1, [r3, #0]
 8013faa:	79bb      	ldrb	r3, [r7, #6]
 8013fac:	3301      	adds	r3, #1
 8013fae:	71bb      	strb	r3, [r7, #6]
 8013fb0:	79ba      	ldrb	r2, [r7, #6]
 8013fb2:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d3e0      	bcc.n	8013f7c <copiarMatriz+0x1c>
 8013fba:	79fb      	ldrb	r3, [r7, #7]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	71fb      	strb	r3, [r7, #7]
 8013fc0:	79fa      	ldrb	r2, [r7, #7]
 8013fc2:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d3d5      	bcc.n	8013f76 <copiarMatriz+0x16>
 8013fca:	bf00      	nop
 8013fcc:	bf00      	nop
 8013fce:	3708      	adds	r7, #8
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bc90      	pop	{r4, r7}
 8013fd4:	b004      	add	sp, #16
 8013fd6:	4770      	bx	lr

08013fd8 <resetearMatriz>:
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	70fb      	strb	r3, [r7, #3]
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	73fb      	strb	r3, [r7, #15]
 8013fe8:	e019      	b.n	801401e <resetearMatriz+0x46>
 8013fea:	2300      	movs	r3, #0
 8013fec:	73bb      	strb	r3, [r7, #14]
 8013fee:	e00f      	b.n	8014010 <resetearMatriz+0x38>
 8013ff0:	7bfa      	ldrb	r2, [r7, #15]
 8013ff2:	7bb8      	ldrb	r0, [r7, #14]
 8013ff4:	6879      	ldr	r1, [r7, #4]
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	4413      	add	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4403      	add	r3, r0
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	440b      	add	r3, r1
 8014004:	f04f 0200 	mov.w	r2, #0
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	7bbb      	ldrb	r3, [r7, #14]
 801400c:	3301      	adds	r3, #1
 801400e:	73bb      	strb	r3, [r7, #14]
 8014010:	7bba      	ldrb	r2, [r7, #14]
 8014012:	78fb      	ldrb	r3, [r7, #3]
 8014014:	429a      	cmp	r2, r3
 8014016:	d3eb      	bcc.n	8013ff0 <resetearMatriz+0x18>
 8014018:	7bfb      	ldrb	r3, [r7, #15]
 801401a:	3301      	adds	r3, #1
 801401c:	73fb      	strb	r3, [r7, #15]
 801401e:	7bfa      	ldrb	r2, [r7, #15]
 8014020:	78fb      	ldrb	r3, [r7, #3]
 8014022:	429a      	cmp	r2, r3
 8014024:	d3e1      	bcc.n	8013fea <resetearMatriz+0x12>
 8014026:	bf00      	nop
 8014028:	bf00      	nop
 801402a:	3714      	adds	r7, #20
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <asignarIdentidadMatriz>:
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	460b      	mov	r3, r1
 801403e:	70fb      	strb	r3, [r7, #3]
 8014040:	78fb      	ldrb	r3, [r7, #3]
 8014042:	4619      	mov	r1, r3
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f7ff ffc7 	bl	8013fd8 <resetearMatriz>
 801404a:	2300      	movs	r3, #0
 801404c:	73fb      	strb	r3, [r7, #15]
 801404e:	e00f      	b.n	8014070 <asignarIdentidadMatriz+0x3c>
 8014050:	7bfa      	ldrb	r2, [r7, #15]
 8014052:	7bf8      	ldrb	r0, [r7, #15]
 8014054:	6879      	ldr	r1, [r7, #4]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4403      	add	r3, r0
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	440b      	add	r3, r1
 8014064:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	7bfb      	ldrb	r3, [r7, #15]
 801406c:	3301      	adds	r3, #1
 801406e:	73fb      	strb	r3, [r7, #15]
 8014070:	7bfa      	ldrb	r2, [r7, #15]
 8014072:	78fb      	ldrb	r3, [r7, #3]
 8014074:	429a      	cmp	r2, r3
 8014076:	d3eb      	bcc.n	8014050 <asignarIdentidadMatriz+0x1c>
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	3710      	adds	r7, #16
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <intercambiarFilas>:
 8014082:	b4b0      	push	{r4, r5, r7}
 8014084:	b085      	sub	sp, #20
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
 801408a:	4608      	mov	r0, r1
 801408c:	4611      	mov	r1, r2
 801408e:	461a      	mov	r2, r3
 8014090:	4603      	mov	r3, r0
 8014092:	70fb      	strb	r3, [r7, #3]
 8014094:	460b      	mov	r3, r1
 8014096:	70bb      	strb	r3, [r7, #2]
 8014098:	4613      	mov	r3, r2
 801409a:	707b      	strb	r3, [r7, #1]
 801409c:	78fa      	ldrb	r2, [r7, #3]
 801409e:	78bb      	ldrb	r3, [r7, #2]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d038      	beq.n	8014116 <intercambiarFilas+0x94>
 80140a4:	2300      	movs	r3, #0
 80140a6:	73fb      	strb	r3, [r7, #15]
 80140a8:	e030      	b.n	801410c <intercambiarFilas+0x8a>
 80140aa:	78fa      	ldrb	r2, [r7, #3]
 80140ac:	7bf8      	ldrb	r0, [r7, #15]
 80140ae:	6879      	ldr	r1, [r7, #4]
 80140b0:	4613      	mov	r3, r2
 80140b2:	009b      	lsls	r3, r3, #2
 80140b4:	4413      	add	r3, r2
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	4403      	add	r3, r0
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	440b      	add	r3, r1
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	60bb      	str	r3, [r7, #8]
 80140c2:	78b9      	ldrb	r1, [r7, #2]
 80140c4:	7bfd      	ldrb	r5, [r7, #15]
 80140c6:	78fa      	ldrb	r2, [r7, #3]
 80140c8:	7bfc      	ldrb	r4, [r7, #15]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	460b      	mov	r3, r1
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	440b      	add	r3, r1
 80140d2:	005b      	lsls	r3, r3, #1
 80140d4:	442b      	add	r3, r5
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4403      	add	r3, r0
 80140da:	6819      	ldr	r1, [r3, #0]
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	4613      	mov	r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	4413      	add	r3, r2
 80140e4:	005b      	lsls	r3, r3, #1
 80140e6:	4423      	add	r3, r4
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	4403      	add	r3, r0
 80140ec:	6019      	str	r1, [r3, #0]
 80140ee:	78ba      	ldrb	r2, [r7, #2]
 80140f0:	7bf8      	ldrb	r0, [r7, #15]
 80140f2:	6879      	ldr	r1, [r7, #4]
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4403      	add	r3, r0
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	440b      	add	r3, r1
 8014102:	68ba      	ldr	r2, [r7, #8]
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	7bfb      	ldrb	r3, [r7, #15]
 8014108:	3301      	adds	r3, #1
 801410a:	73fb      	strb	r3, [r7, #15]
 801410c:	7bfa      	ldrb	r2, [r7, #15]
 801410e:	787b      	ldrb	r3, [r7, #1]
 8014110:	429a      	cmp	r2, r3
 8014112:	d3ca      	bcc.n	80140aa <intercambiarFilas+0x28>
 8014114:	e000      	b.n	8014118 <intercambiarFilas+0x96>
 8014116:	bf00      	nop
 8014118:	3714      	adds	r7, #20
 801411a:	46bd      	mov	sp, r7
 801411c:	bcb0      	pop	{r4, r5, r7}
 801411e:	4770      	bx	lr

08014120 <intercambiarColumnas>:
 8014120:	b4b0      	push	{r4, r5, r7}
 8014122:	b085      	sub	sp, #20
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	4608      	mov	r0, r1
 801412a:	4611      	mov	r1, r2
 801412c:	461a      	mov	r2, r3
 801412e:	4603      	mov	r3, r0
 8014130:	70fb      	strb	r3, [r7, #3]
 8014132:	460b      	mov	r3, r1
 8014134:	70bb      	strb	r3, [r7, #2]
 8014136:	4613      	mov	r3, r2
 8014138:	707b      	strb	r3, [r7, #1]
 801413a:	78fa      	ldrb	r2, [r7, #3]
 801413c:	78bb      	ldrb	r3, [r7, #2]
 801413e:	429a      	cmp	r2, r3
 8014140:	d038      	beq.n	80141b4 <intercambiarColumnas+0x94>
 8014142:	2300      	movs	r3, #0
 8014144:	73fb      	strb	r3, [r7, #15]
 8014146:	e030      	b.n	80141aa <intercambiarColumnas+0x8a>
 8014148:	7bfa      	ldrb	r2, [r7, #15]
 801414a:	78f8      	ldrb	r0, [r7, #3]
 801414c:	6879      	ldr	r1, [r7, #4]
 801414e:	4613      	mov	r3, r2
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	4413      	add	r3, r2
 8014154:	005b      	lsls	r3, r3, #1
 8014156:	4403      	add	r3, r0
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	440b      	add	r3, r1
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	60bb      	str	r3, [r7, #8]
 8014160:	7bf9      	ldrb	r1, [r7, #15]
 8014162:	78bd      	ldrb	r5, [r7, #2]
 8014164:	7bfa      	ldrb	r2, [r7, #15]
 8014166:	78fc      	ldrb	r4, [r7, #3]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	460b      	mov	r3, r1
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	440b      	add	r3, r1
 8014170:	005b      	lsls	r3, r3, #1
 8014172:	442b      	add	r3, r5
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	4403      	add	r3, r0
 8014178:	6819      	ldr	r1, [r3, #0]
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	4613      	mov	r3, r2
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	4413      	add	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4423      	add	r3, r4
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4403      	add	r3, r0
 801418a:	6019      	str	r1, [r3, #0]
 801418c:	7bfa      	ldrb	r2, [r7, #15]
 801418e:	78b8      	ldrb	r0, [r7, #2]
 8014190:	6879      	ldr	r1, [r7, #4]
 8014192:	4613      	mov	r3, r2
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	4413      	add	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4403      	add	r3, r0
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	440b      	add	r3, r1
 80141a0:	68ba      	ldr	r2, [r7, #8]
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	7bfb      	ldrb	r3, [r7, #15]
 80141a6:	3301      	adds	r3, #1
 80141a8:	73fb      	strb	r3, [r7, #15]
 80141aa:	7bfa      	ldrb	r2, [r7, #15]
 80141ac:	787b      	ldrb	r3, [r7, #1]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d3ca      	bcc.n	8014148 <intercambiarColumnas+0x28>
 80141b2:	e000      	b.n	80141b6 <intercambiarColumnas+0x96>
 80141b4:	bf00      	nop
 80141b6:	3714      	adds	r7, #20
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bcb0      	pop	{r4, r5, r7}
 80141bc:	4770      	bx	lr

080141be <falloSistema>:
**  Descripcion:    Ejecuta la secuencia del fallo correspondiente y resetea la placa
**  Parametros:     Tipo de fallo
**  Retorno:        Ninguno
****************************************************************************************/
void falloSistema(falloSistema_e fallo)
{
 80141be:	b580      	push	{r7, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	4603      	mov	r3, r0
 80141c6:	71fb      	strb	r3, [r7, #7]
	indicarFallo(fallo, REPETICIONES_CODIGO_FALLO);
 80141c8:	79fb      	ldrb	r3, [r7, #7]
 80141ca:	2105      	movs	r1, #5
 80141cc:	4618      	mov	r0, r3
 80141ce:	f000 f807 	bl	80141e0 <indicarFallo>
	resetSistema();
 80141d2:	f002 faf1 	bl	80167b8 <resetSistema>
}
 80141d6:	bf00      	nop
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
	...

080141e0 <indicarFallo>:
**  Descripcion:    Ejecuta la secuencia del fallo correspondiente durante x repeticiones
**  Parametros:     Tipo de fallo, repeticiones
**  Retorno:        Ninguno
****************************************************************************************/
void indicarFallo(falloSistema_e fallo, uint8_t repeticiones)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	4603      	mov	r3, r0
 80141e8:	460a      	mov	r2, r1
 80141ea:	71fb      	strb	r3, [r7, #7]
 80141ec:	4613      	mov	r3, r2
 80141ee:	71bb      	strb	r3, [r7, #6]
    uint8_t color1;
    uint8_t color2;

    switch (fallo) {
 80141f0:	79fb      	ldrb	r3, [r7, #7]
 80141f2:	3b02      	subs	r3, #2
 80141f4:	2b08      	cmp	r3, #8
 80141f6:	d83d      	bhi.n	8014274 <indicarFallo+0x94>
 80141f8:	a201      	add	r2, pc, #4	; (adr r2, 8014200 <indicarFallo+0x20>)
 80141fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141fe:	bf00      	nop
 8014200:	08014225 	.word	0x08014225
 8014204:	08014275 	.word	0x08014275
 8014208:	0801422f 	.word	0x0801422f
 801420c:	08014239 	.word	0x08014239
 8014210:	08014243 	.word	0x08014243
 8014214:	0801424d 	.word	0x0801424d
 8014218:	08014257 	.word	0x08014257
 801421c:	08014261 	.word	0x08014261
 8014220:	0801426b 	.word	0x0801426b
        case FALLO_ESCRITURA_FLASH:
            color1 = ROJO;
 8014224:	2302      	movs	r3, #2
 8014226:	73fb      	strb	r3, [r7, #15]
            color2 = NEGRO;
 8014228:	2300      	movs	r3, #0
 801422a:	73bb      	strb	r3, [r7, #14]
            break;
 801422c:	e027      	b.n	801427e <indicarFallo+0x9e>

#ifdef USAR_SD
        case FALLO_INICIAR_SD:
            color1 = ROJO;
 801422e:	2302      	movs	r3, #2
 8014230:	73fb      	strb	r3, [r7, #15]
            color2 = BLANCO;
 8014232:	2301      	movs	r3, #1
 8014234:	73bb      	strb	r3, [r7, #14]
            break;
 8014236:	e022      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_IMU
        case FALLO_INICIAR_IMU:
            color1 = ROJO;
 8014238:	2302      	movs	r3, #2
 801423a:	73fb      	strb	r3, [r7, #15]
            color2 = AMARILLO;
 801423c:	2305      	movs	r3, #5
 801423e:	73bb      	strb	r3, [r7, #14]
            break;
 8014240:	e01d      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_BARO
        case FALLO_INICIAR_BARO:
            color1 = ROJO;
 8014242:	2302      	movs	r3, #2
 8014244:	73fb      	strb	r3, [r7, #15]
            color2 = AZUL;
 8014246:	2303      	movs	r3, #3
 8014248:	73bb      	strb	r3, [r7, #14]
            break;
 801424a:	e018      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_MAG
        case FALLO_INICIAR_MAG:
            color1 = ROJO;
 801424c:	2302      	movs	r3, #2
 801424e:	73fb      	strb	r3, [r7, #15]
            color2 = MORADO;
 8014250:	2306      	movs	r3, #6
 8014252:	73bb      	strb	r3, [r7, #14]
            break;
 8014254:	e013      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_GPS
        case FALLO_INICIAR_GPS:
            color1 = ROJO;
 8014256:	2302      	movs	r3, #2
 8014258:	73fb      	strb	r3, [r7, #15]
            color2 = CIAN;
 801425a:	2307      	movs	r3, #7
 801425c:	73bb      	strb	r3, [r7, #14]
            break;
 801425e:	e00e      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_RADIO
        case FALLO_INICIAR_RADIO:
            color1 = BLANCO;
 8014260:	2301      	movs	r3, #1
 8014262:	73fb      	strb	r3, [r7, #15]
            color2 = AZUL;
 8014264:	2303      	movs	r3, #3
 8014266:	73bb      	strb	r3, [r7, #14]
            break;
 8014268:	e009      	b.n	801427e <indicarFallo+0x9e>
#endif

#ifdef USAR_MOTORES
        case FALLO_INICIAR_MOTORES:
            color1 = BLANCO;
 801426a:	2301      	movs	r3, #1
 801426c:	73fb      	strb	r3, [r7, #15]
            color2 = VERDE;
 801426e:	2304      	movs	r3, #4
 8014270:	73bb      	strb	r3, [r7, #14]
            break;
 8014272:	e004      	b.n	801427e <indicarFallo+0x9e>
#endif

        default:
            color1 = ROJO;
 8014274:	2302      	movs	r3, #2
 8014276:	73fb      	strb	r3, [r7, #15]
            color2 = NEGRO;
 8014278:	2300      	movs	r3, #0
 801427a:	73bb      	strb	r3, [r7, #14]
            break;
 801427c:	bf00      	nop
    }

    while (repeticiones--) {
 801427e:	e009      	b.n	8014294 <indicarFallo+0xb4>
        secuenciaFallo(fallo, DURACION_CODIGO_FALLO_MS, color1, color2);
 8014280:	7bbb      	ldrb	r3, [r7, #14]
 8014282:	7bfa      	ldrb	r2, [r7, #15]
 8014284:	79f8      	ldrb	r0, [r7, #7]
 8014286:	21fa      	movs	r1, #250	; 0xfa
 8014288:	f000 f80e 	bl	80142a8 <secuenciaFallo>
        delay(1000);
 801428c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014290:	f003 fc81 	bl	8017b96 <delay>
    while (repeticiones--) {
 8014294:	79bb      	ldrb	r3, [r7, #6]
 8014296:	1e5a      	subs	r2, r3, #1
 8014298:	71ba      	strb	r2, [r7, #6]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d1f0      	bne.n	8014280 <indicarFallo+0xa0>
    }
}
 801429e:	bf00      	nop
 80142a0:	bf00      	nop
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <secuenciaFallo>:
**  Descripcion:    Ejecuta la secuencia de un fallo
**  Parametros:     Repeticiones, duracion, color 1, color 2
**  Retorno:        Ninguno
****************************************************************************************/
void secuenciaFallo(uint8_t repeticiones, uint16_t duracion, uint8_t color1, uint8_t color2)
{
 80142a8:	b590      	push	{r4, r7, lr}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	4604      	mov	r4, r0
 80142b0:	4608      	mov	r0, r1
 80142b2:	4611      	mov	r1, r2
 80142b4:	461a      	mov	r2, r3
 80142b6:	4623      	mov	r3, r4
 80142b8:	71fb      	strb	r3, [r7, #7]
 80142ba:	4603      	mov	r3, r0
 80142bc:	80bb      	strh	r3, [r7, #4]
 80142be:	460b      	mov	r3, r1
 80142c0:	71bb      	strb	r3, [r7, #6]
 80142c2:	4613      	mov	r3, r2
 80142c4:	70fb      	strb	r3, [r7, #3]
    if (repeticiones) {
 80142c6:	79fb      	ldrb	r3, [r7, #7]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d019      	beq.n	8014300 <secuenciaFallo+0x58>
    	escribirLedEstado(color1);
 80142cc:	79bb      	ldrb	r3, [r7, #6]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f000 f94a 	bl	8014568 <escribirLedEstado>

        while (repeticiones--) {
 80142d4:	e00f      	b.n	80142f6 <secuenciaFallo+0x4e>
        	delay(duracion);
 80142d6:	88bb      	ldrh	r3, [r7, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	f003 fc5c 	bl	8017b96 <delay>
        	escribirLedEstado(color2);
 80142de:	78fb      	ldrb	r3, [r7, #3]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f000 f941 	bl	8014568 <escribirLedEstado>
            delay(duracion);
 80142e6:	88bb      	ldrh	r3, [r7, #4]
 80142e8:	4618      	mov	r0, r3
 80142ea:	f003 fc54 	bl	8017b96 <delay>
            escribirLedEstado(color1);
 80142ee:	79bb      	ldrb	r3, [r7, #6]
 80142f0:	4618      	mov	r0, r3
 80142f2:	f000 f939 	bl	8014568 <escribirLedEstado>
        while (repeticiones--) {
 80142f6:	79fb      	ldrb	r3, [r7, #7]
 80142f8:	1e5a      	subs	r2, r3, #1
 80142fa:	71fa      	strb	r2, [r7, #7]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d1ea      	bne.n	80142d6 <secuenciaFallo+0x2e>

        }
    }
}
 8014300:	bf00      	nop
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	bd90      	pop	{r4, r7, pc}

08014308 <configSistema>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configSistema_t, configSistema);
 8014308:	b480      	push	{r7}
 801430a:	af00      	add	r7, sp, #0
 801430c:	4b02      	ldr	r3, [pc, #8]	; (8014318 <configSistema+0x10>)
 801430e:	4618      	mov	r0, r3
 8014310:	46bd      	mov	sp, r7
 8014312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014316:	4770      	bx	lr
 8014318:	2000a9a0 	.word	0x2000a9a0

0801431c <iniciarPlaca>:
**  Descripcion:    Realiza todas las inicializaciones de la placa
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarPlaca(void)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
#ifdef DEBUG
    printf("Bienvenido al modo debug de URpilot\n");
 8014322:	4861      	ldr	r0, [pc, #388]	; (80144a8 <iniciarPlaca+0x18c>)
 8014324:	f021 fd6c 	bl	8035e00 <puts>
#endif

    iniciarLedEstado();
 8014328:	f000 f8e2 	bl	80144f0 <iniciarLedEstado>


    // Configuracion -------------------------------------------------------------
    // Se inicia la configuracion de la flash
    iniciarConfigFlash();
 801432c:	f008 f8ac 	bl	801c488 <iniciarConfigFlash>

    bool estado = cargarConfigFlash();
 8014330:	f008 f8b6 	bl	801c4a0 <cargarConfigFlash>
 8014334:	4603      	mov	r3, r0
 8014336:	71fb      	strb	r3, [r7, #7]
    if (!estado || !versionValidaConfigFlash() || strncasecmp(configSistema()->identificadorPlaca, NOMBRE_PLACA, sizeof(NOMBRE_PLACA)))
 8014338:	79fb      	ldrb	r3, [r7, #7]
 801433a:	f083 0301 	eor.w	r3, r3, #1
 801433e:	b2db      	uxtb	r3, r3
 8014340:	2b00      	cmp	r3, #0
 8014342:	d113      	bne.n	801436c <iniciarPlaca+0x50>
 8014344:	f008 f8ee 	bl	801c524 <versionValidaConfigFlash>
 8014348:	4603      	mov	r3, r0
 801434a:	f083 0301 	eor.w	r3, r3, #1
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10b      	bne.n	801436c <iniciarPlaca+0x50>
 8014354:	f7ff ffd8 	bl	8014308 <configSistema>
 8014358:	4603      	mov	r3, r0
 801435a:	3302      	adds	r3, #2
 801435c:	2206      	movs	r2, #6
 801435e:	4953      	ldr	r1, [pc, #332]	; (80144ac <iniciarPlaca+0x190>)
 8014360:	4618      	mov	r0, r3
 8014362:	f021 fd65 	bl	8035e30 <strncasecmp>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d001      	beq.n	8014370 <iniciarPlaca+0x54>
    	resetearConfigFlash();
 801436c:	f008 f8d2 	bl	801c514 <resetearConfigFlash>

    estadoSistema |= ESTADO_SIS_CONFIG_CARGADA;
 8014370:	4b4f      	ldr	r3, [pc, #316]	; (80144b0 <iniciarPlaca+0x194>)
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	f043 0301 	orr.w	r3, r3, #1
 8014378:	b2da      	uxtb	r2, r3
 801437a:	4b4d      	ldr	r3, [pc, #308]	; (80144b0 <iniciarPlaca+0x194>)
 801437c:	701a      	strb	r2, [r3, #0]
    // Drivers ------------------------------------------------------------------
    // Overclock
#ifdef USAR_OVERCLOCK
    resetearSiOverclock(configSistema()->overclock);
#endif
    delay(100);
 801437e:	2064      	movs	r0, #100	; 0x64
 8014380:	f003 fc09 	bl	8017b96 <delay>

#ifdef DEBUG
    printf("System clock ajustado a: %lu Hz\n", SystemCoreClock);
 8014384:	4b4b      	ldr	r3, [pc, #300]	; (80144b4 <iniciarPlaca+0x198>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4619      	mov	r1, r3
 801438a:	484b      	ldr	r0, [pc, #300]	; (80144b8 <iniciarPlaca+0x19c>)
 801438c:	f021 fcb2 	bl	8035cf4 <iprintf>
#endif

    if (!iniciarVersion()) {
 8014390:	f014 fcfc 	bl	8028d8c <iniciarVersion>
 8014394:	4603      	mov	r3, r0
 8014396:	f083 0301 	eor.w	r3, r3, #1
 801439a:	b2db      	uxtb	r3, r3
 801439c:	2b00      	cmp	r3, #0
 801439e:	d002      	beq.n	80143a6 <iniciarPlaca+0x8a>
#ifdef DEBUG
    printf("Fallo al iniciar el calculo de la version HW\n");
 80143a0:	4846      	ldr	r0, [pc, #280]	; (80144bc <iniciarPlaca+0x1a0>)
 80143a2:	f021 fd2d 	bl	8035e00 <puts>
#endif
    }

    // RTC
#ifdef USAR_RTC
    iniciarRTC();
 80143a6:	f002 fa27 	bl	80167f8 <iniciarRTC>
#endif

    // USB
#ifdef USAR_USB
    iniciarUSB();
 80143aa:	f005 fb39 	bl	8019a20 <iniciarUSB>
#endif

    estadoSistema |= ESTADO_SIS_DRIVERS_READY;
 80143ae:	4b40      	ldr	r3, [pc, #256]	; (80144b0 <iniciarPlaca+0x194>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	f043 0302 	orr.w	r3, r3, #2
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	4b3d      	ldr	r3, [pc, #244]	; (80144b0 <iniciarPlaca+0x194>)
 80143ba:	701a      	strb	r2, [r3, #0]


    // Perifericos --------------------------------------------------------------
    // Power Module
#ifdef USAR_POWER_MODULE
    if (!iniciarPowerModule())
 80143bc:	f013 fbc8 	bl	8027b50 <iniciarPowerModule>
 80143c0:	4603      	mov	r3, r0
 80143c2:	f083 0301 	eor.w	r3, r3, #1
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d002      	beq.n	80143d2 <iniciarPlaca+0xb6>
         falloSistema(FALLO_INICIAR_POWER_MODULE);
 80143cc:	2003      	movs	r0, #3
 80143ce:	f7ff fef6 	bl	80141be <falloSistema>
#endif

    // Sensores
#ifdef USAR_IMU
    if (!iniciarIMU())
 80143d2:	f010 fd29 	bl	8024e28 <iniciarIMU>
 80143d6:	4603      	mov	r3, r0
 80143d8:	f083 0301 	eor.w	r3, r3, #1
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d002      	beq.n	80143e8 <iniciarPlaca+0xcc>
        falloSistema(FALLO_INICIAR_IMU);
 80143e2:	2005      	movs	r0, #5
 80143e4:	f7ff feeb 	bl	80141be <falloSistema>
#endif

#ifdef USAR_BARO
    if (!iniciarBaro())
 80143e8:	f00c f978 	bl	80206dc <iniciarBaro>
 80143ec:	4603      	mov	r3, r0
 80143ee:	f083 0301 	eor.w	r3, r3, #1
 80143f2:	b2db      	uxtb	r3, r3
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d002      	beq.n	80143fe <iniciarPlaca+0xe2>
        falloSistema(FALLO_INICIAR_BARO);
 80143f8:	2006      	movs	r0, #6
 80143fa:	f7ff fee0 	bl	80141be <falloSistema>
#endif

#ifdef USAR_MAG
    if (!iniciarMag())
 80143fe:	f012 ff53 	bl	80272a8 <iniciarMag>
 8014402:	4603      	mov	r3, r0
 8014404:	f083 0301 	eor.w	r3, r3, #1
 8014408:	b2db      	uxtb	r3, r3
 801440a:	2b00      	cmp	r3, #0
 801440c:	d002      	beq.n	8014414 <iniciarPlaca+0xf8>
        falloSistema(FALLO_INICIAR_MAG);
 801440e:	2007      	movs	r0, #7
 8014410:	f7ff fed5 	bl	80141be <falloSistema>
#endif

#ifdef USAR_GPS
    if (!iniciarGPS())
 8014414:	f00d fd82 	bl	8021f1c <iniciarGPS>
 8014418:	4603      	mov	r3, r0
 801441a:	f083 0301 	eor.w	r3, r3, #1
 801441e:	b2db      	uxtb	r3, r3
 8014420:	2b00      	cmp	r3, #0
 8014422:	d002      	beq.n	801442a <iniciarPlaca+0x10e>
        falloSistema(FALLO_INICIAR_GPS);
 8014424:	2008      	movs	r0, #8
 8014426:	f7ff feca 	bl	80141be <falloSistema>
#endif

    // Radiocontrol
#ifdef USAR_RADIO
    if (!iniciarRadio())
 801442a:	f00a f963 	bl	801e6f4 <iniciarRadio>
 801442e:	4603      	mov	r3, r0
 8014430:	f083 0301 	eor.w	r3, r3, #1
 8014434:	b2db      	uxtb	r3, r3
 8014436:	2b00      	cmp	r3, #0
 8014438:	d002      	beq.n	8014440 <iniciarPlaca+0x124>
        falloSistema(FALLO_INICIAR_RADIO);
 801443a:	2009      	movs	r0, #9
 801443c:	f7ff febf 	bl	80141be <falloSistema>
#endif

    // Motores
#ifdef USAR_MOTORES
    if (!iniciarMotores()) {
 8014440:	f009 fa8c 	bl	801d95c <iniciarMotores>
 8014444:	4603      	mov	r3, r0
 8014446:	f083 0301 	eor.w	r3, r3, #1
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <iniciarPlaca+0x13a>
        falloSistema(FALLO_INICIAR_MOTORES);
 8014450:	200a      	movs	r0, #10
 8014452:	f7ff feb4 	bl	80141be <falloSistema>
    }
#endif

    estadoSistema |= ESTADO_SIS_PERIFERICOS_READY;
 8014456:	4b16      	ldr	r3, [pc, #88]	; (80144b0 <iniciarPlaca+0x194>)
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	f043 0304 	orr.w	r3, r3, #4
 801445e:	b2da      	uxtb	r2, r3
 8014460:	4b13      	ldr	r3, [pc, #76]	; (80144b0 <iniciarPlaca+0x194>)
 8014462:	701a      	strb	r2, [r3, #0]


    // FC ----------------------------------------------------------------------
    iniciarRC();
 8014464:	f006 ff84 	bl	801b370 <iniciarRC>
    iniciarAHRS();
 8014468:	f7fc f9da 	bl	8010820 <iniciarAHRS>
    iniciarFC();
 801446c:	f006 fd20 	bl	801aeb0 <iniciarFC>
    iniciarMixer();
 8014470:	f006 fd88 	bl	801af84 <iniciarMixer>


    // Scheduler ---------------------------------------------------------------
    // Iniciar las tareas del scheduler
    iniciarTareas();
 8014474:	f00b f9a2 	bl	801f7bc <iniciarTareas>
    estadoSistema |= ESTADO_SIS_SCHEDULER_READY;
 8014478:	4b0d      	ldr	r3, [pc, #52]	; (80144b0 <iniciarPlaca+0x194>)
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	f043 0310 	orr.w	r3, r3, #16
 8014480:	b2da      	uxtb	r2, r3
 8014482:	4b0b      	ldr	r3, [pc, #44]	; (80144b0 <iniciarPlaca+0x194>)
 8014484:	701a      	strb	r2, [r3, #0]


    // Fin ini -----------------------------------------------------------------
    escribirLedEstado(VERDE);
 8014486:	2004      	movs	r0, #4
 8014488:	f000 f86e 	bl	8014568 <escribirLedEstado>
    estadoSistema |= ESTADO_SIS_READY;
 801448c:	4b08      	ldr	r3, [pc, #32]	; (80144b0 <iniciarPlaca+0x194>)
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	f043 0320 	orr.w	r3, r3, #32
 8014494:	b2da      	uxtb	r2, r3
 8014496:	4b06      	ldr	r3, [pc, #24]	; (80144b0 <iniciarPlaca+0x194>)
 8014498:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG
    printf("Sistema arrancado\n");
 801449a:	4809      	ldr	r0, [pc, #36]	; (80144c0 <iniciarPlaca+0x1a4>)
 801449c:	f021 fcb0 	bl	8035e00 <puts>
#endif
}
 80144a0:	bf00      	nop
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0803a3f0 	.word	0x0803a3f0
 80144ac:	0803a414 	.word	0x0803a414
 80144b0:	20002d90 	.word	0x20002d90
 80144b4:	2000cc48 	.word	0x2000cc48
 80144b8:	0803a41c 	.word	0x0803a41c
 80144bc:	0803a440 	.word	0x0803a440
 80144c0:	0803a470 	.word	0x0803a470

080144c4 <configurarLedEstado>:
**  Descripcion:    Asigna los pines a los leds de estado y comprueba si son invertidos
**  Parametros:     Configuracion de los leds de estado
**  Retorno:        Ninguno
****************************************************************************************/
void configurarLedEstado(configLedEstado_t *configLedEstado)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b083      	sub	sp, #12
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
	configLedEstado->pin[0] = DEFIO_TAG(PIN_LEDR);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	225a      	movs	r2, #90	; 0x5a
 80144d0:	701a      	strb	r2, [r3, #0]
	configLedEstado->pin[1] = DEFIO_TAG(PIN_LEDG);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	225b      	movs	r2, #91	; 0x5b
 80144d6:	705a      	strb	r2, [r3, #1]
	configLedEstado->pin[2] = DEFIO_TAG(PIN_LEDB);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2259      	movs	r2, #89	; 0x59
 80144dc:	709a      	strb	r2, [r3, #2]

	configLedEstado->inversion = false
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2201      	movs	r2, #1
 80144e2:	70da      	strb	r2, [r3, #3]
#ifdef LED_ESTADO_INVERTIDO
    | true
#endif
    ;
}
 80144e4:	bf00      	nop
 80144e6:	370c      	adds	r7, #12
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <iniciarLedEstado>:
**  Descripcion:    Configura las GPIOs de los leds y los apaga
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarLedEstado(void)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
    // Asigna los pines a los leds
	configurarLedEstado(&configLedEstado);
 80144f6:	481a      	ldr	r0, [pc, #104]	; (8014560 <iniciarLedEstado+0x70>)
 80144f8:	f7ff ffe4 	bl	80144c4 <configurarLedEstado>

    for (uint8_t i = 0; i < NUM_LEDS_RGB; i++) {
 80144fc:	2300      	movs	r3, #0
 80144fe:	71fb      	strb	r3, [r7, #7]
 8014500:	e01a      	b.n	8014538 <iniciarLedEstado+0x48>
        if (configLedEstado.pin[i]) {
 8014502:	79fb      	ldrb	r3, [r7, #7]
 8014504:	4a16      	ldr	r2, [pc, #88]	; (8014560 <iniciarLedEstado+0x70>)
 8014506:	5cd3      	ldrb	r3, [r2, r3]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00e      	beq.n	801452a <iniciarLedEstado+0x3a>
        	ledEstado[i] = configLedEstado.pin[i];
 801450c:	79fa      	ldrb	r2, [r7, #7]
 801450e:	79fb      	ldrb	r3, [r7, #7]
 8014510:	4913      	ldr	r1, [pc, #76]	; (8014560 <iniciarLedEstado+0x70>)
 8014512:	5c89      	ldrb	r1, [r1, r2]
 8014514:	4a13      	ldr	r2, [pc, #76]	; (8014564 <iniciarLedEstado+0x74>)
 8014516:	54d1      	strb	r1, [r2, r3]
            configurarIO(ledEstado[i], CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_LOW,  GPIO_NOPULL), 0);
 8014518:	79fb      	ldrb	r3, [r7, #7]
 801451a:	4a12      	ldr	r2, [pc, #72]	; (8014564 <iniciarLedEstado+0x74>)
 801451c:	5cd3      	ldrb	r3, [r2, r3]
 801451e:	2200      	movs	r2, #0
 8014520:	2101      	movs	r1, #1
 8014522:	4618      	mov	r0, r3
 8014524:	f001 ff44 	bl	80163b0 <configurarIO>
 8014528:	e003      	b.n	8014532 <iniciarLedEstado+0x42>
        }
        else
        	ledEstado[i] = DEFIO_TAG__NINGUNO;
 801452a:	79fb      	ldrb	r3, [r7, #7]
 801452c:	4a0d      	ldr	r2, [pc, #52]	; (8014564 <iniciarLedEstado+0x74>)
 801452e:	2100      	movs	r1, #0
 8014530:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < NUM_LEDS_RGB; i++) {
 8014532:	79fb      	ldrb	r3, [r7, #7]
 8014534:	3301      	adds	r3, #1
 8014536:	71fb      	strb	r3, [r7, #7]
 8014538:	79fb      	ldrb	r3, [r7, #7]
 801453a:	2b02      	cmp	r3, #2
 801453c:	d9e1      	bls.n	8014502 <iniciarLedEstado+0x12>
    }

    LEDR_ON;
 801453e:	2101      	movs	r1, #1
 8014540:	2000      	movs	r0, #0
 8014542:	f000 f8a7 	bl	8014694 <escribirLed>
    LEDG_ON;
 8014546:	2101      	movs	r1, #1
 8014548:	2001      	movs	r0, #1
 801454a:	f000 f8a3 	bl	8014694 <escribirLed>
    LEDB_ON;
 801454e:	2101      	movs	r1, #1
 8014550:	2002      	movs	r0, #2
 8014552:	f000 f89f 	bl	8014694 <escribirLed>
}
 8014556:	bf00      	nop
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	20002d94 	.word	0x20002d94
 8014564:	20002d98 	.word	0x20002d98

08014568 <escribirLedEstado>:
**  Descripcion:    Escribe un color en el led de estado
**  Parametros:     Color
**  Retorno:        Ninguno
****************************************************************************************/
void escribirLedEstado(colorRGB_e color)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	4603      	mov	r3, r0
 8014570:	71fb      	strb	r3, [r7, #7]
    switch (color) {
 8014572:	79fb      	ldrb	r3, [r7, #7]
 8014574:	2b07      	cmp	r3, #7
 8014576:	d87b      	bhi.n	8014670 <escribirLedEstado+0x108>
 8014578:	a201      	add	r2, pc, #4	; (adr r2, 8014580 <escribirLedEstado+0x18>)
 801457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801457e:	bf00      	nop
 8014580:	080145a1 	.word	0x080145a1
 8014584:	080145bb 	.word	0x080145bb
 8014588:	080145d5 	.word	0x080145d5
 801458c:	080145ef 	.word	0x080145ef
 8014590:	08014609 	.word	0x08014609
 8014594:	08014623 	.word	0x08014623
 8014598:	0801463d 	.word	0x0801463d
 801459c:	08014657 	.word	0x08014657
        case NEGRO:
            LEDR_OFF;
 80145a0:	2100      	movs	r1, #0
 80145a2:	2000      	movs	r0, #0
 80145a4:	f000 f876 	bl	8014694 <escribirLed>
            LEDG_OFF;
 80145a8:	2100      	movs	r1, #0
 80145aa:	2001      	movs	r0, #1
 80145ac:	f000 f872 	bl	8014694 <escribirLed>
            LEDB_OFF;
 80145b0:	2100      	movs	r1, #0
 80145b2:	2002      	movs	r0, #2
 80145b4:	f000 f86e 	bl	8014694 <escribirLed>
        	break;
 80145b8:	e067      	b.n	801468a <escribirLedEstado+0x122>

        case BLANCO:
            LEDR_ON;
 80145ba:	2101      	movs	r1, #1
 80145bc:	2000      	movs	r0, #0
 80145be:	f000 f869 	bl	8014694 <escribirLed>
            LEDG_ON;
 80145c2:	2101      	movs	r1, #1
 80145c4:	2001      	movs	r0, #1
 80145c6:	f000 f865 	bl	8014694 <escribirLed>
            LEDB_ON;
 80145ca:	2101      	movs	r1, #1
 80145cc:	2002      	movs	r0, #2
 80145ce:	f000 f861 	bl	8014694 <escribirLed>
        	break;
 80145d2:	e05a      	b.n	801468a <escribirLedEstado+0x122>

        case ROJO:
            LEDR_ON;
 80145d4:	2101      	movs	r1, #1
 80145d6:	2000      	movs	r0, #0
 80145d8:	f000 f85c 	bl	8014694 <escribirLed>
            LEDG_OFF;
 80145dc:	2100      	movs	r1, #0
 80145de:	2001      	movs	r0, #1
 80145e0:	f000 f858 	bl	8014694 <escribirLed>
            LEDB_OFF;
 80145e4:	2100      	movs	r1, #0
 80145e6:	2002      	movs	r0, #2
 80145e8:	f000 f854 	bl	8014694 <escribirLed>
        	break;
 80145ec:	e04d      	b.n	801468a <escribirLedEstado+0x122>

        case AZUL:
            LEDR_OFF;
 80145ee:	2100      	movs	r1, #0
 80145f0:	2000      	movs	r0, #0
 80145f2:	f000 f84f 	bl	8014694 <escribirLed>
            LEDG_OFF;
 80145f6:	2100      	movs	r1, #0
 80145f8:	2001      	movs	r0, #1
 80145fa:	f000 f84b 	bl	8014694 <escribirLed>
            LEDB_ON;
 80145fe:	2101      	movs	r1, #1
 8014600:	2002      	movs	r0, #2
 8014602:	f000 f847 	bl	8014694 <escribirLed>
        	break;
 8014606:	e040      	b.n	801468a <escribirLedEstado+0x122>

        case VERDE:
            LEDR_OFF;
 8014608:	2100      	movs	r1, #0
 801460a:	2000      	movs	r0, #0
 801460c:	f000 f842 	bl	8014694 <escribirLed>
            LEDG_ON;
 8014610:	2101      	movs	r1, #1
 8014612:	2001      	movs	r0, #1
 8014614:	f000 f83e 	bl	8014694 <escribirLed>
            LEDB_OFF;
 8014618:	2100      	movs	r1, #0
 801461a:	2002      	movs	r0, #2
 801461c:	f000 f83a 	bl	8014694 <escribirLed>
        	break;
 8014620:	e033      	b.n	801468a <escribirLedEstado+0x122>

        case AMARILLO:
            LEDR_ON;
 8014622:	2101      	movs	r1, #1
 8014624:	2000      	movs	r0, #0
 8014626:	f000 f835 	bl	8014694 <escribirLed>
            LEDG_ON;
 801462a:	2101      	movs	r1, #1
 801462c:	2001      	movs	r0, #1
 801462e:	f000 f831 	bl	8014694 <escribirLed>
            LEDB_OFF;
 8014632:	2100      	movs	r1, #0
 8014634:	2002      	movs	r0, #2
 8014636:	f000 f82d 	bl	8014694 <escribirLed>
        	break;
 801463a:	e026      	b.n	801468a <escribirLedEstado+0x122>

        case MORADO:
            LEDR_ON;
 801463c:	2101      	movs	r1, #1
 801463e:	2000      	movs	r0, #0
 8014640:	f000 f828 	bl	8014694 <escribirLed>
            LEDG_OFF;
 8014644:	2100      	movs	r1, #0
 8014646:	2001      	movs	r0, #1
 8014648:	f000 f824 	bl	8014694 <escribirLed>
            LEDB_ON;
 801464c:	2101      	movs	r1, #1
 801464e:	2002      	movs	r0, #2
 8014650:	f000 f820 	bl	8014694 <escribirLed>
        	break;
 8014654:	e019      	b.n	801468a <escribirLedEstado+0x122>

        case CIAN:
            LEDR_OFF;
 8014656:	2100      	movs	r1, #0
 8014658:	2000      	movs	r0, #0
 801465a:	f000 f81b 	bl	8014694 <escribirLed>
            LEDG_ON;
 801465e:	2101      	movs	r1, #1
 8014660:	2001      	movs	r0, #1
 8014662:	f000 f817 	bl	8014694 <escribirLed>
            LEDB_ON;
 8014666:	2101      	movs	r1, #1
 8014668:	2002      	movs	r0, #2
 801466a:	f000 f813 	bl	8014694 <escribirLed>
        	break;
 801466e:	e00c      	b.n	801468a <escribirLedEstado+0x122>

        default:
            LEDR_OFF;
 8014670:	2100      	movs	r1, #0
 8014672:	2000      	movs	r0, #0
 8014674:	f000 f80e 	bl	8014694 <escribirLed>
            LEDG_OFF;
 8014678:	2100      	movs	r1, #0
 801467a:	2001      	movs	r0, #1
 801467c:	f000 f80a 	bl	8014694 <escribirLed>
            LEDB_OFF;
 8014680:	2100      	movs	r1, #0
 8014682:	2002      	movs	r0, #2
 8014684:	f000 f806 	bl	8014694 <escribirLed>
		    break;
 8014688:	bf00      	nop
    }
}
 801468a:	bf00      	nop
 801468c:	3708      	adds	r7, #8
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop

08014694 <escribirLed>:
**  Descripcion:    Enciende o apaga un led
**  Parametros:     Led, encender o apagar
**  Retorno:        Ninguno
****************************************************************************************/
void escribirLed(uint8_t numLed, bool estado)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	4603      	mov	r3, r0
 801469c:	460a      	mov	r2, r1
 801469e:	71fb      	strb	r3, [r7, #7]
 80146a0:	4613      	mov	r3, r2
 80146a2:	71bb      	strb	r3, [r7, #6]
    if (configLedEstado.inversion)
 80146a4:	4b11      	ldr	r3, [pc, #68]	; (80146ec <escribirLed+0x58>)
 80146a6:	78db      	ldrb	r3, [r3, #3]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d013      	beq.n	80146d4 <escribirLed+0x40>
        escribirIO(ledEstado[numLed], !estado);
 80146ac:	79fb      	ldrb	r3, [r7, #7]
 80146ae:	4a10      	ldr	r2, [pc, #64]	; (80146f0 <escribirLed+0x5c>)
 80146b0:	5cd2      	ldrb	r2, [r2, r3]
 80146b2:	79bb      	ldrb	r3, [r7, #6]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	bf14      	ite	ne
 80146b8:	2301      	movne	r3, #1
 80146ba:	2300      	moveq	r3, #0
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	f083 0301 	eor.w	r3, r3, #1
 80146c2:	b2db      	uxtb	r3, r3
 80146c4:	f003 0301 	and.w	r3, r3, #1
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f001 ff4f 	bl	8016570 <escribirIO>
    else
        escribirIO(ledEstado[numLed], estado);
}
 80146d2:	e007      	b.n	80146e4 <escribirLed+0x50>
        escribirIO(ledEstado[numLed], estado);
 80146d4:	79fb      	ldrb	r3, [r7, #7]
 80146d6:	4a06      	ldr	r2, [pc, #24]	; (80146f0 <escribirLed+0x5c>)
 80146d8:	5cd3      	ldrb	r3, [r2, r3]
 80146da:	79ba      	ldrb	r2, [r7, #6]
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f001 ff46 	bl	8016570 <escribirIO>
}
 80146e4:	bf00      	nop
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	20002d94 	.word	0x20002d94
 80146f0:	20002d98 	.word	0x20002d98

080146f4 <main>:
**  Descripcion:    Funcion general que contiene el codigo
**  Parametros:     Ninguno
**  Retorno:        No se usa
****************************************************************************************/
int main(void)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	af00      	add	r7, sp, #0
	iniciarPlaca();
 80146f8:	f7ff fe10 	bl	801431c <iniciarPlaca>
    run();
 80146fc:	f000 f803 	bl	8014706 <run>
    return 0;
 8014700:	2300      	movs	r3, #0
}
 8014702:	4618      	mov	r0, r3
 8014704:	bd80      	pop	{r7, pc}

08014706 <run>:
**  Descripcion:    Bucle infinito donde se ejecuta el programa principal
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void run(void)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	af00      	add	r7, sp, #0
    while (1)
        scheduler();
 801470a:	f00a fced 	bl	801f0e8 <scheduler>
 801470e:	e7fc      	b.n	801470a <run+0x4>

08014710 <chequearStack>:
**  Descripcion:    Comprueba que hay suficiente memoria para el stack
**  Parametros:     Tiempo actual (no se usa)
**  Retorno:        Ninguno
****************************************************************************************/
void chequearStack(uint32_t tiempoActual)
{
 8014710:	b480      	push	{r7}
 8014712:	b089      	sub	sp, #36	; 0x24
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    char * const memAlta = &_estack;
 8014718:	4b13      	ldr	r3, [pc, #76]	; (8014768 <chequearStack+0x58>)
 801471a:	61bb      	str	r3, [r7, #24]
    const uint32_t tam = (uint32_t)&_Min_Stack_Size;
 801471c:	4b13      	ldr	r3, [pc, #76]	; (801476c <chequearStack+0x5c>)
 801471e:	617b      	str	r3, [r7, #20]
    char * const memBaja = memAlta - tam;
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	425b      	negs	r3, r3
 8014724:	69ba      	ldr	r2, [r7, #24]
 8014726:	4413      	add	r3, r2
 8014728:	60fb      	str	r3, [r7, #12]
    const char * const stackActual = (char *)&memBaja;
 801472a:	f107 030c 	add.w	r3, r7, #12
 801472e:	613b      	str	r3, [r7, #16]

    char *p;
    for (p = memBaja; p < stackActual; ++p) {
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	61fb      	str	r3, [r7, #28]
 8014734:	e006      	b.n	8014744 <chequearStack+0x34>
        if (*p != CARACTER_LLENO_STACK)
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	2ba5      	cmp	r3, #165	; 0xa5
 801473c:	d107      	bne.n	801474e <chequearStack+0x3e>
    for (p = memBaja; p < stackActual; ++p) {
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	3301      	adds	r3, #1
 8014742:	61fb      	str	r3, [r7, #28]
 8014744:	69fa      	ldr	r2, [r7, #28]
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	429a      	cmp	r2, r3
 801474a:	d3f4      	bcc.n	8014736 <chequearStack+0x26>
 801474c:	e000      	b.n	8014750 <chequearStack+0x40>
            break;
 801474e:	bf00      	nop
    }

    stackUsado = (uint32_t)memAlta - (uint32_t)p;
 8014750:	69ba      	ldr	r2, [r7, #24]
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	4a06      	ldr	r2, [pc, #24]	; (8014770 <chequearStack+0x60>)
 8014758:	6013      	str	r3, [r2, #0]
}
 801475a:	bf00      	nop
 801475c:	3724      	adds	r7, #36	; 0x24
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	20020000 	.word	0x20020000
 801476c:	00000800 	.word	0x00000800
 8014770:	20002d9c 	.word	0x20002d9c

08014774 <punteroADC>:
**  Descripcion:    Devuelve el puntero a un ADC seleccionado
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
adc_t *punteroADC(numADC_e numADC)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	4603      	mov	r3, r0
 801477c:	71fb      	strb	r3, [r7, #7]
    return &adc[numADC];
 801477e:	79fa      	ldrb	r2, [r7, #7]
 8014780:	4613      	mov	r3, r2
 8014782:	019b      	lsls	r3, r3, #6
 8014784:	1a9b      	subs	r3, r3, r2
 8014786:	009b      	lsls	r3, r3, #2
 8014788:	4a03      	ldr	r2, [pc, #12]	; (8014798 <punteroADC+0x24>)
 801478a:	4413      	add	r3, r2
}
 801478c:	4618      	mov	r0, r3
 801478e:	370c      	adds	r7, #12
 8014790:	46bd      	mov	sp, r7
 8014792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014796:	4770      	bx	lr
 8014798:	20002da0 	.word	0x20002da0

0801479c <iniciarADC>:
**  Descripcion:    Configura e inicia el ADC
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarADC(void)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
    // Reset puertos
	for (uint8_t i = 0; i < NUM_MAX_PUERTOS_ADC; i++) {
 80147a2:	2300      	movs	r3, #0
 80147a4:	71fb      	strb	r3, [r7, #7]
 80147a6:	e00d      	b.n	80147c4 <iniciarADC+0x28>
	    memset(&puertosADC[i], 0, sizeof(puertosADC[i]));
 80147a8:	79fa      	ldrb	r2, [r7, #7]
 80147aa:	4613      	mov	r3, r2
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4413      	add	r3, r2
 80147b0:	4a2d      	ldr	r2, [pc, #180]	; (8014868 <iniciarADC+0xcc>)
 80147b2:	4413      	add	r3, r2
 80147b4:	2203      	movs	r2, #3
 80147b6:	2100      	movs	r1, #0
 80147b8:	4618      	mov	r0, r3
 80147ba:	f020 fd71 	bl	80352a0 <memset>
	for (uint8_t i = 0; i < NUM_MAX_PUERTOS_ADC; i++) {
 80147be:	79fb      	ldrb	r3, [r7, #7]
 80147c0:	3301      	adds	r3, #1
 80147c2:	71fb      	strb	r3, [r7, #7]
 80147c4:	79fb      	ldrb	r3, [r7, #7]
 80147c6:	2b0f      	cmp	r3, #15
 80147c8:	d9ee      	bls.n	80147a8 <iniciarADC+0xc>
	}

    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 80147ca:	2300      	movs	r3, #0
 80147cc:	71bb      	strb	r3, [r7, #6]
 80147ce:	e01d      	b.n	801480c <iniciarADC+0x70>
        adc_t *driver = &adc[i];
 80147d0:	79ba      	ldrb	r2, [r7, #6]
 80147d2:	4613      	mov	r3, r2
 80147d4:	019b      	lsls	r3, r3, #6
 80147d6:	1a9b      	subs	r3, r3, r2
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	4a24      	ldr	r2, [pc, #144]	; (801486c <iniciarADC+0xd0>)
 80147dc:	4413      	add	r3, r2
 80147de:	603b      	str	r3, [r7, #0]

        // Reset driver ADC
        memset(driver, 0, sizeof(adc_t));
 80147e0:	22fc      	movs	r2, #252	; 0xfc
 80147e2:	2100      	movs	r1, #0
 80147e4:	6838      	ldr	r0, [r7, #0]
 80147e6:	f020 fd5b 	bl	80352a0 <memset>

        if (iniciarDriverADC(i))
 80147ea:	79bb      	ldrb	r3, [r7, #6]
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 f929 	bl	8014a44 <iniciarDriverADC>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d003      	beq.n	8014800 <iniciarADC+0x64>
            driver->iniciado = true;
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	2201      	movs	r2, #1
 80147fc:	701a      	strb	r2, [r3, #0]
 80147fe:	e002      	b.n	8014806 <iniciarADC+0x6a>
        else
            driver->iniciado = false;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	2200      	movs	r2, #0
 8014804:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 8014806:	79bb      	ldrb	r3, [r7, #6]
 8014808:	3301      	adds	r3, #1
 801480a:	71bb      	strb	r3, [r7, #6]
 801480c:	79bb      	ldrb	r3, [r7, #6]
 801480e:	2b02      	cmp	r3, #2
 8014810:	d9de      	bls.n	80147d0 <iniciarADC+0x34>
    }

    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 8014812:	2300      	movs	r3, #0
 8014814:	717b      	strb	r3, [r7, #5]
 8014816:	e01a      	b.n	801484e <iniciarADC+0xb2>
        if (!adc[i].iniciado) {
 8014818:	797a      	ldrb	r2, [r7, #5]
 801481a:	4914      	ldr	r1, [pc, #80]	; (801486c <iniciarADC+0xd0>)
 801481c:	4613      	mov	r3, r2
 801481e:	019b      	lsls	r3, r3, #6
 8014820:	1a9b      	subs	r3, r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	440b      	add	r3, r1
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	f083 0301 	eor.w	r3, r3, #1
 801482c:	b2db      	uxtb	r3, r3
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00a      	beq.n	8014848 <iniciarADC+0xac>
#ifdef DEBUG
            printf("Fallo en la inicializacion del ADC %u\n", i + 1);
 8014832:	797b      	ldrb	r3, [r7, #5]
 8014834:	3301      	adds	r3, #1
 8014836:	4619      	mov	r1, r3
 8014838:	480d      	ldr	r0, [pc, #52]	; (8014870 <iniciarADC+0xd4>)
 801483a:	f021 fa5b 	bl	8035cf4 <iprintf>
#endif
            adcIniciado = false;
 801483e:	4b0d      	ldr	r3, [pc, #52]	; (8014874 <iniciarADC+0xd8>)
 8014840:	2200      	movs	r2, #0
 8014842:	701a      	strb	r2, [r3, #0]
        	return false;
 8014844:	2300      	movs	r3, #0
 8014846:	e00b      	b.n	8014860 <iniciarADC+0xc4>
    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 8014848:	797b      	ldrb	r3, [r7, #5]
 801484a:	3301      	adds	r3, #1
 801484c:	717b      	strb	r3, [r7, #5]
 801484e:	797b      	ldrb	r3, [r7, #5]
 8014850:	2b02      	cmp	r3, #2
 8014852:	d9e1      	bls.n	8014818 <iniciarADC+0x7c>
        }
    }

    adcIniciado = true;
 8014854:	4b07      	ldr	r3, [pc, #28]	; (8014874 <iniciarADC+0xd8>)
 8014856:	2201      	movs	r2, #1
 8014858:	701a      	strb	r2, [r3, #0]

#ifdef USAR_ADC_INTERNO
    // Se inicia el ADC interno
    iniciarAdcInterno();
 801485a:	f000 f883 	bl	8014964 <iniciarAdcInterno>
#endif

    return true;
 801485e:	2301      	movs	r3, #1
}
 8014860:	4618      	mov	r0, r3
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	20003094 	.word	0x20003094
 801486c:	20002da0 	.word	0x20002da0
 8014870:	0803a484 	.word	0x0803a484
 8014874:	200030c4 	.word	0x200030c4

08014878 <iniciadoADC>:
**  Descripcion:    Devuelve si los ADC estan iniciados
**  Parametros:     Ninguno
**  Retorno:        ADC iniciado
****************************************************************************************/
bool iniciadoADC(void)
{
 8014878:	b480      	push	{r7}
 801487a:	af00      	add	r7, sp, #0
	return adcIniciado;
 801487c:	4b03      	ldr	r3, [pc, #12]	; (801488c <iniciadoADC+0x14>)
 801487e:	781b      	ldrb	r3, [r3, #0]
}
 8014880:	4618      	mov	r0, r3
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop
 801488c:	200030c4 	.word	0x200030c4

08014890 <puertoADC>:
**  Descripcion:    Devuelve el puerto ADC
**  Parametros:     Numero del puerto
**  Retorno:        Puerto
****************************************************************************************/
puertoADC_t *puertoADC(uint8_t puerto)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	4603      	mov	r3, r0
 8014898:	71fb      	strb	r3, [r7, #7]
	return &puertosADC[puerto];
 801489a:	79fa      	ldrb	r2, [r7, #7]
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	4a04      	ldr	r2, [pc, #16]	; (80148b4 <puertoADC+0x24>)
 80148a4:	4413      	add	r3, r2
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	370c      	adds	r7, #12
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop
 80148b4:	20003094 	.word	0x20003094

080148b8 <asignarPuertoADC>:
**  Descripcion:    Asigns el puerto ADC
**  Parametros:     Numero de puerto, datos a asignar
**  Retorno:        Ninguno
****************************************************************************************/
void asignarPuertoADC(uint8_t numPuerto, puertoADC_t puerto)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	4603      	mov	r3, r0
 80148c0:	6039      	str	r1, [r7, #0]
 80148c2:	71fb      	strb	r3, [r7, #7]
    puertosADC[numPuerto] = puerto;
 80148c4:	79fa      	ldrb	r2, [r7, #7]
 80148c6:	4908      	ldr	r1, [pc, #32]	; (80148e8 <asignarPuertoADC+0x30>)
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	440b      	add	r3, r1
 80148d0:	461a      	mov	r2, r3
 80148d2:	463b      	mov	r3, r7
 80148d4:	8819      	ldrh	r1, [r3, #0]
 80148d6:	789b      	ldrb	r3, [r3, #2]
 80148d8:	8011      	strh	r1, [r2, #0]
 80148da:	7093      	strb	r3, [r2, #2]
}
 80148dc:	bf00      	nop
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr
 80148e8:	20003094 	.word	0x20003094

080148ec <leerValorCanalADC>:
**  Descripcion:    Devuelve el valor analogico de un canal
**  Parametros:     Numero del driver, canal a leer
**  Retorno:        Valor del canal
****************************************************************************************/
uint16_t leerValorCanalADC(numADC_e numADC, uint8_t canal)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b083      	sub	sp, #12
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	4603      	mov	r3, r0
 80148f4:	460a      	mov	r2, r1
 80148f6:	71fb      	strb	r3, [r7, #7]
 80148f8:	4613      	mov	r3, r2
 80148fa:	71bb      	strb	r3, [r7, #6]
    return adc[numADC].valores[canal];
 80148fc:	79fa      	ldrb	r2, [r7, #7]
 80148fe:	79b9      	ldrb	r1, [r7, #6]
 8014900:	4808      	ldr	r0, [pc, #32]	; (8014924 <leerValorCanalADC+0x38>)
 8014902:	4613      	mov	r3, r2
 8014904:	019b      	lsls	r3, r3, #6
 8014906:	1a9b      	subs	r3, r3, r2
 8014908:	005b      	lsls	r3, r3, #1
 801490a:	440b      	add	r3, r1
 801490c:	336c      	adds	r3, #108	; 0x6c
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	4403      	add	r3, r0
 8014912:	889b      	ldrh	r3, [r3, #4]
 8014914:	b29b      	uxth	r3, r3
}
 8014916:	4618      	mov	r0, r3
 8014918:	370c      	adds	r7, #12
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	20002da0 	.word	0x20002da0

08014928 <leerCanalADC>:
**  Descripcion:    Devuelve el valor analogico de un canal
**  Parametros:     Canal a leer
**  Retorno:        Valor del canal
****************************************************************************************/
uint16_t leerCanalADC(uint8_t canal)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	4603      	mov	r3, r0
 8014930:	71fb      	strb	r3, [r7, #7]
    puertoADC_t *puerto = puertoADC(canal);
 8014932:	79fb      	ldrb	r3, [r7, #7]
 8014934:	4618      	mov	r0, r3
 8014936:	f7ff ffab 	bl	8014890 <puertoADC>
 801493a:	60f8      	str	r0, [r7, #12]

    if (puerto->pinAsignado)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d009      	beq.n	8014958 <leerCanalADC+0x30>
	    return leerValorCanalADC(puerto->numADC, puerto->canalADC);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	785a      	ldrb	r2, [r3, #1]
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	789b      	ldrb	r3, [r3, #2]
 801494c:	4619      	mov	r1, r3
 801494e:	4610      	mov	r0, r2
 8014950:	f7ff ffcc 	bl	80148ec <leerValorCanalADC>
 8014954:	4603      	mov	r3, r0
 8014956:	e001      	b.n	801495c <leerCanalADC+0x34>
    else
        return 65535;
 8014958:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801495c:	4618      	mov	r0, r3
 801495e:	3710      	adds	r7, #16
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <iniciarAdcInterno>:
**  Descripcion:    Rellena el filtro de media movil
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarAdcInterno(void)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
	ajustarFiltroMediaMovil(&filtroTemp, TAMANIO_FILTRO_ADC_INTERNO);
 801496a:	2108      	movs	r1, #8
 801496c:	480d      	ldr	r0, [pc, #52]	; (80149a4 <iniciarAdcInterno+0x40>)
 801496e:	f007 fb9b 	bl	801c0a8 <ajustarFiltroMediaMovil>
	ajustarFiltroMediaMovil(&filtroVref, TAMANIO_FILTRO_ADC_INTERNO);
 8014972:	2108      	movs	r1, #8
 8014974:	480c      	ldr	r0, [pc, #48]	; (80149a8 <iniciarAdcInterno+0x44>)
 8014976:	f007 fb97 	bl	801c0a8 <ajustarFiltroMediaMovil>

    // Llamamos a la funcion "actualizarAdcInterno" para rellenar el filtro de media movil
    for (uint8_t i = 0 ; i < TAMANIO_FILTRO_ADC_INTERNO ; i++) {
 801497a:	2300      	movs	r3, #0
 801497c:	71fb      	strb	r3, [r7, #7]
 801497e:	e008      	b.n	8014992 <iniciarAdcInterno+0x2e>
        actualizarADCinterno(0);
 8014980:	2000      	movs	r0, #0
 8014982:	f000 f813 	bl	80149ac <actualizarADCinterno>
        delay(20);
 8014986:	2014      	movs	r0, #20
 8014988:	f003 f905 	bl	8017b96 <delay>
    for (uint8_t i = 0 ; i < TAMANIO_FILTRO_ADC_INTERNO ; i++) {
 801498c:	79fb      	ldrb	r3, [r7, #7]
 801498e:	3301      	adds	r3, #1
 8014990:	71fb      	strb	r3, [r7, #7]
 8014992:	79fb      	ldrb	r3, [r7, #7]
 8014994:	2b07      	cmp	r3, #7
 8014996:	d9f3      	bls.n	8014980 <iniciarAdcInterno+0x1c>
    }
}
 8014998:	bf00      	nop
 801499a:	bf00      	nop
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	200030c8 	.word	0x200030c8
 80149a8:	2000310c 	.word	0x2000310c

080149ac <actualizarADCinterno>:
**  Descripcion:    Actualiza el filtro de media movil y manda una nueva conversion del ADC
**  Parametros:     Tiempo actual (no usado)
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarADCinterno(uint32_t tiempoActual)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    uint16_t muestraVref;
	int16_t muestraTempCore;

    leerADCinterno(&muestraVref, &muestraTempCore);
 80149b4:	f107 020c 	add.w	r2, r7, #12
 80149b8:	f107 030e 	add.w	r3, r7, #14
 80149bc:	4611      	mov	r1, r2
 80149be:	4618      	mov	r0, r3
 80149c0:	f000 fade 	bl	8014f80 <leerADCinterno>
    tensionRef = actualizarFiltroMediaMovil(&filtroVref, (float)muestraVref) / 1000;
 80149c4:	89fb      	ldrh	r3, [r7, #14]
 80149c6:	ee07 3a90 	vmov	s15, r3
 80149ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149ce:	eeb0 0a67 	vmov.f32	s0, s15
 80149d2:	4810      	ldr	r0, [pc, #64]	; (8014a14 <actualizarADCinterno+0x68>)
 80149d4:	f007 fba3 	bl	801c11e <actualizarFiltroMediaMovil>
 80149d8:	eeb0 7a40 	vmov.f32	s14, s0
 80149dc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8014a18 <actualizarADCinterno+0x6c>
 80149e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80149e4:	4b0d      	ldr	r3, [pc, #52]	; (8014a1c <actualizarADCinterno+0x70>)
 80149e6:	edc3 7a00 	vstr	s15, [r3]
    tempCore = actualizarFiltroMediaMovil(&filtroTemp, (float)muestraTempCore);
 80149ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80149ee:	ee07 3a90 	vmov	s15, r3
 80149f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149f6:	eeb0 0a67 	vmov.f32	s0, s15
 80149fa:	4809      	ldr	r0, [pc, #36]	; (8014a20 <actualizarADCinterno+0x74>)
 80149fc:	f007 fb8f 	bl	801c11e <actualizarFiltroMediaMovil>
 8014a00:	eef0 7a40 	vmov.f32	s15, s0
 8014a04:	4b07      	ldr	r3, [pc, #28]	; (8014a24 <actualizarADCinterno+0x78>)
 8014a06:	edc3 7a00 	vstr	s15, [r3]
}
 8014a0a:	bf00      	nop
 8014a0c:	3710      	adds	r7, #16
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}
 8014a12:	bf00      	nop
 8014a14:	2000310c 	.word	0x2000310c
 8014a18:	447a0000 	.word	0x447a0000
 8014a1c:	20003154 	.word	0x20003154
 8014a20:	200030c8 	.word	0x200030c8
 8014a24:	20003150 	.word	0x20003150

08014a28 <tensionReferencia>:
**  Descripcion:    Devuelve la tension de referencia del micro
**  Parametros:     Ninguno
**  Retorno:        Tension de referencia
****************************************************************************************/
float tensionReferencia(void)
{
 8014a28:	b480      	push	{r7}
 8014a2a:	af00      	add	r7, sp, #0
#ifdef USAR_ADC_INTERNO
    return tensionRef;
 8014a2c:	4b04      	ldr	r3, [pc, #16]	; (8014a40 <tensionReferencia+0x18>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	ee07 3a90 	vmov	s15, r3
#else
    return TENSION_REFERENCIA_ADC;
#endif
}
 8014a34:	eeb0 0a67 	vmov.f32	s0, s15
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr
 8014a40:	20003154 	.word	0x20003154

08014a44 <iniciarDriverADC>:
**  Descripcion:    Inicia el ADC
**  Parametros:     ADC a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverADC(numADC_e numADC)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08a      	sub	sp, #40	; 0x28
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	71fb      	strb	r3, [r7, #7]
    adc_t *driver = punteroADC(numADC);
 8014a4e:	79fb      	ldrb	r3, [r7, #7]
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7ff fe8f 	bl	8014774 <punteroADC>
 8014a56:	61f8      	str	r0, [r7, #28]

	if (!asignarHALadc(numADC))
 8014a58:	79fb      	ldrb	r3, [r7, #7]
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f000 fafa 	bl	8015054 <asignarHALadc>
 8014a60:	4603      	mov	r3, r0
 8014a62:	f083 0301 	eor.w	r3, r3, #1
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d001      	beq.n	8014a70 <iniciarDriverADC+0x2c>
	    return false;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	e13f      	b.n	8014cf0 <iniciarDriverADC+0x2ac>

    bool usarDriver = false;
 8014a70:	2300      	movs	r3, #0
 8014a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014a76:	2300      	movs	r3, #0
 8014a78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014a7c:	e010      	b.n	8014aa0 <iniciarDriverADC+0x5c>
        if (driver->hal.canalesHabilitados[i] != 0) {
 8014a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a82:	69fa      	ldr	r2, [r7, #28]
 8014a84:	4413      	add	r3, r2
 8014a86:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d003      	beq.n	8014a96 <iniciarDriverADC+0x52>
            usarDriver = true;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014a94:	e008      	b.n	8014aa8 <iniciarDriverADC+0x64>
	for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014a96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014aa4:	2b0f      	cmp	r3, #15
 8014aa6:	d9ea      	bls.n	8014a7e <iniciarDriverADC+0x3a>
        }
	}

	driver->usado = usarDriver;
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014aae:	705a      	strb	r2, [r3, #1]
	if (numADC != ADC_INTERNO && !usarDriver)
 8014ab0:	79fb      	ldrb	r3, [r7, #7]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d008      	beq.n	8014ac8 <iniciarDriverADC+0x84>
 8014ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aba:	f083 0301 	eor.w	r3, r3, #1
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <iniciarDriverADC+0x84>
	    return true;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	e113      	b.n	8014cf0 <iniciarDriverADC+0x2ac>

    uint8_t canalesConfigurados = 0;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014ace:	2300      	movs	r3, #0
 8014ad0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014ad4:	e021      	b.n	8014b1a <iniciarDriverADC+0xd6>
        if (driver->hal.canalesHabilitados[i] == false)
 8014ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ada:	69fa      	ldr	r2, [r7, #28]
 8014adc:	4413      	add	r3, r2
 8014ade:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8014ae2:	f083 0301 	eor.w	r3, r3, #1
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d110      	bne.n	8014b0e <iniciarDriverADC+0xca>
            continue;

        canalesConfigurados++;
 8014aec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014af0:	3301      	adds	r3, #1
 8014af2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        configurarIO(driver->hal.pin[i].pin, CONFIG_IO(GPIO_MODE_ANALOG, 0, GPIO_NOPULL), 0);
 8014af6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014afa:	69fa      	ldr	r2, [r7, #28]
 8014afc:	005b      	lsls	r3, r3, #1
 8014afe:	4413      	add	r3, r2
 8014b00:	791b      	ldrb	r3, [r3, #4]
 8014b02:	2200      	movs	r2, #0
 8014b04:	2103      	movs	r1, #3
 8014b06:	4618      	mov	r0, r3
 8014b08:	f001 fc52 	bl	80163b0 <configurarIO>
 8014b0c:	e000      	b.n	8014b10 <iniciarDriverADC+0xcc>
            continue;
 8014b0e:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014b14:	3301      	adds	r3, #1
 8014b16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014b1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014b1e:	2b0f      	cmp	r3, #15
 8014b20:	d9d9      	bls.n	8014ad6 <iniciarDriverADC+0x92>
    }

    habilitarRelojADC(numADC);
 8014b22:	79fb      	ldrb	r3, [r7, #7]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f000 f8e9 	bl	8014cfc <habilitarRelojADC>
    configurarDriverADC(&driver->hal, canalesConfigurados);
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8014b32:	4611      	mov	r1, r2
 8014b34:	4618      	mov	r0, r3
 8014b36:	f000 f921 	bl	8014d7c <configurarDriverADC>

#ifdef USAR_ADC_INTERNO
    // Iniciar ADC para medir Vbat y la temperatura del core. Si el dispositivo no es el ADC1 hay que iniciarlo
    if (adcInternoIniciado == false) {
 8014b3a:	4b6f      	ldr	r3, [pc, #444]	; (8014cf8 <iniciarDriverADC+0x2b4>)
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	f083 0301 	eor.w	r3, r3, #1
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d02e      	beq.n	8014ba6 <iniciarDriverADC+0x162>
         if (numADC != ADC_INTERNO) {
 8014b48:	79fb      	ldrb	r3, [r7, #7]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d01e      	beq.n	8014b8c <iniciarDriverADC+0x148>
        	 adc_t *driverADCinterno = punteroADC(ADC_INTERNO);
 8014b4e:	2000      	movs	r0, #0
 8014b50:	f7ff fe10 	bl	8014774 <punteroADC>
 8014b54:	61b8      	str	r0, [r7, #24]

            if (configurarDriverADC(&driverADCinterno->hal, 0) == false)
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	3304      	adds	r3, #4
 8014b5a:	2100      	movs	r1, #0
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f000 f90d 	bl	8014d7c <configurarDriverADC>
 8014b62:	4603      	mov	r3, r0
 8014b64:	f083 0301 	eor.w	r3, r3, #1
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d001      	beq.n	8014b72 <iniciarDriverADC+0x12e>
                return false;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	e0be      	b.n	8014cf0 <iniciarDriverADC+0x2ac>
            if (iniciarInyectadoADCinterno(&driverADCinterno->hal) == false)
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	3304      	adds	r3, #4
 8014b76:	4618      	mov	r0, r3
 8014b78:	f000 f93c 	bl	8014df4 <iniciarInyectadoADCinterno>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	f083 0301 	eor.w	r3, r3, #1
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d00e      	beq.n	8014ba6 <iniciarDriverADC+0x162>
                return false;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e0b1      	b.n	8014cf0 <iniciarDriverADC+0x2ac>
         }
         else {
             if (iniciarInyectadoADCinterno(&driver->hal) == false)
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	3304      	adds	r3, #4
 8014b90:	4618      	mov	r0, r3
 8014b92:	f000 f92f 	bl	8014df4 <iniciarInyectadoADCinterno>
 8014b96:	4603      	mov	r3, r0
 8014b98:	f083 0301 	eor.w	r3, r3, #1
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d001      	beq.n	8014ba6 <iniciarDriverADC+0x162>
                return false;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	e0a4      	b.n	8014cf0 <iniciarDriverADC+0x2ac>
         }
    }
#endif

    if (!usarDriver)
 8014ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014baa:	f083 0301 	eor.w	r3, r3, #1
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d001      	beq.n	8014bb8 <iniciarDriverADC+0x174>
    	return true;
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	e09b      	b.n	8014cf0 <iniciarDriverADC+0x2ac>

    uint8_t rank = 1;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014bc4:	e02e      	b.n	8014c24 <iniciarDriverADC+0x1e0>
        if (!driver->hal.canalesHabilitados[i])
 8014bc6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014bca:	69fa      	ldr	r2, [r7, #28]
 8014bcc:	4413      	add	r3, r2
 8014bce:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8014bd2:	f083 0301 	eor.w	r3, r3, #1
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d11d      	bne.n	8014c18 <iniciarDriverADC+0x1d4>
            continue;

        ADC_ChannelConfTypeDef cConfig;

        cConfig.Channel = driver->hal.pin[i].canal;
 8014bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014be0:	69fa      	ldr	r2, [r7, #28]
 8014be2:	005b      	lsls	r3, r3, #1
 8014be4:	4413      	add	r3, r2
 8014be6:	795b      	ldrb	r3, [r3, #5]
 8014be8:	60bb      	str	r3, [r7, #8]
        cConfig.Rank = rank++;
 8014bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014bee:	1c5a      	adds	r2, r3, #1
 8014bf0:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 8014bf4:	60fb      	str	r3, [r7, #12]
        cConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8014bf6:	2307      	movs	r3, #7
 8014bf8:	613b      	str	r3, [r7, #16]
        cConfig.Offset = 0;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	617b      	str	r3, [r7, #20]

        if (HAL_ADC_ConfigChannel(&driver->hal.hadc, &cConfig) != HAL_OK)
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	3324      	adds	r3, #36	; 0x24
 8014c02:	f107 0208 	add.w	r2, r7, #8
 8014c06:	4611      	mov	r1, r2
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f014 fac1 	bl	8029190 <HAL_ADC_ConfigChannel>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d002      	beq.n	8014c1a <iniciarDriverADC+0x1d6>
            return false;
 8014c14:	2300      	movs	r3, #0
 8014c16:	e06b      	b.n	8014cf0 <iniciarDriverADC+0x2ac>
            continue;
 8014c18:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8014c1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014c1e:	3301      	adds	r3, #1
 8014c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014c28:	2b0f      	cmp	r3, #15
 8014c2a:	d9cc      	bls.n	8014bc6 <iniciarDriverADC+0x182>
    }

    iniciarDMA(identificadorDMA(driver->hal.hdma.Instance));
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c30:	4618      	mov	r0, r3
 8014c32:	f000 fec5 	bl	80159c0 <identificadorDMA>
 8014c36:	4603      	mov	r3, r0
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f000 feb1 	bl	80159a0 <iniciarDMA>

    driver->hal.hdma.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2200      	movs	r2, #0
 8014c42:	675a      	str	r2, [r3, #116]	; 0x74
    driver->hal.hdma.Init.PeriphInc = DMA_PINC_DISABLE;
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	2200      	movs	r2, #0
 8014c48:	679a      	str	r2, [r3, #120]	; 0x78
    driver->hal.hdma.Init.MemInc = canalesConfigurados > 1 ? DMA_MINC_ENABLE : DMA_MINC_DISABLE;
 8014c4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d902      	bls.n	8014c58 <iniciarDriverADC+0x214>
 8014c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c56:	e000      	b.n	8014c5a <iniciarDriverADC+0x216>
 8014c58:	2200      	movs	r2, #0
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	67da      	str	r2, [r3, #124]	; 0x7c
    driver->hal.hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    driver->hal.hdma.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    driver->hal.hdma.Init.Mode = DMA_CIRCULAR;
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    driver->hal.hdma.Init.Priority = DMA_PRIORITY_HIGH;
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    driver->hal.hdma.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    driver->hal.hdma.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	2203      	movs	r2, #3
 8014c92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    driver->hal.hdma.Init.MemBurst = DMA_MBURST_SINGLE;
 8014c96:	69fb      	ldr	r3, [r7, #28]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    driver->hal.hdma.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if (HAL_DMA_Init(&driver->hal.hdma) != HAL_OK)
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	336c      	adds	r3, #108	; 0x6c
 8014caa:	4618      	mov	r0, r3
 8014cac:	f015 f992 	bl	8029fd4 <HAL_DMA_Init>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <iniciarDriverADC+0x276>
        return false;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e01a      	b.n	8014cf0 <iniciarDriverADC+0x2ac>

    __HAL_LINKDMA(&driver->hal.hadc, DMA_Handle, driver->hal.hdma);
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8014cc0:	69fb      	ldr	r3, [r7, #28]
 8014cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    if (HAL_ADC_Start_DMA(&driver->hal.hadc, (uint32_t*)driver->valores, canalesConfigurados) != HAL_OK)
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	33dc      	adds	r3, #220	; 0xdc
 8014cda:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8014cde:	4619      	mov	r1, r3
 8014ce0:	f014 f94a 	bl	8028f78 <HAL_ADC_Start_DMA>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d001      	beq.n	8014cee <iniciarDriverADC+0x2aa>
        return false;
 8014cea:	2300      	movs	r3, #0
 8014cec:	e000      	b.n	8014cf0 <iniciarDriverADC+0x2ac>

    return true;
 8014cee:	2301      	movs	r3, #1
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3728      	adds	r7, #40	; 0x28
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	20003158 	.word	0x20003158

08014cfc <habilitarRelojADC>:
**  Descripcion:    Habilita el reloj del ADC
**  Parametros:     Driver
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojADC(numADC_e numADC)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b087      	sub	sp, #28
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	4603      	mov	r3, r0
 8014d04:	71fb      	strb	r3, [r7, #7]
    switch (numADC) {
 8014d06:	79fb      	ldrb	r3, [r7, #7]
 8014d08:	2b02      	cmp	r3, #2
 8014d0a:	d020      	beq.n	8014d4e <habilitarRelojADC+0x52>
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	dc2b      	bgt.n	8014d68 <habilitarRelojADC+0x6c>
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d002      	beq.n	8014d1a <habilitarRelojADC+0x1e>
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d00d      	beq.n	8014d34 <habilitarRelojADC+0x38>
        case ADC_3:
            __HAL_RCC_ADC3_CLK_ENABLE();
        	break;

        default:
            break;
 8014d18:	e026      	b.n	8014d68 <habilitarRelojADC+0x6c>
            __HAL_RCC_ADC1_CLK_ENABLE();
 8014d1a:	4b17      	ldr	r3, [pc, #92]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d1e:	4a16      	ldr	r2, [pc, #88]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d24:	6453      	str	r3, [r2, #68]	; 0x44
 8014d26:	4b14      	ldr	r3, [pc, #80]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d2e:	617b      	str	r3, [r7, #20]
 8014d30:	697b      	ldr	r3, [r7, #20]
        	break;
 8014d32:	e01a      	b.n	8014d6a <habilitarRelojADC+0x6e>
            __HAL_RCC_ADC2_CLK_ENABLE();
 8014d34:	4b10      	ldr	r3, [pc, #64]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d38:	4a0f      	ldr	r2, [pc, #60]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8014d40:	4b0d      	ldr	r3, [pc, #52]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d48:	613b      	str	r3, [r7, #16]
 8014d4a:	693b      	ldr	r3, [r7, #16]
        	break;
 8014d4c:	e00d      	b.n	8014d6a <habilitarRelojADC+0x6e>
            __HAL_RCC_ADC3_CLK_ENABLE();
 8014d4e:	4b0a      	ldr	r3, [pc, #40]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d52:	4a09      	ldr	r2, [pc, #36]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014d58:	6453      	str	r3, [r2, #68]	; 0x44
 8014d5a:	4b07      	ldr	r3, [pc, #28]	; (8014d78 <habilitarRelojADC+0x7c>)
 8014d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d62:	60fb      	str	r3, [r7, #12]
 8014d64:	68fb      	ldr	r3, [r7, #12]
        	break;
 8014d66:	e000      	b.n	8014d6a <habilitarRelojADC+0x6e>
            break;
 8014d68:	bf00      	nop
    }
}
 8014d6a:	bf00      	nop
 8014d6c:	371c      	adds	r7, #28
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop
 8014d78:	40023800 	.word	0x40023800

08014d7c <configurarDriverADC>:
**  Descripcion:    Configura el ADC
**  Parametros:     HAL del driver, numero de canales
**  Retorno:        True si ok
****************************************************************************************/
bool configurarDriverADC(halADC_t *halADC, uint8_t numCanales)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	460b      	mov	r3, r1
 8014d86:	70fb      	strb	r3, [r7, #3]
	halADC->hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8014d8e:	625a      	str	r2, [r3, #36]	; 0x24
	halADC->hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2200      	movs	r2, #0
 8014d94:	629a      	str	r2, [r3, #40]	; 0x28
	halADC->hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	62da      	str	r2, [r3, #44]	; 0x2c
	halADC->hadc.Init.ScanConvMode = ENABLE;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2201      	movs	r2, #1
 8014da0:	631a      	str	r2, [r3, #48]	; 0x30
	halADC->hadc.Init.EOCSelection = DISABLE;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	635a      	str	r2, [r3, #52]	; 0x34
	halADC->hadc.Init.ContinuousConvMode = ENABLE;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2201      	movs	r2, #1
 8014dac:	639a      	str	r2, [r3, #56]	; 0x38
	halADC->hadc.Init.NbrOfConversion = numCanales;
 8014dae:	78fa      	ldrb	r2, [r7, #3]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	63da      	str	r2, [r3, #60]	; 0x3c
	halADC->hadc.Init.DiscontinuousConvMode = DISABLE;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2200      	movs	r2, #0
 8014db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	halADC->hadc.Init.NbrOfDiscConversion = 0;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	645a      	str	r2, [r3, #68]	; 0x44
	halADC->hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	649a      	str	r2, [r3, #72]	; 0x48
	halADC->hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	64da      	str	r2, [r3, #76]	; 0x4c
	halADC->hadc.Init.DMAContinuousRequests = ENABLE;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if (HAL_ADC_Init(&halADC->hadc) != HAL_OK)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3320      	adds	r3, #32
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f014 f87e 	bl	8028edc <HAL_ADC_Init>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d001      	beq.n	8014dea <configurarDriverADC+0x6e>
        return false;
 8014de6:	2300      	movs	r3, #0
 8014de8:	e000      	b.n	8014dec <configurarDriverADC+0x70>

    return true;
 8014dea:	2301      	movs	r3, #1
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <iniciarInyectadoADCinterno>:
**  Descripcion:    Inicia el ADC interno
**  Parametros:     HAL
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarInyectadoADCinterno(halADC_t *halADC)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b08a      	sub	sp, #40	; 0x28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
    // 168MHz : fAPB2 = 84MHz, fADC = 10.5MHz, tcycle = 0.090us, 10us = 105cycle < 144cycle
    // 240MHz : fAPB2 = 120MHz, fADC = 15.0MHz, tcycle = 0.067usk 10us = 150cycle < 480cycle

    // 480cycles@15.0MHz = 32us

    iConfig.InjectedChannel = ADC_CHANNEL_VREFINT;
 8014dfc:	2311      	movs	r3, #17
 8014dfe:	60bb      	str	r3, [r7, #8]
    iConfig.InjectedRank = 1;
 8014e00:	2301      	movs	r3, #1
 8014e02:	60fb      	str	r3, [r7, #12]
    iConfig.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8014e04:	2307      	movs	r3, #7
 8014e06:	613b      	str	r3, [r7, #16]
    iConfig.InjectedOffset = 0;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	617b      	str	r3, [r7, #20]
    iConfig.InjectedNbrOfConversion = 2;
 8014e0c:	2302      	movs	r3, #2
 8014e0e:	61bb      	str	r3, [r7, #24]
    iConfig.InjectedDiscontinuousConvMode = DISABLE;
 8014e10:	2300      	movs	r3, #0
 8014e12:	773b      	strb	r3, [r7, #28]
    iConfig.AutoInjectedConv = DISABLE;
 8014e14:	2300      	movs	r3, #0
 8014e16:	777b      	strb	r3, [r7, #29]
    iConfig.ExternalTrigInjecConv = 0;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	623b      	str	r3, [r7, #32]
    iConfig.ExternalTrigInjecConvEdge = 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_ADCEx_InjectedConfigChannel(&halADC->hadc, &iConfig) != HAL_OK)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	3320      	adds	r3, #32
 8014e24:	f107 0208 	add.w	r2, r7, #8
 8014e28:	4611      	mov	r1, r2
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f014 fdc8 	bl	80299c0 <HAL_ADCEx_InjectedConfigChannel>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d12d      	bne.n	8014e92 <iniciarInyectadoADCinterno+0x9e>
    	goto error;

    iConfig.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8014e36:	4b1c      	ldr	r3, [pc, #112]	; (8014ea8 <iniciarInyectadoADCinterno+0xb4>)
 8014e38:	60bb      	str	r3, [r7, #8]
    iConfig.InjectedRank = 2;
 8014e3a:	2302      	movs	r3, #2
 8014e3c:	60fb      	str	r3, [r7, #12]

    if (HAL_ADCEx_InjectedConfigChannel(&halADC->hadc, &iConfig) != HAL_OK)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	3320      	adds	r3, #32
 8014e42:	f107 0208 	add.w	r2, r7, #8
 8014e46:	4611      	mov	r1, r2
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f014 fdb9 	bl	80299c0 <HAL_ADCEx_InjectedConfigChannel>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d120      	bne.n	8014e96 <iniciarInyectadoADCinterno+0xa2>
        goto error;

    // Valores de calibracion
    calADCinterno.vrefCalADC = *(uint16_t *)VREFINT_CAL_ADDR;
 8014e54:	4b15      	ldr	r3, [pc, #84]	; (8014eac <iniciarInyectadoADCinterno+0xb8>)
 8014e56:	881a      	ldrh	r2, [r3, #0]
 8014e58:	4b15      	ldr	r3, [pc, #84]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e5a:	80da      	strh	r2, [r3, #6]
    calADCinterno.tempCal1ADC = *TEMPSENSOR_CAL1_ADDR;
 8014e5c:	4b15      	ldr	r3, [pc, #84]	; (8014eb4 <iniciarInyectadoADCinterno+0xc0>)
 8014e5e:	881a      	ldrh	r2, [r3, #0]
 8014e60:	4b13      	ldr	r3, [pc, #76]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e62:	801a      	strh	r2, [r3, #0]
    calADCinterno.tempCal2ADC = *TEMPSENSOR_CAL2_ADDR;
 8014e64:	4b14      	ldr	r3, [pc, #80]	; (8014eb8 <iniciarInyectadoADCinterno+0xc4>)
 8014e66:	881a      	ldrh	r2, [r3, #0]
 8014e68:	4b11      	ldr	r3, [pc, #68]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e6a:	805a      	strh	r2, [r3, #2]
    calADCinterno.pendTempADC = (TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) * 1000 / (calADCinterno.tempCal2ADC - calADCinterno.tempCal1ADC);
 8014e6c:	4b10      	ldr	r3, [pc, #64]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e6e:	885b      	ldrh	r3, [r3, #2]
 8014e70:	461a      	mov	r2, r3
 8014e72:	4b0f      	ldr	r3, [pc, #60]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	4a10      	ldr	r2, [pc, #64]	; (8014ebc <iniciarInyectadoADCinterno+0xc8>)
 8014e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014e7e:	b21a      	sxth	r2, r3
 8014e80:	4b0b      	ldr	r3, [pc, #44]	; (8014eb0 <iniciarInyectadoADCinterno+0xbc>)
 8014e82:	809a      	strh	r2, [r3, #4]

    adcInternoIniciado = true;
 8014e84:	4b0e      	ldr	r3, [pc, #56]	; (8014ec0 <iniciarInyectadoADCinterno+0xcc>)
 8014e86:	2201      	movs	r2, #1
 8014e88:	701a      	strb	r2, [r3, #0]

	iniciarConversionADCinterno();
 8014e8a:	f000 f83d 	bl	8014f08 <iniciarConversionADCinterno>
    return true;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e006      	b.n	8014ea0 <iniciarInyectadoADCinterno+0xac>
    	goto error;
 8014e92:	bf00      	nop
 8014e94:	e000      	b.n	8014e98 <iniciarInyectadoADCinterno+0xa4>
        goto error;
 8014e96:	bf00      	nop

  error:
#ifdef DEBUG
    printf("Fallo en la inicializacion del ADC interno\n");
 8014e98:	480a      	ldr	r0, [pc, #40]	; (8014ec4 <iniciarInyectadoADCinterno+0xd0>)
 8014e9a:	f020 ffb1 	bl	8035e00 <puts>
#endif
    return false;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3728      	adds	r7, #40	; 0x28
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	10000012 	.word	0x10000012
 8014eac:	1ff0f44a 	.word	0x1ff0f44a
 8014eb0:	2000315c 	.word	0x2000315c
 8014eb4:	1ff0f44c 	.word	0x1ff0f44c
 8014eb8:	1ff0f44e 	.word	0x1ff0f44e
 8014ebc:	00013880 	.word	0x00013880
 8014ec0:	20003158 	.word	0x20003158
 8014ec4:	0803a4ac 	.word	0x0803a4ac

08014ec8 <adcIternoOcupado>:
**  Descripcion:    Comprueba si el ADC interno esta ocupado
**  Parametros:     Ninguno
**  Retorno:        True si esta ocupado
****************************************************************************************/
bool adcIternoOcupado(void)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	af00      	add	r7, sp, #0
    adc_t *driver = punteroADC(ADC_INTERNO);
 8014ece:	2000      	movs	r0, #0
 8014ed0:	f7ff fc50 	bl	8014774 <punteroADC>
 8014ed4:	6078      	str	r0, [r7, #4]

    if (conversionEnProgresoADCinterno) {
 8014ed6:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <adcIternoOcupado+0x3c>)
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d00b      	beq.n	8014ef6 <adcIternoOcupado+0x2e>
        if (HAL_ADCEx_InjectedPollForConversion(&driver->hal.hadc, 0) == HAL_OK)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	3324      	adds	r3, #36	; 0x24
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f014 fcbf 	bl	8029868 <HAL_ADCEx_InjectedPollForConversion>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d102      	bne.n	8014ef6 <adcIternoOcupado+0x2e>
        	conversionEnProgresoADCinterno = false;
 8014ef0:	4b04      	ldr	r3, [pc, #16]	; (8014f04 <adcIternoOcupado+0x3c>)
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	701a      	strb	r2, [r3, #0]
    }

    return conversionEnProgresoADCinterno;
 8014ef6:	4b03      	ldr	r3, [pc, #12]	; (8014f04 <adcIternoOcupado+0x3c>)
 8014ef8:	781b      	ldrb	r3, [r3, #0]
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	20003159 	.word	0x20003159

08014f08 <iniciarConversionADCinterno>:
**  Descripcion:    Inicia el ADC interno
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarConversionADCinterno(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
    adc_t *driver = punteroADC(ADC_INTERNO);
 8014f0e:	2000      	movs	r0, #0
 8014f10:	f7ff fc30 	bl	8014774 <punteroADC>
 8014f14:	6078      	str	r0, [r7, #4]

    HAL_ADCEx_InjectedStart(&driver->hal.hadc);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	3324      	adds	r3, #36	; 0x24
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f014 fbe8 	bl	80296f0 <HAL_ADCEx_InjectedStart>
    conversionEnProgresoADCinterno = true;
 8014f20:	4b03      	ldr	r3, [pc, #12]	; (8014f30 <iniciarConversionADCinterno+0x28>)
 8014f22:	2201      	movs	r2, #1
 8014f24:	701a      	strb	r2, [r3, #0]
}
 8014f26:	bf00      	nop
 8014f28:	3708      	adds	r7, #8
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	20003159 	.word	0x20003159

08014f34 <leerVrefADCinterno>:
**  Descripcion:    Lee Vref
**  Parametros:     Ninguno
**  Retorno:        Vref
****************************************************************************************/
uint16_t leerVrefADCinterno(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
    adc_t *driver = punteroADC(ADC_INTERNO);
 8014f3a:	2000      	movs	r0, #0
 8014f3c:	f7ff fc1a 	bl	8014774 <punteroADC>
 8014f40:	6078      	str	r0, [r7, #4]
    return HAL_ADCEx_InjectedGetValue(&driver->hal.hadc, ADC_INJECTED_RANK_1);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	3324      	adds	r3, #36	; 0x24
 8014f46:	2101      	movs	r1, #1
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f014 fd01 	bl	8029950 <HAL_ADCEx_InjectedGetValue>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	b29b      	uxth	r3, r3
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <leerTempADCinterno>:
**  Descripcion:    Lee la temperatura del micro
**  Parametros:     Ninguno
**  Retorno:        Temperatura
****************************************************************************************/
uint16_t leerTempADCinterno(void)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b082      	sub	sp, #8
 8014f5e:	af00      	add	r7, sp, #0
    adc_t *driver = punteroADC(ADC_INTERNO);
 8014f60:	2000      	movs	r0, #0
 8014f62:	f7ff fc07 	bl	8014774 <punteroADC>
 8014f66:	6078      	str	r0, [r7, #4]
    return HAL_ADCEx_InjectedGetValue(&driver->hal.hadc, ADC_INJECTED_RANK_2);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	3324      	adds	r3, #36	; 0x24
 8014f6c:	2102      	movs	r1, #2
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f014 fcee 	bl	8029950 <HAL_ADCEx_InjectedGetValue>
 8014f74:	4603      	mov	r3, r0
 8014f76:	b29b      	uxth	r3, r3
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <leerADCinterno>:
**  Descripcion:    Actualiza el filtro de media movil y manda una nueva conversion del ADC
**  Parametros:     Puntero a la tension de referencia, puntero a la temperatura del core
**  Retorno:        Ninguno
****************************************************************************************/
void leerADCinterno(uint16_t *vRef, int16_t *tCore)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
    if (adcIternoOcupado())
 8014f8a:	f7ff ff9d 	bl	8014ec8 <adcIternoOcupado>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d142      	bne.n	801501a <leerADCinterno+0x9a>
        return;

    uint16_t adcVref = leerVrefADCinterno();
 8014f94:	f7ff ffce 	bl	8014f34 <leerVrefADCinterno>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	827b      	strh	r3, [r7, #18]
    uint16_t adcTemp = leerTempADCinterno();
 8014f9c:	f7ff ffdd 	bl	8014f5a <leerTempADCinterno>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	823b      	strh	r3, [r7, #16]

    uint16_t v;
    int16_t t;
    if (adcVref != 0 && adcTemp != 0) {
 8014fa4:	8a7b      	ldrh	r3, [r7, #18]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d02a      	beq.n	8015000 <leerADCinterno+0x80>
 8014faa:	8a3b      	ldrh	r3, [r7, #16]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d027      	beq.n	8015000 <leerADCinterno+0x80>
        v = 3300 * adcVref / calADCinterno.vrefCalADC;
 8014fb0:	8a7b      	ldrh	r3, [r7, #18]
 8014fb2:	f640 42e4 	movw	r2, #3300	; 0xce4
 8014fb6:	fb02 f303 	mul.w	r3, r2, r3
 8014fba:	4a1a      	ldr	r2, [pc, #104]	; (8015024 <leerADCinterno+0xa4>)
 8014fbc:	88d2      	ldrh	r2, [r2, #6]
 8014fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8014fc2:	82fb      	strh	r3, [r7, #22]
        int16_t adcTempAjustado = (int32_t)adcTemp * 3300 / v;
 8014fc4:	8a3b      	ldrh	r3, [r7, #16]
 8014fc6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8014fca:	fb03 f202 	mul.w	r2, r3, r2
 8014fce:	8afb      	ldrh	r3, [r7, #22]
 8014fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fd4:	81fb      	strh	r3, [r7, #14]
        t = ((adcTempAjustado - calADCinterno.tempCal1ADC) * calADCinterno.pendTempADC + 30 * 1000 + 500) / 1000;
 8014fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014fda:	4a12      	ldr	r2, [pc, #72]	; (8015024 <leerADCinterno+0xa4>)
 8014fdc:	8812      	ldrh	r2, [r2, #0]
 8014fde:	1a9b      	subs	r3, r3, r2
 8014fe0:	4a10      	ldr	r2, [pc, #64]	; (8015024 <leerADCinterno+0xa4>)
 8014fe2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8014fe6:	fb03 f202 	mul.w	r2, r3, r2
 8014fea:	f247 7324 	movw	r3, #30500	; 0x7724
 8014fee:	4413      	add	r3, r2
 8014ff0:	4a0d      	ldr	r2, [pc, #52]	; (8015028 <leerADCinterno+0xa8>)
 8014ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8014ff6:	1192      	asrs	r2, r2, #6
 8014ff8:	17db      	asrs	r3, r3, #31
 8014ffa:	1ad3      	subs	r3, r2, r3
 8014ffc:	82bb      	strh	r3, [r7, #20]
    if (adcVref != 0 && adcTemp != 0) {
 8014ffe:	e003      	b.n	8015008 <leerADCinterno+0x88>
    }
    else {
        v = 0;
 8015000:	2300      	movs	r3, #0
 8015002:	82fb      	strh	r3, [r7, #22]
        t = 0;
 8015004:	2300      	movs	r3, #0
 8015006:	82bb      	strh	r3, [r7, #20]
    }

    iniciarConversionADCinterno();
 8015008:	f7ff ff7e 	bl	8014f08 <iniciarConversionADCinterno>

    *vRef = v;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	8afa      	ldrh	r2, [r7, #22]
 8015010:	801a      	strh	r2, [r3, #0]
    *tCore = t;
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	8aba      	ldrh	r2, [r7, #20]
 8015016:	801a      	strh	r2, [r3, #0]
 8015018:	e000      	b.n	801501c <leerADCinterno+0x9c>
        return;
 801501a:	bf00      	nop
}
 801501c:	3718      	adds	r7, #24
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	2000315c 	.word	0x2000315c
 8015028:	10624dd3 	.word	0x10624dd3

0801502c <configADC>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configADC_t, NUM_MAX_ADC, configADC);
 801502c:	b480      	push	{r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	4613      	mov	r3, r2
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	4413      	add	r3, r2
 801503c:	009b      	lsls	r3, r3, #2
 801503e:	4a04      	ldr	r2, [pc, #16]	; (8015050 <configADC+0x24>)
 8015040:	4413      	add	r3, r2
 8015042:	4618      	mov	r0, r3
 8015044:	370c      	adds	r7, #12
 8015046:	46bd      	mov	sp, r7
 8015048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504c:	4770      	bx	lr
 801504e:	bf00      	nop
 8015050:	2000a3f0 	.word	0x2000a3f0

08015054 <asignarHALadc>:
**  Descripcion:    Asigna el HAL del ADC
**  Parametros:     Numero de ADC
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALadc(numADC_e numADC)
{
 8015054:	b590      	push	{r4, r7, lr}
 8015056:	b087      	sub	sp, #28
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	71fb      	strb	r3, [r7, #7]
    adc_t *driver = punteroADC(numADC);
 801505e:	79fb      	ldrb	r3, [r7, #7]
 8015060:	4618      	mov	r0, r3
 8015062:	f7ff fb87 	bl	8014774 <punteroADC>
 8015066:	6138      	str	r0, [r7, #16]
    bool activo = false;
 8015068:	2300      	movs	r3, #0
 801506a:	75fb      	strb	r3, [r7, #23]
    uint8_t numCanalesADC = 0;
 801506c:	2300      	movs	r3, #0
 801506e:	75bb      	strb	r3, [r7, #22]

    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8015070:	2300      	movs	r3, #0
 8015072:	757b      	strb	r3, [r7, #21]
 8015074:	e05c      	b.n	8015130 <asignarHALadc+0xdc>
        if (!verificarPinADC(numADC, configADC(numADC)->pin[i]))
 8015076:	79fb      	ldrb	r3, [r7, #7]
 8015078:	4618      	mov	r0, r3
 801507a:	f7ff ffd7 	bl	801502c <configADC>
 801507e:	4602      	mov	r2, r0
 8015080:	7d7b      	ldrb	r3, [r7, #21]
 8015082:	5cd2      	ldrb	r2, [r2, r3]
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	4611      	mov	r1, r2
 8015088:	4618      	mov	r0, r3
 801508a:	f000 f893 	bl	80151b4 <verificarPinADC>
 801508e:	4603      	mov	r3, r0
 8015090:	f083 0301 	eor.w	r3, r3, #1
 8015094:	b2db      	uxtb	r3, r3
 8015096:	2b00      	cmp	r3, #0
 8015098:	d146      	bne.n	8015128 <asignarHALadc+0xd4>
            continue;

        driver->hal.pin[i].pin = configADC(numADC)->pin[i];
 801509a:	79fb      	ldrb	r3, [r7, #7]
 801509c:	4618      	mov	r0, r3
 801509e:	f7ff ffc5 	bl	801502c <configADC>
 80150a2:	4601      	mov	r1, r0
 80150a4:	7d7a      	ldrb	r2, [r7, #21]
 80150a6:	7d7b      	ldrb	r3, [r7, #21]
 80150a8:	5c89      	ldrb	r1, [r1, r2]
 80150aa:	693a      	ldr	r2, [r7, #16]
 80150ac:	005b      	lsls	r3, r3, #1
 80150ae:	4413      	add	r3, r2
 80150b0:	460a      	mov	r2, r1
 80150b2:	711a      	strb	r2, [r3, #4]
        driver->hal.pin[i].canal = canalADC(numADC, configADC(numADC)->pin[i]);
 80150b4:	79fb      	ldrb	r3, [r7, #7]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7ff ffb8 	bl	801502c <configADC>
 80150bc:	4602      	mov	r2, r0
 80150be:	7d7b      	ldrb	r3, [r7, #21]
 80150c0:	5cd2      	ldrb	r2, [r2, r3]
 80150c2:	7d7c      	ldrb	r4, [r7, #21]
 80150c4:	79fb      	ldrb	r3, [r7, #7]
 80150c6:	4611      	mov	r1, r2
 80150c8:	4618      	mov	r0, r3
 80150ca:	f000 f89d 	bl	8015208 <canalADC>
 80150ce:	4603      	mov	r3, r0
 80150d0:	4619      	mov	r1, r3
 80150d2:	693a      	ldr	r2, [r7, #16]
 80150d4:	0063      	lsls	r3, r4, #1
 80150d6:	4413      	add	r3, r2
 80150d8:	460a      	mov	r2, r1
 80150da:	715a      	strb	r2, [r3, #5]
        driver->hal.canalesHabilitados[i] = true;
 80150dc:	7d7b      	ldrb	r3, [r7, #21]
 80150de:	693a      	ldr	r2, [r7, #16]
 80150e0:	4413      	add	r3, r2
 80150e2:	2201      	movs	r2, #1
 80150e4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
        activo = true;
 80150e8:	2301      	movs	r3, #1
 80150ea:	75fb      	strb	r3, [r7, #23]

        puertoADC_t puerto;
        puerto.pinAsignado = true;
 80150ec:	2301      	movs	r3, #1
 80150ee:	733b      	strb	r3, [r7, #12]
        puerto.numADC = numADC;
 80150f0:	79fb      	ldrb	r3, [r7, #7]
 80150f2:	737b      	strb	r3, [r7, #13]
        puerto.canalADC = numCanalesADC;
 80150f4:	7dbb      	ldrb	r3, [r7, #22]
 80150f6:	73bb      	strb	r3, [r7, #14]

        uint8_t numPuerto = posicionPuertoADC(configADC(numADC)->pin[i]);
 80150f8:	79fb      	ldrb	r3, [r7, #7]
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7ff ff96 	bl	801502c <configADC>
 8015100:	4602      	mov	r2, r0
 8015102:	7d7b      	ldrb	r3, [r7, #21]
 8015104:	5cd3      	ldrb	r3, [r2, r3]
 8015106:	4618      	mov	r0, r3
 8015108:	f000 f90a 	bl	8015320 <posicionPuertoADC>
 801510c:	4603      	mov	r3, r0
 801510e:	73fb      	strb	r3, [r7, #15]
        if (numPuerto != PUERTO_ADC_NO_ENCONTRADO)
 8015110:	7bfb      	ldrb	r3, [r7, #15]
 8015112:	2bff      	cmp	r3, #255	; 0xff
 8015114:	d004      	beq.n	8015120 <asignarHALadc+0xcc>
        	asignarPuertoADC(numPuerto, puerto);
 8015116:	7bfb      	ldrb	r3, [r7, #15]
 8015118:	68f9      	ldr	r1, [r7, #12]
 801511a:	4618      	mov	r0, r3
 801511c:	f7ff fbcc 	bl	80148b8 <asignarPuertoADC>

        numCanalesADC++;
 8015120:	7dbb      	ldrb	r3, [r7, #22]
 8015122:	3301      	adds	r3, #1
 8015124:	75bb      	strb	r3, [r7, #22]
 8015126:	e000      	b.n	801512a <asignarHALadc+0xd6>
            continue;
 8015128:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 801512a:	7d7b      	ldrb	r3, [r7, #21]
 801512c:	3301      	adds	r3, #1
 801512e:	757b      	strb	r3, [r7, #21]
 8015130:	7d7b      	ldrb	r3, [r7, #21]
 8015132:	2b0f      	cmp	r3, #15
 8015134:	d99f      	bls.n	8015076 <asignarHALadc+0x22>
    }

    if (activo) {
 8015136:	7dfb      	ldrb	r3, [r7, #23]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d033      	beq.n	80151a4 <asignarHALadc+0x150>
        driver->hal.hadc.Instance = hardwareADC[numADC].reg;
 801513c:	79fa      	ldrb	r2, [r7, #7]
 801513e:	491c      	ldr	r1, [pc, #112]	; (80151b0 <asignarHALadc+0x15c>)
 8015140:	4613      	mov	r3, r2
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	1a9b      	subs	r3, r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	3304      	adds	r3, #4
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	625a      	str	r2, [r3, #36]	; 0x24

        if (!comprobarStreamDMAadc(numADC, configADC(numADC)->dma))
 8015152:	79fb      	ldrb	r3, [r7, #7]
 8015154:	4618      	mov	r0, r3
 8015156:	f7ff ff69 	bl	801502c <configADC>
 801515a:	4603      	mov	r3, r0
 801515c:	691a      	ldr	r2, [r3, #16]
 801515e:	79fb      	ldrb	r3, [r7, #7]
 8015160:	4611      	mov	r1, r2
 8015162:	4618      	mov	r0, r3
 8015164:	f000 f882 	bl	801526c <comprobarStreamDMAadc>
 8015168:	4603      	mov	r3, r0
 801516a:	f083 0301 	eor.w	r3, r3, #1
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <asignarHALadc+0x124>
            return false;
 8015174:	2300      	movs	r3, #0
 8015176:	e016      	b.n	80151a6 <asignarHALadc+0x152>

        driver->hal.hdma.Instance = configADC(numADC)->dma;
 8015178:	79fb      	ldrb	r3, [r7, #7]
 801517a:	4618      	mov	r0, r3
 801517c:	f7ff ff56 	bl	801502c <configADC>
 8015180:	4603      	mov	r3, r0
 8015182:	691a      	ldr	r2, [r3, #16]
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	66da      	str	r2, [r3, #108]	; 0x6c
        driver->hal.hdma.Init.Channel = canalStreamDMAadc(numADC, configADC(numADC)->dma);
 8015188:	79fb      	ldrb	r3, [r7, #7]
 801518a:	4618      	mov	r0, r3
 801518c:	f7ff ff4e 	bl	801502c <configADC>
 8015190:	4603      	mov	r3, r0
 8015192:	691a      	ldr	r2, [r3, #16]
 8015194:	79fb      	ldrb	r3, [r7, #7]
 8015196:	4611      	mov	r1, r2
 8015198:	4618      	mov	r0, r3
 801519a:	f000 f891 	bl	80152c0 <canalStreamDMAadc>
 801519e:	4602      	mov	r2, r0
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    return true;
 80151a4:	2301      	movs	r3, #1
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	371c      	adds	r7, #28
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd90      	pop	{r4, r7, pc}
 80151ae:	bf00      	nop
 80151b0:	0803ad60 	.word	0x0803ad60

080151b4 <verificarPinADC>:
**  Descripcion:    Verifica que el tag tiene conexion con el driver correcto
**  Parametros:     Numero de driver, pin a verificar
**  Retorno:        True si ok
****************************************************************************************/
bool verificarPinADC(numADC_e numADC, uint8_t pin)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b085      	sub	sp, #20
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4603      	mov	r3, r0
 80151bc:	460a      	mov	r2, r1
 80151be:	71fb      	strb	r3, [r7, #7]
 80151c0:	4613      	mov	r3, r2
 80151c2:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 80151c4:	2300      	movs	r3, #0
 80151c6:	73fb      	strb	r3, [r7, #15]
 80151c8:	e012      	b.n	80151f0 <verificarPinADC+0x3c>
        if (hardwareADC[numADC].pin[i].pin == pin)
 80151ca:	79fa      	ldrb	r2, [r7, #7]
 80151cc:	7bf9      	ldrb	r1, [r7, #15]
 80151ce:	480d      	ldr	r0, [pc, #52]	; (8015204 <verificarPinADC+0x50>)
 80151d0:	4613      	mov	r3, r2
 80151d2:	00db      	lsls	r3, r3, #3
 80151d4:	1a9b      	subs	r3, r3, r2
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	440b      	add	r3, r1
 80151da:	3304      	adds	r3, #4
 80151dc:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80151e0:	79ba      	ldrb	r2, [r7, #6]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d101      	bne.n	80151ea <verificarPinADC+0x36>
            return true;
 80151e6:	2301      	movs	r3, #1
 80151e8:	e006      	b.n	80151f8 <verificarPinADC+0x44>
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 80151ea:	7bfb      	ldrb	r3, [r7, #15]
 80151ec:	3301      	adds	r3, #1
 80151ee:	73fb      	strb	r3, [r7, #15]
 80151f0:	7bfb      	ldrb	r3, [r7, #15]
 80151f2:	2b0f      	cmp	r3, #15
 80151f4:	d9e9      	bls.n	80151ca <verificarPinADC+0x16>
    }

    return false;
 80151f6:	2300      	movs	r3, #0
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3714      	adds	r7, #20
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	0803ad60 	.word	0x0803ad60

08015208 <canalADC>:
**  Descripcion:    Retorna el canal dado un tag
**  Parametros:     Numero de driver, Tag
**  Retorno:        Canal
****************************************************************************************/
uint8_t canalADC(numADC_e numADC, uint8_t pin)
{
 8015208:	b480      	push	{r7}
 801520a:	b085      	sub	sp, #20
 801520c:	af00      	add	r7, sp, #0
 801520e:	4603      	mov	r3, r0
 8015210:	460a      	mov	r2, r1
 8015212:	71fb      	strb	r3, [r7, #7]
 8015214:	4613      	mov	r3, r2
 8015216:	71bb      	strb	r3, [r7, #6]
    const hardwareADC_t *hw = &hardwareADC[numADC];
 8015218:	79fa      	ldrb	r2, [r7, #7]
 801521a:	4613      	mov	r3, r2
 801521c:	00db      	lsls	r3, r3, #3
 801521e:	1a9b      	subs	r3, r3, r2
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	4a11      	ldr	r2, [pc, #68]	; (8015268 <canalADC+0x60>)
 8015224:	4413      	add	r3, r2
 8015226:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 8015228:	2300      	movs	r3, #0
 801522a:	73fb      	strb	r3, [r7, #15]
 801522c:	e011      	b.n	8015252 <canalADC+0x4a>
        if (pin == hw->pin[i].pin)
 801522e:	7bfa      	ldrb	r2, [r7, #15]
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	3204      	adds	r2, #4
 8015234:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8015238:	79ba      	ldrb	r2, [r7, #6]
 801523a:	429a      	cmp	r2, r3
 801523c:	d106      	bne.n	801524c <canalADC+0x44>
            return hw->pin[i].canal;
 801523e:	7bfb      	ldrb	r3, [r7, #15]
 8015240:	68ba      	ldr	r2, [r7, #8]
 8015242:	3304      	adds	r3, #4
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	785b      	ldrb	r3, [r3, #1]
 801524a:	e006      	b.n	801525a <canalADC+0x52>
    for (uint8_t i = 0; i < NUM_CANALES_ADC; i++) {
 801524c:	7bfb      	ldrb	r3, [r7, #15]
 801524e:	3301      	adds	r3, #1
 8015250:	73fb      	strb	r3, [r7, #15]
 8015252:	7bfb      	ldrb	r3, [r7, #15]
 8015254:	2b0f      	cmp	r3, #15
 8015256:	d9ea      	bls.n	801522e <canalADC+0x26>
    }

    return 0;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3714      	adds	r7, #20
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
 8015266:	bf00      	nop
 8015268:	0803ad60 	.word	0x0803ad60

0801526c <comprobarStreamDMAadc>:
**  Descripcion:    Comprueba si el DMA asignado es correcto
**  Parametros:     Numero de driver, DMA configurado
**  Retorno:        True si ok
****************************************************************************************/
bool comprobarStreamDMAadc(numADC_e numADC, DMA_Stream_TypeDef *DMAy_Streamx)
{
 801526c:	b480      	push	{r7}
 801526e:	b085      	sub	sp, #20
 8015270:	af00      	add	r7, sp, #0
 8015272:	4603      	mov	r3, r0
 8015274:	6039      	str	r1, [r7, #0]
 8015276:	71fb      	strb	r3, [r7, #7]
    const hardwareADC_t *hw = &hardwareADC[numADC];
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	4613      	mov	r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	1a9b      	subs	r3, r3, r2
 8015280:	00db      	lsls	r3, r3, #3
 8015282:	4a0e      	ldr	r2, [pc, #56]	; (80152bc <comprobarStreamDMAadc+0x50>)
 8015284:	4413      	add	r3, r2
 8015286:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_STREAMS_DMA_ADC; i++) {
 8015288:	2300      	movs	r3, #0
 801528a:	73fb      	strb	r3, [r7, #15]
 801528c:	e00c      	b.n	80152a8 <comprobarStreamDMAadc+0x3c>
        if (hw->dma[i].DMAy_Streamx == DMAy_Streamx)
 801528e:	7bfa      	ldrb	r2, [r7, #15]
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	3205      	adds	r2, #5
 8015294:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	429a      	cmp	r2, r3
 801529c:	d101      	bne.n	80152a2 <comprobarStreamDMAadc+0x36>
            return true;
 801529e:	2301      	movs	r3, #1
 80152a0:	e006      	b.n	80152b0 <comprobarStreamDMAadc+0x44>
    for (uint8_t i = 0; i < NUM_STREAMS_DMA_ADC; i++) {
 80152a2:	7bfb      	ldrb	r3, [r7, #15]
 80152a4:	3301      	adds	r3, #1
 80152a6:	73fb      	strb	r3, [r7, #15]
 80152a8:	7bfb      	ldrb	r3, [r7, #15]
 80152aa:	2b01      	cmp	r3, #1
 80152ac:	d9ef      	bls.n	801528e <comprobarStreamDMAadc+0x22>
    }

    return false;
 80152ae:	2300      	movs	r3, #0
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3714      	adds	r7, #20
 80152b4:	46bd      	mov	sp, r7
 80152b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ba:	4770      	bx	lr
 80152bc:	0803ad60 	.word	0x0803ad60

080152c0 <canalStreamDMAadc>:
**  Descripcion:    Comprueba si el DMA asignado es correcto
**  Parametros:     Numero del driver, DMA configurado
**  Retorno:        Canal del DMA
****************************************************************************************/
uint32_t canalStreamDMAadc(numADC_e numADC, DMA_Stream_TypeDef *DMAy_Streamx)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b085      	sub	sp, #20
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	4603      	mov	r3, r0
 80152c8:	6039      	str	r1, [r7, #0]
 80152ca:	71fb      	strb	r3, [r7, #7]
    const hardwareADC_t *hw = &hardwareADC[numADC];
 80152cc:	79fa      	ldrb	r2, [r7, #7]
 80152ce:	4613      	mov	r3, r2
 80152d0:	00db      	lsls	r3, r3, #3
 80152d2:	1a9b      	subs	r3, r3, r2
 80152d4:	00db      	lsls	r3, r3, #3
 80152d6:	4a11      	ldr	r2, [pc, #68]	; (801531c <canalStreamDMAadc+0x5c>)
 80152d8:	4413      	add	r3, r2
 80152da:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_STREAMS_DMA_ADC; i++) {
 80152dc:	2300      	movs	r3, #0
 80152de:	73fb      	strb	r3, [r7, #15]
 80152e0:	e011      	b.n	8015306 <canalStreamDMAadc+0x46>
        if (hw->dma[i].DMAy_Streamx == DMAy_Streamx)
 80152e2:	7bfa      	ldrb	r2, [r7, #15]
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	3205      	adds	r2, #5
 80152e8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80152ec:	683a      	ldr	r2, [r7, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d106      	bne.n	8015300 <canalStreamDMAadc+0x40>
            return hw->dma[i].canal;
 80152f2:	7bfb      	ldrb	r3, [r7, #15]
 80152f4:	68ba      	ldr	r2, [r7, #8]
 80152f6:	3305      	adds	r3, #5
 80152f8:	00db      	lsls	r3, r3, #3
 80152fa:	4413      	add	r3, r2
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	e006      	b.n	801530e <canalStreamDMAadc+0x4e>
    for (uint8_t i = 0; i < NUM_STREAMS_DMA_ADC; i++) {
 8015300:	7bfb      	ldrb	r3, [r7, #15]
 8015302:	3301      	adds	r3, #1
 8015304:	73fb      	strb	r3, [r7, #15]
 8015306:	7bfb      	ldrb	r3, [r7, #15]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d9ea      	bls.n	80152e2 <canalStreamDMAadc+0x22>
    }

    return 0;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3714      	adds	r7, #20
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	0803ad60 	.word	0x0803ad60

08015320 <posicionPuertoADC>:
**  Descripcion:    Devuelve la posicion del puerto que tiene que ocupar un pin dado
**  Parametros:     Pin a comprobar
**  Retorno:        Posicion del puerto
****************************************************************************************/
uint8_t posicionPuertoADC(uint8_t pin)
{
 8015320:	b480      	push	{r7}
 8015322:	b085      	sub	sp, #20
 8015324:	af00      	add	r7, sp, #0
 8015326:	4603      	mov	r3, r0
 8015328:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_MAX_PUERTOS_ADC; i++) {
 801532a:	2300      	movs	r3, #0
 801532c:	73fb      	strb	r3, [r7, #15]
 801532e:	e00a      	b.n	8015346 <posicionPuertoADC+0x26>
        if (puertosHWadc[i] == pin)
 8015330:	7bfb      	ldrb	r3, [r7, #15]
 8015332:	4a0a      	ldr	r2, [pc, #40]	; (801535c <posicionPuertoADC+0x3c>)
 8015334:	5cd3      	ldrb	r3, [r2, r3]
 8015336:	79fa      	ldrb	r2, [r7, #7]
 8015338:	429a      	cmp	r2, r3
 801533a:	d101      	bne.n	8015340 <posicionPuertoADC+0x20>
            return i;
 801533c:	7bfb      	ldrb	r3, [r7, #15]
 801533e:	e006      	b.n	801534e <posicionPuertoADC+0x2e>
    for (uint8_t i = 0; i < NUM_MAX_PUERTOS_ADC; i++) {
 8015340:	7bfb      	ldrb	r3, [r7, #15]
 8015342:	3301      	adds	r3, #1
 8015344:	73fb      	strb	r3, [r7, #15]
 8015346:	7bfb      	ldrb	r3, [r7, #15]
 8015348:	2b0f      	cmp	r3, #15
 801534a:	d9f1      	bls.n	8015330 <posicionPuertoADC+0x10>
    }

    return PUERTO_ADC_NO_ENCONTRADO;
 801534c:	23ff      	movs	r3, #255	; 0xff
}
 801534e:	4618      	mov	r0, r3
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr
 801535a:	bf00      	nop
 801535c:	0803ae08 	.word	0x0803ae08

08015360 <busOcupado>:
**  Descripcion:    Comprueba si el bus esta ocupado
**  Parametros:     Bus
**  Retorno:        True si ocupado
****************************************************************************************/
CODIGO_RAPIDO bool busOcupado(const bus_t *bus)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
#if !defined(USAR_SPI) && !defined(USAR_I2C)
    UNUSED(bus);
    return false;
#else
    switch (bus->tipo) {
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f993 3000 	ldrsb.w	r3, [r3]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <busOcupado+0x20>
 8015372:	2b01      	cmp	r3, #1
 8015374:	d109      	bne.n	801538a <busOcupado+0x2a>
#ifdef USAR_SPI
    case BUS_SPI:
        return ocupadoBusSPI(bus);
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f001 ff30 	bl	80171dc <ocupadoBusSPI>
 801537c:	4603      	mov	r3, r0
 801537e:	e005      	b.n	801538c <busOcupado+0x2c>
#endif
#ifdef USAR_I2C
    case BUS_I2C:
        return ocupadoBusI2C(bus);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f000 fd75 	bl	8015e70 <ocupadoBusI2C>
 8015386:	4603      	mov	r3, r0
 8015388:	e000      	b.n	801538c <busOcupado+0x2c>
#endif
    default:
        return false;
 801538a:	2300      	movs	r3, #0
    }
#endif
}
 801538c:	4618      	mov	r0, r3
 801538e:	3708      	adds	r7, #8
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <escribirRegistroBus>:
**  Descripcion:    Escribe un dato en un registro
**  Parametros:     Bus, registro, dato a escribir
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool escribirRegistroBus(const bus_t *bus, uint8_t reg, uint8_t byteTx)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	460b      	mov	r3, r1
 801539e:	70fb      	strb	r3, [r7, #3]
 80153a0:	4613      	mov	r3, r2
 80153a2:	70bb      	strb	r3, [r7, #2]
#if !defined(USAR_SPI) && !defined(USAR_I2C)
    UNUSED(bus);
    UNUSED(reg);
    UNUSED(byteTx);
#else
    return escribirBufferRegistroBus(bus, reg, &byteTx, 1);
 80153a4:	1cba      	adds	r2, r7, #2
 80153a6:	78f9      	ldrb	r1, [r7, #3]
 80153a8:	2301      	movs	r3, #1
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f000 f805 	bl	80153ba <escribirBufferRegistroBus>
 80153b0:	4603      	mov	r3, r0
#endif
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3708      	adds	r7, #8
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <escribirBufferRegistroBus>:
**  Descripcion:    Escribe un buffer en un registro
**  Parametros:     Bus, registro, buffer a escribir, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool escribirBufferRegistroBus(const bus_t *bus, uint8_t reg, uint8_t *datoTx, uint8_t longitud)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b084      	sub	sp, #16
 80153be:	af00      	add	r7, sp, #0
 80153c0:	60f8      	str	r0, [r7, #12]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	461a      	mov	r2, r3
 80153c6:	460b      	mov	r3, r1
 80153c8:	72fb      	strb	r3, [r7, #11]
 80153ca:	4613      	mov	r3, r2
 80153cc:	72bb      	strb	r3, [r7, #10]
    UNUSED(bus);
    UNUSED(reg);
    UNUSED(datoTx);
    UNUSED(longitud);
#endif
    if (busOcupado(bus))
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	f7ff ffc6 	bl	8015360 <busOcupado>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d001      	beq.n	80153de <escribirBufferRegistroBus+0x24>
        return false;
 80153da:	2300      	movs	r3, #0
 80153dc:	e019      	b.n	8015412 <escribirBufferRegistroBus+0x58>

    switch (bus->tipo) {
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f993 3000 	ldrsb.w	r3, [r3]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00a      	beq.n	80153fe <escribirBufferRegistroBus+0x44>
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d111      	bne.n	8015410 <escribirBufferRegistroBus+0x56>
#ifdef USAR_SPI
        case BUS_SPI:
            return escribirBufferRegistroBusSPI(bus, reg, datoTx, longitud);
 80153ec:	7abb      	ldrb	r3, [r7, #10]
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	7af9      	ldrb	r1, [r7, #11]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f001 ff31 	bl	801725c <escribirBufferRegistroBusSPI>
 80153fa:	4603      	mov	r3, r0
 80153fc:	e009      	b.n	8015412 <escribirBufferRegistroBus+0x58>
            break;
#endif
#ifdef USAR_I2C
        case BUS_I2C:
            return escribirBufferRegistroBusI2C(bus, reg, datoTx, longitud);
 80153fe:	7abb      	ldrb	r3, [r7, #10]
 8015400:	b29b      	uxth	r3, r3
 8015402:	7af9      	ldrb	r1, [r7, #11]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	68f8      	ldr	r0, [r7, #12]
 8015408:	f000 fd41 	bl	8015e8e <escribirBufferRegistroBusI2C>
 801540c:	4603      	mov	r3, r0
 801540e:	e000      	b.n	8015412 <escribirBufferRegistroBus+0x58>
            break;
#endif
        default:
            return false;
 8015410:	2300      	movs	r3, #0
    }
}
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <leerRegistroBus>:
**  Descripcion:    Lee un dato de un registro
**  Parametros:     Bus, registro, dato leido
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool leerRegistroBus(const bus_t *bus, uint8_t reg, uint8_t *byteRx)
{
 801541a:	b580      	push	{r7, lr}
 801541c:	b084      	sub	sp, #16
 801541e:	af00      	add	r7, sp, #0
 8015420:	60f8      	str	r0, [r7, #12]
 8015422:	460b      	mov	r3, r1
 8015424:	607a      	str	r2, [r7, #4]
 8015426:	72fb      	strb	r3, [r7, #11]
#if !defined(USAR_SPI) && !defined(USAR_I2C)
    UNUSED(bus);
    UNUSED(reg);
#else
    return leerBufferRegistroBus(bus, reg, byteRx, 1);
 8015428:	7af9      	ldrb	r1, [r7, #11]
 801542a:	2301      	movs	r3, #1
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	f000 f805 	bl	801543e <leerBufferRegistroBus>
 8015434:	4603      	mov	r3, r0
#endif
}
 8015436:	4618      	mov	r0, r3
 8015438:	3710      	adds	r7, #16
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <leerBufferRegistroBus>:
**  Descripcion:    Lee un buffer de un registro
**  Parametros:     Bus, registro, buffer de recepcion, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool leerBufferRegistroBus(const bus_t *bus, uint8_t reg, uint8_t *datoRx, uint8_t longitud)
{
 801543e:	b580      	push	{r7, lr}
 8015440:	b084      	sub	sp, #16
 8015442:	af00      	add	r7, sp, #0
 8015444:	60f8      	str	r0, [r7, #12]
 8015446:	607a      	str	r2, [r7, #4]
 8015448:	461a      	mov	r2, r3
 801544a:	460b      	mov	r3, r1
 801544c:	72fb      	strb	r3, [r7, #11]
 801544e:	4613      	mov	r3, r2
 8015450:	72bb      	strb	r3, [r7, #10]
    UNUSED(reg);
    UNUSED(datoRx);
    UNUSED(longitud);
#endif

    if (busOcupado(bus))
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7ff ff84 	bl	8015360 <busOcupado>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d001      	beq.n	8015462 <leerBufferRegistroBus+0x24>
        return false;
 801545e:	2300      	movs	r3, #0
 8015460:	e019      	b.n	8015496 <leerBufferRegistroBus+0x58>

    switch (bus->tipo) {
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f993 3000 	ldrsb.w	r3, [r3]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00a      	beq.n	8015482 <leerBufferRegistroBus+0x44>
 801546c:	2b01      	cmp	r3, #1
 801546e:	d111      	bne.n	8015494 <leerBufferRegistroBus+0x56>
#ifdef USAR_SPI
        case BUS_SPI:
            return leerBufferRegistroBusSPI(bus, reg, datoRx, longitud);
 8015470:	7abb      	ldrb	r3, [r7, #10]
 8015472:	b29b      	uxth	r3, r3
 8015474:	7af9      	ldrb	r1, [r7, #11]
 8015476:	687a      	ldr	r2, [r7, #4]
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	f001 ff43 	bl	8017304 <leerBufferRegistroBusSPI>
 801547e:	4603      	mov	r3, r0
 8015480:	e009      	b.n	8015496 <leerBufferRegistroBus+0x58>
            break;
#endif
#ifdef USAR_I2C
        case BUS_I2C:
            return leerBufferRegistroBusI2C(bus, reg, datoRx, longitud);
 8015482:	7abb      	ldrb	r3, [r7, #10]
 8015484:	b29b      	uxth	r3, r3
 8015486:	7af9      	ldrb	r1, [r7, #11]
 8015488:	687a      	ldr	r2, [r7, #4]
 801548a:	68f8      	ldr	r0, [r7, #12]
 801548c:	f000 fd19 	bl	8015ec2 <leerBufferRegistroBusI2C>
 8015490:	4603      	mov	r3, r0
 8015492:	e000      	b.n	8015496 <leerBufferRegistroBus+0x58>
            break;
#endif
        default:
            return false;
 8015494:	2300      	movs	r3, #0
    }
}
 8015496:	4618      	mov	r0, r3
 8015498:	3710      	adds	r7, #16
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
	...

080154a0 <DMA1_Stream0_IRQHandler>:
    DEFINIR_CANAL_DMA(DMA2, 5, 38),
    DEFINIR_CANAL_DMA(DMA2, 6, 48),
    DEFINIR_CANAL_DMA(DMA2, 7, 54),
};

DEFINIR_IRQ_HANDLER_DMA(1, 0, DMA1_ST0_HANDLER)
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	2300      	movs	r3, #0
 80154a8:	71fb      	strb	r3, [r7, #7]
 80154aa:	79fa      	ldrb	r2, [r7, #7]
 80154ac:	490f      	ldr	r1, [pc, #60]	; (80154ec <DMA1_Stream0_IRQHandler+0x4c>)
 80154ae:	4613      	mov	r3, r2
 80154b0:	00db      	lsls	r3, r3, #3
 80154b2:	1a9b      	subs	r3, r3, r2
 80154b4:	009b      	lsls	r3, r3, #2
 80154b6:	440b      	add	r3, r1
 80154b8:	330c      	adds	r3, #12
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d011      	beq.n	80154e4 <DMA1_Stream0_IRQHandler+0x44>
 80154c0:	79fa      	ldrb	r2, [r7, #7]
 80154c2:	490a      	ldr	r1, [pc, #40]	; (80154ec <DMA1_Stream0_IRQHandler+0x4c>)
 80154c4:	4613      	mov	r3, r2
 80154c6:	00db      	lsls	r3, r3, #3
 80154c8:	1a9b      	subs	r3, r3, r2
 80154ca:	009b      	lsls	r3, r3, #2
 80154cc:	440b      	add	r3, r1
 80154ce:	330c      	adds	r3, #12
 80154d0:	6819      	ldr	r1, [r3, #0]
 80154d2:	79fa      	ldrb	r2, [r7, #7]
 80154d4:	4613      	mov	r3, r2
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	1a9b      	subs	r3, r3, r2
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	4a03      	ldr	r2, [pc, #12]	; (80154ec <DMA1_Stream0_IRQHandler+0x4c>)
 80154de:	4413      	add	r3, r2
 80154e0:	4618      	mov	r0, r3
 80154e2:	4788      	blx	r1
 80154e4:	bf00      	nop
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	20000010 	.word	0x20000010

080154f0 <DMA1_Stream1_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 1, DMA1_ST1_HANDLER)
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	2301      	movs	r3, #1
 80154f8:	71fb      	strb	r3, [r7, #7]
 80154fa:	79fa      	ldrb	r2, [r7, #7]
 80154fc:	490f      	ldr	r1, [pc, #60]	; (801553c <DMA1_Stream1_IRQHandler+0x4c>)
 80154fe:	4613      	mov	r3, r2
 8015500:	00db      	lsls	r3, r3, #3
 8015502:	1a9b      	subs	r3, r3, r2
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	440b      	add	r3, r1
 8015508:	330c      	adds	r3, #12
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d011      	beq.n	8015534 <DMA1_Stream1_IRQHandler+0x44>
 8015510:	79fa      	ldrb	r2, [r7, #7]
 8015512:	490a      	ldr	r1, [pc, #40]	; (801553c <DMA1_Stream1_IRQHandler+0x4c>)
 8015514:	4613      	mov	r3, r2
 8015516:	00db      	lsls	r3, r3, #3
 8015518:	1a9b      	subs	r3, r3, r2
 801551a:	009b      	lsls	r3, r3, #2
 801551c:	440b      	add	r3, r1
 801551e:	330c      	adds	r3, #12
 8015520:	6819      	ldr	r1, [r3, #0]
 8015522:	79fa      	ldrb	r2, [r7, #7]
 8015524:	4613      	mov	r3, r2
 8015526:	00db      	lsls	r3, r3, #3
 8015528:	1a9b      	subs	r3, r3, r2
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	4a03      	ldr	r2, [pc, #12]	; (801553c <DMA1_Stream1_IRQHandler+0x4c>)
 801552e:	4413      	add	r3, r2
 8015530:	4618      	mov	r0, r3
 8015532:	4788      	blx	r1
 8015534:	bf00      	nop
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	20000010 	.word	0x20000010

08015540 <DMA1_Stream2_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 2, DMA1_ST2_HANDLER)
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	2302      	movs	r3, #2
 8015548:	71fb      	strb	r3, [r7, #7]
 801554a:	79fa      	ldrb	r2, [r7, #7]
 801554c:	490f      	ldr	r1, [pc, #60]	; (801558c <DMA1_Stream2_IRQHandler+0x4c>)
 801554e:	4613      	mov	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	1a9b      	subs	r3, r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	440b      	add	r3, r1
 8015558:	330c      	adds	r3, #12
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d011      	beq.n	8015584 <DMA1_Stream2_IRQHandler+0x44>
 8015560:	79fa      	ldrb	r2, [r7, #7]
 8015562:	490a      	ldr	r1, [pc, #40]	; (801558c <DMA1_Stream2_IRQHandler+0x4c>)
 8015564:	4613      	mov	r3, r2
 8015566:	00db      	lsls	r3, r3, #3
 8015568:	1a9b      	subs	r3, r3, r2
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	440b      	add	r3, r1
 801556e:	330c      	adds	r3, #12
 8015570:	6819      	ldr	r1, [r3, #0]
 8015572:	79fa      	ldrb	r2, [r7, #7]
 8015574:	4613      	mov	r3, r2
 8015576:	00db      	lsls	r3, r3, #3
 8015578:	1a9b      	subs	r3, r3, r2
 801557a:	009b      	lsls	r3, r3, #2
 801557c:	4a03      	ldr	r2, [pc, #12]	; (801558c <DMA1_Stream2_IRQHandler+0x4c>)
 801557e:	4413      	add	r3, r2
 8015580:	4618      	mov	r0, r3
 8015582:	4788      	blx	r1
 8015584:	bf00      	nop
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	20000010 	.word	0x20000010

08015590 <DMA1_Stream3_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 3, DMA1_ST3_HANDLER)
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	2303      	movs	r3, #3
 8015598:	71fb      	strb	r3, [r7, #7]
 801559a:	79fa      	ldrb	r2, [r7, #7]
 801559c:	490f      	ldr	r1, [pc, #60]	; (80155dc <DMA1_Stream3_IRQHandler+0x4c>)
 801559e:	4613      	mov	r3, r2
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	1a9b      	subs	r3, r3, r2
 80155a4:	009b      	lsls	r3, r3, #2
 80155a6:	440b      	add	r3, r1
 80155a8:	330c      	adds	r3, #12
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d011      	beq.n	80155d4 <DMA1_Stream3_IRQHandler+0x44>
 80155b0:	79fa      	ldrb	r2, [r7, #7]
 80155b2:	490a      	ldr	r1, [pc, #40]	; (80155dc <DMA1_Stream3_IRQHandler+0x4c>)
 80155b4:	4613      	mov	r3, r2
 80155b6:	00db      	lsls	r3, r3, #3
 80155b8:	1a9b      	subs	r3, r3, r2
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	440b      	add	r3, r1
 80155be:	330c      	adds	r3, #12
 80155c0:	6819      	ldr	r1, [r3, #0]
 80155c2:	79fa      	ldrb	r2, [r7, #7]
 80155c4:	4613      	mov	r3, r2
 80155c6:	00db      	lsls	r3, r3, #3
 80155c8:	1a9b      	subs	r3, r3, r2
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	4a03      	ldr	r2, [pc, #12]	; (80155dc <DMA1_Stream3_IRQHandler+0x4c>)
 80155ce:	4413      	add	r3, r2
 80155d0:	4618      	mov	r0, r3
 80155d2:	4788      	blx	r1
 80155d4:	bf00      	nop
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	20000010 	.word	0x20000010

080155e0 <DMA1_Stream4_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 4, DMA1_ST4_HANDLER)
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	2304      	movs	r3, #4
 80155e8:	71fb      	strb	r3, [r7, #7]
 80155ea:	79fa      	ldrb	r2, [r7, #7]
 80155ec:	490f      	ldr	r1, [pc, #60]	; (801562c <DMA1_Stream4_IRQHandler+0x4c>)
 80155ee:	4613      	mov	r3, r2
 80155f0:	00db      	lsls	r3, r3, #3
 80155f2:	1a9b      	subs	r3, r3, r2
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	440b      	add	r3, r1
 80155f8:	330c      	adds	r3, #12
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d011      	beq.n	8015624 <DMA1_Stream4_IRQHandler+0x44>
 8015600:	79fa      	ldrb	r2, [r7, #7]
 8015602:	490a      	ldr	r1, [pc, #40]	; (801562c <DMA1_Stream4_IRQHandler+0x4c>)
 8015604:	4613      	mov	r3, r2
 8015606:	00db      	lsls	r3, r3, #3
 8015608:	1a9b      	subs	r3, r3, r2
 801560a:	009b      	lsls	r3, r3, #2
 801560c:	440b      	add	r3, r1
 801560e:	330c      	adds	r3, #12
 8015610:	6819      	ldr	r1, [r3, #0]
 8015612:	79fa      	ldrb	r2, [r7, #7]
 8015614:	4613      	mov	r3, r2
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	1a9b      	subs	r3, r3, r2
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	4a03      	ldr	r2, [pc, #12]	; (801562c <DMA1_Stream4_IRQHandler+0x4c>)
 801561e:	4413      	add	r3, r2
 8015620:	4618      	mov	r0, r3
 8015622:	4788      	blx	r1
 8015624:	bf00      	nop
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	20000010 	.word	0x20000010

08015630 <DMA1_Stream5_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 5, DMA1_ST5_HANDLER)
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	2305      	movs	r3, #5
 8015638:	71fb      	strb	r3, [r7, #7]
 801563a:	79fa      	ldrb	r2, [r7, #7]
 801563c:	490f      	ldr	r1, [pc, #60]	; (801567c <DMA1_Stream5_IRQHandler+0x4c>)
 801563e:	4613      	mov	r3, r2
 8015640:	00db      	lsls	r3, r3, #3
 8015642:	1a9b      	subs	r3, r3, r2
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	440b      	add	r3, r1
 8015648:	330c      	adds	r3, #12
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d011      	beq.n	8015674 <DMA1_Stream5_IRQHandler+0x44>
 8015650:	79fa      	ldrb	r2, [r7, #7]
 8015652:	490a      	ldr	r1, [pc, #40]	; (801567c <DMA1_Stream5_IRQHandler+0x4c>)
 8015654:	4613      	mov	r3, r2
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	1a9b      	subs	r3, r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	440b      	add	r3, r1
 801565e:	330c      	adds	r3, #12
 8015660:	6819      	ldr	r1, [r3, #0]
 8015662:	79fa      	ldrb	r2, [r7, #7]
 8015664:	4613      	mov	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	1a9b      	subs	r3, r3, r2
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	4a03      	ldr	r2, [pc, #12]	; (801567c <DMA1_Stream5_IRQHandler+0x4c>)
 801566e:	4413      	add	r3, r2
 8015670:	4618      	mov	r0, r3
 8015672:	4788      	blx	r1
 8015674:	bf00      	nop
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	20000010 	.word	0x20000010

08015680 <DMA1_Stream6_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 6, DMA1_ST6_HANDLER)
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	2306      	movs	r3, #6
 8015688:	71fb      	strb	r3, [r7, #7]
 801568a:	79fa      	ldrb	r2, [r7, #7]
 801568c:	490f      	ldr	r1, [pc, #60]	; (80156cc <DMA1_Stream6_IRQHandler+0x4c>)
 801568e:	4613      	mov	r3, r2
 8015690:	00db      	lsls	r3, r3, #3
 8015692:	1a9b      	subs	r3, r3, r2
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	440b      	add	r3, r1
 8015698:	330c      	adds	r3, #12
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d011      	beq.n	80156c4 <DMA1_Stream6_IRQHandler+0x44>
 80156a0:	79fa      	ldrb	r2, [r7, #7]
 80156a2:	490a      	ldr	r1, [pc, #40]	; (80156cc <DMA1_Stream6_IRQHandler+0x4c>)
 80156a4:	4613      	mov	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	1a9b      	subs	r3, r3, r2
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	440b      	add	r3, r1
 80156ae:	330c      	adds	r3, #12
 80156b0:	6819      	ldr	r1, [r3, #0]
 80156b2:	79fa      	ldrb	r2, [r7, #7]
 80156b4:	4613      	mov	r3, r2
 80156b6:	00db      	lsls	r3, r3, #3
 80156b8:	1a9b      	subs	r3, r3, r2
 80156ba:	009b      	lsls	r3, r3, #2
 80156bc:	4a03      	ldr	r2, [pc, #12]	; (80156cc <DMA1_Stream6_IRQHandler+0x4c>)
 80156be:	4413      	add	r3, r2
 80156c0:	4618      	mov	r0, r3
 80156c2:	4788      	blx	r1
 80156c4:	bf00      	nop
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20000010 	.word	0x20000010

080156d0 <DMA1_Stream7_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(1, 7, DMA1_ST7_HANDLER)
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	2307      	movs	r3, #7
 80156d8:	71fb      	strb	r3, [r7, #7]
 80156da:	79fa      	ldrb	r2, [r7, #7]
 80156dc:	490f      	ldr	r1, [pc, #60]	; (801571c <DMA1_Stream7_IRQHandler+0x4c>)
 80156de:	4613      	mov	r3, r2
 80156e0:	00db      	lsls	r3, r3, #3
 80156e2:	1a9b      	subs	r3, r3, r2
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	440b      	add	r3, r1
 80156e8:	330c      	adds	r3, #12
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d011      	beq.n	8015714 <DMA1_Stream7_IRQHandler+0x44>
 80156f0:	79fa      	ldrb	r2, [r7, #7]
 80156f2:	490a      	ldr	r1, [pc, #40]	; (801571c <DMA1_Stream7_IRQHandler+0x4c>)
 80156f4:	4613      	mov	r3, r2
 80156f6:	00db      	lsls	r3, r3, #3
 80156f8:	1a9b      	subs	r3, r3, r2
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	440b      	add	r3, r1
 80156fe:	330c      	adds	r3, #12
 8015700:	6819      	ldr	r1, [r3, #0]
 8015702:	79fa      	ldrb	r2, [r7, #7]
 8015704:	4613      	mov	r3, r2
 8015706:	00db      	lsls	r3, r3, #3
 8015708:	1a9b      	subs	r3, r3, r2
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	4a03      	ldr	r2, [pc, #12]	; (801571c <DMA1_Stream7_IRQHandler+0x4c>)
 801570e:	4413      	add	r3, r2
 8015710:	4618      	mov	r0, r3
 8015712:	4788      	blx	r1
 8015714:	bf00      	nop
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	20000010 	.word	0x20000010

08015720 <DMA2_Stream0_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 0, DMA2_ST0_HANDLER)
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	2308      	movs	r3, #8
 8015728:	71fb      	strb	r3, [r7, #7]
 801572a:	79fa      	ldrb	r2, [r7, #7]
 801572c:	490f      	ldr	r1, [pc, #60]	; (801576c <DMA2_Stream0_IRQHandler+0x4c>)
 801572e:	4613      	mov	r3, r2
 8015730:	00db      	lsls	r3, r3, #3
 8015732:	1a9b      	subs	r3, r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	440b      	add	r3, r1
 8015738:	330c      	adds	r3, #12
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d011      	beq.n	8015764 <DMA2_Stream0_IRQHandler+0x44>
 8015740:	79fa      	ldrb	r2, [r7, #7]
 8015742:	490a      	ldr	r1, [pc, #40]	; (801576c <DMA2_Stream0_IRQHandler+0x4c>)
 8015744:	4613      	mov	r3, r2
 8015746:	00db      	lsls	r3, r3, #3
 8015748:	1a9b      	subs	r3, r3, r2
 801574a:	009b      	lsls	r3, r3, #2
 801574c:	440b      	add	r3, r1
 801574e:	330c      	adds	r3, #12
 8015750:	6819      	ldr	r1, [r3, #0]
 8015752:	79fa      	ldrb	r2, [r7, #7]
 8015754:	4613      	mov	r3, r2
 8015756:	00db      	lsls	r3, r3, #3
 8015758:	1a9b      	subs	r3, r3, r2
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	4a03      	ldr	r2, [pc, #12]	; (801576c <DMA2_Stream0_IRQHandler+0x4c>)
 801575e:	4413      	add	r3, r2
 8015760:	4618      	mov	r0, r3
 8015762:	4788      	blx	r1
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	20000010 	.word	0x20000010

08015770 <DMA2_Stream1_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 1, DMA2_ST1_HANDLER)
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	2309      	movs	r3, #9
 8015778:	71fb      	strb	r3, [r7, #7]
 801577a:	79fa      	ldrb	r2, [r7, #7]
 801577c:	490f      	ldr	r1, [pc, #60]	; (80157bc <DMA2_Stream1_IRQHandler+0x4c>)
 801577e:	4613      	mov	r3, r2
 8015780:	00db      	lsls	r3, r3, #3
 8015782:	1a9b      	subs	r3, r3, r2
 8015784:	009b      	lsls	r3, r3, #2
 8015786:	440b      	add	r3, r1
 8015788:	330c      	adds	r3, #12
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d011      	beq.n	80157b4 <DMA2_Stream1_IRQHandler+0x44>
 8015790:	79fa      	ldrb	r2, [r7, #7]
 8015792:	490a      	ldr	r1, [pc, #40]	; (80157bc <DMA2_Stream1_IRQHandler+0x4c>)
 8015794:	4613      	mov	r3, r2
 8015796:	00db      	lsls	r3, r3, #3
 8015798:	1a9b      	subs	r3, r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	440b      	add	r3, r1
 801579e:	330c      	adds	r3, #12
 80157a0:	6819      	ldr	r1, [r3, #0]
 80157a2:	79fa      	ldrb	r2, [r7, #7]
 80157a4:	4613      	mov	r3, r2
 80157a6:	00db      	lsls	r3, r3, #3
 80157a8:	1a9b      	subs	r3, r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	4a03      	ldr	r2, [pc, #12]	; (80157bc <DMA2_Stream1_IRQHandler+0x4c>)
 80157ae:	4413      	add	r3, r2
 80157b0:	4618      	mov	r0, r3
 80157b2:	4788      	blx	r1
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	20000010 	.word	0x20000010

080157c0 <DMA2_Stream2_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 2, DMA2_ST2_HANDLER)
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	230a      	movs	r3, #10
 80157c8:	71fb      	strb	r3, [r7, #7]
 80157ca:	79fa      	ldrb	r2, [r7, #7]
 80157cc:	490f      	ldr	r1, [pc, #60]	; (801580c <DMA2_Stream2_IRQHandler+0x4c>)
 80157ce:	4613      	mov	r3, r2
 80157d0:	00db      	lsls	r3, r3, #3
 80157d2:	1a9b      	subs	r3, r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	440b      	add	r3, r1
 80157d8:	330c      	adds	r3, #12
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d011      	beq.n	8015804 <DMA2_Stream2_IRQHandler+0x44>
 80157e0:	79fa      	ldrb	r2, [r7, #7]
 80157e2:	490a      	ldr	r1, [pc, #40]	; (801580c <DMA2_Stream2_IRQHandler+0x4c>)
 80157e4:	4613      	mov	r3, r2
 80157e6:	00db      	lsls	r3, r3, #3
 80157e8:	1a9b      	subs	r3, r3, r2
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	440b      	add	r3, r1
 80157ee:	330c      	adds	r3, #12
 80157f0:	6819      	ldr	r1, [r3, #0]
 80157f2:	79fa      	ldrb	r2, [r7, #7]
 80157f4:	4613      	mov	r3, r2
 80157f6:	00db      	lsls	r3, r3, #3
 80157f8:	1a9b      	subs	r3, r3, r2
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	4a03      	ldr	r2, [pc, #12]	; (801580c <DMA2_Stream2_IRQHandler+0x4c>)
 80157fe:	4413      	add	r3, r2
 8015800:	4618      	mov	r0, r3
 8015802:	4788      	blx	r1
 8015804:	bf00      	nop
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	20000010 	.word	0x20000010

08015810 <DMA2_Stream3_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 3, DMA2_ST3_HANDLER)
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	230b      	movs	r3, #11
 8015818:	71fb      	strb	r3, [r7, #7]
 801581a:	79fa      	ldrb	r2, [r7, #7]
 801581c:	490f      	ldr	r1, [pc, #60]	; (801585c <DMA2_Stream3_IRQHandler+0x4c>)
 801581e:	4613      	mov	r3, r2
 8015820:	00db      	lsls	r3, r3, #3
 8015822:	1a9b      	subs	r3, r3, r2
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	440b      	add	r3, r1
 8015828:	330c      	adds	r3, #12
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d011      	beq.n	8015854 <DMA2_Stream3_IRQHandler+0x44>
 8015830:	79fa      	ldrb	r2, [r7, #7]
 8015832:	490a      	ldr	r1, [pc, #40]	; (801585c <DMA2_Stream3_IRQHandler+0x4c>)
 8015834:	4613      	mov	r3, r2
 8015836:	00db      	lsls	r3, r3, #3
 8015838:	1a9b      	subs	r3, r3, r2
 801583a:	009b      	lsls	r3, r3, #2
 801583c:	440b      	add	r3, r1
 801583e:	330c      	adds	r3, #12
 8015840:	6819      	ldr	r1, [r3, #0]
 8015842:	79fa      	ldrb	r2, [r7, #7]
 8015844:	4613      	mov	r3, r2
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	1a9b      	subs	r3, r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	4a03      	ldr	r2, [pc, #12]	; (801585c <DMA2_Stream3_IRQHandler+0x4c>)
 801584e:	4413      	add	r3, r2
 8015850:	4618      	mov	r0, r3
 8015852:	4788      	blx	r1
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	20000010 	.word	0x20000010

08015860 <DMA2_Stream4_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 4, DMA2_ST4_HANDLER)
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	230c      	movs	r3, #12
 8015868:	71fb      	strb	r3, [r7, #7]
 801586a:	79fa      	ldrb	r2, [r7, #7]
 801586c:	490f      	ldr	r1, [pc, #60]	; (80158ac <DMA2_Stream4_IRQHandler+0x4c>)
 801586e:	4613      	mov	r3, r2
 8015870:	00db      	lsls	r3, r3, #3
 8015872:	1a9b      	subs	r3, r3, r2
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	440b      	add	r3, r1
 8015878:	330c      	adds	r3, #12
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d011      	beq.n	80158a4 <DMA2_Stream4_IRQHandler+0x44>
 8015880:	79fa      	ldrb	r2, [r7, #7]
 8015882:	490a      	ldr	r1, [pc, #40]	; (80158ac <DMA2_Stream4_IRQHandler+0x4c>)
 8015884:	4613      	mov	r3, r2
 8015886:	00db      	lsls	r3, r3, #3
 8015888:	1a9b      	subs	r3, r3, r2
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	440b      	add	r3, r1
 801588e:	330c      	adds	r3, #12
 8015890:	6819      	ldr	r1, [r3, #0]
 8015892:	79fa      	ldrb	r2, [r7, #7]
 8015894:	4613      	mov	r3, r2
 8015896:	00db      	lsls	r3, r3, #3
 8015898:	1a9b      	subs	r3, r3, r2
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	4a03      	ldr	r2, [pc, #12]	; (80158ac <DMA2_Stream4_IRQHandler+0x4c>)
 801589e:	4413      	add	r3, r2
 80158a0:	4618      	mov	r0, r3
 80158a2:	4788      	blx	r1
 80158a4:	bf00      	nop
 80158a6:	3708      	adds	r7, #8
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	20000010 	.word	0x20000010

080158b0 <DMA2_Stream5_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 5, DMA2_ST5_HANDLER)
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	230d      	movs	r3, #13
 80158b8:	71fb      	strb	r3, [r7, #7]
 80158ba:	79fa      	ldrb	r2, [r7, #7]
 80158bc:	490f      	ldr	r1, [pc, #60]	; (80158fc <DMA2_Stream5_IRQHandler+0x4c>)
 80158be:	4613      	mov	r3, r2
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	1a9b      	subs	r3, r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	440b      	add	r3, r1
 80158c8:	330c      	adds	r3, #12
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d011      	beq.n	80158f4 <DMA2_Stream5_IRQHandler+0x44>
 80158d0:	79fa      	ldrb	r2, [r7, #7]
 80158d2:	490a      	ldr	r1, [pc, #40]	; (80158fc <DMA2_Stream5_IRQHandler+0x4c>)
 80158d4:	4613      	mov	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	1a9b      	subs	r3, r3, r2
 80158da:	009b      	lsls	r3, r3, #2
 80158dc:	440b      	add	r3, r1
 80158de:	330c      	adds	r3, #12
 80158e0:	6819      	ldr	r1, [r3, #0]
 80158e2:	79fa      	ldrb	r2, [r7, #7]
 80158e4:	4613      	mov	r3, r2
 80158e6:	00db      	lsls	r3, r3, #3
 80158e8:	1a9b      	subs	r3, r3, r2
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	4a03      	ldr	r2, [pc, #12]	; (80158fc <DMA2_Stream5_IRQHandler+0x4c>)
 80158ee:	4413      	add	r3, r2
 80158f0:	4618      	mov	r0, r3
 80158f2:	4788      	blx	r1
 80158f4:	bf00      	nop
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}
 80158fc:	20000010 	.word	0x20000010

08015900 <DMA2_Stream6_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 6, DMA2_ST6_HANDLER)
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	230e      	movs	r3, #14
 8015908:	71fb      	strb	r3, [r7, #7]
 801590a:	79fa      	ldrb	r2, [r7, #7]
 801590c:	490f      	ldr	r1, [pc, #60]	; (801594c <DMA2_Stream6_IRQHandler+0x4c>)
 801590e:	4613      	mov	r3, r2
 8015910:	00db      	lsls	r3, r3, #3
 8015912:	1a9b      	subs	r3, r3, r2
 8015914:	009b      	lsls	r3, r3, #2
 8015916:	440b      	add	r3, r1
 8015918:	330c      	adds	r3, #12
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d011      	beq.n	8015944 <DMA2_Stream6_IRQHandler+0x44>
 8015920:	79fa      	ldrb	r2, [r7, #7]
 8015922:	490a      	ldr	r1, [pc, #40]	; (801594c <DMA2_Stream6_IRQHandler+0x4c>)
 8015924:	4613      	mov	r3, r2
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	1a9b      	subs	r3, r3, r2
 801592a:	009b      	lsls	r3, r3, #2
 801592c:	440b      	add	r3, r1
 801592e:	330c      	adds	r3, #12
 8015930:	6819      	ldr	r1, [r3, #0]
 8015932:	79fa      	ldrb	r2, [r7, #7]
 8015934:	4613      	mov	r3, r2
 8015936:	00db      	lsls	r3, r3, #3
 8015938:	1a9b      	subs	r3, r3, r2
 801593a:	009b      	lsls	r3, r3, #2
 801593c:	4a03      	ldr	r2, [pc, #12]	; (801594c <DMA2_Stream6_IRQHandler+0x4c>)
 801593e:	4413      	add	r3, r2
 8015940:	4618      	mov	r0, r3
 8015942:	4788      	blx	r1
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	20000010 	.word	0x20000010

08015950 <DMA2_Stream7_IRQHandler>:
DEFINIR_IRQ_HANDLER_DMA(2, 7, DMA2_ST7_HANDLER)
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	230f      	movs	r3, #15
 8015958:	71fb      	strb	r3, [r7, #7]
 801595a:	79fa      	ldrb	r2, [r7, #7]
 801595c:	490f      	ldr	r1, [pc, #60]	; (801599c <DMA2_Stream7_IRQHandler+0x4c>)
 801595e:	4613      	mov	r3, r2
 8015960:	00db      	lsls	r3, r3, #3
 8015962:	1a9b      	subs	r3, r3, r2
 8015964:	009b      	lsls	r3, r3, #2
 8015966:	440b      	add	r3, r1
 8015968:	330c      	adds	r3, #12
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d011      	beq.n	8015994 <DMA2_Stream7_IRQHandler+0x44>
 8015970:	79fa      	ldrb	r2, [r7, #7]
 8015972:	490a      	ldr	r1, [pc, #40]	; (801599c <DMA2_Stream7_IRQHandler+0x4c>)
 8015974:	4613      	mov	r3, r2
 8015976:	00db      	lsls	r3, r3, #3
 8015978:	1a9b      	subs	r3, r3, r2
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	440b      	add	r3, r1
 801597e:	330c      	adds	r3, #12
 8015980:	6819      	ldr	r1, [r3, #0]
 8015982:	79fa      	ldrb	r2, [r7, #7]
 8015984:	4613      	mov	r3, r2
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	1a9b      	subs	r3, r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	4a03      	ldr	r2, [pc, #12]	; (801599c <DMA2_Stream7_IRQHandler+0x4c>)
 801598e:	4413      	add	r3, r2
 8015990:	4618      	mov	r0, r3
 8015992:	4788      	blx	r1
 8015994:	bf00      	nop
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	20000010 	.word	0x20000010

080159a0 <iniciarDMA>:
**  Descripcion:    Inicia el DMA
**  Parametros:     Identificador
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarDMA(identificadorDMA_e identificador)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	71fb      	strb	r3, [r7, #7]
    const uint8_t indice = IDENTIFICADOR_A_INDICE_DMA(identificador);
 80159aa:	79fb      	ldrb	r3, [r7, #7]
 80159ac:	3b01      	subs	r3, #1
 80159ae:	73fb      	strb	r3, [r7, #15]
    habilitarRelojDMA(indice);
 80159b0:	7bfb      	ldrb	r3, [r7, #15]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f000 f82a 	bl	8015a0c <habilitarRelojDMA>
}
 80159b8:	bf00      	nop
 80159ba:	3710      	adds	r7, #16
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <identificadorDMA>:
**  Descripcion:    Devuelve el identificador del DMA
**  Parametros:     Stream
**  Retorno:        Identificador
****************************************************************************************/
identificadorDMA_e identificadorDMA(const DMA_Stream_TypeDef* stream)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b085      	sub	sp, #20
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < DMA_ULTIMO_HANDLER; i++) {
 80159c8:	2300      	movs	r3, #0
 80159ca:	73fb      	strb	r3, [r7, #15]
 80159cc:	e012      	b.n	80159f4 <identificadorDMA+0x34>
        if (descriptorDMA[i].ref == stream)
 80159ce:	7bfa      	ldrb	r2, [r7, #15]
 80159d0:	490d      	ldr	r1, [pc, #52]	; (8015a08 <identificadorDMA+0x48>)
 80159d2:	4613      	mov	r3, r2
 80159d4:	00db      	lsls	r3, r3, #3
 80159d6:	1a9b      	subs	r3, r3, r2
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	440b      	add	r3, r1
 80159dc:	3304      	adds	r3, #4
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d103      	bne.n	80159ee <identificadorDMA+0x2e>
            return i + 1;
 80159e6:	7bfb      	ldrb	r3, [r7, #15]
 80159e8:	3301      	adds	r3, #1
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	e006      	b.n	80159fc <identificadorDMA+0x3c>
    for (uint8_t i = 0; i < DMA_ULTIMO_HANDLER; i++) {
 80159ee:	7bfb      	ldrb	r3, [r7, #15]
 80159f0:	3301      	adds	r3, #1
 80159f2:	73fb      	strb	r3, [r7, #15]
 80159f4:	7bfb      	ldrb	r3, [r7, #15]
 80159f6:	2b0f      	cmp	r3, #15
 80159f8:	d9e9      	bls.n	80159ce <identificadorDMA+0xe>
    }
    return 0;
 80159fa:	2300      	movs	r3, #0
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3714      	adds	r7, #20
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr
 8015a08:	20000010 	.word	0x20000010

08015a0c <habilitarRelojDMA>:
**  Descripcion:    Habilita el reloj del DMA
**  Parametros:     Indice
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojDMA(uint8_t indice)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	4603      	mov	r3, r0
 8015a14:	71fb      	strb	r3, [r7, #7]
    if (descriptorDMA[indice].dma == DMA1)
 8015a16:	79fa      	ldrb	r2, [r7, #7]
 8015a18:	4914      	ldr	r1, [pc, #80]	; (8015a6c <habilitarRelojDMA+0x60>)
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	00db      	lsls	r3, r3, #3
 8015a1e:	1a9b      	subs	r3, r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	440b      	add	r3, r1
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	4a12      	ldr	r2, [pc, #72]	; (8015a70 <habilitarRelojDMA+0x64>)
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d10c      	bne.n	8015a46 <habilitarRelojDMA+0x3a>
        __HAL_RCC_DMA1_CLK_ENABLE();
 8015a2c:	4b11      	ldr	r3, [pc, #68]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a30:	4a10      	ldr	r2, [pc, #64]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015a36:	6313      	str	r3, [r2, #48]	; 0x30
 8015a38:	4b0e      	ldr	r3, [pc, #56]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a40:	60fb      	str	r3, [r7, #12]
 8015a42:	68fb      	ldr	r3, [r7, #12]
    else
        __HAL_RCC_DMA2_CLK_ENABLE();
}
 8015a44:	e00b      	b.n	8015a5e <habilitarRelojDMA+0x52>
        __HAL_RCC_DMA2_CLK_ENABLE();
 8015a46:	4b0b      	ldr	r3, [pc, #44]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a4a:	4a0a      	ldr	r2, [pc, #40]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015a50:	6313      	str	r3, [r2, #48]	; 0x30
 8015a52:	4b08      	ldr	r3, [pc, #32]	; (8015a74 <habilitarRelojDMA+0x68>)
 8015a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015a5a:	60bb      	str	r3, [r7, #8]
 8015a5c:	68bb      	ldr	r3, [r7, #8]
}
 8015a5e:	bf00      	nop
 8015a60:	3714      	adds	r7, #20
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr
 8015a6a:	bf00      	nop
 8015a6c:	20000010 	.word	0x20000010
 8015a70:	40026000 	.word	0x40026000
 8015a74:	40023800 	.word	0x40023800

08015a78 <resetearGrabadorFlash>:
**  Descripcion:    Resetea el grabador
**  Parametros:     Grabador
**  Retorno:        Ninguno
****************************************************************************************/
void resetearGrabadorFlash(grabadorFlash_t *grabador)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
    memset(grabador, 0, sizeof(*grabador));
 8015a80:	2218      	movs	r2, #24
 8015a82:	2100      	movs	r1, #0
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f01f fc0b 	bl	80352a0 <memset>
}
 8015a8a:	bf00      	nop
 8015a8c:	3708      	adds	r7, #8
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <desbloquearGrabadorFlash>:
**  Descripcion:    Inicia el grabador ajustando la direccion y el tamanio
**  Parametros:     Grabador, direccion base, tamanio
**  Retorno:        Ninguno
****************************************************************************************/
void desbloquearGrabadorFlash(grabadorFlash_t *grabador, uintptr_t base, int32_t tam)
{
 8015a92:	b580      	push	{r7, lr}
 8015a94:	b084      	sub	sp, #16
 8015a96:	af00      	add	r7, sp, #0
 8015a98:	60f8      	str	r0, [r7, #12]
 8015a9a:	60b9      	str	r1, [r7, #8]
 8015a9c:	607a      	str	r2, [r7, #4]
    grabador->dir = base;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	68ba      	ldr	r2, [r7, #8]
 8015aa2:	601a      	str	r2, [r3, #0]
    grabador->tam = tam;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	605a      	str	r2, [r3, #4]
    if (!grabador->desbloqueado) {
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	7d1b      	ldrb	r3, [r3, #20]
 8015aae:	f083 0301 	eor.w	r3, r3, #1
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d004      	beq.n	8015ac2 <desbloquearGrabadorFlash+0x30>
        HAL_FLASH_Unlock();
 8015ab8:	f014 fcf8 	bl	802a4ac <HAL_FLASH_Unlock>
        grabador->desbloqueado = true;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	751a      	strb	r2, [r3, #20]
    }

    grabador->err = 0;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	611a      	str	r2, [r3, #16]
}
 8015ac8:	bf00      	nop
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}

08015ad0 <bloquearGrabadorFlash>:
**  Descripcion:    Bloquea el grabador y la flash
**  Parametros:     grabador
**  Retorno:        Codigo de error: 0 no error, -1 fallo en el borrado, -2 Fallo al grabar
****************************************************************************************/
int32_t bloquearGrabadorFlash(grabadorFlash_t *grabador)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
    if (grabador->desbloqueado) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	7d1b      	ldrb	r3, [r3, #20]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d004      	beq.n	8015aea <bloquearGrabadorFlash+0x1a>
        HAL_FLASH_Lock();
 8015ae0:	f014 fd06 	bl	802a4f0 <HAL_FLASH_Lock>
        grabador->desbloqueado = false;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	751a      	strb	r2, [r3, #20]
    }
    return grabador->err;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	691b      	ldr	r3, [r3, #16]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <escribirGrabadorFlash>:
**  Descripcion:    Graba un buffer en la flash
**  Parametros:     grabador, buffer a grabar, numero de datos
**  Retorno:        Codigo de error: 0 no error, -1 fallo en el borrado, -2 Fallo al grabar
****************************************************************************************/
int32_t escribirGrabadorFlash(grabadorFlash_t *grabador, const uint8_t *p, uint32_t tam)
{
 8015af6:	b580      	push	{r7, lr}
 8015af8:	b086      	sub	sp, #24
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	60f8      	str	r0, [r7, #12]
 8015afe:	60b9      	str	r1, [r7, #8]
 8015b00:	607a      	str	r2, [r7, #4]
    for (const uint8_t *pat = p; pat != (uint8_t*)p + tam; pat++) {
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	617b      	str	r3, [r7, #20]
 8015b06:	e01d      	b.n	8015b44 <escribirGrabadorFlash+0x4e>
        grabador->buffer.b[grabador->at++] = *pat;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	1c59      	adds	r1, r3, #1
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	60d1      	str	r1, [r2, #12]
 8015b12:	697a      	ldr	r2, [r7, #20]
 8015b14:	7811      	ldrb	r1, [r2, #0]
 8015b16:	68fa      	ldr	r2, [r7, #12]
 8015b18:	4413      	add	r3, r2
 8015b1a:	460a      	mov	r2, r1
 8015b1c:	721a      	strb	r2, [r3, #8]

        if (grabador->at == sizeof(grabador->buffer)) {
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	68db      	ldr	r3, [r3, #12]
 8015b22:	2b04      	cmp	r3, #4
 8015b24:	d10b      	bne.n	8015b3e <escribirGrabadorFlash+0x48>
            grabador->err = escribirWordGrabadorFlash(grabador, grabador->buffer.w);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	689b      	ldr	r3, [r3, #8]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	68f8      	ldr	r0, [r7, #12]
 8015b2e:	f000 f8a3 	bl	8015c78 <escribirWordGrabadorFlash>
 8015b32:	4602      	mov	r2, r0
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	611a      	str	r2, [r3, #16]
            grabador->at = 0;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	60da      	str	r2, [r3, #12]
    for (const uint8_t *pat = p; pat != (uint8_t*)p + tam; pat++) {
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	3301      	adds	r3, #1
 8015b42:	617b      	str	r3, [r7, #20]
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	4413      	add	r3, r2
 8015b4a:	697a      	ldr	r2, [r7, #20]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d1db      	bne.n	8015b08 <escribirGrabadorFlash+0x12>
        }
    }
    return grabador->err;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	691b      	ldr	r3, [r3, #16]
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3718      	adds	r7, #24
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <flushGrabadorFlash>:
**  Descripcion:    Hace un flush en la flash
**  Parametros:     grabador
**  Retorno:        Codigo de error: 0 no error, -1 fallo en el borrado, -2 Fallo al grabar
****************************************************************************************/
int32_t flushGrabadorFlash(grabadorFlash_t *grabador)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
    if (grabador->at != 0) {
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d018      	beq.n	8015b9e <flushGrabadorFlash+0x42>
        memset(grabador->buffer.b + grabador->at, 0, sizeof(grabador->buffer) - grabador->at);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	3308      	adds	r3, #8
 8015b70:	687a      	ldr	r2, [r7, #4]
 8015b72:	68d2      	ldr	r2, [r2, #12]
 8015b74:	1898      	adds	r0, r3, r2
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	f1c3 0304 	rsb	r3, r3, #4
 8015b7e:	461a      	mov	r2, r3
 8015b80:	2100      	movs	r1, #0
 8015b82:	f01f fb8d 	bl	80352a0 <memset>
        grabador->err = escribirWordGrabadorFlash(grabador, grabador->buffer.w);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	689b      	ldr	r3, [r3, #8]
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f000 f873 	bl	8015c78 <escribirWordGrabadorFlash>
 8015b92:	4602      	mov	r2, r0
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	611a      	str	r2, [r3, #16]
        grabador->at = 0;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	60da      	str	r2, [r3, #12]
    }
    return grabador-> err;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	691b      	ldr	r3, [r3, #16]
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3708      	adds	r7, #8
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
	...

08015bac <sectorParaConfigGrabadorFlash>:
**  Descripcion:    Obtiene el sector de la flash
**  Parametros:     Ninguno
**  Retorno:        Sector de la flash
****************************************************************************************/
uint32_t sectorParaConfigGrabadorFlash(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
    if ((uint32_t)&inicioRegionConfig <= 0x08007FFF)
 8015bb0:	4a26      	ldr	r2, [pc, #152]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bb2:	4b27      	ldr	r3, [pc, #156]	; (8015c50 <sectorParaConfigGrabadorFlash+0xa4>)
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d201      	bcs.n	8015bbc <sectorParaConfigGrabadorFlash+0x10>
        return FLASH_SECTOR_0;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e045      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0800FFFF)
 8015bbc:	4a23      	ldr	r2, [pc, #140]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bbe:	4b25      	ldr	r3, [pc, #148]	; (8015c54 <sectorParaConfigGrabadorFlash+0xa8>)
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d801      	bhi.n	8015bc8 <sectorParaConfigGrabadorFlash+0x1c>
        return FLASH_SECTOR_1;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	e03f      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x08017FFF)
 8015bc8:	4a20      	ldr	r2, [pc, #128]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bca:	4b23      	ldr	r3, [pc, #140]	; (8015c58 <sectorParaConfigGrabadorFlash+0xac>)
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d201      	bcs.n	8015bd4 <sectorParaConfigGrabadorFlash+0x28>
        return FLASH_SECTOR_2;
 8015bd0:	2302      	movs	r3, #2
 8015bd2:	e039      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0801FFFF)
 8015bd4:	4a1d      	ldr	r2, [pc, #116]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bd6:	4b21      	ldr	r3, [pc, #132]	; (8015c5c <sectorParaConfigGrabadorFlash+0xb0>)
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d801      	bhi.n	8015be0 <sectorParaConfigGrabadorFlash+0x34>
        return FLASH_SECTOR_3;
 8015bdc:	2303      	movs	r3, #3
 8015bde:	e033      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0803FFFF)
 8015be0:	4a1a      	ldr	r2, [pc, #104]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015be2:	4b1f      	ldr	r3, [pc, #124]	; (8015c60 <sectorParaConfigGrabadorFlash+0xb4>)
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d801      	bhi.n	8015bec <sectorParaConfigGrabadorFlash+0x40>
        return FLASH_SECTOR_4;
 8015be8:	2304      	movs	r3, #4
 8015bea:	e02d      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0807FFFF)
 8015bec:	4a17      	ldr	r2, [pc, #92]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bee:	4b1d      	ldr	r3, [pc, #116]	; (8015c64 <sectorParaConfigGrabadorFlash+0xb8>)
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d801      	bhi.n	8015bf8 <sectorParaConfigGrabadorFlash+0x4c>
        return FLASH_SECTOR_5;
 8015bf4:	2305      	movs	r3, #5
 8015bf6:	e027      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x080BFFFF)
 8015bf8:	4a14      	ldr	r2, [pc, #80]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015bfa:	4b1b      	ldr	r3, [pc, #108]	; (8015c68 <sectorParaConfigGrabadorFlash+0xbc>)
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d801      	bhi.n	8015c04 <sectorParaConfigGrabadorFlash+0x58>
        return FLASH_SECTOR_6;
 8015c00:	2306      	movs	r3, #6
 8015c02:	e021      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x080FFFFF)
 8015c04:	4b11      	ldr	r3, [pc, #68]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015c06:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8015c0a:	d201      	bcs.n	8015c10 <sectorParaConfigGrabadorFlash+0x64>
        return FLASH_SECTOR_7;
 8015c0c:	2307      	movs	r3, #7
 8015c0e:	e01b      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0813FFFF)
 8015c10:	4a0e      	ldr	r2, [pc, #56]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015c12:	4b16      	ldr	r3, [pc, #88]	; (8015c6c <sectorParaConfigGrabadorFlash+0xc0>)
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d801      	bhi.n	8015c1c <sectorParaConfigGrabadorFlash+0x70>
        return FLASH_SECTOR_8;
 8015c18:	2308      	movs	r3, #8
 8015c1a:	e015      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x0817FFFF)
 8015c1c:	4a0b      	ldr	r2, [pc, #44]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015c1e:	4b14      	ldr	r3, [pc, #80]	; (8015c70 <sectorParaConfigGrabadorFlash+0xc4>)
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d801      	bhi.n	8015c28 <sectorParaConfigGrabadorFlash+0x7c>
        return FLASH_SECTOR_9;
 8015c24:	2309      	movs	r3, #9
 8015c26:	e00f      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x081BFFFF)
 8015c28:	4a08      	ldr	r2, [pc, #32]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015c2a:	4b12      	ldr	r3, [pc, #72]	; (8015c74 <sectorParaConfigGrabadorFlash+0xc8>)
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d801      	bhi.n	8015c34 <sectorParaConfigGrabadorFlash+0x88>
        return FLASH_SECTOR_10;
 8015c30:	230a      	movs	r3, #10
 8015c32:	e009      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>
    if ((uint32_t)&inicioRegionConfig <= 0x081FFFFF)
 8015c34:	4b05      	ldr	r3, [pc, #20]	; (8015c4c <sectorParaConfigGrabadorFlash+0xa0>)
 8015c36:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8015c3a:	d201      	bcs.n	8015c40 <sectorParaConfigGrabadorFlash+0x94>
        return FLASH_SECTOR_11;
 8015c3c:	230b      	movs	r3, #11
 8015c3e:	e003      	b.n	8015c48 <sectorParaConfigGrabadorFlash+0x9c>


    while (1)
        falloSistema(FALLO_ESCRITURA_FLASH);
 8015c40:	2002      	movs	r0, #2
 8015c42:	f7fe fabc 	bl	80141be <falloSistema>
 8015c46:	e7fb      	b.n	8015c40 <sectorParaConfigGrabadorFlash+0x94>

    return FLASH_SECTOR_0;
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	08008000 	.word	0x08008000
 8015c50:	08008000 	.word	0x08008000
 8015c54:	0800ffff 	.word	0x0800ffff
 8015c58:	08018000 	.word	0x08018000
 8015c5c:	0801ffff 	.word	0x0801ffff
 8015c60:	0803ffff 	.word	0x0803ffff
 8015c64:	0807ffff 	.word	0x0807ffff
 8015c68:	080bffff 	.word	0x080bffff
 8015c6c:	0813ffff 	.word	0x0813ffff
 8015c70:	0817ffff 	.word	0x0817ffff
 8015c74:	081bffff 	.word	0x081bffff

08015c78 <escribirWordGrabadorFlash>:
**  Descripcion:    Escribe una word en la flash
**  Parametros:     grabador, valor a grabar
**  Retorno:        Codigo de error: 0 no error, -1 fallo en el borrado, -2 Fallo al grabar
****************************************************************************************/
int32_t escribirWordGrabadorFlash(grabadorFlash_t *grabador, uint32_t valor)
{
 8015c78:	b5b0      	push	{r4, r5, r7, lr}
 8015c7a:	b08a      	sub	sp, #40	; 0x28
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
    if (grabador->err != 0)
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	691b      	ldr	r3, [r3, #16]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <escribirWordGrabadorFlash+0x18>
        return grabador->err;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	e042      	b.n	8015d16 <escribirWordGrabadorFlash+0x9e>

    if (grabador->dir % FLASH_PAGE_SIZE == 0) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d121      	bne.n	8015ce0 <escribirWordGrabadorFlash+0x68>
        FLASH_EraseInitTypeDef inicioBorrado = {
 8015c9c:	f107 0310 	add.w	r3, r7, #16
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	601a      	str	r2, [r3, #0]
 8015ca4:	605a      	str	r2, [r3, #4]
 8015ca6:	609a      	str	r2, [r3, #8]
 8015ca8:	60da      	str	r2, [r3, #12]
 8015caa:	611a      	str	r2, [r3, #16]
 8015cac:	2301      	movs	r3, #1
 8015cae:	61fb      	str	r3, [r7, #28]
 8015cb0:	2302      	movs	r3, #2
 8015cb2:	623b      	str	r3, [r7, #32]
            .TypeErase = FLASH_TYPEERASE_SECTORS,
            .VoltageRange = FLASH_VOLTAGE_RANGE_3,     // 2.7-3.6V
            .NbSectors = 1
        };
        inicioBorrado.Sector = sectorParaConfigGrabadorFlash();
 8015cb4:	f7ff ff7a 	bl	8015bac <sectorParaConfigGrabadorFlash>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	61bb      	str	r3, [r7, #24]

        uint32_t errorSector;
        const HAL_StatusTypeDef estado = HAL_FLASHEx_Erase(&inicioBorrado, &errorSector);
 8015cbc:	f107 020c 	add.w	r2, r7, #12
 8015cc0:	f107 0310 	add.w	r3, r7, #16
 8015cc4:	4611      	mov	r1, r2
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f014 fd4e 	bl	802a768 <HAL_FLASHEx_Erase>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (estado != HAL_OK)
 8015cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d002      	beq.n	8015ce0 <escribirWordGrabadorFlash+0x68>
            return -1;
 8015cda:	f04f 33ff 	mov.w	r3, #4294967295
 8015cde:	e01a      	b.n	8015d16 <escribirWordGrabadorFlash+0x9e>
    }

    const HAL_StatusTypeDef estado = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, grabador->dir, valor);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6819      	ldr	r1, [r3, #0]
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	461c      	mov	r4, r3
 8015cea:	4615      	mov	r5, r2
 8015cec:	4622      	mov	r2, r4
 8015cee:	462b      	mov	r3, r5
 8015cf0:	2002      	movs	r0, #2
 8015cf2:	f014 fb7f 	bl	802a3f4 <HAL_FLASH_Program>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (estado != HAL_OK)
 8015cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d002      	beq.n	8015d0a <escribirWordGrabadorFlash+0x92>
        return -2;
 8015d04:	f06f 0301 	mvn.w	r3, #1
 8015d08:	e005      	b.n	8015d16 <escribirWordGrabadorFlash+0x9e>

    grabador->dir += sizeof(valor);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	1d1a      	adds	r2, r3, #4
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	601a      	str	r2, [r3, #0]
    return 0;
 8015d14:	2300      	movs	r3, #0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3728      	adds	r7, #40	; 0x28
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015d20 <punteroI2C>:
**  Descripcion:    Devuelve el puntero a un I2C seleccionado
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
i2c_t *punteroI2C(numI2C_e numI2C)
{
 8015d20:	b480      	push	{r7}
 8015d22:	b083      	sub	sp, #12
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	4603      	mov	r3, r0
 8015d28:	71fb      	strb	r3, [r7, #7]
    return &i2c[numI2C];
 8015d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d2e:	2258      	movs	r2, #88	; 0x58
 8015d30:	fb02 f303 	mul.w	r3, r2, r3
 8015d34:	4a03      	ldr	r2, [pc, #12]	; (8015d44 <punteroI2C+0x24>)
 8015d36:	4413      	add	r3, r2
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	370c      	adds	r7, #12
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr
 8015d44:	20003164 	.word	0x20003164

08015d48 <iniciarI2C>:
**  Descripcion:    Inicia el I2C
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarI2C(numI2C_e numI2C)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b084      	sub	sp, #16
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	4603      	mov	r3, r0
 8015d50:	71fb      	strb	r3, [r7, #7]
    if (numI2C == I2C_NINGUNO) {
 8015d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d5a:	d104      	bne.n	8015d66 <iniciarI2C+0x1e>
#ifdef DEBUG
        printf("Fallo en la definicion del i2c\n");
 8015d5c:	4819      	ldr	r0, [pc, #100]	; (8015dc4 <iniciarI2C+0x7c>)
 8015d5e:	f020 f84f 	bl	8035e00 <puts>
#endif
        return false;
 8015d62:	2300      	movs	r3, #0
 8015d64:	e029      	b.n	8015dba <iniciarI2C+0x72>
    }

    i2c_t *driver = &i2c[numI2C];
 8015d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d6a:	2258      	movs	r2, #88	; 0x58
 8015d6c:	fb02 f303 	mul.w	r3, r2, r3
 8015d70:	4a15      	ldr	r2, [pc, #84]	; (8015dc8 <iniciarI2C+0x80>)
 8015d72:	4413      	add	r3, r2
 8015d74:	60fb      	str	r3, [r7, #12]

	memset(driver, 0, sizeof(*driver));
 8015d76:	2258      	movs	r2, #88	; 0x58
 8015d78:	2100      	movs	r1, #0
 8015d7a:	68f8      	ldr	r0, [r7, #12]
 8015d7c:	f01f fa90 	bl	80352a0 <memset>
    resetearContadorErrorI2C(numI2C);
 8015d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f000 f85b 	bl	8015e40 <resetearContadorErrorI2C>
	driver->iniciado = false;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	701a      	strb	r2, [r3, #0]

    if (iniciarDriverI2C(numI2C)) {
 8015d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d94:	4618      	mov	r0, r3
 8015d96:	f000 f8bf 	bl	8015f18 <iniciarDriverI2C>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d004      	beq.n	8015daa <iniciarI2C+0x62>
    	driver->iniciado = true;
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	2201      	movs	r2, #1
 8015da4:	701a      	strb	r2, [r3, #0]
        return true;
 8015da6:	2301      	movs	r3, #1
 8015da8:	e007      	b.n	8015dba <iniciarI2C+0x72>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion del bus I2C %u\n", numI2C + 1);
 8015daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dae:	3301      	adds	r3, #1
 8015db0:	4619      	mov	r1, r3
 8015db2:	4806      	ldr	r0, [pc, #24]	; (8015dcc <iniciarI2C+0x84>)
 8015db4:	f01f ff9e 	bl	8035cf4 <iprintf>
#endif
        return false;
 8015db8:	2300      	movs	r3, #0
    }
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	0803a4d8 	.word	0x0803a4d8
 8015dc8:	20003164 	.word	0x20003164
 8015dcc:	0803a4f8 	.word	0x0803a4f8

08015dd0 <i2cIniciado>:
**  Descripcion:    Comprueba si el I2C esta iniciado
**  Parametros:     Numero de I2C
**  Retorno:        True si iniciado
****************************************************************************************/
bool i2cIniciado(numI2C_e numI2C)
{
 8015dd0:	b480      	push	{r7}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	71fb      	strb	r3, [r7, #7]
    return i2c[numI2C].iniciado;
 8015dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dde:	4a06      	ldr	r2, [pc, #24]	; (8015df8 <i2cIniciado+0x28>)
 8015de0:	2158      	movs	r1, #88	; 0x58
 8015de2:	fb01 f303 	mul.w	r3, r1, r3
 8015de6:	4413      	add	r3, r2
 8015de8:	781b      	ldrb	r3, [r3, #0]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	370c      	adds	r7, #12
 8015dee:	46bd      	mov	sp, r7
 8015df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df4:	4770      	bx	lr
 8015df6:	bf00      	nop
 8015df8:	20003164 	.word	0x20003164

08015dfc <errorCallbackI2C>:
**  Descripcion:    Incrementa el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void errorCallbackI2C(numI2C_e numI2C)
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	4603      	mov	r3, r0
 8015e04:	71fb      	strb	r3, [r7, #7]
    i2c[numI2C].numErrores++;
 8015e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e0a:	490c      	ldr	r1, [pc, #48]	; (8015e3c <errorCallbackI2C+0x40>)
 8015e0c:	2258      	movs	r2, #88	; 0x58
 8015e0e:	fb03 f202 	mul.w	r2, r3, r2
 8015e12:	440a      	add	r2, r1
 8015e14:	3202      	adds	r2, #2
 8015e16:	8812      	ldrh	r2, [r2, #0]
 8015e18:	b292      	uxth	r2, r2
 8015e1a:	3201      	adds	r2, #1
 8015e1c:	b290      	uxth	r0, r2
 8015e1e:	4a07      	ldr	r2, [pc, #28]	; (8015e3c <errorCallbackI2C+0x40>)
 8015e20:	2158      	movs	r1, #88	; 0x58
 8015e22:	fb01 f303 	mul.w	r3, r1, r3
 8015e26:	4413      	add	r3, r2
 8015e28:	3302      	adds	r3, #2
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	801a      	strh	r2, [r3, #0]
}
 8015e2e:	bf00      	nop
 8015e30:	370c      	adds	r7, #12
 8015e32:	46bd      	mov	sp, r7
 8015e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	20003164 	.word	0x20003164

08015e40 <resetearContadorErrorI2C>:
**  Descripcion:    Resetea el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void resetearContadorErrorI2C(numI2C_e numI2C)
{
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	4603      	mov	r3, r0
 8015e48:	71fb      	strb	r3, [r7, #7]
    i2c[numI2C].numErrores = 0;
 8015e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e4e:	4a07      	ldr	r2, [pc, #28]	; (8015e6c <resetearContadorErrorI2C+0x2c>)
 8015e50:	2158      	movs	r1, #88	; 0x58
 8015e52:	fb01 f303 	mul.w	r3, r1, r3
 8015e56:	4413      	add	r3, r2
 8015e58:	3302      	adds	r3, #2
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	801a      	strh	r2, [r3, #0]
}
 8015e5e:	bf00      	nop
 8015e60:	370c      	adds	r7, #12
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	20003164 	.word	0x20003164

08015e70 <ocupadoBusI2C>:
**  Descripcion:    Comprueba si el bus I2C esta ocupado
**  Parametros:     Bus
**  Retorno:        True si ocupado
****************************************************************************************/
bool ocupadoBusI2C(const bus_t *bus)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
    return ocupadoI2C(bus->bus_u.i2c.numI2C);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f000 f946 	bl	8016110 <ocupadoI2C>
 8015e84:	4603      	mov	r3, r0
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <escribirBufferRegistroBusI2C>:
**  Descripcion:    Escribe un buffer en un registro por el bus I2C
**  Parametros:     Bus, registro, buffer a escribir, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
bool escribirBufferRegistroBusI2C(const bus_t *bus, uint8_t reg, uint8_t *datoTx, uint16_t longitud)
{
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b086      	sub	sp, #24
 8015e92:	af02      	add	r7, sp, #8
 8015e94:	60f8      	str	r0, [r7, #12]
 8015e96:	607a      	str	r2, [r7, #4]
 8015e98:	461a      	mov	r2, r3
 8015e9a:	460b      	mov	r3, r1
 8015e9c:	72fb      	strb	r3, [r7, #11]
 8015e9e:	4613      	mov	r3, r2
 8015ea0:	813b      	strh	r3, [r7, #8]
    return escribirBufferMemI2C(bus->bus_u.i2c.numI2C, bus->bus_u.i2c.dir, reg, datoTx, longitud);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	7899      	ldrb	r1, [r3, #2]
 8015eac:	7afa      	ldrb	r2, [r7, #11]
 8015eae:	893b      	ldrh	r3, [r7, #8]
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f000 f8ca 	bl	801604c <escribirBufferMemI2C>
 8015eb8:	4603      	mov	r3, r0
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	3710      	adds	r7, #16
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}

08015ec2 <leerBufferRegistroBusI2C>:
**  Descripcion:    Lee un buffer de un registro por el I2C
**  Parametros:     Bus, registro a leer, buffer de recepcion, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
bool leerBufferRegistroBusI2C(const bus_t *bus, uint8_t reg, uint8_t *datoRx, uint8_t longitud)
{
 8015ec2:	b580      	push	{r7, lr}
 8015ec4:	b086      	sub	sp, #24
 8015ec6:	af02      	add	r7, sp, #8
 8015ec8:	60f8      	str	r0, [r7, #12]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	461a      	mov	r2, r3
 8015ece:	460b      	mov	r3, r1
 8015ed0:	72fb      	strb	r3, [r7, #11]
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	72bb      	strb	r3, [r7, #10]
    return leerBufferMemI2C(bus->bus_u.i2c.numI2C, bus->bus_u.i2c.dir, reg, datoRx, longitud);
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	7899      	ldrb	r1, [r3, #2]
 8015ee0:	7abb      	ldrb	r3, [r7, #10]
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	7afa      	ldrb	r2, [r7, #11]
 8015ee6:	9300      	str	r3, [sp, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f000 f8e0 	bl	80160ae <leerBufferMemI2C>
 8015eee:	4603      	mov	r3, r0
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3710      	adds	r7, #16
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <configI2C>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configI2C_t, NUM_MAX_I2C, configI2C);
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	4a03      	ldr	r2, [pc, #12]	; (8015f14 <configI2C+0x1c>)
 8015f06:	4413      	add	r3, r2
 8015f08:	4618      	mov	r0, r3
 8015f0a:	370c      	adds	r7, #12
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr
 8015f14:	2000a7c0 	.word	0x2000a7c0

08015f18 <iniciarDriverI2C>:
**  Descripcion:    Inicia el dispositivo I2C
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverI2C(numI2C_e numI2C)
{
 8015f18:	b590      	push	{r4, r7, lr}
 8015f1a:	b085      	sub	sp, #20
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	71fb      	strb	r3, [r7, #7]
    i2c_t *driver = punteroI2C(numI2C);
 8015f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7ff fefa 	bl	8015d20 <punteroI2C>
 8015f2c:	60f8      	str	r0, [r7, #12]

	if (!driver->hal.asignado) {
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	791b      	ldrb	r3, [r3, #4]
 8015f32:	f083 0301 	eor.w	r3, r3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d044      	beq.n	8015fc6 <iniciarDriverI2C+0xae>
	    if (!asignarHALi2c(numI2C))
 8015f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 f971 	bl	8016228 <asignarHALi2c>
 8015f46:	4603      	mov	r3, r0
 8015f48:	f083 0301 	eor.w	r3, r3, #1
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d001      	beq.n	8015f56 <iniciarDriverI2C+0x3e>
	        return false;
 8015f52:	2300      	movs	r3, #0
 8015f54:	e072      	b.n	801603c <iniciarDriverI2C+0x124>
	    else {
	        habilitarRelojI2C(numI2C);
 8015f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 f902 	bl	8016164 <habilitarRelojI2C>

	        // Configura los pines
	        configurarIO(driver->hal.pinSCL.pin, configI2C(numI2C)->pullup ? CONFIG_IO(GPIO_MODE_AF_OD, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLUP) : CONFIG_IO(GPIO_MODE_AF_OD, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_NOPULL), driver->hal.pinSCL.af);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8015f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7ff ffc4 	bl	8015ef8 <configI2C>
 8015f70:	4603      	mov	r3, r0
 8015f72:	78db      	ldrb	r3, [r3, #3]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d002      	beq.n	8015f7e <iniciarDriverI2C+0x66>
 8015f78:	f640 3112 	movw	r1, #2834	; 0xb12
 8015f7c:	e001      	b.n	8015f82 <iniciarDriverI2C+0x6a>
 8015f7e:	f240 3112 	movw	r1, #786	; 0x312
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8015f88:	461a      	mov	r2, r3
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f000 fa10 	bl	80163b0 <configurarIO>
	        configurarIO(driver->hal.pinSDA.pin, configI2C(numI2C)->pullup ? CONFIG_IO(GPIO_MODE_AF_OD, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLUP) : CONFIG_IO(GPIO_MODE_AF_OD, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_NOPULL), driver->hal.pinSDA.af);
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	f893 4056 	ldrb.w	r4, [r3, #86]	; 0x56
 8015f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7ff ffac 	bl	8015ef8 <configI2C>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	78db      	ldrb	r3, [r3, #3]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d002      	beq.n	8015fae <iniciarDriverI2C+0x96>
 8015fa8:	f640 3112 	movw	r1, #2834	; 0xb12
 8015fac:	e001      	b.n	8015fb2 <iniciarDriverI2C+0x9a>
 8015fae:	f240 3112 	movw	r1, #786	; 0x312
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8015fb8:	461a      	mov	r2, r3
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f000 f9f8 	bl	80163b0 <configurarIO>

            driver->hal.asignado = true;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	711a      	strb	r2, [r3, #4]
	    }
	}

    // Resetea el dispositivo
    HAL_I2C_DeInit(&driver->hal.hi2c);
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3308      	adds	r3, #8
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f014 ff38 	bl	802ae40 <HAL_I2C_DeInit>

    if (configI2C(numI2C)->overclock)
 8015fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7ff ff8f 	bl	8015ef8 <configI2C>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	789b      	ldrb	r3, [r3, #2]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d003      	beq.n	8015fea <iniciarDriverI2C+0xd2>
    	driver->hal.hi2c.Init.Timing = I2C_RELOJ_OVERCLOCK;     // 800khz Velocidad maxima testeada
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	4a17      	ldr	r2, [pc, #92]	; (8016044 <iniciarDriverI2C+0x12c>)
 8015fe6:	60da      	str	r2, [r3, #12]
 8015fe8:	e002      	b.n	8015ff0 <iniciarDriverI2C+0xd8>
    else
    	driver->hal.hi2c.Init.Timing = I2C_RELOJ_RAPIDO;        // Valor por defecto
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	4a16      	ldr	r2, [pc, #88]	; (8016048 <iniciarDriverI2C+0x130>)
 8015fee:	60da      	str	r2, [r3, #12]

    driver->hal.hi2c.Init.OwnAddress1 = 0x0;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	611a      	str	r2, [r3, #16]
    driver->hal.hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	615a      	str	r2, [r3, #20]
    driver->hal.hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2200      	movs	r2, #0
 8016000:	619a      	str	r2, [r3, #24]
    driver->hal.hi2c.Init.OwnAddress2 = 0x0;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	2200      	movs	r2, #0
 8016006:	61da      	str	r2, [r3, #28]
    driver->hal.hi2c.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2200      	movs	r2, #0
 801600c:	621a      	str	r2, [r3, #32]
    driver->hal.hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2200      	movs	r2, #0
 8016012:	625a      	str	r2, [r3, #36]	; 0x24
    driver->hal.hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2200      	movs	r2, #0
 8016018:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_I2C_Init(&driver->hal.hi2c) != HAL_OK)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	3308      	adds	r3, #8
 801601e:	4618      	mov	r0, r3
 8016020:	f014 fe7e 	bl	802ad20 <HAL_I2C_Init>
 8016024:	4603      	mov	r3, r0
 8016026:	2b00      	cmp	r3, #0
 8016028:	d001      	beq.n	801602e <iniciarDriverI2C+0x116>
        return false;
 801602a:	2300      	movs	r3, #0
 801602c:	e006      	b.n	801603c <iniciarDriverI2C+0x124>

    // Habilita el filtro analogico
    HAL_I2CEx_ConfigAnalogFilter(&driver->hal.hi2c, I2C_ANALOGFILTER_ENABLE);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	3308      	adds	r3, #8
 8016032:	2100      	movs	r1, #0
 8016034:	4618      	mov	r0, r3
 8016036:	f015 fb9f 	bl	802b778 <HAL_I2CEx_ConfigAnalogFilter>
    return true;
 801603a:	2301      	movs	r3, #1
}
 801603c:	4618      	mov	r0, r3
 801603e:	3714      	adds	r7, #20
 8016040:	46bd      	mov	sp, r7
 8016042:	bd90      	pop	{r4, r7, pc}
 8016044:	00500d1d 	.word	0x00500d1d
 8016048:	6000030d 	.word	0x6000030d

0801604c <escribirBufferMemI2C>:
**  Descripcion:    Escribe un buffer en un registro
**  Parametros:     Dispositivo, direccion I2C, registro a escribir, buffer, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool escribirBufferMemI2C(numI2C_e numI2C, uint8_t dir, uint8_t reg, uint8_t *datoTx, uint16_t longitud)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b088      	sub	sp, #32
 8016050:	af04      	add	r7, sp, #16
 8016052:	603b      	str	r3, [r7, #0]
 8016054:	4603      	mov	r3, r0
 8016056:	71fb      	strb	r3, [r7, #7]
 8016058:	460b      	mov	r3, r1
 801605a:	71bb      	strb	r3, [r7, #6]
 801605c:	4613      	mov	r3, r2
 801605e:	717b      	strb	r3, [r7, #5]
    I2C_HandleTypeDef *hi2c = &punteroI2C(numI2C)->hal.hi2c;
 8016060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff fe5b 	bl	8015d20 <punteroI2C>
 801606a:	4603      	mov	r3, r0
 801606c:	3308      	adds	r3, #8
 801606e:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Write(hi2c, dir << 1, reg, I2C_MEMADD_SIZE_8BIT, datoTx, longitud, TIMEOUT_DEFECTO_I2C) != HAL_OK) {
 8016070:	79bb      	ldrb	r3, [r7, #6]
 8016072:	b29b      	uxth	r3, r3
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	b299      	uxth	r1, r3
 8016078:	797b      	ldrb	r3, [r7, #5]
 801607a:	b29a      	uxth	r2, r3
 801607c:	230a      	movs	r3, #10
 801607e:	9302      	str	r3, [sp, #8]
 8016080:	8b3b      	ldrh	r3, [r7, #24]
 8016082:	9301      	str	r3, [sp, #4]
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	2301      	movs	r3, #1
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f014 ff1c 	bl	802aec8 <HAL_I2C_Mem_Write>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d006      	beq.n	80160a4 <escribirBufferMemI2C+0x58>
        errorCallbackI2C(numI2C);
 8016096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801609a:	4618      	mov	r0, r3
 801609c:	f7ff feae 	bl	8015dfc <errorCallbackI2C>
        return false;
 80160a0:	2300      	movs	r3, #0
 80160a2:	e000      	b.n	80160a6 <escribirBufferMemI2C+0x5a>
    }

    return true;
 80160a4:	2301      	movs	r3, #1
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}

080160ae <leerBufferMemI2C>:
**  Descripcion:    Lee un buffer de un registro
**  Parametros:     Dispositivo, direccion I2C, registro a leer, buffer de recepcion, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool leerBufferMemI2C(numI2C_e numI2C, uint8_t dir, uint8_t reg, uint8_t *datoRx, uint16_t longitud)
{
 80160ae:	b580      	push	{r7, lr}
 80160b0:	b088      	sub	sp, #32
 80160b2:	af04      	add	r7, sp, #16
 80160b4:	603b      	str	r3, [r7, #0]
 80160b6:	4603      	mov	r3, r0
 80160b8:	71fb      	strb	r3, [r7, #7]
 80160ba:	460b      	mov	r3, r1
 80160bc:	71bb      	strb	r3, [r7, #6]
 80160be:	4613      	mov	r3, r2
 80160c0:	717b      	strb	r3, [r7, #5]
    I2C_HandleTypeDef *hi2c = &punteroI2C(numI2C)->hal.hi2c;
 80160c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ff fe2a 	bl	8015d20 <punteroI2C>
 80160cc:	4603      	mov	r3, r0
 80160ce:	3308      	adds	r3, #8
 80160d0:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(hi2c, dir << 1, reg, I2C_MEMADD_SIZE_8BIT, datoRx, longitud, TIMEOUT_DEFECTO_I2C) != HAL_OK) {
 80160d2:	79bb      	ldrb	r3, [r7, #6]
 80160d4:	b29b      	uxth	r3, r3
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	b299      	uxth	r1, r3
 80160da:	797b      	ldrb	r3, [r7, #5]
 80160dc:	b29a      	uxth	r2, r3
 80160de:	230a      	movs	r3, #10
 80160e0:	9302      	str	r3, [sp, #8]
 80160e2:	8b3b      	ldrh	r3, [r7, #24]
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	9300      	str	r3, [sp, #0]
 80160ea:	2301      	movs	r3, #1
 80160ec:	68f8      	ldr	r0, [r7, #12]
 80160ee:	f014 ffff 	bl	802b0f0 <HAL_I2C_Mem_Read>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d006      	beq.n	8016106 <leerBufferMemI2C+0x58>
        errorCallbackI2C(numI2C);
 80160f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7ff fe7d 	bl	8015dfc <errorCallbackI2C>
        return false;
 8016102:	2300      	movs	r3, #0
 8016104:	e000      	b.n	8016108 <leerBufferMemI2C+0x5a>
    }

    return true;
 8016106:	2301      	movs	r3, #1
}
 8016108:	4618      	mov	r0, r3
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <ocupadoI2C>:
**  Descripcion:    Comprueba si el I2C esta ocupado
**  Parametros:     Dispositivo
**  Retorno:        True si ocupado
****************************************************************************************/
CODIGO_RAPIDO bool ocupadoI2C(numI2C_e numI2C)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	4603      	mov	r3, r0
 8016118:	71fb      	strb	r3, [r7, #7]
    i2c_t *driver = punteroI2C(numI2C);
 801611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801611e:	4618      	mov	r0, r3
 8016120:	f7ff fdfe 	bl	8015d20 <punteroI2C>
 8016124:	60f8      	str	r0, [r7, #12]

    if (HAL_I2C_GetState(&driver->hal.hi2c) == HAL_I2C_STATE_BUSY || HAL_I2C_GetState(&driver->hal.hi2c) == HAL_I2C_STATE_BUSY_TX || HAL_I2C_GetState(&driver->hal.hi2c) == HAL_I2C_STATE_BUSY_RX)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	3308      	adds	r3, #8
 801612a:	4618      	mov	r0, r3
 801612c:	f015 f8fa 	bl	802b324 <HAL_I2C_GetState>
 8016130:	4603      	mov	r3, r0
 8016132:	2b24      	cmp	r3, #36	; 0x24
 8016134:	d00f      	beq.n	8016156 <ocupadoI2C+0x46>
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	3308      	adds	r3, #8
 801613a:	4618      	mov	r0, r3
 801613c:	f015 f8f2 	bl	802b324 <HAL_I2C_GetState>
 8016140:	4603      	mov	r3, r0
 8016142:	2b21      	cmp	r3, #33	; 0x21
 8016144:	d007      	beq.n	8016156 <ocupadoI2C+0x46>
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	3308      	adds	r3, #8
 801614a:	4618      	mov	r0, r3
 801614c:	f015 f8ea 	bl	802b324 <HAL_I2C_GetState>
 8016150:	4603      	mov	r3, r0
 8016152:	2b22      	cmp	r3, #34	; 0x22
 8016154:	d101      	bne.n	801615a <ocupadoI2C+0x4a>
        return true;
 8016156:	2301      	movs	r3, #1
 8016158:	e000      	b.n	801615c <ocupadoI2C+0x4c>
    else
        return false;
 801615a:	2300      	movs	r3, #0
}
 801615c:	4618      	mov	r0, r3
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <habilitarRelojI2C>:
**  Descripcion:    Habilita el reloj del I2C
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojI2C(numI2C_e numI2C)
{
 8016164:	b480      	push	{r7}
 8016166:	b087      	sub	sp, #28
 8016168:	af00      	add	r7, sp, #0
 801616a:	4603      	mov	r3, r0
 801616c:	71fb      	strb	r3, [r7, #7]
    switch (numI2C) {
 801616e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016172:	2b03      	cmp	r3, #3
 8016174:	d83e      	bhi.n	80161f4 <habilitarRelojI2C+0x90>
 8016176:	a201      	add	r2, pc, #4	; (adr r2, 801617c <habilitarRelojI2C+0x18>)
 8016178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801617c:	0801618d 	.word	0x0801618d
 8016180:	080161a7 	.word	0x080161a7
 8016184:	080161c1 	.word	0x080161c1
 8016188:	080161db 	.word	0x080161db
        case I2C_1:
            __HAL_RCC_I2C1_CLK_ENABLE();
 801618c:	4b1d      	ldr	r3, [pc, #116]	; (8016204 <habilitarRelojI2C+0xa0>)
 801618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016190:	4a1c      	ldr	r2, [pc, #112]	; (8016204 <habilitarRelojI2C+0xa0>)
 8016192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016196:	6413      	str	r3, [r2, #64]	; 0x40
 8016198:	4b1a      	ldr	r3, [pc, #104]	; (8016204 <habilitarRelojI2C+0xa0>)
 801619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80161a0:	617b      	str	r3, [r7, #20]
 80161a2:	697b      	ldr	r3, [r7, #20]
        	break;
 80161a4:	e027      	b.n	80161f6 <habilitarRelojI2C+0x92>

        case I2C_2:
            __HAL_RCC_I2C2_CLK_ENABLE();
 80161a6:	4b17      	ldr	r3, [pc, #92]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161aa:	4a16      	ldr	r2, [pc, #88]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80161b0:	6413      	str	r3, [r2, #64]	; 0x40
 80161b2:	4b14      	ldr	r3, [pc, #80]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80161ba:	613b      	str	r3, [r7, #16]
 80161bc:	693b      	ldr	r3, [r7, #16]
        	break;
 80161be:	e01a      	b.n	80161f6 <habilitarRelojI2C+0x92>

        case I2C_3:
            __HAL_RCC_I2C3_CLK_ENABLE();
 80161c0:	4b10      	ldr	r3, [pc, #64]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161c4:	4a0f      	ldr	r2, [pc, #60]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80161ca:	6413      	str	r3, [r2, #64]	; 0x40
 80161cc:	4b0d      	ldr	r3, [pc, #52]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80161d4:	60fb      	str	r3, [r7, #12]
 80161d6:	68fb      	ldr	r3, [r7, #12]
        	break;
 80161d8:	e00d      	b.n	80161f6 <habilitarRelojI2C+0x92>

#ifndef STM32F722xx
        case I2C_4:
            __HAL_RCC_I2C4_CLK_ENABLE();
 80161da:	4b0a      	ldr	r3, [pc, #40]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161de:	4a09      	ldr	r2, [pc, #36]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80161e4:	6413      	str	r3, [r2, #64]	; 0x40
 80161e6:	4b07      	ldr	r3, [pc, #28]	; (8016204 <habilitarRelojI2C+0xa0>)
 80161e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80161ee:	60bb      	str	r3, [r7, #8]
 80161f0:	68bb      	ldr	r3, [r7, #8]
        	break;
 80161f2:	e000      	b.n	80161f6 <habilitarRelojI2C+0x92>
#endif

        default:
            break;
 80161f4:	bf00      	nop
    }
}
 80161f6:	bf00      	nop
 80161f8:	371c      	adds	r7, #28
 80161fa:	46bd      	mov	sp, r7
 80161fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop
 8016204:	40023800 	.word	0x40023800

08016208 <configI2C>:
 8016208:	b480      	push	{r7}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4a03      	ldr	r2, [pc, #12]	; (8016224 <configI2C+0x1c>)
 8016216:	4413      	add	r3, r2
 8016218:	4618      	mov	r0, r3
 801621a:	370c      	adds	r7, #12
 801621c:	46bd      	mov	sp, r7
 801621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016222:	4770      	bx	lr
 8016224:	2000a7c0 	.word	0x2000a7c0

08016228 <asignarHALi2c>:
**  Descripcion:    Asigna el HAL a la estructura del driver
**  Parametros:     Numero del driver
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALi2c(numI2C_e numI2C)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	4603      	mov	r3, r0
 8016230:	71fb      	strb	r3, [r7, #7]
    i2c_t *driver = punteroI2C(numI2C);
 8016232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016236:	4618      	mov	r0, r3
 8016238:	f7ff fd72 	bl	8015d20 <punteroI2C>
 801623c:	60f8      	str	r0, [r7, #12]

    // Asignamos los pines
    if (!pinI2C(numI2C, configI2C(numI2C)->pinSCL, &driver->hal.pinSCL))
 801623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016242:	4618      	mov	r0, r3
 8016244:	f7ff ffe0 	bl	8016208 <configI2C>
 8016248:	4603      	mov	r3, r0
 801624a:	7819      	ldrb	r1, [r3, #0]
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8016252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016256:	4618      	mov	r0, r3
 8016258:	f000 f832 	bl	80162c0 <pinI2C>
 801625c:	4603      	mov	r3, r0
 801625e:	f083 0301 	eor.w	r3, r3, #1
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	d001      	beq.n	801626c <asignarHALi2c+0x44>
        return false;
 8016268:	2300      	movs	r3, #0
 801626a:	e023      	b.n	80162b4 <asignarHALi2c+0x8c>

    if (!pinI2C(numI2C, configI2C(numI2C)->pinSDA, &driver->hal.pinSDA))
 801626c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016270:	4618      	mov	r0, r3
 8016272:	f7ff ffc9 	bl	8016208 <configI2C>
 8016276:	4603      	mov	r3, r0
 8016278:	7859      	ldrb	r1, [r3, #1]
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8016280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016284:	4618      	mov	r0, r3
 8016286:	f000 f81b 	bl	80162c0 <pinI2C>
 801628a:	4603      	mov	r3, r0
 801628c:	f083 0301 	eor.w	r3, r3, #1
 8016290:	b2db      	uxtb	r3, r3
 8016292:	2b00      	cmp	r3, #0
 8016294:	d001      	beq.n	801629a <asignarHALi2c+0x72>
        return false;
 8016296:	2300      	movs	r3, #0
 8016298:	e00c      	b.n	80162b4 <asignarHALi2c+0x8c>

    // Asignamos la instancia
    driver->hal.hi2c.Instance = hardwareI2C[numI2C].reg;
 801629a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801629e:	4907      	ldr	r1, [pc, #28]	; (80162bc <asignarHALi2c+0x94>)
 80162a0:	4613      	mov	r3, r2
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	4413      	add	r3, r2
 80162a6:	009b      	lsls	r3, r3, #2
 80162a8:	440b      	add	r3, r1
 80162aa:	3304      	adds	r3, #4
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	609a      	str	r2, [r3, #8]
    return true;
 80162b2:	2301      	movs	r3, #1
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	3710      	adds	r7, #16
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	0803ae18 	.word	0x0803ae18

080162c0 <pinI2C>:
**  Descripcion:    Encuentra el pin de la tabla de hardware
**  Parametros:     Numero del I2C, pin a buscar, pin del driver
**  Retorno:        True si OK
****************************************************************************************/
bool pinI2C(numI2C_e numI2C, uint8_t pinBusqueda, pin_t *pinDriver)
{
 80162c0:	b480      	push	{r7}
 80162c2:	b085      	sub	sp, #20
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	4603      	mov	r3, r0
 80162c8:	603a      	str	r2, [r7, #0]
 80162ca:	71fb      	strb	r3, [r7, #7]
 80162cc:	460b      	mov	r3, r1
 80162ce:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_I2C; i++) {
 80162d0:	2300      	movs	r3, #0
 80162d2:	73fb      	strb	r3, [r7, #15]
 80162d4:	e060      	b.n	8016398 <pinI2C+0xd8>
        if (pinBusqueda == hardwareI2C[numI2C].pinSCL[i].pin) {
 80162d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80162da:	7bf9      	ldrb	r1, [r7, #15]
 80162dc:	4833      	ldr	r0, [pc, #204]	; (80163ac <pinI2C+0xec>)
 80162de:	4613      	mov	r3, r2
 80162e0:	009b      	lsls	r3, r3, #2
 80162e2:	4413      	add	r3, r2
 80162e4:	005b      	lsls	r3, r3, #1
 80162e6:	440b      	add	r3, r1
 80162e8:	3304      	adds	r3, #4
 80162ea:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80162ee:	79ba      	ldrb	r2, [r7, #6]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d11e      	bne.n	8016332 <pinI2C+0x72>
        	pinDriver->pin = hardwareI2C[numI2C].pinSCL[i].pin;
 80162f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80162f8:	7bf9      	ldrb	r1, [r7, #15]
 80162fa:	482c      	ldr	r0, [pc, #176]	; (80163ac <pinI2C+0xec>)
 80162fc:	4613      	mov	r3, r2
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4413      	add	r3, r2
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	440b      	add	r3, r1
 8016306:	3304      	adds	r3, #4
 8016308:	f810 2013 	ldrb.w	r2, [r0, r3, lsl #1]
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareI2C[numI2C].pinSCL[i].af;
 8016310:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016314:	7bf9      	ldrb	r1, [r7, #15]
 8016316:	4825      	ldr	r0, [pc, #148]	; (80163ac <pinI2C+0xec>)
 8016318:	4613      	mov	r3, r2
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	4413      	add	r3, r2
 801631e:	005b      	lsls	r3, r3, #1
 8016320:	440b      	add	r3, r1
 8016322:	3304      	adds	r3, #4
 8016324:	005b      	lsls	r3, r3, #1
 8016326:	4403      	add	r3, r0
 8016328:	785a      	ldrb	r2, [r3, #1]
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	705a      	strb	r2, [r3, #1]
            return true;
 801632e:	2301      	movs	r3, #1
 8016330:	e036      	b.n	80163a0 <pinI2C+0xe0>
        }

        if (pinBusqueda == hardwareI2C[numI2C].pinSDA[i].pin) {
 8016332:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016336:	7bf9      	ldrb	r1, [r7, #15]
 8016338:	481c      	ldr	r0, [pc, #112]	; (80163ac <pinI2C+0xec>)
 801633a:	4613      	mov	r3, r2
 801633c:	009b      	lsls	r3, r3, #2
 801633e:	4413      	add	r3, r2
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	440b      	add	r3, r1
 8016344:	3304      	adds	r3, #4
 8016346:	005b      	lsls	r3, r3, #1
 8016348:	4403      	add	r3, r0
 801634a:	799b      	ldrb	r3, [r3, #6]
 801634c:	79ba      	ldrb	r2, [r7, #6]
 801634e:	429a      	cmp	r2, r3
 8016350:	d11f      	bne.n	8016392 <pinI2C+0xd2>
        	pinDriver->pin = hardwareI2C[numI2C].pinSDA[i].pin;
 8016352:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016356:	7bf9      	ldrb	r1, [r7, #15]
 8016358:	4814      	ldr	r0, [pc, #80]	; (80163ac <pinI2C+0xec>)
 801635a:	4613      	mov	r3, r2
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	4413      	add	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	440b      	add	r3, r1
 8016364:	3304      	adds	r3, #4
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4403      	add	r3, r0
 801636a:	799a      	ldrb	r2, [r3, #6]
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareI2C[numI2C].pinSDA[i].af;
 8016370:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016374:	7bf9      	ldrb	r1, [r7, #15]
 8016376:	480d      	ldr	r0, [pc, #52]	; (80163ac <pinI2C+0xec>)
 8016378:	4613      	mov	r3, r2
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	4413      	add	r3, r2
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	440b      	add	r3, r1
 8016382:	3304      	adds	r3, #4
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	4403      	add	r3, r0
 8016388:	79da      	ldrb	r2, [r3, #7]
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	705a      	strb	r2, [r3, #1]
            return true;
 801638e:	2301      	movs	r3, #1
 8016390:	e006      	b.n	80163a0 <pinI2C+0xe0>
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_I2C; i++) {
 8016392:	7bfb      	ldrb	r3, [r7, #15]
 8016394:	3301      	adds	r3, #1
 8016396:	73fb      	strb	r3, [r7, #15]
 8016398:	7bfb      	ldrb	r3, [r7, #15]
 801639a:	2b02      	cmp	r3, #2
 801639c:	d99b      	bls.n	80162d6 <pinI2C+0x16>
        }
    }

    return false;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3714      	adds	r7, #20
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	0803ae18 	.word	0x0803ae18

080163b0 <configurarIO>:
**  Descripcion:    Configura el pin dada una configuracion
**  Parametros:     Tag del pin a configurar, configuracion, funcion especial
**  Retorno:        Ninguno
****************************************************************************************/
void configurarIO(uint8_t tag, uint16_t cfg, uint8_t af)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b088      	sub	sp, #32
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	71fb      	strb	r3, [r7, #7]
 80163ba:	460b      	mov	r3, r1
 80163bc:	80bb      	strh	r3, [r7, #4]
 80163be:	4613      	mov	r3, r2
 80163c0:	71bb      	strb	r3, [r7, #6]
    if (TAG_VACIO(tag))
 80163c2:	79fb      	ldrb	r3, [r7, #7]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d036      	beq.n	8016436 <configurarIO+0x86>
        return;

    // Habilitacion del reloj
    gpio_e puertoGPIO = PUERTO_GPIO(tag) - 1;
 80163c8:	79fb      	ldrb	r3, [r7, #7]
 80163ca:	091b      	lsrs	r3, r3, #4
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	3b01      	subs	r3, #1
 80163d0:	77fb      	strb	r3, [r7, #31]

    if (!relojHabilitado[puertoGPIO])
 80163d2:	7ffb      	ldrb	r3, [r7, #31]
 80163d4:	4a1a      	ldr	r2, [pc, #104]	; (8016440 <configurarIO+0x90>)
 80163d6:	5cd3      	ldrb	r3, [r2, r3]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d103      	bne.n	80163e4 <configurarIO+0x34>
        habilitarRelojIO(puertoGPIO);
 80163dc:	7ffb      	ldrb	r3, [r7, #31]
 80163de:	4618      	mov	r0, r3
 80163e0:	f000 f832 	bl	8016448 <habilitarRelojIO>

    // Configuracion del GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {
        .Pin = DEFIO_PIN(tag),
 80163e4:	79fb      	ldrb	r3, [r7, #7]
 80163e6:	f003 030f 	and.w	r3, r3, #15
 80163ea:	2201      	movs	r2, #1
 80163ec:	fa02 f303 	lsl.w	r3, r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 80163f0:	60bb      	str	r3, [r7, #8]
        .Mode = cfg & 0x00FF,
 80163f2:	88bb      	ldrh	r3, [r7, #4]
 80163f4:	b2db      	uxtb	r3, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 80163f6:	60fb      	str	r3, [r7, #12]
        .Speed = (cfg >> 8) & 0x0003,
        .Pull = (cfg >> 11) & 0x0003,
 80163f8:	88bb      	ldrh	r3, [r7, #4]
 80163fa:	0adb      	lsrs	r3, r3, #11
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	f003 0303 	and.w	r3, r3, #3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8016402:	613b      	str	r3, [r7, #16]
        .Speed = (cfg >> 8) & 0x0003,
 8016404:	88bb      	ldrh	r3, [r7, #4]
 8016406:	0a1b      	lsrs	r3, r3, #8
 8016408:	b29b      	uxth	r3, r3
 801640a:	f003 0303 	and.w	r3, r3, #3
    GPIO_InitTypeDef GPIO_InitStruct = {
 801640e:	617b      	str	r3, [r7, #20]
 8016410:	79bb      	ldrb	r3, [r7, #6]
 8016412:	61bb      	str	r3, [r7, #24]
        .Alternate = af
    };

    HAL_GPIO_Init(DEFIO_GPIO(tag), &GPIO_InitStruct);
 8016414:	79fb      	ldrb	r3, [r7, #7]
 8016416:	091b      	lsrs	r3, r3, #4
 8016418:	b2db      	uxtb	r3, r3
 801641a:	3b01      	subs	r3, #1
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	021b      	lsls	r3, r3, #8
 8016420:	461a      	mov	r2, r3
 8016422:	4b08      	ldr	r3, [pc, #32]	; (8016444 <configurarIO+0x94>)
 8016424:	4413      	add	r3, r2
 8016426:	461a      	mov	r2, r3
 8016428:	f107 0308 	add.w	r3, r7, #8
 801642c:	4619      	mov	r1, r3
 801642e:	4610      	mov	r0, r2
 8016430:	f014 fa98 	bl	802a964 <HAL_GPIO_Init>
 8016434:	e000      	b.n	8016438 <configurarIO+0x88>
        return;
 8016436:	bf00      	nop
}
 8016438:	3720      	adds	r7, #32
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	200032c4 	.word	0x200032c4
 8016444:	40020000 	.word	0x40020000

08016448 <habilitarRelojIO>:
**  Descripcion:    Habilita el reloj de un GPIO
**  Parametros:     GPIO
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojIO(gpio_e gpio)
{
 8016448:	b480      	push	{r7}
 801644a:	b08b      	sub	sp, #44	; 0x2c
 801644c:	af00      	add	r7, sp, #0
 801644e:	4603      	mov	r3, r0
 8016450:	71fb      	strb	r3, [r7, #7]
    switch (gpio) {
 8016452:	79fb      	ldrb	r3, [r7, #7]
 8016454:	2b06      	cmp	r3, #6
 8016456:	f200 8081 	bhi.w	801655c <habilitarRelojIO+0x114>
 801645a:	a201      	add	r2, pc, #4	; (adr r2, 8016460 <habilitarRelojIO+0x18>)
 801645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016460:	0801647d 	.word	0x0801647d
 8016464:	0801649d 	.word	0x0801649d
 8016468:	080164bd 	.word	0x080164bd
 801646c:	080164dd 	.word	0x080164dd
 8016470:	080164fd 	.word	0x080164fd
 8016474:	0801651d 	.word	0x0801651d
 8016478:	0801653d 	.word	0x0801653d
        case GPIO_A:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 801647c:	4b3a      	ldr	r3, [pc, #232]	; (8016568 <habilitarRelojIO+0x120>)
 801647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016480:	4a39      	ldr	r2, [pc, #228]	; (8016568 <habilitarRelojIO+0x120>)
 8016482:	f043 0301 	orr.w	r3, r3, #1
 8016486:	6313      	str	r3, [r2, #48]	; 0x30
 8016488:	4b37      	ldr	r3, [pc, #220]	; (8016568 <habilitarRelojIO+0x120>)
 801648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801648c:	f003 0301 	and.w	r3, r3, #1
 8016490:	627b      	str	r3, [r7, #36]	; 0x24
 8016492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            relojHabilitado[GPIO_A] = true;
 8016494:	4b35      	ldr	r3, [pc, #212]	; (801656c <habilitarRelojIO+0x124>)
 8016496:	2201      	movs	r2, #1
 8016498:	701a      	strb	r2, [r3, #0]
            break;
 801649a:	e05f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_B:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 801649c:	4b32      	ldr	r3, [pc, #200]	; (8016568 <habilitarRelojIO+0x120>)
 801649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164a0:	4a31      	ldr	r2, [pc, #196]	; (8016568 <habilitarRelojIO+0x120>)
 80164a2:	f043 0302 	orr.w	r3, r3, #2
 80164a6:	6313      	str	r3, [r2, #48]	; 0x30
 80164a8:	4b2f      	ldr	r3, [pc, #188]	; (8016568 <habilitarRelojIO+0x120>)
 80164aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164ac:	f003 0302 	and.w	r3, r3, #2
 80164b0:	623b      	str	r3, [r7, #32]
 80164b2:	6a3b      	ldr	r3, [r7, #32]
            relojHabilitado[GPIO_B] = true;
 80164b4:	4b2d      	ldr	r3, [pc, #180]	; (801656c <habilitarRelojIO+0x124>)
 80164b6:	2201      	movs	r2, #1
 80164b8:	705a      	strb	r2, [r3, #1]
            break;
 80164ba:	e04f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_C:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80164bc:	4b2a      	ldr	r3, [pc, #168]	; (8016568 <habilitarRelojIO+0x120>)
 80164be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164c0:	4a29      	ldr	r2, [pc, #164]	; (8016568 <habilitarRelojIO+0x120>)
 80164c2:	f043 0304 	orr.w	r3, r3, #4
 80164c6:	6313      	str	r3, [r2, #48]	; 0x30
 80164c8:	4b27      	ldr	r3, [pc, #156]	; (8016568 <habilitarRelojIO+0x120>)
 80164ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164cc:	f003 0304 	and.w	r3, r3, #4
 80164d0:	61fb      	str	r3, [r7, #28]
 80164d2:	69fb      	ldr	r3, [r7, #28]
            relojHabilitado[GPIO_C] = true;
 80164d4:	4b25      	ldr	r3, [pc, #148]	; (801656c <habilitarRelojIO+0x124>)
 80164d6:	2201      	movs	r2, #1
 80164d8:	709a      	strb	r2, [r3, #2]
            break;
 80164da:	e03f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_D:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80164dc:	4b22      	ldr	r3, [pc, #136]	; (8016568 <habilitarRelojIO+0x120>)
 80164de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164e0:	4a21      	ldr	r2, [pc, #132]	; (8016568 <habilitarRelojIO+0x120>)
 80164e2:	f043 0308 	orr.w	r3, r3, #8
 80164e6:	6313      	str	r3, [r2, #48]	; 0x30
 80164e8:	4b1f      	ldr	r3, [pc, #124]	; (8016568 <habilitarRelojIO+0x120>)
 80164ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164ec:	f003 0308 	and.w	r3, r3, #8
 80164f0:	61bb      	str	r3, [r7, #24]
 80164f2:	69bb      	ldr	r3, [r7, #24]
            relojHabilitado[GPIO_D] = true;
 80164f4:	4b1d      	ldr	r3, [pc, #116]	; (801656c <habilitarRelojIO+0x124>)
 80164f6:	2201      	movs	r2, #1
 80164f8:	70da      	strb	r2, [r3, #3]
            break;
 80164fa:	e02f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_E:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80164fc:	4b1a      	ldr	r3, [pc, #104]	; (8016568 <habilitarRelojIO+0x120>)
 80164fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016500:	4a19      	ldr	r2, [pc, #100]	; (8016568 <habilitarRelojIO+0x120>)
 8016502:	f043 0310 	orr.w	r3, r3, #16
 8016506:	6313      	str	r3, [r2, #48]	; 0x30
 8016508:	4b17      	ldr	r3, [pc, #92]	; (8016568 <habilitarRelojIO+0x120>)
 801650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801650c:	f003 0310 	and.w	r3, r3, #16
 8016510:	617b      	str	r3, [r7, #20]
 8016512:	697b      	ldr	r3, [r7, #20]
            relojHabilitado[GPIO_E] = true;
 8016514:	4b15      	ldr	r3, [pc, #84]	; (801656c <habilitarRelojIO+0x124>)
 8016516:	2201      	movs	r2, #1
 8016518:	711a      	strb	r2, [r3, #4]
            break;
 801651a:	e01f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_F:
            __HAL_RCC_GPIOF_CLK_ENABLE();
 801651c:	4b12      	ldr	r3, [pc, #72]	; (8016568 <habilitarRelojIO+0x120>)
 801651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016520:	4a11      	ldr	r2, [pc, #68]	; (8016568 <habilitarRelojIO+0x120>)
 8016522:	f043 0320 	orr.w	r3, r3, #32
 8016526:	6313      	str	r3, [r2, #48]	; 0x30
 8016528:	4b0f      	ldr	r3, [pc, #60]	; (8016568 <habilitarRelojIO+0x120>)
 801652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801652c:	f003 0320 	and.w	r3, r3, #32
 8016530:	613b      	str	r3, [r7, #16]
 8016532:	693b      	ldr	r3, [r7, #16]
            relojHabilitado[GPIO_F] = true;
 8016534:	4b0d      	ldr	r3, [pc, #52]	; (801656c <habilitarRelojIO+0x124>)
 8016536:	2201      	movs	r2, #1
 8016538:	715a      	strb	r2, [r3, #5]
            break;
 801653a:	e00f      	b.n	801655c <habilitarRelojIO+0x114>

        case GPIO_G:
            __HAL_RCC_GPIOG_CLK_ENABLE();
 801653c:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <habilitarRelojIO+0x120>)
 801653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016540:	4a09      	ldr	r2, [pc, #36]	; (8016568 <habilitarRelojIO+0x120>)
 8016542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016546:	6313      	str	r3, [r2, #48]	; 0x30
 8016548:	4b07      	ldr	r3, [pc, #28]	; (8016568 <habilitarRelojIO+0x120>)
 801654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016550:	60fb      	str	r3, [r7, #12]
 8016552:	68fb      	ldr	r3, [r7, #12]
            relojHabilitado[GPIO_G] = true;
 8016554:	4b05      	ldr	r3, [pc, #20]	; (801656c <habilitarRelojIO+0x124>)
 8016556:	2201      	movs	r2, #1
 8016558:	719a      	strb	r2, [r3, #6]
            break;
 801655a:	bf00      	nop
    }
}
 801655c:	bf00      	nop
 801655e:	372c      	adds	r7, #44	; 0x2c
 8016560:	46bd      	mov	sp, r7
 8016562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016566:	4770      	bx	lr
 8016568:	40023800 	.word	0x40023800
 801656c:	200032c4 	.word	0x200032c4

08016570 <escribirIO>:
**  Descripcion:    Escribe el estado del pin
**  Parametros:     Tag del pin, estado
**  Retorno:        Ninguno
****************************************************************************************/
void escribirIO(uint8_t tag, bool estado)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	4603      	mov	r3, r0
 8016578:	460a      	mov	r2, r1
 801657a:	71fb      	strb	r3, [r7, #7]
 801657c:	4613      	mov	r3, r2
 801657e:	71bb      	strb	r3, [r7, #6]
    if (!tag)
 8016580:	79fb      	ldrb	r3, [r7, #7]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d015      	beq.n	80165b2 <escribirIO+0x42>
        return;

    HAL_GPIO_WritePin(DEFIO_GPIO(tag), DEFIO_PIN(tag), estado ? 1 : 0);
 8016586:	79fb      	ldrb	r3, [r7, #7]
 8016588:	091b      	lsrs	r3, r3, #4
 801658a:	b2db      	uxtb	r3, r3
 801658c:	3b01      	subs	r3, #1
 801658e:	009b      	lsls	r3, r3, #2
 8016590:	021b      	lsls	r3, r3, #8
 8016592:	461a      	mov	r2, r3
 8016594:	4b09      	ldr	r3, [pc, #36]	; (80165bc <escribirIO+0x4c>)
 8016596:	4413      	add	r3, r2
 8016598:	4618      	mov	r0, r3
 801659a:	79fb      	ldrb	r3, [r7, #7]
 801659c:	f003 030f 	and.w	r3, r3, #15
 80165a0:	2201      	movs	r2, #1
 80165a2:	fa02 f303 	lsl.w	r3, r2, r3
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	79ba      	ldrb	r2, [r7, #6]
 80165aa:	4619      	mov	r1, r3
 80165ac:	f014 fb9e 	bl	802acec <HAL_GPIO_WritePin>
 80165b0:	e000      	b.n	80165b4 <escribirIO+0x44>
        return;
 80165b2:	bf00      	nop
}
 80165b4:	3708      	adds	r7, #8
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}
 80165ba:	bf00      	nop
 80165bc:	40020000 	.word	0x40020000

080165c0 <leerIO>:
**  Descripcion:    Lee el estado del pin
**  Parametros:     Tag del pin
**  Retorno:        Estado
****************************************************************************************/
bool leerIO(uint8_t tag)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	4603      	mov	r3, r0
 80165c8:	71fb      	strb	r3, [r7, #7]
    if (!tag)
 80165ca:	79fb      	ldrb	r3, [r7, #7]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d101      	bne.n	80165d4 <leerIO+0x14>
        return false;
 80165d0:	2300      	movs	r3, #0
 80165d2:	e019      	b.n	8016608 <leerIO+0x48>

    return HAL_GPIO_ReadPin(DEFIO_GPIO(tag), DEFIO_PIN(tag));
 80165d4:	79fb      	ldrb	r3, [r7, #7]
 80165d6:	091b      	lsrs	r3, r3, #4
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	3b01      	subs	r3, #1
 80165dc:	009b      	lsls	r3, r3, #2
 80165de:	021b      	lsls	r3, r3, #8
 80165e0:	461a      	mov	r2, r3
 80165e2:	4b0b      	ldr	r3, [pc, #44]	; (8016610 <leerIO+0x50>)
 80165e4:	4413      	add	r3, r2
 80165e6:	4618      	mov	r0, r3
 80165e8:	79fb      	ldrb	r3, [r7, #7]
 80165ea:	f003 030f 	and.w	r3, r3, #15
 80165ee:	2201      	movs	r2, #1
 80165f0:	fa02 f303 	lsl.w	r3, r2, r3
 80165f4:	b29b      	uxth	r3, r3
 80165f6:	4619      	mov	r1, r3
 80165f8:	f014 fb60 	bl	802acbc <HAL_GPIO_ReadPin>
 80165fc:	4603      	mov	r3, r0
 80165fe:	2b00      	cmp	r3, #0
 8016600:	bf14      	ite	ne
 8016602:	2301      	movne	r3, #1
 8016604:	2300      	moveq	r3, #0
 8016606:	b2db      	uxtb	r3, r3
}
 8016608:	4618      	mov	r0, r3
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}
 8016610:	40020000 	.word	0x40020000

08016614 <restaurarBasepriMem>:
**  Descripcion:    Restaura el BASEPRI con barrera de memoria global
**  Parametros:     Prioridad
**  Retorno:        Ninguno
****************************************************************************************/
static inline void restaurarBasepriMem(uint8_t *prio)
{
 8016614:	b480      	push	{r7}
 8016616:	b085      	sub	sp, #20
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*prio);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	f383 8811 	msr	BASEPRI, r3
}
 8016628:	bf00      	nop
}
 801662a:	bf00      	nop
 801662c:	3714      	adds	r7, #20
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr

08016636 <ajustarBasepriMax>:
**  Descripcion:    Ajusta el BASEPRI al valor maximo
**  Parametros:     Prioridad
**  Retorno:        Retorna 1
****************************************************************************************/
static inline uint8_t ajustarBasepriMax(uint8_t prio)
{
 8016636:	b480      	push	{r7}
 8016638:	b085      	sub	sp, #20
 801663a:	af00      	add	r7, sp, #0
 801663c:	4603      	mov	r3, r0
 801663e:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 8016640:	79fb      	ldrb	r3, [r7, #7]
 8016642:	60fb      	str	r3, [r7, #12]
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
{
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	f383 8812 	msr	BASEPRI_MAX, r3
}
 801664a:	bf00      	nop
    return 1;
 801664c:	2301      	movs	r3, #1
}
 801664e:	4618      	mov	r0, r3
 8016650:	3714      	adds	r7, #20
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr
	...

0801665c <NMI_Handler>:
**  Descripcion:    Interrupcion NMI
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void NMI_Handler(void)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	af00      	add	r7, sp, #0
#ifdef DEBUG
	printf("Interrupcion NMI\n");
 8016660:	4807      	ldr	r0, [pc, #28]	; (8016680 <NMI_Handler+0x24>)
 8016662:	f01f fbcd 	bl	8035e00 <puts>
#endif

    while (1) {
        escribirLedEstado(ROJO);
 8016666:	2002      	movs	r0, #2
 8016668:	f7fd ff7e 	bl	8014568 <escribirLedEstado>
        delay(50);
 801666c:	2032      	movs	r0, #50	; 0x32
 801666e:	f001 fa92 	bl	8017b96 <delay>
        escribirLedEstado(NEGRO);
 8016672:	2000      	movs	r0, #0
 8016674:	f7fd ff78 	bl	8014568 <escribirLedEstado>
        delay(50);
 8016678:	2032      	movs	r0, #50	; 0x32
 801667a:	f001 fa8c 	bl	8017b96 <delay>
        escribirLedEstado(ROJO);
 801667e:	e7f2      	b.n	8016666 <NMI_Handler+0xa>
 8016680:	0803a524 	.word	0x0803a524

08016684 <HardFault_Handler>:
**  Descripcion:    Interrupcion por fallo de hardware
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void HardFault_Handler(void)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	af00      	add	r7, sp, #0
#ifdef DEBUG
	printf("Interrupcion HardFault\n");
 8016688:	4807      	ldr	r0, [pc, #28]	; (80166a8 <HardFault_Handler+0x24>)
 801668a:	f01f fbb9 	bl	8035e00 <puts>
#endif

    while (1) {
        escribirLedEstado(ROJO);
 801668e:	2002      	movs	r0, #2
 8016690:	f7fd ff6a 	bl	8014568 <escribirLedEstado>
        delay(50);
 8016694:	2032      	movs	r0, #50	; 0x32
 8016696:	f001 fa7e 	bl	8017b96 <delay>
        escribirLedEstado(NEGRO);
 801669a:	2000      	movs	r0, #0
 801669c:	f7fd ff64 	bl	8014568 <escribirLedEstado>
        delay(50);
 80166a0:	2032      	movs	r0, #50	; 0x32
 80166a2:	f001 fa78 	bl	8017b96 <delay>
        escribirLedEstado(ROJO);
 80166a6:	e7f2      	b.n	801668e <HardFault_Handler+0xa>
 80166a8:	0803a538 	.word	0x0803a538

080166ac <MemManage_Handler>:
**  Descripcion:    Interrupcion por fallo de memoria
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void MemManage_Handler(void)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	af00      	add	r7, sp, #0
#ifdef DEBUG
	printf("Interrupcion MemManage\n");
 80166b0:	4807      	ldr	r0, [pc, #28]	; (80166d0 <MemManage_Handler+0x24>)
 80166b2:	f01f fba5 	bl	8035e00 <puts>
#endif

    while (1) {
        escribirLedEstado(ROJO);
 80166b6:	2002      	movs	r0, #2
 80166b8:	f7fd ff56 	bl	8014568 <escribirLedEstado>
        delay(50);
 80166bc:	2032      	movs	r0, #50	; 0x32
 80166be:	f001 fa6a 	bl	8017b96 <delay>
        escribirLedEstado(NEGRO);
 80166c2:	2000      	movs	r0, #0
 80166c4:	f7fd ff50 	bl	8014568 <escribirLedEstado>
        delay(50);
 80166c8:	2032      	movs	r0, #50	; 0x32
 80166ca:	f001 fa64 	bl	8017b96 <delay>
        escribirLedEstado(ROJO);
 80166ce:	e7f2      	b.n	80166b6 <MemManage_Handler+0xa>
 80166d0:	0803a550 	.word	0x0803a550

080166d4 <BusFault_Handler>:
**  Descripcion:    Interrupcion por fallo de Pre-fetch, fallo de acceso a memoria
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void BusFault_Handler(void)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	af00      	add	r7, sp, #0
#ifdef DEBUG
	printf("Interrupcion BusFault\n");
 80166d8:	4807      	ldr	r0, [pc, #28]	; (80166f8 <BusFault_Handler+0x24>)
 80166da:	f01f fb91 	bl	8035e00 <puts>
#endif

    while (1) {
        escribirLedEstado(ROJO);
 80166de:	2002      	movs	r0, #2
 80166e0:	f7fd ff42 	bl	8014568 <escribirLedEstado>
        delay(50);
 80166e4:	2032      	movs	r0, #50	; 0x32
 80166e6:	f001 fa56 	bl	8017b96 <delay>
        escribirLedEstado(NEGRO);
 80166ea:	2000      	movs	r0, #0
 80166ec:	f7fd ff3c 	bl	8014568 <escribirLedEstado>
        delay(50);
 80166f0:	2032      	movs	r0, #50	; 0x32
 80166f2:	f001 fa50 	bl	8017b96 <delay>
        escribirLedEstado(ROJO);
 80166f6:	e7f2      	b.n	80166de <BusFault_Handler+0xa>
 80166f8:	0803a568 	.word	0x0803a568

080166fc <UsageFault_Handler>:
**  Descripcion:    Interrupcion por fallo de instruccion no definida o estado ilegal
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void UsageFault_Handler(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
#ifdef DEBUG
    printf("Interrupcion UsageFault\n");
 8016700:	4807      	ldr	r0, [pc, #28]	; (8016720 <UsageFault_Handler+0x24>)
 8016702:	f01f fb7d 	bl	8035e00 <puts>
#endif

    while (1) {
        escribirLedEstado(ROJO);
 8016706:	2002      	movs	r0, #2
 8016708:	f7fd ff2e 	bl	8014568 <escribirLedEstado>
        delay(50);
 801670c:	2032      	movs	r0, #50	; 0x32
 801670e:	f001 fa42 	bl	8017b96 <delay>
        escribirLedEstado(NEGRO);
 8016712:	2000      	movs	r0, #0
 8016714:	f7fd ff28 	bl	8014568 <escribirLedEstado>
        delay(50);
 8016718:	2032      	movs	r0, #50	; 0x32
 801671a:	f001 fa3c 	bl	8017b96 <delay>
        escribirLedEstado(ROJO);
 801671e:	e7f2      	b.n	8016706 <UsageFault_Handler+0xa>
 8016720:	0803a580 	.word	0x0803a580

08016724 <SysTick_Handler>:
**  Descripcion:    Interrupcion del System tick timer
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void SysTick_Handler(void)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801672a:	f3ef 8311 	mrs	r3, BASEPRI
 801672e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016730:	68bb      	ldr	r3, [r7, #8]
    BLOQUE_ATOMICO(NVIC_PRIO_MAX) {
 8016732:	b2db      	uxtb	r3, r3
 8016734:	71fb      	strb	r3, [r7, #7]
 8016736:	2010      	movs	r0, #16
 8016738:	f7ff ff7d 	bl	8016636 <ajustarBasepriMax>
 801673c:	4603      	mov	r3, r0
 801673e:	73fb      	strb	r3, [r7, #15]
 8016740:	e00f      	b.n	8016762 <SysTick_Handler+0x3e>
        tiempoSysTick++;                  // Variable usada en la funcion millis
 8016742:	4b0e      	ldr	r3, [pc, #56]	; (801677c <SysTick_Handler+0x58>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	3301      	adds	r3, #1
 8016748:	4a0c      	ldr	r2, [pc, #48]	; (801677c <SysTick_Handler+0x58>)
 801674a:	6013      	str	r3, [r2, #0]
        ciclosSysTick = SysTick->VAL;
 801674c:	4b0c      	ldr	r3, [pc, #48]	; (8016780 <SysTick_Handler+0x5c>)
 801674e:	689b      	ldr	r3, [r3, #8]
 8016750:	4a0c      	ldr	r2, [pc, #48]	; (8016784 <SysTick_Handler+0x60>)
 8016752:	6013      	str	r3, [r2, #0]
        sysTickPendiente = 0;
 8016754:	4b0c      	ldr	r3, [pc, #48]	; (8016788 <SysTick_Handler+0x64>)
 8016756:	2200      	movs	r2, #0
 8016758:	601a      	str	r2, [r3, #0]
        (void)(SysTick->CTRL);
 801675a:	4b09      	ldr	r3, [pc, #36]	; (8016780 <SysTick_Handler+0x5c>)
 801675c:	681b      	ldr	r3, [r3, #0]
    BLOQUE_ATOMICO(NVIC_PRIO_MAX) {
 801675e:	2300      	movs	r3, #0
 8016760:	73fb      	strb	r3, [r7, #15]
 8016762:	7bfb      	ldrb	r3, [r7, #15]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d1ec      	bne.n	8016742 <SysTick_Handler+0x1e>
 8016768:	1dfb      	adds	r3, r7, #7
 801676a:	4618      	mov	r0, r3
 801676c:	f7ff ff52 	bl	8016614 <restaurarBasepriMem>
    }

    HAL_IncTick();
 8016770:	f012 fb94 	bl	8028e9c <HAL_IncTick>
}
 8016774:	bf00      	nop
 8016776:	3710      	adds	r7, #16
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	200037d0 	.word	0x200037d0
 8016780:	e000e010 	.word	0xe000e010
 8016784:	200037d4 	.word	0x200037d4
 8016788:	200037d8 	.word	0x200037d8

0801678c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801678c:	b480      	push	{r7}
 801678e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016790:	f3bf 8f4f 	dsb	sy
}
 8016794:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016796:	4b06      	ldr	r3, [pc, #24]	; (80167b0 <__NVIC_SystemReset+0x24>)
 8016798:	68db      	ldr	r3, [r3, #12]
 801679a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801679e:	4904      	ldr	r1, [pc, #16]	; (80167b0 <__NVIC_SystemReset+0x24>)
 80167a0:	4b04      	ldr	r3, [pc, #16]	; (80167b4 <__NVIC_SystemReset+0x28>)
 80167a2:	4313      	orrs	r3, r2
 80167a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80167a6:	f3bf 8f4f 	dsb	sy
}
 80167aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80167ac:	bf00      	nop
 80167ae:	e7fd      	b.n	80167ac <__NVIC_SystemReset+0x20>
 80167b0:	e000ed00 	.word	0xe000ed00
 80167b4:	05fa0004 	.word	0x05fa0004

080167b8 <resetSistema>:
**  Descripcion:    Resetea la CPU
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void resetSistema(void)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80167bc:	b672      	cpsid	i
}
 80167be:	bf00      	nop
    __disable_irq();
    NVIC_SystemReset();
 80167c0:	f7ff ffe4 	bl	801678c <__NVIC_SystemReset>

080167c4 <rccCSR>:
**  Descripcion:    Obtiene el valor de RCC->CSR para comprobar si es reset por software
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void rccCSR(void)
{
 80167c4:	b480      	push	{r7}
 80167c6:	af00      	add	r7, sp, #0
	valorRCCcsr = RCC->CSR;
 80167c8:	4b04      	ldr	r3, [pc, #16]	; (80167dc <rccCSR+0x18>)
 80167ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80167cc:	4a04      	ldr	r2, [pc, #16]	; (80167e0 <rccCSR+0x1c>)
 80167ce:	6013      	str	r3, [r2, #0]
}
 80167d0:	bf00      	nop
 80167d2:	46bd      	mov	sp, r7
 80167d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop
 80167dc:	40023800 	.word	0x40023800
 80167e0:	200032cc 	.word	0x200032cc

080167e4 <configRTC>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configRTC_t, configRTC);
 80167e4:	b480      	push	{r7}
 80167e6:	af00      	add	r7, sp, #0
 80167e8:	4b02      	ldr	r3, [pc, #8]	; (80167f4 <configRTC+0x10>)
 80167ea:	4618      	mov	r0, r3
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr
 80167f4:	2000a988 	.word	0x2000a988

080167f8 <iniciarRTC>:
**  Descripcion:    Inicia el driver del RTC y comprueba si hay que resetearlo
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarRTC(void)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	af00      	add	r7, sp, #0
#ifdef USAR_RTC_HW
    if (!iniciarDispositivoRTChw()) {
 80167fc:	f000 fa10 	bl	8016c20 <iniciarDispositivoRTChw>
 8016800:	4603      	mov	r3, r0
 8016802:	f083 0301 	eor.w	r3, r3, #1
 8016806:	b2db      	uxtb	r3, r3
 8016808:	2b00      	cmp	r3, #0
 801680a:	d004      	beq.n	8016816 <iniciarRTC+0x1e>
#ifdef DEBUG
        printf("Fallo en la inicializacion del RTC hardware\n");
 801680c:	480f      	ldr	r0, [pc, #60]	; (801684c <iniciarRTC+0x54>)
 801680e:	f01f faf7 	bl	8035e00 <puts>
#endif
        return false;
 8016812:	2300      	movs	r3, #0
 8016814:	e018      	b.n	8016848 <iniciarRTC+0x50>
    }
#endif

    if (configRTC()->offsetMinutos > OFFSET_MINUTOS_UTC_MAX_RTC || configRTC()->offsetMinutos < OFFSET_MINUTOS_UTC_MIN_RTC) {
 8016816:	f7ff ffe5 	bl	80167e4 <configRTC>
 801681a:	4603      	mov	r3, r0
 801681c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016820:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8016824:	dc07      	bgt.n	8016836 <iniciarRTC+0x3e>
 8016826:	f7ff ffdd 	bl	80167e4 <configRTC>
 801682a:	4603      	mov	r3, r0
 801682c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016830:	f513 7f43 	cmn.w	r3, #780	; 0x30c
 8016834:	da04      	bge.n	8016840 <iniciarRTC+0x48>
#ifdef DEBUG
        printf("Fallo en la definicion del offset UTC del RTC\n");
 8016836:	4806      	ldr	r0, [pc, #24]	; (8016850 <iniciarRTC+0x58>)
 8016838:	f01f fae2 	bl	8035e00 <puts>
#endif
        return false;
 801683c:	2300      	movs	r3, #0
 801683e:	e003      	b.n	8016848 <iniciarRTC+0x50>
    }

    rtcIni = true;
 8016840:	4b04      	ldr	r3, [pc, #16]	; (8016854 <iniciarRTC+0x5c>)
 8016842:	2201      	movs	r2, #1
 8016844:	701a      	strb	r2, [r3, #0]
    return true;
 8016846:	2301      	movs	r3, #1
}
 8016848:	4618      	mov	r0, r3
 801684a:	bd80      	pop	{r7, pc}
 801684c:	0803a598 	.word	0x0803a598
 8016850:	0803a5c4 	.word	0x0803a5c4
 8016854:	200032d8 	.word	0x200032d8

08016858 <tieneHoraRTC>:
**  Descripcion:    Comprueba si el RTC tiene una hora ajustada
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool tieneHoraRTC(void)
{
 8016858:	b480      	push	{r7}
 801685a:	af00      	add	r7, sp, #0
    return horaInicioUnix != 0;
 801685c:	4b06      	ldr	r3, [pc, #24]	; (8016878 <tieneHoraRTC+0x20>)
 801685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016862:	4313      	orrs	r3, r2
 8016864:	2b00      	cmp	r3, #0
 8016866:	bf14      	ite	ne
 8016868:	2301      	movne	r3, #1
 801686a:	2300      	moveq	r3, #0
 801686c:	b2db      	uxtb	r3, r3
}
 801686e:	4618      	mov	r0, r3
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr
 8016878:	200032d0 	.word	0x200032d0

0801687c <ajustarUnixRTC>:
**  Descripcion:    ajusta la fecha y la hora en formato Unix
**  Parametros:     Fecha y Hora
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarUnixRTC(int64_t horaRTC)
{
 801687c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016880:	b086      	sub	sp, #24
 8016882:	af00      	add	r7, sp, #0
 8016884:	e9c7 0100 	strd	r0, r1, [r7]
    fechaHora_t fechaHora;

    horaInicioUnix = horaRTC - millis();
 8016888:	f001 f964 	bl	8017b54 <millis>
 801688c:	4603      	mov	r3, r0
 801688e:	2200      	movs	r2, #0
 8016890:	461c      	mov	r4, r3
 8016892:	4615      	mov	r5, r2
 8016894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016898:	ebb2 0804 	subs.w	r8, r2, r4
 801689c:	eb63 0905 	sbc.w	r9, r3, r5
 80168a0:	4b0a      	ldr	r3, [pc, #40]	; (80168cc <ajustarUnixRTC+0x50>)
 80168a2:	e9c3 8900 	strd	r8, r9, [r3]
    horaUnixAfechaHoraRTC(horaRTC, &fechaHora);
 80168a6:	f107 030c 	add.w	r3, r7, #12
 80168aa:	461a      	mov	r2, r3
 80168ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80168b0:	f000 f8d6 	bl	8016a60 <horaUnixAfechaHoraRTC>

#ifdef USAR_RTC_HW
    ajustarFechaHoraRTChw(fechaHora);
 80168b4:	f107 030c 	add.w	r3, r7, #12
 80168b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168bc:	f000 fad8 	bl	8016e70 <ajustarFechaHoraRTChw>
#endif
}
 80168c0:	bf00      	nop
 80168c2:	3718      	adds	r7, #24
 80168c4:	46bd      	mov	sp, r7
 80168c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80168ca:	bf00      	nop
 80168cc:	200032d0 	.word	0x200032d0

080168d0 <ajustarHoraInicioUnix>:
**  Descripcion:    Obtiene la fecha y la hora
**  Parametros:     Fecha y Hora
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarHoraInicioUnix(fechaHora_t fechaHora)
{
 80168d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80168d4:	b086      	sub	sp, #24
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	1d3b      	adds	r3, r7, #4
 80168da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int64_t horaRTC = fechaHoraAtiempoUnixRTC(fechaHora);
 80168de:	1d3b      	adds	r3, r7, #4
 80168e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168e4:	f000 f866 	bl	80169b4 <fechaHoraAtiempoUnixRTC>
 80168e8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    horaInicioUnix = horaRTC - millis();
 80168ec:	f001 f932 	bl	8017b54 <millis>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2200      	movs	r2, #0
 80168f4:	461c      	mov	r4, r3
 80168f6:	4615      	mov	r5, r2
 80168f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80168fc:	ebb2 0804 	subs.w	r8, r2, r4
 8016900:	eb63 0905 	sbc.w	r9, r3, r5
 8016904:	4b03      	ldr	r3, [pc, #12]	; (8016914 <ajustarHoraInicioUnix+0x44>)
 8016906:	e9c3 8900 	strd	r8, r9, [r3]
}
 801690a:	bf00      	nop
 801690c:	3718      	adds	r7, #24
 801690e:	46bd      	mov	sp, r7
 8016910:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016914:	200032d0 	.word	0x200032d0

08016918 <generarHoraUnixRTC>:
**  Descripcion:    Genera la hora en formato Unix
**  Parametros:     Segundos, milisegundos
**  Retorno:        Fecha y hora en formato Unix
****************************************************************************************/
int64_t generarHoraUnixRTC(int32_t segundos, uint16_t milisegundos)
{
 8016918:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801691c:	b087      	sub	sp, #28
 801691e:	af00      	add	r7, sp, #0
 8016920:	6178      	str	r0, [r7, #20]
 8016922:	8279      	strh	r1, [r7, #18]
    return ((int64_t)segundos) * MILIS_POR_SEGUNDO_RTC + milisegundos;
 8016924:	6979      	ldr	r1, [r7, #20]
 8016926:	17c8      	asrs	r0, r1, #31
 8016928:	460c      	mov	r4, r1
 801692a:	4605      	mov	r5, r0
 801692c:	4620      	mov	r0, r4
 801692e:	4629      	mov	r1, r5
 8016930:	f04f 0a00 	mov.w	sl, #0
 8016934:	f04f 0b00 	mov.w	fp, #0
 8016938:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 801693c:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8016940:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8016944:	4650      	mov	r0, sl
 8016946:	4659      	mov	r1, fp
 8016948:	1b02      	subs	r2, r0, r4
 801694a:	eb61 0305 	sbc.w	r3, r1, r5
 801694e:	f04f 0000 	mov.w	r0, #0
 8016952:	f04f 0100 	mov.w	r1, #0
 8016956:	0099      	lsls	r1, r3, #2
 8016958:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801695c:	0090      	lsls	r0, r2, #2
 801695e:	4602      	mov	r2, r0
 8016960:	460b      	mov	r3, r1
 8016962:	eb12 0804 	adds.w	r8, r2, r4
 8016966:	eb43 0905 	adc.w	r9, r3, r5
 801696a:	f04f 0200 	mov.w	r2, #0
 801696e:	f04f 0300 	mov.w	r3, #0
 8016972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801697a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801697e:	4690      	mov	r8, r2
 8016980:	4699      	mov	r9, r3
 8016982:	4642      	mov	r2, r8
 8016984:	464b      	mov	r3, r9
 8016986:	8a79      	ldrh	r1, [r7, #18]
 8016988:	2000      	movs	r0, #0
 801698a:	60b9      	str	r1, [r7, #8]
 801698c:	60f8      	str	r0, [r7, #12]
 801698e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016992:	4621      	mov	r1, r4
 8016994:	1851      	adds	r1, r2, r1
 8016996:	6039      	str	r1, [r7, #0]
 8016998:	4629      	mov	r1, r5
 801699a:	eb43 0101 	adc.w	r1, r3, r1
 801699e:	6079      	str	r1, [r7, #4]
 80169a0:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80169a4:	4610      	mov	r0, r2
 80169a6:	4619      	mov	r1, r3
 80169a8:	371c      	adds	r7, #28
 80169aa:	46bd      	mov	sp, r7
 80169ac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80169b0:	4770      	bx	lr
	...

080169b4 <fechaHoraAtiempoUnixRTC>:
**  Descripcion:    Convierte la fecha y la hora a formato RTC
**  Parametros:     Fecha y hora
**  Retorno:        Fecha y hora convertida
****************************************************************************************/
int64_t fechaHoraAtiempoUnixRTC(fechaHora_t fechaHora)
{
 80169b4:	b590      	push	{r4, r7, lr}
 80169b6:	b089      	sub	sp, #36	; 0x24
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	1d3b      	adds	r3, r7, #4
 80169bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t segundos = fechaHora.segundos;             // 0-59
 80169c0:	7abb      	ldrb	r3, [r7, #10]
 80169c2:	77fb      	strb	r3, [r7, #31]
    uint8_t minutos = fechaHora.minutos;               // 0-59
 80169c4:	7a7b      	ldrb	r3, [r7, #9]
 80169c6:	77bb      	strb	r3, [r7, #30]
    uint8_t hora = fechaHora.horas;                    // 0-23
 80169c8:	7a3b      	ldrb	r3, [r7, #8]
 80169ca:	777b      	strb	r3, [r7, #29]
    uint8_t dia = fechaHora.dia - 1;                   // 0-30
 80169cc:	79fb      	ldrb	r3, [r7, #7]
 80169ce:	3b01      	subs	r3, #1
 80169d0:	773b      	strb	r3, [r7, #28]
    uint8_t mes = fechaHora.mes - 1;                   // 0-11
 80169d2:	79bb      	ldrb	r3, [r7, #6]
 80169d4:	3b01      	subs	r3, #1
 80169d6:	76fb      	strb	r3, [r7, #27]
    uint8_t ano = fechaHora.ano - ANO_REFERENCIA_RTC;  // 0-99
 80169d8:	88bb      	ldrh	r3, [r7, #4]
 80169da:	b2db      	uxtb	r3, r3
 80169dc:	3330      	adds	r3, #48	; 0x30
 80169de:	76bb      	strb	r3, [r7, #26]

    int32_t fechaUnix = (((ano / 4 * (365 * 4 + 1) + dias[ano % 4][mes] + dia) * 24 + hora) * 60 + minutos) * 60 + segundos + OFFSET_ANO_REFERENCIA_RTC;
 80169e0:	7ebb      	ldrb	r3, [r7, #26]
 80169e2:	089b      	lsrs	r3, r3, #2
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	461a      	mov	r2, r3
 80169e8:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80169ec:	fb03 f102 	mul.w	r1, r3, r2
 80169f0:	7ebb      	ldrb	r3, [r7, #26]
 80169f2:	f003 0203 	and.w	r2, r3, #3
 80169f6:	7ef8      	ldrb	r0, [r7, #27]
 80169f8:	4c17      	ldr	r4, [pc, #92]	; (8016a58 <fechaHoraAtiempoUnixRTC+0xa4>)
 80169fa:	4613      	mov	r3, r2
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	4413      	add	r3, r2
 8016a00:	009b      	lsls	r3, r3, #2
 8016a02:	4403      	add	r3, r0
 8016a04:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8016a08:	18ca      	adds	r2, r1, r3
 8016a0a:	7f3b      	ldrb	r3, [r7, #28]
 8016a0c:	441a      	add	r2, r3
 8016a0e:	4613      	mov	r3, r2
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	461a      	mov	r2, r3
 8016a18:	7f7b      	ldrb	r3, [r7, #29]
 8016a1a:	441a      	add	r2, r3
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	011b      	lsls	r3, r3, #4
 8016a20:	1a9b      	subs	r3, r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	461a      	mov	r2, r3
 8016a26:	7fbb      	ldrb	r3, [r7, #30]
 8016a28:	441a      	add	r2, r3
 8016a2a:	4613      	mov	r3, r2
 8016a2c:	011b      	lsls	r3, r3, #4
 8016a2e:	1a9b      	subs	r3, r3, r2
 8016a30:	009b      	lsls	r3, r3, #2
 8016a32:	461a      	mov	r2, r3
 8016a34:	7ffb      	ldrb	r3, [r7, #31]
 8016a36:	441a      	add	r2, r3
 8016a38:	4b08      	ldr	r3, [pc, #32]	; (8016a5c <fechaHoraAtiempoUnixRTC+0xa8>)
 8016a3a:	4413      	add	r3, r2
 8016a3c:	617b      	str	r3, [r7, #20]
    return generarHoraUnixRTC(fechaUnix, fechaHora.milisegundos);
 8016a3e:	89bb      	ldrh	r3, [r7, #12]
 8016a40:	4619      	mov	r1, r3
 8016a42:	6978      	ldr	r0, [r7, #20]
 8016a44:	f7ff ff68 	bl	8016918 <generarHoraUnixRTC>
 8016a48:	4602      	mov	r2, r0
 8016a4a:	460b      	mov	r3, r1
}
 8016a4c:	4610      	mov	r0, r2
 8016a4e:	4619      	mov	r1, r3
 8016a50:	3724      	adds	r7, #36	; 0x24
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd90      	pop	{r4, r7, pc}
 8016a56:	bf00      	nop
 8016a58:	0803ae68 	.word	0x0803ae68
 8016a5c:	386d4380 	.word	0x386d4380

08016a60 <horaUnixAfechaHoraRTC>:
**  Descripcion:    Convierte la fecha RTC a formato fecha y hora
**  Parametros:     Fecha y hora, fecha RTC
**  Retorno:        Ninguno
****************************************************************************************/
void horaUnixAfechaHoraRTC(int64_t horaUnix, fechaHora_t *fechaHora)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b088      	sub	sp, #32
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8016a6a:	607a      	str	r2, [r7, #4]
    int32_t fechaUnix = horaUnix / MILIS_POR_SEGUNDO_RTC - OFFSET_ANO_REFERENCIA_RTC;
 8016a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016a74:	f04f 0300 	mov.w	r3, #0
 8016a78:	f7f9 fcf6 	bl	8010468 <__aeabi_ldivmod>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	4b62      	ldr	r3, [pc, #392]	; (8016c0c <horaUnixAfechaHoraRTC+0x1ac>)
 8016a82:	4413      	add	r3, r2
 8016a84:	617b      	str	r3, [r7, #20]

    fechaHora->segundos = fechaUnix % 60;
 8016a86:	697a      	ldr	r2, [r7, #20]
 8016a88:	4b61      	ldr	r3, [pc, #388]	; (8016c10 <horaUnixAfechaHoraRTC+0x1b0>)
 8016a8a:	fb83 1302 	smull	r1, r3, r3, r2
 8016a8e:	4413      	add	r3, r2
 8016a90:	1159      	asrs	r1, r3, #5
 8016a92:	17d3      	asrs	r3, r2, #31
 8016a94:	1ac9      	subs	r1, r1, r3
 8016a96:	460b      	mov	r3, r1
 8016a98:	011b      	lsls	r3, r3, #4
 8016a9a:	1a5b      	subs	r3, r3, r1
 8016a9c:	009b      	lsls	r3, r3, #2
 8016a9e:	1ad1      	subs	r1, r2, r3
 8016aa0:	b2ca      	uxtb	r2, r1
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	719a      	strb	r2, [r3, #6]
    fechaUnix /= 60;
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	4a59      	ldr	r2, [pc, #356]	; (8016c10 <horaUnixAfechaHoraRTC+0x1b0>)
 8016aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8016aae:	441a      	add	r2, r3
 8016ab0:	1152      	asrs	r2, r2, #5
 8016ab2:	17db      	asrs	r3, r3, #31
 8016ab4:	1ad3      	subs	r3, r2, r3
 8016ab6:	617b      	str	r3, [r7, #20]
    fechaHora->minutos = fechaUnix % 60;
 8016ab8:	697a      	ldr	r2, [r7, #20]
 8016aba:	4b55      	ldr	r3, [pc, #340]	; (8016c10 <horaUnixAfechaHoraRTC+0x1b0>)
 8016abc:	fb83 1302 	smull	r1, r3, r3, r2
 8016ac0:	4413      	add	r3, r2
 8016ac2:	1159      	asrs	r1, r3, #5
 8016ac4:	17d3      	asrs	r3, r2, #31
 8016ac6:	1ac9      	subs	r1, r1, r3
 8016ac8:	460b      	mov	r3, r1
 8016aca:	011b      	lsls	r3, r3, #4
 8016acc:	1a5b      	subs	r3, r3, r1
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	1ad1      	subs	r1, r2, r3
 8016ad2:	b2ca      	uxtb	r2, r1
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	715a      	strb	r2, [r3, #5]
    fechaUnix /= 60;
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	4a4d      	ldr	r2, [pc, #308]	; (8016c10 <horaUnixAfechaHoraRTC+0x1b0>)
 8016adc:	fb82 1203 	smull	r1, r2, r2, r3
 8016ae0:	441a      	add	r2, r3
 8016ae2:	1152      	asrs	r2, r2, #5
 8016ae4:	17db      	asrs	r3, r3, #31
 8016ae6:	1ad3      	subs	r3, r2, r3
 8016ae8:	617b      	str	r3, [r7, #20]
    fechaHora->horas = fechaUnix % 24;
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	4b49      	ldr	r3, [pc, #292]	; (8016c14 <horaUnixAfechaHoraRTC+0x1b4>)
 8016aee:	fb83 1302 	smull	r1, r3, r3, r2
 8016af2:	1099      	asrs	r1, r3, #2
 8016af4:	17d3      	asrs	r3, r2, #31
 8016af6:	1ac9      	subs	r1, r1, r3
 8016af8:	460b      	mov	r3, r1
 8016afa:	005b      	lsls	r3, r3, #1
 8016afc:	440b      	add	r3, r1
 8016afe:	00db      	lsls	r3, r3, #3
 8016b00:	1ad1      	subs	r1, r2, r3
 8016b02:	b2ca      	uxtb	r2, r1
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	711a      	strb	r2, [r3, #4]
    fechaUnix /= 24;
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	4a42      	ldr	r2, [pc, #264]	; (8016c14 <horaUnixAfechaHoraRTC+0x1b4>)
 8016b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8016b10:	1092      	asrs	r2, r2, #2
 8016b12:	17db      	asrs	r3, r3, #31
 8016b14:	1ad3      	subs	r3, r2, r3
 8016b16:	617b      	str	r3, [r7, #20]

    uint32_t anos = fechaUnix / (365 * 4 + 1) * 4;
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	4a3f      	ldr	r2, [pc, #252]	; (8016c18 <horaUnixAfechaHoraRTC+0x1b8>)
 8016b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8016b20:	11d2      	asrs	r2, r2, #7
 8016b22:	17db      	asrs	r3, r3, #31
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	613b      	str	r3, [r7, #16]
    fechaUnix %= 365 * 4 + 1;
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	4a3a      	ldr	r2, [pc, #232]	; (8016c18 <horaUnixAfechaHoraRTC+0x1b8>)
 8016b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8016b32:	11d1      	asrs	r1, r2, #7
 8016b34:	17da      	asrs	r2, r3, #31
 8016b36:	1a8a      	subs	r2, r1, r2
 8016b38:	f240 51b5 	movw	r1, #1461	; 0x5b5
 8016b3c:	fb01 f202 	mul.w	r2, r1, r2
 8016b40:	1a9b      	subs	r3, r3, r2
 8016b42:	617b      	str	r3, [r7, #20]

    uint32_t ano;
    for (ano = 3; ano > 0; ano--) {
 8016b44:	2303      	movs	r3, #3
 8016b46:	61fb      	str	r3, [r7, #28]
 8016b48:	e00e      	b.n	8016b68 <horaUnixAfechaHoraRTC+0x108>
        if (fechaUnix >= dias[ano][0])
 8016b4a:	4934      	ldr	r1, [pc, #208]	; (8016c1c <horaUnixAfechaHoraRTC+0x1bc>)
 8016b4c:	69fa      	ldr	r2, [r7, #28]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	005b      	lsls	r3, r3, #1
 8016b52:	4413      	add	r3, r2
 8016b54:	00db      	lsls	r3, r3, #3
 8016b56:	440b      	add	r3, r1
 8016b58:	881b      	ldrh	r3, [r3, #0]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	4293      	cmp	r3, r2
 8016b60:	da06      	bge.n	8016b70 <horaUnixAfechaHoraRTC+0x110>
    for (ano = 3; ano > 0; ano--) {
 8016b62:	69fb      	ldr	r3, [r7, #28]
 8016b64:	3b01      	subs	r3, #1
 8016b66:	61fb      	str	r3, [r7, #28]
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d1ed      	bne.n	8016b4a <horaUnixAfechaHoraRTC+0xea>
 8016b6e:	e000      	b.n	8016b72 <horaUnixAfechaHoraRTC+0x112>
            break;
 8016b70:	bf00      	nop
    }

    uint32_t mes;
    for (mes = 11; mes > 0; mes--) {
 8016b72:	230b      	movs	r3, #11
 8016b74:	61bb      	str	r3, [r7, #24]
 8016b76:	e010      	b.n	8016b9a <horaUnixAfechaHoraRTC+0x13a>
        if (fechaUnix >= dias[ano][mes])
 8016b78:	4928      	ldr	r1, [pc, #160]	; (8016c1c <horaUnixAfechaHoraRTC+0x1bc>)
 8016b7a:	69fa      	ldr	r2, [r7, #28]
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	005b      	lsls	r3, r3, #1
 8016b80:	4413      	add	r3, r2
 8016b82:	009b      	lsls	r3, r3, #2
 8016b84:	69ba      	ldr	r2, [r7, #24]
 8016b86:	4413      	add	r3, r2
 8016b88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	4293      	cmp	r3, r2
 8016b92:	da06      	bge.n	8016ba2 <horaUnixAfechaHoraRTC+0x142>
    for (mes = 11; mes > 0; mes--) {
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	3b01      	subs	r3, #1
 8016b98:	61bb      	str	r3, [r7, #24]
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d1eb      	bne.n	8016b78 <horaUnixAfechaHoraRTC+0x118>
 8016ba0:	e000      	b.n	8016ba4 <horaUnixAfechaHoraRTC+0x144>
            break;
 8016ba2:	bf00      	nop
    }

    fechaHora->ano = anos + ano + ANO_REFERENCIA_RTC;
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	4413      	add	r3, r2
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	801a      	strh	r2, [r3, #0]
    fechaHora->mes = mes + 1;
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	b2db      	uxtb	r3, r3
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	b2da      	uxtb	r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	709a      	strb	r2, [r3, #2]
    fechaHora->dia = fechaUnix - dias[ano][mes] + 1;
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	b2d9      	uxtb	r1, r3
 8016bca:	4814      	ldr	r0, [pc, #80]	; (8016c1c <horaUnixAfechaHoraRTC+0x1bc>)
 8016bcc:	69fa      	ldr	r2, [r7, #28]
 8016bce:	4613      	mov	r3, r2
 8016bd0:	005b      	lsls	r3, r3, #1
 8016bd2:	4413      	add	r3, r2
 8016bd4:	009b      	lsls	r3, r3, #2
 8016bd6:	69ba      	ldr	r2, [r7, #24]
 8016bd8:	4413      	add	r3, r2
 8016bda:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8016bde:	b2db      	uxtb	r3, r3
 8016be0:	1acb      	subs	r3, r1, r3
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	3301      	adds	r3, #1
 8016be6:	b2da      	uxtb	r2, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	70da      	strb	r2, [r3, #3]
    fechaHora->milisegundos = horaUnix % MILIS_POR_SEGUNDO_RTC;
 8016bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016bf4:	f04f 0300 	mov.w	r3, #0
 8016bf8:	f7f9 fc36 	bl	8010468 <__aeabi_ldivmod>
 8016bfc:	b292      	uxth	r2, r2
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	811a      	strh	r2, [r3, #8]
}
 8016c02:	bf00      	nop
 8016c04:	3720      	adds	r7, #32
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	c792bc80 	.word	0xc792bc80
 8016c10:	88888889 	.word	0x88888889
 8016c14:	2aaaaaab 	.word	0x2aaaaaab
 8016c18:	166db073 	.word	0x166db073
 8016c1c:	0803ae68 	.word	0x0803ae68

08016c20 <iniciarDispositivoRTChw>:
**  Descripcion:    Inicia el RTC hardware
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDispositivoRTChw(void)
{
 8016c20:	b5b0      	push	{r4, r5, r7, lr}
 8016c22:	b08a      	sub	sp, #40	; 0x28
 8016c24:	af04      	add	r7, sp, #16
    rtcHW_t *disp = &rtcHW;
 8016c26:	4b29      	ldr	r3, [pc, #164]	; (8016ccc <iniciarDispositivoRTChw+0xac>)
 8016c28:	617b      	str	r3, [r7, #20]

    // Se habilita el reloj del RTC HW
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016c2a:	4b29      	ldr	r3, [pc, #164]	; (8016cd0 <iniciarDispositivoRTChw+0xb0>)
 8016c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c2e:	4a28      	ldr	r2, [pc, #160]	; (8016cd0 <iniciarDispositivoRTChw+0xb0>)
 8016c30:	f043 0304 	orr.w	r3, r3, #4
 8016c34:	6313      	str	r3, [r2, #48]	; 0x30
 8016c36:	4b26      	ldr	r3, [pc, #152]	; (8016cd0 <iniciarDispositivoRTChw+0xb0>)
 8016c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c3a:	f003 0304 	and.w	r3, r3, #4
 8016c3e:	613b      	str	r3, [r7, #16]
 8016c40:	693b      	ldr	r3, [r7, #16]

    disp->hrtc.Instance = RTC;
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	4a23      	ldr	r2, [pc, #140]	; (8016cd4 <iniciarDispositivoRTChw+0xb4>)
 8016c46:	61da      	str	r2, [r3, #28]

    disp->hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8016c48:	697b      	ldr	r3, [r7, #20]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	621a      	str	r2, [r3, #32]
    disp->hrtc.Init.AsynchPrediv = 127;
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	227f      	movs	r2, #127	; 0x7f
 8016c52:	625a      	str	r2, [r3, #36]	; 0x24
    disp->hrtc.Init.SynchPrediv = 255;
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	22ff      	movs	r2, #255	; 0xff
 8016c58:	629a      	str	r2, [r3, #40]	; 0x28
    disp->hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    disp->hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	2200      	movs	r2, #0
 8016c64:	631a      	str	r2, [r3, #48]	; 0x30
    disp->hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_PWR_EnableBkUpAccess();
 8016c6c:	f016 f888 	bl	802cd80 <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTC_Init(&disp->hrtc) != HAL_OK)
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	331c      	adds	r3, #28
 8016c74:	4618      	mov	r0, r3
 8016c76:	f017 f95d 	bl	802df34 <HAL_RTC_Init>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d001      	beq.n	8016c84 <iniciarDispositivoRTChw+0x64>
        return false;
 8016c80:	2300      	movs	r3, #0
 8016c82:	e01f      	b.n	8016cc4 <iniciarDispositivoRTChw+0xa4>

    if (esPrimerArranqueRTChw())
 8016c84:	f000 f828 	bl	8016cd8 <esPrimerArranqueRTChw>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d002      	beq.n	8016c94 <iniciarDispositivoRTChw+0x74>
        ajustarFechaHoraPorDefectoRTChw();
 8016c8e:	f000 f8c3 	bl	8016e18 <ajustarFechaHoraPorDefectoRTChw>
 8016c92:	e016      	b.n	8016cc2 <iniciarDispositivoRTChw+0xa2>
    else
        {
        // Leemos el RTC hardware
        fechaRTChw();
 8016c94:	f000 f85a 	bl	8016d4c <fechaRTChw>
        horaRTChw();
 8016c98:	f000 f872 	bl	8016d80 <horaRTChw>

        // Asignamos la fecha
        fechaHora_t fechaHora;
        convertirFechaHWAunix(rtcHW.fecha, rtcHW.hora, &fechaHora);
 8016c9c:	4b0b      	ldr	r3, [pc, #44]	; (8016ccc <iniciarDispositivoRTChw+0xac>)
 8016c9e:	4d0b      	ldr	r5, [pc, #44]	; (8016ccc <iniciarDispositivoRTChw+0xac>)
 8016ca0:	1d3a      	adds	r2, r7, #4
 8016ca2:	9203      	str	r2, [sp, #12]
 8016ca4:	466c      	mov	r4, sp
 8016ca6:	f103 020c 	add.w	r2, r3, #12
 8016caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8016cac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016cb2:	69a8      	ldr	r0, [r5, #24]
 8016cb4:	f000 f91b 	bl	8016eee <convertirFechaHWAunix>
        ajustarHoraInicioUnix(fechaHora);
 8016cb8:	1d3b      	adds	r3, r7, #4
 8016cba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016cbe:	f7ff fe07 	bl	80168d0 <ajustarHoraInicioUnix>
    }

    return true;
 8016cc2:	2301      	movs	r3, #1

}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3718      	adds	r7, #24
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bdb0      	pop	{r4, r5, r7, pc}
 8016ccc:	200032dc 	.word	0x200032dc
 8016cd0:	40023800 	.word	0x40023800
 8016cd4:	40002800 	.word	0x40002800

08016cd8 <esPrimerArranqueRTChw>:
**  Descripcion:    Comprueba si es necesario guardar el dato en el backup
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool esPrimerArranqueRTChw(void)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	af00      	add	r7, sp, #0
    if (leerBackupRTChw(BKP_FECHA_ESTANDAR_RTC) != valorFechaEstandarBKP)
 8016cdc:	2001      	movs	r0, #1
 8016cde:	f000 f821 	bl	8016d24 <leerBackupRTChw>
 8016ce2:	4602      	mov	r2, r0
 8016ce4:	4b04      	ldr	r3, [pc, #16]	; (8016cf8 <esPrimerArranqueRTChw+0x20>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d001      	beq.n	8016cf0 <esPrimerArranqueRTChw+0x18>
        return true;
 8016cec:	2301      	movs	r3, #1
 8016cee:	e000      	b.n	8016cf2 <esPrimerArranqueRTChw+0x1a>

    return false;
 8016cf0:	2300      	movs	r3, #0
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	200001d0 	.word	0x200001d0

08016cfc <escribirBackupRTChw>:
**  Descripcion:    Escribe un valor en el registro de backup
**  Parametros:     Numero del registro a escribir, valor a escribir
**  Retorno:        Ninguno
****************************************************************************************/
void escribirBackupRTChw(uint32_t numBKP, uint32_t valor)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
    rtcHW_t *disp = &rtcHW;
 8016d06:	4b06      	ldr	r3, [pc, #24]	; (8016d20 <escribirBackupRTChw+0x24>)
 8016d08:	60fb      	str	r3, [r7, #12]

    HAL_RTCEx_BKUPWrite(&disp->hrtc, numBKP, valor);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	331c      	adds	r3, #28
 8016d0e:	683a      	ldr	r2, [r7, #0]
 8016d10:	6879      	ldr	r1, [r7, #4]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f017 fc38 	bl	802e588 <HAL_RTCEx_BKUPWrite>
}
 8016d18:	bf00      	nop
 8016d1a:	3710      	adds	r7, #16
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}
 8016d20:	200032dc 	.word	0x200032dc

08016d24 <leerBackupRTChw>:
**  Descripcion:    Obtiene el valor del registro de backup
**  Parametros:     Numero del registro que se quiere leer
**  Retorno:        Valor del registro de backup
****************************************************************************************/
uint32_t leerBackupRTChw(uint32_t numBKP)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b084      	sub	sp, #16
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
    rtcHW_t *disp = &rtcHW;
 8016d2c:	4b06      	ldr	r3, [pc, #24]	; (8016d48 <leerBackupRTChw+0x24>)
 8016d2e:	60fb      	str	r3, [r7, #12]

    return HAL_RTCEx_BKUPRead(&disp->hrtc, numBKP);
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	331c      	adds	r3, #28
 8016d34:	6879      	ldr	r1, [r7, #4]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f017 fc40 	bl	802e5bc <HAL_RTCEx_BKUPRead>
 8016d3c:	4603      	mov	r3, r0
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3710      	adds	r7, #16
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	200032dc 	.word	0x200032dc

08016d4c <fechaRTChw>:
**  Descripcion:    Obtiene la fecha del RTC
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool fechaRTChw(void)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
    rtcHW_t *disp = &rtcHW;
 8016d52:	4b0a      	ldr	r3, [pc, #40]	; (8016d7c <fechaRTChw+0x30>)
 8016d54:	607b      	str	r3, [r7, #4]

    if (HAL_RTC_GetDate(&disp->hrtc, &disp->fecha, RTC_FORMAT_BIN) != HAL_OK)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	f103 001c 	add.w	r0, r3, #28
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	3318      	adds	r3, #24
 8016d60:	2200      	movs	r2, #0
 8016d62:	4619      	mov	r1, r3
 8016d64:	f017 fb30 	bl	802e3c8 <HAL_RTC_GetDate>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d001      	beq.n	8016d72 <fechaRTChw+0x26>
        return false;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	e000      	b.n	8016d74 <fechaRTChw+0x28>

    return true;
 8016d72:	2301      	movs	r3, #1
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}
 8016d7c:	200032dc 	.word	0x200032dc

08016d80 <horaRTChw>:
**  Descripcion:    Obtiene la hora del RTC
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool horaRTChw(void)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
    rtcHW_t *disp = &rtcHW;
 8016d86:	4b09      	ldr	r3, [pc, #36]	; (8016dac <horaRTChw+0x2c>)
 8016d88:	607b      	str	r3, [r7, #4]

    if (HAL_RTC_GetTime(&disp->hrtc, &disp->hora, RTC_FORMAT_BIN) != HAL_OK)
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	331c      	adds	r3, #28
 8016d8e:	6879      	ldr	r1, [r7, #4]
 8016d90:	2200      	movs	r2, #0
 8016d92:	4618      	mov	r0, r3
 8016d94:	f017 fa12 	bl	802e1bc <HAL_RTC_GetTime>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d001      	beq.n	8016da2 <horaRTChw+0x22>
        return false;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	e000      	b.n	8016da4 <horaRTChw+0x24>

    return true;
 8016da2:	2301      	movs	r3, #1
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3708      	adds	r7, #8
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}
 8016dac:	200032dc 	.word	0x200032dc

08016db0 <ajustarFechaRTChw>:
**  Descripcion:    Ajusta la fecha del RTC
**  Parametros:     Fecha RTC
**  Retorno:        True si ok
****************************************************************************************/
bool ajustarFechaRTChw(RTC_DateTypeDef *fecha)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b084      	sub	sp, #16
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
    rtcHW_t *disp = &rtcHW;
 8016db8:	4b09      	ldr	r3, [pc, #36]	; (8016de0 <ajustarFechaRTChw+0x30>)
 8016dba:	60fb      	str	r3, [r7, #12]

    if (HAL_RTC_SetDate(&disp->hrtc, fecha, RTC_FORMAT_BIN) != HAL_OK)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	331c      	adds	r3, #28
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	6879      	ldr	r1, [r7, #4]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f017 fa57 	bl	802e278 <HAL_RTC_SetDate>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <ajustarFechaRTChw+0x24>
        return false;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	e000      	b.n	8016dd6 <ajustarFechaRTChw+0x26>

    return true;
 8016dd4:	2301      	movs	r3, #1
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	200032dc 	.word	0x200032dc

08016de4 <ajustarHoraRTChw>:
**  Descripcion:    Ajusta la hora del RTC
**  Parametros:     Hora RTC
**  Retorno:        True si ok
****************************************************************************************/
bool ajustarHoraRTChw(RTC_TimeTypeDef *hora)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b084      	sub	sp, #16
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
    rtcHW_t *disp = &rtcHW;
 8016dec:	4b09      	ldr	r3, [pc, #36]	; (8016e14 <ajustarHoraRTChw+0x30>)
 8016dee:	60fb      	str	r3, [r7, #12]

    if (HAL_RTC_SetTime(&disp->hrtc, hora, RTC_FORMAT_BIN) != HAL_OK)
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	331c      	adds	r3, #28
 8016df4:	2200      	movs	r2, #0
 8016df6:	6879      	ldr	r1, [r7, #4]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f017 f921 	bl	802e040 <HAL_RTC_SetTime>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d001      	beq.n	8016e08 <ajustarHoraRTChw+0x24>
        return false;
 8016e04:	2300      	movs	r3, #0
 8016e06:	e000      	b.n	8016e0a <ajustarHoraRTChw+0x26>

    return true;
 8016e08:	2301      	movs	r3, #1
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	200032dc 	.word	0x200032dc

08016e18 <ajustarFechaHoraPorDefectoRTChw>:
**  Descripcion:    Ajusta la fecha y la hora a unos valores por defecto
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarFechaHoraPorDefectoRTChw(void)
{
 8016e18:	b5b0      	push	{r4, r5, r7, lr}
 8016e1a:	b088      	sub	sp, #32
 8016e1c:	af04      	add	r7, sp, #16
    ajustarFechaRTChw(&fechaPorDefectoRTC);
 8016e1e:	4811      	ldr	r0, [pc, #68]	; (8016e64 <ajustarFechaHoraPorDefectoRTChw+0x4c>)
 8016e20:	f7ff ffc6 	bl	8016db0 <ajustarFechaRTChw>
    ajustarHoraRTChw(&horaPorDefectoRTC);
 8016e24:	4810      	ldr	r0, [pc, #64]	; (8016e68 <ajustarFechaHoraPorDefectoRTChw+0x50>)
 8016e26:	f7ff ffdd 	bl	8016de4 <ajustarHoraRTChw>
    escribirBackupRTChw(BKP_FECHA_ESTANDAR_RTC, valorFechaEstandarBKP);
 8016e2a:	4b10      	ldr	r3, [pc, #64]	; (8016e6c <ajustarFechaHoraPorDefectoRTChw+0x54>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	4619      	mov	r1, r3
 8016e30:	2001      	movs	r0, #1
 8016e32:	f7ff ff63 	bl	8016cfc <escribirBackupRTChw>

    fechaHora_t fechaHora;
    convertirFechaHWAunix(fechaPorDefectoRTC, horaPorDefectoRTC, &fechaHora);
 8016e36:	4b0c      	ldr	r3, [pc, #48]	; (8016e68 <ajustarFechaHoraPorDefectoRTChw+0x50>)
 8016e38:	4d0a      	ldr	r5, [pc, #40]	; (8016e64 <ajustarFechaHoraPorDefectoRTChw+0x4c>)
 8016e3a:	1d3a      	adds	r2, r7, #4
 8016e3c:	9203      	str	r2, [sp, #12]
 8016e3e:	466c      	mov	r4, sp
 8016e40:	f103 020c 	add.w	r2, r3, #12
 8016e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016e4c:	6828      	ldr	r0, [r5, #0]
 8016e4e:	f000 f84e 	bl	8016eee <convertirFechaHWAunix>
    ajustarHoraInicioUnix(fechaHora);
 8016e52:	1d3b      	adds	r3, r7, #4
 8016e54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016e58:	f7ff fd3a 	bl	80168d0 <ajustarHoraInicioUnix>
}
 8016e5c:	bf00      	nop
 8016e5e:	3710      	adds	r7, #16
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bdb0      	pop	{r4, r5, r7, pc}
 8016e64:	200001d4 	.word	0x200001d4
 8016e68:	20003318 	.word	0x20003318
 8016e6c:	200001d0 	.word	0x200001d0

08016e70 <ajustarFechaHoraRTChw>:
**  Descripcion:    Ajusta la fecha y la hora del RTC hardware
**  Parametros:     Fecha y hora
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarFechaHoraRTChw(fechaHora_t fechaHora)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b08e      	sub	sp, #56	; 0x38
 8016e74:	af02      	add	r7, sp, #8
 8016e76:	1d3b      	adds	r3, r7, #4
 8016e78:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    RTC_TimeTypeDef hora;
    RTC_DateTypeDef fecha;

    convertirFechaUnixAhw(fechaHora, &fecha, &hora);
 8016e7c:	f107 0214 	add.w	r2, r7, #20
 8016e80:	f107 0318 	add.w	r3, r7, #24
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	4613      	mov	r3, r2
 8016e88:	1d3a      	adds	r2, r7, #4
 8016e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e8c:	f000 f80e 	bl	8016eac <convertirFechaUnixAhw>
    ajustarFechaRTChw(&fecha);
 8016e90:	f107 0314 	add.w	r3, r7, #20
 8016e94:	4618      	mov	r0, r3
 8016e96:	f7ff ff8b 	bl	8016db0 <ajustarFechaRTChw>
    ajustarHoraRTChw(&hora);
 8016e9a:	f107 0318 	add.w	r3, r7, #24
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7ff ffa0 	bl	8016de4 <ajustarHoraRTChw>

}
 8016ea4:	bf00      	nop
 8016ea6:	3730      	adds	r7, #48	; 0x30
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <convertirFechaUnixAhw>:
**  Descripcion:    Convierte la fecha y hora del formato unix al hardware
**  Parametros:     Fecha y hora hw, fecha en unix, hora en unix
**  Retorno:        Ninguno
****************************************************************************************/
void convertirFechaUnixAhw(fechaHora_t fechaHora, RTC_DateTypeDef *fecha, RTC_TimeTypeDef *hora)
{
 8016eac:	b490      	push	{r4, r7}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	1d3c      	adds	r4, r7, #4
 8016eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016eb8:	603b      	str	r3, [r7, #0]
    fecha->Date = fechaHora.dia;
 8016eba:	79fa      	ldrb	r2, [r7, #7]
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	709a      	strb	r2, [r3, #2]
    fecha->Month = fechaHora.mes;
 8016ec0:	79ba      	ldrb	r2, [r7, #6]
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	705a      	strb	r2, [r3, #1]
    fecha->Year = (uint8_t)(fechaHora.ano - ANO_REFERENCIA_RTC);
 8016ec6:	88bb      	ldrh	r3, [r7, #4]
 8016ec8:	b2db      	uxtb	r3, r3
 8016eca:	3330      	adds	r3, #48	; 0x30
 8016ecc:	b2da      	uxtb	r2, r3
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	70da      	strb	r2, [r3, #3]

    hora->Hours = fechaHora.horas;
 8016ed2:	7a3a      	ldrb	r2, [r7, #8]
 8016ed4:	69bb      	ldr	r3, [r7, #24]
 8016ed6:	701a      	strb	r2, [r3, #0]
    hora->Minutes = fechaHora.minutos;
 8016ed8:	7a7a      	ldrb	r2, [r7, #9]
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	705a      	strb	r2, [r3, #1]
    hora->Seconds = fechaHora.segundos;
 8016ede:	7aba      	ldrb	r2, [r7, #10]
 8016ee0:	69bb      	ldr	r3, [r7, #24]
 8016ee2:	709a      	strb	r2, [r3, #2]
}
 8016ee4:	bf00      	nop
 8016ee6:	3710      	adds	r7, #16
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bc90      	pop	{r4, r7}
 8016eec:	4770      	bx	lr

08016eee <convertirFechaHWAunix>:
**  Descripcion:    Convierte la fecha y hora del formato hardware al unix
**  Parametros:     Fecha en unix, hora en unix, fecha y hora hw
**  Retorno:        Ninguno
****************************************************************************************/
void convertirFechaHWAunix(RTC_DateTypeDef fecha, RTC_TimeTypeDef hora, fechaHora_t *fechaHora)
{
 8016eee:	b084      	sub	sp, #16
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	f107 0014 	add.w	r0, r7, #20
 8016efc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fechaHora->ano = fecha.Year + ANO_REFERENCIA_RTC;
 8016f00:	79fb      	ldrb	r3, [r7, #7]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0c:	801a      	strh	r2, [r3, #0]
    fechaHora->mes = fecha.Month;
 8016f0e:	797a      	ldrb	r2, [r7, #5]
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	709a      	strb	r2, [r3, #2]
    fechaHora->dia = fecha.Date;
 8016f14:	79ba      	ldrb	r2, [r7, #6]
 8016f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f18:	70da      	strb	r2, [r3, #3]
    fechaHora->horas = hora.Hours;
 8016f1a:	7d3a      	ldrb	r2, [r7, #20]
 8016f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1e:	711a      	strb	r2, [r3, #4]
    fechaHora->minutos = hora.Minutes;
 8016f20:	7d7a      	ldrb	r2, [r7, #21]
 8016f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f24:	715a      	strb	r2, [r3, #5]
    fechaHora->segundos = hora.Seconds;
 8016f26:	7dba      	ldrb	r2, [r7, #22]
 8016f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2a:	719a      	strb	r2, [r3, #6]
    fechaHora->milisegundos = millis();
 8016f2c:	f000 fe12 	bl	8017b54 <millis>
 8016f30:	4603      	mov	r3, r0
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	811a      	strh	r2, [r3, #8]
}
 8016f38:	bf00      	nop
 8016f3a:	3708      	adds	r7, #8
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016f42:	b004      	add	sp, #16
 8016f44:	4770      	bx	lr
	...

08016f48 <punteroSDMMC>:
**  Descripcion:    Devuelve el puntero a un SDMMC seleccionado
**  Parametros:     Ninguno
**  Retorno:        Puntero
****************************************************************************************/
sdmmc_t *punteroSDMMC(void)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	af00      	add	r7, sp, #0
    return &sdmmc;
 8016f4c:	4b02      	ldr	r3, [pc, #8]	; (8016f58 <punteroSDMMC+0x10>)
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	46bd      	mov	sp, r7
 8016f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f56:	4770      	bx	lr
 8016f58:	20003330 	.word	0x20003330

08016f5c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b087      	sub	sp, #28
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8016f6e:	2320      	movs	r3, #32
 8016f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8016f72:	f3bf 8f4f 	dsb	sy
}
 8016f76:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8016f78:	e00b      	b.n	8016f92 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8016f7a:	4a0d      	ldr	r2, [pc, #52]	; (8016fb0 <SCB_InvalidateDCache_by_Addr+0x54>)
 8016f7c:	693b      	ldr	r3, [r7, #16]
 8016f7e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	693a      	ldr	r2, [r7, #16]
 8016f86:	4413      	add	r3, r2
 8016f88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8016f8a:	697a      	ldr	r2, [r7, #20]
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	1ad3      	subs	r3, r2, r3
 8016f90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	dcf0      	bgt.n	8016f7a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8016f98:	f3bf 8f4f 	dsb	sy
}
 8016f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016f9e:	f3bf 8f6f 	isb	sy
}
 8016fa2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8016fa4:	bf00      	nop
 8016fa6:	371c      	adds	r7, #28
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fae:	4770      	bx	lr
 8016fb0:	e000ed00 	.word	0xe000ed00

08016fb4 <HAL_SD_TxCpltCallback>:
**  Descripcion:    Callback de la transferencia completa
**  Parametros:     Handler de la sdmmc
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsdmmc)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b084      	sub	sp, #16
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
    UNUSED(hsdmmc);

    sdmmc_t *driver = punteroSDMMC();
 8016fbc:	f7ff ffc4 	bl	8016f48 <punteroSDMMC>
 8016fc0:	60f8      	str	r0, [r7, #12]
    driver->escribiendo = false;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8016fca:	bf00      	nop
 8016fcc:	3710      	adds	r7, #16
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
	...

08016fd4 <HAL_SD_RxCpltCallback>:
**  Descripcion:    Callback de la recepcion completa
**  Parametros:     Handler de la sdmmc
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsdmmc)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b084      	sub	sp, #16
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
    UNUSED(hsdmmc);

    sdmmc_t *driver = punteroSDMMC();
 8016fdc:	f7ff ffb4 	bl	8016f48 <punteroSDMMC>
 8016fe0:	60f8      	str	r0, [r7, #12]
    driver->leyendo = false;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

    uint32_t dirAlineada = (uint32_t)parametrosLecturaSDMMC.buffer & ~0x1F;
 8016fea:	4b0c      	ldr	r3, [pc, #48]	; (801701c <HAL_SD_RxCpltCallback+0x48>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f023 031f 	bic.w	r3, r3, #31
 8016ff2:	60bb      	str	r3, [r7, #8]
    SCB_InvalidateDCache_by_Addr((uint32_t*)dirAlineada, parametrosLecturaSDMMC.numBloques * parametrosLecturaSDMMC.tamBloque + ((uint32_t)parametrosLecturaSDMMC.buffer - dirAlineada));
 8016ff4:	68b8      	ldr	r0, [r7, #8]
 8016ff6:	4b09      	ldr	r3, [pc, #36]	; (801701c <HAL_SD_RxCpltCallback+0x48>)
 8016ff8:	689b      	ldr	r3, [r3, #8]
 8016ffa:	4a08      	ldr	r2, [pc, #32]	; (801701c <HAL_SD_RxCpltCallback+0x48>)
 8016ffc:	6852      	ldr	r2, [r2, #4]
 8016ffe:	fb03 f202 	mul.w	r2, r3, r2
 8017002:	4b06      	ldr	r3, [pc, #24]	; (801701c <HAL_SD_RxCpltCallback+0x48>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	4619      	mov	r1, r3
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	1acb      	subs	r3, r1, r3
 801700c:	4413      	add	r3, r2
 801700e:	4619      	mov	r1, r3
 8017010:	f7ff ffa4 	bl	8016f5c <SCB_InvalidateDCache_by_Addr>
}
 8017014:	bf00      	nop
 8017016:	3710      	adds	r7, #16
 8017018:	46bd      	mov	sp, r7
 801701a:	bd80      	pop	{r7, pc}
 801701c:	200034f0 	.word	0x200034f0

08017020 <HAL_SD_AbortCallback>:
**  Descripcion:    Abortar callback
**  Parametros:     Handler de la sdmmc
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsdmmc)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b084      	sub	sp, #16
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
    UNUSED(hsdmmc);

    sdmmc_t *driver = punteroSDMMC();
 8017028:	f7ff ff8e 	bl	8016f48 <punteroSDMMC>
 801702c:	60f8      	str	r0, [r7, #12]

    driver->escribiendo = false;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	2200      	movs	r2, #0
 8017032:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    driver->leyendo = false;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2200      	movs	r2, #0
 801703a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 801703e:	bf00      	nop
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}

08017046 <SDMMC1_IRQHandler>:
**  Descripcion:    Interrupcion general del SDMMC1
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void SDMMC1_IRQHandler(void)
{
 8017046:	b580      	push	{r7, lr}
 8017048:	b082      	sub	sp, #8
 801704a:	af00      	add	r7, sp, #0
    sdmmc_t *driver = punteroSDMMC();
 801704c:	f7ff ff7c 	bl	8016f48 <punteroSDMMC>
 8017050:	6078      	str	r0, [r7, #4]
    HAL_SD_IRQHandler(&driver->hal.hsdmmc);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	3368      	adds	r3, #104	; 0x68
 8017056:	4618      	mov	r0, r3
 8017058:	f017 fac8 	bl	802e5ec <HAL_SD_IRQHandler>
}
 801705c:	bf00      	nop
 801705e:	3708      	adds	r7, #8
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <SDMMC2_IRQHandler>:
**  Descripcion:    Interrupcion general del SDMMC2
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void SDMMC2_IRQHandler(void)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
    sdmmc_t *driver = punteroSDMMC();
 801706a:	f7ff ff6d 	bl	8016f48 <punteroSDMMC>
 801706e:	6078      	str	r0, [r7, #4]
    HAL_SD_IRQHandler(&driver->hal.hsdmmc);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	3368      	adds	r3, #104	; 0x68
 8017074:	4618      	mov	r0, r3
 8017076:	f017 fab9 	bl	802e5ec <HAL_SD_IRQHandler>
}
 801707a:	bf00      	nop
 801707c:	3708      	adds	r7, #8
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}
	...

08017084 <punteroSPI>:
**  Descripcion:    Devuelve el puntero a un SPI seleccionado
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
spi_t *punteroSPI(numSPI_e numSPI)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
 801708a:	4603      	mov	r3, r0
 801708c:	71fb      	strb	r3, [r7, #7]
    return &spi[numSPI];
 801708e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017092:	4613      	mov	r3, r2
 8017094:	011b      	lsls	r3, r3, #4
 8017096:	1a9b      	subs	r3, r3, r2
 8017098:	00db      	lsls	r3, r3, #3
 801709a:	4a04      	ldr	r2, [pc, #16]	; (80170ac <punteroSPI+0x28>)
 801709c:	4413      	add	r3, r2
}
 801709e:	4618      	mov	r0, r3
 80170a0:	370c      	adds	r7, #12
 80170a2:	46bd      	mov	sp, r7
 80170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a8:	4770      	bx	lr
 80170aa:	bf00      	nop
 80170ac:	200034fc 	.word	0x200034fc

080170b0 <iniciarSPI>:
**  Descripcion:    Inicia el SPI
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarSPI(numSPI_e numSPI)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	4603      	mov	r3, r0
 80170b8:	71fb      	strb	r3, [r7, #7]
    if (numSPI == SPI_NINGUNO) {
 80170ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80170be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170c2:	d104      	bne.n	80170ce <iniciarSPI+0x1e>
#ifdef DEBUG
        printf("Fallo en la definicion del SPI\n");
 80170c4:	4819      	ldr	r0, [pc, #100]	; (801712c <iniciarSPI+0x7c>)
 80170c6:	f01e fe9b 	bl	8035e00 <puts>
#endif
        return false;
 80170ca:	2300      	movs	r3, #0
 80170cc:	e02a      	b.n	8017124 <iniciarSPI+0x74>
    }

    spi_t *driver = &spi[numSPI];
 80170ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80170d2:	4613      	mov	r3, r2
 80170d4:	011b      	lsls	r3, r3, #4
 80170d6:	1a9b      	subs	r3, r3, r2
 80170d8:	00db      	lsls	r3, r3, #3
 80170da:	4a15      	ldr	r2, [pc, #84]	; (8017130 <iniciarSPI+0x80>)
 80170dc:	4413      	add	r3, r2
 80170de:	60fb      	str	r3, [r7, #12]

    memset(driver, 0, sizeof(*driver));
 80170e0:	2278      	movs	r2, #120	; 0x78
 80170e2:	2100      	movs	r1, #0
 80170e4:	68f8      	ldr	r0, [r7, #12]
 80170e6:	f01e f8db 	bl	80352a0 <memset>
    resetearContadorErrorSPI(numSPI);
 80170ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80170ee:	4618      	mov	r0, r3
 80170f0:	f000 f85c 	bl	80171ac <resetearContadorErrorSPI>
    driver->iniciado = false;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2200      	movs	r2, #0
 80170f8:	701a      	strb	r2, [r3, #0]

    if (iniciarDriverSPI(numSPI)) {
 80170fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80170fe:	4618      	mov	r0, r3
 8017100:	f000 f934 	bl	801736c <iniciarDriverSPI>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d004      	beq.n	8017114 <iniciarSPI+0x64>
        driver->iniciado = true;
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	2201      	movs	r2, #1
 801710e:	701a      	strb	r2, [r3, #0]
        return true;
 8017110:	2301      	movs	r3, #1
 8017112:	e007      	b.n	8017124 <iniciarSPI+0x74>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion del bus SPI %u\n", numSPI + 1);
 8017114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017118:	3301      	adds	r3, #1
 801711a:	4619      	mov	r1, r3
 801711c:	4805      	ldr	r0, [pc, #20]	; (8017134 <iniciarSPI+0x84>)
 801711e:	f01e fde9 	bl	8035cf4 <iprintf>
#endif
        return false;
 8017122:	2300      	movs	r3, #0
    }
}
 8017124:	4618      	mov	r0, r3
 8017126:	3710      	adds	r7, #16
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	0803a644 	.word	0x0803a644
 8017130:	200034fc 	.word	0x200034fc
 8017134:	0803a664 	.word	0x0803a664

08017138 <spiIniciado>:
**  Descripcion:    Comprueba si el SPI esta iniciado
**  Parametros:     Numero de SPI
**  Retorno:        True si iniciado
****************************************************************************************/
bool spiIniciado(numSPI_e numSPI)
{
 8017138:	b480      	push	{r7}
 801713a:	b083      	sub	sp, #12
 801713c:	af00      	add	r7, sp, #0
 801713e:	4603      	mov	r3, r0
 8017140:	71fb      	strb	r3, [r7, #7]
    return spi[numSPI].iniciado;
 8017142:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017146:	4906      	ldr	r1, [pc, #24]	; (8017160 <spiIniciado+0x28>)
 8017148:	4613      	mov	r3, r2
 801714a:	011b      	lsls	r3, r3, #4
 801714c:	1a9b      	subs	r3, r3, r2
 801714e:	00db      	lsls	r3, r3, #3
 8017150:	440b      	add	r3, r1
 8017152:	781b      	ldrb	r3, [r3, #0]
}
 8017154:	4618      	mov	r0, r3
 8017156:	370c      	adds	r7, #12
 8017158:	46bd      	mov	sp, r7
 801715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715e:	4770      	bx	lr
 8017160:	200034fc 	.word	0x200034fc

08017164 <errorCallbackSPI>:
**  Descripcion:    Incrementa el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void errorCallbackSPI(numSPI_e numSPI)
{
 8017164:	b480      	push	{r7}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
 801716a:	4603      	mov	r3, r0
 801716c:	71fb      	strb	r3, [r7, #7]
    spi[numSPI].numErrores++;
 801716e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017172:	490d      	ldr	r1, [pc, #52]	; (80171a8 <errorCallbackSPI+0x44>)
 8017174:	4613      	mov	r3, r2
 8017176:	011b      	lsls	r3, r3, #4
 8017178:	1a9b      	subs	r3, r3, r2
 801717a:	00db      	lsls	r3, r3, #3
 801717c:	440b      	add	r3, r1
 801717e:	3374      	adds	r3, #116	; 0x74
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	b29b      	uxth	r3, r3
 8017184:	3301      	adds	r3, #1
 8017186:	b298      	uxth	r0, r3
 8017188:	4907      	ldr	r1, [pc, #28]	; (80171a8 <errorCallbackSPI+0x44>)
 801718a:	4613      	mov	r3, r2
 801718c:	011b      	lsls	r3, r3, #4
 801718e:	1a9b      	subs	r3, r3, r2
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	440b      	add	r3, r1
 8017194:	3374      	adds	r3, #116	; 0x74
 8017196:	4602      	mov	r2, r0
 8017198:	801a      	strh	r2, [r3, #0]
}
 801719a:	bf00      	nop
 801719c:	370c      	adds	r7, #12
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop
 80171a8:	200034fc 	.word	0x200034fc

080171ac <resetearContadorErrorSPI>:
**  Descripcion:    Resetea el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void resetearContadorErrorSPI(numSPI_e numSPI)
{
 80171ac:	b480      	push	{r7}
 80171ae:	b083      	sub	sp, #12
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	4603      	mov	r3, r0
 80171b4:	71fb      	strb	r3, [r7, #7]
    spi[numSPI].numErrores = 0;
 80171b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80171ba:	4907      	ldr	r1, [pc, #28]	; (80171d8 <resetearContadorErrorSPI+0x2c>)
 80171bc:	4613      	mov	r3, r2
 80171be:	011b      	lsls	r3, r3, #4
 80171c0:	1a9b      	subs	r3, r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	3374      	adds	r3, #116	; 0x74
 80171c8:	2200      	movs	r2, #0
 80171ca:	801a      	strh	r2, [r3, #0]
}
 80171cc:	bf00      	nop
 80171ce:	370c      	adds	r7, #12
 80171d0:	46bd      	mov	sp, r7
 80171d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d6:	4770      	bx	lr
 80171d8:	200034fc 	.word	0x200034fc

080171dc <ocupadoBusSPI>:
**  Descripcion:    Comprueba si el bus SPI esta ocupado
**  Parametros:     Bus
**  Retorno:        True si ocupado
****************************************************************************************/
bool ocupadoBusSPI(const bus_t *bus)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
    return ocupadoSPI(bus->bus_u.spi.numSPI);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f000 f9c9 	bl	8017582 <ocupadoSPI>
 80171f0:	4603      	mov	r3, r0
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3708      	adds	r7, #8
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}

080171fa <escribirRawBufferRegistroBusSPI>:
**  Descripcion:    Escribe un buffer en un registro por el SPI sin gestionar el pin CS
**  Parametros:     Bus, registro, buffer a escribir, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
bool escribirRawBufferRegistroBusSPI(const bus_t *bus, uint8_t reg, uint8_t *datoTx, uint16_t longitud)
{
 80171fa:	b580      	push	{r7, lr}
 80171fc:	b086      	sub	sp, #24
 80171fe:	af00      	add	r7, sp, #0
 8017200:	60f8      	str	r0, [r7, #12]
 8017202:	607a      	str	r2, [r7, #4]
 8017204:	461a      	mov	r2, r3
 8017206:	460b      	mov	r3, r1
 8017208:	72fb      	strb	r3, [r7, #11]
 801720a:	4613      	mov	r3, r2
 801720c:	813b      	strh	r3, [r7, #8]
    bool estado1, estado2;

    estado1 = escribirSPI(bus->bus_u.spi.numSPI, reg);
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017214:	7afa      	ldrb	r2, [r7, #11]
 8017216:	4611      	mov	r1, r2
 8017218:	4618      	mov	r0, r3
 801721a:	f000 f954 	bl	80174c6 <escribirSPI>
 801721e:	4603      	mov	r3, r0
 8017220:	75fb      	strb	r3, [r7, #23]
    estado2 = escribirBufferSPI(bus->bus_u.spi.numSPI, datoTx, longitud);
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017228:	893a      	ldrh	r2, [r7, #8]
 801722a:	6879      	ldr	r1, [r7, #4]
 801722c:	4618      	mov	r0, r3
 801722e:	f000 f95e 	bl	80174ee <escribirBufferSPI>
 8017232:	4603      	mov	r3, r0
 8017234:	75bb      	strb	r3, [r7, #22]

    if (estado1 == false || estado2 == false)
 8017236:	7dfb      	ldrb	r3, [r7, #23]
 8017238:	f083 0301 	eor.w	r3, r3, #1
 801723c:	b2db      	uxtb	r3, r3
 801723e:	2b00      	cmp	r3, #0
 8017240:	d105      	bne.n	801724e <escribirRawBufferRegistroBusSPI+0x54>
 8017242:	7dbb      	ldrb	r3, [r7, #22]
 8017244:	f083 0301 	eor.w	r3, r3, #1
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b00      	cmp	r3, #0
 801724c:	d001      	beq.n	8017252 <escribirRawBufferRegistroBusSPI+0x58>
        return false;
 801724e:	2300      	movs	r3, #0
 8017250:	e000      	b.n	8017254 <escribirRawBufferRegistroBusSPI+0x5a>
    else
        return true;
 8017252:	2301      	movs	r3, #1
}
 8017254:	4618      	mov	r0, r3
 8017256:	3718      	adds	r7, #24
 8017258:	46bd      	mov	sp, r7
 801725a:	bd80      	pop	{r7, pc}

0801725c <escribirBufferRegistroBusSPI>:
**  Descripcion:    Escribe un buffer en un registro por el SPI
**  Parametros:     Bus, registro, buffer a escribir, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
bool escribirBufferRegistroBusSPI(const bus_t *bus, uint8_t reg, uint8_t *datoTx, uint16_t longitud)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b086      	sub	sp, #24
 8017260:	af00      	add	r7, sp, #0
 8017262:	60f8      	str	r0, [r7, #12]
 8017264:	607a      	str	r2, [r7, #4]
 8017266:	461a      	mov	r2, r3
 8017268:	460b      	mov	r3, r1
 801726a:	72fb      	strb	r3, [r7, #11]
 801726c:	4613      	mov	r3, r2
 801726e:	813b      	strh	r3, [r7, #8]
    bool estado;

    escribirIO(bus->bus_u.spi.pinCS, false);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	789b      	ldrb	r3, [r3, #2]
 8017274:	2100      	movs	r1, #0
 8017276:	4618      	mov	r0, r3
 8017278:	f7ff f97a 	bl	8016570 <escribirIO>
    estado = escribirRawBufferRegistroBusSPI(bus, reg, datoTx, longitud);
 801727c:	893b      	ldrh	r3, [r7, #8]
 801727e:	7af9      	ldrb	r1, [r7, #11]
 8017280:	687a      	ldr	r2, [r7, #4]
 8017282:	68f8      	ldr	r0, [r7, #12]
 8017284:	f7ff ffb9 	bl	80171fa <escribirRawBufferRegistroBusSPI>
 8017288:	4603      	mov	r3, r0
 801728a:	75fb      	strb	r3, [r7, #23]
    escribirIO(bus->bus_u.spi.pinCS, true);
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	789b      	ldrb	r3, [r3, #2]
 8017290:	2101      	movs	r1, #1
 8017292:	4618      	mov	r0, r3
 8017294:	f7ff f96c 	bl	8016570 <escribirIO>
    return estado;
 8017298:	7dfb      	ldrb	r3, [r7, #23]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3718      	adds	r7, #24
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}

080172a2 <leerRawBufferRegistroBusSPI>:
**  Descripcion:    Lee un buffer de un registro por el SPI sin gestionar el pin CS
**  Parametros:     Bus, registro, bufer de lectura, longitud del buffer
**  Retorno:        Dato leido
****************************************************************************************/
bool leerRawBufferRegistroBusSPI(const bus_t *bus, uint8_t reg, uint8_t *datoRx, uint16_t longitud)
{
 80172a2:	b580      	push	{r7, lr}
 80172a4:	b086      	sub	sp, #24
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	60f8      	str	r0, [r7, #12]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	461a      	mov	r2, r3
 80172ae:	460b      	mov	r3, r1
 80172b0:	72fb      	strb	r3, [r7, #11]
 80172b2:	4613      	mov	r3, r2
 80172b4:	813b      	strh	r3, [r7, #8]
    bool estado1, estado2;

    estado1 = escribirSPI(bus->bus_u.spi.numSPI, reg);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172bc:	7afa      	ldrb	r2, [r7, #11]
 80172be:	4611      	mov	r1, r2
 80172c0:	4618      	mov	r0, r3
 80172c2:	f000 f900 	bl	80174c6 <escribirSPI>
 80172c6:	4603      	mov	r3, r0
 80172c8:	75fb      	strb	r3, [r7, #23]
    estado2 = leerBufferSPI(bus->bus_u.spi.numSPI, datoRx, longitud);
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172d0:	893a      	ldrh	r2, [r7, #8]
 80172d2:	6879      	ldr	r1, [r7, #4]
 80172d4:	4618      	mov	r0, r3
 80172d6:	f000 f92f 	bl	8017538 <leerBufferSPI>
 80172da:	4603      	mov	r3, r0
 80172dc:	75bb      	strb	r3, [r7, #22]

    if (estado1 == false || estado2 == false)
 80172de:	7dfb      	ldrb	r3, [r7, #23]
 80172e0:	f083 0301 	eor.w	r3, r3, #1
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d105      	bne.n	80172f6 <leerRawBufferRegistroBusSPI+0x54>
 80172ea:	7dbb      	ldrb	r3, [r7, #22]
 80172ec:	f083 0301 	eor.w	r3, r3, #1
 80172f0:	b2db      	uxtb	r3, r3
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d001      	beq.n	80172fa <leerRawBufferRegistroBusSPI+0x58>
        return false;
 80172f6:	2300      	movs	r3, #0
 80172f8:	e000      	b.n	80172fc <leerRawBufferRegistroBusSPI+0x5a>
    else
        return true;
 80172fa:	2301      	movs	r3, #1
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3718      	adds	r7, #24
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <leerBufferRegistroBusSPI>:
**  Descripcion:    Lee un buffer de un registro por el SPI
**  Parametros:     Bus, registro, bufer de lectura, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
bool leerBufferRegistroBusSPI(const bus_t *bus, uint8_t reg, uint8_t *datoRx, uint16_t longitud)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
 801730a:	60f8      	str	r0, [r7, #12]
 801730c:	607a      	str	r2, [r7, #4]
 801730e:	461a      	mov	r2, r3
 8017310:	460b      	mov	r3, r1
 8017312:	72fb      	strb	r3, [r7, #11]
 8017314:	4613      	mov	r3, r2
 8017316:	813b      	strh	r3, [r7, #8]
    bool estado;

    escribirIO(bus->bus_u.spi.pinCS, false);
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	789b      	ldrb	r3, [r3, #2]
 801731c:	2100      	movs	r1, #0
 801731e:	4618      	mov	r0, r3
 8017320:	f7ff f926 	bl	8016570 <escribirIO>
    estado = leerRawBufferRegistroBusSPI(bus, reg, datoRx, longitud);
 8017324:	893b      	ldrh	r3, [r7, #8]
 8017326:	7af9      	ldrb	r1, [r7, #11]
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	68f8      	ldr	r0, [r7, #12]
 801732c:	f7ff ffb9 	bl	80172a2 <leerRawBufferRegistroBusSPI>
 8017330:	4603      	mov	r3, r0
 8017332:	75fb      	strb	r3, [r7, #23]
    escribirIO(bus->bus_u.spi.pinCS, true);
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	789b      	ldrb	r3, [r3, #2]
 8017338:	2101      	movs	r1, #1
 801733a:	4618      	mov	r0, r3
 801733c:	f7ff f918 	bl	8016570 <escribirIO>
    return estado;
 8017340:	7dfb      	ldrb	r3, [r7, #23]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3718      	adds	r7, #24
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
	...

0801734c <configSPI>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configSPI_t, NUM_MAX_SPI, configSPI);
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	009b      	lsls	r3, r3, #2
 8017358:	4a03      	ldr	r2, [pc, #12]	; (8017368 <configSPI+0x1c>)
 801735a:	4413      	add	r3, r2
 801735c:	4618      	mov	r0, r3
 801735e:	370c      	adds	r7, #12
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr
 8017368:	2000a9ac 	.word	0x2000a9ac

0801736c <iniciarDriverSPI>:
**  Descripcion:    Inicia el dispositivo SPI
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverSPI(numSPI_e numSPI)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b084      	sub	sp, #16
 8017370:	af00      	add	r7, sp, #0
 8017372:	4603      	mov	r3, r0
 8017374:	71fb      	strb	r3, [r7, #7]
    spi_t *driver = punteroSPI(numSPI);
 8017376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801737a:	4618      	mov	r0, r3
 801737c:	f7ff fe82 	bl	8017084 <punteroSPI>
 8017380:	60f8      	str	r0, [r7, #12]

    if (!driver->hal.asignado) {
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	791b      	ldrb	r3, [r3, #4]
 8017386:	f083 0301 	eor.w	r3, r3, #1
 801738a:	b2db      	uxtb	r3, r3
 801738c:	2b00      	cmp	r3, #0
 801738e:	d04a      	beq.n	8017426 <iniciarDriverSPI+0xba>
	    if (!asignarHALspi(numSPI))
 8017390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017394:	4618      	mov	r0, r3
 8017396:	f000 fa13 	bl	80177c0 <asignarHALspi>
 801739a:	4603      	mov	r3, r0
 801739c:	f083 0301 	eor.w	r3, r3, #1
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d001      	beq.n	80173aa <iniciarDriverSPI+0x3e>
	        return false;
 80173a6:	2300      	movs	r3, #0
 80173a8:	e089      	b.n	80174be <iniciarDriverSPI+0x152>
	    else {
	        habilitarRelojSPI(numSPI);
 80173aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 f986 	bl	80176c0 <habilitarRelojSPI>

            // Configura los pines
	        if (configSPI(numSPI)->leadingEdge == true)
 80173b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7ff ffc7 	bl	801734c <configSPI>
 80173be:	4603      	mov	r3, r0
 80173c0:	78db      	ldrb	r3, [r3, #3]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d00b      	beq.n	80173de <iniciarDriverSPI+0x72>
	            configurarIO(driver->hal.pinSCK.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLDOWN), driver->hal.pinSCK.af);
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80173d2:	461a      	mov	r2, r3
 80173d4:	f241 3102 	movw	r1, #4866	; 0x1302
 80173d8:	f7fe ffea 	bl	80163b0 <configurarIO>
 80173dc:	e00a      	b.n	80173f4 <iniciarDriverSPI+0x88>
	        else
	            configurarIO(driver->hal.pinSCK.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLUP), driver->hal.pinSCK.af);
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80173ea:	461a      	mov	r2, r3
 80173ec:	f640 3102 	movw	r1, #2818	; 0xb02
 80173f0:	f7fe ffde 	bl	80163b0 <configurarIO>

	        configurarIO(driver->hal.pinMISO.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_PULLUP), driver->hal.pinMISO.af);
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	f893 006e 	ldrb.w	r0, [r3, #110]	; 0x6e
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017400:	461a      	mov	r2, r3
 8017402:	f640 3102 	movw	r1, #2818	; 0xb02
 8017406:	f7fe ffd3 	bl	80163b0 <configurarIO>
	        configurarIO(driver->hal.pinMOSI.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_NOPULL), driver->hal.pinMOSI.af);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8017416:	461a      	mov	r2, r3
 8017418:	f240 3102 	movw	r1, #770	; 0x302
 801741c:	f7fe ffc8 	bl	80163b0 <configurarIO>

	        driver->hal.asignado = true;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	2201      	movs	r2, #1
 8017424:	711a      	strb	r2, [r3, #4]
	    }
    }

    // Resetea el dispositivo
    HAL_SPI_DeInit(&driver->hal.hspi);
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	3308      	adds	r3, #8
 801742a:	4618      	mov	r0, r3
 801742c:	f017 fbe7 	bl	802ebfe <HAL_SPI_DeInit>

    driver->hal.hspi.Init.Mode = SPI_MODE_MASTER;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017436:	60da      	str	r2, [r3, #12]
    driver->hal.hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2200      	movs	r2, #0
 801743c:	611a      	str	r2, [r3, #16]
    driver->hal.hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017444:	615a      	str	r2, [r3, #20]
    driver->hal.hspi.Init.CLKPolarity = configSPI(numSPI)->leadingEdge ? SPI_POLARITY_LOW : SPI_POLARITY_HIGH;
 8017446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801744a:	4618      	mov	r0, r3
 801744c:	f7ff ff7e 	bl	801734c <configSPI>
 8017450:	4603      	mov	r3, r0
 8017452:	78db      	ldrb	r3, [r3, #3]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d001      	beq.n	801745c <iniciarDriverSPI+0xf0>
 8017458:	2200      	movs	r2, #0
 801745a:	e000      	b.n	801745e <iniciarDriverSPI+0xf2>
 801745c:	2202      	movs	r2, #2
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	619a      	str	r2, [r3, #24]
    driver->hal.hspi.Init.CLKPhase = configSPI(numSPI)->leadingEdge ? SPI_PHASE_1EDGE : SPI_PHASE_2EDGE;
 8017462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017466:	4618      	mov	r0, r3
 8017468:	f7ff ff70 	bl	801734c <configSPI>
 801746c:	4603      	mov	r3, r0
 801746e:	78db      	ldrb	r3, [r3, #3]
 8017470:	f083 0301 	eor.w	r3, r3, #1
 8017474:	b2db      	uxtb	r3, r3
 8017476:	461a      	mov	r2, r3
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	61da      	str	r2, [r3, #28]
    driver->hal.hspi.Init.NSS = SPI_NSS_SOFT;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017482:	621a      	str	r2, [r3, #32]
    driver->hal.hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	2210      	movs	r2, #16
 8017488:	625a      	str	r2, [r3, #36]	; 0x24
    driver->hal.hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	2200      	movs	r2, #0
 801748e:	629a      	str	r2, [r3, #40]	; 0x28
    driver->hal.hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	2200      	movs	r2, #0
 8017494:	62da      	str	r2, [r3, #44]	; 0x2c
    driver->hal.hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2200      	movs	r2, #0
 801749a:	631a      	str	r2, [r3, #48]	; 0x30
    driver->hal.hspi.Init.CRCPolynomial = 7;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2207      	movs	r2, #7
 80174a0:	635a      	str	r2, [r3, #52]	; 0x34
    driver->hal.hspi.Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	2201      	movs	r2, #1
 80174a6:	639a      	str	r2, [r3, #56]	; 0x38

    if (HAL_SPI_Init(&driver->hal.hspi) != HAL_OK)
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	3308      	adds	r3, #8
 80174ac:	4618      	mov	r0, r3
 80174ae:	f017 fb14 	bl	802eada <HAL_SPI_Init>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d001      	beq.n	80174bc <iniciarDriverSPI+0x150>
        return false;
 80174b8:	2300      	movs	r3, #0
 80174ba:	e000      	b.n	80174be <iniciarDriverSPI+0x152>

    return true;
 80174bc:	2301      	movs	r3, #1
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3710      	adds	r7, #16
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <escribirSPI>:
**  Descripcion:    Escribe un dato en el SPI
**  Parametros:     Dispositivo, dato
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool escribirSPI(numSPI_e numSPI, uint8_t byteTx)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b082      	sub	sp, #8
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	4603      	mov	r3, r0
 80174ce:	460a      	mov	r2, r1
 80174d0:	71fb      	strb	r3, [r7, #7]
 80174d2:	4613      	mov	r3, r2
 80174d4:	71bb      	strb	r3, [r7, #6]
    return escribirBufferSPI(numSPI, &byteTx, 1);
 80174d6:	1db9      	adds	r1, r7, #6
 80174d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174dc:	2201      	movs	r2, #1
 80174de:	4618      	mov	r0, r3
 80174e0:	f000 f805 	bl	80174ee <escribirBufferSPI>
 80174e4:	4603      	mov	r3, r0
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	3708      	adds	r7, #8
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}

080174ee <escribirBufferSPI>:
**  Descripcion:    Escribe un buffer en el SPI
**  Parametros:     Dispositivo, buffer, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool escribirBufferSPI(numSPI_e numSPI, uint8_t *datoTx, uint16_t longitud)
{
 80174ee:	b580      	push	{r7, lr}
 80174f0:	b084      	sub	sp, #16
 80174f2:	af00      	add	r7, sp, #0
 80174f4:	4603      	mov	r3, r0
 80174f6:	6039      	str	r1, [r7, #0]
 80174f8:	71fb      	strb	r3, [r7, #7]
 80174fa:	4613      	mov	r3, r2
 80174fc:	80bb      	strh	r3, [r7, #4]
    SPI_HandleTypeDef *hspi = &punteroSPI(numSPI)->hal.hspi;
 80174fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017502:	4618      	mov	r0, r3
 8017504:	f7ff fdbe 	bl	8017084 <punteroSPI>
 8017508:	4603      	mov	r3, r0
 801750a:	3308      	adds	r3, #8
 801750c:	60fb      	str	r3, [r7, #12]

    if (HAL_SPI_Transmit(hspi, datoTx, longitud, TIMEOUT_DEFECTO_SPI) != HAL_OK) {
 801750e:	88ba      	ldrh	r2, [r7, #4]
 8017510:	230a      	movs	r3, #10
 8017512:	6839      	ldr	r1, [r7, #0]
 8017514:	68f8      	ldr	r0, [r7, #12]
 8017516:	f017 fbae 	bl	802ec76 <HAL_SPI_Transmit>
 801751a:	4603      	mov	r3, r0
 801751c:	2b00      	cmp	r3, #0
 801751e:	d006      	beq.n	801752e <escribirBufferSPI+0x40>
        errorCallbackSPI(numSPI);
 8017520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017524:	4618      	mov	r0, r3
 8017526:	f7ff fe1d 	bl	8017164 <errorCallbackSPI>
        return false;
 801752a:	2300      	movs	r3, #0
 801752c:	e000      	b.n	8017530 <escribirBufferSPI+0x42>
    }

    return true;
 801752e:	2301      	movs	r3, #1
}
 8017530:	4618      	mov	r0, r3
 8017532:	3710      	adds	r7, #16
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}

08017538 <leerBufferSPI>:
**  Descripcion:    Lee un buffer del SPI
**  Parametros:     Dispositivo, buffer de recepcion, longitud del buffer
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool leerBufferSPI(numSPI_e numSPI, uint8_t *datoRx, uint16_t longitud)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	af00      	add	r7, sp, #0
 801753e:	4603      	mov	r3, r0
 8017540:	6039      	str	r1, [r7, #0]
 8017542:	71fb      	strb	r3, [r7, #7]
 8017544:	4613      	mov	r3, r2
 8017546:	80bb      	strh	r3, [r7, #4]
    SPI_HandleTypeDef *hspi = &punteroSPI(numSPI)->hal.hspi;
 8017548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801754c:	4618      	mov	r0, r3
 801754e:	f7ff fd99 	bl	8017084 <punteroSPI>
 8017552:	4603      	mov	r3, r0
 8017554:	3308      	adds	r3, #8
 8017556:	60fb      	str	r3, [r7, #12]

    if (HAL_SPI_Receive(hspi, datoRx, longitud, TIMEOUT_DEFECTO_SPI) != HAL_OK) {
 8017558:	88ba      	ldrh	r2, [r7, #4]
 801755a:	230a      	movs	r3, #10
 801755c:	6839      	ldr	r1, [r7, #0]
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f017 fcef 	bl	802ef42 <HAL_SPI_Receive>
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	d006      	beq.n	8017578 <leerBufferSPI+0x40>
        errorCallbackSPI(numSPI);
 801756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801756e:	4618      	mov	r0, r3
 8017570:	f7ff fdf8 	bl	8017164 <errorCallbackSPI>
        return false;
 8017574:	2300      	movs	r3, #0
 8017576:	e000      	b.n	801757a <leerBufferSPI+0x42>
    }

    return true;
 8017578:	2301      	movs	r3, #1
}
 801757a:	4618      	mov	r0, r3
 801757c:	3710      	adds	r7, #16
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}

08017582 <ocupadoSPI>:
**  Descripcion:    Comprueba si el SPI esta ocupado
**  Parametros:     Dispositivo
**  Retorno:        True si ocupado
****************************************************************************************/
CODIGO_RAPIDO bool ocupadoSPI(numSPI_e numSPI)
{
 8017582:	b580      	push	{r7, lr}
 8017584:	b084      	sub	sp, #16
 8017586:	af00      	add	r7, sp, #0
 8017588:	4603      	mov	r3, r0
 801758a:	71fb      	strb	r3, [r7, #7]
	spi_t *driver = punteroSPI(numSPI);
 801758c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017590:	4618      	mov	r0, r3
 8017592:	f7ff fd77 	bl	8017084 <punteroSPI>
 8017596:	60f8      	str	r0, [r7, #12]

    if (nivelFifoTxSPI(driver->hal.hspi.Instance) != SPI_FRLVL_EMPTY || HAL_SPI_GetState(&driver->hal.hspi) == HAL_SPI_STATE_BUSY \
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	689b      	ldr	r3, [r3, #8]
 801759c:	4618      	mov	r0, r3
 801759e:	f000 f880 	bl	80176a2 <nivelFifoTxSPI>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d11f      	bne.n	80175e8 <ocupadoSPI+0x66>
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	3308      	adds	r3, #8
 80175ac:	4618      	mov	r0, r3
 80175ae:	f018 f803 	bl	802f5b8 <HAL_SPI_GetState>
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d017      	beq.n	80175e8 <ocupadoSPI+0x66>
     || HAL_SPI_GetState(&driver->hal.hspi) == HAL_SPI_STATE_BUSY_TX || HAL_SPI_GetState(&driver->hal.hspi) == HAL_SPI_STATE_BUSY_RX || HAL_SPI_GetState(&driver->hal.hspi) == HAL_SPI_STATE_BUSY_TX_RX)
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	3308      	adds	r3, #8
 80175bc:	4618      	mov	r0, r3
 80175be:	f017 fffb 	bl	802f5b8 <HAL_SPI_GetState>
 80175c2:	4603      	mov	r3, r0
 80175c4:	2b03      	cmp	r3, #3
 80175c6:	d00f      	beq.n	80175e8 <ocupadoSPI+0x66>
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	3308      	adds	r3, #8
 80175cc:	4618      	mov	r0, r3
 80175ce:	f017 fff3 	bl	802f5b8 <HAL_SPI_GetState>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b04      	cmp	r3, #4
 80175d6:	d007      	beq.n	80175e8 <ocupadoSPI+0x66>
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	3308      	adds	r3, #8
 80175dc:	4618      	mov	r0, r3
 80175de:	f017 ffeb 	bl	802f5b8 <HAL_SPI_GetState>
 80175e2:	4603      	mov	r3, r0
 80175e4:	2b05      	cmp	r3, #5
 80175e6:	d101      	bne.n	80175ec <ocupadoSPI+0x6a>
        return true;
 80175e8:	2301      	movs	r3, #1
 80175ea:	e000      	b.n	80175ee <ocupadoSPI+0x6c>
    else
        return false;
 80175ec:	2300      	movs	r3, #0
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3710      	adds	r7, #16
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}

080175f6 <ajustarRelojSPI>:
**  Descripcion:    Ajusta la velocidad del reloj del SPI
**  Parametros:     Dispositivo, divisor
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarRelojSPI(numSPI_e numSPI, divisorRelojSPI_e divisor)
{
 80175f6:	b590      	push	{r4, r7, lr}
 80175f8:	b085      	sub	sp, #20
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	4603      	mov	r3, r0
 80175fe:	460a      	mov	r2, r1
 8017600:	71fb      	strb	r3, [r7, #7]
 8017602:	4613      	mov	r3, r2
 8017604:	80bb      	strh	r3, [r7, #4]
	spi_t *driver = punteroSPI(numSPI);
 8017606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801760a:	4618      	mov	r0, r3
 801760c:	f7ff fd3a 	bl	8017084 <punteroSPI>
 8017610:	60f8      	str	r0, [r7, #12]

    // SPI2 y SPI3 estan conectados en APB1/AHB1 con PCLK la mitad de APB2/AHB2.
    if (numSPI == SPI_2 || numSPI == SPI_3)
 8017612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017616:	2b01      	cmp	r3, #1
 8017618:	d003      	beq.n	8017622 <ajustarRelojSPI+0x2c>
 801761a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801761e:	2b02      	cmp	r3, #2
 8017620:	d102      	bne.n	8017628 <ajustarRelojSPI+0x32>
        divisor /= 2;
 8017622:	88bb      	ldrh	r3, [r7, #4]
 8017624:	085b      	lsrs	r3, r3, #1
 8017626:	80bb      	strh	r3, [r7, #4]

    divisor = limitarInt32(divisor, 2, 256);
 8017628:	88bb      	ldrh	r3, [r7, #4]
 801762a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801762e:	2102      	movs	r1, #2
 8017630:	4618      	mov	r0, r3
 8017632:	f7fb ffdb 	bl	80135ec <limitarInt32>
 8017636:	4603      	mov	r3, r0
 8017638:	80bb      	strh	r3, [r7, #4]

    __HAL_SPI_DISABLE(&driver->hal.hspi);
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	689b      	ldr	r3, [r3, #8]
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017648:	601a      	str	r2, [r3, #0]
    ajustarPrescalerBaudrateSPI(driver->hal.hspi.Instance, (ffs(divisor) - 2) << SPI_CR1_BR_Pos);
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	689c      	ldr	r4, [r3, #8]
 801764e:	88bb      	ldrh	r3, [r7, #4]
 8017650:	4618      	mov	r0, r3
 8017652:	f01d fdd3 	bl	80351fc <ffs>
 8017656:	4603      	mov	r3, r0
 8017658:	3b02      	subs	r3, #2
 801765a:	00db      	lsls	r3, r3, #3
 801765c:	4619      	mov	r1, r3
 801765e:	4620      	mov	r0, r4
 8017660:	f000 f80c 	bl	801767c <ajustarPrescalerBaudrateSPI>
    __HAL_SPI_ENABLE(&driver->hal.hspi);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	689b      	ldr	r3, [r3, #8]
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	689b      	ldr	r3, [r3, #8]
 801766e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017672:	601a      	str	r2, [r3, #0]
}
 8017674:	bf00      	nop
 8017676:	3714      	adds	r7, #20
 8017678:	46bd      	mov	sp, r7
 801767a:	bd90      	pop	{r4, r7, pc}

0801767c <ajustarPrescalerBaudrateSPI>:
**  Descripcion:    Ajusta el prescaler del reloj del SPI
**  Parametros:     Instancia del dispositivo, baudrate
**  Retorno:        Ninguno
****************************************************************************************/
inline void ajustarPrescalerBaudrateSPI(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 801767c:	b480      	push	{r7}
 801767e:	b083      	sub	sp, #12
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
    MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	431a      	orrs	r2, r3
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	601a      	str	r2, [r3, #0]
}
 8017696:	bf00      	nop
 8017698:	370c      	adds	r7, #12
 801769a:	46bd      	mov	sp, r7
 801769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a0:	4770      	bx	lr

080176a2 <nivelFifoTxSPI>:
**  Descripcion:    Retorna el nivel de llenado de la FIFO de transmision
**  Parametros:     Instancia del SPI
**  Retorno:        Los valores retornados son: vacio, 1/4 lleno, 1/2 lleno, lleno
****************************************************************************************/
CODIGO_RAPIDO inline uint32_t nivelFifoTxSPI(SPI_TypeDef *SPIx)
{
 80176a2:	b480      	push	{r7}
 80176a4:	b083      	sub	sp, #12
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	689b      	ldr	r3, [r3, #8]
 80176ae:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	370c      	adds	r7, #12
 80176b6:	46bd      	mov	sp, r7
 80176b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176bc:	4770      	bx	lr
	...

080176c0 <habilitarRelojSPI>:
**  Descripcion:    Habilita el reloj del SPI
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojSPI(numSPI_e numSPI)
{
 80176c0:	b480      	push	{r7}
 80176c2:	b089      	sub	sp, #36	; 0x24
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	4603      	mov	r3, r0
 80176c8:	71fb      	strb	r3, [r7, #7]
    switch (numSPI) {
 80176ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176ce:	2b05      	cmp	r3, #5
 80176d0:	d85c      	bhi.n	801778c <habilitarRelojSPI+0xcc>
 80176d2:	a201      	add	r2, pc, #4	; (adr r2, 80176d8 <habilitarRelojSPI+0x18>)
 80176d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176d8:	080176f1 	.word	0x080176f1
 80176dc:	0801770b 	.word	0x0801770b
 80176e0:	08017725 	.word	0x08017725
 80176e4:	0801773f 	.word	0x0801773f
 80176e8:	08017759 	.word	0x08017759
 80176ec:	08017773 	.word	0x08017773
        case SPI_1:
        	__HAL_RCC_SPI1_CLK_ENABLE();
 80176f0:	4b2a      	ldr	r3, [pc, #168]	; (801779c <habilitarRelojSPI+0xdc>)
 80176f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176f4:	4a29      	ldr	r2, [pc, #164]	; (801779c <habilitarRelojSPI+0xdc>)
 80176f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80176fa:	6453      	str	r3, [r2, #68]	; 0x44
 80176fc:	4b27      	ldr	r3, [pc, #156]	; (801779c <habilitarRelojSPI+0xdc>)
 80176fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017704:	61fb      	str	r3, [r7, #28]
 8017706:	69fb      	ldr	r3, [r7, #28]
        	break;
 8017708:	e041      	b.n	801778e <habilitarRelojSPI+0xce>

        case SPI_2:
        	__HAL_RCC_SPI2_CLK_ENABLE();
 801770a:	4b24      	ldr	r3, [pc, #144]	; (801779c <habilitarRelojSPI+0xdc>)
 801770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801770e:	4a23      	ldr	r2, [pc, #140]	; (801779c <habilitarRelojSPI+0xdc>)
 8017710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017714:	6413      	str	r3, [r2, #64]	; 0x40
 8017716:	4b21      	ldr	r3, [pc, #132]	; (801779c <habilitarRelojSPI+0xdc>)
 8017718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801771a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801771e:	61bb      	str	r3, [r7, #24]
 8017720:	69bb      	ldr	r3, [r7, #24]
        	break;
 8017722:	e034      	b.n	801778e <habilitarRelojSPI+0xce>

        case SPI_3:
        	__HAL_RCC_SPI3_CLK_ENABLE();
 8017724:	4b1d      	ldr	r3, [pc, #116]	; (801779c <habilitarRelojSPI+0xdc>)
 8017726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017728:	4a1c      	ldr	r2, [pc, #112]	; (801779c <habilitarRelojSPI+0xdc>)
 801772a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801772e:	6413      	str	r3, [r2, #64]	; 0x40
 8017730:	4b1a      	ldr	r3, [pc, #104]	; (801779c <habilitarRelojSPI+0xdc>)
 8017732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017738:	617b      	str	r3, [r7, #20]
 801773a:	697b      	ldr	r3, [r7, #20]
        	break;
 801773c:	e027      	b.n	801778e <habilitarRelojSPI+0xce>

        case SPI_4:
        	__HAL_RCC_SPI4_CLK_ENABLE();
 801773e:	4b17      	ldr	r3, [pc, #92]	; (801779c <habilitarRelojSPI+0xdc>)
 8017740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017742:	4a16      	ldr	r2, [pc, #88]	; (801779c <habilitarRelojSPI+0xdc>)
 8017744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017748:	6453      	str	r3, [r2, #68]	; 0x44
 801774a:	4b14      	ldr	r3, [pc, #80]	; (801779c <habilitarRelojSPI+0xdc>)
 801774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801774e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017752:	613b      	str	r3, [r7, #16]
 8017754:	693b      	ldr	r3, [r7, #16]
        	break;
 8017756:	e01a      	b.n	801778e <habilitarRelojSPI+0xce>

        case SPI_5:
        	__HAL_RCC_SPI5_CLK_ENABLE();
 8017758:	4b10      	ldr	r3, [pc, #64]	; (801779c <habilitarRelojSPI+0xdc>)
 801775a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801775c:	4a0f      	ldr	r2, [pc, #60]	; (801779c <habilitarRelojSPI+0xdc>)
 801775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017762:	6453      	str	r3, [r2, #68]	; 0x44
 8017764:	4b0d      	ldr	r3, [pc, #52]	; (801779c <habilitarRelojSPI+0xdc>)
 8017766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801776c:	60fb      	str	r3, [r7, #12]
 801776e:	68fb      	ldr	r3, [r7, #12]
        	break;
 8017770:	e00d      	b.n	801778e <habilitarRelojSPI+0xce>

#ifndef STM32F722xx
        case SPI_6:
        	__HAL_RCC_SPI6_CLK_ENABLE();
 8017772:	4b0a      	ldr	r3, [pc, #40]	; (801779c <habilitarRelojSPI+0xdc>)
 8017774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017776:	4a09      	ldr	r2, [pc, #36]	; (801779c <habilitarRelojSPI+0xdc>)
 8017778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801777c:	6453      	str	r3, [r2, #68]	; 0x44
 801777e:	4b07      	ldr	r3, [pc, #28]	; (801779c <habilitarRelojSPI+0xdc>)
 8017780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017786:	60bb      	str	r3, [r7, #8]
 8017788:	68bb      	ldr	r3, [r7, #8]
        	break;
 801778a:	e000      	b.n	801778e <habilitarRelojSPI+0xce>
#endif

        default:
            break;
 801778c:	bf00      	nop
    }
}
 801778e:	bf00      	nop
 8017790:	3724      	adds	r7, #36	; 0x24
 8017792:	46bd      	mov	sp, r7
 8017794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017798:	4770      	bx	lr
 801779a:	bf00      	nop
 801779c:	40023800 	.word	0x40023800

080177a0 <configSPI>:
 80177a0:	b480      	push	{r7}
 80177a2:	b083      	sub	sp, #12
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	009b      	lsls	r3, r3, #2
 80177ac:	4a03      	ldr	r2, [pc, #12]	; (80177bc <configSPI+0x1c>)
 80177ae:	4413      	add	r3, r2
 80177b0:	4618      	mov	r0, r3
 80177b2:	370c      	adds	r7, #12
 80177b4:	46bd      	mov	sp, r7
 80177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ba:	4770      	bx	lr
 80177bc:	2000a9ac 	.word	0x2000a9ac

080177c0 <asignarHALspi>:
**  Descripcion:    Asigna el HAL a la estructura del driver
**  Parametros:     Numero del driver
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALspi(numSPI_e numSPI)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b084      	sub	sp, #16
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	4603      	mov	r3, r0
 80177c8:	71fb      	strb	r3, [r7, #7]
    spi_t *driver = punteroSPI(numSPI);
 80177ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7ff fc58 	bl	8017084 <punteroSPI>
 80177d4:	60f8      	str	r0, [r7, #12]

    // Asignamos los pines
    if (!pinSPI(numSPI, configSPI(numSPI)->pinSCK, &driver->hal.pinSCK))
 80177d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177da:	4618      	mov	r0, r3
 80177dc:	f7ff ffe0 	bl	80177a0 <configSPI>
 80177e0:	4603      	mov	r3, r0
 80177e2:	7819      	ldrb	r1, [r3, #0]
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80177ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177ee:	4618      	mov	r0, r3
 80177f0:	f000 f84a 	bl	8017888 <pinSPI>
 80177f4:	4603      	mov	r3, r0
 80177f6:	f083 0301 	eor.w	r3, r3, #1
 80177fa:	b2db      	uxtb	r3, r3
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d001      	beq.n	8017804 <asignarHALspi+0x44>
        return false;
 8017800:	2300      	movs	r3, #0
 8017802:	e03a      	b.n	801787a <asignarHALspi+0xba>

    if (!pinSPI(numSPI, configSPI(numSPI)->pinMISO, &driver->hal.pinMISO))
 8017804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017808:	4618      	mov	r0, r3
 801780a:	f7ff ffc9 	bl	80177a0 <configSPI>
 801780e:	4603      	mov	r3, r0
 8017810:	7859      	ldrb	r1, [r3, #1]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8017818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801781c:	4618      	mov	r0, r3
 801781e:	f000 f833 	bl	8017888 <pinSPI>
 8017822:	4603      	mov	r3, r0
 8017824:	f083 0301 	eor.w	r3, r3, #1
 8017828:	b2db      	uxtb	r3, r3
 801782a:	2b00      	cmp	r3, #0
 801782c:	d001      	beq.n	8017832 <asignarHALspi+0x72>
        return false;
 801782e:	2300      	movs	r3, #0
 8017830:	e023      	b.n	801787a <asignarHALspi+0xba>

    if (!pinSPI(numSPI, configSPI(numSPI)->pinMOSI, &driver->hal.pinMOSI))
 8017832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017836:	4618      	mov	r0, r3
 8017838:	f7ff ffb2 	bl	80177a0 <configSPI>
 801783c:	4603      	mov	r3, r0
 801783e:	7899      	ldrb	r1, [r3, #2]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8017846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801784a:	4618      	mov	r0, r3
 801784c:	f000 f81c 	bl	8017888 <pinSPI>
 8017850:	4603      	mov	r3, r0
 8017852:	f083 0301 	eor.w	r3, r3, #1
 8017856:	b2db      	uxtb	r3, r3
 8017858:	2b00      	cmp	r3, #0
 801785a:	d001      	beq.n	8017860 <asignarHALspi+0xa0>
        return false;
 801785c:	2300      	movs	r3, #0
 801785e:	e00c      	b.n	801787a <asignarHALspi+0xba>

    // Asignamos la instancia
    driver->hal.hspi.Instance = hardwareSPI[numSPI].reg;
 8017860:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017864:	4907      	ldr	r1, [pc, #28]	; (8017884 <asignarHALspi+0xc4>)
 8017866:	4613      	mov	r3, r2
 8017868:	009b      	lsls	r3, r3, #2
 801786a:	4413      	add	r3, r2
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	440b      	add	r3, r1
 8017870:	3304      	adds	r3, #4
 8017872:	681a      	ldr	r2, [r3, #0]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	609a      	str	r2, [r3, #8]
    return true;
 8017878:	2301      	movs	r3, #1
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
 8017882:	bf00      	nop
 8017884:	0803aec8 	.word	0x0803aec8

08017888 <pinSPI>:
**  Descripcion:    Encuentra el pin de la tabla de hardware
**  Parametros:     Numero del SPI, pin a buscar, pin del driver
**  Retorno:        True si OK
****************************************************************************************/
bool pinSPI(numSPI_e numSPI, uint8_t pinBusqueda, pin_t *pinDriver)
{
 8017888:	b480      	push	{r7}
 801788a:	b085      	sub	sp, #20
 801788c:	af00      	add	r7, sp, #0
 801788e:	4603      	mov	r3, r0
 8017890:	603a      	str	r2, [r7, #0]
 8017892:	71fb      	strb	r3, [r7, #7]
 8017894:	460b      	mov	r3, r1
 8017896:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_SPI; i++) {
 8017898:	2300      	movs	r3, #0
 801789a:	73fb      	strb	r3, [r7, #15]
 801789c:	e090      	b.n	80179c0 <pinSPI+0x138>
        if (pinBusqueda == hardwareSPI[numSPI].pinSCK[i].pin) {
 801789e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178a2:	7bf9      	ldrb	r1, [r7, #15]
 80178a4:	484c      	ldr	r0, [pc, #304]	; (80179d8 <pinSPI+0x150>)
 80178a6:	4613      	mov	r3, r2
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	4413      	add	r3, r2
 80178ac:	009b      	lsls	r3, r3, #2
 80178ae:	440b      	add	r3, r1
 80178b0:	3304      	adds	r3, #4
 80178b2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80178b6:	79ba      	ldrb	r2, [r7, #6]
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d11e      	bne.n	80178fa <pinSPI+0x72>
        	pinDriver->pin = hardwareSPI[numSPI].pinSCK[i].pin;
 80178bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178c0:	7bf9      	ldrb	r1, [r7, #15]
 80178c2:	4845      	ldr	r0, [pc, #276]	; (80179d8 <pinSPI+0x150>)
 80178c4:	4613      	mov	r3, r2
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	4413      	add	r3, r2
 80178ca:	009b      	lsls	r3, r3, #2
 80178cc:	440b      	add	r3, r1
 80178ce:	3304      	adds	r3, #4
 80178d0:	f810 2013 	ldrb.w	r2, [r0, r3, lsl #1]
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareSPI[numSPI].pinSCK[i].af;
 80178d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178dc:	7bf9      	ldrb	r1, [r7, #15]
 80178de:	483e      	ldr	r0, [pc, #248]	; (80179d8 <pinSPI+0x150>)
 80178e0:	4613      	mov	r3, r2
 80178e2:	009b      	lsls	r3, r3, #2
 80178e4:	4413      	add	r3, r2
 80178e6:	009b      	lsls	r3, r3, #2
 80178e8:	440b      	add	r3, r1
 80178ea:	3304      	adds	r3, #4
 80178ec:	005b      	lsls	r3, r3, #1
 80178ee:	4403      	add	r3, r0
 80178f0:	785a      	ldrb	r2, [r3, #1]
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	705a      	strb	r2, [r3, #1]
            return true;
 80178f6:	2301      	movs	r3, #1
 80178f8:	e067      	b.n	80179ca <pinSPI+0x142>
        }

        if (pinBusqueda == hardwareSPI[numSPI].pinMISO[i].pin) {
 80178fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178fe:	7bf9      	ldrb	r1, [r7, #15]
 8017900:	4835      	ldr	r0, [pc, #212]	; (80179d8 <pinSPI+0x150>)
 8017902:	4613      	mov	r3, r2
 8017904:	009b      	lsls	r3, r3, #2
 8017906:	4413      	add	r3, r2
 8017908:	009b      	lsls	r3, r3, #2
 801790a:	440b      	add	r3, r1
 801790c:	3308      	adds	r3, #8
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	4403      	add	r3, r0
 8017912:	789b      	ldrb	r3, [r3, #2]
 8017914:	79ba      	ldrb	r2, [r7, #6]
 8017916:	429a      	cmp	r2, r3
 8017918:	d11f      	bne.n	801795a <pinSPI+0xd2>
        	pinDriver->pin = hardwareSPI[numSPI].pinMISO[i].pin;
 801791a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801791e:	7bf9      	ldrb	r1, [r7, #15]
 8017920:	482d      	ldr	r0, [pc, #180]	; (80179d8 <pinSPI+0x150>)
 8017922:	4613      	mov	r3, r2
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	4413      	add	r3, r2
 8017928:	009b      	lsls	r3, r3, #2
 801792a:	440b      	add	r3, r1
 801792c:	3308      	adds	r3, #8
 801792e:	005b      	lsls	r3, r3, #1
 8017930:	4403      	add	r3, r0
 8017932:	789a      	ldrb	r2, [r3, #2]
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareSPI[numSPI].pinMISO[i].af;
 8017938:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801793c:	7bf9      	ldrb	r1, [r7, #15]
 801793e:	4826      	ldr	r0, [pc, #152]	; (80179d8 <pinSPI+0x150>)
 8017940:	4613      	mov	r3, r2
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	4413      	add	r3, r2
 8017946:	009b      	lsls	r3, r3, #2
 8017948:	440b      	add	r3, r1
 801794a:	3308      	adds	r3, #8
 801794c:	005b      	lsls	r3, r3, #1
 801794e:	4403      	add	r3, r0
 8017950:	78da      	ldrb	r2, [r3, #3]
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	705a      	strb	r2, [r3, #1]
            return true;
 8017956:	2301      	movs	r3, #1
 8017958:	e037      	b.n	80179ca <pinSPI+0x142>
        }

        if (pinBusqueda == hardwareSPI[numSPI].pinMOSI[i].pin) {
 801795a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801795e:	7bf9      	ldrb	r1, [r7, #15]
 8017960:	481d      	ldr	r0, [pc, #116]	; (80179d8 <pinSPI+0x150>)
 8017962:	4613      	mov	r3, r2
 8017964:	009b      	lsls	r3, r3, #2
 8017966:	4413      	add	r3, r2
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	440b      	add	r3, r1
 801796c:	330c      	adds	r3, #12
 801796e:	005b      	lsls	r3, r3, #1
 8017970:	4403      	add	r3, r0
 8017972:	791b      	ldrb	r3, [r3, #4]
 8017974:	79ba      	ldrb	r2, [r7, #6]
 8017976:	429a      	cmp	r2, r3
 8017978:	d11f      	bne.n	80179ba <pinSPI+0x132>
        	pinDriver->pin = hardwareSPI[numSPI].pinMOSI[i].pin;
 801797a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801797e:	7bf9      	ldrb	r1, [r7, #15]
 8017980:	4815      	ldr	r0, [pc, #84]	; (80179d8 <pinSPI+0x150>)
 8017982:	4613      	mov	r3, r2
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	4413      	add	r3, r2
 8017988:	009b      	lsls	r3, r3, #2
 801798a:	440b      	add	r3, r1
 801798c:	330c      	adds	r3, #12
 801798e:	005b      	lsls	r3, r3, #1
 8017990:	4403      	add	r3, r0
 8017992:	791a      	ldrb	r2, [r3, #4]
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareSPI[numSPI].pinMOSI[i].af;
 8017998:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801799c:	7bf9      	ldrb	r1, [r7, #15]
 801799e:	480e      	ldr	r0, [pc, #56]	; (80179d8 <pinSPI+0x150>)
 80179a0:	4613      	mov	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	4413      	add	r3, r2
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	440b      	add	r3, r1
 80179aa:	330c      	adds	r3, #12
 80179ac:	005b      	lsls	r3, r3, #1
 80179ae:	4403      	add	r3, r0
 80179b0:	795a      	ldrb	r2, [r3, #5]
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	705a      	strb	r2, [r3, #1]
            return true;
 80179b6:	2301      	movs	r3, #1
 80179b8:	e007      	b.n	80179ca <pinSPI+0x142>
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_SPI; i++) {
 80179ba:	7bfb      	ldrb	r3, [r7, #15]
 80179bc:	3301      	adds	r3, #1
 80179be:	73fb      	strb	r3, [r7, #15]
 80179c0:	7bfb      	ldrb	r3, [r7, #15]
 80179c2:	2b04      	cmp	r3, #4
 80179c4:	f67f af6b 	bls.w	801789e <pinSPI+0x16>
        }
    }

    return false;
 80179c8:	2300      	movs	r3, #0
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3714      	adds	r7, #20
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	0803aec8 	.word	0x0803aec8

080179dc <restaurarBasepriMem>:
{
 80179dc:	b480      	push	{r7}
 80179de:	b085      	sub	sp, #20
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*prio);
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	f383 8811 	msr	BASEPRI, r3
}
 80179f0:	bf00      	nop
}
 80179f2:	bf00      	nop
 80179f4:	3714      	adds	r7, #20
 80179f6:	46bd      	mov	sp, r7
 80179f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fc:	4770      	bx	lr

080179fe <ajustarBasepriMax>:
{
 80179fe:	b480      	push	{r7}
 8017a00:	b085      	sub	sp, #20
 8017a02:	af00      	add	r7, sp, #0
 8017a04:	4603      	mov	r3, r0
 8017a06:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 8017a08:	79fb      	ldrb	r3, [r7, #7]
 8017a0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f383 8812 	msr	BASEPRI_MAX, r3
}
 8017a12:	bf00      	nop
    return 1;
 8017a14:	2301      	movs	r3, #1
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3714      	adds	r7, #20
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a20:	4770      	bx	lr
	...

08017a24 <iniciarContadorCiclos>:
**                  utilizada en las funciones de tiempo
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarContadorCiclos(void)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	af00      	add	r7, sp, #0
    usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8017a28:	f015 fd64 	bl	802d4f4 <HAL_RCC_GetSysClockFreq>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	4a04      	ldr	r2, [pc, #16]	; (8017a40 <iniciarContadorCiclos+0x1c>)
 8017a30:	fba2 2303 	umull	r2, r3, r2, r3
 8017a34:	0c9b      	lsrs	r3, r3, #18
 8017a36:	4a03      	ldr	r2, [pc, #12]	; (8017a44 <iniciarContadorCiclos+0x20>)
 8017a38:	6013      	str	r3, [r2, #0]
}
 8017a3a:	bf00      	nop
 8017a3c:	bd80      	pop	{r7, pc}
 8017a3e:	bf00      	nop
 8017a40:	431bde83 	.word	0x431bde83
 8017a44:	200037cc 	.word	0x200037cc

08017a48 <microsISR>:
**                  (maximo 70 minutos)
**  Parametros:     Ninguno
**  Retorno:        Microsegundos transcurridos
****************************************************************************************/
uint32_t microsISR(void)
{
 8017a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a4a:	b085      	sub	sp, #20
 8017a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8017a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8017a54:	68bb      	ldr	r3, [r7, #8]
    register uint32_t ms, pendiente, cntCiclos;

    BLOQUE_ATOMICO(NVIC_PRIO_MAX) {
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	71fb      	strb	r3, [r7, #7]
 8017a5a:	2010      	movs	r0, #16
 8017a5c:	f7ff ffcf 	bl	80179fe <ajustarBasepriMax>
 8017a60:	4603      	mov	r3, r0
 8017a62:	73fb      	strb	r3, [r7, #15]
 8017a64:	e013      	b.n	8017a8e <microsISR+0x46>
        cntCiclos = SysTick->VAL;
 8017a66:	4b18      	ldr	r3, [pc, #96]	; (8017ac8 <microsISR+0x80>)
 8017a68:	689c      	ldr	r4, [r3, #8]

        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8017a6a:	4b17      	ldr	r3, [pc, #92]	; (8017ac8 <microsISR+0x80>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d004      	beq.n	8017a80 <microsISR+0x38>
            // Hay pendiente una interrupcion del SysTick
            sysTickPendiente = 1;
 8017a76:	4b15      	ldr	r3, [pc, #84]	; (8017acc <microsISR+0x84>)
 8017a78:	2201      	movs	r2, #1
 8017a7a:	601a      	str	r2, [r3, #0]

            // Lee el valor del SysTick para asegurar que leemos el valor despues del rollover.
            cntCiclos = SysTick->VAL;
 8017a7c:	4b12      	ldr	r3, [pc, #72]	; (8017ac8 <microsISR+0x80>)
 8017a7e:	689c      	ldr	r4, [r3, #8]
        }
        ms = tiempoSysTick;
 8017a80:	4b13      	ldr	r3, [pc, #76]	; (8017ad0 <microsISR+0x88>)
 8017a82:	681d      	ldr	r5, [r3, #0]
        pendiente = sysTickPendiente;
 8017a84:	4b11      	ldr	r3, [pc, #68]	; (8017acc <microsISR+0x84>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	461e      	mov	r6, r3
    BLOQUE_ATOMICO(NVIC_PRIO_MAX) {
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	73fb      	strb	r3, [r7, #15]
 8017a8e:	7bfb      	ldrb	r3, [r7, #15]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d1e8      	bne.n	8017a66 <microsISR+0x1e>
 8017a94:	1dfb      	adds	r3, r7, #7
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7ff ffa0 	bl	80179dc <restaurarBasepriMem>
    }

    return ((ms + pendiente) * 1000) + (usTicks * 1000 - cntCiclos) / usTicks;
 8017a9c:	19ab      	adds	r3, r5, r6
 8017a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017aa2:	fb03 f202 	mul.w	r2, r3, r2
 8017aa6:	4b0b      	ldr	r3, [pc, #44]	; (8017ad4 <microsISR+0x8c>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017aae:	fb01 f303 	mul.w	r3, r1, r3
 8017ab2:	1b19      	subs	r1, r3, r4
 8017ab4:	4b07      	ldr	r3, [pc, #28]	; (8017ad4 <microsISR+0x8c>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8017abc:	4413      	add	r3, r2
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3714      	adds	r7, #20
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	e000e010 	.word	0xe000e010
 8017acc:	200037d8 	.word	0x200037d8
 8017ad0:	200037d0 	.word	0x200037d0
 8017ad4:	200037cc 	.word	0x200037cc

08017ad8 <micros>:
**  Descripcion:    Retorna los microsegundos (maximo 70 minutos)
**  Parametros:     Ninguno
**  Retorno:        Microsegundos transcurridos
****************************************************************************************/
uint32_t micros(void)
{
 8017ad8:	b5b0      	push	{r4, r5, r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
    register uint32_t ms, cntCiclos;

    // Llama a microsISR() si estamos dentro de una interrupcion
    if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) || (__get_BASEPRI()))
 8017ade:	4b18      	ldr	r3, [pc, #96]	; (8017b40 <micros+0x68>)
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d105      	bne.n	8017af6 <micros+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017aea:	f3ef 8311 	mrs	r3, BASEPRI
 8017aee:	607b      	str	r3, [r7, #4]
  return(result);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d003      	beq.n	8017afe <micros+0x26>
        return microsISR();
 8017af6:	f7ff ffa7 	bl	8017a48 <microsISR>
 8017afa:	4603      	mov	r3, r0
 8017afc:	e01b      	b.n	8017b36 <micros+0x5e>

    do {
        ms = tiempoSysTick;
 8017afe:	4b11      	ldr	r3, [pc, #68]	; (8017b44 <micros+0x6c>)
 8017b00:	681d      	ldr	r5, [r3, #0]
        cntCiclos = SysTick->VAL;
 8017b02:	4b11      	ldr	r3, [pc, #68]	; (8017b48 <micros+0x70>)
 8017b04:	689c      	ldr	r4, [r3, #8]
    } while (ms != tiempoSysTick || cntCiclos > ciclosSysTick);
 8017b06:	4b0f      	ldr	r3, [pc, #60]	; (8017b44 <micros+0x6c>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	429d      	cmp	r5, r3
 8017b0c:	d1f7      	bne.n	8017afe <micros+0x26>
 8017b0e:	4b0f      	ldr	r3, [pc, #60]	; (8017b4c <micros+0x74>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	429c      	cmp	r4, r3
 8017b14:	d8f3      	bhi.n	8017afe <micros+0x26>

    return (ms * 1000) + (usTicks * 1000 - cntCiclos) / usTicks;
 8017b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b1a:	fb03 f205 	mul.w	r2, r3, r5
 8017b1e:	4b0c      	ldr	r3, [pc, #48]	; (8017b50 <micros+0x78>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017b26:	fb01 f303 	mul.w	r3, r1, r3
 8017b2a:	1b19      	subs	r1, r3, r4
 8017b2c:	4b08      	ldr	r3, [pc, #32]	; (8017b50 <micros+0x78>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8017b34:	4413      	add	r3, r2
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3708      	adds	r7, #8
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	e000ed00 	.word	0xe000ed00
 8017b44:	200037d0 	.word	0x200037d0
 8017b48:	e000e010 	.word	0xe000e010
 8017b4c:	200037d4 	.word	0x200037d4
 8017b50:	200037cc 	.word	0x200037cc

08017b54 <millis>:
**  Descripcion:    Retorna los milisegundos  (maximo 49 dias)
**  Parametros:     Ninguno
**  Retorno:        Milisegundos transcurridos
****************************************************************************************/
uint32_t millis(void)
{
 8017b54:	b480      	push	{r7}
 8017b56:	af00      	add	r7, sp, #0
    return tiempoSysTick;
 8017b58:	4b03      	ldr	r3, [pc, #12]	; (8017b68 <millis+0x14>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	200037d0 	.word	0x200037d0

08017b6c <delayMicroseconds>:
**  Descripcion:    Retardo en microsegundos
**  Parametros:     Microsegundos que se quieren retardar
**  Retorno:        Ninguno
****************************************************************************************/
void delayMicroseconds(uint32_t us)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b084      	sub	sp, #16
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
    uint32_t usInicio = micros();
 8017b74:	f7ff ffb0 	bl	8017ad8 <micros>
 8017b78:	60f8      	str	r0, [r7, #12]
    while ((micros() - usInicio) < us);
 8017b7a:	bf00      	nop
 8017b7c:	f7ff ffac 	bl	8017ad8 <micros>
 8017b80:	4602      	mov	r2, r0
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	1ad3      	subs	r3, r2, r3
 8017b86:	687a      	ldr	r2, [r7, #4]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d8f7      	bhi.n	8017b7c <delayMicroseconds+0x10>
}
 8017b8c:	bf00      	nop
 8017b8e:	bf00      	nop
 8017b90:	3710      	adds	r7, #16
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}

08017b96 <delay>:
**  Descripcion:    Retardo en milisegundos
**  Parametros:     Milisegundos que se quiere retardar
**  Retorno:        Ninguno
****************************************************************************************/
void delay(uint32_t ms)
{
 8017b96:	b580      	push	{r7, lr}
 8017b98:	b082      	sub	sp, #8
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	6078      	str	r0, [r7, #4]
    while (ms--)
 8017b9e:	e003      	b.n	8017ba8 <delay+0x12>
        delayMicroseconds(1000);
 8017ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ba4:	f7ff ffe2 	bl	8017b6c <delayMicroseconds>
    while (ms--)
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	1e5a      	subs	r2, r3, #1
 8017bac:	607a      	str	r2, [r7, #4]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d1f6      	bne.n	8017ba0 <delay+0xa>
}
 8017bb2:	bf00      	nop
 8017bb4:	bf00      	nop
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <HAL_Delay>:
**  Descripcion:    Retardo en milisegundos para las funciones HAL
**  Parametros:     Milisegundos que se quiere retardar
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
    delay(Delay);
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f7ff ffe6 	bl	8017b96 <delay>
}
 8017bca:	bf00      	nop
 8017bcc:	3708      	adds	r7, #8
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
	...

08017bd4 <punteroTim>:
**  Descripcion:    Devuelve el puntero a un tim seleccionado
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
tim_t *punteroTim(uint8_t numTim)
{
 8017bd4:	b480      	push	{r7}
 8017bd6:	b083      	sub	sp, #12
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	4603      	mov	r3, r0
 8017bdc:	71fb      	strb	r3, [r7, #7]
    return &tim[numTim];
 8017bde:	79fa      	ldrb	r2, [r7, #7]
 8017be0:	4613      	mov	r3, r2
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	4413      	add	r3, r2
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	4a03      	ldr	r2, [pc, #12]	; (8017bf8 <punteroTim+0x24>)
 8017bea:	4413      	add	r3, r2
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	370c      	adds	r7, #12
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf6:	4770      	bx	lr
 8017bf8:	200037dc 	.word	0x200037dc

08017bfc <punteroTimer>:
**  Descripcion:    Devuelve el puntero a un timer seleccionado
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
timerHAL_t *punteroTimer(numTimer_e numTimer)
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	4603      	mov	r3, r0
 8017c04:	71fb      	strb	r3, [r7, #7]
    return &timer[numTimer];
 8017c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c0a:	22b4      	movs	r2, #180	; 0xb4
 8017c0c:	fb02 f303 	mul.w	r3, r2, r3
 8017c10:	4a03      	ldr	r2, [pc, #12]	; (8017c20 <punteroTimer+0x24>)
 8017c12:	4413      	add	r3, r2
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	370c      	adds	r7, #12
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1e:	4770      	bx	lr
 8017c20:	20003a7c 	.word	0x20003a7c

08017c24 <iniciarTimer>:
**  Descripcion:    Inicia el driver del Timer
**  Parametros:     Timer a iniciar, pin del timer, uso que se va a dar
**  Retorno:        True si OK
****************************************************************************************/
bool iniciarTimer(numTimer_e numTimer, uint8_t pin, usoTimer_e uso)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b086      	sub	sp, #24
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	71fb      	strb	r3, [r7, #7]
 8017c2e:	460b      	mov	r3, r1
 8017c30:	71bb      	strb	r3, [r7, #6]
 8017c32:	4613      	mov	r3, r2
 8017c34:	717b      	strb	r3, [r7, #5]
    if (numTimer == TIMER_NINGUNO) {
 8017c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c3e:	d104      	bne.n	8017c4a <iniciarTimer+0x26>
#ifdef DEBUG
        printf("Fallo en la definicion del timer\n");
 8017c40:	484f      	ldr	r0, [pc, #316]	; (8017d80 <iniciarTimer+0x15c>)
 8017c42:	f01e f8dd 	bl	8035e00 <puts>
#endif
        return false;
 8017c46:	2300      	movs	r3, #0
 8017c48:	e095      	b.n	8017d76 <iniciarTimer+0x152>
    }

    if (numTimer != TIMER_6 && numTimer != TIMER_7) {
 8017c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c4e:	2b05      	cmp	r3, #5
 8017c50:	d05d      	beq.n	8017d0e <iniciarTimer+0xea>
 8017c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c56:	2b06      	cmp	r3, #6
 8017c58:	d059      	beq.n	8017d0e <iniciarTimer+0xea>
	    if (cntTimer != 0) {
 8017c5a:	4b4a      	ldr	r3, [pc, #296]	; (8017d84 <iniciarTimer+0x160>)
 8017c5c:	781b      	ldrb	r3, [r3, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d023      	beq.n	8017caa <iniciarTimer+0x86>
            for (uint8_t i = 0; i < cntTimer; i++) {
 8017c62:	2300      	movs	r3, #0
 8017c64:	75fb      	strb	r3, [r7, #23]
 8017c66:	e01b      	b.n	8017ca0 <iniciarTimer+0x7c>
            	bool encontrado;
            	tim_t *timEnc = timerPorTag(pin, &encontrado);
 8017c68:	f107 020b 	add.w	r2, r7, #11
 8017c6c:	79bb      	ldrb	r3, [r7, #6]
 8017c6e:	4611      	mov	r1, r2
 8017c70:	4618      	mov	r0, r3
 8017c72:	f000 f8ad 	bl	8017dd0 <timerPorTag>
 8017c76:	6138      	str	r0, [r7, #16]

            	if (encontrado && timEnc != NULL) {
 8017c78:	7afb      	ldrb	r3, [r7, #11]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d00d      	beq.n	8017c9a <iniciarTimer+0x76>
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d00a      	beq.n	8017c9a <iniciarTimer+0x76>
    	            if (timerUsado(timEnc)) {
 8017c84:	6938      	ldr	r0, [r7, #16]
 8017c86:	f000 f889 	bl	8017d9c <timerUsado>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d004      	beq.n	8017c9a <iniciarTimer+0x76>
#ifdef DEBUG
    	                printf("Timer ya usado\n");
 8017c90:	483d      	ldr	r0, [pc, #244]	; (8017d88 <iniciarTimer+0x164>)
 8017c92:	f01e f8b5 	bl	8035e00 <puts>
#endif
    	                return false;
 8017c96:	2300      	movs	r3, #0
 8017c98:	e06d      	b.n	8017d76 <iniciarTimer+0x152>
            for (uint8_t i = 0; i < cntTimer; i++) {
 8017c9a:	7dfb      	ldrb	r3, [r7, #23]
 8017c9c:	3301      	adds	r3, #1
 8017c9e:	75fb      	strb	r3, [r7, #23]
 8017ca0:	4b38      	ldr	r3, [pc, #224]	; (8017d84 <iniciarTimer+0x160>)
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	7dfa      	ldrb	r2, [r7, #23]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d3de      	bcc.n	8017c68 <iniciarTimer+0x44>
                    }
            	}
            }
	    }

	    tim_t *driver = &tim[cntTimer];
 8017caa:	4b36      	ldr	r3, [pc, #216]	; (8017d84 <iniciarTimer+0x160>)
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	461a      	mov	r2, r3
 8017cb0:	4613      	mov	r3, r2
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	4413      	add	r3, r2
 8017cb6:	009b      	lsls	r3, r3, #2
 8017cb8:	4a34      	ldr	r2, [pc, #208]	; (8017d8c <iniciarTimer+0x168>)
 8017cba:	4413      	add	r3, r2
 8017cbc:	60fb      	str	r3, [r7, #12]
        if (!driver->asignado) {
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	785b      	ldrb	r3, [r3, #1]
 8017cc2:	f083 0301 	eor.w	r3, r3, #1
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d020      	beq.n	8017d0e <iniciarTimer+0xea>
            if (asignarPinTimer(cntTimer, numTimer, pin)) {
 8017ccc:	4b2d      	ldr	r3, [pc, #180]	; (8017d84 <iniciarTimer+0x160>)
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	79ba      	ldrb	r2, [r7, #6]
 8017cd2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f000 fe98 	bl	8018a0c <asignarPinTimer>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d00c      	beq.n	8017cfc <iniciarTimer+0xd8>
                driver->asignado = true;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	705a      	strb	r2, [r3, #1]
                driver->numTimer = numTimer;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	79fa      	ldrb	r2, [r7, #7]
 8017cec:	701a      	strb	r2, [r3, #0]
                cntTimer++;
 8017cee:	4b25      	ldr	r3, [pc, #148]	; (8017d84 <iniciarTimer+0x160>)
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	b2da      	uxtb	r2, r3
 8017cf6:	4b23      	ldr	r3, [pc, #140]	; (8017d84 <iniciarTimer+0x160>)
 8017cf8:	701a      	strb	r2, [r3, #0]
 8017cfa:	e008      	b.n	8017d0e <iniciarTimer+0xea>
            }
            else {
#ifdef DEBUG
                printf("Fallo en la inicializacion de Tim %u\n", cntTimer + 1);
 8017cfc:	4b21      	ldr	r3, [pc, #132]	; (8017d84 <iniciarTimer+0x160>)
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	3301      	adds	r3, #1
 8017d02:	4619      	mov	r1, r3
 8017d04:	4822      	ldr	r0, [pc, #136]	; (8017d90 <iniciarTimer+0x16c>)
 8017d06:	f01d fff5 	bl	8035cf4 <iprintf>
#endif
                return false;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	e033      	b.n	8017d76 <iniciarTimer+0x152>
            }
        }
    }

    if (!timer[numTimer].hal.asignado) {
 8017d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d12:	4a20      	ldr	r2, [pc, #128]	; (8017d94 <iniciarTimer+0x170>)
 8017d14:	21b4      	movs	r1, #180	; 0xb4
 8017d16:	fb01 f303 	mul.w	r3, r1, r3
 8017d1a:	4413      	add	r3, r2
 8017d1c:	3304      	adds	r3, #4
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	f083 0301 	eor.w	r3, r3, #1
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d024      	beq.n	8017d74 <iniciarTimer+0x150>
        if (asignarHALtimer(numTimer)) {
 8017d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f000 fea0 	bl	8018a74 <asignarHALtimer>
 8017d34:	4603      	mov	r3, r0
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d013      	beq.n	8017d62 <iniciarTimer+0x13e>
            timer[numTimer].hal.asignado = true;
 8017d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d3e:	4a15      	ldr	r2, [pc, #84]	; (8017d94 <iniciarTimer+0x170>)
 8017d40:	21b4      	movs	r1, #180	; 0xb4
 8017d42:	fb01 f303 	mul.w	r3, r1, r3
 8017d46:	4413      	add	r3, r2
 8017d48:	3304      	adds	r3, #4
 8017d4a:	2201      	movs	r2, #1
 8017d4c:	701a      	strb	r2, [r3, #0]
            timer[numTimer].uso = uso;
 8017d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d52:	4a10      	ldr	r2, [pc, #64]	; (8017d94 <iniciarTimer+0x170>)
 8017d54:	21b4      	movs	r1, #180	; 0xb4
 8017d56:	fb01 f303 	mul.w	r3, r1, r3
 8017d5a:	4413      	add	r3, r2
 8017d5c:	797a      	ldrb	r2, [r7, #5]
 8017d5e:	701a      	strb	r2, [r3, #0]
 8017d60:	e008      	b.n	8017d74 <iniciarTimer+0x150>
        }
        else {
    #ifdef DEBUG
            printf("Fallo en la inicializacion de Timer %u\n", numTimer + 1);
 8017d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d66:	3301      	adds	r3, #1
 8017d68:	4619      	mov	r1, r3
 8017d6a:	480b      	ldr	r0, [pc, #44]	; (8017d98 <iniciarTimer+0x174>)
 8017d6c:	f01d ffc2 	bl	8035cf4 <iprintf>
    #endif
            return false;
 8017d70:	2300      	movs	r3, #0
 8017d72:	e000      	b.n	8017d76 <iniciarTimer+0x152>
        }
    }

    return true;
 8017d74:	2301      	movs	r3, #1
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3718      	adds	r7, #24
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	bf00      	nop
 8017d80:	0803a690 	.word	0x0803a690
 8017d84:	20004454 	.word	0x20004454
 8017d88:	0803a6b4 	.word	0x0803a6b4
 8017d8c:	200037dc 	.word	0x200037dc
 8017d90:	0803a6c4 	.word	0x0803a6c4
 8017d94:	20003a7c 	.word	0x20003a7c
 8017d98:	0803a6ec 	.word	0x0803a6ec

08017d9c <timerUsado>:
**  Descripcion:    Comprueba si ese timer esta usado
**  Parametros:     Timer
**  Retorno:        Timer usado o no
****************************************************************************************/
bool timerUsado(tim_t *dTim)
{
 8017d9c:	b480      	push	{r7}
 8017d9e:	b083      	sub	sp, #12
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
    if (dTim == NULL)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d101      	bne.n	8017dae <timerUsado+0x12>
        return true;
 8017daa:	2301      	movs	r3, #1
 8017dac:	e009      	b.n	8017dc2 <timerUsado+0x26>

    if (!dTim->asignado)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	785b      	ldrb	r3, [r3, #1]
 8017db2:	f083 0301 	eor.w	r3, r3, #1
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d001      	beq.n	8017dc0 <timerUsado+0x24>
        return false;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	e000      	b.n	8017dc2 <timerUsado+0x26>
    else
        return true;
 8017dc0:	2301      	movs	r3, #1
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	370c      	adds	r7, #12
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dcc:	4770      	bx	lr
	...

08017dd0 <timerPorTag>:
**  Descripcion:    Obtiene el Timer dado el pin que lo utiliza
**  Parametros:     Pin, encontrado
**  Retorno:        Puntero al timer encontrado
****************************************************************************************/
tim_t *timerPorTag(uint8_t tag, bool *encontrado)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b085      	sub	sp, #20
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	6039      	str	r1, [r7, #0]
 8017dda:	71fb      	strb	r3, [r7, #7]
    if (tag == 0) {
 8017ddc:	79fb      	ldrb	r3, [r7, #7]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d104      	bne.n	8017dec <timerPorTag+0x1c>
    	*encontrado = false;
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	2200      	movs	r2, #0
 8017de6:	701a      	strb	r2, [r3, #0]
        return NULL;
 8017de8:	2300      	movs	r3, #0
 8017dea:	e023      	b.n	8017e34 <timerPorTag+0x64>
    }

    for (uint8_t i = 0; i < NUM_CANALES_TIMER; i++) {
 8017dec:	2300      	movs	r3, #0
 8017dee:	73fb      	strb	r3, [r7, #15]
 8017df0:	e019      	b.n	8017e26 <timerPorTag+0x56>
        if (tag == tim[i].pin.pin) {
 8017df2:	7bfa      	ldrb	r2, [r7, #15]
 8017df4:	4912      	ldr	r1, [pc, #72]	; (8017e40 <timerPorTag+0x70>)
 8017df6:	4613      	mov	r3, r2
 8017df8:	005b      	lsls	r3, r3, #1
 8017dfa:	4413      	add	r3, r2
 8017dfc:	009b      	lsls	r3, r3, #2
 8017dfe:	440b      	add	r3, r1
 8017e00:	3309      	adds	r3, #9
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	79fa      	ldrb	r2, [r7, #7]
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d10a      	bne.n	8017e20 <timerPorTag+0x50>
        	*encontrado = true;
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	2201      	movs	r2, #1
 8017e0e:	701a      	strb	r2, [r3, #0]
        	return &tim[i];
 8017e10:	7bfa      	ldrb	r2, [r7, #15]
 8017e12:	4613      	mov	r3, r2
 8017e14:	005b      	lsls	r3, r3, #1
 8017e16:	4413      	add	r3, r2
 8017e18:	009b      	lsls	r3, r3, #2
 8017e1a:	4a09      	ldr	r2, [pc, #36]	; (8017e40 <timerPorTag+0x70>)
 8017e1c:	4413      	add	r3, r2
 8017e1e:	e009      	b.n	8017e34 <timerPorTag+0x64>
    for (uint8_t i = 0; i < NUM_CANALES_TIMER; i++) {
 8017e20:	7bfb      	ldrb	r3, [r7, #15]
 8017e22:	3301      	adds	r3, #1
 8017e24:	73fb      	strb	r3, [r7, #15]
 8017e26:	7bfb      	ldrb	r3, [r7, #15]
 8017e28:	2b37      	cmp	r3, #55	; 0x37
 8017e2a:	d9e2      	bls.n	8017df2 <timerPorTag+0x22>
        }
    }

	*encontrado = false;
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	701a      	strb	r2, [r3, #0]
    return NULL;
 8017e32:	2300      	movs	r3, #0
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3714      	adds	r7, #20
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr
 8017e40:	200037dc 	.word	0x200037dc

08017e44 <restaurarBasepriMem>:
{
 8017e44:	b480      	push	{r7}
 8017e46:	b085      	sub	sp, #20
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*prio);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f383 8811 	msr	BASEPRI, r3
}
 8017e58:	bf00      	nop
}
 8017e5a:	bf00      	nop
 8017e5c:	3714      	adds	r7, #20
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr

08017e66 <ajustarBasepriMax>:
{
 8017e66:	b480      	push	{r7}
 8017e68:	b085      	sub	sp, #20
 8017e6a:	af00      	add	r7, sp, #0
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 8017e70:	79fb      	ldrb	r3, [r7, #7]
 8017e72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	f383 8812 	msr	BASEPRI_MAX, r3
}
 8017e7a:	bf00      	nop
    return 1;
 8017e7c:	2301      	movs	r3, #1
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3714      	adds	r7, #20
 8017e82:	46bd      	mov	sp, r7
 8017e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e88:	4770      	bx	lr
	...

08017e8c <configurarBaseTiempoTimer>:
**  Descripcion:    Configura la base de tiempo
**  Parametros:     Numero de timer, base de tiempo por interrupcion, periodo, frecuencia de actualizacion
**  Retorno:        True si ok
****************************************************************************************/
bool configurarBaseTiempoTimer(numTimer_e numTimer, bool interrupcion, uint16_t periodo, uint32_t frec)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b08c      	sub	sp, #48	; 0x30
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	603b      	str	r3, [r7, #0]
 8017e94:	4603      	mov	r3, r0
 8017e96:	71fb      	strb	r3, [r7, #7]
 8017e98:	460b      	mov	r3, r1
 8017e9a:	71bb      	strb	r3, [r7, #6]
 8017e9c:	4613      	mov	r3, r2
 8017e9e:	80bb      	strh	r3, [r7, #4]
    timerHAL_t *driver = punteroTimer(numTimer);
 8017ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7ff fea9 	bl	8017bfc <punteroTimer>
 8017eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (driver->baseConfigurada)
 8017eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eae:	785b      	ldrb	r3, [r3, #1]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d001      	beq.n	8017eb8 <configurarBaseTiempoTimer+0x2c>
        return true;
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	e0a5      	b.n	8018004 <configurarBaseTiempoTimer+0x178>

    habilitarRelojTimer(numTimer);
 8017eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f000 fc3d 	bl	801873c <habilitarRelojTimer>

	driver->hal.htim.Init.Period = (periodo - 1) & 0xFFFF;
 8017ec2:	88bb      	ldrh	r3, [r7, #4]
 8017ec4:	3b01      	subs	r3, #1
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eca:	615a      	str	r2, [r3, #20]
	driver->hal.htim.Init.Prescaler = (SystemCoreClock / frec) - 1;
 8017ecc:	4b4f      	ldr	r3, [pc, #316]	; (801800c <configurarBaseTiempoTimer+0x180>)
 8017ece:	681a      	ldr	r2, [r3, #0]
 8017ed0:	683b      	ldr	r3, [r7, #0]
 8017ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ed6:	1e5a      	subs	r2, r3, #1
 8017ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eda:	60da      	str	r2, [r3, #12]
	driver->hal.htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ede:	2200      	movs	r2, #0
 8017ee0:	619a      	str	r2, [r3, #24]
	driver->hal.htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	611a      	str	r2, [r3, #16]
	driver->hal.htim.Init.RepetitionCounter = 0x0000;
 8017ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eea:	2200      	movs	r2, #0
 8017eec:	61da      	str	r2, [r3, #28]
    HAL_TIM_Base_Init(&driver->hal.htim);
 8017eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef0:	3308      	adds	r3, #8
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f017 fce3 	bl	802f8be <HAL_TIM_Base_Init>

    TIM_TypeDef *instancia = driver->hal.htim.Instance;
 8017ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017efa:	689b      	ldr	r3, [r3, #8]
 8017efc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (instancia == TIM1 || instancia == TIM2 || instancia == TIM3 || instancia == TIM4 || instancia == TIM5 || instancia == TIM8 || instancia == TIM9) {
 8017efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f00:	4a43      	ldr	r2, [pc, #268]	; (8018010 <configurarBaseTiempoTimer+0x184>)
 8017f02:	4293      	cmp	r3, r2
 8017f04:	d017      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f0c:	d013      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f10:	4a40      	ldr	r2, [pc, #256]	; (8018014 <configurarBaseTiempoTimer+0x188>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d00f      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f18:	4a3f      	ldr	r2, [pc, #252]	; (8018018 <configurarBaseTiempoTimer+0x18c>)
 8017f1a:	4293      	cmp	r3, r2
 8017f1c:	d00b      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f20:	4a3e      	ldr	r2, [pc, #248]	; (801801c <configurarBaseTiempoTimer+0x190>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d007      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f28:	4a3d      	ldr	r2, [pc, #244]	; (8018020 <configurarBaseTiempoTimer+0x194>)
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d003      	beq.n	8017f36 <configurarBaseTiempoTimer+0xaa>
 8017f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f30:	4a3c      	ldr	r2, [pc, #240]	; (8018024 <configurarBaseTiempoTimer+0x198>)
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d116      	bne.n	8017f64 <configurarBaseTiempoTimer+0xd8>
        TIM_ClockConfigTypeDef configFuenteReloj;
        memset(&configFuenteReloj, 0, sizeof(configFuenteReloj));
 8017f36:	f107 0318 	add.w	r3, r7, #24
 8017f3a:	2210      	movs	r2, #16
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f01d f9ae 	bl	80352a0 <memset>
        configFuenteReloj.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017f48:	61bb      	str	r3, [r7, #24]
        if (HAL_TIM_ConfigClockSource(&driver->hal.htim, &configFuenteReloj) != HAL_OK)
 8017f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4c:	3308      	adds	r3, #8
 8017f4e:	f107 0218 	add.w	r2, r7, #24
 8017f52:	4611      	mov	r1, r2
 8017f54:	4618      	mov	r0, r3
 8017f56:	f018 f8c1 	bl	80300dc <HAL_TIM_ConfigClockSource>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <configurarBaseTiempoTimer+0xd8>
            return false;
 8017f60:	2300      	movs	r3, #0
 8017f62:	e04f      	b.n	8018004 <configurarBaseTiempoTimer+0x178>

    }
    if (instancia == TIM1 || instancia == TIM2 || instancia == TIM3 || instancia == TIM4 || instancia == TIM5 || instancia == TIM8) {
 8017f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f66:	4a2a      	ldr	r2, [pc, #168]	; (8018010 <configurarBaseTiempoTimer+0x184>)
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	d013      	beq.n	8017f94 <configurarBaseTiempoTimer+0x108>
 8017f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f72:	d00f      	beq.n	8017f94 <configurarBaseTiempoTimer+0x108>
 8017f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f76:	4a27      	ldr	r2, [pc, #156]	; (8018014 <configurarBaseTiempoTimer+0x188>)
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	d00b      	beq.n	8017f94 <configurarBaseTiempoTimer+0x108>
 8017f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7e:	4a26      	ldr	r2, [pc, #152]	; (8018018 <configurarBaseTiempoTimer+0x18c>)
 8017f80:	4293      	cmp	r3, r2
 8017f82:	d007      	beq.n	8017f94 <configurarBaseTiempoTimer+0x108>
 8017f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f86:	4a25      	ldr	r2, [pc, #148]	; (801801c <configurarBaseTiempoTimer+0x190>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d003      	beq.n	8017f94 <configurarBaseTiempoTimer+0x108>
 8017f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f8e:	4a24      	ldr	r2, [pc, #144]	; (8018020 <configurarBaseTiempoTimer+0x194>)
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d115      	bne.n	8017fc0 <configurarBaseTiempoTimer+0x134>
        TIM_MasterConfigTypeDef configMaster;
        memset(&configMaster, 0, sizeof(configMaster));
 8017f94:	f107 030c 	add.w	r3, r7, #12
 8017f98:	220c      	movs	r2, #12
 8017f9a:	2100      	movs	r1, #0
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f01d f97f 	bl	80352a0 <memset>
        configMaster.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	617b      	str	r3, [r7, #20]
        if (HAL_TIMEx_MasterConfigSynchronization(&driver->hal.htim, &configMaster) != HAL_OK)
 8017fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa8:	3308      	adds	r3, #8
 8017faa:	f107 020c 	add.w	r2, r7, #12
 8017fae:	4611      	mov	r1, r2
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f018 fe99 	bl	8030ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d001      	beq.n	8017fc0 <configurarBaseTiempoTimer+0x134>
            return false;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	e021      	b.n	8018004 <configurarBaseTiempoTimer+0x178>
    }

    if (interrupcion) {
 8017fc0:	79bb      	ldrb	r3, [r7, #6]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d010      	beq.n	8017fe8 <configurarBaseTiempoTimer+0x15c>
        if (HAL_TIM_Base_Start_IT(&driver->hal.htim) != HAL_OK)
 8017fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc8:	3308      	adds	r3, #8
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f017 fcd6 	bl	802f97c <HAL_TIM_Base_Start_IT>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d001      	beq.n	8017fda <configurarBaseTiempoTimer+0x14e>
            return false;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	e014      	b.n	8018004 <configurarBaseTiempoTimer+0x178>

        configurarInterrupcionTimer(numTimer, driver);
 8017fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f000 f939 	bl	8018258 <configurarInterrupcionTimer>
 8017fe6:	e009      	b.n	8017ffc <configurarBaseTiempoTimer+0x170>
    }
    else {
        if (HAL_TIM_Base_Start(&driver->hal.htim) != HAL_OK)
 8017fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fea:	3308      	adds	r3, #8
 8017fec:	4618      	mov	r0, r3
 8017fee:	f017 fc9b 	bl	802f928 <HAL_TIM_Base_Start>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d001      	beq.n	8017ffc <configurarBaseTiempoTimer+0x170>
            return false;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	e003      	b.n	8018004 <configurarBaseTiempoTimer+0x178>
    }

    driver->baseConfigurada = true;
 8017ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffe:	2201      	movs	r2, #1
 8018000:	705a      	strb	r2, [r3, #1]
    return true;
 8018002:	2301      	movs	r3, #1
}
 8018004:	4618      	mov	r0, r3
 8018006:	3730      	adds	r7, #48	; 0x30
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}
 801800c:	2000cc48 	.word	0x2000cc48
 8018010:	40010000 	.word	0x40010000
 8018014:	40000400 	.word	0x40000400
 8018018:	40000800 	.word	0x40000800
 801801c:	40000c00 	.word	0x40000c00
 8018020:	40010400 	.word	0x40010400
 8018024:	40014000 	.word	0x40014000

08018028 <configurarOCtimer>:
**  Descripcion:    Configura el OC del Timer
**  Parametros:     Puntero al Timer, pulso en reposo, polaridad de la salida
**  Retorno:        True si OK
****************************************************************************************/
bool configurarOCtimer(tim_t *dTim, uint16_t pulsoReposo, bool inversion)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b08a      	sub	sp, #40	; 0x28
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
 8018030:	460b      	mov	r3, r1
 8018032:	807b      	strh	r3, [r7, #2]
 8018034:	4613      	mov	r3, r2
 8018036:	707b      	strb	r3, [r7, #1]
    timerHAL_t *driver = punteroTimer(dTim->numTimer);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	f993 3000 	ldrsb.w	r3, [r3]
 801803e:	4618      	mov	r0, r3
 8018040:	f7ff fddc 	bl	8017bfc <punteroTimer>
 8018044:	6278      	str	r0, [r7, #36]	; 0x24
    TIM_OC_InitTypeDef configOC;

    configOC.OCMode = TIM_OCMODE_PWM1;
 8018046:	2360      	movs	r3, #96	; 0x60
 8018048:	60bb      	str	r3, [r7, #8]
    configOC.OCIdleState = TIM_OCIDLESTATE_SET;
 801804a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801804e:	61fb      	str	r3, [r7, #28]
    configOC.OCPolarity = (inversion & TIMER_SALIDA_INVERTIDA) ? TIM_OCPOLARITY_LOW : TIM_OCPOLARITY_HIGH;
 8018050:	787b      	ldrb	r3, [r7, #1]
 8018052:	005b      	lsls	r3, r3, #1
 8018054:	f003 0302 	and.w	r3, r3, #2
 8018058:	613b      	str	r3, [r7, #16]
    configOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 801805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801805e:	623b      	str	r3, [r7, #32]
    configOC.OCNPolarity = (inversion & TIMER_SALIDA_INVERTIDA) ? TIM_OCNPOLARITY_LOW : TIM_OCNPOLARITY_HIGH;
 8018060:	787b      	ldrb	r3, [r7, #1]
 8018062:	00db      	lsls	r3, r3, #3
 8018064:	f003 0308 	and.w	r3, r3, #8
 8018068:	617b      	str	r3, [r7, #20]
    configOC.Pulse = pulsoReposo;
 801806a:	887b      	ldrh	r3, [r7, #2]
 801806c:	60fb      	str	r3, [r7, #12]
    configOC.OCFastMode = TIM_OCFAST_DISABLE;
 801806e:	2300      	movs	r3, #0
 8018070:	61bb      	str	r3, [r7, #24]

    if (HAL_TIM_PWM_ConfigChannel(&driver->hal.htim, &configOC, dTim->canal) != HAL_OK)
 8018072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018074:	f103 0008 	add.w	r0, r3, #8
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	685a      	ldr	r2, [r3, #4]
 801807c:	f107 0308 	add.w	r3, r7, #8
 8018080:	4619      	mov	r1, r3
 8018082:	f017 ff13 	bl	802feac <HAL_TIM_PWM_ConfigChannel>
 8018086:	4603      	mov	r3, r0
 8018088:	2b00      	cmp	r3, #0
 801808a:	d001      	beq.n	8018090 <configurarOCtimer+0x68>
        return false;
 801808c:	2300      	movs	r3, #0
 801808e:	e000      	b.n	8018092 <configurarOCtimer+0x6a>

    return true;
 8018090:	2301      	movs	r3, #1
}
 8018092:	4618      	mov	r0, r3
 8018094:	3728      	adds	r7, #40	; 0x28
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}

0801809a <configurarSalidaPWMtimer>:
**  Descripcion:    Configura la salida PWM del timer
**  Parametros:     Puntero al Timer, puntero al canal, frecuencia, periodo, valor en reposo, polaridad
**  Retorno:        True si ok
****************************************************************************************/
bool configurarSalidaPWMtimer(tim_t *dTim, canal_t *canal, uint32_t frec, uint16_t periodo, uint16_t pulsoReposo, bool inversion)
{
 801809a:	b580      	push	{r7, lr}
 801809c:	b086      	sub	sp, #24
 801809e:	af00      	add	r7, sp, #0
 80180a0:	60f8      	str	r0, [r7, #12]
 80180a2:	60b9      	str	r1, [r7, #8]
 80180a4:	607a      	str	r2, [r7, #4]
 80180a6:	807b      	strh	r3, [r7, #2]
	timerHAL_t *driver = punteroTimer(dTim->numTimer);
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	f993 3000 	ldrsb.w	r3, [r3]
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7ff fda4 	bl	8017bfc <punteroTimer>
 80180b4:	6178      	str	r0, [r7, #20]

    if (!configurarBaseTiempoTimer(dTim->numTimer, false, periodo, frec))
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	f993 0000 	ldrsb.w	r0, [r3]
 80180bc:	887a      	ldrh	r2, [r7, #2]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2100      	movs	r1, #0
 80180c2:	f7ff fee3 	bl	8017e8c <configurarBaseTiempoTimer>
 80180c6:	4603      	mov	r3, r0
 80180c8:	f083 0301 	eor.w	r3, r3, #1
 80180cc:	b2db      	uxtb	r3, r3
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d001      	beq.n	80180d6 <configurarSalidaPWMtimer+0x3c>
        return false;
 80180d2:	2300      	movs	r3, #0
 80180d4:	e046      	b.n	8018164 <configurarSalidaPWMtimer+0xca>

    if (!configurarOCtimer(dTim, pulsoReposo, dTim->tipoCanal ^ inversion))
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	7a1b      	ldrb	r3, [r3, #8]
 80180da:	461a      	mov	r2, r3
 80180dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80180e0:	4053      	eors	r3, r2
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	bf14      	ite	ne
 80180e6:	2301      	movne	r3, #1
 80180e8:	2300      	moveq	r3, #0
 80180ea:	b2da      	uxtb	r2, r3
 80180ec:	8c3b      	ldrh	r3, [r7, #32]
 80180ee:	4619      	mov	r1, r3
 80180f0:	68f8      	ldr	r0, [r7, #12]
 80180f2:	f7ff ff99 	bl	8018028 <configurarOCtimer>
 80180f6:	4603      	mov	r3, r0
 80180f8:	f083 0301 	eor.w	r3, r3, #1
 80180fc:	b2db      	uxtb	r3, r3
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d001      	beq.n	8018106 <configurarSalidaPWMtimer+0x6c>
        return false;
 8018102:	2300      	movs	r3, #0
 8018104:	e02e      	b.n	8018164 <configurarSalidaPWMtimer+0xca>

    if (dTim->tipoCanal == TIMER_CANAL_N) {
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	7a1b      	ldrb	r3, [r3, #8]
 801810a:	2b01      	cmp	r3, #1
 801810c:	d10d      	bne.n	801812a <configurarSalidaPWMtimer+0x90>
        if (HAL_TIMEx_PWMN_Start(&driver->hal.htim, dTim->canal) != HAL_OK)
 801810e:	697b      	ldr	r3, [r7, #20]
 8018110:	f103 0208 	add.w	r2, r3, #8
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	685b      	ldr	r3, [r3, #4]
 8018118:	4619      	mov	r1, r3
 801811a:	4610      	mov	r0, r2
 801811c:	f018 fdb4 	bl	8030c88 <HAL_TIMEx_PWMN_Start>
 8018120:	4603      	mov	r3, r0
 8018122:	2b00      	cmp	r3, #0
 8018124:	d00f      	beq.n	8018146 <configurarSalidaPWMtimer+0xac>
            return false;
 8018126:	2300      	movs	r3, #0
 8018128:	e01c      	b.n	8018164 <configurarSalidaPWMtimer+0xca>
    }
    else {
    	if (HAL_TIM_PWM_Start(&driver->hal.htim, dTim->canal) != HAL_OK)
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	f103 0208 	add.w	r2, r3, #8
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	685b      	ldr	r3, [r3, #4]
 8018134:	4619      	mov	r1, r3
 8018136:	4610      	mov	r0, r2
 8018138:	f017 fc4a 	bl	802f9d0 <HAL_TIM_PWM_Start>
 801813c:	4603      	mov	r3, r0
 801813e:	2b00      	cmp	r3, #0
 8018140:	d001      	beq.n	8018146 <configurarSalidaPWMtimer+0xac>
            return false;
 8018142:	2300      	movs	r3, #0
 8018144:	e00e      	b.n	8018164 <configurarSalidaPWMtimer+0xca>
    }

    // Reseteamos el valor del registro CCR
    canal->ccr = ccrCHtimer(dTim);
 8018146:	68f8      	ldr	r0, [r7, #12]
 8018148:	f000 f8c1 	bl	80182ce <ccrCHtimer>
 801814c:	4602      	mov	r2, r0
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	605a      	str	r2, [r3, #4]
    canal->tim = driver->hal.htim.Instance;
 8018152:	697b      	ldr	r3, [r7, #20]
 8018154:	689a      	ldr	r2, [r3, #8]
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	601a      	str	r2, [r3, #0]
    *canal->ccr = 0;
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	2200      	movs	r2, #0
 8018160:	601a      	str	r2, [r3, #0]
    return true;
 8018162:	2301      	movs	r3, #1
}
 8018164:	4618      	mov	r0, r3
 8018166:	3718      	adds	r7, #24
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <configurarICtimer>:
**  Descripcion:    Configura la base de tiempo
**  Parametros:     Puntero al timer, periodo, hercios
**  Retorno:        True si ok
****************************************************************************************/
bool configurarICtimer(tim_t *dTim, bool polaridad)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b088      	sub	sp, #32
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	460b      	mov	r3, r1
 8018176:	70fb      	strb	r3, [r7, #3]
    timerHAL_t *driver = punteroTimer(dTim->numTimer);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f993 3000 	ldrsb.w	r3, [r3]
 801817e:	4618      	mov	r0, r3
 8018180:	f7ff fd3c 	bl	8017bfc <punteroTimer>
 8018184:	61f8      	str	r0, [r7, #28]
    TIM_IC_InitTypeDef configIC;
    configIC.ICPolarity = polaridad ? TIM_ICPOLARITY_RISING : TIM_ICPOLARITY_FALLING;
 8018186:	78fb      	ldrb	r3, [r7, #3]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d001      	beq.n	8018190 <configurarICtimer+0x24>
 801818c:	2300      	movs	r3, #0
 801818e:	e000      	b.n	8018192 <configurarICtimer+0x26>
 8018190:	2302      	movs	r3, #2
 8018192:	60fb      	str	r3, [r7, #12]
    configIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8018194:	2301      	movs	r3, #1
 8018196:	613b      	str	r3, [r7, #16]
    configIC.ICPrescaler = TIM_ICPSC_DIV1;
 8018198:	2300      	movs	r3, #0
 801819a:	617b      	str	r3, [r7, #20]
    configIC.ICFilter = 0x00;
 801819c:	2300      	movs	r3, #0
 801819e:	61bb      	str	r3, [r7, #24]

    if (HAL_TIM_IC_ConfigChannel(&driver->hal.htim, &configIC, dTim->canal) != HAL_OK)
 80181a0:	69fb      	ldr	r3, [r7, #28]
 80181a2:	f103 0008 	add.w	r0, r3, #8
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	685a      	ldr	r2, [r3, #4]
 80181aa:	f107 030c 	add.w	r3, r7, #12
 80181ae:	4619      	mov	r1, r3
 80181b0:	f017 fddf 	bl	802fd72 <HAL_TIM_IC_ConfigChannel>
 80181b4:	4603      	mov	r3, r0
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d001      	beq.n	80181be <configurarICtimer+0x52>
        return false;
 80181ba:	2300      	movs	r3, #0
 80181bc:	e00e      	b.n	80181dc <configurarICtimer+0x70>

    if (HAL_TIM_IC_Start_IT(&driver->hal.htim, dTim->canal) != HAL_OK)
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	f103 0208 	add.w	r2, r3, #8
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	685b      	ldr	r3, [r3, #4]
 80181c8:	4619      	mov	r1, r3
 80181ca:	4610      	mov	r0, r2
 80181cc:	f017 fc44 	bl	802fa58 <HAL_TIM_IC_Start_IT>
 80181d0:	4603      	mov	r3, r0
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d001      	beq.n	80181da <configurarICtimer+0x6e>
        return false;
 80181d6:	2300      	movs	r3, #0
 80181d8:	e000      	b.n	80181dc <configurarICtimer+0x70>

    return true;
 80181da:	2301      	movs	r3, #1
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3720      	adds	r7, #32
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}

080181e4 <configurarCapturaEntradaTimer>:
**  Descripcion:    Configura la base de tiempo y la prioridad de la interrupcion
**  Parametros:     Puntero al timer, periodo, frecuencia del contaje, polaridad de la deteccion
**  Retorno:        True si ok
****************************************************************************************/
bool configurarCapturaEntradaTimer(tim_t *dTim, uint16_t periodo, uint32_t frec, bool polaridad)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b086      	sub	sp, #24
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	60f8      	str	r0, [r7, #12]
 80181ec:	607a      	str	r2, [r7, #4]
 80181ee:	461a      	mov	r2, r3
 80181f0:	460b      	mov	r3, r1
 80181f2:	817b      	strh	r3, [r7, #10]
 80181f4:	4613      	mov	r3, r2
 80181f6:	727b      	strb	r3, [r7, #9]
    // Configuramos la base de tiempo
    if (!configurarBaseTiempoTimer(dTim->numTimer, false, periodo, frec))
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	f993 0000 	ldrsb.w	r0, [r3]
 80181fe:	897a      	ldrh	r2, [r7, #10]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2100      	movs	r1, #0
 8018204:	f7ff fe42 	bl	8017e8c <configurarBaseTiempoTimer>
 8018208:	4603      	mov	r3, r0
 801820a:	f083 0301 	eor.w	r3, r3, #1
 801820e:	b2db      	uxtb	r3, r3
 8018210:	2b00      	cmp	r3, #0
 8018212:	d001      	beq.n	8018218 <configurarCapturaEntradaTimer+0x34>
        return false;
 8018214:	2300      	movs	r3, #0
 8018216:	e01b      	b.n	8018250 <configurarCapturaEntradaTimer+0x6c>

    timerHAL_t *driver = punteroTimer(dTim->numTimer);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	f993 3000 	ldrsb.w	r3, [r3]
 801821e:	4618      	mov	r0, r3
 8018220:	f7ff fcec 	bl	8017bfc <punteroTimer>
 8018224:	6178      	str	r0, [r7, #20]
    configurarInterrupcionTimer(dTim->numTimer, driver);
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	f993 3000 	ldrsb.w	r3, [r3]
 801822c:	6979      	ldr	r1, [r7, #20]
 801822e:	4618      	mov	r0, r3
 8018230:	f000 f812 	bl	8018258 <configurarInterrupcionTimer>

    if (!configurarICtimer(dTim, polaridad))
 8018234:	7a7b      	ldrb	r3, [r7, #9]
 8018236:	4619      	mov	r1, r3
 8018238:	68f8      	ldr	r0, [r7, #12]
 801823a:	f7ff ff97 	bl	801816c <configurarICtimer>
 801823e:	4603      	mov	r3, r0
 8018240:	f083 0301 	eor.w	r3, r3, #1
 8018244:	b2db      	uxtb	r3, r3
 8018246:	2b00      	cmp	r3, #0
 8018248:	d001      	beq.n	801824e <configurarCapturaEntradaTimer+0x6a>
        return false;
 801824a:	2300      	movs	r3, #0
 801824c:	e000      	b.n	8018250 <configurarCapturaEntradaTimer+0x6c>

    return true;
 801824e:	2301      	movs	r3, #1
}
 8018250:	4618      	mov	r0, r3
 8018252:	3718      	adds	r7, #24
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}

08018258 <configurarInterrupcionTimer>:
**  Descripcion:    Configura la interrupcion
**  Parametros:     Numero de timer, driver del timer
**  Retorno:        Ninguno
****************************************************************************************/
void configurarInterrupcionTimer(numTimer_e numTimer, timerHAL_t *dTimer)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
 801825e:	4603      	mov	r3, r0
 8018260:	6039      	str	r1, [r7, #0]
 8018262:	71fb      	strb	r3, [r7, #7]
    // Configuramos las interrupciones
    HAL_NVIC_SetPriority(dTimer->hal.IRQ, PRIORIDAD_BASE_NVIC(dTimer->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(dTimer->hal.prioridadIRQ));
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801826a:	b258      	sxtb	r0, r3
 801826c:	683b      	ldr	r3, [r7, #0]
 801826e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8018272:	099b      	lsrs	r3, r3, #6
 8018274:	b2db      	uxtb	r3, r3
 8018276:	2200      	movs	r2, #0
 8018278:	4619      	mov	r1, r3
 801827a:	f011 fe03 	bl	8029e84 <HAL_NVIC_SetPriority>

    switch (numTimer) {
 801827e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d002      	beq.n	801828c <configurarInterrupcionTimer+0x34>
 8018286:	2b07      	cmp	r3, #7
 8018288:	d00b      	beq.n	80182a2 <configurarInterrupcionTimer+0x4a>
        case TIMER_8:
            HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, PRIORIDAD_BASE_NVIC(dTimer->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(dTimer->hal.prioridadIRQ));
            break;

        default:
            break;
 801828a:	e015      	b.n	80182b8 <configurarInterrupcionTimer+0x60>
            HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, PRIORIDAD_BASE_NVIC(dTimer->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(dTimer->hal.prioridadIRQ));
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8018292:	099b      	lsrs	r3, r3, #6
 8018294:	b2db      	uxtb	r3, r3
 8018296:	2200      	movs	r2, #0
 8018298:	4619      	mov	r1, r3
 801829a:	2019      	movs	r0, #25
 801829c:	f011 fdf2 	bl	8029e84 <HAL_NVIC_SetPriority>
            break;
 80182a0:	e00a      	b.n	80182b8 <configurarInterrupcionTimer+0x60>
            HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, PRIORIDAD_BASE_NVIC(dTimer->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(dTimer->hal.prioridadIRQ));
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80182a8:	099b      	lsrs	r3, r3, #6
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	2200      	movs	r2, #0
 80182ae:	4619      	mov	r1, r3
 80182b0:	202c      	movs	r0, #44	; 0x2c
 80182b2:	f011 fde7 	bl	8029e84 <HAL_NVIC_SetPriority>
            break;
 80182b6:	bf00      	nop
    }

    HAL_NVIC_EnableIRQ(dTimer->hal.IRQ);
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80182be:	b25b      	sxtb	r3, r3
 80182c0:	4618      	mov	r0, r3
 80182c2:	f011 fdfb 	bl	8029ebc <HAL_NVIC_EnableIRQ>
}
 80182c6:	bf00      	nop
 80182c8:	3708      	adds	r7, #8
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}

080182ce <ccrCHtimer>:
**  Descripcion:    Obtiene el registro CCR
**  Parametros:     Puntero al Timer
**  Retorno:        Registro CCR
****************************************************************************************/
volatile uint32_t *ccrCHtimer(tim_t *dTim)
{
 80182ce:	b580      	push	{r7, lr}
 80182d0:	b084      	sub	sp, #16
 80182d2:	af00      	add	r7, sp, #0
 80182d4:	6078      	str	r0, [r7, #4]
    timerHAL_t *driver = punteroTimer(dTim->numTimer);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f993 3000 	ldrsb.w	r3, [r3]
 80182dc:	4618      	mov	r0, r3
 80182de:	f7ff fc8d 	bl	8017bfc <punteroTimer>
 80182e2:	60f8      	str	r0, [r7, #12]
    return (volatile uint32_t*)((volatile char*)&driver->hal.htim.Instance->CCR1 + (dTim->canal /*>> 2*/));
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	689b      	ldr	r3, [r3, #8]
 80182e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	4413      	add	r3, r2
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}

080182fa <asignarCallbackPeriodoTimer>:
**  Descripcion:    Funcion que asigna el callback para el periodo completado
**  Parametros:     Numero de timer, funcion de asignacion
**  Retorno:        Ninguno
****************************************************************************************/
void asignarCallbackPeriodoTimer(numTimer_e numTimer, timerPeriodoCallback *fn)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b084      	sub	sp, #16
 80182fe:	af00      	add	r7, sp, #0
 8018300:	4603      	mov	r3, r0
 8018302:	6039      	str	r1, [r7, #0]
 8018304:	71fb      	strb	r3, [r7, #7]
	timerHAL_t *driver = punteroTimer(numTimer);
 8018306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801830a:	4618      	mov	r0, r3
 801830c:	f7ff fc76 	bl	8017bfc <punteroTimer>
 8018310:	60f8      	str	r0, [r7, #12]
	driver->periodoCallback = fn;
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	683a      	ldr	r2, [r7, #0]
 8018316:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 801831a:	bf00      	nop
 801831c:	3710      	adds	r7, #16
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}

08018322 <asignarCallbackCCtimer>:
**  Descripcion:    Funcion que asigna el callback para Capture Compare
**  Parametros:     Puntero al callback a asignar, funcion de asignacion
**  Retorno:        Ninguno
****************************************************************************************/
void asignarCallbackCCtimer(timerCCHandlerRec_t *callback, timerCCHandlerCallback *fn)
{
 8018322:	b480      	push	{r7}
 8018324:	b083      	sub	sp, #12
 8018326:	af00      	add	r7, sp, #0
 8018328:	6078      	str	r0, [r7, #4]
 801832a:	6039      	str	r1, [r7, #0]
    callback->fn = fn;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	683a      	ldr	r2, [r7, #0]
 8018330:	601a      	str	r2, [r3, #0]
}
 8018332:	bf00      	nop
 8018334:	370c      	adds	r7, #12
 8018336:	46bd      	mov	sp, r7
 8018338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833c:	4770      	bx	lr

0801833e <asignarCallbackOvrTimer>:
**  Descripcion:    Funcion que usigna el callback para Overflow
**  Parametros:     Puntero al callback a asignar, funcion de asignacion
**  Retorno:        Ninguno
****************************************************************************************/
void asignarCallbackOvrTimer(timerOvrHandlerRec_t *callback, timerOvrHandlerCallback *fn)
{
 801833e:	b480      	push	{r7}
 8018340:	b083      	sub	sp, #12
 8018342:	af00      	add	r7, sp, #0
 8018344:	6078      	str	r0, [r7, #4]
 8018346:	6039      	str	r1, [r7, #0]
    callback->fn = fn;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	601a      	str	r2, [r3, #0]
    callback->siguiente = NULL;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2200      	movs	r2, #0
 8018352:	605a      	str	r2, [r3, #4]
}
 8018354:	bf00      	nop
 8018356:	370c      	adds	r7, #12
 8018358:	46bd      	mov	sp, r7
 801835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835e:	4770      	bx	lr

08018360 <configurarCallbacksTimer>:
**  Descripcion:    Configura los callbacks del canal del timer
**  Parametros:     Puntero al Timer, edge callback, overflow callback
**  Retorno:        Ninguno
****************************************************************************************/
void configurarCallbacksTimer(tim_t *dTim, timerCCHandlerRec_t *edgeCallback, timerOvrHandlerRec_t *overflowCallback)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b086      	sub	sp, #24
 8018364:	af00      	add	r7, sp, #0
 8018366:	60f8      	str	r0, [r7, #12]
 8018368:	60b9      	str	r1, [r7, #8]
 801836a:	607a      	str	r2, [r7, #4]
    timerHAL_t *driver = punteroTimer(dTim->numTimer);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	f993 3000 	ldrsb.w	r3, [r3]
 8018372:	4618      	mov	r0, r3
 8018374:	f7ff fc42 	bl	8017bfc <punteroTimer>
 8018378:	6178      	str	r0, [r7, #20]

    if (edgeCallback == NULL)
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d109      	bne.n	8018394 <configurarCallbacksTimer+0x34>
        __HAL_TIM_DISABLE_IT(&driver->hal.htim, dTim->canal);
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	689b      	ldr	r3, [r3, #8]
 8018384:	68d9      	ldr	r1, [r3, #12]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	43da      	mvns	r2, r3
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	689b      	ldr	r3, [r3, #8]
 8018390:	400a      	ands	r2, r1
 8018392:	60da      	str	r2, [r3, #12]

    uint8_t canal = dTim->canal >> 2;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	089b      	lsrs	r3, r3, #2
 801839a:	74fb      	strb	r3, [r7, #19]
    driver->edgeCallback[canal] = edgeCallback;
 801839c:	7cfa      	ldrb	r2, [r7, #19]
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	3222      	adds	r2, #34	; 0x22
 80183a2:	68b9      	ldr	r1, [r7, #8]
 80183a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    driver->overflowCallback[canal] = overflowCallback;
 80183a8:	7cfa      	ldrb	r2, [r7, #19]
 80183aa:	697b      	ldr	r3, [r7, #20]
 80183ac:	3226      	adds	r2, #38	; 0x26
 80183ae:	6879      	ldr	r1, [r7, #4]
 80183b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (edgeCallback)
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d008      	beq.n	80183cc <configurarCallbacksTimer+0x6c>
        __HAL_TIM_ENABLE_IT(&driver->hal.htim, dTim->canal);
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	689b      	ldr	r3, [r3, #8]
 80183be:	68d9      	ldr	r1, [r3, #12]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	685a      	ldr	r2, [r3, #4]
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	689b      	ldr	r3, [r3, #8]
 80183c8:	430a      	orrs	r2, r1
 80183ca:	60da      	str	r2, [r3, #12]

    actualizarConfigOverflowCanalTimer(dTim->numTimer);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	f993 3000 	ldrsb.w	r3, [r3]
 80183d2:	4618      	mov	r0, r3
 80183d4:	f000 f804 	bl	80183e0 <actualizarConfigOverflowCanalTimer>
}
 80183d8:	bf00      	nop
 80183da:	3718      	adds	r7, #24
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}

080183e0 <actualizarConfigOverflowCanalTimer>:
**  Descripcion:    Actualiza la configuracion del overflow del Timer
**  Parametros:     Numero de timer
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarConfigOverflowCanalTimer(numTimer_e numTimer)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b088      	sub	sp, #32
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	4603      	mov	r3, r0
 80183e8:	71fb      	strb	r3, [r7, #7]
    timerHAL_t *driver = punteroTimer(numTimer);
 80183ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7ff fc04 	bl	8017bfc <punteroTimer>
 80183f4:	6178      	str	r0, [r7, #20]

    timerOvrHandlerRec_t **cadena = &driver->overflowCallbackActivo;
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	33a8      	adds	r3, #168	; 0xa8
 80183fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80183fc:	f3ef 8311 	mrs	r3, BASEPRI
 8018400:	613b      	str	r3, [r7, #16]
  return(result);
 8018402:	693b      	ldr	r3, [r7, #16]
    BLOQUE_ATOMICO(NVIC_PRIO_TIMER) {
 8018404:	b2db      	uxtb	r3, r3
 8018406:	73fb      	strb	r3, [r7, #15]
 8018408:	2050      	movs	r0, #80	; 0x50
 801840a:	f7ff fd2c 	bl	8017e66 <ajustarBasepriMax>
 801840e:	4603      	mov	r3, r0
 8018410:	76fb      	strb	r3, [r7, #27]
 8018412:	e022      	b.n	801845a <actualizarConfigOverflowCanalTimer+0x7a>
        for (uint8_t i = 0; i < NUM_CANALES_POR_TIMER; i++) {
 8018414:	2300      	movs	r3, #0
 8018416:	76bb      	strb	r3, [r7, #26]
 8018418:	e017      	b.n	801844a <actualizarConfigOverflowCanalTimer+0x6a>
            if (driver->overflowCallback[i]) {
 801841a:	7eba      	ldrb	r2, [r7, #26]
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	3226      	adds	r2, #38	; 0x26
 8018420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d00d      	beq.n	8018444 <actualizarConfigOverflowCanalTimer+0x64>
                *cadena = driver->overflowCallback[i];
 8018428:	7eba      	ldrb	r2, [r7, #26]
 801842a:	697b      	ldr	r3, [r7, #20]
 801842c:	3226      	adds	r2, #38	; 0x26
 801842e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	601a      	str	r2, [r3, #0]
                cadena = &driver->overflowCallback[i]->siguiente;
 8018436:	7eba      	ldrb	r2, [r7, #26]
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	3226      	adds	r2, #38	; 0x26
 801843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018440:	3304      	adds	r3, #4
 8018442:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < NUM_CANALES_POR_TIMER; i++) {
 8018444:	7ebb      	ldrb	r3, [r7, #26]
 8018446:	3301      	adds	r3, #1
 8018448:	76bb      	strb	r3, [r7, #26]
 801844a:	7ebb      	ldrb	r3, [r7, #26]
 801844c:	2b03      	cmp	r3, #3
 801844e:	d9e4      	bls.n	801841a <actualizarConfigOverflowCanalTimer+0x3a>
            }
        }
        *cadena = NULL;
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	2200      	movs	r2, #0
 8018454:	601a      	str	r2, [r3, #0]
    BLOQUE_ATOMICO(NVIC_PRIO_TIMER) {
 8018456:	2300      	movs	r3, #0
 8018458:	76fb      	strb	r3, [r7, #27]
 801845a:	7efb      	ldrb	r3, [r7, #27]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1d9      	bne.n	8018414 <actualizarConfigOverflowCanalTimer+0x34>
 8018460:	f107 030f 	add.w	r3, r7, #15
 8018464:	4618      	mov	r0, r3
 8018466:	f7ff fced 	bl	8017e44 <restaurarBasepriMem>
    }

    if (driver->overflowCallbackActivo)
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018470:	2b00      	cmp	r3, #0
 8018472:	d008      	beq.n	8018486 <actualizarConfigOverflowCanalTimer+0xa6>
        __HAL_TIM_ENABLE_IT(&driver->hal.htim, TIM_IT_UPDATE);
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	689b      	ldr	r3, [r3, #8]
 8018478:	68da      	ldr	r2, [r3, #12]
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	f042 0201 	orr.w	r2, r2, #1
 8018482:	60da      	str	r2, [r3, #12]
    else
        __HAL_TIM_DISABLE_IT(&driver->hal.htim, TIM_IT_UPDATE);
}
 8018484:	e007      	b.n	8018496 <actualizarConfigOverflowCanalTimer+0xb6>
        __HAL_TIM_DISABLE_IT(&driver->hal.htim, TIM_IT_UPDATE);
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	689b      	ldr	r3, [r3, #8]
 801848a:	68da      	ldr	r2, [r3, #12]
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	f022 0201 	bic.w	r2, r2, #1
 8018494:	60da      	str	r2, [r3, #12]
}
 8018496:	bf00      	nop
 8018498:	3720      	adds	r7, #32
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}

0801849e <forzarOverflowTimer>:
**  Descripcion:    Guarda el valor del contador y fuerza el overflow de un timer
**  Parametros:     Puntero al Timer
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void forzarOverflowTimer(tim_t *dTim)
{
 801849e:	b580      	push	{r7, lr}
 80184a0:	b086      	sub	sp, #24
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80184a6:	f3ef 8311 	mrs	r3, BASEPRI
 80184aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80184ac:	68fb      	ldr	r3, [r7, #12]
    BLOQUE_ATOMICO(NVIC_PRIO_TIMER) {
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	72fb      	strb	r3, [r7, #11]
 80184b2:	2050      	movs	r0, #80	; 0x50
 80184b4:	f7ff fcd7 	bl	8017e66 <ajustarBasepriMax>
 80184b8:	4603      	mov	r3, r0
 80184ba:	75fb      	strb	r3, [r7, #23]
 80184bc:	e017      	b.n	80184ee <forzarOverflowTimer+0x50>
        timerHAL_t *driver = punteroTimer(dTim->numTimer);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f993 3000 	ldrsb.w	r3, [r3]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7ff fb99 	bl	8017bfc <punteroTimer>
 80184ca:	6138      	str	r0, [r7, #16]

        // Guardamos el valor para que la cuenta del PPM siga funcionando si compartimos timer
        driver->valorForzadoOverflowTimer = driver->hal.htim.Instance->CNT + 1;
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	689b      	ldr	r3, [r3, #8]
 80184d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184d2:	1c5a      	adds	r2, r3, #1
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        // Forzamos el overflow
    	driver->hal.htim.Instance->EGR |= TIM_EGR_UG;
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	689b      	ldr	r3, [r3, #8]
 80184de:	695a      	ldr	r2, [r3, #20]
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	689b      	ldr	r3, [r3, #8]
 80184e4:	f042 0201 	orr.w	r2, r2, #1
 80184e8:	615a      	str	r2, [r3, #20]
    BLOQUE_ATOMICO(NVIC_PRIO_TIMER) {
 80184ea:	2300      	movs	r3, #0
 80184ec:	75fb      	strb	r3, [r7, #23]
 80184ee:	7dfb      	ldrb	r3, [r7, #23]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d1e4      	bne.n	80184be <forzarOverflowTimer+0x20>
 80184f4:	f107 030b 	add.w	r3, r7, #11
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ff fca3 	bl	8017e44 <restaurarBasepriMem>
    }
}
 80184fe:	bf00      	nop
 8018500:	3718      	adds	r7, #24
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
	...

08018508 <handlerIrqTimer>:
**  Descripcion:    Funcion que maneja la interrupcion del timer
**  Parametros:     Numero de timer
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void handlerIrqTimer(numTimer_e numTimer)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b08a      	sub	sp, #40	; 0x28
 801850c:	af00      	add	r7, sp, #0
 801850e:	4603      	mov	r3, r0
 8018510:	71fb      	strb	r3, [r7, #7]
    timerHAL_t *driver = punteroTimer(numTimer);
 8018512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018516:	4618      	mov	r0, r3
 8018518:	f7ff fb70 	bl	8017bfc <punteroTimer>
 801851c:	61b8      	str	r0, [r7, #24]
    uint16_t captura;
    TIM_TypeDef *inst = driver->hal.htim.Instance;
 801851e:	69bb      	ldr	r3, [r7, #24]
 8018520:	689b      	ldr	r3, [r3, #8]
 8018522:	617b      	str	r3, [r7, #20]
    uint32_t estadoTimer = inst->SR & inst->DIER;
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	691a      	ldr	r2, [r3, #16]
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	4013      	ands	r3, r2
 801852e:	623b      	str	r3, [r7, #32]

    while (estadoTimer) {
 8018530:	e07b      	b.n	801862a <handlerIrqTimer+0x122>
    	uint32_t bit = __builtin_clz(estadoTimer);
 8018532:	6a3b      	ldr	r3, [r7, #32]
 8018534:	fab3 f383 	clz	r3, r3
 8018538:	613b      	str	r3, [r7, #16]
    	uint32_t mascara = ~(0x80000000 >> bit);
 801853a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	fa22 f303 	lsr.w	r3, r2, r3
 8018544:	43db      	mvns	r3, r3
 8018546:	60fb      	str	r3, [r7, #12]
        inst->SR = mascara;
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	68fa      	ldr	r2, [r7, #12]
 801854c:	611a      	str	r2, [r3, #16]
        estadoTimer &= mascara;
 801854e:	6a3a      	ldr	r2, [r7, #32]
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	4013      	ands	r3, r2
 8018554:	623b      	str	r3, [r7, #32]

        switch (bit) {
 8018556:	693b      	ldr	r3, [r7, #16]
 8018558:	3b1b      	subs	r3, #27
 801855a:	2b04      	cmp	r3, #4
 801855c:	d865      	bhi.n	801862a <handlerIrqTimer+0x122>
 801855e:	a201      	add	r2, pc, #4	; (adr r2, 8018564 <handlerIrqTimer+0x5c>)
 8018560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018564:	08018611 	.word	0x08018611
 8018568:	080185f7 	.word	0x080185f7
 801856c:	080185dd 	.word	0x080185dd
 8018570:	080185c3 	.word	0x080185c3
 8018574:	08018579 	.word	0x08018579
            case __builtin_clz(TIM_IT_UPDATE):
                if (driver->valorForzadoOverflowTimer != 0) {
 8018578:	69bb      	ldr	r3, [r7, #24]
 801857a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801857e:	2b00      	cmp	r3, #0
 8018580:	d00a      	beq.n	8018598 <handlerIrqTimer+0x90>
                    captura = driver->valorForzadoOverflowTimer - 1;
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018588:	b29b      	uxth	r3, r3
 801858a:	3b01      	subs	r3, #1
 801858c:	84fb      	strh	r3, [r7, #38]	; 0x26
                    driver->valorForzadoOverflowTimer = 0;
 801858e:	69bb      	ldr	r3, [r7, #24]
 8018590:	2200      	movs	r2, #0
 8018592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8018596:	e002      	b.n	801859e <handlerIrqTimer+0x96>
                }
                else
                    captura = inst->ARR;
 8018598:	697b      	ldr	r3, [r7, #20]
 801859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801859c:	84fb      	strh	r3, [r7, #38]	; 0x26

                timerOvrHandlerRec_t *callback = driver->overflowCallbackActivo;
 801859e:	69bb      	ldr	r3, [r7, #24]
 80185a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80185a4:	61fb      	str	r3, [r7, #28]
                while (callback) {
 80185a6:	e008      	b.n	80185ba <handlerIrqTimer+0xb2>
                    callback->fn(callback, captura);
 80185a8:	69fb      	ldr	r3, [r7, #28]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80185ae:	4611      	mov	r1, r2
 80185b0:	69f8      	ldr	r0, [r7, #28]
 80185b2:	4798      	blx	r3
                    callback = callback->siguiente;
 80185b4:	69fb      	ldr	r3, [r7, #28]
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	61fb      	str	r3, [r7, #28]
                while (callback) {
 80185ba:	69fb      	ldr	r3, [r7, #28]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d1f3      	bne.n	80185a8 <handlerIrqTimer+0xa0>
                }
                break;
 80185c0:	e033      	b.n	801862a <handlerIrqTimer+0x122>

            case __builtin_clz(TIM_IT_CC1):
                driver->edgeCallback[0]->fn(driver->edgeCallback[0], inst->CCR1);
 80185c2:	69bb      	ldr	r3, [r7, #24]
 80185c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	69ba      	ldr	r2, [r7, #24]
 80185cc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80185d0:	697a      	ldr	r2, [r7, #20]
 80185d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80185d4:	b292      	uxth	r2, r2
 80185d6:	4611      	mov	r1, r2
 80185d8:	4798      	blx	r3
                break;
 80185da:	e026      	b.n	801862a <handlerIrqTimer+0x122>

            case __builtin_clz(TIM_IT_CC2):
                driver->edgeCallback[1]->fn(driver->edgeCallback[1], inst->CCR2);
 80185dc:	69bb      	ldr	r3, [r7, #24]
 80185de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	69ba      	ldr	r2, [r7, #24]
 80185e6:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80185ea:	697a      	ldr	r2, [r7, #20]
 80185ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80185ee:	b292      	uxth	r2, r2
 80185f0:	4611      	mov	r1, r2
 80185f2:	4798      	blx	r3
                break;
 80185f4:	e019      	b.n	801862a <handlerIrqTimer+0x122>

            case __builtin_clz(TIM_IT_CC3):
                driver->edgeCallback[2]->fn(driver->edgeCallback[2], inst->CCR3);
 80185f6:	69bb      	ldr	r3, [r7, #24]
 80185f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	69ba      	ldr	r2, [r7, #24]
 8018600:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8018604:	697a      	ldr	r2, [r7, #20]
 8018606:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8018608:	b292      	uxth	r2, r2
 801860a:	4611      	mov	r1, r2
 801860c:	4798      	blx	r3
                break;
 801860e:	e00c      	b.n	801862a <handlerIrqTimer+0x122>

            case __builtin_clz(TIM_IT_CC4):
                driver->edgeCallback[3]->fn(driver->edgeCallback[3], inst->CCR4);
 8018610:	69bb      	ldr	r3, [r7, #24]
 8018612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	69ba      	ldr	r2, [r7, #24]
 801861a:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 801861e:	697a      	ldr	r2, [r7, #20]
 8018620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018622:	b292      	uxth	r2, r2
 8018624:	4611      	mov	r1, r2
 8018626:	4798      	blx	r3
                break;
 8018628:	bf00      	nop
    while (estadoTimer) {
 801862a:	6a3b      	ldr	r3, [r7, #32]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d180      	bne.n	8018532 <handlerIrqTimer+0x2a>
        }
    }
}
 8018630:	bf00      	nop
 8018632:	bf00      	nop
 8018634:	3728      	adds	r7, #40	; 0x28
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop

0801863c <HAL_TIM_PeriodElapsedCallback>:
**  Descripcion:    Callback de periodo completado
**  Parametros:     Handler del timer
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b084      	sub	sp, #16
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
    numTimer_e numTimer = numeroTimer(htim);
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f000 f963 	bl	8018910 <numeroTimer>
 801864a:	4603      	mov	r3, r0
 801864c:	73fb      	strb	r3, [r7, #15]
    timerHAL_t *driver = punteroTimer(numTimer);
 801864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018652:	4618      	mov	r0, r3
 8018654:	f7ff fad2 	bl	8017bfc <punteroTimer>
 8018658:	60b8      	str	r0, [r7, #8]

    if (driver->periodoCallback)
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018660:	2b00      	cmp	r3, #0
 8018662:	d003      	beq.n	801866c <HAL_TIM_PeriodElapsedCallback+0x30>
        driver->periodoCallback();
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801866a:	4798      	blx	r3
}
 801866c:	bf00      	nop
 801866e:	3710      	adds	r7, #16
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <TIM1_CC_IRQHandler>:
**  Descripcion:    Interrupcion Capture Compare del Timer 1
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_1);
 8018678:	2000      	movs	r0, #0
 801867a:	f7ff ff45 	bl	8018508 <handlerIrqTimer>
}
 801867e:	bf00      	nop
 8018680:	bd80      	pop	{r7, pc}

08018682 <TIM1_UP_TIM10_IRQHandler>:
**  Descripcion:    Interrupcion compartida del 1 y 10
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_1);
 8018686:	2000      	movs	r0, #0
 8018688:	f7ff ff3e 	bl	8018508 <handlerIrqTimer>
    handlerIrqTimer(TIMER_10);
 801868c:	2009      	movs	r0, #9
 801868e:	f7ff ff3b 	bl	8018508 <handlerIrqTimer>
}
 8018692:	bf00      	nop
 8018694:	bd80      	pop	{r7, pc}

08018696 <TIM2_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 2
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM2_IRQHandler(void)
{
 8018696:	b580      	push	{r7, lr}
 8018698:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_2);
 801869a:	2001      	movs	r0, #1
 801869c:	f7ff ff34 	bl	8018508 <handlerIrqTimer>
}
 80186a0:	bf00      	nop
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <TIM3_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 3
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM3_IRQHandler(void)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_3);
 80186a8:	2002      	movs	r0, #2
 80186aa:	f7ff ff2d 	bl	8018508 <handlerIrqTimer>
}
 80186ae:	bf00      	nop
 80186b0:	bd80      	pop	{r7, pc}

080186b2 <TIM4_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 4
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM4_IRQHandler(void)
{
 80186b2:	b580      	push	{r7, lr}
 80186b4:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_4);
 80186b6:	2003      	movs	r0, #3
 80186b8:	f7ff ff26 	bl	8018508 <handlerIrqTimer>
}
 80186bc:	bf00      	nop
 80186be:	bd80      	pop	{r7, pc}

080186c0 <TIM5_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 5
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM5_IRQHandler(void)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_5);
 80186c4:	2004      	movs	r0, #4
 80186c6:	f7ff ff1f 	bl	8018508 <handlerIrqTimer>
}
 80186ca:	bf00      	nop
 80186cc:	bd80      	pop	{r7, pc}

080186ce <TIM7_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 7
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM7_IRQHandler(void)
{
 80186ce:	b580      	push	{r7, lr}
 80186d0:	b082      	sub	sp, #8
 80186d2:	af00      	add	r7, sp, #0
	timerHAL_t *driver = punteroTimer(TIMER_7);
 80186d4:	2006      	movs	r0, #6
 80186d6:	f7ff fa91 	bl	8017bfc <punteroTimer>
 80186da:	6078      	str	r0, [r7, #4]
	HAL_TIM_IRQHandler(&driver->hal.htim);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	3308      	adds	r3, #8
 80186e0:	4618      	mov	r0, r3
 80186e2:	f017 fa27 	bl	802fb34 <HAL_TIM_IRQHandler>
}
 80186e6:	bf00      	nop
 80186e8:	3708      	adds	r7, #8
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}

080186ee <TIM8_CC_IRQHandler>:
**  Descripcion:    Interrupcion Capture Compare del Timer 8
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM8_CC_IRQHandler(void)
{
 80186ee:	b580      	push	{r7, lr}
 80186f0:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_8);
 80186f2:	2007      	movs	r0, #7
 80186f4:	f7ff ff08 	bl	8018508 <handlerIrqTimer>
}
 80186f8:	bf00      	nop
 80186fa:	bd80      	pop	{r7, pc}

080186fc <TIM8_UP_TIM13_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 13 compartida con el 8
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM8_UP_TIM13_IRQHandler(void)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_8);
 8018700:	2007      	movs	r0, #7
 8018702:	f7ff ff01 	bl	8018508 <handlerIrqTimer>
    handlerIrqTimer(TIMER_13);
 8018706:	200c      	movs	r0, #12
 8018708:	f7ff fefe 	bl	8018508 <handlerIrqTimer>
}
 801870c:	bf00      	nop
 801870e:	bd80      	pop	{r7, pc}

08018710 <TIM1_BRK_TIM9_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 9 compartida con el 1
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_9);
 8018714:	2008      	movs	r0, #8
 8018716:	f7ff fef7 	bl	8018508 <handlerIrqTimer>
}
 801871a:	bf00      	nop
 801871c:	bd80      	pop	{r7, pc}

0801871e <TIM1_TRG_COM_TIM11_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 11 compartida con el 1
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 801871e:	b580      	push	{r7, lr}
 8018720:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_11);
 8018722:	200a      	movs	r0, #10
 8018724:	f7ff fef0 	bl	8018508 <handlerIrqTimer>
}
 8018728:	bf00      	nop
 801872a:	bd80      	pop	{r7, pc}

0801872c <TIM8_BRK_TIM12_IRQHandler>:
**  Descripcion:    Interrupcion general del Timer 12 compartida con el 8
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void TIM8_BRK_TIM12_IRQHandler(void)
{
 801872c:	b580      	push	{r7, lr}
 801872e:	af00      	add	r7, sp, #0
    handlerIrqTimer(TIMER_12);
 8018730:	200b      	movs	r0, #11
 8018732:	f7ff fee9 	bl	8018508 <handlerIrqTimer>
}
 8018736:	bf00      	nop
 8018738:	bd80      	pop	{r7, pc}
	...

0801873c <habilitarRelojTimer>:
**  Descripcion:    Habilita el reloj del timer
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojTimer(numTimer_e numTimer)
{
 801873c:	b480      	push	{r7}
 801873e:	b091      	sub	sp, #68	; 0x44
 8018740:	af00      	add	r7, sp, #0
 8018742:	4603      	mov	r3, r0
 8018744:	71fb      	strb	r3, [r7, #7]
    switch (numTimer) {
 8018746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801874a:	2b0d      	cmp	r3, #13
 801874c:	f200 80d6 	bhi.w	80188fc <habilitarRelojTimer+0x1c0>
 8018750:	a201      	add	r2, pc, #4	; (adr r2, 8018758 <habilitarRelojTimer+0x1c>)
 8018752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018756:	bf00      	nop
 8018758:	08018791 	.word	0x08018791
 801875c:	080187ab 	.word	0x080187ab
 8018760:	080187c5 	.word	0x080187c5
 8018764:	080187df 	.word	0x080187df
 8018768:	080187f9 	.word	0x080187f9
 801876c:	08018813 	.word	0x08018813
 8018770:	0801882d 	.word	0x0801882d
 8018774:	08018847 	.word	0x08018847
 8018778:	08018861 	.word	0x08018861
 801877c:	0801887b 	.word	0x0801887b
 8018780:	08018895 	.word	0x08018895
 8018784:	080188af 	.word	0x080188af
 8018788:	080188c9 	.word	0x080188c9
 801878c:	080188e3 	.word	0x080188e3
        case TIMER_1:
        	__HAL_RCC_TIM1_CLK_ENABLE();
 8018790:	4b5e      	ldr	r3, [pc, #376]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018794:	4a5d      	ldr	r2, [pc, #372]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018796:	f043 0301 	orr.w	r3, r3, #1
 801879a:	6453      	str	r3, [r2, #68]	; 0x44
 801879c:	4b5b      	ldr	r3, [pc, #364]	; (801890c <habilitarRelojTimer+0x1d0>)
 801879e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187a0:	f003 0301 	and.w	r3, r3, #1
 80187a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        	break;
 80187a8:	e0a9      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_2:
        	__HAL_RCC_TIM2_CLK_ENABLE();
 80187aa:	4b58      	ldr	r3, [pc, #352]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ae:	4a57      	ldr	r2, [pc, #348]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187b0:	f043 0301 	orr.w	r3, r3, #1
 80187b4:	6413      	str	r3, [r2, #64]	; 0x40
 80187b6:	4b55      	ldr	r3, [pc, #340]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ba:	f003 0301 	and.w	r3, r3, #1
 80187be:	63bb      	str	r3, [r7, #56]	; 0x38
 80187c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        	break;
 80187c2:	e09c      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_3:
        	__HAL_RCC_TIM3_CLK_ENABLE();
 80187c4:	4b51      	ldr	r3, [pc, #324]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187c8:	4a50      	ldr	r2, [pc, #320]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187ca:	f043 0302 	orr.w	r3, r3, #2
 80187ce:	6413      	str	r3, [r2, #64]	; 0x40
 80187d0:	4b4e      	ldr	r3, [pc, #312]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187d4:	f003 0302 	and.w	r3, r3, #2
 80187d8:	637b      	str	r3, [r7, #52]	; 0x34
 80187da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        	break;
 80187dc:	e08f      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_4:
        	__HAL_RCC_TIM4_CLK_ENABLE();
 80187de:	4b4b      	ldr	r3, [pc, #300]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187e2:	4a4a      	ldr	r2, [pc, #296]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187e4:	f043 0304 	orr.w	r3, r3, #4
 80187e8:	6413      	str	r3, [r2, #64]	; 0x40
 80187ea:	4b48      	ldr	r3, [pc, #288]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ee:	f003 0304 	and.w	r3, r3, #4
 80187f2:	633b      	str	r3, [r7, #48]	; 0x30
 80187f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        	break;
 80187f6:	e082      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_5:
            __HAL_RCC_TIM5_CLK_ENABLE();
 80187f8:	4b44      	ldr	r3, [pc, #272]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187fc:	4a43      	ldr	r2, [pc, #268]	; (801890c <habilitarRelojTimer+0x1d0>)
 80187fe:	f043 0308 	orr.w	r3, r3, #8
 8018802:	6413      	str	r3, [r2, #64]	; 0x40
 8018804:	4b41      	ldr	r3, [pc, #260]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018808:	f003 0308 	and.w	r3, r3, #8
 801880c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        	break;
 8018810:	e075      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_6:
            __HAL_RCC_TIM6_CLK_ENABLE();
 8018812:	4b3e      	ldr	r3, [pc, #248]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018816:	4a3d      	ldr	r2, [pc, #244]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018818:	f043 0310 	orr.w	r3, r3, #16
 801881c:	6413      	str	r3, [r2, #64]	; 0x40
 801881e:	4b3b      	ldr	r3, [pc, #236]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018822:	f003 0310 	and.w	r3, r3, #16
 8018826:	62bb      	str	r3, [r7, #40]	; 0x28
 8018828:	6abb      	ldr	r3, [r7, #40]	; 0x28
        	break;
 801882a:	e068      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_7:
        	__HAL_RCC_TIM7_CLK_ENABLE();
 801882c:	4b37      	ldr	r3, [pc, #220]	; (801890c <habilitarRelojTimer+0x1d0>)
 801882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018830:	4a36      	ldr	r2, [pc, #216]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018832:	f043 0320 	orr.w	r3, r3, #32
 8018836:	6413      	str	r3, [r2, #64]	; 0x40
 8018838:	4b34      	ldr	r3, [pc, #208]	; (801890c <habilitarRelojTimer+0x1d0>)
 801883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801883c:	f003 0320 	and.w	r3, r3, #32
 8018840:	627b      	str	r3, [r7, #36]	; 0x24
 8018842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        	break;
 8018844:	e05b      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_8:
        	__HAL_RCC_TIM8_CLK_ENABLE();
 8018846:	4b31      	ldr	r3, [pc, #196]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801884a:	4a30      	ldr	r2, [pc, #192]	; (801890c <habilitarRelojTimer+0x1d0>)
 801884c:	f043 0302 	orr.w	r3, r3, #2
 8018850:	6453      	str	r3, [r2, #68]	; 0x44
 8018852:	4b2e      	ldr	r3, [pc, #184]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018856:	f003 0302 	and.w	r3, r3, #2
 801885a:	623b      	str	r3, [r7, #32]
 801885c:	6a3b      	ldr	r3, [r7, #32]
        	break;
 801885e:	e04e      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_9:
        	__HAL_RCC_TIM9_CLK_ENABLE();
 8018860:	4b2a      	ldr	r3, [pc, #168]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018864:	4a29      	ldr	r2, [pc, #164]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801886a:	6453      	str	r3, [r2, #68]	; 0x44
 801886c:	4b27      	ldr	r3, [pc, #156]	; (801890c <habilitarRelojTimer+0x1d0>)
 801886e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018874:	61fb      	str	r3, [r7, #28]
 8018876:	69fb      	ldr	r3, [r7, #28]
        	break;
 8018878:	e041      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_10:
        	__HAL_RCC_TIM10_CLK_ENABLE();
 801887a:	4b24      	ldr	r3, [pc, #144]	; (801890c <habilitarRelojTimer+0x1d0>)
 801887c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801887e:	4a23      	ldr	r2, [pc, #140]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018884:	6453      	str	r3, [r2, #68]	; 0x44
 8018886:	4b21      	ldr	r3, [pc, #132]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801888a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801888e:	61bb      	str	r3, [r7, #24]
 8018890:	69bb      	ldr	r3, [r7, #24]
        	break;
 8018892:	e034      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_11:
        	__HAL_RCC_TIM11_CLK_ENABLE();
 8018894:	4b1d      	ldr	r3, [pc, #116]	; (801890c <habilitarRelojTimer+0x1d0>)
 8018896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018898:	4a1c      	ldr	r2, [pc, #112]	; (801890c <habilitarRelojTimer+0x1d0>)
 801889a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801889e:	6453      	str	r3, [r2, #68]	; 0x44
 80188a0:	4b1a      	ldr	r3, [pc, #104]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80188a8:	617b      	str	r3, [r7, #20]
 80188aa:	697b      	ldr	r3, [r7, #20]
        	break;
 80188ac:	e027      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_12:
        	__HAL_RCC_TIM12_CLK_ENABLE();
 80188ae:	4b17      	ldr	r3, [pc, #92]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188b2:	4a16      	ldr	r2, [pc, #88]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188b8:	6413      	str	r3, [r2, #64]	; 0x40
 80188ba:	4b14      	ldr	r3, [pc, #80]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188c2:	613b      	str	r3, [r7, #16]
 80188c4:	693b      	ldr	r3, [r7, #16]
        	break;
 80188c6:	e01a      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_13:
        	__HAL_RCC_TIM13_CLK_ENABLE();
 80188c8:	4b10      	ldr	r3, [pc, #64]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188cc:	4a0f      	ldr	r2, [pc, #60]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188d2:	6413      	str	r3, [r2, #64]	; 0x40
 80188d4:	4b0d      	ldr	r3, [pc, #52]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188dc:	60fb      	str	r3, [r7, #12]
 80188de:	68fb      	ldr	r3, [r7, #12]
        	break;
 80188e0:	e00d      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        case TIMER_14:
        	__HAL_RCC_TIM14_CLK_ENABLE();
 80188e2:	4b0a      	ldr	r3, [pc, #40]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188e6:	4a09      	ldr	r2, [pc, #36]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80188ec:	6413      	str	r3, [r2, #64]	; 0x40
 80188ee:	4b07      	ldr	r3, [pc, #28]	; (801890c <habilitarRelojTimer+0x1d0>)
 80188f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188f6:	60bb      	str	r3, [r7, #8]
 80188f8:	68bb      	ldr	r3, [r7, #8]
        	break;
 80188fa:	e000      	b.n	80188fe <habilitarRelojTimer+0x1c2>

        default:
            break;
 80188fc:	bf00      	nop
    }
}
 80188fe:	bf00      	nop
 8018900:	3744      	adds	r7, #68	; 0x44
 8018902:	46bd      	mov	sp, r7
 8018904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	40023800 	.word	0x40023800

08018910 <numeroTimer>:
**  Descripcion:    Devuelve el numero del timer dado el handler
**  Parametros:     Handler del timer
**  Retorno:        Numero de timer
****************************************************************************************/
numTimer_e numeroTimer(TIM_HandleTypeDef *htim)
{
 8018910:	b480      	push	{r7}
 8018912:	b083      	sub	sp, #12
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4a2f      	ldr	r2, [pc, #188]	; (80189dc <numeroTimer+0xcc>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d101      	bne.n	8018926 <numeroTimer+0x16>
        return TIMER_1;
 8018922:	2300      	movs	r3, #0
 8018924:	e054      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM2)
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801892e:	d101      	bne.n	8018934 <numeroTimer+0x24>
        return TIMER_2;
 8018930:	2301      	movs	r3, #1
 8018932:	e04d      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM3)
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	4a29      	ldr	r2, [pc, #164]	; (80189e0 <numeroTimer+0xd0>)
 801893a:	4293      	cmp	r3, r2
 801893c:	d101      	bne.n	8018942 <numeroTimer+0x32>
        return TIMER_3;
 801893e:	2302      	movs	r3, #2
 8018940:	e046      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM4)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	4a27      	ldr	r2, [pc, #156]	; (80189e4 <numeroTimer+0xd4>)
 8018948:	4293      	cmp	r3, r2
 801894a:	d101      	bne.n	8018950 <numeroTimer+0x40>
        return TIMER_4;
 801894c:	2303      	movs	r3, #3
 801894e:	e03f      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM5)
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a24      	ldr	r2, [pc, #144]	; (80189e8 <numeroTimer+0xd8>)
 8018956:	4293      	cmp	r3, r2
 8018958:	d101      	bne.n	801895e <numeroTimer+0x4e>
        return TIMER_5;
 801895a:	2304      	movs	r3, #4
 801895c:	e038      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM6)
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	4a22      	ldr	r2, [pc, #136]	; (80189ec <numeroTimer+0xdc>)
 8018964:	4293      	cmp	r3, r2
 8018966:	d101      	bne.n	801896c <numeroTimer+0x5c>
        return TIMER_6;
 8018968:	2305      	movs	r3, #5
 801896a:	e031      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM7)
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	4a1f      	ldr	r2, [pc, #124]	; (80189f0 <numeroTimer+0xe0>)
 8018972:	4293      	cmp	r3, r2
 8018974:	d101      	bne.n	801897a <numeroTimer+0x6a>
        return TIMER_7;
 8018976:	2306      	movs	r3, #6
 8018978:	e02a      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM8)
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	4a1d      	ldr	r2, [pc, #116]	; (80189f4 <numeroTimer+0xe4>)
 8018980:	4293      	cmp	r3, r2
 8018982:	d101      	bne.n	8018988 <numeroTimer+0x78>
        return TIMER_8;
 8018984:	2307      	movs	r3, #7
 8018986:	e023      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM9)
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	4a1a      	ldr	r2, [pc, #104]	; (80189f8 <numeroTimer+0xe8>)
 801898e:	4293      	cmp	r3, r2
 8018990:	d101      	bne.n	8018996 <numeroTimer+0x86>
        return TIMER_9;
 8018992:	2308      	movs	r3, #8
 8018994:	e01c      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM10)
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	4a18      	ldr	r2, [pc, #96]	; (80189fc <numeroTimer+0xec>)
 801899c:	4293      	cmp	r3, r2
 801899e:	d101      	bne.n	80189a4 <numeroTimer+0x94>
        return TIMER_10;
 80189a0:	2309      	movs	r3, #9
 80189a2:	e015      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM11)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	4a15      	ldr	r2, [pc, #84]	; (8018a00 <numeroTimer+0xf0>)
 80189aa:	4293      	cmp	r3, r2
 80189ac:	d101      	bne.n	80189b2 <numeroTimer+0xa2>
        return TIMER_11;
 80189ae:	230a      	movs	r3, #10
 80189b0:	e00e      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM12)
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	4a13      	ldr	r2, [pc, #76]	; (8018a04 <numeroTimer+0xf4>)
 80189b8:	4293      	cmp	r3, r2
 80189ba:	d101      	bne.n	80189c0 <numeroTimer+0xb0>
        return TIMER_12;
 80189bc:	230b      	movs	r3, #11
 80189be:	e007      	b.n	80189d0 <numeroTimer+0xc0>

    if (htim->Instance == TIM13)
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	4a10      	ldr	r2, [pc, #64]	; (8018a08 <numeroTimer+0xf8>)
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d101      	bne.n	80189ce <numeroTimer+0xbe>
        return TIMER_13;
 80189ca:	230c      	movs	r3, #12
 80189cc:	e000      	b.n	80189d0 <numeroTimer+0xc0>

    return TIMER_14;
 80189ce:	230d      	movs	r3, #13
}
 80189d0:	4618      	mov	r0, r3
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189da:	4770      	bx	lr
 80189dc:	40010000 	.word	0x40010000
 80189e0:	40000400 	.word	0x40000400
 80189e4:	40000800 	.word	0x40000800
 80189e8:	40000c00 	.word	0x40000c00
 80189ec:	40001000 	.word	0x40001000
 80189f0:	40001400 	.word	0x40001400
 80189f4:	40010400 	.word	0x40010400
 80189f8:	40014000 	.word	0x40014000
 80189fc:	40014400 	.word	0x40014400
 8018a00:	40014800 	.word	0x40014800
 8018a04:	40001800 	.word	0x40001800
 8018a08:	40001c00 	.word	0x40001c00

08018a0c <asignarPinTimer>:
**  Descripcion:    Asigna el hardware del pin
**  Parametros:     Numero del driver, numero de timer, pin del driver
**  Retorno:        True si ok
****************************************************************************************/
bool asignarPinTimer(uint8_t numDriver, numTimer_e numTimer, uint8_t pin)
{
 8018a0c:	b590      	push	{r4, r7, lr}
 8018a0e:	b087      	sub	sp, #28
 8018a10:	af02      	add	r7, sp, #8
 8018a12:	4603      	mov	r3, r0
 8018a14:	71fb      	strb	r3, [r7, #7]
 8018a16:	460b      	mov	r3, r1
 8018a18:	71bb      	strb	r3, [r7, #6]
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	717b      	strb	r3, [r7, #5]
    if (numTimer == TIMER_6 || numTimer == TIMER_7)
 8018a1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a22:	2b05      	cmp	r3, #5
 8018a24:	d003      	beq.n	8018a2e <asignarPinTimer+0x22>
 8018a26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a2a:	2b06      	cmp	r3, #6
 8018a2c:	d101      	bne.n	8018a32 <asignarPinTimer+0x26>
        return true;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	e01b      	b.n	8018a6a <asignarPinTimer+0x5e>

    tim_t *driver = punteroTim(numDriver);
 8018a32:	79fb      	ldrb	r3, [r7, #7]
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7ff f8cd 	bl	8017bd4 <punteroTim>
 8018a3a:	60f8      	str	r0, [r7, #12]

    if (!pinCanalTimer(numTimer, pin, &driver->pin, &driver->canal, &driver->tipoCanal))
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	f103 0209 	add.w	r2, r3, #9
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	1d1c      	adds	r4, r3, #4
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	3308      	adds	r3, #8
 8018a4a:	7979      	ldrb	r1, [r7, #5]
 8018a4c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8018a50:	9300      	str	r3, [sp, #0]
 8018a52:	4623      	mov	r3, r4
 8018a54:	f000 f854 	bl	8018b00 <pinCanalTimer>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	f083 0301 	eor.w	r3, r3, #1
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d001      	beq.n	8018a68 <asignarPinTimer+0x5c>
        return false;
 8018a64:	2300      	movs	r3, #0
 8018a66:	e000      	b.n	8018a6a <asignarPinTimer+0x5e>

    return true;
 8018a68:	2301      	movs	r3, #1
}
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3714      	adds	r7, #20
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd90      	pop	{r4, r7, pc}
	...

08018a74 <asignarHALtimer>:
**  Descripcion:    Asigna el HAL a la estructura del driver
**  Parametros:     Numero de timer
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALtimer(numTimer_e numTimer)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	71fb      	strb	r3, [r7, #7]
    timerHAL_t *driver = punteroTimer(numTimer);
 8018a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7ff f8ba 	bl	8017bfc <punteroTimer>
 8018a88:	60f8      	str	r0, [r7, #12]

    // Asignamos la instancia
    driver->hal.htim.Instance = hardwareTimer[numTimer].reg;
 8018a8a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018a8e:	491b      	ldr	r1, [pc, #108]	; (8018afc <asignarHALtimer+0x88>)
 8018a90:	4613      	mov	r3, r2
 8018a92:	009b      	lsls	r3, r3, #2
 8018a94:	4413      	add	r3, r2
 8018a96:	011b      	lsls	r3, r3, #4
 8018a98:	440b      	add	r3, r1
 8018a9a:	3304      	adds	r3, #4
 8018a9c:	681a      	ldr	r2, [r3, #0]
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	609a      	str	r2, [r3, #8]

    // Asignamos las interrupciones
    driver->hal.IRQ = hardwareTimer[numTimer].IRQ;
 8018aa2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018aa6:	4915      	ldr	r1, [pc, #84]	; (8018afc <asignarHALtimer+0x88>)
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	4413      	add	r3, r2
 8018aae:	011b      	lsls	r3, r3, #4
 8018ab0:	440b      	add	r3, r1
 8018ab2:	334c      	adds	r3, #76	; 0x4c
 8018ab4:	781a      	ldrb	r2, [r3, #0]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    driver->hal.prioridadIRQ = hardwareTimer[numTimer].prioridadIRQ;
 8018abc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018ac0:	490e      	ldr	r1, [pc, #56]	; (8018afc <asignarHALtimer+0x88>)
 8018ac2:	4613      	mov	r3, r2
 8018ac4:	009b      	lsls	r3, r3, #2
 8018ac6:	4413      	add	r3, r2
 8018ac8:	011b      	lsls	r3, r3, #4
 8018aca:	440b      	add	r3, r1
 8018acc:	334d      	adds	r3, #77	; 0x4d
 8018ace:	781a      	ldrb	r2, [r3, #0]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    if (numTimer != TIMER_6 && numTimer != TIMER_7) {
 8018ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ada:	2b05      	cmp	r3, #5
 8018adc:	d009      	beq.n	8018af2 <asignarHALtimer+0x7e>
 8018ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ae2:	2b06      	cmp	r3, #6
 8018ae4:	d005      	beq.n	8018af2 <asignarHALtimer+0x7e>
        // Obtenemos el DMA
        dmaTimer(driver);
 8018ae6:	68f8      	ldr	r0, [r7, #12]
 8018ae8:	f000 f872 	bl	8018bd0 <dmaTimer>
        dmaTimerUP(driver);
 8018aec:	68f8      	ldr	r0, [r7, #12]
 8018aee:	f000 f8e1 	bl	8018cb4 <dmaTimerUP>
    }

    return true;
 8018af2:	2301      	movs	r3, #1
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	3710      	adds	r7, #16
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	0803afb8 	.word	0x0803afb8

08018b00 <pinCanalTimer>:
**  Descripcion:    Encuentra el pin de la tabla de hardware
**  Parametros:     Numero de Timer, pin a buscar, pin del timer, canal, tipo de canal
**  Retorno:        True si OK
****************************************************************************************/
bool pinCanalTimer(numTimer_e numTimer, uint8_t pinBusqueda, pin_t *pinTimer, uint32_t *canal, tipoCanal_e *tipoCanal)
{
 8018b00:	b480      	push	{r7}
 8018b02:	b087      	sub	sp, #28
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	60ba      	str	r2, [r7, #8]
 8018b08:	607b      	str	r3, [r7, #4]
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	73fb      	strb	r3, [r7, #15]
 8018b0e:	460b      	mov	r3, r1
 8018b10:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_TIMER; i++) {
 8018b12:	2300      	movs	r3, #0
 8018b14:	75fb      	strb	r3, [r7, #23]
 8018b16:	e04f      	b.n	8018bb8 <pinCanalTimer+0xb8>
        if (pinBusqueda == hardwareTimer[numTimer].pin[i].pin) {
 8018b18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b1c:	7df9      	ldrb	r1, [r7, #23]
 8018b1e:	482b      	ldr	r0, [pc, #172]	; (8018bcc <pinCanalTimer+0xcc>)
 8018b20:	4613      	mov	r3, r2
 8018b22:	009b      	lsls	r3, r3, #2
 8018b24:	4413      	add	r3, r2
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	440b      	add	r3, r1
 8018b2a:	3302      	adds	r3, #2
 8018b2c:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8018b30:	7bba      	ldrb	r2, [r7, #14]
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d13d      	bne.n	8018bb2 <pinCanalTimer+0xb2>
        	pinTimer->pin = hardwareTimer[numTimer].pin[i].pin;
 8018b36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b3a:	7df9      	ldrb	r1, [r7, #23]
 8018b3c:	4823      	ldr	r0, [pc, #140]	; (8018bcc <pinCanalTimer+0xcc>)
 8018b3e:	4613      	mov	r3, r2
 8018b40:	009b      	lsls	r3, r3, #2
 8018b42:	4413      	add	r3, r2
 8018b44:	009b      	lsls	r3, r3, #2
 8018b46:	440b      	add	r3, r1
 8018b48:	3302      	adds	r3, #2
 8018b4a:	f810 2023 	ldrb.w	r2, [r0, r3, lsl #2]
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	701a      	strb	r2, [r3, #0]
        	pinTimer->af = hardwareTimer[numTimer].pin[i].af;
 8018b52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b56:	7df9      	ldrb	r1, [r7, #23]
 8018b58:	481c      	ldr	r0, [pc, #112]	; (8018bcc <pinCanalTimer+0xcc>)
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	4413      	add	r3, r2
 8018b60:	009b      	lsls	r3, r3, #2
 8018b62:	440b      	add	r3, r1
 8018b64:	3302      	adds	r3, #2
 8018b66:	009b      	lsls	r3, r3, #2
 8018b68:	4403      	add	r3, r0
 8018b6a:	789a      	ldrb	r2, [r3, #2]
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	705a      	strb	r2, [r3, #1]
        	*canal = hardwareTimer[numTimer].pin[i].canal;
 8018b70:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b74:	7df9      	ldrb	r1, [r7, #23]
 8018b76:	4815      	ldr	r0, [pc, #84]	; (8018bcc <pinCanalTimer+0xcc>)
 8018b78:	4613      	mov	r3, r2
 8018b7a:	009b      	lsls	r3, r3, #2
 8018b7c:	4413      	add	r3, r2
 8018b7e:	009b      	lsls	r3, r3, #2
 8018b80:	440b      	add	r3, r1
 8018b82:	3302      	adds	r3, #2
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	4403      	add	r3, r0
 8018b88:	78db      	ldrb	r3, [r3, #3]
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	601a      	str	r2, [r3, #0]
        	*tipoCanal = hardwareTimer[numTimer].pin[i].tipoCanal;
 8018b90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b94:	7df9      	ldrb	r1, [r7, #23]
 8018b96:	480d      	ldr	r0, [pc, #52]	; (8018bcc <pinCanalTimer+0xcc>)
 8018b98:	4613      	mov	r3, r2
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	4413      	add	r3, r2
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	440b      	add	r3, r1
 8018ba2:	3302      	adds	r3, #2
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	4403      	add	r3, r0
 8018ba8:	785a      	ldrb	r2, [r3, #1]
 8018baa:	6a3b      	ldr	r3, [r7, #32]
 8018bac:	701a      	strb	r2, [r3, #0]
            return true;
 8018bae:	2301      	movs	r3, #1
 8018bb0:	e006      	b.n	8018bc0 <pinCanalTimer+0xc0>
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_TIMER; i++) {
 8018bb2:	7dfb      	ldrb	r3, [r7, #23]
 8018bb4:	3301      	adds	r3, #1
 8018bb6:	75fb      	strb	r3, [r7, #23]
 8018bb8:	7dfb      	ldrb	r3, [r7, #23]
 8018bba:	2b10      	cmp	r3, #16
 8018bbc:	d9ac      	bls.n	8018b18 <pinCanalTimer+0x18>
        }
    }

    return false;
 8018bbe:	2300      	movs	r3, #0
}
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	371c      	adds	r7, #28
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bca:	4770      	bx	lr
 8018bcc:	0803afb8 	.word	0x0803afb8

08018bd0 <dmaTimer>:
**  Descripcion:    Obtiene el DMA del Timer
**  Parametros:     Timer
**  Retorno:        Ninguno
****************************************************************************************/
void dmaTimer(timerHAL_t *dTimer)
{
 8018bd0:	b480      	push	{r7}
 8018bd2:	b085      	sub	sp, #20
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_CANALES_POR_TIMER; i++) {
 8018bd8:	2300      	movs	r3, #0
 8018bda:	73fb      	strb	r3, [r7, #15]
 8018bdc:	e05d      	b.n	8018c9a <dmaTimer+0xca>
        uint32_t channel = i << 2;
 8018bde:	7bfb      	ldrb	r3, [r7, #15]
 8018be0:	009b      	lsls	r3, r3, #2
 8018be2:	60bb      	str	r3, [r7, #8]

        for (uint8_t j = 0; j < NUM_CANALES_DMA_TIMER; j++) {
 8018be4:	2300      	movs	r3, #0
 8018be6:	73bb      	strb	r3, [r7, #14]
 8018be8:	e051      	b.n	8018c8e <dmaTimer+0xbe>
            if (hardwareDMAcanalTimer[j].tim == dTimer->hal.htim.Instance && hardwareDMAcanalTimer[j].canal == channel) {
 8018bea:	7bba      	ldrb	r2, [r7, #14]
 8018bec:	4930      	ldr	r1, [pc, #192]	; (8018cb0 <dmaTimer+0xe0>)
 8018bee:	4613      	mov	r3, r2
 8018bf0:	009b      	lsls	r3, r3, #2
 8018bf2:	4413      	add	r3, r2
 8018bf4:	009b      	lsls	r3, r3, #2
 8018bf6:	440b      	add	r3, r1
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	689b      	ldr	r3, [r3, #8]
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d142      	bne.n	8018c88 <dmaTimer+0xb8>
 8018c02:	7bba      	ldrb	r2, [r7, #14]
 8018c04:	492a      	ldr	r1, [pc, #168]	; (8018cb0 <dmaTimer+0xe0>)
 8018c06:	4613      	mov	r3, r2
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	4413      	add	r3, r2
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	440b      	add	r3, r1
 8018c10:	3304      	adds	r3, #4
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	68ba      	ldr	r2, [r7, #8]
 8018c16:	429a      	cmp	r2, r3
 8018c18:	d136      	bne.n	8018c88 <dmaTimer+0xb8>
        	    dTimer->halTimDMA[i].DMAy_Streamx = hardwareDMAcanalTimer[j].DMAy_Streamx;
 8018c1a:	7bb9      	ldrb	r1, [r7, #14]
 8018c1c:	7bfa      	ldrb	r2, [r7, #15]
 8018c1e:	4824      	ldr	r0, [pc, #144]	; (8018cb0 <dmaTimer+0xe0>)
 8018c20:	460b      	mov	r3, r1
 8018c22:	009b      	lsls	r3, r3, #2
 8018c24:	440b      	add	r3, r1
 8018c26:	009b      	lsls	r3, r3, #2
 8018c28:	4403      	add	r3, r0
 8018c2a:	3308      	adds	r3, #8
 8018c2c:	6819      	ldr	r1, [r3, #0]
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	4613      	mov	r3, r2
 8018c32:	005b      	lsls	r3, r3, #1
 8018c34:	4413      	add	r3, r2
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	4403      	add	r3, r0
 8018c3a:	334c      	adds	r3, #76	; 0x4c
 8018c3c:	6019      	str	r1, [r3, #0]
        	    dTimer->halTimDMA[i].canalDMA = hardwareDMAcanalTimer[j].canalDMA;
 8018c3e:	7bb9      	ldrb	r1, [r7, #14]
 8018c40:	7bfa      	ldrb	r2, [r7, #15]
 8018c42:	481b      	ldr	r0, [pc, #108]	; (8018cb0 <dmaTimer+0xe0>)
 8018c44:	460b      	mov	r3, r1
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	440b      	add	r3, r1
 8018c4a:	009b      	lsls	r3, r3, #2
 8018c4c:	4403      	add	r3, r0
 8018c4e:	330c      	adds	r3, #12
 8018c50:	6819      	ldr	r1, [r3, #0]
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	4613      	mov	r3, r2
 8018c56:	005b      	lsls	r3, r3, #1
 8018c58:	4413      	add	r3, r2
 8018c5a:	009b      	lsls	r3, r3, #2
 8018c5c:	4403      	add	r3, r0
 8018c5e:	3350      	adds	r3, #80	; 0x50
 8018c60:	6019      	str	r1, [r3, #0]
        	    dTimer->halTimDMA[i].dmaTimIrqHandler = hardwareDMAcanalTimer[j].dmaTimIrqHandler;
 8018c62:	7bb9      	ldrb	r1, [r7, #14]
 8018c64:	7bfa      	ldrb	r2, [r7, #15]
 8018c66:	4812      	ldr	r0, [pc, #72]	; (8018cb0 <dmaTimer+0xe0>)
 8018c68:	460b      	mov	r3, r1
 8018c6a:	009b      	lsls	r3, r3, #2
 8018c6c:	440b      	add	r3, r1
 8018c6e:	009b      	lsls	r3, r3, #2
 8018c70:	4403      	add	r3, r0
 8018c72:	3310      	adds	r3, #16
 8018c74:	7818      	ldrb	r0, [r3, #0]
 8018c76:	6879      	ldr	r1, [r7, #4]
 8018c78:	4613      	mov	r3, r2
 8018c7a:	005b      	lsls	r3, r3, #1
 8018c7c:	4413      	add	r3, r2
 8018c7e:	009b      	lsls	r3, r3, #2
 8018c80:	440b      	add	r3, r1
 8018c82:	3354      	adds	r3, #84	; 0x54
 8018c84:	4602      	mov	r2, r0
 8018c86:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < NUM_CANALES_DMA_TIMER; j++) {
 8018c88:	7bbb      	ldrb	r3, [r7, #14]
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	73bb      	strb	r3, [r7, #14]
 8018c8e:	7bbb      	ldrb	r3, [r7, #14]
 8018c90:	2b16      	cmp	r3, #22
 8018c92:	d9aa      	bls.n	8018bea <dmaTimer+0x1a>
    for (uint8_t i = 0; i < NUM_CANALES_POR_TIMER; i++) {
 8018c94:	7bfb      	ldrb	r3, [r7, #15]
 8018c96:	3301      	adds	r3, #1
 8018c98:	73fb      	strb	r3, [r7, #15]
 8018c9a:	7bfb      	ldrb	r3, [r7, #15]
 8018c9c:	2b03      	cmp	r3, #3
 8018c9e:	d99e      	bls.n	8018bde <dmaTimer+0xe>
            }
        }
    }
}
 8018ca0:	bf00      	nop
 8018ca2:	bf00      	nop
 8018ca4:	3714      	adds	r7, #20
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cac:	4770      	bx	lr
 8018cae:	bf00      	nop
 8018cb0:	0803b418 	.word	0x0803b418

08018cb4 <dmaTimerUP>:
**  Descripcion:    Obtiene el DMA del Timer UP
**  Parametros:     Timer
**  Retorno:        Ninguno
****************************************************************************************/
void dmaTimerUP(timerHAL_t *dTimer)
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	b085      	sub	sp, #20
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_TIMER_UP; i++) {
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	73fb      	strb	r3, [r7, #15]
 8018cc0:	e025      	b.n	8018d0e <dmaTimerUP+0x5a>
        if (hardwareDMAtimerUP[i].tim == dTimer->hal.htim.Instance) {
 8018cc2:	7bfb      	ldrb	r3, [r7, #15]
 8018cc4:	4a17      	ldr	r2, [pc, #92]	; (8018d24 <dmaTimerUP+0x70>)
 8018cc6:	011b      	lsls	r3, r3, #4
 8018cc8:	4413      	add	r3, r2
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	689b      	ldr	r3, [r3, #8]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d119      	bne.n	8018d08 <dmaTimerUP+0x54>
        	dTimer->halTimUPdma.DMAy_Streamx = hardwareDMAtimerUP[i].DMAy_Streamx;
 8018cd4:	7bfb      	ldrb	r3, [r7, #15]
 8018cd6:	4a13      	ldr	r2, [pc, #76]	; (8018d24 <dmaTimerUP+0x70>)
 8018cd8:	011b      	lsls	r3, r3, #4
 8018cda:	4413      	add	r3, r2
 8018cdc:	3304      	adds	r3, #4
 8018cde:	681a      	ldr	r2, [r3, #0]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	67da      	str	r2, [r3, #124]	; 0x7c
        	dTimer->halTimUPdma.canalDMA = hardwareDMAtimerUP[i].canalDMA;
 8018ce4:	7bfb      	ldrb	r3, [r7, #15]
 8018ce6:	4a0f      	ldr	r2, [pc, #60]	; (8018d24 <dmaTimerUP+0x70>)
 8018ce8:	011b      	lsls	r3, r3, #4
 8018cea:	4413      	add	r3, r2
 8018cec:	3308      	adds	r3, #8
 8018cee:	681a      	ldr	r2, [r3, #0]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        	dTimer->halTimUPdma.dmaTimIrqHandler = hardwareDMAtimerUP[i].dmaTimUPirqHandler;
 8018cf6:	7bfb      	ldrb	r3, [r7, #15]
 8018cf8:	4a0a      	ldr	r2, [pc, #40]	; (8018d24 <dmaTimerUP+0x70>)
 8018cfa:	011b      	lsls	r3, r3, #4
 8018cfc:	4413      	add	r3, r2
 8018cfe:	330c      	adds	r3, #12
 8018d00:	781a      	ldrb	r2, [r3, #0]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    for (uint8_t i = 0; i < NUM_TIMER_UP; i++) {
 8018d08:	7bfb      	ldrb	r3, [r7, #15]
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	73fb      	strb	r3, [r7, #15]
 8018d0e:	7bfb      	ldrb	r3, [r7, #15]
 8018d10:	2b07      	cmp	r3, #7
 8018d12:	d9d6      	bls.n	8018cc2 <dmaTimerUP+0xe>
        }
    }
}
 8018d14:	bf00      	nop
 8018d16:	bf00      	nop
 8018d18:	3714      	adds	r7, #20
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d20:	4770      	bx	lr
 8018d22:	bf00      	nop
 8018d24:	0803b5e4 	.word	0x0803b5e4

08018d28 <punteroUART>:
**  Descripcion:    Devuelve el puntero a una UART seleccionada
**  Parametros:     Dispositivo a devolver
**  Retorno:        Puntero
****************************************************************************************/
uart_t *punteroUART(numUART_e numUART)
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b083      	sub	sp, #12
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	4603      	mov	r3, r0
 8018d30:	71fb      	strb	r3, [r7, #7]
    return &uart[numUART];
 8018d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d36:	f44f 62ec 	mov.w	r2, #1888	; 0x760
 8018d3a:	fb02 f303 	mul.w	r3, r2, r3
 8018d3e:	4a04      	ldr	r2, [pc, #16]	; (8018d50 <punteroUART+0x28>)
 8018d40:	4413      	add	r3, r2
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	370c      	adds	r7, #12
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	20004458 	.word	0x20004458

08018d54 <iniciarUART>:
**  Descripcion:    Inicia la UART
**  Parametros:     Dispositivo a iniciar, configuracion de la UART, callback de recepcion
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarUART(numUART_e numUART, configIniUART_t configInicial, uartRxCallback rxCall)
{
 8018d54:	b590      	push	{r4, r7, lr}
 8018d56:	b087      	sub	sp, #28
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	1d38      	adds	r0, r7, #4
 8018d5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8018d62:	603b      	str	r3, [r7, #0]
 8018d64:	4623      	mov	r3, r4
 8018d66:	73fb      	strb	r3, [r7, #15]
    if (numUART == UART_NINGUNO) {
 8018d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d70:	d104      	bne.n	8018d7c <iniciarUART+0x28>
#ifdef DEBUG
        printf("Fallo en la definicion de la UART\n");
 8018d72:	4824      	ldr	r0, [pc, #144]	; (8018e04 <iniciarUART+0xb0>)
 8018d74:	f01d f844 	bl	8035e00 <puts>
#endif
        return false;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	e03f      	b.n	8018dfc <iniciarUART+0xa8>
    }

    uart_t *driver = &uart[numUART];
 8018d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d80:	f44f 62ec 	mov.w	r2, #1888	; 0x760
 8018d84:	fb02 f303 	mul.w	r3, r2, r3
 8018d88:	4a1f      	ldr	r2, [pc, #124]	; (8018e08 <iniciarUART+0xb4>)
 8018d8a:	4413      	add	r3, r2
 8018d8c:	617b      	str	r3, [r7, #20]

	memset(driver, 0, sizeof(*driver));
 8018d8e:	f44f 62ec 	mov.w	r2, #1888	; 0x760
 8018d92:	2100      	movs	r1, #0
 8018d94:	6978      	ldr	r0, [r7, #20]
 8018d96:	f01c fa83 	bl	80352a0 <memset>
    resetearContadorErrorUART(numUART);
 8018d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f000 f8ae 	bl	8018f00 <resetearContadorErrorUART>
    driver->iniciado = false;
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	2200      	movs	r2, #0
 8018da8:	701a      	strb	r2, [r3, #0]
    driver->rxCallback = rxCall;
 8018daa:	697b      	ldr	r3, [r7, #20]
 8018dac:	683a      	ldr	r2, [r7, #0]
 8018dae:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    // Cargamos la configuracion inicial
    configuracionUART[numUART] = configInicial;
 8018db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018db6:	4a15      	ldr	r2, [pc, #84]	; (8018e0c <iniciarUART+0xb8>)
 8018db8:	00db      	lsls	r3, r3, #3
 8018dba:	4413      	add	r3, r2
 8018dbc:	1d3a      	adds	r2, r7, #4
 8018dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018dc2:	e883 0003 	stmia.w	r3, {r0, r1}

    if (iniciarDriverUART(numUART, configuracionUART[numUART])) {
 8018dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dca:	4a10      	ldr	r2, [pc, #64]	; (8018e0c <iniciarUART+0xb8>)
 8018dcc:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8018dd0:	00db      	lsls	r3, r3, #3
 8018dd2:	4413      	add	r3, r2
 8018dd4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018dd8:	f000 f8ac 	bl	8018f34 <iniciarDriverUART>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d004      	beq.n	8018dec <iniciarUART+0x98>
    	driver->iniciado = true;
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	2201      	movs	r2, #1
 8018de6:	701a      	strb	r2, [r3, #0]
        return true;
 8018de8:	2301      	movs	r3, #1
 8018dea:	e007      	b.n	8018dfc <iniciarUART+0xa8>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion de la UART %u\n", numUART + 1);
 8018dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018df0:	3301      	adds	r3, #1
 8018df2:	4619      	mov	r1, r3
 8018df4:	4806      	ldr	r0, [pc, #24]	; (8018e10 <iniciarUART+0xbc>)
 8018df6:	f01c ff7d 	bl	8035cf4 <iprintf>
#endif
        return false;
 8018dfa:	2300      	movs	r3, #0
    }
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	371c      	adds	r7, #28
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd90      	pop	{r4, r7, pc}
 8018e04:	0803a714 	.word	0x0803a714
 8018e08:	20004458 	.word	0x20004458
 8018e0c:	20007f58 	.word	0x20007f58
 8018e10:	0803a738 	.word	0x0803a738

08018e14 <uartIniciada>:
**  Descripcion:    Comprueba si la UART esta iniciada
**  Parametros:     Numero de UART
**  Retorno:        True si iniciada
****************************************************************************************/
bool uartIniciada(numUART_e numUART)
{
 8018e14:	b480      	push	{r7}
 8018e16:	b083      	sub	sp, #12
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	71fb      	strb	r3, [r7, #7]
    return uart[numUART].iniciado;
 8018e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e22:	4a06      	ldr	r2, [pc, #24]	; (8018e3c <uartIniciada+0x28>)
 8018e24:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8018e28:	fb01 f303 	mul.w	r3, r1, r3
 8018e2c:	4413      	add	r3, r2
 8018e2e:	781b      	ldrb	r3, [r3, #0]
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	370c      	adds	r7, #12
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr
 8018e3c:	20004458 	.word	0x20004458

08018e40 <ajustarBaudRateUART>:
**  Descripcion:    Asigna el Baudrate
**  Parametros:     Dispositivo, baudrate
**  Retorno:        Ninguno
****************************************************************************************/
bool ajustarBaudRateUART(numUART_e numUART, uint32_t baudrate)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b084      	sub	sp, #16
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	4603      	mov	r3, r0
 8018e48:	6039      	str	r1, [r7, #0]
 8018e4a:	71fb      	strb	r3, [r7, #7]
	uart_t *driver = &uart[numUART];
 8018e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e50:	f44f 62ec 	mov.w	r2, #1888	; 0x760
 8018e54:	fb02 f303 	mul.w	r3, r2, r3
 8018e58:	4a14      	ldr	r2, [pc, #80]	; (8018eac <ajustarBaudRateUART+0x6c>)
 8018e5a:	4413      	add	r3, r2
 8018e5c:	60fb      	str	r3, [r7, #12]

    // Resetea el Buffer
    driver->cabezaRxBuffer = 0;
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2200      	movs	r2, #0
 8018e62:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
    driver->colaRxBuffer = 0;
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	2200      	movs	r2, #0
 8018e6a:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
    driver->cabezaTxBuffer = 0;
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2200      	movs	r2, #0
 8018e72:	f8a3 2758 	strh.w	r2, [r3, #1880]	; 0x758
    driver->colaTxBuffer = 0;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	f8a3 275a 	strh.w	r2, [r3, #1882]	; 0x75a

    configuracionUART[numUART].baudrate = baudrate;
 8018e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e82:	490b      	ldr	r1, [pc, #44]	; (8018eb0 <ajustarBaudRateUART+0x70>)
 8018e84:	683a      	ldr	r2, [r7, #0]
 8018e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    return iniciarDriverUART(numUART, configuracionUART[numUART]);
 8018e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e8e:	4a08      	ldr	r2, [pc, #32]	; (8018eb0 <ajustarBaudRateUART+0x70>)
 8018e90:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8018e94:	00db      	lsls	r3, r3, #3
 8018e96:	4413      	add	r3, r2
 8018e98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018e9c:	f000 f84a 	bl	8018f34 <iniciarDriverUART>
 8018ea0:	4603      	mov	r3, r0
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	20004458 	.word	0x20004458
 8018eb0:	20007f58 	.word	0x20007f58

08018eb4 <errorCallbackUART>:
**  Descripcion:    Incrementa el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void errorCallbackUART(numUART_e numUART)
{
 8018eb4:	b480      	push	{r7}
 8018eb6:	b083      	sub	sp, #12
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	4603      	mov	r3, r0
 8018ebc:	71fb      	strb	r3, [r7, #7]
    uart[numUART].numErrores++;
 8018ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ec2:	490e      	ldr	r1, [pc, #56]	; (8018efc <errorCallbackUART+0x48>)
 8018ec4:	f44f 62ec 	mov.w	r2, #1888	; 0x760
 8018ec8:	fb03 f202 	mul.w	r2, r3, r2
 8018ecc:	440a      	add	r2, r1
 8018ece:	f202 725c 	addw	r2, r2, #1884	; 0x75c
 8018ed2:	8812      	ldrh	r2, [r2, #0]
 8018ed4:	b292      	uxth	r2, r2
 8018ed6:	3201      	adds	r2, #1
 8018ed8:	b290      	uxth	r0, r2
 8018eda:	4a08      	ldr	r2, [pc, #32]	; (8018efc <errorCallbackUART+0x48>)
 8018edc:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8018ee0:	fb01 f303 	mul.w	r3, r1, r3
 8018ee4:	4413      	add	r3, r2
 8018ee6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8018eea:	4602      	mov	r2, r0
 8018eec:	801a      	strh	r2, [r3, #0]
}
 8018eee:	bf00      	nop
 8018ef0:	370c      	adds	r7, #12
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ef8:	4770      	bx	lr
 8018efa:	bf00      	nop
 8018efc:	20004458 	.word	0x20004458

08018f00 <resetearContadorErrorUART>:
**  Descripcion:    Resetea el contador de errores
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void resetearContadorErrorUART(numUART_e numUART)
{
 8018f00:	b480      	push	{r7}
 8018f02:	b083      	sub	sp, #12
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	4603      	mov	r3, r0
 8018f08:	71fb      	strb	r3, [r7, #7]
    uart[numUART].numErrores = 0;
 8018f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f0e:	4a08      	ldr	r2, [pc, #32]	; (8018f30 <resetearContadorErrorUART+0x30>)
 8018f10:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8018f14:	fb01 f303 	mul.w	r3, r1, r3
 8018f18:	4413      	add	r3, r2
 8018f1a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8018f1e:	2200      	movs	r2, #0
 8018f20:	801a      	strh	r2, [r3, #0]
}
 8018f22:	bf00      	nop
 8018f24:	370c      	adds	r7, #12
 8018f26:	46bd      	mov	sp, r7
 8018f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2c:	4770      	bx	lr
 8018f2e:	bf00      	nop
 8018f30:	20004458 	.word	0x20004458

08018f34 <iniciarDriverUART>:
**  Descripcion:    Inicia el dispositivo UART
**  Parametros:     Dispositivo a iniciar, configuracion de la UART
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverUART(numUART_e numUART, configIniUART_t configInicial)
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b086      	sub	sp, #24
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	1d3b      	adds	r3, r7, #4
 8018f3c:	e883 0006 	stmia.w	r3, {r1, r2}
 8018f40:	4603      	mov	r3, r0
 8018f42:	73fb      	strb	r3, [r7, #15]
    uart_t *driver = punteroUART(numUART);
 8018f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7ff feed 	bl	8018d28 <punteroUART>
 8018f4e:	6178      	str	r0, [r7, #20]

    if (!driver->hal.asignado) {
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	791b      	ldrb	r3, [r3, #4]
 8018f54:	f083 0301 	eor.w	r3, r3, #1
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d02a      	beq.n	8018fb4 <iniciarDriverUART+0x80>
        if (!asignarHALuart(numUART))
 8018f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f62:	4618      	mov	r0, r3
 8018f64:	f000 fb88 	bl	8019678 <asignarHALuart>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	f083 0301 	eor.w	r3, r3, #1
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d001      	beq.n	8018f78 <iniciarDriverUART+0x44>
            return false;
 8018f74:	2300      	movs	r3, #0
 8018f76:	e09e      	b.n	80190b6 <iniciarDriverUART+0x182>
	    else {
	        habilitarRelojUART(numUART);
 8018f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f000 fad9 	bl	8019534 <habilitarRelojUART>

	        // Configura los pines
	        configurarIO(driver->hal.pinRx.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP), driver->hal.pinRx.af);
 8018f82:	697b      	ldr	r3, [r7, #20]
 8018f84:	f893 014c 	ldrb.w	r0, [r3, #332]	; 0x14c
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8018f8e:	461a      	mov	r2, r3
 8018f90:	f640 2102 	movw	r1, #2562	; 0xa02
 8018f94:	f7fd fa0c 	bl	80163b0 <configurarIO>
	        configurarIO(driver->hal.pinTx.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP), driver->hal.pinTx.af);
 8018f98:	697b      	ldr	r3, [r7, #20]
 8018f9a:	f893 014a 	ldrb.w	r0, [r3, #330]	; 0x14a
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	f640 2102 	movw	r1, #2562	; 0xa02
 8018faa:	f7fd fa01 	bl	80163b0 <configurarIO>

	        driver->hal.asignado = true;
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	2201      	movs	r2, #1
 8018fb2:	711a      	strb	r2, [r3, #4]
	    }
    }

    HAL_NVIC_DisableIRQ(driver->hal.IRQ);
 8018fb4:	697b      	ldr	r3, [r7, #20]
 8018fb6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8018fba:	b25b      	sxtb	r3, r3
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f010 ff8b 	bl	8029ed8 <HAL_NVIC_DisableIRQ>

    // Configuramos el dispositivo
    driver->hal.huart.Init.BaudRate = configInicial.baudrate;
 8018fc2:	687a      	ldr	r2, [r7, #4]
 8018fc4:	697b      	ldr	r3, [r7, #20]
 8018fc6:	60da      	str	r2, [r3, #12]
    if (configInicial.paridad == UART_PARIDAD_EVEN || configInicial.lWord == UART_LONGITUD_WORD_9)
 8018fc8:	7a7b      	ldrb	r3, [r7, #9]
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d002      	beq.n	8018fd4 <iniciarDriverUART+0xa0>
 8018fce:	7a3b      	ldrb	r3, [r7, #8]
 8018fd0:	2b02      	cmp	r3, #2
 8018fd2:	d104      	bne.n	8018fde <iniciarDriverUART+0xaa>
    	driver->hal.huart.Init.WordLength = UART_WORDLENGTH_9B;
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018fda:	611a      	str	r2, [r3, #16]
 8018fdc:	e00a      	b.n	8018ff4 <iniciarDriverUART+0xc0>
    else if (configInicial.lWord == UART_LONGITUD_WORD_8)
 8018fde:	7a3b      	ldrb	r3, [r7, #8]
 8018fe0:	2b01      	cmp	r3, #1
 8018fe2:	d103      	bne.n	8018fec <iniciarDriverUART+0xb8>
    	driver->hal.huart.Init.WordLength = UART_WORDLENGTH_8B;
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	611a      	str	r2, [r3, #16]
 8018fea:	e003      	b.n	8018ff4 <iniciarDriverUART+0xc0>
    else
    	driver->hal.huart.Init.WordLength = UART_WORDLENGTH_7B;
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ff2:	611a      	str	r2, [r3, #16]

    if (configInicial.stop == UART_BIT_STOP_1)
 8018ff4:	7abb      	ldrb	r3, [r7, #10]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d103      	bne.n	8019002 <iniciarDriverUART+0xce>
    	driver->hal.huart.Init.StopBits = UART_STOPBITS_1;
 8018ffa:	697b      	ldr	r3, [r7, #20]
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	615a      	str	r2, [r3, #20]
 8019000:	e003      	b.n	801900a <iniciarDriverUART+0xd6>
    else
    	driver->hal.huart.Init.StopBits = UART_STOPBITS_2;
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019008:	615a      	str	r2, [r3, #20]

    if (configInicial.paridad == UART_NO_PARIDAD)
 801900a:	7a7b      	ldrb	r3, [r7, #9]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d103      	bne.n	8019018 <iniciarDriverUART+0xe4>
    	driver->hal.huart.Init.Parity = UART_PARITY_NONE;
 8019010:	697b      	ldr	r3, [r7, #20]
 8019012:	2200      	movs	r2, #0
 8019014:	619a      	str	r2, [r3, #24]
 8019016:	e00b      	b.n	8019030 <iniciarDriverUART+0xfc>
    else if (configInicial.paridad == UART_PARIDAD_EVEN)
 8019018:	7a7b      	ldrb	r3, [r7, #9]
 801901a:	2b01      	cmp	r3, #1
 801901c:	d104      	bne.n	8019028 <iniciarDriverUART+0xf4>
    	driver->hal.huart.Init.Parity = UART_PARITY_EVEN;
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019024:	619a      	str	r2, [r3, #24]
 8019026:	e003      	b.n	8019030 <iniciarDriverUART+0xfc>
    else
    	driver->hal.huart.Init.Parity = UART_PARITY_ODD;
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801902e:	619a      	str	r2, [r3, #24]


    driver->hal.huart.Init.Mode = UART_MODE_TX_RX;
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	220c      	movs	r2, #12
 8019034:	61da      	str	r2, [r3, #28]
    driver->hal.huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019036:	697b      	ldr	r3, [r7, #20]
 8019038:	2200      	movs	r2, #0
 801903a:	621a      	str	r2, [r3, #32]
    driver->hal.huart.Init.OverSampling = UART_OVERSAMPLING_16;
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	2200      	movs	r2, #0
 8019040:	625a      	str	r2, [r3, #36]	; 0x24
    driver->hal.huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	2200      	movs	r2, #0
 8019046:	629a      	str	r2, [r3, #40]	; 0x28


    if (HAL_UART_Init(&driver->hal.huart) != HAL_OK)
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	3308      	adds	r3, #8
 801904c:	4618      	mov	r0, r3
 801904e:	f017 feea 	bl	8030e26 <HAL_UART_Init>
 8019052:	4603      	mov	r3, r0
 8019054:	2b00      	cmp	r3, #0
 8019056:	d001      	beq.n	801905c <iniciarDriverUART+0x128>
        return false;
 8019058:	2300      	movs	r3, #0
 801905a:	e02c      	b.n	80190b6 <iniciarDriverUART+0x182>


    HAL_NVIC_SetPriority(driver->hal.IRQ, PRIORIDAD_BASE_NVIC(driver->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(driver->hal.prioridadIRQ));
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8019062:	b258      	sxtb	r0, r3
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 801906a:	099b      	lsrs	r3, r3, #6
 801906c:	b2db      	uxtb	r3, r3
 801906e:	2200      	movs	r2, #0
 8019070:	4619      	mov	r1, r3
 8019072:	f010 ff07 	bl	8029e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(driver->hal.IRQ);
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 801907c:	b25b      	sxtb	r3, r3
 801907e:	4618      	mov	r0, r3
 8019080:	f010 ff1c 	bl	8029ebc <HAL_NVIC_EnableIRQ>

    // Habilitamos la recepcion de datos

    // Habilitamos la interrupcion por error de paridad
    __HAL_UART_ENABLE_IT(&driver->hal.huart, UART_IT_PE);
 8019084:	697b      	ldr	r3, [r7, #20]
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	681a      	ldr	r2, [r3, #0]
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	689b      	ldr	r3, [r3, #8]
 801908e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019092:	601a      	str	r2, [r3, #0]

    // Habilitamos la interrupcion por error de: (Frame error, noise error, overrun error)
    __HAL_UART_ENABLE_IT(&driver->hal.huart, UART_IT_ERR);
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	689b      	ldr	r3, [r3, #8]
 8019098:	689a      	ldr	r2, [r3, #8]
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	689b      	ldr	r3, [r3, #8]
 801909e:	f042 0201 	orr.w	r2, r2, #1
 80190a2:	609a      	str	r2, [r3, #8]

    // Habilitamos la interrupcion de registro de datos recibidos no vacio
    __HAL_UART_ENABLE_IT(&driver->hal.huart, UART_IT_RXNE);
 80190a4:	697b      	ldr	r3, [r7, #20]
 80190a6:	689b      	ldr	r3, [r3, #8]
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	689b      	ldr	r3, [r3, #8]
 80190ae:	f042 0220 	orr.w	r2, r2, #32
 80190b2:	601a      	str	r2, [r3, #0]

    return true;
 80190b4:	2301      	movs	r3, #1
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3718      	adds	r7, #24
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <escribirUART>:
**  Descripcion:    Escribe un byte en la UART
**  Parametros:     Dispositivo, dato
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void escribirUART(numUART_e numUART, uint8_t byteTx)
{
 80190be:	b580      	push	{r7, lr}
 80190c0:	b084      	sub	sp, #16
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	4603      	mov	r3, r0
 80190c6:	460a      	mov	r2, r1
 80190c8:	71fb      	strb	r3, [r7, #7]
 80190ca:	4613      	mov	r3, r2
 80190cc:	71bb      	strb	r3, [r7, #6]
    uart_t *driver = punteroUART(numUART);
 80190ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f7ff fe28 	bl	8018d28 <punteroUART>
 80190d8:	60f8      	str	r0, [r7, #12]

    driver->txBuffer[driver->cabezaTxBuffer] = byteTx;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 80190e0:	b29b      	uxth	r3, r3
 80190e2:	79ba      	ldrb	r2, [r7, #6]
 80190e4:	b291      	uxth	r1, r2
 80190e6:	68fa      	ldr	r2, [r7, #12]
 80190e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80190ec:	005b      	lsls	r3, r3, #1
 80190ee:	4413      	add	r3, r2
 80190f0:	460a      	mov	r2, r1
 80190f2:	809a      	strh	r2, [r3, #4]
    driver->cabezaTxBuffer = (driver->cabezaTxBuffer + 1) % TAMANIO_BUFFER_TX_UART;
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	3301      	adds	r3, #1
 80190fe:	425a      	negs	r2, r3
 8019100:	b2db      	uxtb	r3, r3
 8019102:	b2d2      	uxtb	r2, r2
 8019104:	bf58      	it	pl
 8019106:	4253      	negpl	r3, r2
 8019108:	b29a      	uxth	r2, r3
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	f8a3 2758 	strh.w	r2, [r3, #1880]	; 0x758

    // Habilitamos la interrupcion par registro de datos de transmision vacio
    __HAL_UART_ENABLE_IT(&driver->hal.huart, UART_IT_TXE);
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	689b      	ldr	r3, [r3, #8]
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	689b      	ldr	r3, [r3, #8]
 801911a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801911e:	601a      	str	r2, [r3, #0]
}
 8019120:	bf00      	nop
 8019122:	3710      	adds	r7, #16
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}

08019128 <escribirBufferUART>:
**  Descripcion:    Escribe un buffer en la UART
**  Parametros:     Dispositivo, buffer, longitud del buffer
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void escribirBufferUART(numUART_e numUART, uint8_t *datoTx, uint16_t longitud)
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b084      	sub	sp, #16
 801912c:	af00      	add	r7, sp, #0
 801912e:	4603      	mov	r3, r0
 8019130:	6039      	str	r1, [r7, #0]
 8019132:	71fb      	strb	r3, [r7, #7]
 8019134:	4613      	mov	r3, r2
 8019136:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < longitud; i++)
 8019138:	2300      	movs	r3, #0
 801913a:	81fb      	strh	r3, [r7, #14]
 801913c:	e00c      	b.n	8019158 <escribirBufferUART+0x30>
        escribirUART(numUART, datoTx[i]);
 801913e:	89fb      	ldrh	r3, [r7, #14]
 8019140:	683a      	ldr	r2, [r7, #0]
 8019142:	4413      	add	r3, r2
 8019144:	781a      	ldrb	r2, [r3, #0]
 8019146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801914a:	4611      	mov	r1, r2
 801914c:	4618      	mov	r0, r3
 801914e:	f7ff ffb6 	bl	80190be <escribirUART>
    for (uint16_t i = 0; i < longitud; i++)
 8019152:	89fb      	ldrh	r3, [r7, #14]
 8019154:	3301      	adds	r3, #1
 8019156:	81fb      	strh	r3, [r7, #14]
 8019158:	89fa      	ldrh	r2, [r7, #14]
 801915a:	88bb      	ldrh	r3, [r7, #4]
 801915c:	429a      	cmp	r2, r3
 801915e:	d3ee      	bcc.n	801913e <escribirBufferUART+0x16>
}
 8019160:	bf00      	nop
 8019162:	bf00      	nop
 8019164:	3710      	adds	r7, #16
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}

0801916a <leerUART>:
**  Descripcion:    Lee un dato de la UART
**  Parametros:     Dispositivo
**  Retorno:        Dato leido
****************************************************************************************/
CODIGO_RAPIDO int16_t leerUART(numUART_e numUART)
{
 801916a:	b580      	push	{r7, lr}
 801916c:	b084      	sub	sp, #16
 801916e:	af00      	add	r7, sp, #0
 8019170:	4603      	mov	r3, r0
 8019172:	71fb      	strb	r3, [r7, #7]
    int16_t byteRx;
    uart_t *driver = punteroUART(numUART);
 8019174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019178:	4618      	mov	r0, r3
 801917a:	f7ff fdd5 	bl	8018d28 <punteroUART>
 801917e:	60f8      	str	r0, [r7, #12]

    if (driver->cabezaRxBuffer != driver->colaRxBuffer) {
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8019186:	b29a      	uxth	r2, r3
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 801918e:	b29b      	uxth	r3, r3
 8019190:	429a      	cmp	r2, r3
 8019192:	d022      	beq.n	80191da <leerUART+0x70>
        byteRx = driver->rxBuffer[driver->colaRxBuffer];
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 801919a:	b29b      	uxth	r3, r3
 801919c:	68fa      	ldr	r2, [r7, #12]
 801919e:	33a8      	adds	r3, #168	; 0xa8
 80191a0:	005b      	lsls	r3, r3, #1
 80191a2:	4413      	add	r3, r2
 80191a4:	889b      	ldrh	r3, [r3, #4]
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	817b      	strh	r3, [r7, #10]

        if (driver->colaRxBuffer + 1 >= TAMANIO_BUFFER_RX_UART)
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80191b6:	d904      	bls.n	80191c2 <leerUART+0x58>
        	driver->colaRxBuffer = 0;
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	2200      	movs	r2, #0
 80191bc:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
 80191c0:	e008      	b.n	80191d4 <leerUART+0x6a>
        else
        	driver->colaRxBuffer++;
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	3301      	adds	r3, #1
 80191cc:	b29a      	uxth	r2, r3
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

        return byteRx;
 80191d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80191d8:	e001      	b.n	80191de <leerUART+0x74>
    }
    else
      return -1;
 80191da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3710      	adds	r7, #16
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}

080191e6 <bytesRecibidosUART>:
**  Descripcion:    Devuelve el numero de bytes recibidos por la UART
**  Parametros:     Dispositivo
**  Retorno:        Numero de bytes
****************************************************************************************/
CODIGO_RAPIDO uint16_t bytesRecibidosUART(numUART_e numUART)
{
 80191e6:	b580      	push	{r7, lr}
 80191e8:	b084      	sub	sp, #16
 80191ea:	af00      	add	r7, sp, #0
 80191ec:	4603      	mov	r3, r0
 80191ee:	71fb      	strb	r3, [r7, #7]
    uart_t *driver = punteroUART(numUART);
 80191f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7ff fd97 	bl	8018d28 <punteroUART>
 80191fa:	60f8      	str	r0, [r7, #12]

    if (driver->cabezaRxBuffer >= driver->colaRxBuffer)
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8019202:	b29a      	uxth	r2, r3
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 801920a:	b29b      	uxth	r3, r3
 801920c:	429a      	cmp	r2, r3
 801920e:	d30a      	bcc.n	8019226 <bytesRecibidosUART+0x40>
        return driver->cabezaRxBuffer - driver->colaRxBuffer;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8019216:	b29a      	uxth	r2, r3
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 801921e:	b29b      	uxth	r3, r3
 8019220:	1ad3      	subs	r3, r2, r3
 8019222:	b29b      	uxth	r3, r3
 8019224:	e00c      	b.n	8019240 <bytesRecibidosUART+0x5a>
    else
        return TAMANIO_BUFFER_RX_UART + driver->cabezaRxBuffer - driver->colaRxBuffer;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 801922c:	b29a      	uxth	r2, r3
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8019234:	b29b      	uxth	r3, r3
 8019236:	1ad3      	subs	r3, r2, r3
 8019238:	b29b      	uxth	r3, r3
 801923a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801923e:	b29b      	uxth	r3, r3
}
 8019240:	4618      	mov	r0, r3
 8019242:	3710      	adds	r7, #16
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <bytesLibresBufferTxUART>:
**  Descripcion:    Retorna el numero de bytes libres en el buffer de transmision
**  Parametros:     Dispositivo
**  Retorno:        Numero de bytes libres
****************************************************************************************/
CODIGO_RAPIDO uint16_t bytesLibresBufferTxUART(numUART_e numUART)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b084      	sub	sp, #16
 801924c:	af00      	add	r7, sp, #0
 801924e:	4603      	mov	r3, r0
 8019250:	71fb      	strb	r3, [r7, #7]
    uart_t *driver = punteroUART(numUART);
 8019252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019256:	4618      	mov	r0, r3
 8019258:	f7ff fd66 	bl	8018d28 <punteroUART>
 801925c:	60f8      	str	r0, [r7, #12]

    if (driver->cabezaTxBuffer >= driver->colaTxBuffer)
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 8019264:	b29a      	uxth	r2, r3
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 801926c:	b29b      	uxth	r3, r3
 801926e:	429a      	cmp	r2, r3
 8019270:	d30c      	bcc.n	801928c <bytesLibresBufferTxUART+0x44>
        return TAMANIO_BUFFER_TX_UART - 1 - driver->cabezaTxBuffer + driver->colaTxBuffer;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 8019278:	b29a      	uxth	r2, r3
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 8019280:	b29b      	uxth	r3, r3
 8019282:	1ad3      	subs	r3, r2, r3
 8019284:	b29b      	uxth	r3, r3
 8019286:	33ff      	adds	r3, #255	; 0xff
 8019288:	b29b      	uxth	r3, r3
 801928a:	e00b      	b.n	80192a4 <bytesLibresBufferTxUART+0x5c>

    return driver->colaTxBuffer - driver->cabezaTxBuffer - 1;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 8019292:	b29a      	uxth	r2, r3
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 801929a:	b29b      	uxth	r3, r3
 801929c:	1ad3      	subs	r3, r2, r3
 801929e:	b29b      	uxth	r3, r3
 80192a0:	3b01      	subs	r3, #1
 80192a2:	b29b      	uxth	r3, r3
}
 80192a4:	4618      	mov	r0, r3
 80192a6:	3710      	adds	r7, #16
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}

080192ac <handlerIrqUART>:
**  Descripcion:    Interrupcion que maneja el envio y la recepcion
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void handlerIrqUART(numUART_e numUART)
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b084      	sub	sp, #16
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	4603      	mov	r3, r0
 80192b4:	71fb      	strb	r3, [r7, #7]
    uart_t *driver = punteroUART(numUART);
 80192b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7ff fd34 	bl	8018d28 <punteroUART>
 80192c0:	60f8      	str	r0, [r7, #12]

    // UART en modo recepcion ----------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_RXNE) != RESET)) {
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	689b      	ldr	r3, [r3, #8]
 80192c6:	69db      	ldr	r3, [r3, #28]
 80192c8:	f003 0320 	and.w	r3, r3, #32
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d043      	beq.n	8019358 <handlerIrqUART+0xac>
        uint8_t rxByte = (uint8_t)(driver->hal.huart.Instance->RDR & (uint8_t) 0xff);
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	689b      	ldr	r3, [r3, #8]
 80192d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d6:	72fb      	strb	r3, [r7, #11]

        if (driver->rxCallback)
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d006      	beq.n	80192f0 <handlerIrqUART+0x44>
            driver->rxCallback(rxByte);
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80192e8:	7afa      	ldrb	r2, [r7, #11]
 80192ea:	4610      	mov	r0, r2
 80192ec:	4798      	blx	r3
 80192ee:	e01b      	b.n	8019328 <handlerIrqUART+0x7c>
        else {
            driver->rxBuffer[driver->cabezaRxBuffer] = rxByte;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80192f6:	b29b      	uxth	r3, r3
 80192f8:	7afa      	ldrb	r2, [r7, #11]
 80192fa:	b291      	uxth	r1, r2
 80192fc:	68fa      	ldr	r2, [r7, #12]
 80192fe:	33a8      	adds	r3, #168	; 0xa8
 8019300:	005b      	lsls	r3, r3, #1
 8019302:	4413      	add	r3, r2
 8019304:	460a      	mov	r2, r1
 8019306:	809a      	strh	r2, [r3, #4]
            driver->cabezaRxBuffer = (driver->cabezaRxBuffer + 1) % TAMANIO_BUFFER_RX_UART;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 801930e:	b29b      	uxth	r3, r3
 8019310:	3301      	adds	r3, #1
 8019312:	425a      	negs	r2, r3
 8019314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801931c:	bf58      	it	pl
 801931e:	4253      	negpl	r3, r2
 8019320:	b29a      	uxth	r2, r3
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
        }

        CLEAR_BIT(driver->hal.huart.Instance->CR1, (USART_CR1_PEIE));
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	689b      	ldr	r3, [r3, #8]
 8019332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8019336:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(driver->hal.huart.Instance->CR3, USART_CR3_EIE);
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	689b      	ldr	r3, [r3, #8]
 801933c:	689a      	ldr	r2, [r3, #8]
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	689b      	ldr	r3, [r3, #8]
 8019342:	f022 0201 	bic.w	r2, r2, #1
 8019346:	609a      	str	r2, [r3, #8]

        __HAL_UART_SEND_REQ(&driver->hal.huart, UART_RXDATA_FLUSH_REQUEST);
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	689b      	ldr	r3, [r3, #8]
 801934c:	699a      	ldr	r2, [r3, #24]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	689b      	ldr	r3, [r3, #8]
 8019352:	f042 0208 	orr.w	r2, r2, #8
 8019356:	619a      	str	r2, [r3, #24]
    }

    // Error de paridad ------------------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_PE) != RESET)) {
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	689b      	ldr	r3, [r3, #8]
 801935c:	69db      	ldr	r3, [r3, #28]
 801935e:	f003 0301 	and.w	r3, r3, #1
 8019362:	2b00      	cmp	r3, #0
 8019364:	d008      	beq.n	8019378 <handlerIrqUART+0xcc>
        __HAL_UART_CLEAR_IT(&driver->hal.huart, UART_CLEAR_PEF);
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	689b      	ldr	r3, [r3, #8]
 801936a:	2201      	movs	r2, #1
 801936c:	621a      	str	r2, [r3, #32]
        errorCallbackUART(numUART);
 801936e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019372:	4618      	mov	r0, r3
 8019374:	f7ff fd9e 	bl	8018eb4 <errorCallbackUART>
    }

    // Frame error -----------------------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_FE) != RESET)) {
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	689b      	ldr	r3, [r3, #8]
 801937c:	69db      	ldr	r3, [r3, #28]
 801937e:	f003 0302 	and.w	r3, r3, #2
 8019382:	2b00      	cmp	r3, #0
 8019384:	d008      	beq.n	8019398 <handlerIrqUART+0xec>
        __HAL_UART_CLEAR_IT(&driver->hal.huart, UART_CLEAR_FEF);
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	689b      	ldr	r3, [r3, #8]
 801938a:	2202      	movs	r2, #2
 801938c:	621a      	str	r2, [r3, #32]
        errorCallbackUART(numUART);
 801938e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019392:	4618      	mov	r0, r3
 8019394:	f7ff fd8e 	bl	8018eb4 <errorCallbackUART>
    }

    // Error de ruido --------------------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_NE) != RESET)) {
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	689b      	ldr	r3, [r3, #8]
 801939c:	69db      	ldr	r3, [r3, #28]
 801939e:	f003 0304 	and.w	r3, r3, #4
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d008      	beq.n	80193b8 <handlerIrqUART+0x10c>
        __HAL_UART_CLEAR_IT(&driver->hal.huart, UART_CLEAR_NEF);
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	689b      	ldr	r3, [r3, #8]
 80193aa:	2204      	movs	r2, #4
 80193ac:	621a      	str	r2, [r3, #32]
        errorCallbackUART(numUART);
 80193ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ff fd7e 	bl	8018eb4 <errorCallbackUART>
    }

    // Error de Over-Run -----------------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_ORE) != RESET)) {
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	689b      	ldr	r3, [r3, #8]
 80193bc:	69db      	ldr	r3, [r3, #28]
 80193be:	f003 0308 	and.w	r3, r3, #8
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d008      	beq.n	80193d8 <handlerIrqUART+0x12c>
        __HAL_UART_CLEAR_IT(&driver->hal.huart, UART_CLEAR_OREF);
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	689b      	ldr	r3, [r3, #8]
 80193ca:	2208      	movs	r2, #8
 80193cc:	621a      	str	r2, [r3, #32]
        errorCallbackUART(numUART);
 80193ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7ff fd6e 	bl	8018eb4 <errorCallbackUART>
    }

    // UART en modo transmision ----------------------------------------------------------
    if (__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_TXE) != RESET) {
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	689b      	ldr	r3, [r3, #8]
 80193dc:	69db      	ldr	r3, [r3, #28]
 80193de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d056      	beq.n	8019494 <handlerIrqUART+0x1e8>

        if (driver->colaTxBuffer == driver->cabezaTxBuffer) {
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 80193ec:	b29a      	uxth	r2, r3
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	f8b3 3758 	ldrh.w	r3, [r3, #1880]	; 0x758
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	429a      	cmp	r2, r3
 80193f8:	d114      	bne.n	8019424 <handlerIrqUART+0x178>
        	driver->hal.huart.TxXferCount = 0;
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	2200      	movs	r2, #0
 80193fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
            // Deshabilitamos la interrupcion por TDR vacio
            __HAL_UART_DISABLE_IT(&driver->hal.huart, UART_IT_TXE);
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	689b      	ldr	r3, [r3, #8]
 8019406:	681a      	ldr	r2, [r3, #0]
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019410:	601a      	str	r2, [r3, #0]

            // Habilitamos la interrupcion por transferencia completa
            __HAL_UART_ENABLE_IT(&driver->hal.huart, UART_IT_TC);
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	689b      	ldr	r3, [r3, #8]
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	689b      	ldr	r3, [r3, #8]
 801941c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019420:	601a      	str	r2, [r3, #0]
 8019422:	e037      	b.n	8019494 <handlerIrqUART+0x1e8>
        }
        else {
            if ((driver->hal.huart.Init.WordLength == UART_WORDLENGTH_9B) && (driver->hal.huart.Init.Parity == UART_PARITY_NONE))
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	691b      	ldr	r3, [r3, #16]
 8019428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801942c:	d115      	bne.n	801945a <handlerIrqUART+0x1ae>
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	699b      	ldr	r3, [r3, #24]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d111      	bne.n	801945a <handlerIrqUART+0x1ae>
            	driver->hal.huart.Instance->TDR = (((uint16_t) driver->txBuffer[driver->colaTxBuffer]) & (uint16_t) 0x01FFU);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 801943c:	b29b      	uxth	r3, r3
 801943e:	68fa      	ldr	r2, [r7, #12]
 8019440:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019444:	005b      	lsls	r3, r3, #1
 8019446:	4413      	add	r3, r2
 8019448:	889b      	ldrh	r3, [r3, #4]
 801944a:	b29b      	uxth	r3, r3
 801944c:	461a      	mov	r2, r3
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	689b      	ldr	r3, [r3, #8]
 8019452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019456:	629a      	str	r2, [r3, #40]	; 0x28
 8019458:	e00e      	b.n	8019478 <handlerIrqUART+0x1cc>
            else
            	driver->hal.huart.Instance->TDR = (uint8_t)(driver->txBuffer[driver->colaTxBuffer]);
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 8019460:	b29b      	uxth	r3, r3
 8019462:	68fa      	ldr	r2, [r7, #12]
 8019464:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019468:	005b      	lsls	r3, r3, #1
 801946a:	4413      	add	r3, r2
 801946c:	889b      	ldrh	r3, [r3, #4]
 801946e:	b29b      	uxth	r3, r3
 8019470:	b2da      	uxtb	r2, r3
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	689b      	ldr	r3, [r3, #8]
 8019476:	629a      	str	r2, [r3, #40]	; 0x28

            driver->colaTxBuffer = (driver->colaTxBuffer + 1) % TAMANIO_BUFFER_TX_UART;
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f8b3 375a 	ldrh.w	r3, [r3, #1882]	; 0x75a
 801947e:	b29b      	uxth	r3, r3
 8019480:	3301      	adds	r3, #1
 8019482:	425a      	negs	r2, r3
 8019484:	b2db      	uxtb	r3, r3
 8019486:	b2d2      	uxtb	r2, r2
 8019488:	bf58      	it	pl
 801948a:	4253      	negpl	r3, r2
 801948c:	b29a      	uxth	r2, r3
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	f8a3 275a 	strh.w	r2, [r3, #1882]	; 0x75a
        }
    }

    // Transmision completada ------------------------------------------------------------
    if ((__HAL_UART_GET_IT(&driver->hal.huart, UART_IT_TC) != RESET)) {
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	689b      	ldr	r3, [r3, #8]
 8019498:	69db      	ldr	r3, [r3, #28]
 801949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d00b      	beq.n	80194ba <handlerIrqUART+0x20e>
        __HAL_UART_DISABLE_IT(&driver->hal.huart, UART_IT_TC);
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	689b      	ldr	r3, [r3, #8]
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	689b      	ldr	r3, [r3, #8]
 80194ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80194b0:	601a      	str	r2, [r3, #0]
        __HAL_UART_CLEAR_IT(&driver->hal.huart, UART_CLEAR_TCF);
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	689b      	ldr	r3, [r3, #8]
 80194b6:	2240      	movs	r2, #64	; 0x40
 80194b8:	621a      	str	r2, [r3, #32]
    }
}
 80194ba:	bf00      	nop
 80194bc:	3710      	adds	r7, #16
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}

080194c2 <USART1_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 1
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void USART1_IRQHandler(void)
{
 80194c2:	b580      	push	{r7, lr}
 80194c4:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_1);
 80194c6:	2000      	movs	r0, #0
 80194c8:	f7ff fef0 	bl	80192ac <handlerIrqUART>
}
 80194cc:	bf00      	nop
 80194ce:	bd80      	pop	{r7, pc}

080194d0 <USART2_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 2
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void USART2_IRQHandler(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_2);
 80194d4:	2001      	movs	r0, #1
 80194d6:	f7ff fee9 	bl	80192ac <handlerIrqUART>
}
 80194da:	bf00      	nop
 80194dc:	bd80      	pop	{r7, pc}

080194de <USART3_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 3
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void USART3_IRQHandler(void)
{
 80194de:	b580      	push	{r7, lr}
 80194e0:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_3);
 80194e2:	2002      	movs	r0, #2
 80194e4:	f7ff fee2 	bl	80192ac <handlerIrqUART>
}
 80194e8:	bf00      	nop
 80194ea:	bd80      	pop	{r7, pc}

080194ec <UART4_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 4
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void UART4_IRQHandler(void)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_4);
 80194f0:	2003      	movs	r0, #3
 80194f2:	f7ff fedb 	bl	80192ac <handlerIrqUART>
}
 80194f6:	bf00      	nop
 80194f8:	bd80      	pop	{r7, pc}

080194fa <UART5_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 5
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void UART5_IRQHandler(void)
{
 80194fa:	b580      	push	{r7, lr}
 80194fc:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_5);
 80194fe:	2004      	movs	r0, #4
 8019500:	f7ff fed4 	bl	80192ac <handlerIrqUART>
}
 8019504:	bf00      	nop
 8019506:	bd80      	pop	{r7, pc}

08019508 <USART6_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 6
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void USART6_IRQHandler(void)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_6);
 801950c:	2005      	movs	r0, #5
 801950e:	f7ff fecd 	bl	80192ac <handlerIrqUART>
}
 8019512:	bf00      	nop
 8019514:	bd80      	pop	{r7, pc}

08019516 <UART7_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 7
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void UART7_IRQHandler(void)
{
 8019516:	b580      	push	{r7, lr}
 8019518:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_7);
 801951a:	2006      	movs	r0, #6
 801951c:	f7ff fec6 	bl	80192ac <handlerIrqUART>
}
 8019520:	bf00      	nop
 8019522:	bd80      	pop	{r7, pc}

08019524 <UART8_IRQHandler>:
**  Descripcion:    Interrupcion general de la UART 8
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void UART8_IRQHandler(void)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	af00      	add	r7, sp, #0
    handlerIrqUART(UART_8);
 8019528:	2007      	movs	r0, #7
 801952a:	f7ff febf 	bl	80192ac <handlerIrqUART>
}
 801952e:	bf00      	nop
 8019530:	bd80      	pop	{r7, pc}
	...

08019534 <habilitarRelojUART>:
**  Descripcion:    Habilita el reloj de la UART
**  Parametros:     Dispositivo
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarRelojUART(numUART_e numUART)
{
 8019534:	b480      	push	{r7}
 8019536:	b08b      	sub	sp, #44	; 0x2c
 8019538:	af00      	add	r7, sp, #0
 801953a:	4603      	mov	r3, r0
 801953c:	71fb      	strb	r3, [r7, #7]
    switch (numUART) {
 801953e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019542:	2b07      	cmp	r3, #7
 8019544:	d87a      	bhi.n	801963c <habilitarRelojUART+0x108>
 8019546:	a201      	add	r2, pc, #4	; (adr r2, 801954c <habilitarRelojUART+0x18>)
 8019548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801954c:	0801956d 	.word	0x0801956d
 8019550:	08019587 	.word	0x08019587
 8019554:	080195a1 	.word	0x080195a1
 8019558:	080195bb 	.word	0x080195bb
 801955c:	080195d5 	.word	0x080195d5
 8019560:	080195ef 	.word	0x080195ef
 8019564:	08019609 	.word	0x08019609
 8019568:	08019623 	.word	0x08019623
        case UART_1:
            __HAL_RCC_USART1_CLK_ENABLE();
 801956c:	4b37      	ldr	r3, [pc, #220]	; (801964c <habilitarRelojUART+0x118>)
 801956e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019570:	4a36      	ldr	r2, [pc, #216]	; (801964c <habilitarRelojUART+0x118>)
 8019572:	f043 0310 	orr.w	r3, r3, #16
 8019576:	6453      	str	r3, [r2, #68]	; 0x44
 8019578:	4b34      	ldr	r3, [pc, #208]	; (801964c <habilitarRelojUART+0x118>)
 801957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801957c:	f003 0310 	and.w	r3, r3, #16
 8019580:	627b      	str	r3, [r7, #36]	; 0x24
 8019582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        	break;
 8019584:	e05b      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_2:
            __HAL_RCC_USART2_CLK_ENABLE();
 8019586:	4b31      	ldr	r3, [pc, #196]	; (801964c <habilitarRelojUART+0x118>)
 8019588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801958a:	4a30      	ldr	r2, [pc, #192]	; (801964c <habilitarRelojUART+0x118>)
 801958c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019590:	6413      	str	r3, [r2, #64]	; 0x40
 8019592:	4b2e      	ldr	r3, [pc, #184]	; (801964c <habilitarRelojUART+0x118>)
 8019594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801959a:	623b      	str	r3, [r7, #32]
 801959c:	6a3b      	ldr	r3, [r7, #32]
        	break;
 801959e:	e04e      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_3:
            __HAL_RCC_USART3_CLK_ENABLE();
 80195a0:	4b2a      	ldr	r3, [pc, #168]	; (801964c <habilitarRelojUART+0x118>)
 80195a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195a4:	4a29      	ldr	r2, [pc, #164]	; (801964c <habilitarRelojUART+0x118>)
 80195a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80195aa:	6413      	str	r3, [r2, #64]	; 0x40
 80195ac:	4b27      	ldr	r3, [pc, #156]	; (801964c <habilitarRelojUART+0x118>)
 80195ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80195b4:	61fb      	str	r3, [r7, #28]
 80195b6:	69fb      	ldr	r3, [r7, #28]
        	break;
 80195b8:	e041      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_4:
            __HAL_RCC_UART4_CLK_ENABLE();
 80195ba:	4b24      	ldr	r3, [pc, #144]	; (801964c <habilitarRelojUART+0x118>)
 80195bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195be:	4a23      	ldr	r2, [pc, #140]	; (801964c <habilitarRelojUART+0x118>)
 80195c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80195c4:	6413      	str	r3, [r2, #64]	; 0x40
 80195c6:	4b21      	ldr	r3, [pc, #132]	; (801964c <habilitarRelojUART+0x118>)
 80195c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80195ce:	61bb      	str	r3, [r7, #24]
 80195d0:	69bb      	ldr	r3, [r7, #24]
        	break;
 80195d2:	e034      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_5:
            __HAL_RCC_UART5_CLK_ENABLE();
 80195d4:	4b1d      	ldr	r3, [pc, #116]	; (801964c <habilitarRelojUART+0x118>)
 80195d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195d8:	4a1c      	ldr	r2, [pc, #112]	; (801964c <habilitarRelojUART+0x118>)
 80195da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195de:	6413      	str	r3, [r2, #64]	; 0x40
 80195e0:	4b1a      	ldr	r3, [pc, #104]	; (801964c <habilitarRelojUART+0x118>)
 80195e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80195e8:	617b      	str	r3, [r7, #20]
 80195ea:	697b      	ldr	r3, [r7, #20]
        	break;
 80195ec:	e027      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_6:
            __HAL_RCC_USART6_CLK_ENABLE();
 80195ee:	4b17      	ldr	r3, [pc, #92]	; (801964c <habilitarRelojUART+0x118>)
 80195f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195f2:	4a16      	ldr	r2, [pc, #88]	; (801964c <habilitarRelojUART+0x118>)
 80195f4:	f043 0320 	orr.w	r3, r3, #32
 80195f8:	6453      	str	r3, [r2, #68]	; 0x44
 80195fa:	4b14      	ldr	r3, [pc, #80]	; (801964c <habilitarRelojUART+0x118>)
 80195fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195fe:	f003 0320 	and.w	r3, r3, #32
 8019602:	613b      	str	r3, [r7, #16]
 8019604:	693b      	ldr	r3, [r7, #16]
        	break;
 8019606:	e01a      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_7:
            __HAL_RCC_UART7_CLK_ENABLE();
 8019608:	4b10      	ldr	r3, [pc, #64]	; (801964c <habilitarRelojUART+0x118>)
 801960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801960c:	4a0f      	ldr	r2, [pc, #60]	; (801964c <habilitarRelojUART+0x118>)
 801960e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019612:	6413      	str	r3, [r2, #64]	; 0x40
 8019614:	4b0d      	ldr	r3, [pc, #52]	; (801964c <habilitarRelojUART+0x118>)
 8019616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801961c:	60fb      	str	r3, [r7, #12]
 801961e:	68fb      	ldr	r3, [r7, #12]
        	break;
 8019620:	e00d      	b.n	801963e <habilitarRelojUART+0x10a>

        case UART_8:
            __HAL_RCC_UART8_CLK_ENABLE();
 8019622:	4b0a      	ldr	r3, [pc, #40]	; (801964c <habilitarRelojUART+0x118>)
 8019624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019626:	4a09      	ldr	r2, [pc, #36]	; (801964c <habilitarRelojUART+0x118>)
 8019628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801962c:	6413      	str	r3, [r2, #64]	; 0x40
 801962e:	4b07      	ldr	r3, [pc, #28]	; (801964c <habilitarRelojUART+0x118>)
 8019630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019636:	60bb      	str	r3, [r7, #8]
 8019638:	68bb      	ldr	r3, [r7, #8]
        	break;
 801963a:	e000      	b.n	801963e <habilitarRelojUART+0x10a>

        default:
            break;
 801963c:	bf00      	nop
    }
}
 801963e:	bf00      	nop
 8019640:	372c      	adds	r7, #44	; 0x2c
 8019642:	46bd      	mov	sp, r7
 8019644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019648:	4770      	bx	lr
 801964a:	bf00      	nop
 801964c:	40023800 	.word	0x40023800

08019650 <configUART>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configUART_t, NUM_MAX_UART, configUART);
 8019650:	b480      	push	{r7}
 8019652:	b083      	sub	sp, #12
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	4613      	mov	r3, r2
 801965c:	005b      	lsls	r3, r3, #1
 801965e:	4413      	add	r3, r2
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	4a04      	ldr	r2, [pc, #16]	; (8019674 <configUART+0x24>)
 8019664:	4413      	add	r3, r2
 8019666:	4618      	mov	r0, r3
 8019668:	370c      	adds	r7, #12
 801966a:	46bd      	mov	sp, r7
 801966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019670:	4770      	bx	lr
 8019672:	bf00      	nop
 8019674:	2000a9c4 	.word	0x2000a9c4

08019678 <asignarHALuart>:
**  Descripcion:    Asigna el HAL a la estructura del driver
**  Parametros:     Numero del driver
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALuart(numUART_e numUART)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b084      	sub	sp, #16
 801967c:	af00      	add	r7, sp, #0
 801967e:	4603      	mov	r3, r0
 8019680:	71fb      	strb	r3, [r7, #7]
    uart_t *driver = punteroUART(numUART);
 8019682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019686:	4618      	mov	r0, r3
 8019688:	f7ff fb4e 	bl	8018d28 <punteroUART>
 801968c:	60f8      	str	r0, [r7, #12]

    if (!comprobarConfigHardwareUART(numUART))
 801968e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019692:	4618      	mov	r0, r3
 8019694:	f000 f864 	bl	8019760 <comprobarConfigHardwareUART>
 8019698:	4603      	mov	r3, r0
 801969a:	f083 0301 	eor.w	r3, r3, #1
 801969e:	b2db      	uxtb	r3, r3
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d001      	beq.n	80196a8 <asignarHALuart+0x30>
        return false;
 80196a4:	2300      	movs	r3, #0
 80196a6:	e054      	b.n	8019752 <asignarHALuart+0xda>

    // Asignamos los pines
    if (!pinUART(numUART, configUART(numUART)->pinTx, &driver->hal.pinTx))
 80196a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196ac:	4618      	mov	r0, r3
 80196ae:	f7ff ffcf 	bl	8019650 <configUART>
 80196b2:	4603      	mov	r3, r0
 80196b4:	7819      	ldrb	r1, [r3, #0]
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f503 72a5 	add.w	r2, r3, #330	; 0x14a
 80196bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196c0:	4618      	mov	r0, r3
 80196c2:	f000 f929 	bl	8019918 <pinUART>
 80196c6:	4603      	mov	r3, r0
 80196c8:	f083 0301 	eor.w	r3, r3, #1
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d001      	beq.n	80196d6 <asignarHALuart+0x5e>
        return false;
 80196d2:	2300      	movs	r3, #0
 80196d4:	e03d      	b.n	8019752 <asignarHALuart+0xda>

    if (!pinUART(numUART, configUART(numUART)->pinRx, &driver->hal.pinRx))
 80196d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196da:	4618      	mov	r0, r3
 80196dc:	f7ff ffb8 	bl	8019650 <configUART>
 80196e0:	4603      	mov	r3, r0
 80196e2:	7859      	ldrb	r1, [r3, #1]
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 80196ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196ee:	4618      	mov	r0, r3
 80196f0:	f000 f912 	bl	8019918 <pinUART>
 80196f4:	4603      	mov	r3, r0
 80196f6:	f083 0301 	eor.w	r3, r3, #1
 80196fa:	b2db      	uxtb	r3, r3
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d001      	beq.n	8019704 <asignarHALuart+0x8c>
        return false;
 8019700:	2300      	movs	r3, #0
 8019702:	e026      	b.n	8019752 <asignarHALuart+0xda>

    // Asignamos la instancia
    driver->hal.huart.Instance = hardwareUART[numUART].reg;
 8019704:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019708:	4914      	ldr	r1, [pc, #80]	; (801975c <asignarHALuart+0xe4>)
 801970a:	4613      	mov	r3, r2
 801970c:	00db      	lsls	r3, r3, #3
 801970e:	4413      	add	r3, r2
 8019710:	00db      	lsls	r3, r3, #3
 8019712:	440b      	add	r3, r1
 8019714:	3304      	adds	r3, #4
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	609a      	str	r2, [r3, #8]

    // Asignamos las interrupciones
    driver->hal.IRQ = hardwareUART[numUART].IRQ;
 801971c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019720:	490e      	ldr	r1, [pc, #56]	; (801975c <asignarHALuart+0xe4>)
 8019722:	4613      	mov	r3, r2
 8019724:	00db      	lsls	r3, r3, #3
 8019726:	4413      	add	r3, r2
 8019728:	00db      	lsls	r3, r3, #3
 801972a:	440b      	add	r3, r1
 801972c:	3344      	adds	r3, #68	; 0x44
 801972e:	781a      	ldrb	r2, [r3, #0]
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    driver->hal.prioridadIRQ = hardwareUART[numUART].prioridadIRQ;
 8019736:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801973a:	4908      	ldr	r1, [pc, #32]	; (801975c <asignarHALuart+0xe4>)
 801973c:	4613      	mov	r3, r2
 801973e:	00db      	lsls	r3, r3, #3
 8019740:	4413      	add	r3, r2
 8019742:	00db      	lsls	r3, r3, #3
 8019744:	440b      	add	r3, r1
 8019746:	3345      	adds	r3, #69	; 0x45
 8019748:	781a      	ldrb	r2, [r3, #0]
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

    return true;
 8019750:	2301      	movs	r3, #1
}
 8019752:	4618      	mov	r0, r3
 8019754:	3710      	adds	r7, #16
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	0803b664 	.word	0x0803b664

08019760 <comprobarConfigHardwareUART>:
**  Descripcion:    Comprueba si el hardware configurado es correcto
**  Parametros:     Numero del driver
**  Retorno:        True si ok
****************************************************************************************/
bool comprobarConfigHardwareUART(numUART_e numUART)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b082      	sub	sp, #8
 8019764:	af00      	add	r7, sp, #0
 8019766:	4603      	mov	r3, r0
 8019768:	71fb      	strb	r3, [r7, #7]
    if (!comprobarPinUART(numUART, configUART(numUART)->pinTx))
 801976a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801976e:	4618      	mov	r0, r3
 8019770:	f7ff ff6e 	bl	8019650 <configUART>
 8019774:	4603      	mov	r3, r0
 8019776:	781a      	ldrb	r2, [r3, #0]
 8019778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801977c:	4611      	mov	r1, r2
 801977e:	4618      	mov	r0, r3
 8019780:	f000 f856 	bl	8019830 <comprobarPinUART>
 8019784:	4603      	mov	r3, r0
 8019786:	f083 0301 	eor.w	r3, r3, #1
 801978a:	b2db      	uxtb	r3, r3
 801978c:	2b00      	cmp	r3, #0
 801978e:	d001      	beq.n	8019794 <comprobarConfigHardwareUART+0x34>
        return false;
 8019790:	2300      	movs	r3, #0
 8019792:	e048      	b.n	8019826 <comprobarConfigHardwareUART+0xc6>

    if (!comprobarPinUART(numUART, configUART(numUART)->pinRx))
 8019794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019798:	4618      	mov	r0, r3
 801979a:	f7ff ff59 	bl	8019650 <configUART>
 801979e:	4603      	mov	r3, r0
 80197a0:	785a      	ldrb	r2, [r3, #1]
 80197a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197a6:	4611      	mov	r1, r2
 80197a8:	4618      	mov	r0, r3
 80197aa:	f000 f841 	bl	8019830 <comprobarPinUART>
 80197ae:	4603      	mov	r3, r0
 80197b0:	f083 0301 	eor.w	r3, r3, #1
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d001      	beq.n	80197be <comprobarConfigHardwareUART+0x5e>
        return false;
 80197ba:	2300      	movs	r3, #0
 80197bc:	e033      	b.n	8019826 <comprobarConfigHardwareUART+0xc6>

#ifdef USAR_DMA_UART
    if (configUART(numUART)->usarDMA) {
 80197be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7ff ff44 	bl	8019650 <configUART>
 80197c8:	4603      	mov	r3, r0
 80197ca:	789b      	ldrb	r3, [r3, #2]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d029      	beq.n	8019824 <comprobarConfigHardwareUART+0xc4>
        if (!comprobarStreamDMAuart(numUART, configUART(numUART)->dmaTx))
 80197d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7ff ff3b 	bl	8019650 <configUART>
 80197da:	4603      	mov	r3, r0
 80197dc:	685a      	ldr	r2, [r3, #4]
 80197de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197e2:	4611      	mov	r1, r2
 80197e4:	4618      	mov	r0, r3
 80197e6:	f000 f85f 	bl	80198a8 <comprobarStreamDMAuart>
 80197ea:	4603      	mov	r3, r0
 80197ec:	f083 0301 	eor.w	r3, r3, #1
 80197f0:	b2db      	uxtb	r3, r3
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d001      	beq.n	80197fa <comprobarConfigHardwareUART+0x9a>
            return false;
 80197f6:	2300      	movs	r3, #0
 80197f8:	e015      	b.n	8019826 <comprobarConfigHardwareUART+0xc6>

        if (!comprobarStreamDMAuart(numUART, configUART(numUART)->dmaRx))
 80197fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197fe:	4618      	mov	r0, r3
 8019800:	f7ff ff26 	bl	8019650 <configUART>
 8019804:	4603      	mov	r3, r0
 8019806:	689a      	ldr	r2, [r3, #8]
 8019808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801980c:	4611      	mov	r1, r2
 801980e:	4618      	mov	r0, r3
 8019810:	f000 f84a 	bl	80198a8 <comprobarStreamDMAuart>
 8019814:	4603      	mov	r3, r0
 8019816:	f083 0301 	eor.w	r3, r3, #1
 801981a:	b2db      	uxtb	r3, r3
 801981c:	2b00      	cmp	r3, #0
 801981e:	d001      	beq.n	8019824 <comprobarConfigHardwareUART+0xc4>
            return false;
 8019820:	2300      	movs	r3, #0
 8019822:	e000      	b.n	8019826 <comprobarConfigHardwareUART+0xc6>
    }
#endif

    return true;
 8019824:	2301      	movs	r3, #1
}
 8019826:	4618      	mov	r0, r3
 8019828:	3708      	adds	r7, #8
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}
	...

08019830 <comprobarPinUART>:
**  Descripcion:    Comprueba si los pines son correctos
**  Parametros:     Numero del driver, Pin a configurar
**  Retorno:        True si ok
****************************************************************************************/
bool comprobarPinUART(numUART_e numUART, uint8_t pin)
{
 8019830:	b480      	push	{r7}
 8019832:	b085      	sub	sp, #20
 8019834:	af00      	add	r7, sp, #0
 8019836:	4603      	mov	r3, r0
 8019838:	460a      	mov	r2, r1
 801983a:	71fb      	strb	r3, [r7, #7]
 801983c:	4613      	mov	r3, r2
 801983e:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_UART; i++) {
 8019840:	2300      	movs	r3, #0
 8019842:	73fb      	strb	r3, [r7, #15]
 8019844:	e024      	b.n	8019890 <comprobarPinUART+0x60>
        if (pin == hardwareUART[numUART].pinTx[i].pin || pin == hardwareUART[numUART].pinRx[i].pin)
 8019846:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801984a:	7bf9      	ldrb	r1, [r7, #15]
 801984c:	4815      	ldr	r0, [pc, #84]	; (80198a4 <comprobarPinUART+0x74>)
 801984e:	4613      	mov	r3, r2
 8019850:	00db      	lsls	r3, r3, #3
 8019852:	4413      	add	r3, r2
 8019854:	009b      	lsls	r3, r3, #2
 8019856:	440b      	add	r3, r1
 8019858:	330c      	adds	r3, #12
 801985a:	005b      	lsls	r3, r3, #1
 801985c:	4403      	add	r3, r0
 801985e:	791b      	ldrb	r3, [r3, #4]
 8019860:	79ba      	ldrb	r2, [r7, #6]
 8019862:	429a      	cmp	r2, r3
 8019864:	d00f      	beq.n	8019886 <comprobarPinUART+0x56>
 8019866:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801986a:	7bf9      	ldrb	r1, [r7, #15]
 801986c:	480d      	ldr	r0, [pc, #52]	; (80198a4 <comprobarPinUART+0x74>)
 801986e:	4613      	mov	r3, r2
 8019870:	00db      	lsls	r3, r3, #3
 8019872:	4413      	add	r3, r2
 8019874:	009b      	lsls	r3, r3, #2
 8019876:	440b      	add	r3, r1
 8019878:	3308      	adds	r3, #8
 801987a:	005b      	lsls	r3, r3, #1
 801987c:	4403      	add	r3, r0
 801987e:	791b      	ldrb	r3, [r3, #4]
 8019880:	79ba      	ldrb	r2, [r7, #6]
 8019882:	429a      	cmp	r2, r3
 8019884:	d101      	bne.n	801988a <comprobarPinUART+0x5a>
            return true;
 8019886:	2301      	movs	r3, #1
 8019888:	e006      	b.n	8019898 <comprobarPinUART+0x68>
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_UART; i++) {
 801988a:	7bfb      	ldrb	r3, [r7, #15]
 801988c:	3301      	adds	r3, #1
 801988e:	73fb      	strb	r3, [r7, #15]
 8019890:	7bfb      	ldrb	r3, [r7, #15]
 8019892:	2b03      	cmp	r3, #3
 8019894:	d9d7      	bls.n	8019846 <comprobarPinUART+0x16>
    }

    return false;
 8019896:	2300      	movs	r3, #0
}
 8019898:	4618      	mov	r0, r3
 801989a:	3714      	adds	r7, #20
 801989c:	46bd      	mov	sp, r7
 801989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a2:	4770      	bx	lr
 80198a4:	0803b664 	.word	0x0803b664

080198a8 <comprobarStreamDMAuart>:
**  Descripcion:    Comprueba si el DMA asignado es correcto
**  Parametros:     Numero del driver, DMA configurado
**  Retorno:        True si ok
****************************************************************************************/
bool comprobarStreamDMAuart(numUART_e numUART, DMA_Stream_TypeDef *DMAy_Streamx)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	4603      	mov	r3, r0
 80198b0:	6039      	str	r1, [r7, #0]
 80198b2:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_STREAMS_DMA_UART; i++) {
 80198b4:	2300      	movs	r3, #0
 80198b6:	73fb      	strb	r3, [r7, #15]
 80198b8:	e022      	b.n	8019900 <comprobarStreamDMAuart+0x58>
        if (DMAy_Streamx == hardwareUART[numUART].dmaTx[i].DMAy_Streamx || DMAy_Streamx == hardwareUART[numUART].dmaRx[i].DMAy_Streamx)
 80198ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198be:	7bf9      	ldrb	r1, [r7, #15]
 80198c0:	4814      	ldr	r0, [pc, #80]	; (8019914 <comprobarStreamDMAuart+0x6c>)
 80198c2:	4613      	mov	r3, r2
 80198c4:	00db      	lsls	r3, r3, #3
 80198c6:	4413      	add	r3, r2
 80198c8:	440b      	add	r3, r1
 80198ca:	3304      	adds	r3, #4
 80198cc:	00db      	lsls	r3, r3, #3
 80198ce:	4403      	add	r3, r0
 80198d0:	685b      	ldr	r3, [r3, #4]
 80198d2:	683a      	ldr	r2, [r7, #0]
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d00e      	beq.n	80198f6 <comprobarStreamDMAuart+0x4e>
 80198d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198dc:	7bf9      	ldrb	r1, [r7, #15]
 80198de:	480d      	ldr	r0, [pc, #52]	; (8019914 <comprobarStreamDMAuart+0x6c>)
 80198e0:	4613      	mov	r3, r2
 80198e2:	00db      	lsls	r3, r3, #3
 80198e4:	4413      	add	r3, r2
 80198e6:	440b      	add	r3, r1
 80198e8:	3306      	adds	r3, #6
 80198ea:	00db      	lsls	r3, r3, #3
 80198ec:	4403      	add	r3, r0
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	683a      	ldr	r2, [r7, #0]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d101      	bne.n	80198fa <comprobarStreamDMAuart+0x52>
            return true;
 80198f6:	2301      	movs	r3, #1
 80198f8:	e006      	b.n	8019908 <comprobarStreamDMAuart+0x60>
    for (uint8_t i = 0; i < NUM_STREAMS_DMA_UART; i++) {
 80198fa:	7bfb      	ldrb	r3, [r7, #15]
 80198fc:	3301      	adds	r3, #1
 80198fe:	73fb      	strb	r3, [r7, #15]
 8019900:	7bfb      	ldrb	r3, [r7, #15]
 8019902:	2b01      	cmp	r3, #1
 8019904:	d9d9      	bls.n	80198ba <comprobarStreamDMAuart+0x12>
    }

    return false;
 8019906:	2300      	movs	r3, #0
}
 8019908:	4618      	mov	r0, r3
 801990a:	3714      	adds	r7, #20
 801990c:	46bd      	mov	sp, r7
 801990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019912:	4770      	bx	lr
 8019914:	0803b664 	.word	0x0803b664

08019918 <pinUART>:
**  Descripcion:    Encuentra el pin de la tabla de hardware
**  Parametros:     Numero de UART, pin a buscar, pin del driver
**  Retorno:        True si OK
****************************************************************************************/
bool pinUART(numUART_e numUART, uint8_t pinBusqueda, pin_t *pinDriver)
{
 8019918:	b480      	push	{r7}
 801991a:	b085      	sub	sp, #20
 801991c:	af00      	add	r7, sp, #0
 801991e:	4603      	mov	r3, r0
 8019920:	603a      	str	r2, [r7, #0]
 8019922:	71fb      	strb	r3, [r7, #7]
 8019924:	460b      	mov	r3, r1
 8019926:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_UART; i++) {
 8019928:	2300      	movs	r3, #0
 801992a:	73fb      	strb	r3, [r7, #15]
 801992c:	e062      	b.n	80199f4 <pinUART+0xdc>
        if (pinBusqueda == hardwareUART[numUART].pinTx[i].pin) {
 801992e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019932:	7bf9      	ldrb	r1, [r7, #15]
 8019934:	4834      	ldr	r0, [pc, #208]	; (8019a08 <pinUART+0xf0>)
 8019936:	4613      	mov	r3, r2
 8019938:	00db      	lsls	r3, r3, #3
 801993a:	4413      	add	r3, r2
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	440b      	add	r3, r1
 8019940:	330c      	adds	r3, #12
 8019942:	005b      	lsls	r3, r3, #1
 8019944:	4403      	add	r3, r0
 8019946:	791b      	ldrb	r3, [r3, #4]
 8019948:	79ba      	ldrb	r2, [r7, #6]
 801994a:	429a      	cmp	r2, r3
 801994c:	d11f      	bne.n	801998e <pinUART+0x76>
        	pinDriver->pin = hardwareUART[numUART].pinTx[i].pin;
 801994e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019952:	7bf9      	ldrb	r1, [r7, #15]
 8019954:	482c      	ldr	r0, [pc, #176]	; (8019a08 <pinUART+0xf0>)
 8019956:	4613      	mov	r3, r2
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	4413      	add	r3, r2
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	440b      	add	r3, r1
 8019960:	330c      	adds	r3, #12
 8019962:	005b      	lsls	r3, r3, #1
 8019964:	4403      	add	r3, r0
 8019966:	791a      	ldrb	r2, [r3, #4]
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareUART[numUART].pinTx[i].af;
 801996c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019970:	7bf9      	ldrb	r1, [r7, #15]
 8019972:	4825      	ldr	r0, [pc, #148]	; (8019a08 <pinUART+0xf0>)
 8019974:	4613      	mov	r3, r2
 8019976:	00db      	lsls	r3, r3, #3
 8019978:	4413      	add	r3, r2
 801997a:	009b      	lsls	r3, r3, #2
 801997c:	440b      	add	r3, r1
 801997e:	330c      	adds	r3, #12
 8019980:	005b      	lsls	r3, r3, #1
 8019982:	4403      	add	r3, r0
 8019984:	795a      	ldrb	r2, [r3, #5]
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	705a      	strb	r2, [r3, #1]
            return true;
 801998a:	2301      	movs	r3, #1
 801998c:	e036      	b.n	80199fc <pinUART+0xe4>
        }

        if (pinBusqueda == hardwareUART[numUART].pinRx[i].pin) {
 801998e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019992:	7bf9      	ldrb	r1, [r7, #15]
 8019994:	481c      	ldr	r0, [pc, #112]	; (8019a08 <pinUART+0xf0>)
 8019996:	4613      	mov	r3, r2
 8019998:	00db      	lsls	r3, r3, #3
 801999a:	4413      	add	r3, r2
 801999c:	009b      	lsls	r3, r3, #2
 801999e:	440b      	add	r3, r1
 80199a0:	3308      	adds	r3, #8
 80199a2:	005b      	lsls	r3, r3, #1
 80199a4:	4403      	add	r3, r0
 80199a6:	791b      	ldrb	r3, [r3, #4]
 80199a8:	79ba      	ldrb	r2, [r7, #6]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d11f      	bne.n	80199ee <pinUART+0xd6>
        	pinDriver->pin = hardwareUART[numUART].pinRx[i].pin;
 80199ae:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80199b2:	7bf9      	ldrb	r1, [r7, #15]
 80199b4:	4814      	ldr	r0, [pc, #80]	; (8019a08 <pinUART+0xf0>)
 80199b6:	4613      	mov	r3, r2
 80199b8:	00db      	lsls	r3, r3, #3
 80199ba:	4413      	add	r3, r2
 80199bc:	009b      	lsls	r3, r3, #2
 80199be:	440b      	add	r3, r1
 80199c0:	3308      	adds	r3, #8
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	4403      	add	r3, r0
 80199c6:	791a      	ldrb	r2, [r3, #4]
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	701a      	strb	r2, [r3, #0]
        	pinDriver->af = hardwareUART[numUART].pinRx[i].af;
 80199cc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80199d0:	7bf9      	ldrb	r1, [r7, #15]
 80199d2:	480d      	ldr	r0, [pc, #52]	; (8019a08 <pinUART+0xf0>)
 80199d4:	4613      	mov	r3, r2
 80199d6:	00db      	lsls	r3, r3, #3
 80199d8:	4413      	add	r3, r2
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	440b      	add	r3, r1
 80199de:	3308      	adds	r3, #8
 80199e0:	005b      	lsls	r3, r3, #1
 80199e2:	4403      	add	r3, r0
 80199e4:	795a      	ldrb	r2, [r3, #5]
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	705a      	strb	r2, [r3, #1]
            return true;
 80199ea:	2301      	movs	r3, #1
 80199ec:	e006      	b.n	80199fc <pinUART+0xe4>
    for (uint8_t i = 0; i < NUM_MAX_PIN_SEL_UART; i++) {
 80199ee:	7bfb      	ldrb	r3, [r7, #15]
 80199f0:	3301      	adds	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
 80199f4:	7bfb      	ldrb	r3, [r7, #15]
 80199f6:	2b03      	cmp	r3, #3
 80199f8:	d999      	bls.n	801992e <pinUART+0x16>
        }
    }

    return false;
 80199fa:	2300      	movs	r3, #0
}
 80199fc:	4618      	mov	r0, r3
 80199fe:	3714      	adds	r7, #20
 8019a00:	46bd      	mov	sp, r7
 8019a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a06:	4770      	bx	lr
 8019a08:	0803b664 	.word	0x0803b664

08019a0c <punteroUSB>:
**  Descripcion:    Devuelve el puntero al USB
**  Parametros:     Ninguno
**  Retorno:        Puntero
****************************************************************************************/
usb_t *punteroUSB(void)
{
 8019a0c:	b480      	push	{r7}
 8019a0e:	af00      	add	r7, sp, #0
    return &usb;
 8019a10:	4b02      	ldr	r3, [pc, #8]	; (8019a1c <punteroUSB+0x10>)
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr
 8019a1c:	20007f98 	.word	0x20007f98

08019a20 <iniciarUSB>:
**  Descripcion:    Inicia el USB
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarUSB(void)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b082      	sub	sp, #8
 8019a24:	af00      	add	r7, sp, #0
    usb_t *driver = &usb;
 8019a26:	4b0e      	ldr	r3, [pc, #56]	; (8019a60 <iniciarUSB+0x40>)
 8019a28:	607b      	str	r3, [r7, #4]

	memset(driver, 0, sizeof(*driver));
 8019a2a:	f242 0208 	movw	r2, #8200	; 0x2008
 8019a2e:	2100      	movs	r1, #0
 8019a30:	6878      	ldr	r0, [r7, #4]
 8019a32:	f01b fc35 	bl	80352a0 <memset>
    driver->iniciado = false;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	2200      	movs	r2, #0
 8019a3a:	701a      	strb	r2, [r3, #0]

    if (iniciarDriverUSB()) {
 8019a3c:	f000 f96e 	bl	8019d1c <iniciarDriverUSB>
 8019a40:	4603      	mov	r3, r0
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d004      	beq.n	8019a50 <iniciarUSB+0x30>
    	driver->iniciado = true;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	2201      	movs	r2, #1
 8019a4a:	701a      	strb	r2, [r3, #0]
        return true;
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	e003      	b.n	8019a58 <iniciarUSB+0x38>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion del USB\n");
 8019a50:	4804      	ldr	r0, [pc, #16]	; (8019a64 <iniciarUSB+0x44>)
 8019a52:	f01c f9d5 	bl	8035e00 <puts>
#endif
        return false;
 8019a56:	2300      	movs	r3, #0
    }
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3708      	adds	r7, #8
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}
 8019a60:	20007f98 	.word	0x20007f98
 8019a64:	0803a764 	.word	0x0803a764

08019a68 <usbAbierto>:
**  Descripcion:    Devuelve si el puerto USB esta abierto
**  Parametros:     Ninguno
**  Retorno:        True si abierto
****************************************************************************************/
bool usbAbierto(void)
{
 8019a68:	b480      	push	{r7}
 8019a6a:	af00      	add	r7, sp, #0
    return usb.puertoAbierto;
 8019a6c:	4b03      	ldr	r3, [pc, #12]	; (8019a7c <usbAbierto+0x14>)
 8019a6e:	f893 37f4 	ldrb.w	r3, [r3, #2036]	; 0x7f4
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	46bd      	mov	sp, r7
 8019a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7a:	4770      	bx	lr
 8019a7c:	20007f98 	.word	0x20007f98

08019a80 <usbConfigurado>:
**  Descripcion:    Devuelve si el USB esta configurado
**  Parametros:     Ninguno
**  Retorno:        True si configurado
****************************************************************************************/
bool usbConfigurado(void)
{
 8019a80:	b480      	push	{r7}
 8019a82:	af00      	add	r7, sp, #0
    return usb.hal.hUSB.dev_state == USBD_STATE_CONFIGURED;
 8019a84:	4b06      	ldr	r3, [pc, #24]	; (8019aa0 <usbConfigurado+0x20>)
 8019a86:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 8019a8a:	b2db      	uxtb	r3, r3
 8019a8c:	2b03      	cmp	r3, #3
 8019a8e:	bf0c      	ite	eq
 8019a90:	2301      	moveq	r3, #1
 8019a92:	2300      	movne	r3, #0
 8019a94:	b2db      	uxtb	r3, r3
}
 8019a96:	4618      	mov	r0, r3
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr
 8019aa0:	20007f98 	.word	0x20007f98

08019aa4 <usbConectado>:
**  Descripcion:    Devuelve si el USB esta conectado
**  Parametros:     Ninguno
**  Retorno:        True si conectado
****************************************************************************************/
bool usbConectado(void)
{
 8019aa4:	b480      	push	{r7}
 8019aa6:	af00      	add	r7, sp, #0
    return usb.hal.hUSB.dev_state != USBD_STATE_DEFAULT;
 8019aa8:	4b06      	ldr	r3, [pc, #24]	; (8019ac4 <usbConectado+0x20>)
 8019aaa:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 8019aae:	b2db      	uxtb	r3, r3
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	bf14      	ite	ne
 8019ab4:	2301      	movne	r3, #1
 8019ab6:	2300      	moveq	r3, #0
 8019ab8:	b2db      	uxtb	r3, r3
}
 8019aba:	4618      	mov	r0, r3
 8019abc:	46bd      	mov	sp, r7
 8019abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac2:	4770      	bx	lr
 8019ac4:	20007f98 	.word	0x20007f98

08019ac8 <generarNumeroSerieUSB>:
**  Descripcion:    Crea el string del numero de serie del descriptor
**  Parametros:     Ninugno
**  Retorno:        Ninugno
****************************************************************************************/
void generarNumeroSerieUSB(void)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b084      	sub	sp, #16
 8019acc:	af00      	add	r7, sp, #0
    uint32_t dispSerie0, dispSerie1, dispSerie2;

    dispSerie0 = *(uint32_t *)DISPOSITIVO_ID1;
 8019ace:	4b0f      	ldr	r3, [pc, #60]	; (8019b0c <generarNumeroSerieUSB+0x44>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	60fb      	str	r3, [r7, #12]
    dispSerie1 = *(uint32_t *)DISPOSITIVO_ID2;
 8019ad4:	4b0e      	ldr	r3, [pc, #56]	; (8019b10 <generarNumeroSerieUSB+0x48>)
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	60bb      	str	r3, [r7, #8]
    dispSerie2 = *(uint32_t *)DISPOSITIVO_ID3;
 8019ada:	4b0e      	ldr	r3, [pc, #56]	; (8019b14 <generarNumeroSerieUSB+0x4c>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	607b      	str	r3, [r7, #4]

    dispSerie0 += dispSerie2;
 8019ae0:	68fa      	ldr	r2, [r7, #12]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	60fb      	str	r3, [r7, #12]

    if (dispSerie0 != 0) {
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d009      	beq.n	8019b02 <generarNumeroSerieUSB+0x3a>
    	convertirNumeroSerie(dispSerie0, &stringSerieUSB[2], 8);
 8019aee:	2208      	movs	r2, #8
 8019af0:	4909      	ldr	r1, [pc, #36]	; (8019b18 <generarNumeroSerieUSB+0x50>)
 8019af2:	68f8      	ldr	r0, [r7, #12]
 8019af4:	f000 f814 	bl	8019b20 <convertirNumeroSerie>
    	convertirNumeroSerie(dispSerie1, &stringSerieUSB[18], 4);
 8019af8:	2204      	movs	r2, #4
 8019afa:	4908      	ldr	r1, [pc, #32]	; (8019b1c <generarNumeroSerieUSB+0x54>)
 8019afc:	68b8      	ldr	r0, [r7, #8]
 8019afe:	f000 f80f 	bl	8019b20 <convertirNumeroSerie>
    }
}
 8019b02:	bf00      	nop
 8019b04:	3710      	adds	r7, #16
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	1ff0f420 	.word	0x1ff0f420
 8019b10:	1ff0f424 	.word	0x1ff0f424
 8019b14:	1ff0f428 	.word	0x1ff0f428
 8019b18:	2000021e 	.word	0x2000021e
 8019b1c:	2000022e 	.word	0x2000022e

08019b20 <convertirNumeroSerie>:
**  Descripcion:    Convierte el numero de serie en chars
**  Parametros:     Valor a convertir, puntero al buffer, longitud del buffer
**  Retorno:        Ninugno
****************************************************************************************/
void convertirNumeroSerie(uint32_t valor, uint8_t * buf, uint8_t lon)
{
 8019b20:	b480      	push	{r7}
 8019b22:	b087      	sub	sp, #28
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	60f8      	str	r0, [r7, #12]
 8019b28:	60b9      	str	r1, [r7, #8]
 8019b2a:	4613      	mov	r3, r2
 8019b2c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < lon; i++) {
 8019b2e:	2300      	movs	r3, #0
 8019b30:	75fb      	strb	r3, [r7, #23]
 8019b32:	e027      	b.n	8019b84 <convertirNumeroSerie+0x64>
        if (((valor >> 28)) < 0xA)
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	0f1b      	lsrs	r3, r3, #28
 8019b38:	2b09      	cmp	r3, #9
 8019b3a:	d80b      	bhi.n	8019b54 <convertirNumeroSerie+0x34>
            buf[2 * i] = (valor >> 28) + '0';
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	0f1b      	lsrs	r3, r3, #28
 8019b40:	b2da      	uxtb	r2, r3
 8019b42:	7dfb      	ldrb	r3, [r7, #23]
 8019b44:	005b      	lsls	r3, r3, #1
 8019b46:	4619      	mov	r1, r3
 8019b48:	68bb      	ldr	r3, [r7, #8]
 8019b4a:	440b      	add	r3, r1
 8019b4c:	3230      	adds	r2, #48	; 0x30
 8019b4e:	b2d2      	uxtb	r2, r2
 8019b50:	701a      	strb	r2, [r3, #0]
 8019b52:	e00a      	b.n	8019b6a <convertirNumeroSerie+0x4a>
        else
            buf[2 * i] = (valor >> 28) + 'A' - 10;
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	0f1b      	lsrs	r3, r3, #28
 8019b58:	b2da      	uxtb	r2, r3
 8019b5a:	7dfb      	ldrb	r3, [r7, #23]
 8019b5c:	005b      	lsls	r3, r3, #1
 8019b5e:	4619      	mov	r1, r3
 8019b60:	68bb      	ldr	r3, [r7, #8]
 8019b62:	440b      	add	r3, r1
 8019b64:	3237      	adds	r2, #55	; 0x37
 8019b66:	b2d2      	uxtb	r2, r2
 8019b68:	701a      	strb	r2, [r3, #0]

        valor = valor << 4;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	011b      	lsls	r3, r3, #4
 8019b6e:	60fb      	str	r3, [r7, #12]
        buf[2 * i + 1] = 0;
 8019b70:	7dfb      	ldrb	r3, [r7, #23]
 8019b72:	005b      	lsls	r3, r3, #1
 8019b74:	3301      	adds	r3, #1
 8019b76:	68ba      	ldr	r2, [r7, #8]
 8019b78:	4413      	add	r3, r2
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < lon; i++) {
 8019b7e:	7dfb      	ldrb	r3, [r7, #23]
 8019b80:	3301      	adds	r3, #1
 8019b82:	75fb      	strb	r3, [r7, #23]
 8019b84:	7dfa      	ldrb	r2, [r7, #23]
 8019b86:	79fb      	ldrb	r3, [r7, #7]
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d3d3      	bcc.n	8019b34 <convertirNumeroSerie+0x14>
    }
}
 8019b8c:	bf00      	nop
 8019b8e:	bf00      	nop
 8019b90:	371c      	adds	r7, #28
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr
	...

08019b9c <punteroDescriptorUSB>:
**  Descripcion:    Devuelve el puntero al descriptor
**  Parametros:     Ninugno
**  Retorno:        Descriptor
****************************************************************************************/
USBD_DescriptorsTypeDef *punteroDescriptorUSB(void)
{
 8019b9c:	b480      	push	{r7}
 8019b9e:	af00      	add	r7, sp, #0
	return &descriptorUSB;
 8019ba0:	4b02      	ldr	r3, [pc, #8]	; (8019bac <punteroDescriptorUSB+0x10>)
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr
 8019bac:	200001d8 	.word	0x200001d8

08019bb0 <descriptorDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019bb0:	b480      	push	{r7}
 8019bb2:	b083      	sub	sp, #12
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	6039      	str	r1, [r7, #0]
 8019bba:	71fb      	strb	r3, [r7, #7]
    UNUSED(velocidad);
    *lon = sizeof(descriptorDispUSB);
 8019bbc:	683b      	ldr	r3, [r7, #0]
 8019bbe:	2212      	movs	r2, #18
 8019bc0:	801a      	strh	r2, [r3, #0]
    return descriptorDispUSB;
 8019bc2:	4b03      	ldr	r3, [pc, #12]	; (8019bd0 <descriptorDispositivoUSB+0x20>)
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	370c      	adds	r7, #12
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bce:	4770      	bx	lr
 8019bd0:	200001f8 	.word	0x200001f8

08019bd4 <descriptorIdLenguajeDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor del lenguaje del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorIdLenguajeDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b083      	sub	sp, #12
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	4603      	mov	r3, r0
 8019bdc:	6039      	str	r1, [r7, #0]
 8019bde:	71fb      	strb	r3, [r7, #7]
    UNUSED(velocidad);
    *lon = sizeof(descriptorIdLenguajeUSB);
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	2204      	movs	r2, #4
 8019be4:	801a      	strh	r2, [r3, #0]
    return descriptorIdLenguajeUSB;
 8019be6:	4b03      	ldr	r3, [pc, #12]	; (8019bf4 <descriptorIdLenguajeDispositivoUSB+0x20>)
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	370c      	adds	r7, #12
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr
 8019bf4:	20000218 	.word	0x20000218

08019bf8 <descriptorFabricanteDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor del fabricante del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorFabricanteDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b082      	sub	sp, #8
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	4603      	mov	r3, r0
 8019c00:	6039      	str	r1, [r7, #0]
 8019c02:	71fb      	strb	r3, [r7, #7]
    UNUSED(velocidad);
    USBD_GetString((uint8_t *)USB_STRING_FABRICANTE, stringDescriptorUSB, lon);
 8019c04:	683a      	ldr	r2, [r7, #0]
 8019c06:	4904      	ldr	r1, [pc, #16]	; (8019c18 <descriptorFabricanteDispositivoUSB+0x20>)
 8019c08:	4804      	ldr	r0, [pc, #16]	; (8019c1c <descriptorFabricanteDispositivoUSB+0x24>)
 8019c0a:	f01b fa17 	bl	803503c <USBD_GetString>
    return stringDescriptorUSB;
 8019c0e:	4b02      	ldr	r3, [pc, #8]	; (8019c18 <descriptorFabricanteDispositivoUSB+0x20>)
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3708      	adds	r7, #8
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	20009fa0 	.word	0x20009fa0
 8019c1c:	0803a788 	.word	0x0803a788

08019c20 <descriptorProductoDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor del producto del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorProductoDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b082      	sub	sp, #8
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	4603      	mov	r3, r0
 8019c28:	6039      	str	r1, [r7, #0]
 8019c2a:	71fb      	strb	r3, [r7, #7]
    if (velocidad == 0)
 8019c2c:	79fb      	ldrb	r3, [r7, #7]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d105      	bne.n	8019c3e <descriptorProductoDispositivoUSB+0x1e>
        USBD_GetString((uint8_t *)USB_STRING_PRODUCTO_FS, stringDescriptorUSB, lon);
 8019c32:	683a      	ldr	r2, [r7, #0]
 8019c34:	4907      	ldr	r1, [pc, #28]	; (8019c54 <descriptorProductoDispositivoUSB+0x34>)
 8019c36:	4808      	ldr	r0, [pc, #32]	; (8019c58 <descriptorProductoDispositivoUSB+0x38>)
 8019c38:	f01b fa00 	bl	803503c <USBD_GetString>
 8019c3c:	e004      	b.n	8019c48 <descriptorProductoDispositivoUSB+0x28>
    else
        USBD_GetString((uint8_t *)USB_STRING_PRODUCTO_FS, stringDescriptorUSB, lon);
 8019c3e:	683a      	ldr	r2, [r7, #0]
 8019c40:	4904      	ldr	r1, [pc, #16]	; (8019c54 <descriptorProductoDispositivoUSB+0x34>)
 8019c42:	4805      	ldr	r0, [pc, #20]	; (8019c58 <descriptorProductoDispositivoUSB+0x38>)
 8019c44:	f01b f9fa 	bl	803503c <USBD_GetString>

    return stringDescriptorUSB;
 8019c48:	4b02      	ldr	r3, [pc, #8]	; (8019c54 <descriptorProductoDispositivoUSB+0x34>)
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3708      	adds	r7, #8
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
 8019c52:	bf00      	nop
 8019c54:	20009fa0 	.word	0x20009fa0
 8019c58:	0803a790 	.word	0x0803a790

08019c5c <descriptorNumSerieDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor del numero de serie del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorNumSerieDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	4603      	mov	r3, r0
 8019c64:	6039      	str	r1, [r7, #0]
 8019c66:	71fb      	strb	r3, [r7, #7]
    UNUSED(velocidad);
    *lon = USB_TAM_STRING_SERIAL;
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	221a      	movs	r2, #26
 8019c6c:	801a      	strh	r2, [r3, #0]

    // Actualiza el descriptor del numero de serie con los datos del ID unico
    generarNumeroSerieUSB();
 8019c6e:	f7ff ff2b 	bl	8019ac8 <generarNumeroSerieUSB>
    return (uint8_t *)stringSerieUSB;
 8019c72:	4b02      	ldr	r3, [pc, #8]	; (8019c7c <descriptorNumSerieDispositivoUSB+0x20>)
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3708      	adds	r7, #8
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}
 8019c7c:	2000021c 	.word	0x2000021c

08019c80 <descriptorConfigDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor de la configuracion del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorConfigDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b082      	sub	sp, #8
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	4603      	mov	r3, r0
 8019c88:	6039      	str	r1, [r7, #0]
 8019c8a:	71fb      	strb	r3, [r7, #7]
    if (velocidad == USBD_SPEED_HIGH)
 8019c8c:	79fb      	ldrb	r3, [r7, #7]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d105      	bne.n	8019c9e <descriptorConfigDispositivoUSB+0x1e>
        USBD_GetString((uint8_t *)USB_STRING_CONFIGURACION_FS, stringDescriptorUSB, lon);
 8019c92:	683a      	ldr	r2, [r7, #0]
 8019c94:	4907      	ldr	r1, [pc, #28]	; (8019cb4 <descriptorConfigDispositivoUSB+0x34>)
 8019c96:	4808      	ldr	r0, [pc, #32]	; (8019cb8 <descriptorConfigDispositivoUSB+0x38>)
 8019c98:	f01b f9d0 	bl	803503c <USBD_GetString>
 8019c9c:	e004      	b.n	8019ca8 <descriptorConfigDispositivoUSB+0x28>
    else
        USBD_GetString((uint8_t *)USB_STRING_CONFIGURACION_FS, stringDescriptorUSB, lon);
 8019c9e:	683a      	ldr	r2, [r7, #0]
 8019ca0:	4904      	ldr	r1, [pc, #16]	; (8019cb4 <descriptorConfigDispositivoUSB+0x34>)
 8019ca2:	4805      	ldr	r0, [pc, #20]	; (8019cb8 <descriptorConfigDispositivoUSB+0x38>)
 8019ca4:	f01b f9ca 	bl	803503c <USBD_GetString>

    return stringDescriptorUSB;
 8019ca8:	4b02      	ldr	r3, [pc, #8]	; (8019cb4 <descriptorConfigDispositivoUSB+0x34>)
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3708      	adds	r7, #8
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	20009fa0 	.word	0x20009fa0
 8019cb8:	0803a7a8 	.word	0x0803a7a8

08019cbc <descriptorInterfazDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor de la interfaz del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorInterfazDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b082      	sub	sp, #8
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	6039      	str	r1, [r7, #0]
 8019cc6:	71fb      	strb	r3, [r7, #7]
    if (velocidad == 0)
 8019cc8:	79fb      	ldrb	r3, [r7, #7]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d105      	bne.n	8019cda <descriptorInterfazDispositivoUSB+0x1e>
        USBD_GetString((uint8_t *)USB_STRING_INTERFAZ_FS, stringDescriptorUSB, lon);
 8019cce:	683a      	ldr	r2, [r7, #0]
 8019cd0:	4907      	ldr	r1, [pc, #28]	; (8019cf0 <descriptorInterfazDispositivoUSB+0x34>)
 8019cd2:	4808      	ldr	r0, [pc, #32]	; (8019cf4 <descriptorInterfazDispositivoUSB+0x38>)
 8019cd4:	f01b f9b2 	bl	803503c <USBD_GetString>
 8019cd8:	e004      	b.n	8019ce4 <descriptorInterfazDispositivoUSB+0x28>
    else
        USBD_GetString((uint8_t *)USB_STRING_INTERFAZ_FS, stringDescriptorUSB, lon);
 8019cda:	683a      	ldr	r2, [r7, #0]
 8019cdc:	4904      	ldr	r1, [pc, #16]	; (8019cf0 <descriptorInterfazDispositivoUSB+0x34>)
 8019cde:	4805      	ldr	r0, [pc, #20]	; (8019cf4 <descriptorInterfazDispositivoUSB+0x38>)
 8019ce0:	f01b f9ac 	bl	803503c <USBD_GetString>

    return stringDescriptorUSB;
 8019ce4:	4b02      	ldr	r3, [pc, #8]	; (8019cf0 <descriptorInterfazDispositivoUSB+0x34>)
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	3708      	adds	r7, #8
 8019cea:	46bd      	mov	sp, r7
 8019cec:	bd80      	pop	{r7, pc}
 8019cee:	bf00      	nop
 8019cf0:	20009fa0 	.word	0x20009fa0
 8019cf4:	0803a7b4 	.word	0x0803a7b4

08019cf8 <descriptorBOSDispositivoUSB>:
**  Descripcion:    Devuelve el descriptor BOS del dispositivo USB
**  Parametros:     Velocidad del dispositivo, longitud de los datos del puntero
**  Retorno:        Descriptor
****************************************************************************************/
uint8_t *descriptorBOSDispositivoUSB(USBD_SpeedTypeDef velocidad, uint16_t *lon)
{
 8019cf8:	b480      	push	{r7}
 8019cfa:	b083      	sub	sp, #12
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	4603      	mov	r3, r0
 8019d00:	6039      	str	r1, [r7, #0]
 8019d02:	71fb      	strb	r3, [r7, #7]
    UNUSED(velocidad);
    *lon = sizeof(descriptorBOSdispUSB);
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	220c      	movs	r2, #12
 8019d08:	801a      	strh	r2, [r3, #0]
    return (uint8_t*)descriptorBOSdispUSB;
 8019d0a:	4b03      	ldr	r3, [pc, #12]	; (8019d18 <descriptorBOSDispositivoUSB+0x20>)
}
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr
 8019d18:	2000020c 	.word	0x2000020c

08019d1c <iniciarDriverUSB>:
**  Descripcion:    Inicia el USB
**  Parametros:     Ninguno
**  Retorno:        True si OK
****************************************************************************************/
bool iniciarDriverUSB(void)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b084      	sub	sp, #16
 8019d20:	af00      	add	r7, sp, #0
    usb_t *driver = punteroUSB();
 8019d22:	f7ff fe73 	bl	8019a0c <punteroUSB>
 8019d26:	60f8      	str	r0, [r7, #12]
    USBD_DescriptorsTypeDef *descriptor = punteroDescriptorUSB();
 8019d28:	f7ff ff38 	bl	8019b9c <punteroDescriptorUSB>
 8019d2c:	60b8      	str	r0, [r7, #8]
    USBD_CDC_ItfTypeDef *interfazCDC = punteroUSBInterfazCDC();
 8019d2e:	f000 fbcb 	bl	801a4c8 <punteroUSBInterfazCDC>
 8019d32:	6078      	str	r0, [r7, #4]

    if (!asignarHALusb())
 8019d34:	f000 fecc 	bl	801aad0 <asignarHALusb>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	f083 0301 	eor.w	r3, r3, #1
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d001      	beq.n	8019d48 <iniciarDriverUSB+0x2c>
        return false;
 8019d44:	2300      	movs	r3, #0
 8019d46:	e02c      	b.n	8019da2 <iniciarDriverUSB+0x86>

    if (USBD_Init(&driver->hal.hUSB, descriptor, DEVICE_FS) != USBD_OK)
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	3308      	adds	r3, #8
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	68b9      	ldr	r1, [r7, #8]
 8019d50:	4618      	mov	r0, r3
 8019d52:	f019 ff37 	bl	8033bc4 <USBD_Init>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d001      	beq.n	8019d60 <iniciarDriverUSB+0x44>
        return false;
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	e020      	b.n	8019da2 <iniciarDriverUSB+0x86>

    if (USBD_RegisterClass(&driver->hal.hUSB, &USBD_CDC) != USBD_OK)
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	3308      	adds	r3, #8
 8019d64:	4911      	ldr	r1, [pc, #68]	; (8019dac <iniciarDriverUSB+0x90>)
 8019d66:	4618      	mov	r0, r3
 8019d68:	f019 ff5c 	bl	8033c24 <USBD_RegisterClass>
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d001      	beq.n	8019d76 <iniciarDriverUSB+0x5a>
	    return false;
 8019d72:	2300      	movs	r3, #0
 8019d74:	e015      	b.n	8019da2 <iniciarDriverUSB+0x86>

    if (USBD_CDC_RegisterInterface(&driver->hal.hUSB, interfazCDC) != USBD_OK)
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	3308      	adds	r3, #8
 8019d7a:	6879      	ldr	r1, [r7, #4]
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f019 fe51 	bl	8033a24 <USBD_CDC_RegisterInterface>
 8019d82:	4603      	mov	r3, r0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d001      	beq.n	8019d8c <iniciarDriverUSB+0x70>
	    return false;
 8019d88:	2300      	movs	r3, #0
 8019d8a:	e00a      	b.n	8019da2 <iniciarDriverUSB+0x86>

    if (USBD_Start(&driver->hal.hUSB) != USBD_OK)
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	3308      	adds	r3, #8
 8019d90:	4618      	mov	r0, r3
 8019d92:	f019 ff7d 	bl	8033c90 <USBD_Start>
 8019d96:	4603      	mov	r3, r0
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d001      	beq.n	8019da0 <iniciarDriverUSB+0x84>
	    return false;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	e000      	b.n	8019da2 <iniciarDriverUSB+0x86>

    return true;
 8019da0:	2301      	movs	r3, #1
}
 8019da2:	4618      	mov	r0, r3
 8019da4:	3710      	adds	r7, #16
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bd80      	pop	{r7, pc}
 8019daa:	bf00      	nop
 8019dac:	2000298c 	.word	0x2000298c

08019db0 <OTG_FS_IRQHandler>:
**  Descripcion:    Interrupcion del USB
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void OTG_FS_IRQHandler(void)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af00      	add	r7, sp, #0
	usb_t *driver = punteroUSB();
 8019db6:	f7ff fe29 	bl	8019a0c <punteroUSB>
 8019dba:	6078      	str	r0, [r7, #4]
    HAL_PCD_IRQHandler(&driver->hal.hPCD);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f011 fe69 	bl	802ba9a <HAL_PCD_IRQHandler>
}
 8019dc8:	bf00      	nop
 8019dca:	3708      	adds	r7, #8
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	bd80      	pop	{r7, pc}

08019dd0 <HAL_PCD_MspInit>:
**  Descripcion:    Inicializa el PCD MSP
**  Parametros:     Handler PCD
**  Retorno:        Ninguno
****************************************************************************************/
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b086      	sub	sp, #24
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
    if(pcdHandle->Instance==USB_OTG_FS) {
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019de0:	d144      	bne.n	8019e6c <HAL_PCD_MspInit+0x9c>
  	    usb_t *driver = punteroUSB();
 8019de2:	f7ff fe13 	bl	8019a0c <punteroUSB>
 8019de6:	6178      	str	r0, [r7, #20]

  	    configurarIO(driver->hal.pinDM.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_NOPULL), driver->hal.pinDM.af);
 8019de8:	697b      	ldr	r3, [r7, #20]
 8019dea:	f893 07f0 	ldrb.w	r0, [r3, #2032]	; 0x7f0
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 8019df4:	461a      	mov	r2, r3
 8019df6:	f240 3102 	movw	r1, #770	; 0x302
 8019dfa:	f7fc fad9 	bl	80163b0 <configurarIO>
  	    configurarIO(driver->hal.pinDP.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_NOPULL), driver->hal.pinDP.af);
 8019dfe:	697b      	ldr	r3, [r7, #20]
 8019e00:	f893 07ee 	ldrb.w	r0, [r3, #2030]	; 0x7ee
 8019e04:	697b      	ldr	r3, [r7, #20]
 8019e06:	f893 37ef 	ldrb.w	r3, [r3, #2031]	; 0x7ef
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	f240 3102 	movw	r1, #770	; 0x302
 8019e10:	f7fc face 	bl	80163b0 <configurarIO>

        // Habilitacion del reloj del USB
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019e14:	4b17      	ldr	r3, [pc, #92]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e18:	4a16      	ldr	r2, [pc, #88]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e1e:	6353      	str	r3, [r2, #52]	; 0x34
 8019e20:	4b14      	ldr	r3, [pc, #80]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e28:	613b      	str	r3, [r7, #16]
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	4b11      	ldr	r3, [pc, #68]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e30:	4a10      	ldr	r2, [pc, #64]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019e36:	6453      	str	r3, [r2, #68]	; 0x44
 8019e38:	4b0e      	ldr	r3, [pc, #56]	; (8019e74 <HAL_PCD_MspInit+0xa4>)
 8019e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019e40:	60fb      	str	r3, [r7, #12]
 8019e42:	68fb      	ldr	r3, [r7, #12]

        // Configuracion de las interrupciones
        HAL_NVIC_SetPriority(driver->hal.IRQ, PRIORIDAD_BASE_NVIC(driver->hal.prioridadIRQ), PRIORIDAD_SUB_NVIC(driver->hal.prioridadIRQ));
 8019e44:	697b      	ldr	r3, [r7, #20]
 8019e46:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8019e4a:	b258      	sxtb	r0, r3
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8019e52:	099b      	lsrs	r3, r3, #6
 8019e54:	b2db      	uxtb	r3, r3
 8019e56:	2200      	movs	r2, #0
 8019e58:	4619      	mov	r1, r3
 8019e5a:	f010 f813 	bl	8029e84 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(driver->hal.IRQ);
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8019e64:	b25b      	sxtb	r3, r3
 8019e66:	4618      	mov	r0, r3
 8019e68:	f010 f828 	bl	8029ebc <HAL_NVIC_EnableIRQ>
    }
}
 8019e6c:	bf00      	nop
 8019e6e:	3718      	adds	r7, #24
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}
 8019e74:	40023800 	.word	0x40023800

08019e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b082      	sub	sp, #8
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019e8c:	4619      	mov	r1, r3
 8019e8e:	4610      	mov	r0, r2
 8019e90:	f019 ff4b 	bl	8033d2a <USBD_LL_SetupStage>
}
 8019e94:	bf00      	nop
 8019e96:	3708      	adds	r7, #8
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#endif
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
 8019ea4:	460b      	mov	r3, r1
 8019ea6:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epNum, hpcd->OUT_ep[epNum].xfer_buff);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8019eae:	78fa      	ldrb	r2, [r7, #3]
 8019eb0:	6879      	ldr	r1, [r7, #4]
 8019eb2:	4613      	mov	r3, r2
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	4413      	add	r3, r2
 8019eb8:	009b      	lsls	r3, r3, #2
 8019eba:	440b      	add	r3, r1
 8019ebc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019ec0:	681a      	ldr	r2, [r3, #0]
 8019ec2:	78fb      	ldrb	r3, [r7, #3]
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	f019 ff85 	bl	8033dd4 <USBD_LL_DataOutStage>
}
 8019eca:	bf00      	nop
 8019ecc:	3708      	adds	r7, #8
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	bd80      	pop	{r7, pc}

08019ed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#endif
{
 8019ed2:	b580      	push	{r7, lr}
 8019ed4:	b082      	sub	sp, #8
 8019ed6:	af00      	add	r7, sp, #0
 8019ed8:	6078      	str	r0, [r7, #4]
 8019eda:	460b      	mov	r3, r1
 8019edc:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epNum, hpcd->IN_ep[epNum].xfer_buff);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8019ee4:	78fa      	ldrb	r2, [r7, #3]
 8019ee6:	6879      	ldr	r1, [r7, #4]
 8019ee8:	4613      	mov	r3, r2
 8019eea:	00db      	lsls	r3, r3, #3
 8019eec:	4413      	add	r3, r2
 8019eee:	009b      	lsls	r3, r3, #2
 8019ef0:	440b      	add	r3, r1
 8019ef2:	334c      	adds	r3, #76	; 0x4c
 8019ef4:	681a      	ldr	r2, [r3, #0]
 8019ef6:	78fb      	ldrb	r3, [r7, #3]
 8019ef8:	4619      	mov	r1, r3
 8019efa:	f01a f81e 	bl	8033f3a <USBD_LL_DataInStage>
}
 8019efe:	bf00      	nop
 8019f00:	3708      	adds	r7, #8
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}

08019f06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 8019f06:	b580      	push	{r7, lr}
 8019f08:	b082      	sub	sp, #8
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019f14:	4618      	mov	r0, r3
 8019f16:	f01a f952 	bl	80341be <USBD_LL_SOF>
}
 8019f1a:	bf00      	nop
 8019f1c:	3708      	adds	r7, #8
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b084      	sub	sp, #16
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef velocidad = USBD_SPEED_FULL;
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	73fb      	strb	r3, [r7, #15]

    switch (hpcd->Init.speed) {
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	68db      	ldr	r3, [r3, #12]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d002      	beq.n	8019f3c <HAL_PCD_ResetCallback+0x1a>
 8019f36:	2b02      	cmp	r3, #2
 8019f38:	d003      	beq.n	8019f42 <HAL_PCD_ResetCallback+0x20>
 8019f3a:	e005      	b.n	8019f48 <HAL_PCD_ResetCallback+0x26>
        case PCD_SPEED_HIGH:
        	velocidad = USBD_SPEED_HIGH;
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	73fb      	strb	r3, [r7, #15]
            break;
 8019f40:	e005      	b.n	8019f4e <HAL_PCD_ResetCallback+0x2c>

        case PCD_SPEED_FULL:
        	velocidad = USBD_SPEED_FULL;
 8019f42:	2301      	movs	r3, #1
 8019f44:	73fb      	strb	r3, [r7, #15]
            break;
 8019f46:	e002      	b.n	8019f4e <HAL_PCD_ResetCallback+0x2c>

        default:
        	velocidad = USBD_SPEED_FULL;
 8019f48:	2301      	movs	r3, #1
 8019f4a:	73fb      	strb	r3, [r7, #15]
            break;
 8019f4c:	bf00      	nop
    }

    USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, velocidad);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019f54:	7bfa      	ldrb	r2, [r7, #15]
 8019f56:	4611      	mov	r1, r2
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f01a f8f2 	bl	8034142 <USBD_LL_SetSpeed>
    USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019f64:	4618      	mov	r0, r3
 8019f66:	f01a f89a 	bl	803409e <USBD_LL_Reset>
}
 8019f6a:	bf00      	nop
 8019f6c:	3710      	adds	r7, #16
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bd80      	pop	{r7, pc}
	...

08019f74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
    USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019f82:	4618      	mov	r0, r3
 8019f84:	f01a f8ed 	bl	8034162 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	687a      	ldr	r2, [r7, #4]
 8019f94:	6812      	ldr	r2, [r2, #0]
 8019f96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019f9a:	f043 0301 	orr.w	r3, r3, #1
 8019f9e:	6013      	str	r3, [r2, #0]

    // Modo stop
    if (hpcd->Init.low_power_enable)
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	6a1b      	ldr	r3, [r3, #32]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d005      	beq.n	8019fb4 <HAL_PCD_SuspendCallback+0x40>
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));      // Activa el bit SLEEPDEEP y SleepOnExit del SCR
 8019fa8:	4b04      	ldr	r3, [pc, #16]	; (8019fbc <HAL_PCD_SuspendCallback+0x48>)
 8019faa:	691b      	ldr	r3, [r3, #16]
 8019fac:	4a03      	ldr	r2, [pc, #12]	; (8019fbc <HAL_PCD_SuspendCallback+0x48>)
 8019fae:	f043 0306 	orr.w	r3, r3, #6
 8019fb2:	6113      	str	r3, [r2, #16]

}
 8019fb4:	bf00      	nop
 8019fb6:	3708      	adds	r7, #8
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}
 8019fbc:	e000ed00 	.word	0xe000ed00

08019fc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b082      	sub	sp, #8
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
    USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f01a f8dd 	bl	803418e <USBD_LL_Resume>
}
 8019fd4:	bf00      	nop
 8019fd6:	3708      	adds	r7, #8
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}

08019fdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#endif
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b082      	sub	sp, #8
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
 8019fe4:	460b      	mov	r3, r1
 8019fe6:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epNum);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8019fee:	78fa      	ldrb	r2, [r7, #3]
 8019ff0:	4611      	mov	r1, r2
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f01a f935 	bl	8034262 <USBD_LL_IsoOUTIncomplete>
}
 8019ff8:	bf00      	nop
 8019ffa:	3708      	adds	r7, #8
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}

0801a000 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epNum)
#endif
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b082      	sub	sp, #8
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
 801a008:	460b      	mov	r3, r1
 801a00a:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epNum);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801a012:	78fa      	ldrb	r2, [r7, #3]
 801a014:	4611      	mov	r1, r2
 801a016:	4618      	mov	r0, r3
 801a018:	f01a f8f1 	bl	80341fe <USBD_LL_IsoINIncomplete>
}
 801a01c:	bf00      	nop
 801a01e:	3708      	adds	r7, #8
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b082      	sub	sp, #8
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801a032:	4618      	mov	r0, r3
 801a034:	f01a f947 	bl	80342c6 <USBD_LL_DevConnected>
}
 801a038:	bf00      	nop
 801a03a:	3708      	adds	r7, #8
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}

0801a040 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b082      	sub	sp, #8
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801a04e:	4618      	mov	r0, r3
 801a050:	f01a f944 	bl	80342dc <USBD_LL_DevDisconnected>
}
 801a054:	bf00      	nop
 801a056:	3708      	adds	r7, #8
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}

0801a05c <USBD_LL_Init>:
**  Descripcion:    Inicializa la parte de bajo nivel del controlador de dispositivo
**  Parametros:     Handler del dispositivo
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b084      	sub	sp, #16
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
    if (pdev->id == DEVICE_FS) {
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	781b      	ldrb	r3, [r3, #0]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d142      	bne.n	801a0f2 <USBD_LL_Init+0x96>
        usb_t *driver = punteroUSB();
 801a06c:	f7ff fcce 	bl	8019a0c <punteroUSB>
 801a070:	60f8      	str	r0, [r7, #12]
    	PCD_HandleTypeDef *pcd = &driver->hal.hPCD;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801a078:	60bb      	str	r3, [r7, #8]

    	pcd->pData = pdev;
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        pdev->pData = pcd;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	68ba      	ldr	r2, [r7, #8]
 801a086:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

        pcd->Init.dev_endpoints = 6;
 801a08a:	68bb      	ldr	r3, [r7, #8]
 801a08c:	2206      	movs	r2, #6
 801a08e:	605a      	str	r2, [r3, #4]
        pcd->Init.speed = PCD_SPEED_FULL;
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	2202      	movs	r2, #2
 801a094:	60da      	str	r2, [r3, #12]
        pcd->Init.dma_enable = DISABLE;
 801a096:	68bb      	ldr	r3, [r7, #8]
 801a098:	2200      	movs	r2, #0
 801a09a:	611a      	str	r2, [r3, #16]
        pcd->Init.phy_itface = PCD_PHY_EMBEDDED;
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	2202      	movs	r2, #2
 801a0a0:	619a      	str	r2, [r3, #24]
        pcd->Init.Sof_enable = DISABLE;
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	61da      	str	r2, [r3, #28]
        pcd->Init.low_power_enable = DISABLE;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	621a      	str	r2, [r3, #32]
        pcd->Init.lpm_enable = DISABLE;
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	625a      	str	r2, [r3, #36]	; 0x24
        pcd->Init.vbus_sensing_enable = DISABLE;
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcd->Init.use_dedicated_ep1 = DISABLE;
 801a0ba:	68bb      	ldr	r3, [r7, #8]
 801a0bc:	2200      	movs	r2, #0
 801a0be:	631a      	str	r2, [r3, #48]	; 0x30

        HAL_PCD_Init(pcd);
 801a0c0:	68b8      	ldr	r0, [r7, #8]
 801a0c2:	f011 fba4 	bl	802b80e <HAL_PCD_Init>

        if (HAL_PCD_Init(pcd) != HAL_OK)
 801a0c6:	68b8      	ldr	r0, [r7, #8]
 801a0c8:	f011 fba1 	bl	802b80e <HAL_PCD_Init>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d001      	beq.n	801a0d6 <USBD_LL_Init+0x7a>
        	return USBD_FAIL;
 801a0d2:	2303      	movs	r3, #3
 801a0d4:	e00e      	b.n	801a0f4 <USBD_LL_Init+0x98>
        HAL_PCD_RegisterDataInStageCallback(pcd, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(pcd, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(pcd, PCD_ISOINIncompleteCallback);
#endif

        HAL_PCDEx_SetRxFiFo(pcd, 0x80);
 801a0d6:	2180      	movs	r1, #128	; 0x80
 801a0d8:	68b8      	ldr	r0, [r7, #8]
 801a0da:	f012 fe1c 	bl	802cd16 <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(pcd, 0, 0x40);
 801a0de:	2240      	movs	r2, #64	; 0x40
 801a0e0:	2100      	movs	r1, #0
 801a0e2:	68b8      	ldr	r0, [r7, #8]
 801a0e4:	f012 fdd0 	bl	802cc88 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(pcd, 1, 0x80);
 801a0e8:	2280      	movs	r2, #128	; 0x80
 801a0ea:	2101      	movs	r1, #1
 801a0ec:	68b8      	ldr	r0, [r7, #8]
 801a0ee:	f012 fdcb 	bl	802cc88 <HAL_PCDEx_SetTxFiFo>
    }

    return USBD_OK;
 801a0f2:	2300      	movs	r3, #0
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3710      	adds	r7, #16
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <USBD_LL_Start>:
**  Descripcion:    Inicia la parte de bajo nivel del controlador de dispositivo
**  Parametros:     Handler del dispositivo
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a104:	2300      	movs	r3, #0
 801a106:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a108:	2300      	movs	r3, #0
 801a10a:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_Start(pdev->pData);
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a112:	4618      	mov	r0, r3
 801a114:	f011 fc9f 	bl	802ba56 <HAL_PCD_Start>
 801a118:	4603      	mov	r3, r0
 801a11a:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a11c:	7bfb      	ldrb	r3, [r7, #15]
 801a11e:	4618      	mov	r0, r3
 801a120:	f000 f978 	bl	801a414 <USBD_Get_USB_Status>
 801a124:	4603      	mov	r3, r0
 801a126:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a128:	7bbb      	ldrb	r3, [r7, #14]
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3710      	adds	r7, #16
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}

0801a132 <USBD_LL_OpenEP>:
**  Descripcion:    Abre un endpoint del controlador de bajo nivel
**  Parametros:     Handler del dispositivo, numero de endpoint, tipo de endpoint, tamanio maximo paquetes endpoint
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t epDir, uint8_t epTipo, uint16_t epMaxTam)
{
 801a132:	b580      	push	{r7, lr}
 801a134:	b084      	sub	sp, #16
 801a136:	af00      	add	r7, sp, #0
 801a138:	6078      	str	r0, [r7, #4]
 801a13a:	4608      	mov	r0, r1
 801a13c:	4611      	mov	r1, r2
 801a13e:	461a      	mov	r2, r3
 801a140:	4603      	mov	r3, r0
 801a142:	70fb      	strb	r3, [r7, #3]
 801a144:	460b      	mov	r3, r1
 801a146:	70bb      	strb	r3, [r7, #2]
 801a148:	4613      	mov	r3, r2
 801a14a:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a14c:	2300      	movs	r3, #0
 801a14e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a150:	2300      	movs	r3, #0
 801a152:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_EP_Open(pdev->pData, epDir, epMaxTam, epTipo);
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a15a:	78bb      	ldrb	r3, [r7, #2]
 801a15c:	883a      	ldrh	r2, [r7, #0]
 801a15e:	78f9      	ldrb	r1, [r7, #3]
 801a160:	f012 f98c 	bl	802c47c <HAL_PCD_EP_Open>
 801a164:	4603      	mov	r3, r0
 801a166:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a168:	7bfb      	ldrb	r3, [r7, #15]
 801a16a:	4618      	mov	r0, r3
 801a16c:	f000 f952 	bl	801a414 <USBD_Get_USB_Status>
 801a170:	4603      	mov	r3, r0
 801a172:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a174:	7bbb      	ldrb	r3, [r7, #14]
}
 801a176:	4618      	mov	r0, r3
 801a178:	3710      	adds	r7, #16
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}

0801a17e <USBD_LL_CloseEP>:
**  Descripcion:    Cierra un endpoint del controlador de bajo nivel
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a17e:	b580      	push	{r7, lr}
 801a180:	b084      	sub	sp, #16
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
 801a186:	460b      	mov	r3, r1
 801a188:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a18a:	2300      	movs	r3, #0
 801a18c:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a18e:	2300      	movs	r3, #0
 801a190:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_EP_Close(pdev->pData, epDir);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a198:	78fa      	ldrb	r2, [r7, #3]
 801a19a:	4611      	mov	r1, r2
 801a19c:	4618      	mov	r0, r3
 801a19e:	f012 f9d5 	bl	802c54c <HAL_PCD_EP_Close>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a1a6:	7bfb      	ldrb	r3, [r7, #15]
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	f000 f933 	bl	801a414 <USBD_Get_USB_Status>
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3710      	adds	r7, #16
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}

0801a1bc <USBD_LL_StallEP>:
**  Descripcion:    Establece una condición de bloqueo en un punto final del controlador de nivel bajo
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b084      	sub	sp, #16
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	460b      	mov	r3, r1
 801a1c6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_EP_SetStall(pdev->pData, epDir);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a1d6:	78fa      	ldrb	r2, [r7, #3]
 801a1d8:	4611      	mov	r1, r2
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f012 faad 	bl	802c73a <HAL_PCD_EP_SetStall>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a1e4:	7bfb      	ldrb	r3, [r7, #15]
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f000 f914 	bl	801a414 <USBD_Get_USB_Status>
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	3710      	adds	r7, #16
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd80      	pop	{r7, pc}

0801a1fa <USBD_LL_ClearStallEP>:
**  Descripcion:    Borra una condición de bloqueo en un punto final del controlador de nivel bajo
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a1fa:	b580      	push	{r7, lr}
 801a1fc:	b084      	sub	sp, #16
 801a1fe:	af00      	add	r7, sp, #0
 801a200:	6078      	str	r0, [r7, #4]
 801a202:	460b      	mov	r3, r1
 801a204:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a206:	2300      	movs	r3, #0
 801a208:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a20a:	2300      	movs	r3, #0
 801a20c:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_EP_ClrStall(pdev->pData, epDir);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a214:	78fa      	ldrb	r2, [r7, #3]
 801a216:	4611      	mov	r1, r2
 801a218:	4618      	mov	r0, r3
 801a21a:	f012 faf2 	bl	802c802 <HAL_PCD_EP_ClrStall>
 801a21e:	4603      	mov	r3, r0
 801a220:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a222:	7bfb      	ldrb	r3, [r7, #15]
 801a224:	4618      	mov	r0, r3
 801a226:	f000 f8f5 	bl	801a414 <USBD_Get_USB_Status>
 801a22a:	4603      	mov	r3, r0
 801a22c:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a22e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a230:	4618      	mov	r0, r3
 801a232:	3710      	adds	r7, #16
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <USBD_LL_IsStallEP>:
**  Descripcion:    Devuelve si establoqueado
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        1 OK, 0 no OK
****************************************************************************************/
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a238:	b480      	push	{r7}
 801a23a:	b085      	sub	sp, #20
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
 801a240:	460b      	mov	r3, r1
 801a242:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a24a:	60fb      	str	r3, [r7, #12]

    if((epDir & 0x80) == 0x80)
 801a24c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a250:	2b00      	cmp	r3, #0
 801a252:	da0b      	bge.n	801a26c <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[epDir & 0x7F].is_stall;
 801a254:	78fb      	ldrb	r3, [r7, #3]
 801a256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a25a:	68f9      	ldr	r1, [r7, #12]
 801a25c:	4613      	mov	r3, r2
 801a25e:	00db      	lsls	r3, r3, #3
 801a260:	4413      	add	r3, r2
 801a262:	009b      	lsls	r3, r3, #2
 801a264:	440b      	add	r3, r1
 801a266:	333e      	adds	r3, #62	; 0x3e
 801a268:	781b      	ldrb	r3, [r3, #0]
 801a26a:	e00b      	b.n	801a284 <USBD_LL_IsStallEP+0x4c>
    else
        return hpcd->OUT_ep[epDir & 0x7F].is_stall;
 801a26c:	78fb      	ldrb	r3, [r7, #3]
 801a26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a272:	68f9      	ldr	r1, [r7, #12]
 801a274:	4613      	mov	r3, r2
 801a276:	00db      	lsls	r3, r3, #3
 801a278:	4413      	add	r3, r2
 801a27a:	009b      	lsls	r3, r3, #2
 801a27c:	440b      	add	r3, r1
 801a27e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a282:	781b      	ldrb	r3, [r3, #0]
}
 801a284:	4618      	mov	r0, r3
 801a286:	3714      	adds	r7, #20
 801a288:	46bd      	mov	sp, r7
 801a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28e:	4770      	bx	lr

0801a290 <USBD_LL_SetUSBAddress>:
**  Descripcion:    Asigna una direccion de USB al dispositivo
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b084      	sub	sp, #16
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
 801a298:	460b      	mov	r3, r1
 801a29a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a29c:	2300      	movs	r3, #0
 801a29e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	73bb      	strb	r3, [r7, #14]

    estadoHAL = HAL_PCD_SetAddress(pdev->pData, epDir);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a2aa:	78fa      	ldrb	r2, [r7, #3]
 801a2ac:	4611      	mov	r1, r2
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f012 f8bf 	bl	802c432 <HAL_PCD_SetAddress>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	73fb      	strb	r3, [r7, #15]
    estadoUSB = USBD_Get_USB_Status(estadoHAL);
 801a2b8:	7bfb      	ldrb	r3, [r7, #15]
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f000 f8aa 	bl	801a414 <USBD_Get_USB_Status>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	73bb      	strb	r3, [r7, #14]

    return estadoUSB;
 801a2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3710      	adds	r7, #16
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}

0801a2ce <USBD_LL_Transmit>:
**  Descripcion:    Transmite datos sobre un endpoint
**  Parametros:     Handler del dispositivo, numero de endpoint, datos a enviar, tamanio de los datos
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t epDir, uint8_t *buf, uint32_t tam)
{
 801a2ce:	b580      	push	{r7, lr}
 801a2d0:	b086      	sub	sp, #24
 801a2d2:	af00      	add	r7, sp, #0
 801a2d4:	60f8      	str	r0, [r7, #12]
 801a2d6:	607a      	str	r2, [r7, #4]
 801a2d8:	603b      	str	r3, [r7, #0]
 801a2da:	460b      	mov	r3, r1
 801a2dc:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	75bb      	strb	r3, [r7, #22]

    estadoHAL = HAL_PCD_EP_Transmit(pdev->pData, epDir, buf, tam);
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a2ec:	7af9      	ldrb	r1, [r7, #11]
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	687a      	ldr	r2, [r7, #4]
 801a2f2:	f012 f9d8 	bl	802c6a6 <HAL_PCD_EP_Transmit>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	75fb      	strb	r3, [r7, #23]
    estadoUSB =  USBD_Get_USB_Status(estadoHAL);
 801a2fa:	7dfb      	ldrb	r3, [r7, #23]
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	f000 f889 	bl	801a414 <USBD_Get_USB_Status>
 801a302:	4603      	mov	r3, r0
 801a304:	75bb      	strb	r3, [r7, #22]

    return estadoUSB;
 801a306:	7dbb      	ldrb	r3, [r7, #22]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3718      	adds	r7, #24
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}

0801a310 <USBD_LL_PrepareReceive>:
**  Descripcion:    Prepara un endpoint para la recepcion
**  Parametros:     Handler del dispositivo, numero de endpoint, datos recibidos, numero de datos a recibir
**  Retorno:        Estado
****************************************************************************************/
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t epDir, uint8_t *buf, uint32_t tam)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b086      	sub	sp, #24
 801a314:	af00      	add	r7, sp, #0
 801a316:	60f8      	str	r0, [r7, #12]
 801a318:	607a      	str	r2, [r7, #4]
 801a31a:	603b      	str	r3, [r7, #0]
 801a31c:	460b      	mov	r3, r1
 801a31e:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef estadoHAL = HAL_OK;
 801a320:	2300      	movs	r3, #0
 801a322:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a324:	2300      	movs	r3, #0
 801a326:	75bb      	strb	r3, [r7, #22]

    estadoHAL = HAL_PCD_EP_Receive(pdev->pData, epDir, buf, tam);
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a32e:	7af9      	ldrb	r1, [r7, #11]
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	f012 f954 	bl	802c5e0 <HAL_PCD_EP_Receive>
 801a338:	4603      	mov	r3, r0
 801a33a:	75fb      	strb	r3, [r7, #23]
    estadoUSB =  USBD_Get_USB_Status(estadoHAL);
 801a33c:	7dfb      	ldrb	r3, [r7, #23]
 801a33e:	4618      	mov	r0, r3
 801a340:	f000 f868 	bl	801a414 <USBD_Get_USB_Status>
 801a344:	4603      	mov	r3, r0
 801a346:	75bb      	strb	r3, [r7, #22]

    return estadoUSB;
 801a348:	7dbb      	ldrb	r3, [r7, #22]
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3718      	adds	r7, #24
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}

0801a352 <USBD_LL_GetRxDataSize>:
**  Descripcion:    Devuelve el ultimo tamanio de paquete transferido
**  Parametros:     Handler del dispositivo, numero de endpoint
**  Retorno:        Tamanio
****************************************************************************************/
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t epDir)
{
 801a352:	b580      	push	{r7, lr}
 801a354:	b082      	sub	sp, #8
 801a356:	af00      	add	r7, sp, #0
 801a358:	6078      	str	r0, [r7, #4]
 801a35a:	460b      	mov	r3, r1
 801a35c:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epDir);
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a364:	78fa      	ldrb	r2, [r7, #3]
 801a366:	4611      	mov	r1, r2
 801a368:	4618      	mov	r0, r3
 801a36a:	f012 f984 	bl	802c676 <HAL_PCD_EP_GetRxCount>
 801a36e:	4603      	mov	r3, r0
}
 801a370:	4618      	mov	r0, r3
 801a372:	3708      	adds	r7, #8
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}

0801a378 <HAL_PCDEx_LPM_Callback>:
**  Descripcion:    Envia un mensaje LPM a la capa de usuario
**  Parametros:     Handler del dispositivo, mensaje
**  Retorno:        Tamanio
****************************************************************************************/
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef mensaje)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b082      	sub	sp, #8
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
 801a380:	460b      	mov	r3, r1
 801a382:	70fb      	strb	r3, [r7, #3]
    switch (mensaje) {
 801a384:	78fb      	ldrb	r3, [r7, #3]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d002      	beq.n	801a390 <HAL_PCDEx_LPM_Callback+0x18>
 801a38a:	2b01      	cmp	r3, #1
 801a38c:	d01f      	beq.n	801a3ce <HAL_PCDEx_LPM_Callback+0x56>
            if (hpcd->Init.low_power_enable)
                SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));  // Activa el bit SLEEPDEEP y SleepOnExit del SCR

            break;
    }
}
 801a38e:	e03b      	b.n	801a408 <HAL_PCDEx_LPM_Callback+0x90>
            if (hpcd->Init.low_power_enable) {
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	6a1b      	ldr	r3, [r3, #32]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d007      	beq.n	801a3a8 <HAL_PCDEx_LPM_Callback+0x30>
            	configurarRelojSistema();
 801a398:	f00e fac6 	bl	8028928 <configurarRelojSistema>
                SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));  // Resetea el bit SLEEPDEEP del SCR
 801a39c:	4b1c      	ldr	r3, [pc, #112]	; (801a410 <HAL_PCDEx_LPM_Callback+0x98>)
 801a39e:	691b      	ldr	r3, [r3, #16]
 801a3a0:	4a1b      	ldr	r2, [pc, #108]	; (801a410 <HAL_PCDEx_LPM_Callback+0x98>)
 801a3a2:	f023 0306 	bic.w	r3, r3, #6
 801a3a6:	6113      	str	r3, [r2, #16]
            __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	687a      	ldr	r2, [r7, #4]
 801a3b4:	6812      	ldr	r2, [r2, #0]
 801a3b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a3ba:	f023 0301 	bic.w	r3, r3, #1
 801a3be:	6013      	str	r3, [r2, #0]
            USBD_LL_Resume(hpcd->pData);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f019 fee1 	bl	803418e <USBD_LL_Resume>
            break;
 801a3cc:	e01c      	b.n	801a408 <HAL_PCDEx_LPM_Callback+0x90>
            __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	687a      	ldr	r2, [r7, #4]
 801a3da:	6812      	ldr	r2, [r2, #0]
 801a3dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a3e0:	f043 0301 	orr.w	r3, r3, #1
 801a3e4:	6013      	str	r3, [r2, #0]
            USBD_LL_Suspend(hpcd->pData);
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f019 feb8 	bl	8034162 <USBD_LL_Suspend>
            if (hpcd->Init.low_power_enable)
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	6a1b      	ldr	r3, [r3, #32]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d005      	beq.n	801a406 <HAL_PCDEx_LPM_Callback+0x8e>
                SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));  // Activa el bit SLEEPDEEP y SleepOnExit del SCR
 801a3fa:	4b05      	ldr	r3, [pc, #20]	; (801a410 <HAL_PCDEx_LPM_Callback+0x98>)
 801a3fc:	691b      	ldr	r3, [r3, #16]
 801a3fe:	4a04      	ldr	r2, [pc, #16]	; (801a410 <HAL_PCDEx_LPM_Callback+0x98>)
 801a400:	f043 0306 	orr.w	r3, r3, #6
 801a404:	6113      	str	r3, [r2, #16]
            break;
 801a406:	bf00      	nop
}
 801a408:	bf00      	nop
 801a40a:	3708      	adds	r7, #8
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	e000ed00 	.word	0xe000ed00

0801a414 <USBD_Get_USB_Status>:
**  Descripcion:    Devuelve el estado del USB
**  Parametros:     Estado del handler
**  Retorno:        Estado del USB
****************************************************************************************/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef estadoHAL)
{
 801a414:	b480      	push	{r7}
 801a416:	b085      	sub	sp, #20
 801a418:	af00      	add	r7, sp, #0
 801a41a:	4603      	mov	r3, r0
 801a41c:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef estadoUSB = USBD_OK;
 801a41e:	2300      	movs	r3, #0
 801a420:	73fb      	strb	r3, [r7, #15]

    switch (estadoHAL) {
 801a422:	79fb      	ldrb	r3, [r7, #7]
 801a424:	2b03      	cmp	r3, #3
 801a426:	d817      	bhi.n	801a458 <USBD_Get_USB_Status+0x44>
 801a428:	a201      	add	r2, pc, #4	; (adr r2, 801a430 <USBD_Get_USB_Status+0x1c>)
 801a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a42e:	bf00      	nop
 801a430:	0801a441 	.word	0x0801a441
 801a434:	0801a447 	.word	0x0801a447
 801a438:	0801a44d 	.word	0x0801a44d
 801a43c:	0801a453 	.word	0x0801a453
        case HAL_OK :
    	    estadoUSB = USBD_OK;
 801a440:	2300      	movs	r3, #0
 801a442:	73fb      	strb	r3, [r7, #15]
            break;
 801a444:	e00b      	b.n	801a45e <USBD_Get_USB_Status+0x4a>

        case HAL_ERROR:
    	    estadoUSB = USBD_FAIL;
 801a446:	2303      	movs	r3, #3
 801a448:	73fb      	strb	r3, [r7, #15]
            break;
 801a44a:	e008      	b.n	801a45e <USBD_Get_USB_Status+0x4a>

        case HAL_BUSY:
    	    estadoUSB = USBD_BUSY;
 801a44c:	2301      	movs	r3, #1
 801a44e:	73fb      	strb	r3, [r7, #15]
            break;
 801a450:	e005      	b.n	801a45e <USBD_Get_USB_Status+0x4a>

        case HAL_TIMEOUT:
    	    estadoUSB = USBD_FAIL;
 801a452:	2303      	movs	r3, #3
 801a454:	73fb      	strb	r3, [r7, #15]
            break;
 801a456:	e002      	b.n	801a45e <USBD_Get_USB_Status+0x4a>

        default:
    	    estadoUSB = USBD_FAIL;
 801a458:	2303      	movs	r3, #3
 801a45a:	73fb      	strb	r3, [r7, #15]
            break;
 801a45c:	bf00      	nop
    }

    return estadoUSB;
 801a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a460:	4618      	mov	r0, r3
 801a462:	3714      	adds	r7, #20
 801a464:	46bd      	mov	sp, r7
 801a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a46a:	4770      	bx	lr

0801a46c <restaurarBasepriMem>:
{
 801a46c:	b480      	push	{r7}
 801a46e:	b085      	sub	sp, #20
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*prio);
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	f383 8811 	msr	BASEPRI, r3
}
 801a480:	bf00      	nop
}
 801a482:	bf00      	nop
 801a484:	3714      	adds	r7, #20
 801a486:	46bd      	mov	sp, r7
 801a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48c:	4770      	bx	lr

0801a48e <ajustarBasepriMax>:
{
 801a48e:	b480      	push	{r7}
 801a490:	b085      	sub	sp, #20
 801a492:	af00      	add	r7, sp, #0
 801a494:	4603      	mov	r3, r0
 801a496:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 801a498:	79fb      	ldrb	r3, [r7, #7]
 801a49a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	f383 8812 	msr	BASEPRI_MAX, r3
}
 801a4a2:	bf00      	nop
    return 1;
 801a4a4:	2301      	movs	r3, #1
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3714      	adds	r7, #20
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b0:	4770      	bx	lr
	...

0801a4b4 <configUSB>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configUSB_t, configUSB);
 801a4b4:	b480      	push	{r7}
 801a4b6:	af00      	add	r7, sp, #0
 801a4b8:	4b02      	ldr	r3, [pc, #8]	; (801a4c4 <configUSB+0x10>)
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c2:	4770      	bx	lr
 801a4c4:	2000aa24 	.word	0x2000aa24

0801a4c8 <punteroUSBInterfazCDC>:
**  Descripcion:    Devuelve el puntero a la interfaz CDC
**  Parametros:     Ninguno
**  Retorno:        Puntero a la interfaz
****************************************************************************************/
USBD_CDC_ItfTypeDef *punteroUSBInterfazCDC(void)
{
 801a4c8:	b480      	push	{r7}
 801a4ca:	af00      	add	r7, sp, #0
    return &interfazCDC;
 801a4cc:	4b02      	ldr	r3, [pc, #8]	; (801a4d8 <punteroUSBInterfazCDC+0x10>)
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d6:	4770      	bx	lr
 801a4d8:	20000238 	.word	0x20000238

0801a4dc <iniciarCDC>:
**  Descripcion:    Inicia el timer y los buffers del USB
**  Parametros:     Ninguno
**  Retorno:        USBD_OK si ok
****************************************************************************************/
int8_t iniciarCDC(void)
{
 801a4dc:	b590      	push	{r4, r7, lr}
 801a4de:	b085      	sub	sp, #20
 801a4e0:	af00      	add	r7, sp, #0
    // Iniciamos el timer
    if (!iniciarTimer(configUSB()->timer, 0, TIM_USO_USB))
 801a4e2:	f7ff ffe7 	bl	801a4b4 <configUSB>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	f993 3000 	ldrsb.w	r3, [r3]
 801a4ec:	2240      	movs	r2, #64	; 0x40
 801a4ee:	2100      	movs	r1, #0
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7fd fb97 	bl	8017c24 <iniciarTimer>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	f083 0301 	eor.w	r3, r3, #1
 801a4fc:	b2db      	uxtb	r3, r3
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d001      	beq.n	801a506 <iniciarCDC+0x2a>
        return (USBD_FAIL);
 801a502:	2303      	movs	r3, #3
 801a504:	e046      	b.n	801a594 <iniciarCDC+0xb8>

    usb_t *driver = punteroUSB();
 801a506:	f7ff fa81 	bl	8019a0c <punteroUSB>
 801a50a:	60f8      	str	r0, [r7, #12]

    // Se configura el timer
    const uint16_t prescaler = ((SystemCoreClock / configUSB()->frecEnvio) - 1) / 0x10000;
 801a50c:	4b23      	ldr	r3, [pc, #140]	; (801a59c <iniciarCDC+0xc0>)
 801a50e:	681c      	ldr	r4, [r3, #0]
 801a510:	f7ff ffd0 	bl	801a4b4 <configUSB>
 801a514:	4603      	mov	r3, r0
 801a516:	885b      	ldrh	r3, [r3, #2]
 801a518:	fbb4 f3f3 	udiv	r3, r4, r3
 801a51c:	3b01      	subs	r3, #1
 801a51e:	0c1b      	lsrs	r3, r3, #16
 801a520:	817b      	strh	r3, [r7, #10]
    const uint32_t hz = SystemCoreClock / (prescaler + 1);
 801a522:	4b1e      	ldr	r3, [pc, #120]	; (801a59c <iniciarCDC+0xc0>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	897a      	ldrh	r2, [r7, #10]
 801a528:	3201      	adds	r2, #1
 801a52a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a52e:	607b      	str	r3, [r7, #4]
    const uint16_t periodo = hz / configUSB()->frecEnvio;
 801a530:	f7ff ffc0 	bl	801a4b4 <configUSB>
 801a534:	4603      	mov	r3, r0
 801a536:	885b      	ldrh	r3, [r3, #2]
 801a538:	461a      	mov	r2, r3
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a540:	807b      	strh	r3, [r7, #2]

    configurarBaseTiempoTimer(configUSB()->timer, true, periodo, hz);
 801a542:	f7ff ffb7 	bl	801a4b4 <configUSB>
 801a546:	4603      	mov	r3, r0
 801a548:	f993 0000 	ldrsb.w	r0, [r3]
 801a54c:	887a      	ldrh	r2, [r7, #2]
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	2101      	movs	r1, #1
 801a552:	f7fd fc9b 	bl	8017e8c <configurarBaseTiempoTimer>
    asignarCallbackPeriodoTimer(configUSB()->timer, enviarDatoUSB);
 801a556:	f7ff ffad 	bl	801a4b4 <configUSB>
 801a55a:	4603      	mov	r3, r0
 801a55c:	f993 3000 	ldrsb.w	r3, [r3]
 801a560:	490f      	ldr	r1, [pc, #60]	; (801a5a0 <iniciarCDC+0xc4>)
 801a562:	4618      	mov	r0, r3
 801a564:	f7fd fec9 	bl	80182fa <asignarCallbackPeriodoTimer>

    USBD_CDC_SetTxBuffer(&driver->hal.hUSB, (uint8_t *)driver->txBuffer, 0);
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	f103 0008 	add.w	r0, r3, #8
 801a56e:	68fa      	ldr	r2, [r7, #12]
 801a570:	f241 73f5 	movw	r3, #6133	; 0x17f5
 801a574:	4413      	add	r3, r2
 801a576:	2200      	movs	r2, #0
 801a578:	4619      	mov	r1, r3
 801a57a:	f019 fa6d 	bl	8033a58 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&driver->hal.hUSB, (uint8_t *)driver->recepcion);
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	f103 0208 	add.w	r2, r3, #8
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 801a58a:	4619      	mov	r1, r3
 801a58c:	4610      	mov	r0, r2
 801a58e:	f019 fa85 	bl	8033a9c <USBD_CDC_SetRxBuffer>

    return USBD_OK;
 801a592:	2300      	movs	r3, #0
}
 801a594:	4618      	mov	r0, r3
 801a596:	3714      	adds	r7, #20
 801a598:	46bd      	mov	sp, r7
 801a59a:	bd90      	pop	{r4, r7, pc}
 801a59c:	2000cc48 	.word	0x2000cc48
 801a5a0:	0801a981 	.word	0x0801a981

0801a5a4 <deIniciarCDC>:
**  Descripcion:    De inicializa el CDC
**  Parametros:     Ninguno
**  Retorno:        USBD_OK si ok
****************************************************************************************/
int8_t deIniciarCDC(void)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	af00      	add	r7, sp, #0
    return USBD_OK;
 801a5a8:	2300      	movs	r3, #0
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b2:	4770      	bx	lr

0801a5b4 <controlCDC>:
**  Descripcion:    Controla los comandos del USB
**  Parametros:     Codigo de comando, buffer de comandos, longitud de datos a enviar
**  Retorno:        USBD_OK si ok
****************************************************************************************/
int8_t controlCDC(uint8_t cmd, uint8_t *buff, uint16_t lon)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b086      	sub	sp, #24
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	6039      	str	r1, [r7, #0]
 801a5be:	71fb      	strb	r3, [r7, #7]
 801a5c0:	4613      	mov	r3, r2
 801a5c2:	80bb      	strh	r3, [r7, #4]
    uint8_t bufTemp[7] = {0, 0, 0, 0, 0, 0, 0};
 801a5c4:	4a53      	ldr	r2, [pc, #332]	; (801a714 <controlCDC+0x160>)
 801a5c6:	f107 0308 	add.w	r3, r7, #8
 801a5ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a5ce:	6018      	str	r0, [r3, #0]
 801a5d0:	3304      	adds	r3, #4
 801a5d2:	8019      	strh	r1, [r3, #0]
 801a5d4:	3302      	adds	r3, #2
 801a5d6:	0c0a      	lsrs	r2, r1, #16
 801a5d8:	701a      	strb	r2, [r3, #0]
    USBD_SetupReqTypedef *req;

    switch (cmd) {
 801a5da:	79fb      	ldrb	r3, [r7, #7]
 801a5dc:	2b23      	cmp	r3, #35	; 0x23
 801a5de:	f200 8092 	bhi.w	801a706 <controlCDC+0x152>
 801a5e2:	a201      	add	r2, pc, #4	; (adr r2, 801a5e8 <controlCDC+0x34>)
 801a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5e8:	0801a707 	.word	0x0801a707
 801a5ec:	0801a707 	.word	0x0801a707
 801a5f0:	0801a707 	.word	0x0801a707
 801a5f4:	0801a707 	.word	0x0801a707
 801a5f8:	0801a707 	.word	0x0801a707
 801a5fc:	0801a707 	.word	0x0801a707
 801a600:	0801a707 	.word	0x0801a707
 801a604:	0801a707 	.word	0x0801a707
 801a608:	0801a707 	.word	0x0801a707
 801a60c:	0801a707 	.word	0x0801a707
 801a610:	0801a707 	.word	0x0801a707
 801a614:	0801a707 	.word	0x0801a707
 801a618:	0801a707 	.word	0x0801a707
 801a61c:	0801a707 	.word	0x0801a707
 801a620:	0801a707 	.word	0x0801a707
 801a624:	0801a707 	.word	0x0801a707
 801a628:	0801a707 	.word	0x0801a707
 801a62c:	0801a707 	.word	0x0801a707
 801a630:	0801a707 	.word	0x0801a707
 801a634:	0801a707 	.word	0x0801a707
 801a638:	0801a707 	.word	0x0801a707
 801a63c:	0801a707 	.word	0x0801a707
 801a640:	0801a707 	.word	0x0801a707
 801a644:	0801a707 	.word	0x0801a707
 801a648:	0801a707 	.word	0x0801a707
 801a64c:	0801a707 	.word	0x0801a707
 801a650:	0801a707 	.word	0x0801a707
 801a654:	0801a707 	.word	0x0801a707
 801a658:	0801a707 	.word	0x0801a707
 801a65c:	0801a707 	.word	0x0801a707
 801a660:	0801a707 	.word	0x0801a707
 801a664:	0801a707 	.word	0x0801a707
 801a668:	0801a679 	.word	0x0801a679
 801a66c:	0801a6a5 	.word	0x0801a6a5
 801a670:	0801a6dd 	.word	0x0801a6dd
 801a674:	0801a707 	.word	0x0801a707

        case CDC_CLEAR_COMM_FEATURE:
            break;

        case CDC_SET_LINE_CODING:
        	bufTemp[0] = buff[0];
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	723b      	strb	r3, [r7, #8]
        	bufTemp[1] = buff[1];
 801a67e:	683b      	ldr	r3, [r7, #0]
 801a680:	785b      	ldrb	r3, [r3, #1]
 801a682:	727b      	strb	r3, [r7, #9]
        	bufTemp[2] = buff[2];
 801a684:	683b      	ldr	r3, [r7, #0]
 801a686:	789b      	ldrb	r3, [r3, #2]
 801a688:	72bb      	strb	r3, [r7, #10]
        	bufTemp[3] = buff[3];
 801a68a:	683b      	ldr	r3, [r7, #0]
 801a68c:	78db      	ldrb	r3, [r3, #3]
 801a68e:	72fb      	strb	r3, [r7, #11]
        	bufTemp[4] = buff[4];
 801a690:	683b      	ldr	r3, [r7, #0]
 801a692:	791b      	ldrb	r3, [r3, #4]
 801a694:	733b      	strb	r3, [r7, #12]
        	bufTemp[5] = buff[5];
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	795b      	ldrb	r3, [r3, #5]
 801a69a:	737b      	strb	r3, [r7, #13]
        	bufTemp[6] = buff[6];
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	799b      	ldrb	r3, [r3, #6]
 801a6a0:	73bb      	strb	r3, [r7, #14]
            break;
 801a6a2:	e031      	b.n	801a708 <controlCDC+0x154>

        case CDC_GET_LINE_CODING:
        	buff[0] = bufTemp[0];
 801a6a4:	7a3a      	ldrb	r2, [r7, #8]
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	701a      	strb	r2, [r3, #0]
        	buff[1] = bufTemp[1];
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	3301      	adds	r3, #1
 801a6ae:	7a7a      	ldrb	r2, [r7, #9]
 801a6b0:	701a      	strb	r2, [r3, #0]
        	buff[2] = bufTemp[2];
 801a6b2:	683b      	ldr	r3, [r7, #0]
 801a6b4:	3302      	adds	r3, #2
 801a6b6:	7aba      	ldrb	r2, [r7, #10]
 801a6b8:	701a      	strb	r2, [r3, #0]
        	buff[3] = bufTemp[3];
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	3303      	adds	r3, #3
 801a6be:	7afa      	ldrb	r2, [r7, #11]
 801a6c0:	701a      	strb	r2, [r3, #0]
        	buff[4] = bufTemp[4];
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	3304      	adds	r3, #4
 801a6c6:	7b3a      	ldrb	r2, [r7, #12]
 801a6c8:	701a      	strb	r2, [r3, #0]
        	buff[5] = bufTemp[5];
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	3305      	adds	r3, #5
 801a6ce:	7b7a      	ldrb	r2, [r7, #13]
 801a6d0:	701a      	strb	r2, [r3, #0]
        	buff[6] = bufTemp[6];
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	3306      	adds	r3, #6
 801a6d6:	7bba      	ldrb	r2, [r7, #14]
 801a6d8:	701a      	strb	r2, [r3, #0]
            break;
 801a6da:	e015      	b.n	801a708 <controlCDC+0x154>

        case CDC_SET_CONTROL_LINE_STATE:
        	req = (USBD_SetupReqTypedef *)buff;
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	617b      	str	r3, [r7, #20]
            usb_t *driver = punteroUSB();
 801a6e0:	f7ff f994 	bl	8019a0c <punteroUSB>
 801a6e4:	6138      	str	r0, [r7, #16]

        	if((req->wValue & 0x0001) != 0)
 801a6e6:	697b      	ldr	r3, [r7, #20]
 801a6e8:	885b      	ldrh	r3, [r3, #2]
 801a6ea:	f003 0301 	and.w	r3, r3, #1
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d004      	beq.n	801a6fc <controlCDC+0x148>
                driver->puertoAbierto = true;
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	2201      	movs	r2, #1
 801a6f6:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
        	else
                driver->puertoAbierto = false;

        	break;
 801a6fa:	e005      	b.n	801a708 <controlCDC+0x154>
                driver->puertoAbierto = false;
 801a6fc:	693b      	ldr	r3, [r7, #16]
 801a6fe:	2200      	movs	r2, #0
 801a700:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
        	break;
 801a704:	e000      	b.n	801a708 <controlCDC+0x154>

        case CDC_SEND_BREAK:
            break;

        default:
            break;
 801a706:	bf00      	nop
    }

    return USBD_OK;
 801a708:	2300      	movs	r3, #0
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3718      	adds	r7, #24
 801a70e:	46bd      	mov	sp, r7
 801a710:	bd80      	pop	{r7, pc}
 801a712:	bf00      	nop
 801a714:	0803a7c4 	.word	0x0803a7c4

0801a718 <recibirCDC>:
**  Descripcion:    Recibe datos del USB
**  Parametros:     Buffer de datos para ser recibidos, numero de datos recibidos
**  Retorno:        USBD_OK si ok
****************************************************************************************/
int8_t recibirCDC(uint8_t* buff, uint32_t *lon)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b086      	sub	sp, #24
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	6039      	str	r1, [r7, #0]
	usb_t *driver = punteroUSB();
 801a722:	f7ff f973 	bl	8019a0c <punteroUSB>
 801a726:	6138      	str	r0, [r7, #16]
	uint8_t tam = (uint8_t)*lon;
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	73fb      	strb	r3, [r7, #15]

    if (tam > 0) {
 801a72e:	7bfb      	ldrb	r3, [r7, #15]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d027      	beq.n	801a784 <recibirCDC+0x6c>
        for (uint16_t i = 0; i < tam; i++) {
 801a734:	2300      	movs	r3, #0
 801a736:	82fb      	strh	r3, [r7, #22]
 801a738:	e01a      	b.n	801a770 <recibirCDC+0x58>
        	driver->rxBuffer[driver->cabezaRxBuffer] = buff[i];
 801a73a:	8afb      	ldrh	r3, [r7, #22]
 801a73c:	687a      	ldr	r2, [r7, #4]
 801a73e:	441a      	add	r2, r3
 801a740:	693b      	ldr	r3, [r7, #16]
 801a742:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	7811      	ldrb	r1, [r2, #0]
 801a74a:	693a      	ldr	r2, [r7, #16]
 801a74c:	4413      	add	r3, r2
 801a74e:	460a      	mov	r2, r1
 801a750:	f883 2ff5 	strb.w	r2, [r3, #4085]	; 0xff5
        	driver->cabezaRxBuffer = (driver->cabezaRxBuffer + 1) % TAMANIO_BUFFER_RX_USB;
 801a754:	693b      	ldr	r3, [r7, #16]
 801a756:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	3301      	adds	r3, #1
 801a75e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a762:	693a      	ldr	r2, [r7, #16]
 801a764:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801a768:	6013      	str	r3, [r2, #0]
        for (uint16_t i = 0; i < tam; i++) {
 801a76a:	8afb      	ldrh	r3, [r7, #22]
 801a76c:	3301      	adds	r3, #1
 801a76e:	82fb      	strh	r3, [r7, #22]
 801a770:	7bfb      	ldrb	r3, [r7, #15]
 801a772:	b29b      	uxth	r3, r3
 801a774:	8afa      	ldrh	r2, [r7, #22]
 801a776:	429a      	cmp	r2, r3
 801a778:	d3df      	bcc.n	801a73a <recibirCDC+0x22>
        }

        USBD_CDC_ReceivePacket(&driver->hal.hUSB);
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	3308      	adds	r3, #8
 801a77e:	4618      	mov	r0, r3
 801a780:	f019 f9ea 	bl	8033b58 <USBD_CDC_ReceivePacket>
    }

    return (USBD_OK);
 801a784:	2300      	movs	r3, #0
}
 801a786:	4618      	mov	r0, r3
 801a788:	3718      	adds	r7, #24
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}

0801a78e <transmisionCompletaCDC>:
**  Descripcion:    Funcion que se ejecuta al transmitir un dato
**  Parametros:     Buffer de envio, longitud del buffer, numero de endpoint
**  Retorno:        USBD_OK si ok
****************************************************************************************/
int8_t transmisionCompletaCDC(uint8_t *buff, uint32_t *lon, uint8_t epNum)
{
 801a78e:	b480      	push	{r7}
 801a790:	b085      	sub	sp, #20
 801a792:	af00      	add	r7, sp, #0
 801a794:	60f8      	str	r0, [r7, #12]
 801a796:	60b9      	str	r1, [r7, #8]
 801a798:	4613      	mov	r3, r2
 801a79a:	71fb      	strb	r3, [r7, #7]
    UNUSED(buff);
    UNUSED(lon);
    UNUSED(epNum);

    return USBD_OK;
 801a79c:	2300      	movs	r3, #0
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	3714      	adds	r7, #20
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a8:	4770      	bx	lr

0801a7aa <escribirUSB>:
**  Descripcion:    Envia un dato por el USB
**  Parametros:     Dato a enviar
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void escribirUSB(uint8_t byteTx)
{
 801a7aa:	b580      	push	{r7, lr}
 801a7ac:	b086      	sub	sp, #24
 801a7ae:	af00      	add	r7, sp, #0
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	71fb      	strb	r3, [r7, #7]
	usb_t *driver = punteroUSB();
 801a7b4:	f7ff f92a 	bl	8019a0c <punteroUSB>
 801a7b8:	6138      	str	r0, [r7, #16]

    if (!(usbConectado() && usbConfigurado() && usbAbierto()))
 801a7ba:	f7ff f973 	bl	8019aa4 <usbConectado>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	f083 0301 	eor.w	r3, r3, #1
 801a7c4:	b2db      	uxtb	r3, r3
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d13f      	bne.n	801a84a <escribirUSB+0xa0>
 801a7ca:	f7ff f959 	bl	8019a80 <usbConfigurado>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	f083 0301 	eor.w	r3, r3, #1
 801a7d4:	b2db      	uxtb	r3, r3
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d137      	bne.n	801a84a <escribirUSB+0xa0>
 801a7da:	f7ff f945 	bl	8019a68 <usbAbierto>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	f083 0301 	eor.w	r3, r3, #1
 801a7e4:	b2db      	uxtb	r3, r3
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d12f      	bne.n	801a84a <escribirUSB+0xa0>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801a7ea:	f3ef 8311 	mrs	r3, BASEPRI
 801a7ee:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7f0:	68fb      	ldr	r3, [r7, #12]
        return;

    BLOQUE_ATOMICO(NVIC_PRIO_USB) {
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	72fb      	strb	r3, [r7, #11]
 801a7f6:	2080      	movs	r0, #128	; 0x80
 801a7f8:	f7ff fe49 	bl	801a48e <ajustarBasepriMax>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	75fb      	strb	r3, [r7, #23]
 801a800:	e01a      	b.n	801a838 <escribirUSB+0x8e>
        driver->txBuffer[driver->cabezaTxBuffer] = byteTx;
 801a802:	693b      	ldr	r3, [r7, #16]
 801a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a808:	f8d3 3ff8 	ldr.w	r3, [r3, #4088]	; 0xff8
 801a80c:	693a      	ldr	r2, [r7, #16]
 801a80e:	441a      	add	r2, r3
 801a810:	f241 73f5 	movw	r3, #6133	; 0x17f5
 801a814:	4413      	add	r3, r2
 801a816:	79fa      	ldrb	r2, [r7, #7]
 801a818:	701a      	strb	r2, [r3, #0]
        driver->cabezaTxBuffer = (driver->cabezaTxBuffer + 1) % TAMANIO_BUFFER_TX_USB;
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a820:	f8d3 3ff8 	ldr.w	r3, [r3, #4088]	; 0xff8
 801a824:	3301      	adds	r3, #1
 801a826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a82a:	693a      	ldr	r2, [r7, #16]
 801a82c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a830:	f8c2 3ff8 	str.w	r3, [r2, #4088]	; 0xff8
    BLOQUE_ATOMICO(NVIC_PRIO_USB) {
 801a834:	2300      	movs	r3, #0
 801a836:	75fb      	strb	r3, [r7, #23]
 801a838:	7dfb      	ldrb	r3, [r7, #23]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d1e1      	bne.n	801a802 <escribirUSB+0x58>
 801a83e:	f107 030b 	add.w	r3, r7, #11
 801a842:	4618      	mov	r0, r3
 801a844:	f7ff fe12 	bl	801a46c <restaurarBasepriMem>
 801a848:	e000      	b.n	801a84c <escribirUSB+0xa2>
        return;
 801a84a:	bf00      	nop
    }
}
 801a84c:	3718      	adds	r7, #24
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd80      	pop	{r7, pc}

0801a852 <escribirBufferUSB>:
**  Descripcion:    Envia un buffer por el USB
**  Parametros:     Datos a enviar, longitud de los datos
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void escribirBufferUSB(uint8_t *datoTx, uint32_t longitud)
{
 801a852:	b580      	push	{r7, lr}
 801a854:	b084      	sub	sp, #16
 801a856:	af00      	add	r7, sp, #0
 801a858:	6078      	str	r0, [r7, #4]
 801a85a:	6039      	str	r1, [r7, #0]
    for (uint16_t i = 0; i < longitud; i++)
 801a85c:	2300      	movs	r3, #0
 801a85e:	81fb      	strh	r3, [r7, #14]
 801a860:	e009      	b.n	801a876 <escribirBufferUSB+0x24>
        escribirUSB(datoTx[i]);
 801a862:	89fb      	ldrh	r3, [r7, #14]
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	4413      	add	r3, r2
 801a868:	781b      	ldrb	r3, [r3, #0]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f7ff ff9d 	bl	801a7aa <escribirUSB>
    for (uint16_t i = 0; i < longitud; i++)
 801a870:	89fb      	ldrh	r3, [r7, #14]
 801a872:	3301      	adds	r3, #1
 801a874:	81fb      	strh	r3, [r7, #14]
 801a876:	89fb      	ldrh	r3, [r7, #14]
 801a878:	683a      	ldr	r2, [r7, #0]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d8f1      	bhi.n	801a862 <escribirBufferUSB+0x10>
}
 801a87e:	bf00      	nop
 801a880:	bf00      	nop
 801a882:	3710      	adds	r7, #16
 801a884:	46bd      	mov	sp, r7
 801a886:	bd80      	pop	{r7, pc}

0801a888 <leerUSB>:
**  Descripcion:    Lee un dato del USB
**  Parametros:     Ninguno
**  Retorno:        Dato leido
****************************************************************************************/
CODIGO_RAPIDO int16_t leerUSB(void)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b082      	sub	sp, #8
 801a88c:	af00      	add	r7, sp, #0
	usb_t *driver = punteroUSB();
 801a88e:	f7ff f8bd 	bl	8019a0c <punteroUSB>
 801a892:	6078      	str	r0, [r7, #4]
    int16_t byteRx;

    if (driver->cabezaRxBuffer != driver->colaRxBuffer) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a89a:	681a      	ldr	r2, [r3, #0]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	429a      	cmp	r2, r3
 801a8a6:	d024      	beq.n	801a8f2 <leerUSB+0x6a>
        byteRx = driver->rxBuffer[driver->colaRxBuffer];
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8ae:	685b      	ldr	r3, [r3, #4]
 801a8b0:	687a      	ldr	r2, [r7, #4]
 801a8b2:	4413      	add	r3, r2
 801a8b4:	f893 3ff5 	ldrb.w	r3, [r3, #4085]	; 0xff5
 801a8b8:	b2db      	uxtb	r3, r3
 801a8ba:	807b      	strh	r3, [r7, #2]

        if (driver->colaRxBuffer + 1 >= TAMANIO_BUFFER_RX_USB)
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8c2:	685b      	ldr	r3, [r3, #4]
 801a8c4:	3301      	adds	r3, #1
 801a8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a8ca:	d306      	bcc.n	801a8da <leerUSB+0x52>
        	driver->colaRxBuffer = 0;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8d2:	461a      	mov	r2, r3
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	6053      	str	r3, [r2, #4]
 801a8d8:	e008      	b.n	801a8ec <leerUSB+0x64>
        else
        	driver->colaRxBuffer++;
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	3301      	adds	r3, #1
 801a8e4:	687a      	ldr	r2, [r7, #4]
 801a8e6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801a8ea:	6053      	str	r3, [r2, #4]

        return byteRx;
 801a8ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a8f0:	e001      	b.n	801a8f6 <leerUSB+0x6e>
    }
    else
      return -1;
 801a8f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	3708      	adds	r7, #8
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}

0801a8fe <bytesRecibidosUSB>:
**  Descripcion:    Devuelve el numero de bytes recibidos por el USB
**  Parametros:     Ninguno
**  Retorno:        Numero de bytes
****************************************************************************************/
CODIGO_RAPIDO uint32_t bytesRecibidosUSB(void)
{
 801a8fe:	b580      	push	{r7, lr}
 801a900:	b086      	sub	sp, #24
 801a902:	af00      	add	r7, sp, #0
    usb_t *driver = punteroUSB();
 801a904:	f7ff f882 	bl	8019a0c <punteroUSB>
 801a908:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801a90a:	f3ef 8311 	mrs	r3, BASEPRI
 801a90e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a910:	68bb      	ldr	r3, [r7, #8]
    uint32_t numBytes;

    BLOQUE_ATOMICO(NVIC_PRIO_USB) {
 801a912:	b2db      	uxtb	r3, r3
 801a914:	71fb      	strb	r3, [r7, #7]
 801a916:	2080      	movs	r0, #128	; 0x80
 801a918:	f7ff fdb9 	bl	801a48e <ajustarBasepriMax>
 801a91c:	4603      	mov	r3, r0
 801a91e:	74fb      	strb	r3, [r7, #19]
 801a920:	e022      	b.n	801a968 <bytesRecibidosUSB+0x6a>
        if (driver->cabezaRxBuffer >= driver->colaRxBuffer)
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a928:	681a      	ldr	r2, [r3, #0]
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a930:	685b      	ldr	r3, [r3, #4]
 801a932:	429a      	cmp	r2, r3
 801a934:	d30a      	bcc.n	801a94c <bytesRecibidosUSB+0x4e>
        	numBytes = driver->cabezaRxBuffer - driver->colaRxBuffer;
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a944:	685b      	ldr	r3, [r3, #4]
 801a946:	1ad3      	subs	r3, r2, r3
 801a948:	617b      	str	r3, [r7, #20]
 801a94a:	e00b      	b.n	801a964 <bytesRecibidosUSB+0x66>
        else
        	numBytes = TAMANIO_BUFFER_RX_USB + driver->cabezaRxBuffer - driver->colaRxBuffer;
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a952:	681a      	ldr	r2, [r3, #0]
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	1ad3      	subs	r3, r2, r3
 801a95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a962:	617b      	str	r3, [r7, #20]
    BLOQUE_ATOMICO(NVIC_PRIO_USB) {
 801a964:	2300      	movs	r3, #0
 801a966:	74fb      	strb	r3, [r7, #19]
 801a968:	7cfb      	ldrb	r3, [r7, #19]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d1d9      	bne.n	801a922 <bytesRecibidosUSB+0x24>
 801a96e:	1dfb      	adds	r3, r7, #7
 801a970:	4618      	mov	r0, r3
 801a972:	f7ff fd7b 	bl	801a46c <restaurarBasepriMem>
    }

    return numBytes;
 801a976:	697b      	ldr	r3, [r7, #20]
}
 801a978:	4618      	mov	r0, r3
 801a97a:	3718      	adds	r7, #24
 801a97c:	46bd      	mov	sp, r7
 801a97e:	bd80      	pop	{r7, pc}

0801a980 <enviarDatoUSB>:
**  Descripcion:    Envia datos por el USB
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void enviarDatoUSB(void)
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b084      	sub	sp, #16
 801a984:	af00      	add	r7, sp, #0
    uint32_t tamBuff;
    static uint32_t ultimoTamBuff = 0;

    usb_t *driver = punteroUSB();
 801a986:	f7ff f841 	bl	8019a0c <punteroUSB>
 801a98a:	60b8      	str	r0, [r7, #8]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)driver->hal.hUSB.pClassData;
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a992:	607b      	str	r3, [r7, #4]

    if (hcdc->TxState == 0) {
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f040 8093 	bne.w	801aac6 <enviarDatoUSB+0x146>
        // El endpoint ha terminado transmitiendo el bloque previo
        if (ultimoTamBuff) {
 801a9a0:	4b4a      	ldr	r3, [pc, #296]	; (801aacc <enviarDatoUSB+0x14c>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d03d      	beq.n	801aa24 <enviarDatoUSB+0xa4>
            bool needZeroLengthPacket = ultimoTamBuff % 64 == 0;
 801a9a8:	4b48      	ldr	r3, [pc, #288]	; (801aacc <enviarDatoUSB+0x14c>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	bf0c      	ite	eq
 801a9b4:	2301      	moveq	r3, #1
 801a9b6:	2300      	movne	r3, #0
 801a9b8:	70fb      	strb	r3, [r7, #3]

            // Mueve la cola del bufer de anillo en funcion de la transmision exitosa anterior
            driver->colaTxBuffer += ultimoTamBuff;
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a9c0:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 801a9c4:	4b41      	ldr	r3, [pc, #260]	; (801aacc <enviarDatoUSB+0x14c>)
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4413      	add	r3, r2
 801a9ca:	68ba      	ldr	r2, [r7, #8]
 801a9cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a9d0:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
            if (driver->colaTxBuffer == TAMANIO_BUFFER_TX_USB)
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a9da:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
 801a9de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a9e2:	d106      	bne.n	801a9f2 <enviarDatoUSB+0x72>
            	driver->colaTxBuffer = 0;
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a9ea:	461a      	mov	r2, r3
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc

            ultimoTamBuff = 0;
 801a9f2:	4b36      	ldr	r3, [pc, #216]	; (801aacc <enviarDatoUSB+0x14c>)
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	601a      	str	r2, [r3, #0]

            if (needZeroLengthPacket) {
 801a9f8:	78fb      	ldrb	r3, [r7, #3]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d012      	beq.n	801aa24 <enviarDatoUSB+0xa4>
                USBD_CDC_SetTxBuffer(&driver->hal.hUSB, (uint8_t*)&driver->txBuffer[driver->colaTxBuffer], 0);
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	f103 0008 	add.w	r0, r3, #8
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa0a:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 801aa0e:	f241 73f0 	movw	r3, #6128	; 0x17f0
 801aa12:	4413      	add	r3, r2
 801aa14:	68ba      	ldr	r2, [r7, #8]
 801aa16:	4413      	add	r3, r2
 801aa18:	3305      	adds	r3, #5
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	f019 f81b 	bl	8033a58 <USBD_CDC_SetTxBuffer>
                return;
 801aa22:	e050      	b.n	801aac6 <enviarDatoUSB+0x146>
            }
        }

        if (driver->colaTxBuffer != driver->cabezaTxBuffer) {
 801aa24:	68bb      	ldr	r3, [r7, #8]
 801aa26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa2a:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 801aa2e:	68bb      	ldr	r3, [r7, #8]
 801aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa34:	f8d3 3ff8 	ldr.w	r3, [r3, #4088]	; 0xff8
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d044      	beq.n	801aac6 <enviarDatoUSB+0x146>
            if (driver->colaTxBuffer > driver->cabezaTxBuffer)
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa42:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 801aa46:	68bb      	ldr	r3, [r7, #8]
 801aa48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa4c:	f8d3 3ff8 	ldr.w	r3, [r3, #4088]	; 0xff8
 801aa50:	429a      	cmp	r2, r3
 801aa52:	d908      	bls.n	801aa66 <enviarDatoUSB+0xe6>
            	tamBuff = TAMANIO_BUFFER_TX_USB - driver->colaTxBuffer;
 801aa54:	68bb      	ldr	r3, [r7, #8]
 801aa56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa5a:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
 801aa5e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 801aa62:	60fb      	str	r3, [r7, #12]
 801aa64:	e00b      	b.n	801aa7e <enviarDatoUSB+0xfe>
            else
            	tamBuff = driver->cabezaTxBuffer - driver->colaTxBuffer;
 801aa66:	68bb      	ldr	r3, [r7, #8]
 801aa68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa6c:	f8d3 2ff8 	ldr.w	r2, [r3, #4088]	; 0xff8
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa76:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
 801aa7a:	1ad3      	subs	r3, r2, r3
 801aa7c:	60fb      	str	r3, [r7, #12]

            if (tamBuff > TAMANIO_BUFFER_TX_USB)
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801aa84:	d902      	bls.n	801aa8c <enviarDatoUSB+0x10c>
            	tamBuff = TAMANIO_BUFFER_TX_USB;
 801aa86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801aa8a:	60fb      	str	r3, [r7, #12]

            USBD_CDC_SetTxBuffer(&driver->hal.hUSB, (uint8_t*)&driver->txBuffer[driver->colaTxBuffer], tamBuff);
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	f103 0008 	add.w	r0, r3, #8
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa98:	f8d3 2ffc 	ldr.w	r2, [r3, #4092]	; 0xffc
 801aa9c:	f241 73f0 	movw	r3, #6128	; 0x17f0
 801aaa0:	4413      	add	r3, r2
 801aaa2:	68ba      	ldr	r2, [r7, #8]
 801aaa4:	4413      	add	r3, r2
 801aaa6:	3305      	adds	r3, #5
 801aaa8:	68fa      	ldr	r2, [r7, #12]
 801aaaa:	4619      	mov	r1, r3
 801aaac:	f018 ffd4 	bl	8033a58 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(&driver->hal.hUSB) == USBD_OK)
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	3308      	adds	r3, #8
 801aab4:	4618      	mov	r0, r3
 801aab6:	f019 f80f 	bl	8033ad8 <USBD_CDC_TransmitPacket>
 801aaba:	4603      	mov	r3, r0
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d102      	bne.n	801aac6 <enviarDatoUSB+0x146>
            	ultimoTamBuff = tamBuff;
 801aac0:	4a02      	ldr	r2, [pc, #8]	; (801aacc <enviarDatoUSB+0x14c>)
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	6013      	str	r3, [r2, #0]
        }
    }
}
 801aac6:	3710      	adds	r7, #16
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}
 801aacc:	2000a1a0 	.word	0x2000a1a0

0801aad0 <asignarHALusb>:
**  Descripcion:    Asigna el HAL a la estructura del driver
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool asignarHALusb(void)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
    usb_t *driver = punteroUSB();
 801aad6:	f7fe ff99 	bl	8019a0c <punteroUSB>
 801aada:	6078      	str	r0, [r7, #4]

    // Asignamos los pines
    driver->hal.pinDP = hardwareUSB.pinDP;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	4a0d      	ldr	r2, [pc, #52]	; (801ab14 <asignarHALusb+0x44>)
 801aae0:	8892      	ldrh	r2, [r2, #4]
 801aae2:	f8a3 27ee 	strh.w	r2, [r3, #2030]	; 0x7ee
    driver->hal.pinDM = hardwareUSB.pinDM;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	4a0a      	ldr	r2, [pc, #40]	; (801ab14 <asignarHALusb+0x44>)
 801aaea:	88d2      	ldrh	r2, [r2, #6]
 801aaec:	f8a3 27f0 	strh.w	r2, [r3, #2032]	; 0x7f0

    // Asignamos las interrupciones
    driver->hal.IRQ = hardwareUSB.IRQ;
 801aaf0:	2243      	movs	r2, #67	; 0x43
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
    driver->hal.prioridadIRQ = hardwareUSB.prioridadIRQ;
 801aaf8:	2280      	movs	r2, #128	; 0x80
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed

    // Asignamos la instancia
    driver->hal.hPCD.Instance = hardwareUSB.reg;
 801ab00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

    return true;
 801ab0a:	2301      	movs	r3, #1
}
 801ab0c:	4618      	mov	r0, r3
 801ab0e:	3708      	adds	r7, #8
 801ab10:	46bd      	mov	sp, r7
 801ab12:	bd80      	pop	{r7, pc}
 801ab14:	0803b8a4 	.word	0x0803b8a4

0801ab18 <configFC>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configFC_t, configFC);
 801ab18:	b480      	push	{r7}
 801ab1a:	af00      	add	r7, sp, #0
 801ab1c:	4b02      	ldr	r3, [pc, #8]	; (801ab28 <configFC+0x10>)
 801ab1e:	4618      	mov	r0, r3
 801ab20:	46bd      	mov	sp, r7
 801ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab26:	4770      	bx	lr
 801ab28:	2000a794 	.word	0x2000a794

0801ab2c <iniciarControladores>:
**  Descripcion:    Inicia los controladores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarControladores(void)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b082      	sub	sp, #8
 801ab30:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 3; i++) {
 801ab32:	2300      	movs	r3, #0
 801ab34:	71fb      	strb	r3, [r7, #7]
 801ab36:	e03e      	b.n	801abb6 <iniciarControladores+0x8a>
        //iniciarPID(&pidVelAng[i],  configPID()->pVelAng[i].kp, configPID()->pVelAng[i].ki, configPID()->pVelAng[i].kd,
        		                   //configPID()->pVelAng[i].kff, configPID()->pVelAng[i].limIntegral, configPID()->pVelAng[i].limSalida);

        iniciarPID(&pidVelAng[0],  0.000425, 0.0005, 0.00002,  0.0, 0.5, 1);
 801ab38:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801ab3c:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 801ab40:	eddf 1a24 	vldr	s3, [pc, #144]	; 801abd4 <iniciarControladores+0xa8>
 801ab44:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801abd8 <iniciarControladores+0xac>
 801ab48:	eddf 0a24 	vldr	s1, [pc, #144]	; 801abdc <iniciarControladores+0xb0>
 801ab4c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801abe0 <iniciarControladores+0xb4>
 801ab50:	4824      	ldr	r0, [pc, #144]	; (801abe4 <iniciarControladores+0xb8>)
 801ab52:	f003 fa2f 	bl	801dfb4 <iniciarPID>
        iniciarPID(&pidVelAng[1],  0.00119,  0.0014, 0.000056, 0.0, 0.5, 1);
 801ab56:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801ab5a:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 801ab5e:	eddf 1a1d 	vldr	s3, [pc, #116]	; 801abd4 <iniciarControladores+0xa8>
 801ab62:	ed9f 1a21 	vldr	s2, [pc, #132]	; 801abe8 <iniciarControladores+0xbc>
 801ab66:	eddf 0a21 	vldr	s1, [pc, #132]	; 801abec <iniciarControladores+0xc0>
 801ab6a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 801abf0 <iniciarControladores+0xc4>
 801ab6e:	4821      	ldr	r0, [pc, #132]	; (801abf4 <iniciarControladores+0xc8>)
 801ab70:	f003 fa20 	bl	801dfb4 <iniciarPID>

        //iniciarPID(&pidActitud[i], configPID()->pActitud[i].kp, configPID()->pActitud[i].ki, configPID()->pActitud[i].kd,
        		                   //configPID()->pActitud[i].kff, configPID()->pActitud[i].limIntegral, configPID()->pActitud[i].limSalida);

        iniciarPID(&pidActitud[0], 5, 0, 0.0, 0.0, 2000, 2000);
 801ab74:	eddf 2a20 	vldr	s5, [pc, #128]	; 801abf8 <iniciarControladores+0xcc>
 801ab78:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 801abf8 <iniciarControladores+0xcc>
 801ab7c:	eddf 1a15 	vldr	s3, [pc, #84]	; 801abd4 <iniciarControladores+0xa8>
 801ab80:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801abd4 <iniciarControladores+0xa8>
 801ab84:	eddf 0a13 	vldr	s1, [pc, #76]	; 801abd4 <iniciarControladores+0xa8>
 801ab88:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 801ab8c:	481b      	ldr	r0, [pc, #108]	; (801abfc <iniciarControladores+0xd0>)
 801ab8e:	f003 fa11 	bl	801dfb4 <iniciarPID>
        iniciarPID(&pidActitud[1], 4, 0.0, 0.0, 0.0, 2000, 2000);
 801ab92:	eddf 2a19 	vldr	s5, [pc, #100]	; 801abf8 <iniciarControladores+0xcc>
 801ab96:	ed9f 2a18 	vldr	s4, [pc, #96]	; 801abf8 <iniciarControladores+0xcc>
 801ab9a:	eddf 1a0e 	vldr	s3, [pc, #56]	; 801abd4 <iniciarControladores+0xa8>
 801ab9e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 801abd4 <iniciarControladores+0xa8>
 801aba2:	eddf 0a0c 	vldr	s1, [pc, #48]	; 801abd4 <iniciarControladores+0xa8>
 801aba6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801abaa:	4815      	ldr	r0, [pc, #84]	; (801ac00 <iniciarControladores+0xd4>)
 801abac:	f003 fa02 	bl	801dfb4 <iniciarPID>
    for (uint8_t i = 0; i < 3; i++) {
 801abb0:	79fb      	ldrb	r3, [r7, #7]
 801abb2:	3301      	adds	r3, #1
 801abb4:	71fb      	strb	r3, [r7, #7]
 801abb6:	79fb      	ldrb	r3, [r7, #7]
 801abb8:	2b02      	cmp	r3, #2
 801abba:	d9bd      	bls.n	801ab38 <iniciarControladores+0xc>
    }

    ajustarFiltroAcelAngAHRS(configFC()->frecLazoVelAngular);
 801abbc:	f7ff ffac 	bl	801ab18 <configFC>
 801abc0:	4603      	mov	r3, r0
 801abc2:	881b      	ldrh	r3, [r3, #0]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7f5 fe6b 	bl	80108a0 <ajustarFiltroAcelAngAHRS>
}
 801abca:	bf00      	nop
 801abcc:	3708      	adds	r7, #8
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}
 801abd2:	bf00      	nop
 801abd4:	00000000 	.word	0x00000000
 801abd8:	37a7c5ac 	.word	0x37a7c5ac
 801abdc:	3a03126f 	.word	0x3a03126f
 801abe0:	39ded289 	.word	0x39ded289
 801abe4:	2000a1a4 	.word	0x2000a1a4
 801abe8:	386ae18b 	.word	0x386ae18b
 801abec:	3ab78034 	.word	0x3ab78034
 801abf0:	3a9bf9c6 	.word	0x3a9bf9c6
 801abf4:	2000a1c4 	.word	0x2000a1c4
 801abf8:	44fa0000 	.word	0x44fa0000
 801abfc:	2000a204 	.word	0x2000a204
 801ac00:	2000a224 	.word	0x2000a224
 801ac04:	00000000 	.word	0x00000000

0801ac08 <actualizarControlVelAngular>:
**  Descripcion:    Actualiza el control de velocidad angular
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarControlVelAngular(void)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b088      	sub	sp, #32
 801ac0c:	af00      	add	r7, sp, #0
    float velAngular[3], acelAngular[3];
    uint32_t tiempoAct = micros();
 801ac0e:	f7fc ff63 	bl	8017ad8 <micros>
 801ac12:	61f8      	str	r0, [r7, #28]
    float dt = (tiempoAct - tiempoAntVelAng) / 1000000.0;
 801ac14:	4b3c      	ldr	r3, [pc, #240]	; (801ad08 <actualizarControlVelAngular+0x100>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	69fa      	ldr	r2, [r7, #28]
 801ac1a:	1ad3      	subs	r3, r2, r3
 801ac1c:	ee07 3a90 	vmov	s15, r3
 801ac20:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801ac24:	ed9f 5b36 	vldr	d5, [pc, #216]	; 801ad00 <actualizarControlVelAngular+0xf8>
 801ac28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ac2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ac30:	edc7 7a06 	vstr	s15, [r7, #24]
    tiempoAntVelAng = tiempoAct;
 801ac34:	4a34      	ldr	r2, [pc, #208]	; (801ad08 <actualizarControlVelAngular+0x100>)
 801ac36:	69fb      	ldr	r3, [r7, #28]
 801ac38:	6013      	str	r3, [r2, #0]

    giroIMU(velAngular);
 801ac3a:	f107 030c 	add.w	r3, r7, #12
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f00a ff54 	bl	8025aec <giroIMU>
    acelAngularAHRS(acelAngular);
 801ac44:	463b      	mov	r3, r7
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7f6 f9cc 	bl	8010fe4 <acelAngularAHRS>

    //for (uint8_t i = 0; i < 3; i++)
    	//uPID[i] = actualizarPID(&pidVelAng[i], uActPID[i], velAngular[i], acelAng[i], dt, 1);
    uPID[0] = actualizarPID(&pidVelAng[0], uActPID[0], velAngular[0], acelAngular[0], dt, !ordenPararMotores);
 801ac4c:	4b2f      	ldr	r3, [pc, #188]	; (801ad0c <actualizarControlVelAngular+0x104>)
 801ac4e:	edd3 7a00 	vldr	s15, [r3]
 801ac52:	ed97 7a03 	vldr	s14, [r7, #12]
 801ac56:	edd7 6a00 	vldr	s13, [r7]
 801ac5a:	4b2d      	ldr	r3, [pc, #180]	; (801ad10 <actualizarControlVelAngular+0x108>)
 801ac5c:	781b      	ldrb	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	bf14      	ite	ne
 801ac62:	2301      	movne	r3, #1
 801ac64:	2300      	moveq	r3, #0
 801ac66:	b2db      	uxtb	r3, r3
 801ac68:	f083 0301 	eor.w	r3, r3, #1
 801ac6c:	b2db      	uxtb	r3, r3
 801ac6e:	f003 0301 	and.w	r3, r3, #1
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	4619      	mov	r1, r3
 801ac76:	edd7 1a06 	vldr	s3, [r7, #24]
 801ac7a:	eeb0 1a66 	vmov.f32	s2, s13
 801ac7e:	eef0 0a47 	vmov.f32	s1, s14
 801ac82:	eeb0 0a67 	vmov.f32	s0, s15
 801ac86:	4823      	ldr	r0, [pc, #140]	; (801ad14 <actualizarControlVelAngular+0x10c>)
 801ac88:	f003 f9c0 	bl	801e00c <actualizarPID>
 801ac8c:	eef0 7a40 	vmov.f32	s15, s0
 801ac90:	4b21      	ldr	r3, [pc, #132]	; (801ad18 <actualizarControlVelAngular+0x110>)
 801ac92:	edc3 7a00 	vstr	s15, [r3]
    uPID[1] = actualizarPID(&pidVelAng[1], uActPID[1], velAngular[1], acelAngular[1], dt, !ordenPararMotores);
 801ac96:	4b1d      	ldr	r3, [pc, #116]	; (801ad0c <actualizarControlVelAngular+0x104>)
 801ac98:	edd3 7a01 	vldr	s15, [r3, #4]
 801ac9c:	ed97 7a04 	vldr	s14, [r7, #16]
 801aca0:	edd7 6a01 	vldr	s13, [r7, #4]
 801aca4:	4b1a      	ldr	r3, [pc, #104]	; (801ad10 <actualizarControlVelAngular+0x108>)
 801aca6:	781b      	ldrb	r3, [r3, #0]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	bf14      	ite	ne
 801acac:	2301      	movne	r3, #1
 801acae:	2300      	moveq	r3, #0
 801acb0:	b2db      	uxtb	r3, r3
 801acb2:	f083 0301 	eor.w	r3, r3, #1
 801acb6:	b2db      	uxtb	r3, r3
 801acb8:	f003 0301 	and.w	r3, r3, #1
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	4619      	mov	r1, r3
 801acc0:	edd7 1a06 	vldr	s3, [r7, #24]
 801acc4:	eeb0 1a66 	vmov.f32	s2, s13
 801acc8:	eef0 0a47 	vmov.f32	s1, s14
 801accc:	eeb0 0a67 	vmov.f32	s0, s15
 801acd0:	4812      	ldr	r0, [pc, #72]	; (801ad1c <actualizarControlVelAngular+0x114>)
 801acd2:	f003 f99b 	bl	801e00c <actualizarPID>
 801acd6:	eef0 7a40 	vmov.f32	s15, s0
 801acda:	4b0f      	ldr	r3, [pc, #60]	; (801ad18 <actualizarControlVelAngular+0x110>)
 801acdc:	edc3 7a01 	vstr	s15, [r3, #4]

    if (ordenPararMotores) {
 801ace0:	4b0b      	ldr	r3, [pc, #44]	; (801ad10 <actualizarControlVelAngular+0x108>)
 801ace2:	781b      	ldrb	r3, [r3, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d005      	beq.n	801acf4 <actualizarControlVelAngular+0xec>
        resetearIntegralPID(&pidVelAng[0]);
 801ace8:	480a      	ldr	r0, [pc, #40]	; (801ad14 <actualizarControlVelAngular+0x10c>)
 801acea:	f003 fa06 	bl	801e0fa <resetearIntegralPID>
        resetearIntegralPID(&pidVelAng[1]);
 801acee:	480b      	ldr	r0, [pc, #44]	; (801ad1c <actualizarControlVelAngular+0x114>)
 801acf0:	f003 fa03 	bl	801e0fa <resetearIntegralPID>
    }
}
 801acf4:	bf00      	nop
 801acf6:	3720      	adds	r7, #32
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}
 801acfc:	f3af 8000 	nop.w
 801ad00:	00000000 	.word	0x00000000
 801ad04:	412e8480 	.word	0x412e8480
 801ad08:	2000a280 	.word	0x2000a280
 801ad0c:	2000a274 	.word	0x2000a274
 801ad10:	2000024c 	.word	0x2000024c
 801ad14:	2000a1a4 	.word	0x2000a1a4
 801ad18:	2000a264 	.word	0x2000a264
 801ad1c:	2000a1c4 	.word	0x2000a1c4

0801ad20 <actualizarControlActitud>:
**  Descripcion:    Actualiza el control de actitud
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarControlActitud(void)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b082      	sub	sp, #8
 801ad24:	af00      	add	r7, sp, #0
    uint32_t tiempoAct = micros();
 801ad26:	f7fc fed7 	bl	8017ad8 <micros>
 801ad2a:	6078      	str	r0, [r7, #4]
    float dt = (tiempoAct - tiempoAntAct) / 1000000.0;
 801ad2c:	4b3e      	ldr	r3, [pc, #248]	; (801ae28 <actualizarControlActitud+0x108>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	687a      	ldr	r2, [r7, #4]
 801ad32:	1ad3      	subs	r3, r2, r3
 801ad34:	ee07 3a90 	vmov	s15, r3
 801ad38:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801ad3c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801ae20 <actualizarControlActitud+0x100>
 801ad40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ad44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ad48:	edc7 7a00 	vstr	s15, [r7]
    tiempoAntAct = tiempoAct;
 801ad4c:	4a36      	ldr	r2, [pc, #216]	; (801ae28 <actualizarControlActitud+0x108>)
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	6013      	str	r3, [r2, #0]



    refAngulosRC(ref);
 801ad52:	4836      	ldr	r0, [pc, #216]	; (801ae2c <actualizarControlActitud+0x10c>)
 801ad54:	f001 f98e 	bl	801c074 <refAngulosRC>
    giroIMU(velAngular);
 801ad58:	4835      	ldr	r0, [pc, #212]	; (801ae30 <actualizarControlActitud+0x110>)
 801ad5a:	f00a fec7 	bl	8025aec <giroIMU>
    actitudAHRS(euler);
 801ad5e:	4835      	ldr	r0, [pc, #212]	; (801ae34 <actualizarControlActitud+0x114>)
 801ad60:	f7f6 f926 	bl	8010fb0 <actitudAHRS>

    //for (uint8_t i = 0; i < 3; i++)
    	//uActPID[i] = actualizarPID(&pidActitud[i], ref[i], euler[i], velAngular[i], dt, 1);
    uActPID[0] = actualizarPID(&pidActitud[0], ref[0], euler[0], velAngular[0], dt, !ordenPararMotores);
 801ad64:	4b31      	ldr	r3, [pc, #196]	; (801ae2c <actualizarControlActitud+0x10c>)
 801ad66:	edd3 7a00 	vldr	s15, [r3]
 801ad6a:	4b32      	ldr	r3, [pc, #200]	; (801ae34 <actualizarControlActitud+0x114>)
 801ad6c:	ed93 7a00 	vldr	s14, [r3]
 801ad70:	4b2f      	ldr	r3, [pc, #188]	; (801ae30 <actualizarControlActitud+0x110>)
 801ad72:	edd3 6a00 	vldr	s13, [r3]
 801ad76:	4b30      	ldr	r3, [pc, #192]	; (801ae38 <actualizarControlActitud+0x118>)
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	bf14      	ite	ne
 801ad7e:	2301      	movne	r3, #1
 801ad80:	2300      	moveq	r3, #0
 801ad82:	b2db      	uxtb	r3, r3
 801ad84:	f083 0301 	eor.w	r3, r3, #1
 801ad88:	b2db      	uxtb	r3, r3
 801ad8a:	f003 0301 	and.w	r3, r3, #1
 801ad8e:	b2db      	uxtb	r3, r3
 801ad90:	4619      	mov	r1, r3
 801ad92:	edd7 1a00 	vldr	s3, [r7]
 801ad96:	eeb0 1a66 	vmov.f32	s2, s13
 801ad9a:	eef0 0a47 	vmov.f32	s1, s14
 801ad9e:	eeb0 0a67 	vmov.f32	s0, s15
 801ada2:	4826      	ldr	r0, [pc, #152]	; (801ae3c <actualizarControlActitud+0x11c>)
 801ada4:	f003 f932 	bl	801e00c <actualizarPID>
 801ada8:	eef0 7a40 	vmov.f32	s15, s0
 801adac:	4b24      	ldr	r3, [pc, #144]	; (801ae40 <actualizarControlActitud+0x120>)
 801adae:	edc3 7a00 	vstr	s15, [r3]
    uActPID[1] = actualizarPID(&pidActitud[1], ref[1], euler[1], velAngular[1], dt, !ordenPararMotores);
 801adb2:	4b1e      	ldr	r3, [pc, #120]	; (801ae2c <actualizarControlActitud+0x10c>)
 801adb4:	edd3 7a01 	vldr	s15, [r3, #4]
 801adb8:	4b1e      	ldr	r3, [pc, #120]	; (801ae34 <actualizarControlActitud+0x114>)
 801adba:	ed93 7a01 	vldr	s14, [r3, #4]
 801adbe:	4b1c      	ldr	r3, [pc, #112]	; (801ae30 <actualizarControlActitud+0x110>)
 801adc0:	edd3 6a01 	vldr	s13, [r3, #4]
 801adc4:	4b1c      	ldr	r3, [pc, #112]	; (801ae38 <actualizarControlActitud+0x118>)
 801adc6:	781b      	ldrb	r3, [r3, #0]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	bf14      	ite	ne
 801adcc:	2301      	movne	r3, #1
 801adce:	2300      	moveq	r3, #0
 801add0:	b2db      	uxtb	r3, r3
 801add2:	f083 0301 	eor.w	r3, r3, #1
 801add6:	b2db      	uxtb	r3, r3
 801add8:	f003 0301 	and.w	r3, r3, #1
 801addc:	b2db      	uxtb	r3, r3
 801adde:	4619      	mov	r1, r3
 801ade0:	edd7 1a00 	vldr	s3, [r7]
 801ade4:	eeb0 1a66 	vmov.f32	s2, s13
 801ade8:	eef0 0a47 	vmov.f32	s1, s14
 801adec:	eeb0 0a67 	vmov.f32	s0, s15
 801adf0:	4814      	ldr	r0, [pc, #80]	; (801ae44 <actualizarControlActitud+0x124>)
 801adf2:	f003 f90b 	bl	801e00c <actualizarPID>
 801adf6:	eef0 7a40 	vmov.f32	s15, s0
 801adfa:	4b11      	ldr	r3, [pc, #68]	; (801ae40 <actualizarControlActitud+0x120>)
 801adfc:	edc3 7a01 	vstr	s15, [r3, #4]

    if (ordenPararMotores) {
 801ae00:	4b0d      	ldr	r3, [pc, #52]	; (801ae38 <actualizarControlActitud+0x118>)
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d005      	beq.n	801ae14 <actualizarControlActitud+0xf4>
        resetearIntegralPID(&pidActitud[0]);
 801ae08:	480c      	ldr	r0, [pc, #48]	; (801ae3c <actualizarControlActitud+0x11c>)
 801ae0a:	f003 f976 	bl	801e0fa <resetearIntegralPID>
        resetearIntegralPID(&pidActitud[1]);
 801ae0e:	480d      	ldr	r0, [pc, #52]	; (801ae44 <actualizarControlActitud+0x124>)
 801ae10:	f003 f973 	bl	801e0fa <resetearIntegralPID>
    }
}
 801ae14:	bf00      	nop
 801ae16:	3708      	adds	r7, #8
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}
 801ae1c:	f3af 8000 	nop.w
 801ae20:	00000000 	.word	0x00000000
 801ae24:	412e8480 	.word	0x412e8480
 801ae28:	2000a284 	.word	0x2000a284
 801ae2c:	2000a288 	.word	0x2000a288
 801ae30:	2000a2a0 	.word	0x2000a2a0
 801ae34:	2000a294 	.word	0x2000a294
 801ae38:	2000024c 	.word	0x2000024c
 801ae3c:	2000a204 	.word	0x2000a204
 801ae40:	2000a274 	.word	0x2000a274
 801ae44:	2000a224 	.word	0x2000a224

0801ae48 <uRollPID>:
**  Descripcion:    Devulve la accion de control de roll
**  Parametros:     Ninguno
**  Retorno:        Accion de control Roll
****************************************************************************************/
float uRollPID(void)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	af00      	add	r7, sp, #0
    return uPID[ROLL];
 801ae4c:	4b04      	ldr	r3, [pc, #16]	; (801ae60 <uRollPID+0x18>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	ee07 3a90 	vmov	s15, r3
}
 801ae54:	eeb0 0a67 	vmov.f32	s0, s15
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5e:	4770      	bx	lr
 801ae60:	2000a264 	.word	0x2000a264

0801ae64 <uPitchPID>:
**  Descripcion:    Devulve la accion de control de pitch
**  Parametros:     Ninguno
**  Retorno:        Accion de control Pitch
****************************************************************************************/
float uPitchPID(void)
{
 801ae64:	b480      	push	{r7}
 801ae66:	af00      	add	r7, sp, #0
    return uPID[PITCH];
 801ae68:	4b04      	ldr	r3, [pc, #16]	; (801ae7c <uPitchPID+0x18>)
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	ee07 3a90 	vmov	s15, r3
}
 801ae70:	eeb0 0a67 	vmov.f32	s0, s15
 801ae74:	46bd      	mov	sp, r7
 801ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7a:	4770      	bx	lr
 801ae7c:	2000a264 	.word	0x2000a264

0801ae80 <uYawPID>:
**  Descripcion:    Devulve la accion de control de yaw
**  Parametros:     Ninguno
**  Retorno:        Accion de control Yaw
****************************************************************************************/
float uYawPID(void)
{
 801ae80:	b480      	push	{r7}
 801ae82:	af00      	add	r7, sp, #0
    return uPID[YAW];
 801ae84:	4b04      	ldr	r3, [pc, #16]	; (801ae98 <uYawPID+0x18>)
 801ae86:	689b      	ldr	r3, [r3, #8]
 801ae88:	ee07 3a90 	vmov	s15, r3
}
 801ae8c:	eeb0 0a67 	vmov.f32	s0, s15
 801ae90:	46bd      	mov	sp, r7
 801ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae96:	4770      	bx	lr
 801ae98:	2000a264 	.word	0x2000a264

0801ae9c <configFC>:
 801ae9c:	b480      	push	{r7}
 801ae9e:	af00      	add	r7, sp, #0
 801aea0:	4b02      	ldr	r3, [pc, #8]	; (801aeac <configFC+0x10>)
 801aea2:	4618      	mov	r0, r3
 801aea4:	46bd      	mov	sp, r7
 801aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeaa:	4770      	bx	lr
 801aeac:	2000a794 	.word	0x2000a794

0801aeb0 <iniciarFC>:
**  Descripcion:    Inicia la controladora de vuelo
**  Parametros:     Ninguno
**  Retorno:        True si OK
****************************************************************************************/
bool iniciarFC(void)
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	af00      	add	r7, sp, #0
	// Ajustamos las frecuencias del scheduler
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_VEL_ANGULAR_FC, PERIODO_TAREA_HZ_SCHEDULER(configFC()->frecLazoVelAngular));
 801aeb4:	f7ff fff2 	bl	801ae9c <configFC>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	881b      	ldrh	r3, [r3, #0]
 801aebc:	461a      	mov	r2, r3
 801aebe:	4b12      	ldr	r3, [pc, #72]	; (801af08 <iniciarFC+0x58>)
 801aec0:	fb93 f3f2 	sdiv	r3, r3, r2
 801aec4:	4619      	mov	r1, r3
 801aec6:	2011      	movs	r0, #17
 801aec8:	f004 f852 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_ACTITUD_FC, PERIODO_TAREA_HZ_SCHEDULER(configFC()->frecLazoActitud));
 801aecc:	f7ff ffe6 	bl	801ae9c <configFC>
 801aed0:	4603      	mov	r3, r0
 801aed2:	885b      	ldrh	r3, [r3, #2]
 801aed4:	461a      	mov	r2, r3
 801aed6:	4b0c      	ldr	r3, [pc, #48]	; (801af08 <iniciarFC+0x58>)
 801aed8:	fb93 f3f2 	sdiv	r3, r3, r2
 801aedc:	4619      	mov	r1, r3
 801aede:	2012      	movs	r0, #18
 801aee0:	f004 f846 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_POSICION_FC, PERIODO_TAREA_HZ_SCHEDULER(configFC()->frecLazoPosicion));
 801aee4:	f7ff ffda 	bl	801ae9c <configFC>
 801aee8:	4603      	mov	r3, r0
 801aeea:	889b      	ldrh	r3, [r3, #4]
 801aeec:	461a      	mov	r2, r3
 801aeee:	4b06      	ldr	r3, [pc, #24]	; (801af08 <iniciarFC+0x58>)
 801aef0:	fb93 f3f2 	sdiv	r3, r3, r2
 801aef4:	4619      	mov	r1, r3
 801aef6:	2013      	movs	r0, #19
 801aef8:	f004 f83a 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>

    iniciarControladores();
 801aefc:	f7ff fe16 	bl	801ab2c <iniciarControladores>
    return true;
 801af00:	2301      	movs	r3, #1
}
 801af02:	4618      	mov	r0, r3
 801af04:	bd80      	pop	{r7, pc}
 801af06:	bf00      	nop
 801af08:	000f4240 	.word	0x000f4240

0801af0c <actualizarLazoVelAngularFC>:
**  Descripcion:    Actualiza el bucle del control de velocidad angular
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarLazoVelAngularFC(uint32_t tiempoActual)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b082      	sub	sp, #8
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]


//#ifndef LEER_IMU_SCHEDULER
	//leerIMU(tiempoActual);
//#endif
	actualizarControlVelAngular();
 801af14:	f7ff fe78 	bl	801ac08 <actualizarControlVelAngular>
    actualizarMixer();
 801af18:	f000 f882 	bl	801b020 <actualizarMixer>
}
 801af1c:	bf00      	nop
 801af1e:	3708      	adds	r7, #8
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}

0801af24 <actualizarLazoActitudFC>:
**  Descripcion:    Actualiza el lazo de orientacion
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarLazoActitudFC(uint32_t tiempoActual)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    actualizarActitudAHRS();
 801af2c:	f7f5 fce8 	bl	8010900 <actualizarActitudAHRS>
    actualizarControlActitud();
 801af30:	f7ff fef6 	bl	801ad20 <actualizarControlActitud>




    if (reaction.id == 'A' && iniR) {
 801af34:	4b07      	ldr	r3, [pc, #28]	; (801af54 <actualizarLazoActitudFC+0x30>)
 801af36:	791b      	ldrb	r3, [r3, #4]
 801af38:	2b41      	cmp	r3, #65	; 0x41
 801af3a:	d106      	bne.n	801af4a <actualizarLazoActitudFC+0x26>
 801af3c:	4b06      	ldr	r3, [pc, #24]	; (801af58 <actualizarLazoActitudFC+0x34>)
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d002      	beq.n	801af4a <actualizarLazoActitudFC+0x26>
    	reaction.id = 'B';
 801af44:	4b03      	ldr	r3, [pc, #12]	; (801af54 <actualizarLazoActitudFC+0x30>)
 801af46:	2242      	movs	r2, #66	; 0x42
 801af48:	711a      	strb	r2, [r3, #4]
    }
}
 801af4a:	bf00      	nop
 801af4c:	3708      	adds	r7, #8
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
 801af52:	bf00      	nop
 801af54:	2000c67c 	.word	0x2000c67c
 801af58:	2000c685 	.word	0x2000c685

0801af5c <actualizarLazoPosicionFC>:
**  Descripcion:    Actualiza el lazo de posicion
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarLazoPosicionFC(uint32_t tiempoActual)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b082      	sub	sp, #8
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    actualizarPosicionAHRS();
 801af64:	f7f5 ff9a 	bl	8010e9c <actualizarPosicionAHRS>
}
 801af68:	bf00      	nop
 801af6a:	3708      	adds	r7, #8
 801af6c:	46bd      	mov	sp, r7
 801af6e:	bd80      	pop	{r7, pc}

0801af70 <configMixer>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configMixer_t, configMixer);
 801af70:	b480      	push	{r7}
 801af72:	af00      	add	r7, sp, #0
 801af74:	4b02      	ldr	r3, [pc, #8]	; (801af80 <configMixer+0x10>)
 801af76:	4618      	mov	r0, r3
 801af78:	46bd      	mov	sp, r7
 801af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7e:	4770      	bx	lr
 801af80:	2000a898 	.word	0x2000a898

0801af84 <iniciarMixer>:
**  Descripcion:    Inicia el mixer
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarMixer(void)
{
 801af84:	b590      	push	{r4, r7, lr}
 801af86:	b083      	sub	sp, #12
 801af88:	af00      	add	r7, sp, #0
	cntMotores = 0;
 801af8a:	4b22      	ldr	r3, [pc, #136]	; (801b014 <iniciarMixer+0x90>)
 801af8c:	2200      	movs	r2, #0
 801af8e:	701a      	strb	r2, [r3, #0]
	cntMotores = tablaMixer[configMixer()->tipoDrone].numMotores;
 801af90:	f7ff ffee 	bl	801af70 <configMixer>
 801af94:	4603      	mov	r3, r0
 801af96:	781b      	ldrb	r3, [r3, #0]
 801af98:	461a      	mov	r2, r3
 801af9a:	4b1f      	ldr	r3, [pc, #124]	; (801b018 <iniciarMixer+0x94>)
 801af9c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801afa0:	4b1c      	ldr	r3, [pc, #112]	; (801b014 <iniciarMixer+0x90>)
 801afa2:	701a      	strb	r2, [r3, #0]

    if (cntMotores > NUM_MAX_MOTORES)
 801afa4:	4b1b      	ldr	r3, [pc, #108]	; (801b014 <iniciarMixer+0x90>)
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	2b0c      	cmp	r3, #12
 801afaa:	d902      	bls.n	801afb2 <iniciarMixer+0x2e>
    	cntMotores = NUM_MAX_MOTORES;
 801afac:	4b19      	ldr	r3, [pc, #100]	; (801b014 <iniciarMixer+0x90>)
 801afae:	220c      	movs	r2, #12
 801afb0:	701a      	strb	r2, [r3, #0]

    if (tablaMixer[configMixer()->tipoDrone].motor) {
 801afb2:	f7ff ffdd 	bl	801af70 <configMixer>
 801afb6:	4603      	mov	r3, r0
 801afb8:	781b      	ldrb	r3, [r3, #0]
 801afba:	4a17      	ldr	r2, [pc, #92]	; (801b018 <iniciarMixer+0x94>)
 801afbc:	00db      	lsls	r3, r3, #3
 801afbe:	4413      	add	r3, r2
 801afc0:	685b      	ldr	r3, [r3, #4]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d01e      	beq.n	801b004 <iniciarMixer+0x80>
        for (uint8_t i = 0; i < cntMotores; i++)
 801afc6:	2300      	movs	r3, #0
 801afc8:	71fb      	strb	r3, [r7, #7]
 801afca:	e016      	b.n	801affa <iniciarMixer+0x76>
            mixer[i] = tablaMixer[configMixer()->tipoDrone].motor[i];
 801afcc:	f7ff ffd0 	bl	801af70 <configMixer>
 801afd0:	4603      	mov	r3, r0
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	4a10      	ldr	r2, [pc, #64]	; (801b018 <iniciarMixer+0x94>)
 801afd6:	00db      	lsls	r3, r3, #3
 801afd8:	4413      	add	r3, r2
 801afda:	685a      	ldr	r2, [r3, #4]
 801afdc:	79fb      	ldrb	r3, [r7, #7]
 801afde:	011b      	lsls	r3, r3, #4
 801afe0:	18d1      	adds	r1, r2, r3
 801afe2:	79fb      	ldrb	r3, [r7, #7]
 801afe4:	4a0d      	ldr	r2, [pc, #52]	; (801b01c <iniciarMixer+0x98>)
 801afe6:	011b      	lsls	r3, r3, #4
 801afe8:	4413      	add	r3, r2
 801afea:	461c      	mov	r4, r3
 801afec:	460b      	mov	r3, r1
 801afee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (uint8_t i = 0; i < cntMotores; i++)
 801aff4:	79fb      	ldrb	r3, [r7, #7]
 801aff6:	3301      	adds	r3, #1
 801aff8:	71fb      	strb	r3, [r7, #7]
 801affa:	4b06      	ldr	r3, [pc, #24]	; (801b014 <iniciarMixer+0x90>)
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	79fa      	ldrb	r2, [r7, #7]
 801b000:	429a      	cmp	r2, r3
 801b002:	d3e3      	bcc.n	801afcc <iniciarMixer+0x48>
    }

    habilitarMotores();
 801b004:	f002 fe7e 	bl	801dd04 <habilitarMotores>
    apagarMotoresMixer();
 801b008:	f000 f946 	bl	801b298 <apagarMotoresMixer>
}
 801b00c:	bf00      	nop
 801b00e:	370c      	adds	r7, #12
 801b010:	46bd      	mov	sp, r7
 801b012:	bd90      	pop	{r4, r7, pc}
 801b014:	2000a2ac 	.word	0x2000a2ac
 801b018:	0803bd70 	.word	0x0803bd70
 801b01c:	2000a2b0 	.word	0x2000a2b0

0801b020 <actualizarMixer>:
**  Descripcion:    Actualiza el mixer y los estados de los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarMixer(void)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	af00      	add	r7, sp, #0
    escribirMotores(motorMix);
	return;
	*/

    // Habilita o deshabilita los motores
    if (sistemaEnEStop()) {
 801b024:	f001 f81a 	bl	801c05c <sistemaEnEStop>
 801b028:	4603      	mov	r3, r0
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d00b      	beq.n	801b046 <actualizarMixer+0x26>

        apagarMotoresMixer();
 801b02e:	f000 f933 	bl	801b298 <apagarMotoresMixer>

        if (estanMotoresHabilitados()) {
 801b032:	f002 fe87 	bl	801dd44 <estanMotoresHabilitados>
 801b036:	4603      	mov	r3, r0
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d01d      	beq.n	801b078 <actualizarMixer+0x58>
        	pararMotores();
 801b03c:	f000 f922 	bl	801b284 <pararMotores>
            deshabilitarMotores();
 801b040:	f002 fe2a 	bl	801dc98 <deshabilitarMotores>
        }
        else
        	pararMotores();
    }

}
 801b044:	e018      	b.n	801b078 <actualizarMixer+0x58>
        if (!estanMotoresHabilitados())
 801b046:	f002 fe7d 	bl	801dd44 <estanMotoresHabilitados>
 801b04a:	4603      	mov	r3, r0
 801b04c:	f083 0301 	eor.w	r3, r3, #1
 801b050:	b2db      	uxtb	r3, r3
 801b052:	2b00      	cmp	r3, #0
 801b054:	d001      	beq.n	801b05a <actualizarMixer+0x3a>
            habilitarMotores();
 801b056:	f002 fe55 	bl	801dd04 <habilitarMotores>
        if (!ordenPararMotores) {
 801b05a:	4b08      	ldr	r3, [pc, #32]	; (801b07c <actualizarMixer+0x5c>)
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	f083 0301 	eor.w	r3, r3, #1
 801b062:	b2db      	uxtb	r3, r3
 801b064:	2b00      	cmp	r3, #0
 801b066:	d005      	beq.n	801b074 <actualizarMixer+0x54>
        	calcularTablaMixer();
 801b068:	f000 f80e 	bl	801b088 <calcularTablaMixer>
            escribirMotores(motorMix);
 801b06c:	4804      	ldr	r0, [pc, #16]	; (801b080 <actualizarMixer+0x60>)
 801b06e:	f002 fe9b 	bl	801dda8 <escribirMotores>
}
 801b072:	e001      	b.n	801b078 <actualizarMixer+0x58>
        	pararMotores();
 801b074:	f000 f906 	bl	801b284 <pararMotores>
}
 801b078:	bf00      	nop
 801b07a:	bd80      	pop	{r7, pc}
 801b07c:	2000024c 	.word	0x2000024c
 801b080:	2000a370 	.word	0x2000a370
 801b084:	00000000 	.word	0x00000000

0801b088 <calcularTablaMixer>:
**  Descripcion:    Actualiza la tabla del mixer
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void calcularTablaMixer(void)
{
 801b088:	b590      	push	{r4, r7, lr}
 801b08a:	ed2d 8b02 	vpush	{d8}
 801b08e:	b083      	sub	sp, #12
 801b090:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < cntMotores; i++) {
 801b092:	2300      	movs	r3, #0
 801b094:	71fb      	strb	r3, [r7, #7]
 801b096:	e06b      	b.n	801b170 <calcularTablaMixer+0xe8>
    	motorMix[i] = /*uAltPID() * mixer[i].throttle + */ 0.3 + uRollPID() * mixer[i].roll + uPitchPID() * mixer[i].pitch /*+ uYawPID() * mixer[i].yaw*/;
 801b098:	f7ff fed6 	bl	801ae48 <uRollPID>
 801b09c:	eeb0 7a40 	vmov.f32	s14, s0
 801b0a0:	79fb      	ldrb	r3, [r7, #7]
 801b0a2:	4a3b      	ldr	r2, [pc, #236]	; (801b190 <calcularTablaMixer+0x108>)
 801b0a4:	011b      	lsls	r3, r3, #4
 801b0a6:	4413      	add	r3, r2
 801b0a8:	3304      	adds	r3, #4
 801b0aa:	edd3 7a00 	vldr	s15, [r3]
 801b0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801b0b6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 801b188 <calcularTablaMixer+0x100>
 801b0ba:	ee37 8b06 	vadd.f64	d8, d7, d6
 801b0be:	f7ff fed1 	bl	801ae64 <uPitchPID>
 801b0c2:	eeb0 7a40 	vmov.f32	s14, s0
 801b0c6:	79fb      	ldrb	r3, [r7, #7]
 801b0c8:	4a31      	ldr	r2, [pc, #196]	; (801b190 <calcularTablaMixer+0x108>)
 801b0ca:	011b      	lsls	r3, r3, #4
 801b0cc:	4413      	add	r3, r2
 801b0ce:	3308      	adds	r3, #8
 801b0d0:	edd3 7a00 	vldr	s15, [r3]
 801b0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801b0dc:	ee38 7b07 	vadd.f64	d7, d8, d7
 801b0e0:	79fb      	ldrb	r3, [r7, #7]
 801b0e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801b0e6:	4a2b      	ldr	r2, [pc, #172]	; (801b194 <calcularTablaMixer+0x10c>)
 801b0e8:	009b      	lsls	r3, r3, #2
 801b0ea:	4413      	add	r3, r2
 801b0ec:	edc3 7a00 	vstr	s15, [r3]
    	motorMix[i] = limitarFloat(motorMix[i], 0.0, 1.0);
 801b0f0:	79fb      	ldrb	r3, [r7, #7]
 801b0f2:	4a28      	ldr	r2, [pc, #160]	; (801b194 <calcularTablaMixer+0x10c>)
 801b0f4:	009b      	lsls	r3, r3, #2
 801b0f6:	4413      	add	r3, r2
 801b0f8:	edd3 7a00 	vldr	s15, [r3]
 801b0fc:	79fc      	ldrb	r4, [r7, #7]
 801b0fe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801b102:	eddf 0a25 	vldr	s1, [pc, #148]	; 801b198 <calcularTablaMixer+0x110>
 801b106:	eeb0 0a67 	vmov.f32	s0, s15
 801b10a:	f7f8 fa88 	bl	801361e <limitarFloat>
 801b10e:	eef0 7a40 	vmov.f32	s15, s0
 801b112:	4a20      	ldr	r2, [pc, #128]	; (801b194 <calcularTablaMixer+0x10c>)
 801b114:	00a3      	lsls	r3, r4, #2
 801b116:	4413      	add	r3, r2
 801b118:	edc3 7a00 	vstr	s15, [r3]
        motorMix[i] = configMixer()->valorMinimo + (configMixer()->valorMaximo - configMixer()->valorMinimo) * escalarMixer(motorMix[i]);
 801b11c:	f7ff ff28 	bl	801af70 <configMixer>
 801b120:	4603      	mov	r3, r0
 801b122:	ed93 8a04 	vldr	s16, [r3, #16]
 801b126:	f7ff ff23 	bl	801af70 <configMixer>
 801b12a:	4603      	mov	r3, r0
 801b12c:	edd3 8a03 	vldr	s17, [r3, #12]
 801b130:	f7ff ff1e 	bl	801af70 <configMixer>
 801b134:	4603      	mov	r3, r0
 801b136:	edd3 7a04 	vldr	s15, [r3, #16]
 801b13a:	ee78 8ae7 	vsub.f32	s17, s17, s15
 801b13e:	79fb      	ldrb	r3, [r7, #7]
 801b140:	4a14      	ldr	r2, [pc, #80]	; (801b194 <calcularTablaMixer+0x10c>)
 801b142:	009b      	lsls	r3, r3, #2
 801b144:	4413      	add	r3, r2
 801b146:	edd3 7a00 	vldr	s15, [r3]
 801b14a:	eeb0 0a67 	vmov.f32	s0, s15
 801b14e:	f000 f827 	bl	801b1a0 <escalarMixer>
 801b152:	eef0 7a40 	vmov.f32	s15, s0
 801b156:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801b15a:	79fb      	ldrb	r3, [r7, #7]
 801b15c:	ee78 7a27 	vadd.f32	s15, s16, s15
 801b160:	4a0c      	ldr	r2, [pc, #48]	; (801b194 <calcularTablaMixer+0x10c>)
 801b162:	009b      	lsls	r3, r3, #2
 801b164:	4413      	add	r3, r2
 801b166:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < cntMotores; i++) {
 801b16a:	79fb      	ldrb	r3, [r7, #7]
 801b16c:	3301      	adds	r3, #1
 801b16e:	71fb      	strb	r3, [r7, #7]
 801b170:	4b0a      	ldr	r3, [pc, #40]	; (801b19c <calcularTablaMixer+0x114>)
 801b172:	781b      	ldrb	r3, [r3, #0]
 801b174:	79fa      	ldrb	r2, [r7, #7]
 801b176:	429a      	cmp	r2, r3
 801b178:	d38e      	bcc.n	801b098 <calcularTablaMixer+0x10>
    }

}
 801b17a:	bf00      	nop
 801b17c:	bf00      	nop
 801b17e:	370c      	adds	r7, #12
 801b180:	46bd      	mov	sp, r7
 801b182:	ecbd 8b02 	vpop	{d8}
 801b186:	bd90      	pop	{r4, r7, pc}
 801b188:	33333333 	.word	0x33333333
 801b18c:	3fd33333 	.word	0x3fd33333
 801b190:	2000a2b0 	.word	0x2000a2b0
 801b194:	2000a370 	.word	0x2000a370
 801b198:	00000000 	.word	0x00000000
 801b19c:	2000a2ac 	.word	0x2000a2ac

0801b1a0 <escalarMixer>:
**  Descripcion:    Escala el valor del PWM con el modelo: thrust = (1 - curvaPWM) * PWM + curvaPWM * PWM ^ 2
**  Parametros:     Valor de PWM
**  Retorno:        Valor de PWM escalado
****************************************************************************************/
CODIGO_RAPIDO float escalarMixer(float pwm)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	ed2d 8b02 	vpush	{d8}
 801b1a6:	b084      	sub	sp, #16
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	ed87 0a01 	vstr	s0, [r7, #4]
    if (configMixer()->curvaPWM == 0)
 801b1ae:	f7ff fedf 	bl	801af70 <configMixer>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	edd3 7a01 	vldr	s15, [r3, #4]
 801b1b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c0:	d102      	bne.n	801b1c8 <escalarMixer+0x28>
    	return pwm;
 801b1c2:	edd7 7a01 	vldr	s15, [r7, #4]
 801b1c6:	e048      	b.n	801b25a <escalarMixer+0xba>
    else {
    	float pwmEscalado = ((configMixer()->curvaPWM - 1.0f) + sqrtf((1.0f - configMixer()->curvaPWM) * (1.0f - configMixer()->curvaPWM) + 4.0f * configMixer()->curvaPWM * pwm)) / (2.0f * configMixer()->curvaPWM);
 801b1c8:	f7ff fed2 	bl	801af70 <configMixer>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	edd3 7a01 	vldr	s15, [r3, #4]
 801b1d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1d6:	ee37 8ac7 	vsub.f32	s16, s15, s14
 801b1da:	f7ff fec9 	bl	801af70 <configMixer>
 801b1de:	4603      	mov	r3, r0
 801b1e0:	edd3 7a01 	vldr	s15, [r3, #4]
 801b1e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1e8:	ee77 8a67 	vsub.f32	s17, s14, s15
 801b1ec:	f7ff fec0 	bl	801af70 <configMixer>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	edd3 7a01 	vldr	s15, [r3, #4]
 801b1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b1fe:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801b202:	f7ff feb5 	bl	801af70 <configMixer>
 801b206:	4603      	mov	r3, r0
 801b208:	edd3 7a01 	vldr	s15, [r3, #4]
 801b20c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b210:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b214:	edd7 7a01 	vldr	s15, [r7, #4]
 801b218:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b21c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801b220:	eeb0 0a67 	vmov.f32	s0, s15
 801b224:	f01e f822 	bl	803926c <sqrtf>
 801b228:	eef0 7a40 	vmov.f32	s15, s0
 801b22c:	ee38 8a27 	vadd.f32	s16, s16, s15
 801b230:	f7ff fe9e 	bl	801af70 <configMixer>
 801b234:	4603      	mov	r3, r0
 801b236:	edd3 7a01 	vldr	s15, [r3, #4]
 801b23a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801b23e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801b242:	edc7 7a03 	vstr	s15, [r7, #12]
    	return limitarFloat(pwmEscalado, 0.0, 1.0);
 801b246:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801b24a:	eddf 0a07 	vldr	s1, [pc, #28]	; 801b268 <escalarMixer+0xc8>
 801b24e:	ed97 0a03 	vldr	s0, [r7, #12]
 801b252:	f7f8 f9e4 	bl	801361e <limitarFloat>
 801b256:	eef0 7a40 	vmov.f32	s15, s0
    }
}
 801b25a:	eeb0 0a67 	vmov.f32	s0, s15
 801b25e:	3710      	adds	r7, #16
 801b260:	46bd      	mov	sp, r7
 801b262:	ecbd 8b02 	vpop	{d8}
 801b266:	bd80      	pop	{r7, pc}
 801b268:	00000000 	.word	0x00000000

0801b26c <numMotores>:
**  Descripcion:    Devulve el numero de motores a utilizar
**  Parametros:     Ninguno
**  Retorno:        Numero de motores
****************************************************************************************/
uint8_t numMotores(void)
{
 801b26c:	b480      	push	{r7}
 801b26e:	af00      	add	r7, sp, #0
    return cntMotores;
 801b270:	4b03      	ldr	r3, [pc, #12]	; (801b280 <numMotores+0x14>)
 801b272:	781b      	ldrb	r3, [r3, #0]
}
 801b274:	4618      	mov	r0, r3
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop
 801b280:	2000a2ac 	.word	0x2000a2ac

0801b284 <pararMotores>:
**  Descripcion:    Para los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void pararMotores(void)
{
 801b284:	b580      	push	{r7, lr}
 801b286:	af00      	add	r7, sp, #0
	escribirValorTodosMotores(0.0);
 801b288:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801b294 <pararMotores+0x10>
 801b28c:	f002 fdb5 	bl	801ddfa <escribirValorTodosMotores>
}
 801b290:	bf00      	nop
 801b292:	bd80      	pop	{r7, pc}
 801b294:	00000000 	.word	0x00000000

0801b298 <apagarMotoresMixer>:
**  Descripcion:    Activa la orden para parar los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void apagarMotoresMixer(void)
{
 801b298:	b480      	push	{r7}
 801b29a:	af00      	add	r7, sp, #0
    if (!ordenPararMotores)
 801b29c:	4b07      	ldr	r3, [pc, #28]	; (801b2bc <apagarMotoresMixer+0x24>)
 801b29e:	781b      	ldrb	r3, [r3, #0]
 801b2a0:	f083 0301 	eor.w	r3, r3, #1
 801b2a4:	b2db      	uxtb	r3, r3
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d002      	beq.n	801b2b0 <apagarMotoresMixer+0x18>
        ordenPararMotores = true;
 801b2aa:	4b04      	ldr	r3, [pc, #16]	; (801b2bc <apagarMotoresMixer+0x24>)
 801b2ac:	2201      	movs	r2, #1
 801b2ae:	701a      	strb	r2, [r3, #0]
}
 801b2b0:	bf00      	nop
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b8:	4770      	bx	lr
 801b2ba:	bf00      	nop
 801b2bc:	2000024c 	.word	0x2000024c

0801b2c0 <encenderMotoresMixer>:
**  Descripcion:    Desactiva la orden para parar los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void encenderMotoresMixer(void)
{
 801b2c0:	b480      	push	{r7}
 801b2c2:	af00      	add	r7, sp, #0
    if (ordenPararMotores)
 801b2c4:	4b05      	ldr	r3, [pc, #20]	; (801b2dc <encenderMotoresMixer+0x1c>)
 801b2c6:	781b      	ldrb	r3, [r3, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d002      	beq.n	801b2d2 <encenderMotoresMixer+0x12>
        ordenPararMotores = false;
 801b2cc:	4b03      	ldr	r3, [pc, #12]	; (801b2dc <encenderMotoresMixer+0x1c>)
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	701a      	strb	r2, [r3, #0]
}
 801b2d2:	bf00      	nop
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2da:	4770      	bx	lr
 801b2dc:	2000024c 	.word	0x2000024c

0801b2e0 <motoresEncendidosMixer>:
**  Descripcion:    Devuelve si los motores estan encendidos
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool motoresEncendidosMixer(void)
{
 801b2e0:	b480      	push	{r7}
 801b2e2:	af00      	add	r7, sp, #0
    return !ordenPararMotores;
 801b2e4:	4b08      	ldr	r3, [pc, #32]	; (801b308 <motoresEncendidosMixer+0x28>)
 801b2e6:	781b      	ldrb	r3, [r3, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	bf14      	ite	ne
 801b2ec:	2301      	movne	r3, #1
 801b2ee:	2300      	moveq	r3, #0
 801b2f0:	b2db      	uxtb	r3, r3
 801b2f2:	f083 0301 	eor.w	r3, r3, #1
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	f003 0301 	and.w	r3, r3, #1
 801b2fc:	b2db      	uxtb	r3, r3
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	46bd      	mov	sp, r7
 801b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b306:	4770      	bx	lr
 801b308:	2000024c 	.word	0x2000024c

0801b30c <configCanalRC>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configCanalRC_t, CANALES_PWM_RADIO, configCanalRC);
 801b30c:	b480      	push	{r7}
 801b30e:	b083      	sub	sp, #12
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
 801b314:	687a      	ldr	r2, [r7, #4]
 801b316:	4613      	mov	r3, r2
 801b318:	009b      	lsls	r3, r3, #2
 801b31a:	4413      	add	r3, r2
 801b31c:	005b      	lsls	r3, r3, #1
 801b31e:	4a04      	ldr	r2, [pc, #16]	; (801b330 <configCanalRC+0x24>)
 801b320:	4413      	add	r3, r2
 801b322:	4618      	mov	r0, r3
 801b324:	370c      	adds	r7, #12
 801b326:	46bd      	mov	sp, r7
 801b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32c:	4770      	bx	lr
 801b32e:	bf00      	nop
 801b330:	2000a8ec 	.word	0x2000a8ec

0801b334 <configRefRC>:
DECLARAR_GP(configRefRC_t, configRefRC);
 801b334:	b480      	push	{r7}
 801b336:	af00      	add	r7, sp, #0
 801b338:	4b02      	ldr	r3, [pc, #8]	; (801b344 <configRefRC+0x10>)
 801b33a:	4618      	mov	r0, r3
 801b33c:	46bd      	mov	sp, r7
 801b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b342:	4770      	bx	lr
 801b344:	2000a93c 	.word	0x2000a93c

0801b348 <configModoRC>:
DECLARAR_GP(configModoRC_t, configModoRC);
 801b348:	b480      	push	{r7}
 801b34a:	af00      	add	r7, sp, #0
 801b34c:	4b02      	ldr	r3, [pc, #8]	; (801b358 <configModoRC+0x10>)
 801b34e:	4618      	mov	r0, r3
 801b350:	46bd      	mov	sp, r7
 801b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b356:	4770      	bx	lr
 801b358:	2000a960 	.word	0x2000a960

0801b35c <configSecuenciaRC>:
DECLARAR_GP(configSecuenciaRC_t, configSecuenciaRC);
 801b35c:	b480      	push	{r7}
 801b35e:	af00      	add	r7, sp, #0
 801b360:	4b02      	ldr	r3, [pc, #8]	; (801b36c <configSecuenciaRC+0x10>)
 801b362:	4618      	mov	r0, r3
 801b364:	46bd      	mov	sp, r7
 801b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36a:	4770      	bx	lr
 801b36c:	2000a970 	.word	0x2000a970

0801b370 <iniciarRC>:
**  Descripcion:    Resetea las referencias y el modo del sistema
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarRC(void)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	af00      	add	r7, sp, #0
    // Reseteamos las variables del driver
    memset(&rc, 0, sizeof(rc_t));
 801b374:	2214      	movs	r2, #20
 801b376:	2100      	movs	r1, #0
 801b378:	4812      	ldr	r0, [pc, #72]	; (801b3c4 <iniciarRC+0x54>)
 801b37a:	f019 ff91 	bl	80352a0 <memset>
    rc.modo = MODO_NINGUNO;
 801b37e:	4b11      	ldr	r3, [pc, #68]	; (801b3c4 <iniciarRC+0x54>)
 801b380:	22ff      	movs	r2, #255	; 0xff
 801b382:	741a      	strb	r2, [r3, #16]

    // Reseteamos los antirebotes
    antirreboteModo.posicionActual = 0;
 801b384:	4b10      	ldr	r3, [pc, #64]	; (801b3c8 <iniciarRC+0x58>)
 801b386:	2200      	movs	r2, #0
 801b388:	701a      	strb	r2, [r3, #0]
    antirreboteModo.posicionAnterior = antirreboteModo.posicionActual;
 801b38a:	4b0f      	ldr	r3, [pc, #60]	; (801b3c8 <iniciarRC+0x58>)
 801b38c:	781a      	ldrb	r2, [r3, #0]
 801b38e:	4b0e      	ldr	r3, [pc, #56]	; (801b3c8 <iniciarRC+0x58>)
 801b390:	705a      	strb	r2, [r3, #1]

    antirreboteEstop.posicionActual = 0;
 801b392:	4b0e      	ldr	r3, [pc, #56]	; (801b3cc <iniciarRC+0x5c>)
 801b394:	2200      	movs	r2, #0
 801b396:	701a      	strb	r2, [r3, #0]
    antirreboteEstop.posicionAnterior = antirreboteEstop.posicionActual;
 801b398:	4b0c      	ldr	r3, [pc, #48]	; (801b3cc <iniciarRC+0x5c>)
 801b39a:	781a      	ldrb	r2, [r3, #0]
 801b39c:	4b0b      	ldr	r3, [pc, #44]	; (801b3cc <iniciarRC+0x5c>)
 801b39e:	705a      	strb	r2, [r3, #1]

    // Se ajustan las secuencias
    ajustarSecuenciaRC(&secuenciaArmado, 1000);
 801b3a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b3a4:	480a      	ldr	r0, [pc, #40]	; (801b3d0 <iniciarRC+0x60>)
 801b3a6:	f000 f91c 	bl	801b5e2 <ajustarSecuenciaRC>
    ajustarSecuenciaRC(&secuenciaDesarmado, 1000);
 801b3aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b3ae:	4809      	ldr	r0, [pc, #36]	; (801b3d4 <iniciarRC+0x64>)
 801b3b0:	f000 f917 	bl	801b5e2 <ajustarSecuenciaRC>
    ajustarSecuenciaRC(&secuenciaCalibracion, 1000);
 801b3b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b3b8:	4807      	ldr	r0, [pc, #28]	; (801b3d8 <iniciarRC+0x68>)
 801b3ba:	f000 f912 	bl	801b5e2 <ajustarSecuenciaRC>
}
 801b3be:	bf00      	nop
 801b3c0:	bd80      	pop	{r7, pc}
 801b3c2:	bf00      	nop
 801b3c4:	2000a3a0 	.word	0x2000a3a0
 801b3c8:	2000a3dc 	.word	0x2000a3dc
 801b3cc:	2000a3e4 	.word	0x2000a3e4
 801b3d0:	2000a3b8 	.word	0x2000a3b8
 801b3d4:	2000a3c4 	.word	0x2000a3c4
 801b3d8:	2000a3d0 	.word	0x2000a3d0

0801b3dc <actualizarRC>:
**  Descripcion:    Actualiza las referencias de los PID y los modos del sistema
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarRC(uint32_t tiempoActual)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    if (reaction.id == 'B' && iniR) {
 801b3e4:	4b1d      	ldr	r3, [pc, #116]	; (801b45c <actualizarRC+0x80>)
 801b3e6:	791b      	ldrb	r3, [r3, #4]
 801b3e8:	2b42      	cmp	r3, #66	; 0x42
 801b3ea:	d106      	bne.n	801b3fa <actualizarRC+0x1e>
 801b3ec:	4b1c      	ldr	r3, [pc, #112]	; (801b460 <actualizarRC+0x84>)
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d002      	beq.n	801b3fa <actualizarRC+0x1e>
    	reaction.id = 'C';
 801b3f4:	4b19      	ldr	r3, [pc, #100]	; (801b45c <actualizarRC+0x80>)
 801b3f6:	2243      	movs	r2, #67	; 0x43
 801b3f8:	711a      	strb	r2, [r3, #4]
    }

    // Si hay problemas con la radio se resetean las referencias
    if (!radioOperativa()) {
 801b3fa:	f003 fb05 	bl	801ea08 <radioOperativa>
 801b3fe:	4603      	mov	r3, r0
 801b400:	f083 0301 	eor.w	r3, r3, #1
 801b404:	b2db      	uxtb	r3, r3
 801b406:	2b00      	cmp	r3, #0
 801b408:	d013      	beq.n	801b432 <actualizarRC+0x56>
        rc.roll = 0;
 801b40a:	4b16      	ldr	r3, [pc, #88]	; (801b464 <actualizarRC+0x88>)
 801b40c:	f04f 0200 	mov.w	r2, #0
 801b410:	601a      	str	r2, [r3, #0]
        rc.pitch = 0;
 801b412:	4b14      	ldr	r3, [pc, #80]	; (801b464 <actualizarRC+0x88>)
 801b414:	f04f 0200 	mov.w	r2, #0
 801b418:	605a      	str	r2, [r3, #4]
        rc.yaw = 0;
 801b41a:	4b12      	ldr	r3, [pc, #72]	; (801b464 <actualizarRC+0x88>)
 801b41c:	f04f 0200 	mov.w	r2, #0
 801b420:	609a      	str	r2, [r3, #8]
        rc.altura = 0;
 801b422:	4b10      	ldr	r3, [pc, #64]	; (801b464 <actualizarRC+0x88>)
 801b424:	f04f 0200 	mov.w	r2, #0
 801b428:	60da      	str	r2, [r3, #12]
        rc.eStop = true;
 801b42a:	4b0e      	ldr	r3, [pc, #56]	; (801b464 <actualizarRC+0x88>)
 801b42c:	2201      	movs	r2, #1
 801b42e:	745a      	strb	r2, [r3, #17]
        return;
 801b430:	e010      	b.n	801b454 <actualizarRC+0x78>

    // Solo se actualizan las referencias y los modos cuando la radio esta OK y ha llegado una nueva entrada
    //if (nuevaEntradaRadioValida()) {

        // Actualizacion de los modos del sistema
    	actualizarModoRC();
 801b432:	f000 fc2f 	bl	801bc94 <actualizarModoRC>

    	if (!rc.eStop) {
 801b436:	4b0b      	ldr	r3, [pc, #44]	; (801b464 <actualizarRC+0x88>)
 801b438:	7c5b      	ldrb	r3, [r3, #17]
 801b43a:	f083 0301 	eor.w	r3, r3, #1
 801b43e:	b2db      	uxtb	r3, r3
 801b440:	2b00      	cmp	r3, #0
 801b442:	d007      	beq.n	801b454 <actualizarRC+0x78>
            // Actualizacion de las secuencias de encendido y apagado
    	    procesarSecuenciaRC();
 801b444:	f000 f810 	bl	801b468 <procesarSecuenciaRC>

            // Actualizacion de las referencias para los PID
            generarRefRollPitchRC();
 801b448:	f000 f934 	bl	801b6b4 <generarRefRollPitchRC>
            generarRefYawRC();
 801b44c:	f000 f9d6 	bl	801b7fc <generarRefYawRC>
            generarRefAltRC();
 801b450:	f000 fa9a 	bl	801b988 <generarRefAltRC>
    	}
    //}
}
 801b454:	3708      	adds	r7, #8
 801b456:	46bd      	mov	sp, r7
 801b458:	bd80      	pop	{r7, pc}
 801b45a:	bf00      	nop
 801b45c:	2000c67c 	.word	0x2000c67c
 801b460:	2000c685 	.word	0x2000c685
 801b464:	2000a3a0 	.word	0x2000a3a0

0801b468 <procesarSecuenciaRC>:
**  Descripcion:    Procesa las posiciones de los sticks para armar o desarmar los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void procesarSecuenciaRC(void)
{
 801b468:	b590      	push	{r4, r7, lr}
 801b46a:	b083      	sub	sp, #12
 801b46c:	af00      	add	r7, sp, #0
    bool estadoArmDesarm = true;
 801b46e:	2301      	movs	r3, #1
 801b470:	71fb      	strb	r3, [r7, #7]
    bool estadoCal = true;
 801b472:	2301      	movs	r3, #1
 801b474:	71bb      	strb	r3, [r7, #6]

    for (uint8_t i = 0; i < 4; i++) {
 801b476:	2300      	movs	r3, #0
 801b478:	717b      	strb	r3, [r7, #5]
 801b47a:	e061      	b.n	801b540 <procesarSecuenciaRC+0xd8>
    	// Comprobamos posicion para armar o desarmar los motores
    	if (!motoresEncendidosMixer()) {
 801b47c:	f7ff ff30 	bl	801b2e0 <motoresEncendidosMixer>
 801b480:	4603      	mov	r3, r0
 801b482:	f083 0301 	eor.w	r3, r3, #1
 801b486:	b2db      	uxtb	r3, r3
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d03b      	beq.n	801b504 <procesarSecuenciaRC+0x9c>
    		// Armado
            if (!comprobarPosicionStickRC(configSecuenciaRC()->armado[i], canalRadio(i)))
 801b48c:	f7ff ff66 	bl	801b35c <configSecuenciaRC>
 801b490:	4602      	mov	r2, r0
 801b492:	797b      	ldrb	r3, [r7, #5]
 801b494:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 801b498:	797b      	ldrb	r3, [r7, #5]
 801b49a:	4618      	mov	r0, r3
 801b49c:	f003 fadc 	bl	801ea58 <canalRadio>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	4619      	mov	r1, r3
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f000 f8e3 	bl	801b670 <comprobarPosicionStickRC>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	f083 0301 	eor.w	r3, r3, #1
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d001      	beq.n	801b4ba <procesarSecuenciaRC+0x52>
            	estadoArmDesarm = false;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	71fb      	strb	r3, [r7, #7]

            // Calibracion
            if (!comprobarPosicionStickRC(configSecuenciaRC()->calibracion[i], canalRadio(i)))
 801b4ba:	f7ff ff4f 	bl	801b35c <configSecuenciaRC>
 801b4be:	4602      	mov	r2, r0
 801b4c0:	797b      	ldrb	r3, [r7, #5]
 801b4c2:	3308      	adds	r3, #8
 801b4c4:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 801b4c8:	797b      	ldrb	r3, [r7, #5]
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	f003 fac4 	bl	801ea58 <canalRadio>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	4619      	mov	r1, r3
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f000 f8cb 	bl	801b670 <comprobarPosicionStickRC>
 801b4da:	4603      	mov	r3, r0
 801b4dc:	f083 0301 	eor.w	r3, r3, #1
 801b4e0:	b2db      	uxtb	r3, r3
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d001      	beq.n	801b4ea <procesarSecuenciaRC+0x82>
            	estadoCal = false;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	71bb      	strb	r3, [r7, #6]

            if (!estadoArmDesarm || !estadoCal)
 801b4ea:	79fb      	ldrb	r3, [r7, #7]
 801b4ec:	f083 0301 	eor.w	r3, r3, #1
 801b4f0:	b2db      	uxtb	r3, r3
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d127      	bne.n	801b546 <procesarSecuenciaRC+0xde>
 801b4f6:	79bb      	ldrb	r3, [r7, #6]
 801b4f8:	f083 0301 	eor.w	r3, r3, #1
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d121      	bne.n	801b546 <procesarSecuenciaRC+0xde>
 801b502:	e01a      	b.n	801b53a <procesarSecuenciaRC+0xd2>
            	break;

    	}
    	else {
    		estadoCal = false;
 801b504:	2300      	movs	r3, #0
 801b506:	71bb      	strb	r3, [r7, #6]
            if (!comprobarPosicionStickRC(configSecuenciaRC()->desarmado[i], canalRadio(i))) {
 801b508:	f7ff ff28 	bl	801b35c <configSecuenciaRC>
 801b50c:	4602      	mov	r2, r0
 801b50e:	797b      	ldrb	r3, [r7, #5]
 801b510:	3304      	adds	r3, #4
 801b512:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 801b516:	797b      	ldrb	r3, [r7, #5]
 801b518:	4618      	mov	r0, r3
 801b51a:	f003 fa9d 	bl	801ea58 <canalRadio>
 801b51e:	4603      	mov	r3, r0
 801b520:	4619      	mov	r1, r3
 801b522:	4620      	mov	r0, r4
 801b524:	f000 f8a4 	bl	801b670 <comprobarPosicionStickRC>
 801b528:	4603      	mov	r3, r0
 801b52a:	f083 0301 	eor.w	r3, r3, #1
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	2b00      	cmp	r3, #0
 801b532:	d002      	beq.n	801b53a <procesarSecuenciaRC+0xd2>
            	estadoArmDesarm = false;
 801b534:	2300      	movs	r3, #0
 801b536:	71fb      	strb	r3, [r7, #7]
                break;
 801b538:	e005      	b.n	801b546 <procesarSecuenciaRC+0xde>
    for (uint8_t i = 0; i < 4; i++) {
 801b53a:	797b      	ldrb	r3, [r7, #5]
 801b53c:	3301      	adds	r3, #1
 801b53e:	717b      	strb	r3, [r7, #5]
 801b540:	797b      	ldrb	r3, [r7, #5]
 801b542:	2b03      	cmp	r3, #3
 801b544:	d99a      	bls.n	801b47c <procesarSecuenciaRC+0x14>
            }
    	}
    }

    if (!motoresEncendidosMixer()) {
 801b546:	f7ff fecb 	bl	801b2e0 <motoresEncendidosMixer>
 801b54a:	4603      	mov	r3, r0
 801b54c:	f083 0301 	eor.w	r3, r3, #1
 801b550:	b2db      	uxtb	r3, r3
 801b552:	2b00      	cmp	r3, #0
 801b554:	d01a      	beq.n	801b58c <procesarSecuenciaRC+0x124>
    	// Armado
        actualizarSecuenciaRC(&secuenciaArmado, estadoArmDesarm);
 801b556:	79fb      	ldrb	r3, [r7, #7]
 801b558:	4619      	mov	r1, r3
 801b55a:	4815      	ldr	r0, [pc, #84]	; (801b5b0 <procesarSecuenciaRC+0x148>)
 801b55c:	f000 f850 	bl	801b600 <actualizarSecuenciaRC>
        if (secuenciaArmado.finalizada) {
 801b560:	4b13      	ldr	r3, [pc, #76]	; (801b5b0 <procesarSecuenciaRC+0x148>)
 801b562:	785b      	ldrb	r3, [r3, #1]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d004      	beq.n	801b572 <procesarSecuenciaRC+0x10a>
            resetearSecuenciaRC(&secuenciaArmado);
 801b568:	4811      	ldr	r0, [pc, #68]	; (801b5b0 <procesarSecuenciaRC+0x148>)
 801b56a:	f000 f827 	bl	801b5bc <resetearSecuenciaRC>
            encenderMotoresMixer();
 801b56e:	f7ff fea7 	bl	801b2c0 <encenderMotoresMixer>
        }

        // Calibracion
        actualizarSecuenciaRC(&secuenciaCalibracion, estadoCal);
 801b572:	79bb      	ldrb	r3, [r7, #6]
 801b574:	4619      	mov	r1, r3
 801b576:	480f      	ldr	r0, [pc, #60]	; (801b5b4 <procesarSecuenciaRC+0x14c>)
 801b578:	f000 f842 	bl	801b600 <actualizarSecuenciaRC>
        if (secuenciaCalibracion.finalizada) {
 801b57c:	4b0d      	ldr	r3, [pc, #52]	; (801b5b4 <procesarSecuenciaRC+0x14c>)
 801b57e:	785b      	ldrb	r3, [r3, #1]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d011      	beq.n	801b5a8 <procesarSecuenciaRC+0x140>
            resetearSecuenciaRC(&secuenciaCalibracion);
 801b584:	480b      	ldr	r0, [pc, #44]	; (801b5b4 <procesarSecuenciaRC+0x14c>)
 801b586:	f000 f819 	bl	801b5bc <resetearSecuenciaRC>
        if (secuenciaDesarmado.finalizada) {
            resetearSecuenciaRC(&secuenciaDesarmado);
            apagarMotoresMixer();
        }
    }
}
 801b58a:	e00d      	b.n	801b5a8 <procesarSecuenciaRC+0x140>
        actualizarSecuenciaRC(&secuenciaDesarmado, estadoArmDesarm);
 801b58c:	79fb      	ldrb	r3, [r7, #7]
 801b58e:	4619      	mov	r1, r3
 801b590:	4809      	ldr	r0, [pc, #36]	; (801b5b8 <procesarSecuenciaRC+0x150>)
 801b592:	f000 f835 	bl	801b600 <actualizarSecuenciaRC>
        if (secuenciaDesarmado.finalizada) {
 801b596:	4b08      	ldr	r3, [pc, #32]	; (801b5b8 <procesarSecuenciaRC+0x150>)
 801b598:	785b      	ldrb	r3, [r3, #1]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d004      	beq.n	801b5a8 <procesarSecuenciaRC+0x140>
            resetearSecuenciaRC(&secuenciaDesarmado);
 801b59e:	4806      	ldr	r0, [pc, #24]	; (801b5b8 <procesarSecuenciaRC+0x150>)
 801b5a0:	f000 f80c 	bl	801b5bc <resetearSecuenciaRC>
            apagarMotoresMixer();
 801b5a4:	f7ff fe78 	bl	801b298 <apagarMotoresMixer>
}
 801b5a8:	bf00      	nop
 801b5aa:	370c      	adds	r7, #12
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd90      	pop	{r4, r7, pc}
 801b5b0:	2000a3b8 	.word	0x2000a3b8
 801b5b4:	2000a3d0 	.word	0x2000a3d0
 801b5b8:	2000a3c4 	.word	0x2000a3c4

0801b5bc <resetearSecuenciaRC>:
**  Descripcion:    Resetea una secuancia RC
**  Parametros:     Puntero a las secuencia
**  Retorno:        Ninguno
****************************************************************************************/
void resetearSecuenciaRC(secuenciaRC_t *secuencia)
{
 801b5bc:	b480      	push	{r7}
 801b5be:	b083      	sub	sp, #12
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
    secuencia->arrancada = false;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	2200      	movs	r2, #0
 801b5c8:	701a      	strb	r2, [r3, #0]
    secuencia->finalizada = false;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	705a      	strb	r2, [r3, #1]
    secuencia->tiempoArranque = 0;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	605a      	str	r2, [r3, #4]
}
 801b5d6:	bf00      	nop
 801b5d8:	370c      	adds	r7, #12
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e0:	4770      	bx	lr

0801b5e2 <ajustarSecuenciaRC>:
**  Descripcion:    Ajusta la duracion de una secuencia
**  Parametros:     Puntero a las secuencia, duracion
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarSecuenciaRC(secuenciaRC_t *secuencia, uint32_t duracionMs)
{
 801b5e2:	b580      	push	{r7, lr}
 801b5e4:	b082      	sub	sp, #8
 801b5e6:	af00      	add	r7, sp, #0
 801b5e8:	6078      	str	r0, [r7, #4]
 801b5ea:	6039      	str	r1, [r7, #0]
	resetearSecuenciaRC(secuencia);
 801b5ec:	6878      	ldr	r0, [r7, #4]
 801b5ee:	f7ff ffe5 	bl	801b5bc <resetearSecuenciaRC>
    secuencia->duracion = duracionMs;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	683a      	ldr	r2, [r7, #0]
 801b5f6:	609a      	str	r2, [r3, #8]
}
 801b5f8:	bf00      	nop
 801b5fa:	3708      	adds	r7, #8
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd80      	pop	{r7, pc}

0801b600 <actualizarSecuenciaRC>:
**  Descripcion:    Actualiza una secuancia RC
**  Parametros:     Puntero a las secuencia, estado de la secuencia
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarSecuenciaRC(secuenciaRC_t *secuencia, bool estado)
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b084      	sub	sp, #16
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
 801b608:	460b      	mov	r3, r1
 801b60a:	70fb      	strb	r3, [r7, #3]
	if (!secuencia->arrancada && estado) {
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	f083 0301 	eor.w	r3, r3, #1
 801b614:	b2db      	uxtb	r3, r3
 801b616:	2b00      	cmp	r3, #0
 801b618:	d00e      	beq.n	801b638 <actualizarSecuenciaRC+0x38>
 801b61a:	78fb      	ldrb	r3, [r7, #3]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d00b      	beq.n	801b638 <actualizarSecuenciaRC+0x38>
		secuencia->arrancada = true;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	2201      	movs	r2, #1
 801b624:	701a      	strb	r2, [r3, #0]
		secuencia->tiempoArranque = millis();
 801b626:	f7fc fa95 	bl	8017b54 <millis>
 801b62a:	4602      	mov	r2, r0
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	605a      	str	r2, [r3, #4]
		secuencia->finalizada = false;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2200      	movs	r2, #0
 801b634:	705a      	strb	r2, [r3, #1]
            }
        }
        else
            resetearSecuenciaRC(secuencia);
    }
}
 801b636:	e017      	b.n	801b668 <actualizarSecuenciaRC+0x68>
        uint32_t tiempo = millis();
 801b638:	f7fc fa8c 	bl	8017b54 <millis>
 801b63c:	60f8      	str	r0, [r7, #12]
        if (estado) {
 801b63e:	78fb      	ldrb	r3, [r7, #3]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d00e      	beq.n	801b662 <actualizarSecuenciaRC+0x62>
            if (tiempo - secuencia->tiempoArranque >= secuencia->duracion) {
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	685b      	ldr	r3, [r3, #4]
 801b648:	68fa      	ldr	r2, [r7, #12]
 801b64a:	1ad2      	subs	r2, r2, r3
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	689b      	ldr	r3, [r3, #8]
 801b650:	429a      	cmp	r2, r3
 801b652:	d309      	bcc.n	801b668 <actualizarSecuenciaRC+0x68>
        	    secuencia->arrancada = false;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	2200      	movs	r2, #0
 801b658:	701a      	strb	r2, [r3, #0]
        	    secuencia->finalizada = true;
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	2201      	movs	r2, #1
 801b65e:	705a      	strb	r2, [r3, #1]
}
 801b660:	e002      	b.n	801b668 <actualizarSecuenciaRC+0x68>
            resetearSecuenciaRC(secuencia);
 801b662:	6878      	ldr	r0, [r7, #4]
 801b664:	f7ff ffaa 	bl	801b5bc <resetearSecuenciaRC>
}
 801b668:	bf00      	nop
 801b66a:	3710      	adds	r7, #16
 801b66c:	46bd      	mov	sp, r7
 801b66e:	bd80      	pop	{r7, pc}

0801b670 <comprobarPosicionStickRC>:
**  Descripcion:    Comprueba si el stick esta en posicion
**  Parametros:     Valor de referencia, stick a comprobar
**  Retorno:        True si ok
****************************************************************************************/
bool comprobarPosicionStickRC(uint16_t ref, uint16_t stick)
{
 801b670:	b480      	push	{r7}
 801b672:	b083      	sub	sp, #12
 801b674:	af00      	add	r7, sp, #0
 801b676:	4603      	mov	r3, r0
 801b678:	460a      	mov	r2, r1
 801b67a:	80fb      	strh	r3, [r7, #6]
 801b67c:	4613      	mov	r3, r2
 801b67e:	80bb      	strh	r3, [r7, #4]
    if (ref > 1500) {
 801b680:	88fb      	ldrh	r3, [r7, #6]
 801b682:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801b686:	4293      	cmp	r3, r2
 801b688:	d907      	bls.n	801b69a <comprobarPosicionStickRC+0x2a>
        if (stick > ref)
 801b68a:	88ba      	ldrh	r2, [r7, #4]
 801b68c:	88fb      	ldrh	r3, [r7, #6]
 801b68e:	429a      	cmp	r2, r3
 801b690:	d901      	bls.n	801b696 <comprobarPosicionStickRC+0x26>
        	return true;
 801b692:	2301      	movs	r3, #1
 801b694:	e008      	b.n	801b6a8 <comprobarPosicionStickRC+0x38>
        else
        	return false;
 801b696:	2300      	movs	r3, #0
 801b698:	e006      	b.n	801b6a8 <comprobarPosicionStickRC+0x38>
    }
    else {
        if (stick < ref)
 801b69a:	88ba      	ldrh	r2, [r7, #4]
 801b69c:	88fb      	ldrh	r3, [r7, #6]
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d201      	bcs.n	801b6a6 <comprobarPosicionStickRC+0x36>
            return true;
 801b6a2:	2301      	movs	r3, #1
 801b6a4:	e000      	b.n	801b6a8 <comprobarPosicionStickRC+0x38>
        else
            return false;
 801b6a6:	2300      	movs	r3, #0
    }
}
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	370c      	adds	r7, #12
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b2:	4770      	bx	lr

0801b6b4 <generarRefRollPitchRC>:
**  Descripcion:    Genera las referencias para Roll y Pitch
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void generarRefRollPitchRC(void)
{
 801b6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6b8:	b086      	sub	sp, #24
 801b6ba:	af04      	add	r7, sp, #16
	canalRC_e canal = configRefRC()->roll.canalRC;
 801b6bc:	f7ff fe3a 	bl	801b334 <configRefRC>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	789b      	ldrb	r3, [r3, #2]
 801b6c4:	71fb      	strb	r3, [r7, #7]

    if (canal == CANAL_NINGUNO)
 801b6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6ce:	f000 808b 	beq.w	801b7e8 <generarRefRollPitchRC+0x134>
        return;

    rc.roll = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->roll.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b6d2:	79fb      	ldrb	r3, [r7, #7]
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	f003 f9bf 	bl	801ea58 <canalRadio>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	469a      	mov	sl, r3
 801b6de:	f7ff fe29 	bl	801b334 <configRefRC>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	881e      	ldrh	r6, [r3, #0]
 801b6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f7ff fe0e 	bl	801b30c <configCanalRC>
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 801b6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f7ff fe06 	bl	801b30c <configCanalRC>
 801b700:	4603      	mov	r3, r0
 801b702:	f8b3 9000 	ldrh.w	r9, [r3]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7ff fdfe 	bl	801b30c <configCanalRC>
 801b710:	4603      	mov	r3, r0
    rc.roll = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->roll.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b712:	889c      	ldrh	r4, [r3, #4]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b718:	4618      	mov	r0, r3
 801b71a:	f7ff fdf7 	bl	801b30c <configCanalRC>
 801b71e:	4603      	mov	r3, r0
    rc.roll = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->roll.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b720:	88dd      	ldrh	r5, [r3, #6]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b726:	4618      	mov	r0, r3
 801b728:	f7ff fdf0 	bl	801b30c <configCanalRC>
 801b72c:	4603      	mov	r3, r0
    rc.roll = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->roll.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b72e:	7a1b      	ldrb	r3, [r3, #8]
 801b730:	9302      	str	r3, [sp, #8]
 801b732:	9501      	str	r5, [sp, #4]
 801b734:	9400      	str	r4, [sp, #0]
 801b736:	464b      	mov	r3, r9
 801b738:	4642      	mov	r2, r8
 801b73a:	4631      	mov	r1, r6
 801b73c:	4650      	mov	r0, sl
 801b73e:	f000 fbe4 	bl	801bf0a <convertirPWMaAnguloRC>
 801b742:	4603      	mov	r3, r0
 801b744:	ee07 3a90 	vmov	s15, r3
 801b748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b74c:	4b2a      	ldr	r3, [pc, #168]	; (801b7f8 <generarRefRollPitchRC+0x144>)
 801b74e:	edc3 7a00 	vstr	s15, [r3]

    canal = configRefRC()->pitch.canalRC;
 801b752:	f7ff fdef 	bl	801b334 <configRefRC>
 801b756:	4603      	mov	r3, r0
 801b758:	799b      	ldrb	r3, [r3, #6]
 801b75a:	71fb      	strb	r3, [r7, #7]

    if (canal == CANAL_NINGUNO)
 801b75c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b760:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b764:	d042      	beq.n	801b7ec <generarRefRollPitchRC+0x138>
        return;

    rc.pitch = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->pitch.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b766:	79fb      	ldrb	r3, [r7, #7]
 801b768:	4618      	mov	r0, r3
 801b76a:	f003 f975 	bl	801ea58 <canalRadio>
 801b76e:	4603      	mov	r3, r0
 801b770:	469a      	mov	sl, r3
 801b772:	f7ff fddf 	bl	801b334 <configRefRC>
 801b776:	4603      	mov	r3, r0
 801b778:	889e      	ldrh	r6, [r3, #4]
 801b77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b77e:	4618      	mov	r0, r3
 801b780:	f7ff fdc4 	bl	801b30c <configCanalRC>
 801b784:	4603      	mov	r3, r0
 801b786:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 801b78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b78e:	4618      	mov	r0, r3
 801b790:	f7ff fdbc 	bl	801b30c <configCanalRC>
 801b794:	4603      	mov	r3, r0
 801b796:	f8b3 9000 	ldrh.w	r9, [r3]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b79e:	4618      	mov	r0, r3
 801b7a0:	f7ff fdb4 	bl	801b30c <configCanalRC>
 801b7a4:	4603      	mov	r3, r0
    rc.pitch = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->pitch.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b7a6:	889c      	ldrh	r4, [r3, #4]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	f7ff fdad 	bl	801b30c <configCanalRC>
 801b7b2:	4603      	mov	r3, r0
    rc.pitch = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->pitch.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b7b4:	88dd      	ldrh	r5, [r3, #6]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7ff fda6 	bl	801b30c <configCanalRC>
 801b7c0:	4603      	mov	r3, r0
    rc.pitch = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->pitch.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b7c2:	7a1b      	ldrb	r3, [r3, #8]
 801b7c4:	9302      	str	r3, [sp, #8]
 801b7c6:	9501      	str	r5, [sp, #4]
 801b7c8:	9400      	str	r4, [sp, #0]
 801b7ca:	464b      	mov	r3, r9
 801b7cc:	4642      	mov	r2, r8
 801b7ce:	4631      	mov	r1, r6
 801b7d0:	4650      	mov	r0, sl
 801b7d2:	f000 fb9a 	bl	801bf0a <convertirPWMaAnguloRC>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	ee07 3a90 	vmov	s15, r3
 801b7dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7e0:	4b05      	ldr	r3, [pc, #20]	; (801b7f8 <generarRefRollPitchRC+0x144>)
 801b7e2:	edc3 7a01 	vstr	s15, [r3, #4]
 801b7e6:	e002      	b.n	801b7ee <generarRefRollPitchRC+0x13a>
        return;
 801b7e8:	bf00      	nop
 801b7ea:	e000      	b.n	801b7ee <generarRefRollPitchRC+0x13a>
        return;
 801b7ec:	bf00      	nop
}
 801b7ee:	3708      	adds	r7, #8
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7f6:	bf00      	nop
 801b7f8:	2000a3a0 	.word	0x2000a3a0

0801b7fc <generarRefYawRC>:
**  Descripcion:    Genera las referencias para Yaw
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void generarRefYawRC(void)
{
 801b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b800:	ed2d 8b02 	vpush	{d8}
 801b804:	b088      	sub	sp, #32
 801b806:	af04      	add	r7, sp, #16
	canalRC_e canal = configRefRC()->yaw.canalRC;
 801b808:	f7ff fd94 	bl	801b334 <configRefRC>
 801b80c:	4603      	mov	r3, r0
 801b80e:	7c1b      	ldrb	r3, [r3, #16]
 801b810:	73fb      	strb	r3, [r7, #15]

    if (canal == CANAL_NINGUNO)
 801b812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b81a:	f000 80a9 	beq.w	801b970 <generarRefYawRC+0x174>
        return;

    int16_t stick = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->yaw.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b81e:	7bfb      	ldrb	r3, [r7, #15]
 801b820:	4618      	mov	r0, r3
 801b822:	f003 f919 	bl	801ea58 <canalRadio>
 801b826:	4603      	mov	r3, r0
 801b828:	469a      	mov	sl, r3
 801b82a:	f7ff fd83 	bl	801b334 <configRefRC>
 801b82e:	4603      	mov	r3, r0
 801b830:	891e      	ldrh	r6, [r3, #8]
 801b832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff fd68 	bl	801b30c <configCanalRC>
 801b83c:	4603      	mov	r3, r0
 801b83e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 801b842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b846:	4618      	mov	r0, r3
 801b848:	f7ff fd60 	bl	801b30c <configCanalRC>
 801b84c:	4603      	mov	r3, r0
 801b84e:	f8b3 9000 	ldrh.w	r9, [r3]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b856:	4618      	mov	r0, r3
 801b858:	f7ff fd58 	bl	801b30c <configCanalRC>
 801b85c:	4603      	mov	r3, r0
    int16_t stick = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->yaw.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b85e:	889c      	ldrh	r4, [r3, #4]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b864:	4618      	mov	r0, r3
 801b866:	f7ff fd51 	bl	801b30c <configCanalRC>
 801b86a:	4603      	mov	r3, r0
    int16_t stick = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->yaw.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b86c:	88dd      	ldrh	r5, [r3, #6]
    		                       configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b872:	4618      	mov	r0, r3
 801b874:	f7ff fd4a 	bl	801b30c <configCanalRC>
 801b878:	4603      	mov	r3, r0
    int16_t stick = convertirPWMaAnguloRC(canalRadio(canal), configRefRC()->yaw.valorMax, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b87a:	7a1b      	ldrb	r3, [r3, #8]
 801b87c:	9302      	str	r3, [sp, #8]
 801b87e:	9501      	str	r5, [sp, #4]
 801b880:	9400      	str	r4, [sp, #0]
 801b882:	464b      	mov	r3, r9
 801b884:	4642      	mov	r2, r8
 801b886:	4631      	mov	r1, r6
 801b888:	4650      	mov	r0, sl
 801b88a:	f000 fb3e 	bl	801bf0a <convertirPWMaAnguloRC>
 801b88e:	4603      	mov	r3, r0
 801b890:	81bb      	strh	r3, [r7, #12]


    float y1, y2, y3;

    y1 = (float)stick / configRefRC()->yaw.valorMax;
 801b892:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b896:	ee07 3a90 	vmov	s15, r3
 801b89a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801b89e:	f7ff fd49 	bl	801b334 <configRefRC>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	891b      	ldrh	r3, [r3, #8]
 801b8a6:	ee07 3a90 	vmov	s15, r3
 801b8aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b8ae:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801b8b2:	edc7 7a02 	vstr	s15, [r7, #8]
    y2 = pow(y1, configRefRC()->yaw.grado);
 801b8b6:	edd7 7a02 	vldr	s15, [r7, #8]
 801b8ba:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801b8be:	f7ff fd39 	bl	801b334 <configRefRC>
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	7a9b      	ldrb	r3, [r3, #10]
 801b8c6:	ee07 3a90 	vmov	s15, r3
 801b8ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b8ce:	eeb0 1b47 	vmov.f64	d1, d7
 801b8d2:	eeb0 0b48 	vmov.f64	d0, d8
 801b8d6:	f01c fe43 	bl	8038560 <pow>
 801b8da:	eeb0 7b40 	vmov.f64	d7, d0
 801b8de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801b8e2:	edc7 7a01 	vstr	s15, [r7, #4]
    y3 = (configRefRC()->yaw.acro * y2) + ((1.0f - configRefRC()->yaw.acro) * y1);
 801b8e6:	f7ff fd25 	bl	801b334 <configRefRC>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	ed93 7a03 	vldr	s14, [r3, #12]
 801b8f0:	edd7 7a01 	vldr	s15, [r7, #4]
 801b8f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 801b8f8:	f7ff fd1c 	bl	801b334 <configRefRC>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	edd3 7a03 	vldr	s15, [r3, #12]
 801b902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b906:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b90a:	edd7 7a02 	vldr	s15, [r7, #8]
 801b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b912:	ee78 7a27 	vadd.f32	s15, s16, s15
 801b916:	edc7 7a00 	vstr	s15, [r7]
    rc.yaw = limitarFloat(configRefRC()->yaw.valorMax * y3, -configRefRC()->yaw.valorMax, configRefRC()->yaw.valorMax);
 801b91a:	f7ff fd0b 	bl	801b334 <configRefRC>
 801b91e:	4603      	mov	r3, r0
 801b920:	891b      	ldrh	r3, [r3, #8]
 801b922:	ee07 3a90 	vmov	s15, r3
 801b926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b92a:	edd7 7a00 	vldr	s15, [r7]
 801b92e:	ee27 8a27 	vmul.f32	s16, s14, s15
 801b932:	f7ff fcff 	bl	801b334 <configRefRC>
 801b936:	4603      	mov	r3, r0
 801b938:	891b      	ldrh	r3, [r3, #8]
 801b93a:	425b      	negs	r3, r3
 801b93c:	ee07 3a90 	vmov	s15, r3
 801b940:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801b944:	f7ff fcf6 	bl	801b334 <configRefRC>
 801b948:	4603      	mov	r3, r0
 801b94a:	891b      	ldrh	r3, [r3, #8]
 801b94c:	ee07 3a90 	vmov	s15, r3
 801b950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b954:	eeb0 1a67 	vmov.f32	s2, s15
 801b958:	eef0 0a68 	vmov.f32	s1, s17
 801b95c:	eeb0 0a48 	vmov.f32	s0, s16
 801b960:	f7f7 fe5d 	bl	801361e <limitarFloat>
 801b964:	eef0 7a40 	vmov.f32	s15, s0
 801b968:	4b05      	ldr	r3, [pc, #20]	; (801b980 <generarRefYawRC+0x184>)
 801b96a:	edc3 7a02 	vstr	s15, [r3, #8]
 801b96e:	e000      	b.n	801b972 <generarRefYawRC+0x176>
        return;
 801b970:	bf00      	nop
}
 801b972:	3710      	adds	r7, #16
 801b974:	46bd      	mov	sp, r7
 801b976:	ecbd 8b02 	vpop	{d8}
 801b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b97e:	bf00      	nop
 801b980:	2000a3a0 	.word	0x2000a3a0
 801b984:	00000000 	.word	0x00000000

0801b988 <generarRefAltRC>:
**  Descripcion:    Genera las referencias para la altura
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void generarRefAltRC(void)
{
 801b988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b98c:	ed2d 8b02 	vpush	{d8}
 801b990:	b08f      	sub	sp, #60	; 0x3c
 801b992:	af04      	add	r7, sp, #16
	canalRC_e canal = configRefRC()->alt.canalRC;
 801b994:	f7ff fcce 	bl	801b334 <configRefRC>
 801b998:	4603      	mov	r3, r0
 801b99a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801b99e:	77fb      	strb	r3, [r7, #31]

    if (canal == CANAL_NINGUNO)
 801b9a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9a8:	f000 8164 	beq.w	801bc74 <generarRefAltRC+0x2ec>
        return;

    if (rc.modo <= STABILIZE) {
 801b9ac:	4bb8      	ldr	r3, [pc, #736]	; (801bc90 <generarRefAltRC+0x308>)
 801b9ae:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	f300 809a 	bgt.w	801baec <generarRefAltRC+0x164>
        uint16_t stick = convertirPWMaRangoRC(canalRadio(canal), 1000, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b9b8:	7ffb      	ldrb	r3, [r7, #31]
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	f003 f84c 	bl	801ea58 <canalRadio>
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	4699      	mov	r9, r3
 801b9c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	f7ff fc9f 	bl	801b30c <configCanalRC>
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	885e      	ldrh	r6, [r3, #2]
 801b9d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7ff fc98 	bl	801b30c <configCanalRC>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	f8b3 8000 	ldrh.w	r8, [r3]
                        configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b9e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	f7ff fc90 	bl	801b30c <configCanalRC>
 801b9ec:	4603      	mov	r3, r0
        uint16_t stick = convertirPWMaRangoRC(canalRadio(canal), 1000, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b9ee:	889c      	ldrh	r4, [r3, #4]
                        configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b9f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7ff fc89 	bl	801b30c <configCanalRC>
 801b9fa:	4603      	mov	r3, r0
        uint16_t stick = convertirPWMaRangoRC(canalRadio(canal), 1000, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801b9fc:	88dd      	ldrh	r5, [r3, #6]
                        configCanalRC(canal)->valorTrim, configCanalRC(canal)->zonaMuerta, configCanalRC(canal)->reverse);
 801b9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ba02:	4618      	mov	r0, r3
 801ba04:	f7ff fc82 	bl	801b30c <configCanalRC>
 801ba08:	4603      	mov	r3, r0
        uint16_t stick = convertirPWMaRangoRC(canalRadio(canal), 1000, configCanalRC(canal)->valorMax, configCanalRC(canal)->valorMin,
 801ba0a:	7a1b      	ldrb	r3, [r3, #8]
 801ba0c:	9302      	str	r3, [sp, #8]
 801ba0e:	9501      	str	r5, [sp, #4]
 801ba10:	9400      	str	r4, [sp, #0]
 801ba12:	4643      	mov	r3, r8
 801ba14:	4632      	mov	r2, r6
 801ba16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801ba1a:	4648      	mov	r0, r9
 801ba1c:	f000 fade 	bl	801bfdc <convertirPWMaRangoRC>
 801ba20:	4603      	mov	r3, r0
 801ba22:	81bb      	strh	r3, [r7, #12]

        float entrada = stick / 1000.0;
 801ba24:	89bb      	ldrh	r3, [r7, #12]
 801ba26:	ee07 3a90 	vmov	s15, r3
 801ba2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ba2e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 801bc88 <generarRefAltRC+0x300>
 801ba32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ba36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ba3a:	edc7 7a02 	vstr	s15, [r7, #8]
        float tmp = entrada - configRefRC()->alt.expoMedio;
 801ba3e:	f7ff fc79 	bl	801b334 <configRefRC>
 801ba42:	4603      	mov	r3, r0
 801ba44:	edd3 7a06 	vldr	s15, [r3, #24]
 801ba48:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba50:	edc7 7a01 	vstr	s15, [r7, #4]
        float y = 1;
 801ba54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801ba58:	627b      	str	r3, [r7, #36]	; 0x24

        if (tmp > 0)
 801ba5a:	edd7 7a01 	vldr	s15, [r7, #4]
 801ba5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba66:	dd0a      	ble.n	801ba7e <generarRefAltRC+0xf6>
            y = 1 - configRefRC()->alt.expoMedio;
 801ba68:	f7ff fc64 	bl	801b334 <configRefRC>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	edd3 7a06 	vldr	s15, [r3, #24]
 801ba72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ba76:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if (tmp < 0)
 801ba7e:	edd7 7a01 	vldr	s15, [r7, #4]
 801ba82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba8a:	d504      	bpl.n	801ba96 <generarRefAltRC+0x10e>
            y = configRefRC()->alt.expoMedio;
 801ba8c:	f7ff fc52 	bl	801b334 <configRefRC>
 801ba90:	4603      	mov	r3, r0
 801ba92:	699b      	ldr	r3, [r3, #24]
 801ba94:	627b      	str	r3, [r7, #36]	; 0x24

        rc.altura = configRefRC()->alt.expoMedio + tmp * (1 - configRefRC()->alt.expoGrado + configRefRC()->alt.expoGrado * (tmp * tmp) / (y * y));
 801ba96:	f7ff fc4d 	bl	801b334 <configRefRC>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	ed93 8a06 	vldr	s16, [r3, #24]
 801baa0:	f7ff fc48 	bl	801b334 <configRefRC>
 801baa4:	4603      	mov	r3, r0
 801baa6:	edd3 7a07 	vldr	s15, [r3, #28]
 801baaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801baae:	ee77 8a67 	vsub.f32	s17, s14, s15
 801bab2:	f7ff fc3f 	bl	801b334 <configRefRC>
 801bab6:	4603      	mov	r3, r0
 801bab8:	ed93 7a07 	vldr	s14, [r3, #28]
 801babc:	edd7 7a01 	vldr	s15, [r7, #4]
 801bac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801bac4:	ee67 6a27 	vmul.f32	s13, s14, s15
 801bac8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bacc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801bad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bad4:	ee38 7aa7 	vadd.f32	s14, s17, s15
 801bad8:	edd7 7a01 	vldr	s15, [r7, #4]
 801badc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bae0:	ee78 7a27 	vadd.f32	s15, s16, s15
 801bae4:	4b6a      	ldr	r3, [pc, #424]	; (801bc90 <generarRefAltRC+0x308>)
 801bae6:	edc3 7a03 	vstr	s15, [r3, #12]
 801baea:	e0c4      	b.n	801bc76 <generarRefAltRC+0x2ee>
    }
    else {
        float vel = 0.0f;
 801baec:	f04f 0300 	mov.w	r3, #0
 801baf0:	623b      	str	r3, [r7, #32]
        float trim = configCanalRC(canal)->valorTrim;
 801baf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801baf6:	4618      	mov	r0, r3
 801baf8:	f7ff fc08 	bl	801b30c <configCanalRC>
 801bafc:	4603      	mov	r3, r0
 801bafe:	889b      	ldrh	r3, [r3, #4]
 801bb00:	ee07 3a90 	vmov	s15, r3
 801bb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb08:	edc7 7a06 	vstr	s15, [r7, #24]
        float trimAlto = trim + configCanalRC(canal)->zonaMuerta;
 801bb0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801bb10:	4618      	mov	r0, r3
 801bb12:	f7ff fbfb 	bl	801b30c <configCanalRC>
 801bb16:	4603      	mov	r3, r0
 801bb18:	88db      	ldrh	r3, [r3, #6]
 801bb1a:	ee07 3a90 	vmov	s15, r3
 801bb1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb22:	ed97 7a06 	vldr	s14, [r7, #24]
 801bb26:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bb2a:	edc7 7a05 	vstr	s15, [r7, #20]
        float trimBajo = trim - configCanalRC(canal)->zonaMuerta;
 801bb2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801bb32:	4618      	mov	r0, r3
 801bb34:	f7ff fbea 	bl	801b30c <configCanalRC>
 801bb38:	4603      	mov	r3, r0
 801bb3a:	88db      	ldrh	r3, [r3, #6]
 801bb3c:	ee07 3a90 	vmov	s15, r3
 801bb40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb44:	ed97 7a06 	vldr	s14, [r7, #24]
 801bb48:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bb4c:	edc7 7a04 	vstr	s15, [r7, #16]
        int16_t stick = canalRadio(canal);
 801bb50:	7ffb      	ldrb	r3, [r7, #31]
 801bb52:	4618      	mov	r0, r3
 801bb54:	f002 ff80 	bl	801ea58 <canalRadio>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	81fb      	strh	r3, [r7, #14]

        if (stick < trimBajo)
 801bb5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bb60:	ee07 3a90 	vmov	s15, r3
 801bb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb68:	ed97 7a04 	vldr	s14, [r7, #16]
 801bb6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb74:	dd27      	ble.n	801bbc6 <generarRefAltRC+0x23e>
        	vel = configRefRC()->alt.valorMax * (stick - trimBajo) / (trimBajo - configCanalRC(canal)->valorMin);
 801bb76:	f7ff fbdd 	bl	801b334 <configRefRC>
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	8a9b      	ldrh	r3, [r3, #20]
 801bb7e:	ee07 3a90 	vmov	s15, r3
 801bb82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bb86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bb8a:	ee07 3a90 	vmov	s15, r3
 801bb8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bb92:	edd7 7a04 	vldr	s15, [r7, #16]
 801bb96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801bb9a:	ee27 8a27 	vmul.f32	s16, s14, s15
 801bb9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801bba2:	4618      	mov	r0, r3
 801bba4:	f7ff fbb2 	bl	801b30c <configCanalRC>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	881b      	ldrh	r3, [r3, #0]
 801bbac:	ee07 3a90 	vmov	s15, r3
 801bbb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbb4:	ed97 7a04 	vldr	s14, [r7, #16]
 801bbb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bbbc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801bbc0:	edc7 7a08 	vstr	s15, [r7, #32]
 801bbc4:	e037      	b.n	801bc36 <generarRefAltRC+0x2ae>
        else if (stick > trimAlto)
 801bbc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bbca:	ee07 3a90 	vmov	s15, r3
 801bbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbd2:	ed97 7a05 	vldr	s14, [r7, #20]
 801bbd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbde:	d527      	bpl.n	801bc30 <generarRefAltRC+0x2a8>
        	vel = configRefRC()->alt.valorMax * (stick - trimAlto) / (configCanalRC(canal)->valorMax - trimAlto);
 801bbe0:	f7ff fba8 	bl	801b334 <configRefRC>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	8a9b      	ldrh	r3, [r3, #20]
 801bbe8:	ee07 3a90 	vmov	s15, r3
 801bbec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bbf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bbf4:	ee07 3a90 	vmov	s15, r3
 801bbf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bbfc:	edd7 7a05 	vldr	s15, [r7, #20]
 801bc00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801bc04:	ee27 8a27 	vmul.f32	s16, s14, s15
 801bc08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f7ff fb7d 	bl	801b30c <configCanalRC>
 801bc12:	4603      	mov	r3, r0
 801bc14:	885b      	ldrh	r3, [r3, #2]
 801bc16:	ee07 3a90 	vmov	s15, r3
 801bc1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bc1e:	edd7 7a05 	vldr	s15, [r7, #20]
 801bc22:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bc26:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801bc2a:	edc7 7a08 	vstr	s15, [r7, #32]
 801bc2e:	e002      	b.n	801bc36 <generarRefAltRC+0x2ae>
        else
        	vel = 0.0f;
 801bc30:	f04f 0300 	mov.w	r3, #0
 801bc34:	623b      	str	r3, [r7, #32]

        rc.altura = limitarFloat(vel, -configRefRC()->alt.valorMax, configRefRC()->alt.valorMax);
 801bc36:	f7ff fb7d 	bl	801b334 <configRefRC>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	8a9b      	ldrh	r3, [r3, #20]
 801bc3e:	425b      	negs	r3, r3
 801bc40:	ee07 3a90 	vmov	s15, r3
 801bc44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801bc48:	f7ff fb74 	bl	801b334 <configRefRC>
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	8a9b      	ldrh	r3, [r3, #20]
 801bc50:	ee07 3a90 	vmov	s15, r3
 801bc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc58:	eeb0 1a67 	vmov.f32	s2, s15
 801bc5c:	eef0 0a48 	vmov.f32	s1, s16
 801bc60:	ed97 0a08 	vldr	s0, [r7, #32]
 801bc64:	f7f7 fcdb 	bl	801361e <limitarFloat>
 801bc68:	eef0 7a40 	vmov.f32	s15, s0
 801bc6c:	4b08      	ldr	r3, [pc, #32]	; (801bc90 <generarRefAltRC+0x308>)
 801bc6e:	edc3 7a03 	vstr	s15, [r3, #12]
 801bc72:	e000      	b.n	801bc76 <generarRefAltRC+0x2ee>
        return;
 801bc74:	bf00      	nop
    }
}
 801bc76:	372c      	adds	r7, #44	; 0x2c
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	ecbd 8b02 	vpop	{d8}
 801bc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc82:	bf00      	nop
 801bc84:	f3af 8000 	nop.w
 801bc88:	00000000 	.word	0x00000000
 801bc8c:	408f4000 	.word	0x408f4000
 801bc90:	2000a3a0 	.word	0x2000a3a0

0801bc94 <actualizarModoRC>:
**  Descripcion:    Actualiza el modo del sistema
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarModoRC(void)
{
 801bc94:	b590      	push	{r4, r7, lr}
 801bc96:	b083      	sub	sp, #12
 801bc98:	af00      	add	r7, sp, #0
    uint8_t posicion;
    uint8_t canal = configModoRC()->canalModoVuelo;
 801bc9a:	f7ff fb55 	bl	801b348 <configModoRC>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	895b      	ldrh	r3, [r3, #10]
 801bca2:	71bb      	strb	r3, [r7, #6]
    uint16_t pwm = canalRadio(canal);
 801bca4:	79bb      	ldrb	r3, [r7, #6]
 801bca6:	4618      	mov	r0, r3
 801bca8:	f002 fed6 	bl	801ea58 <canalRadio>
 801bcac:	4603      	mov	r3, r0
 801bcae:	80bb      	strh	r3, [r7, #4]

    // Se actualiza el Emergency Stop del sistema
    comprobarModoEstopRC();
 801bcb0:	f000 f88a 	bl	801bdc8 <comprobarModoEstopRC>

    if (rc.eStop == true || solicitarEstop)
 801bcb4:	4b27      	ldr	r3, [pc, #156]	; (801bd54 <actualizarModoRC+0xc0>)
 801bcb6:	7c5b      	ldrb	r3, [r3, #17]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d144      	bne.n	801bd46 <actualizarModoRC+0xb2>
 801bcbc:	4b26      	ldr	r3, [pc, #152]	; (801bd58 <actualizarModoRC+0xc4>)
 801bcbe:	781b      	ldrb	r3, [r3, #0]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d140      	bne.n	801bd46 <actualizarModoRC+0xb2>
        return;

    // Se actualiza el modo del sistema
    pwm = rangoPWMValidoRC(pwm, configCanalRC(canal)->valorMin, configCanalRC(canal)->valorMax);
 801bcc4:	79bb      	ldrb	r3, [r7, #6]
 801bcc6:	4618      	mov	r0, r3
 801bcc8:	f7ff fb20 	bl	801b30c <configCanalRC>
 801bccc:	4603      	mov	r3, r0
 801bcce:	881c      	ldrh	r4, [r3, #0]
 801bcd0:	79bb      	ldrb	r3, [r7, #6]
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	f7ff fb1a 	bl	801b30c <configCanalRC>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	885a      	ldrh	r2, [r3, #2]
 801bcdc:	88bb      	ldrh	r3, [r7, #4]
 801bcde:	4621      	mov	r1, r4
 801bce0:	4618      	mov	r0, r3
 801bce2:	f000 f8f4 	bl	801bece <rangoPWMValidoRC>
 801bce6:	4603      	mov	r3, r0
 801bce8:	80bb      	strh	r3, [r7, #4]

    if      (pwm < 1200) posicion = 0;
 801bcea:	88bb      	ldrh	r3, [r7, #4]
 801bcec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 801bcf0:	d202      	bcs.n	801bcf8 <actualizarModoRC+0x64>
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	71fb      	strb	r3, [r7, #7]
 801bcf6:	e016      	b.n	801bd26 <actualizarModoRC+0x92>
    else if (pwm < 1400) posicion = 1;
 801bcf8:	88bb      	ldrh	r3, [r7, #4]
 801bcfa:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801bcfe:	d202      	bcs.n	801bd06 <actualizarModoRC+0x72>
 801bd00:	2301      	movs	r3, #1
 801bd02:	71fb      	strb	r3, [r7, #7]
 801bd04:	e00f      	b.n	801bd26 <actualizarModoRC+0x92>
    else if (pwm < 1600) posicion = 2;
 801bd06:	88bb      	ldrh	r3, [r7, #4]
 801bd08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bd0c:	d202      	bcs.n	801bd14 <actualizarModoRC+0x80>
 801bd0e:	2302      	movs	r3, #2
 801bd10:	71fb      	strb	r3, [r7, #7]
 801bd12:	e008      	b.n	801bd26 <actualizarModoRC+0x92>
    else if (pwm < 1800) posicion = 3;
 801bd14:	88bb      	ldrh	r3, [r7, #4]
 801bd16:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 801bd1a:	d202      	bcs.n	801bd22 <actualizarModoRC+0x8e>
 801bd1c:	2303      	movs	r3, #3
 801bd1e:	71fb      	strb	r3, [r7, #7]
 801bd20:	e001      	b.n	801bd26 <actualizarModoRC+0x92>
    else posicion = 4;
 801bd22:	2304      	movs	r3, #4
 801bd24:	71fb      	strb	r3, [r7, #7]

    if (!antirreboteRC(&antirreboteModo, posicion))
 801bd26:	79fb      	ldrb	r3, [r7, #7]
 801bd28:	4619      	mov	r1, r3
 801bd2a:	480c      	ldr	r0, [pc, #48]	; (801bd5c <actualizarModoRC+0xc8>)
 801bd2c:	f000 f896 	bl	801be5c <antirreboteRC>
 801bd30:	4603      	mov	r3, r0
 801bd32:	f083 0301 	eor.w	r3, r3, #1
 801bd36:	b2db      	uxtb	r3, r3
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d106      	bne.n	801bd4a <actualizarModoRC+0xb6>
        return;

    asignarModoRC(posicion);
 801bd3c:	79fb      	ldrb	r3, [r7, #7]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f000 f80e 	bl	801bd60 <asignarModoRC>
 801bd44:	e002      	b.n	801bd4c <actualizarModoRC+0xb8>
        return;
 801bd46:	bf00      	nop
 801bd48:	e000      	b.n	801bd4c <actualizarModoRC+0xb8>
        return;
 801bd4a:	bf00      	nop
}
 801bd4c:	370c      	adds	r7, #12
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd90      	pop	{r4, r7, pc}
 801bd52:	bf00      	nop
 801bd54:	2000a3a0 	.word	0x2000a3a0
 801bd58:	2000a3b4 	.word	0x2000a3b4
 801bd5c:	2000a3dc 	.word	0x2000a3dc

0801bd60 <asignarModoRC>:
**  Descripcion:    Asigna el modo del sistema
**  Parametros:     Modo a seleccionar
**  Retorno:        Ninguno
****************************************************************************************/
void asignarModoRC(uint8_t modo)
{
 801bd60:	b590      	push	{r4, r7, lr}
 801bd62:	b085      	sub	sp, #20
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	4603      	mov	r3, r0
 801bd68:	71fb      	strb	r3, [r7, #7]
    if (modo < 0 || modo > CNT_MODOS)   // Fallo al definir los modos
 801bd6a:	79fb      	ldrb	r3, [r7, #7]
 801bd6c:	2b04      	cmp	r3, #4
 801bd6e:	d823      	bhi.n	801bdb8 <asignarModoRC+0x58>
        return;

    // Se busca el modo que le toca
    for (uint8_t i = 0; i < NUM_MAX_MODOS_CANAL_RC; i++) {
 801bd70:	2300      	movs	r3, #0
 801bd72:	73fb      	strb	r3, [r7, #15]
 801bd74:	e01c      	b.n	801bdb0 <asignarModoRC+0x50>
        if (modo == configModoRC()->modo[i].posicion) {
 801bd76:	79fc      	ldrb	r4, [r7, #7]
 801bd78:	f7ff fae6 	bl	801b348 <configModoRC>
 801bd7c:	4602      	mov	r2, r0
 801bd7e:	7bfb      	ldrb	r3, [r7, #15]
 801bd80:	005b      	lsls	r3, r3, #1
 801bd82:	4413      	add	r3, r2
 801bd84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801bd88:	429c      	cmp	r4, r3
 801bd8a:	d10e      	bne.n	801bdaa <asignarModoRC+0x4a>
            rc.modo = configModoRC()->modo[i].modo;
 801bd8c:	f7ff fadc 	bl	801b348 <configModoRC>
 801bd90:	4602      	mov	r2, r0
 801bd92:	7bfb      	ldrb	r3, [r7, #15]
 801bd94:	f912 2013 	ldrsb.w	r2, [r2, r3, lsl #1]
 801bd98:	4b09      	ldr	r3, [pc, #36]	; (801bdc0 <asignarModoRC+0x60>)
 801bd9a:	741a      	strb	r2, [r3, #16]
#ifdef DEBUG
            printf("Modo de vuelo seleccionado: %u\n", rc.modo);
 801bd9c:	4b08      	ldr	r3, [pc, #32]	; (801bdc0 <asignarModoRC+0x60>)
 801bd9e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801bda2:	4619      	mov	r1, r3
 801bda4:	4807      	ldr	r0, [pc, #28]	; (801bdc4 <asignarModoRC+0x64>)
 801bda6:	f019 ffa5 	bl	8035cf4 <iprintf>
    for (uint8_t i = 0; i < NUM_MAX_MODOS_CANAL_RC; i++) {
 801bdaa:	7bfb      	ldrb	r3, [r7, #15]
 801bdac:	3301      	adds	r3, #1
 801bdae:	73fb      	strb	r3, [r7, #15]
 801bdb0:	7bfb      	ldrb	r3, [r7, #15]
 801bdb2:	2b04      	cmp	r3, #4
 801bdb4:	d9df      	bls.n	801bd76 <asignarModoRC+0x16>
 801bdb6:	e000      	b.n	801bdba <asignarModoRC+0x5a>
        return;
 801bdb8:	bf00      	nop
#endif
        }
    }
}
 801bdba:	3714      	adds	r7, #20
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd90      	pop	{r4, r7, pc}
 801bdc0:	2000a3a0 	.word	0x2000a3a0
 801bdc4:	0803a7cc 	.word	0x0803a7cc

0801bdc8 <comprobarModoEstopRC>:
**  Descripcion:    Actualiza el modo del sistema
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void comprobarModoEstopRC(void)
{
 801bdc8:	b5b0      	push	{r4, r5, r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
    uint8_t posicion;
    canalRC_e canal = configModoRC()->canalModoEStop;
 801bdce:	f7ff fabb 	bl	801b348 <configModoRC>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	899b      	ldrh	r3, [r3, #12]
 801bdd6:	71bb      	strb	r3, [r7, #6]

    if (canal == CANAL_NINGUNO)
 801bdd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bde0:	d035      	beq.n	801be4e <comprobarModoEstopRC+0x86>
        return;

    uint16_t pwm = rangoPWMValidoRC(canalRadio(canal), configCanalRC(canal)->valorMin, configCanalRC(canal)->valorMax);
 801bde2:	79bb      	ldrb	r3, [r7, #6]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f002 fe37 	bl	801ea58 <canalRadio>
 801bdea:	4603      	mov	r3, r0
 801bdec:	461d      	mov	r5, r3
 801bdee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f7ff fa8a 	bl	801b30c <configCanalRC>
 801bdf8:	4603      	mov	r3, r0
 801bdfa:	881c      	ldrh	r4, [r3, #0]
 801bdfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801be00:	4618      	mov	r0, r3
 801be02:	f7ff fa83 	bl	801b30c <configCanalRC>
 801be06:	4603      	mov	r3, r0
 801be08:	885b      	ldrh	r3, [r3, #2]
 801be0a:	461a      	mov	r2, r3
 801be0c:	4621      	mov	r1, r4
 801be0e:	4628      	mov	r0, r5
 801be10:	f000 f85d 	bl	801bece <rangoPWMValidoRC>
 801be14:	4603      	mov	r3, r0
 801be16:	80bb      	strh	r3, [r7, #4]
    if (pwm > configCanalRC(canal)->valorTrim)
 801be18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7ff fa75 	bl	801b30c <configCanalRC>
 801be22:	4603      	mov	r3, r0
 801be24:	889b      	ldrh	r3, [r3, #4]
 801be26:	88ba      	ldrh	r2, [r7, #4]
 801be28:	429a      	cmp	r2, r3
 801be2a:	d902      	bls.n	801be32 <comprobarModoEstopRC+0x6a>
    	posicion = 0;
 801be2c:	2300      	movs	r3, #0
 801be2e:	71fb      	strb	r3, [r7, #7]
 801be30:	e001      	b.n	801be36 <comprobarModoEstopRC+0x6e>
    else
    	posicion = 1;
 801be32:	2301      	movs	r3, #1
 801be34:	71fb      	strb	r3, [r7, #7]

    // Solo se actualiza el estado una vez estabilizada la señal
    //if (!antirreboteRC(&antirreboteEstop, posicion))
        //return;

    if (posicion == 0)
 801be36:	79fb      	ldrb	r3, [r7, #7]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d102      	bne.n	801be42 <comprobarModoEstopRC+0x7a>
        encenderMotoresMixer();
 801be3c:	f7ff fa40 	bl	801b2c0 <encenderMotoresMixer>
 801be40:	e001      	b.n	801be46 <comprobarModoEstopRC+0x7e>
    else
    	apagarMotoresMixer();
 801be42:	f7ff fa29 	bl	801b298 <apagarMotoresMixer>

    rc.eStop = false;
 801be46:	4b04      	ldr	r3, [pc, #16]	; (801be58 <comprobarModoEstopRC+0x90>)
 801be48:	2200      	movs	r2, #0
 801be4a:	745a      	strb	r2, [r3, #17]
 801be4c:	e000      	b.n	801be50 <comprobarModoEstopRC+0x88>
        return;
 801be4e:	bf00      	nop
    //if (posicion)
     //   printf("Modo EStop activado\n");
    //else
    //	printf("Modo EStop desactivado\n");
#endif
}
 801be50:	3708      	adds	r7, #8
 801be52:	46bd      	mov	sp, r7
 801be54:	bdb0      	pop	{r4, r5, r7, pc}
 801be56:	bf00      	nop
 801be58:	2000a3a0 	.word	0x2000a3a0

0801be5c <antirreboteRC>:
**  Descripcion:    Antirrebote en el cambio del modo
**  Parametros:     Estructura del antirrebote, posicion del stick
**  Retorno:        True si OK
****************************************************************************************/
bool antirreboteRC(antirreboteModoRC_t *antirrebote, uint8_t posicion)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b084      	sub	sp, #16
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
 801be64:	460b      	mov	r3, r1
 801be66:	70fb      	strb	r3, [r7, #3]
    if (configModoRC()->modo[posicion].modo == MODO_NINGUNO)
 801be68:	f7ff fa6e 	bl	801b348 <configModoRC>
 801be6c:	4602      	mov	r2, r0
 801be6e:	78fb      	ldrb	r3, [r7, #3]
 801be70:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 801be74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be78:	d101      	bne.n	801be7e <antirreboteRC+0x22>
        return false;
 801be7a:	2300      	movs	r3, #0
 801be7c:	e023      	b.n	801bec6 <antirreboteRC+0x6a>

    if (antirrebote->posicionActual == posicion)
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	781b      	ldrb	r3, [r3, #0]
 801be82:	78fa      	ldrb	r2, [r7, #3]
 801be84:	429a      	cmp	r2, r3
 801be86:	d103      	bne.n	801be90 <antirreboteRC+0x34>
    	antirrebote->posicionAnterior = posicion;
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	78fa      	ldrb	r2, [r7, #3]
 801be8c:	705a      	strb	r2, [r3, #1]
 801be8e:	e019      	b.n	801bec4 <antirreboteRC+0x68>
    else {
        // Cambio de posicion detectado
        const uint32_t tiempo = millis();
 801be90:	f7fb fe60 	bl	8017b54 <millis>
 801be94:	60f8      	str	r0, [r7, #12]

        // Posicion no estabilizada
        if (antirrebote->posicionAnterior != posicion) {
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	785b      	ldrb	r3, [r3, #1]
 801be9a:	78fa      	ldrb	r2, [r7, #3]
 801be9c:	429a      	cmp	r2, r3
 801be9e:	d006      	beq.n	801beae <antirreboteRC+0x52>
        	antirrebote->posicionAnterior = posicion;
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	78fa      	ldrb	r2, [r7, #3]
 801bea4:	705a      	strb	r2, [r3, #1]
        	antirrebote->tiempo = tiempo;
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	68fa      	ldr	r2, [r7, #12]
 801beaa:	605a      	str	r2, [r3, #4]
 801beac:	e00a      	b.n	801bec4 <antirreboteRC+0x68>
        }
        else if (tiempo - antirrebote->tiempo >= ANTIRREBOTE_MS) {
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	685b      	ldr	r3, [r3, #4]
 801beb2:	68fa      	ldr	r2, [r7, #12]
 801beb4:	1ad3      	subs	r3, r2, r3
 801beb6:	2bc7      	cmp	r3, #199	; 0xc7
 801beb8:	d904      	bls.n	801bec4 <antirreboteRC+0x68>
            // Posicion estabilizada
        	antirrebote->posicionActual = posicion;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	78fa      	ldrb	r2, [r7, #3]
 801bebe:	701a      	strb	r2, [r3, #0]
            return true;
 801bec0:	2301      	movs	r3, #1
 801bec2:	e000      	b.n	801bec6 <antirreboteRC+0x6a>
        }
    }

    return false;
 801bec4:	2300      	movs	r3, #0
}
 801bec6:	4618      	mov	r0, r3
 801bec8:	3710      	adds	r7, #16
 801beca:	46bd      	mov	sp, r7
 801becc:	bd80      	pop	{r7, pc}

0801bece <rangoPWMValidoRC>:
**  Descripcion:    Comprueba si un valor de PWM esta en el rango correcto
**  Parametros:     Valor PWM a comprobar, valor minimo PWM, valor maximo PWM
**  Retorno:        Valor PWM en rango
****************************************************************************************/
uint16_t rangoPWMValidoRC(uint16_t pwm, uint16_t pwmMin, uint16_t pwmMax)
{
 801bece:	b580      	push	{r7, lr}
 801bed0:	b082      	sub	sp, #8
 801bed2:	af00      	add	r7, sp, #0
 801bed4:	4603      	mov	r3, r0
 801bed6:	80fb      	strh	r3, [r7, #6]
 801bed8:	460b      	mov	r3, r1
 801beda:	80bb      	strh	r3, [r7, #4]
 801bedc:	4613      	mov	r3, r2
 801bede:	807b      	strh	r3, [r7, #2]
    if (pwm <= pwmMin || pwm >= pwmMax)
 801bee0:	88fa      	ldrh	r2, [r7, #6]
 801bee2:	88bb      	ldrh	r3, [r7, #4]
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d903      	bls.n	801bef0 <rangoPWMValidoRC+0x22>
 801bee8:	88fa      	ldrh	r2, [r7, #6]
 801beea:	887b      	ldrh	r3, [r7, #2]
 801beec:	429a      	cmp	r2, r3
 801beee:	d307      	bcc.n	801bf00 <rangoPWMValidoRC+0x32>
        return limitarUint16(pwm, pwmMin, pwmMax);;
 801bef0:	887a      	ldrh	r2, [r7, #2]
 801bef2:	88b9      	ldrh	r1, [r7, #4]
 801bef4:	88fb      	ldrh	r3, [r7, #6]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7f7 fb5c 	bl	80135b4 <limitarUint16>
 801befc:	4603      	mov	r3, r0
 801befe:	e000      	b.n	801bf02 <rangoPWMValidoRC+0x34>

    return pwm;
 801bf00:	88fb      	ldrh	r3, [r7, #6]
}
 801bf02:	4618      	mov	r0, r3
 801bf04:	3708      	adds	r7, #8
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}

0801bf0a <convertirPWMaAnguloRC>:
**  Descripcion:    Convierte el valor PWM de la radio en los setpoints de los PID
**  Parametros:     Valor PWM, valor Maximo del setpoint, valor maximo del PWM, valor minimo del PWM, valor intermedio, rango de la zona muerta, canal en reverse
**  Retorno:        Valor convertido
****************************************************************************************/
int16_t convertirPWMaAnguloRC(uint16_t pwm, uint16_t setPointMax, uint16_t pwmMax, uint16_t pwmMin, uint16_t trim, uint16_t zonaMuerta, bool reverse)
{
 801bf0a:	b590      	push	{r4, r7, lr}
 801bf0c:	b085      	sub	sp, #20
 801bf0e:	af00      	add	r7, sp, #0
 801bf10:	4604      	mov	r4, r0
 801bf12:	4608      	mov	r0, r1
 801bf14:	4611      	mov	r1, r2
 801bf16:	461a      	mov	r2, r3
 801bf18:	4623      	mov	r3, r4
 801bf1a:	80fb      	strh	r3, [r7, #6]
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	80bb      	strh	r3, [r7, #4]
 801bf20:	460b      	mov	r3, r1
 801bf22:	807b      	strh	r3, [r7, #2]
 801bf24:	4613      	mov	r3, r2
 801bf26:	803b      	strh	r3, [r7, #0]
    int16_t trimAlto = trim + zonaMuerta;
 801bf28:	8c3a      	ldrh	r2, [r7, #32]
 801bf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bf2c:	4413      	add	r3, r2
 801bf2e:	b29b      	uxth	r3, r3
 801bf30:	81fb      	strh	r3, [r7, #14]
    int16_t trimBajo = trim - zonaMuerta;
 801bf32:	8c3a      	ldrh	r2, [r7, #32]
 801bf34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bf36:	1ad3      	subs	r3, r2, r3
 801bf38:	b29b      	uxth	r3, r3
 801bf3a:	81bb      	strh	r3, [r7, #12]
    int16_t reverseMul = reverse ? - 1 : 1;
 801bf3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d002      	beq.n	801bf4a <convertirPWMaAnguloRC+0x40>
 801bf44:	f04f 33ff 	mov.w	r3, #4294967295
 801bf48:	e000      	b.n	801bf4c <convertirPWMaAnguloRC+0x42>
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	817b      	strh	r3, [r7, #10]

    // Limitamos el valor del PWM al rango correcto
    uint16_t pwmRC = rangoPWMValidoRC(pwm, pwmMin, pwmMax);
 801bf4e:	887a      	ldrh	r2, [r7, #2]
 801bf50:	8839      	ldrh	r1, [r7, #0]
 801bf52:	88fb      	ldrh	r3, [r7, #6]
 801bf54:	4618      	mov	r0, r3
 801bf56:	f7ff ffba 	bl	801bece <rangoPWMValidoRC>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	813b      	strh	r3, [r7, #8]

    // Calcula el angulo de setpoint de forma simetrica
    if (pwmRC > trimAlto && pwmMax != trimAlto)
 801bf5e:	893a      	ldrh	r2, [r7, #8]
 801bf60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bf64:	429a      	cmp	r2, r3
 801bf66:	dd17      	ble.n	801bf98 <convertirPWMaAnguloRC+0x8e>
 801bf68:	887a      	ldrh	r2, [r7, #2]
 801bf6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bf6e:	429a      	cmp	r2, r3
 801bf70:	d012      	beq.n	801bf98 <convertirPWMaAnguloRC+0x8e>
        return reverseMul * ((int32_t)setPointMax * (int32_t)(pwmRC - trimAlto)) / (int32_t)(pwmMax  - trimAlto);
 801bf72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801bf76:	88ba      	ldrh	r2, [r7, #4]
 801bf78:	8938      	ldrh	r0, [r7, #8]
 801bf7a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801bf7e:	1a41      	subs	r1, r0, r1
 801bf80:	fb01 f202 	mul.w	r2, r1, r2
 801bf84:	fb03 f202 	mul.w	r2, r3, r2
 801bf88:	8879      	ldrh	r1, [r7, #2]
 801bf8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bf8e:	1acb      	subs	r3, r1, r3
 801bf90:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf94:	b21b      	sxth	r3, r3
 801bf96:	e01d      	b.n	801bfd4 <convertirPWMaAnguloRC+0xca>
    else if (pwmRC < trimBajo && pwmMin != trimBajo)
 801bf98:	893a      	ldrh	r2, [r7, #8]
 801bf9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	da17      	bge.n	801bfd2 <convertirPWMaAnguloRC+0xc8>
 801bfa2:	883a      	ldrh	r2, [r7, #0]
 801bfa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	d012      	beq.n	801bfd2 <convertirPWMaAnguloRC+0xc8>
        return reverseMul * ((int32_t)setPointMax * (int32_t)(pwmRC - trimBajo)) / (int32_t)(trimBajo - pwmMin);
 801bfac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801bfb0:	88ba      	ldrh	r2, [r7, #4]
 801bfb2:	8938      	ldrh	r0, [r7, #8]
 801bfb4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 801bfb8:	1a41      	subs	r1, r0, r1
 801bfba:	fb01 f202 	mul.w	r2, r1, r2
 801bfbe:	fb03 f202 	mul.w	r2, r3, r2
 801bfc2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 801bfc6:	883b      	ldrh	r3, [r7, #0]
 801bfc8:	1acb      	subs	r3, r1, r3
 801bfca:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfce:	b21b      	sxth	r3, r3
 801bfd0:	e000      	b.n	801bfd4 <convertirPWMaAnguloRC+0xca>
    else
        return 0;
 801bfd2:	2300      	movs	r3, #0
}
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	3714      	adds	r7, #20
 801bfd8:	46bd      	mov	sp, r7
 801bfda:	bd90      	pop	{r4, r7, pc}

0801bfdc <convertirPWMaRangoRC>:
**  Descripcion:    Convierte el valor PWM de la radio en los setpoints de los PID
**  Parametros:     Valor PWM, valor Maximo del setpoint, valor maximo del PWM, valor minimo del PWM, valor intermedio, rango de la zona muerta, canal en reverse
**  Retorno:        Valor convertido
****************************************************************************************/
int16_t convertirPWMaRangoRC(uint16_t pwm, uint16_t setPointMax, uint16_t pwmMax, uint16_t pwmMin, uint16_t trim, uint16_t zonaMuerta, bool reverse)
{
 801bfdc:	b590      	push	{r4, r7, lr}
 801bfde:	b085      	sub	sp, #20
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	4608      	mov	r0, r1
 801bfe6:	4611      	mov	r1, r2
 801bfe8:	461a      	mov	r2, r3
 801bfea:	4623      	mov	r3, r4
 801bfec:	80fb      	strh	r3, [r7, #6]
 801bfee:	4603      	mov	r3, r0
 801bff0:	80bb      	strh	r3, [r7, #4]
 801bff2:	460b      	mov	r3, r1
 801bff4:	807b      	strh	r3, [r7, #2]
 801bff6:	4613      	mov	r3, r2
 801bff8:	803b      	strh	r3, [r7, #0]
    int16_t trimBajo  = pwmMin + zonaMuerta;
 801bffa:	883a      	ldrh	r2, [r7, #0]
 801bffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bffe:	4413      	add	r3, r2
 801c000:	b29b      	uxth	r3, r3
 801c002:	81bb      	strh	r3, [r7, #12]

    // Limitamos el valor del PWM al rango correcto
    uint16_t pwmRC = rangoPWMValidoRC(pwm, pwmMin, pwmMax);
 801c004:	887a      	ldrh	r2, [r7, #2]
 801c006:	8839      	ldrh	r1, [r7, #0]
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7ff ff5f 	bl	801bece <rangoPWMValidoRC>
 801c010:	4603      	mov	r3, r0
 801c012:	81fb      	strh	r3, [r7, #14]

    if (reverse)
 801c014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d006      	beq.n	801c02a <convertirPWMaRangoRC+0x4e>
    	pwmRC = pwmMax - (pwmRC - pwmMin);
 801c01c:	883a      	ldrh	r2, [r7, #0]
 801c01e:	89fb      	ldrh	r3, [r7, #14]
 801c020:	1ad3      	subs	r3, r2, r3
 801c022:	b29a      	uxth	r2, r3
 801c024:	887b      	ldrh	r3, [r7, #2]
 801c026:	4413      	add	r3, r2
 801c028:	81fb      	strh	r3, [r7, #14]

    if (pwmRC > trimBajo)
 801c02a:	89fa      	ldrh	r2, [r7, #14]
 801c02c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801c030:	429a      	cmp	r2, r3
 801c032:	dd0e      	ble.n	801c052 <convertirPWMaRangoRC+0x76>
        return (((int32_t)(setPointMax) * (int32_t)(pwmRC - trimBajo)) / (int32_t)(pwmMax - trimBajo));
 801c034:	88bb      	ldrh	r3, [r7, #4]
 801c036:	89f9      	ldrh	r1, [r7, #14]
 801c038:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c03c:	1a8a      	subs	r2, r1, r2
 801c03e:	fb03 f202 	mul.w	r2, r3, r2
 801c042:	8879      	ldrh	r1, [r7, #2]
 801c044:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801c048:	1acb      	subs	r3, r1, r3
 801c04a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c04e:	b21b      	sxth	r3, r3
 801c050:	e000      	b.n	801c054 <convertirPWMaRangoRC+0x78>
    else
        return 0;
 801c052:	2300      	movs	r3, #0
}
 801c054:	4618      	mov	r0, r3
 801c056:	3714      	adds	r7, #20
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd90      	pop	{r4, r7, pc}

0801c05c <sistemaEnEStop>:
**  Descripcion:    Devuelve si el sistema esta en parada de emergencia
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool sistemaEnEStop(void)
{
 801c05c:	b480      	push	{r7}
 801c05e:	af00      	add	r7, sp, #0
    return rc.eStop;
 801c060:	4b03      	ldr	r3, [pc, #12]	; (801c070 <sistemaEnEStop+0x14>)
 801c062:	7c5b      	ldrb	r3, [r3, #17]
}
 801c064:	4618      	mov	r0, r3
 801c066:	46bd      	mov	sp, r7
 801c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c06c:	4770      	bx	lr
 801c06e:	bf00      	nop
 801c070:	2000a3a0 	.word	0x2000a3a0

0801c074 <refAngulosRC>:
**  Descripcion:    Devuelve las referencias de los angulos
**  Parametros:     Puntero al array de referencias de angulo
**  Retorno:        Ninguno
****************************************************************************************/
void refAngulosRC(float *ref)
{
 801c074:	b480      	push	{r7}
 801c076:	b083      	sub	sp, #12
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
    ref[0] = rc.roll;
 801c07c:	4b09      	ldr	r3, [pc, #36]	; (801c0a4 <refAngulosRC+0x30>)
 801c07e:	681a      	ldr	r2, [r3, #0]
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	601a      	str	r2, [r3, #0]
    ref[1] = rc.pitch;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	3304      	adds	r3, #4
 801c088:	4a06      	ldr	r2, [pc, #24]	; (801c0a4 <refAngulosRC+0x30>)
 801c08a:	6852      	ldr	r2, [r2, #4]
 801c08c:	601a      	str	r2, [r3, #0]
    ref[2] = rc.yaw;
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	3308      	adds	r3, #8
 801c092:	4a04      	ldr	r2, [pc, #16]	; (801c0a4 <refAngulosRC+0x30>)
 801c094:	6892      	ldr	r2, [r2, #8]
 801c096:	601a      	str	r2, [r3, #0]
}
 801c098:	bf00      	nop
 801c09a:	370c      	adds	r7, #12
 801c09c:	46bd      	mov	sp, r7
 801c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a2:	4770      	bx	lr
 801c0a4:	2000a3a0 	.word	0x2000a3a0

0801c0a8 <ajustarFiltroMediaMovil>:
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b082      	sub	sp, #8
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
 801c0b0:	460b      	mov	r3, r1
 801c0b2:	70fb      	strb	r3, [r7, #3]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	78fa      	ldrb	r2, [r7, #3]
 801c0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	2200      	movs	r2, #0
 801c0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801c0cc:	6878      	ldr	r0, [r7, #4]
 801c0ce:	f000 f804 	bl	801c0da <resetearFiltroMediaMovil>
 801c0d2:	bf00      	nop
 801c0d4:	3708      	adds	r7, #8
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bd80      	pop	{r7, pc}

0801c0da <resetearFiltroMediaMovil>:
 801c0da:	b480      	push	{r7}
 801c0dc:	b085      	sub	sp, #20
 801c0de:	af00      	add	r7, sp, #0
 801c0e0:	6078      	str	r0, [r7, #4]
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	73fb      	strb	r3, [r7, #15]
 801c0e6:	e009      	b.n	801c0fc <resetearFiltroMediaMovil+0x22>
 801c0e8:	7bfb      	ldrb	r3, [r7, #15]
 801c0ea:	687a      	ldr	r2, [r7, #4]
 801c0ec:	009b      	lsls	r3, r3, #2
 801c0ee:	4413      	add	r3, r2
 801c0f0:	f04f 0200 	mov.w	r2, #0
 801c0f4:	601a      	str	r2, [r3, #0]
 801c0f6:	7bfb      	ldrb	r3, [r7, #15]
 801c0f8:	3301      	adds	r3, #1
 801c0fa:	73fb      	strb	r3, [r7, #15]
 801c0fc:	7bfb      	ldrb	r3, [r7, #15]
 801c0fe:	2b0f      	cmp	r3, #15
 801c100:	d9f2      	bls.n	801c0e8 <resetearFiltroMediaMovil+0xe>
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	2200      	movs	r2, #0
 801c106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	2200      	movs	r2, #0
 801c10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801c112:	bf00      	nop
 801c114:	3714      	adds	r7, #20
 801c116:	46bd      	mov	sp, r7
 801c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11c:	4770      	bx	lr

0801c11e <actualizarFiltroMediaMovil>:
 801c11e:	b480      	push	{r7}
 801c120:	b085      	sub	sp, #20
 801c122:	af00      	add	r7, sp, #0
 801c124:	6078      	str	r0, [r7, #4]
 801c126:	ed87 0a00 	vstr	s0, [r7]
 801c12a:	f04f 0300 	mov.w	r3, #0
 801c12e:	60fb      	str	r3, [r7, #12]
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c136:	687a      	ldr	r2, [r7, #4]
 801c138:	009b      	lsls	r3, r3, #2
 801c13a:	4413      	add	r3, r2
 801c13c:	683a      	ldr	r2, [r7, #0]
 801c13e:	601a      	str	r2, [r3, #0]
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c146:	3301      	adds	r3, #1
 801c148:	b2da      	uxtb	r2, r3
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c15c:	429a      	cmp	r2, r3
 801c15e:	d303      	bcc.n	801c168 <actualizarFiltroMediaMovil+0x4a>
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	2200      	movs	r2, #0
 801c164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c16e:	3301      	adds	r3, #1
 801c170:	b2da      	uxtb	r2, r3
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c184:	429a      	cmp	r2, r3
 801c186:	d305      	bcc.n	801c194 <actualizarFiltroMediaMovil+0x76>
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801c194:	2300      	movs	r3, #0
 801c196:	72fb      	strb	r3, [r7, #11]
 801c198:	e00e      	b.n	801c1b8 <actualizarFiltroMediaMovil+0x9a>
 801c19a:	7afb      	ldrb	r3, [r7, #11]
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	009b      	lsls	r3, r3, #2
 801c1a0:	4413      	add	r3, r2
 801c1a2:	edd3 7a00 	vldr	s15, [r3]
 801c1a6:	ed97 7a03 	vldr	s14, [r7, #12]
 801c1aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c1ae:	edc7 7a03 	vstr	s15, [r7, #12]
 801c1b2:	7afb      	ldrb	r3, [r7, #11]
 801c1b4:	3301      	adds	r3, #1
 801c1b6:	72fb      	strb	r3, [r7, #11]
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c1be:	7afa      	ldrb	r2, [r7, #11]
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d3ea      	bcc.n	801c19a <actualizarFiltroMediaMovil+0x7c>
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c1ca:	ee07 3a90 	vmov	s15, r3
 801c1ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c1d2:	ed97 7a03 	vldr	s14, [r7, #12]
 801c1d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c1da:	eef0 7a66 	vmov.f32	s15, s13
 801c1de:	eeb0 0a67 	vmov.f32	s0, s15
 801c1e2:	3714      	adds	r7, #20
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ea:	4770      	bx	lr

0801c1ec <ajustarFiltroPasaBajo2P>:
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b084      	sub	sp, #16
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	ed87 0a02 	vstr	s0, [r7, #8]
 801c1f8:	edc7 0a01 	vstr	s1, [r7, #4]
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	68ba      	ldr	r2, [r7, #8]
 801c200:	605a      	str	r2, [r3, #4]
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	687a      	ldr	r2, [r7, #4]
 801c206:	609a      	str	r2, [r3, #8]
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	edd3 7a01 	vldr	s15, [r3, #4]
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	ed93 7a02 	vldr	s14, [r3, #8]
 801c214:	eef0 0a47 	vmov.f32	s1, s14
 801c218:	eeb0 0a67 	vmov.f32	s0, s15
 801c21c:	68f8      	ldr	r0, [r7, #12]
 801c21e:	f000 f807 	bl	801c230 <calcularParametrosFiltroPasaBajo2P>
 801c222:	68f8      	ldr	r0, [r7, #12]
 801c224:	f000 f89a 	bl	801c35c <resetearFiltroPasaBajo2P>
 801c228:	bf00      	nop
 801c22a:	3710      	adds	r7, #16
 801c22c:	46bd      	mov	sp, r7
 801c22e:	bd80      	pop	{r7, pc}

0801c230 <calcularParametrosFiltroPasaBajo2P>:
 801c230:	b580      	push	{r7, lr}
 801c232:	b088      	sub	sp, #32
 801c234:	af00      	add	r7, sp, #0
 801c236:	60f8      	str	r0, [r7, #12]
 801c238:	ed87 0a02 	vstr	s0, [r7, #8]
 801c23c:	edc7 0a01 	vstr	s1, [r7, #4]
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	edd3 7a01 	vldr	s15, [r3, #4]
 801c246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c24e:	d407      	bmi.n	801c260 <calcularParametrosFiltroPasaBajo2P+0x30>
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	edd3 7a02 	vldr	s15, [r3, #8]
 801c256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c25e:	d803      	bhi.n	801c268 <calcularParametrosFiltroPasaBajo2P+0x38>
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	2200      	movs	r2, #0
 801c264:	701a      	strb	r2, [r3, #0]
 801c266:	e06c      	b.n	801c342 <calcularParametrosFiltroPasaBajo2P+0x112>
 801c268:	edd7 6a01 	vldr	s13, [r7, #4]
 801c26c:	ed97 7a02 	vldr	s14, [r7, #8]
 801c270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c274:	edc7 7a07 	vstr	s15, [r7, #28]
 801c278:	edd7 7a07 	vldr	s15, [r7, #28]
 801c27c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801c280:	ed9f 5b33 	vldr	d5, [pc, #204]	; 801c350 <calcularParametrosFiltroPasaBajo2P+0x120>
 801c284:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801c288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c28c:	eeb0 0a67 	vmov.f32	s0, s15
 801c290:	f01c fe8e 	bl	8038fb0 <tanf>
 801c294:	ed87 0a06 	vstr	s0, [r7, #24]
 801c298:	edd7 7a06 	vldr	s15, [r7, #24]
 801c29c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801c358 <calcularParametrosFiltroPasaBajo2P+0x128>
 801c2a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c2a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c2a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801c2ac:	edd7 7a06 	vldr	s15, [r7, #24]
 801c2b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801c2b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c2b8:	edc7 7a05 	vstr	s15, [r7, #20]
 801c2bc:	edd7 7a06 	vldr	s15, [r7, #24]
 801c2c0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c2c4:	ed97 7a05 	vldr	s14, [r7, #20]
 801c2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	edc3 7a05 	vstr	s15, [r3, #20]
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	edd3 7a05 	vldr	s15, [r3, #20]
 801c2d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	edc3 7a06 	vstr	s15, [r3, #24]
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	695a      	ldr	r2, [r3, #20]
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	61da      	str	r2, [r3, #28]
 801c2ea:	edd7 7a06 	vldr	s15, [r7, #24]
 801c2ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801c2f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c2f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c2fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c2fe:	ed97 7a05 	vldr	s14, [r7, #20]
 801c302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	edc3 7a03 	vstr	s15, [r3, #12]
 801c30c:	edd7 7a06 	vldr	s15, [r7, #24]
 801c310:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801c358 <calcularParametrosFiltroPasaBajo2P+0x128>
 801c314:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c31c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c320:	edd7 7a06 	vldr	s15, [r7, #24]
 801c324:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801c328:	ee77 6a27 	vadd.f32	s13, s14, s15
 801c32c:	ed97 7a05 	vldr	s14, [r7, #20]
 801c330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	edc3 7a04 	vstr	s15, [r3, #16]
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	2201      	movs	r2, #1
 801c33e:	701a      	strb	r2, [r3, #0]
 801c340:	bf00      	nop
 801c342:	bf00      	nop
 801c344:	3720      	adds	r7, #32
 801c346:	46bd      	mov	sp, r7
 801c348:	bd80      	pop	{r7, pc}
 801c34a:	bf00      	nop
 801c34c:	f3af 8000 	nop.w
 801c350:	54442d18 	.word	0x54442d18
 801c354:	400921fb 	.word	0x400921fb
 801c358:	3fb504f3 	.word	0x3fb504f3

0801c35c <resetearFiltroPasaBajo2P>:
 801c35c:	b480      	push	{r7}
 801c35e:	b083      	sub	sp, #12
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	f04f 0200 	mov.w	r2, #0
 801c36a:	621a      	str	r2, [r3, #32]
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	f04f 0200 	mov.w	r2, #0
 801c372:	625a      	str	r2, [r3, #36]	; 0x24
 801c374:	bf00      	nop
 801c376:	370c      	adds	r7, #12
 801c378:	46bd      	mov	sp, r7
 801c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37e:	4770      	bx	lr

0801c380 <actualizarFiltroPasaBajo2P>:
 801c380:	b480      	push	{r7}
 801c382:	b085      	sub	sp, #20
 801c384:	af00      	add	r7, sp, #0
 801c386:	6078      	str	r0, [r7, #4]
 801c388:	ed87 0a00 	vstr	s0, [r7]
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	781b      	ldrb	r3, [r3, #0]
 801c390:	f083 0301 	eor.w	r3, r3, #1
 801c394:	b2db      	uxtb	r3, r3
 801c396:	2b00      	cmp	r3, #0
 801c398:	d001      	beq.n	801c39e <actualizarFiltroPasaBajo2P+0x1e>
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	e03e      	b.n	801c41c <actualizarFiltroPasaBajo2P+0x9c>
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	ed93 7a08 	vldr	s14, [r3, #32]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	edd3 7a03 	vldr	s15, [r3, #12]
 801c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c3ae:	ed97 7a00 	vldr	s14, [r7]
 801c3b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	edd3 7a04 	vldr	s15, [r3, #16]
 801c3c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c3c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c3ca:	edc7 7a03 	vstr	s15, [r7, #12]
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	ed93 7a05 	vldr	s14, [r3, #20]
 801c3d4:	edd7 7a03 	vldr	s15, [r7, #12]
 801c3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	edd3 6a08 	vldr	s13, [r3, #32]
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	edd3 7a06 	vldr	s15, [r3, #24]
 801c3e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c3ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	edd3 7a07 	vldr	s15, [r3, #28]
 801c3fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c400:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	6a1a      	ldr	r2, [r3, #32]
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	625a      	str	r2, [r3, #36]	; 0x24
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	68fa      	ldr	r2, [r7, #12]
 801c416:	621a      	str	r2, [r3, #32]
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c41c:	ee07 3a90 	vmov	s15, r3
 801c420:	eeb0 0a67 	vmov.f32	s0, s15
 801c424:	3714      	adds	r7, #20
 801c426:	46bd      	mov	sp, r7
 801c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c42c:	4770      	bx	lr

0801c42e <tamanioGP>:


/***************************************************************************************
** AREA DE PROTOTIPOS DE FUNCION                                                      **
****************************************************************************************/
static inline uint16_t tamanioGP(const registroGP_t* reg)   {return reg->tam & GPR_TAMANIO_MASCARA;}
 801c42e:	b480      	push	{r7}
 801c430:	b083      	sub	sp, #12
 801c432:	af00      	add	r7, sp, #0
 801c434:	6078      	str	r0, [r7, #4]
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	885b      	ldrh	r3, [r3, #2]
 801c43a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c43e:	b29b      	uxth	r3, r3
 801c440:	4618      	mov	r0, r3
 801c442:	370c      	adds	r7, #12
 801c444:	46bd      	mov	sp, r7
 801c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44a:	4770      	bx	lr

0801c44c <numeroGP>:
static inline uint16_t numeroGP(const registroGP_t* reg)    {return reg->gpn & GPR_GPN_MASCARA;}
 801c44c:	b480      	push	{r7}
 801c44e:	b083      	sub	sp, #12
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	881b      	ldrh	r3, [r3, #0]
 801c458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	4618      	mov	r0, r3
 801c460:	370c      	adds	r7, #12
 801c462:	46bd      	mov	sp, r7
 801c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c468:	4770      	bx	lr

0801c46a <versionGP>:
static inline uint8_t versionGP(const registroGP_t* reg)    {return (uint8_t)(reg->gpn >> 12);}
 801c46a:	b480      	push	{r7}
 801c46c:	b083      	sub	sp, #12
 801c46e:	af00      	add	r7, sp, #0
 801c470:	6078      	str	r0, [r7, #4]
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	881b      	ldrh	r3, [r3, #0]
 801c476:	0b1b      	lsrs	r3, r3, #12
 801c478:	b29b      	uxth	r3, r3
 801c47a:	b2db      	uxtb	r3, r3
 801c47c:	4618      	mov	r0, r3
 801c47e:	370c      	adds	r7, #12
 801c480:	46bd      	mov	sp, r7
 801c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c486:	4770      	bx	lr

0801c488 <iniciarConfigFlash>:
**                  tamanio de los datos
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarConfigFlash(void)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	af00      	add	r7, sp, #0
    STATIC_ASSERT(offsetof(packingTest_t, word) == 1, test_word_packing_fallido);
    STATIC_ASSERT(sizeof(packingTest_t) == 5, fallo_packing_general);
    STATIC_ASSERT(sizeof(terminacionConfig_t) == 2, fallo_tamanio_terminador);
    STATIC_ASSERT(sizeof(configRegistro_t) == 6, fallo_tamanio_registro);

    if (estructuraFlashConfigValida())
 801c48c:	f000 f942 	bl	801c714 <estructuraFlashConfigValida>
 801c490:	4603      	mov	r3, r0
 801c492:	2b00      	cmp	r3, #0
 801c494:	d102      	bne.n	801c49c <iniciarConfigFlash+0x14>
        return;

    resetearConfigFlash();
 801c496:	f000 f83d 	bl	801c514 <resetearConfigFlash>
 801c49a:	e000      	b.n	801c49e <iniciarConfigFlash+0x16>
        return;
 801c49c:	bf00      	nop
}
 801c49e:	bd80      	pop	{r7, pc}

0801c4a0 <cargarConfigFlash>:
**  Descripcion:    Inicia todos los pregistros. Se escanea uno a uno y se cargan en el programa
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool cargarConfigFlash(void)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b084      	sub	sp, #16
 801c4a4:	af00      	add	r7, sp, #0
    bool estado = true;
 801c4a6:	2301      	movs	r3, #1
 801c4a8:	73fb      	strb	r3, [r7, #15]

    POR_CADA_GP(reg) {
 801c4aa:	4b18      	ldr	r3, [pc, #96]	; (801c50c <cargarConfigFlash+0x6c>)
 801c4ac:	60bb      	str	r3, [r7, #8]
 801c4ae:	e024      	b.n	801c4fa <cargarConfigFlash+0x5a>
        const configRegistro_t *rec = encontrarRegFlashConfig(reg, SISTEMA_CLASIFICACION_CR);
 801c4b0:	2100      	movs	r1, #0
 801c4b2:	68b8      	ldr	r0, [r7, #8]
 801c4b4:	f000 f9a6 	bl	801c804 <encontrarRegFlashConfig>
 801c4b8:	6078      	str	r0, [r7, #4]
        if (rec) {
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d014      	beq.n	801c4ea <cargarConfigFlash+0x4a>
            if (!cargarGP(reg, rec->gp, rec->tam - offsetof(configRegistro_t, gp), rec->version))
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	1d99      	adds	r1, r3, #6
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	881b      	ldrh	r3, [r3, #0]
 801c4c8:	b29b      	uxth	r3, r3
 801c4ca:	3b06      	subs	r3, #6
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	791b      	ldrb	r3, [r3, #4]
 801c4d2:	68b8      	ldr	r0, [r7, #8]
 801c4d4:	f000 f9f8 	bl	801c8c8 <cargarGP>
 801c4d8:	4603      	mov	r3, r0
 801c4da:	f083 0301 	eor.w	r3, r3, #1
 801c4de:	b2db      	uxtb	r3, r3
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d007      	beq.n	801c4f4 <cargarConfigFlash+0x54>
                estado = false;
 801c4e4:	2300      	movs	r3, #0
 801c4e6:	73fb      	strb	r3, [r7, #15]
 801c4e8:	e004      	b.n	801c4f4 <cargarConfigFlash+0x54>
        }
        else {
            resetearGP(reg);
 801c4ea:	68b8      	ldr	r0, [r7, #8]
 801c4ec:	f000 fa3e 	bl	801c96c <resetearGP>
            estado = false;
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	73fb      	strb	r3, [r7, #15]
    POR_CADA_GP(reg) {
 801c4f4:	68bb      	ldr	r3, [r7, #8]
 801c4f6:	3310      	adds	r3, #16
 801c4f8:	60bb      	str	r3, [r7, #8]
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	4a04      	ldr	r2, [pc, #16]	; (801c510 <cargarConfigFlash+0x70>)
 801c4fe:	4293      	cmp	r3, r2
 801c500:	d3d6      	bcc.n	801c4b0 <cargarConfigFlash+0x10>
        }
    }

    return estado;
 801c502:	7bfb      	ldrb	r3, [r7, #15]
}
 801c504:	4618      	mov	r0, r3
 801c506:	3710      	adds	r7, #16
 801c508:	46bd      	mov	sp, r7
 801c50a:	bd80      	pop	{r7, pc}
 801c50c:	0803e6c0 	.word	0x0803e6c0
 801c510:	0803e870 	.word	0x0803e870

0801c514 <resetearConfigFlash>:
**  Descripcion:    Resetea la zona de configuracion
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void resetearConfigFlash(void)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	af00      	add	r7, sp, #0
    resetearTodosGP();
 801c518:	f000 fa0e 	bl	801c938 <resetearTodosGP>
    escribirConfigEnFlash();
 801c51c:	f000 f818 	bl	801c550 <escribirConfigEnFlash>
}
 801c520:	bf00      	nop
 801c522:	bd80      	pop	{r7, pc}

0801c524 <versionValidaConfigFlash>:
**  Descripcion:    Comprueba la version de la zona de configuracion
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool versionValidaConfigFlash(void)
{
 801c524:	b480      	push	{r7}
 801c526:	b083      	sub	sp, #12
 801c528:	af00      	add	r7, sp, #0
    const uint8_t *p = &inicioRegionConfig;
 801c52a:	4b08      	ldr	r3, [pc, #32]	; (801c54c <versionValidaConfigFlash+0x28>)
 801c52c:	607b      	str	r3, [r7, #4]
    const cabeceraConfig_t *cabecera = (const cabeceraConfig_t *)p;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	603b      	str	r3, [r7, #0]

    if (cabecera->versionFlashConfig != VERSION_CONFIG_FLASH)
 801c532:	683b      	ldr	r3, [r7, #0]
 801c534:	781b      	ldrb	r3, [r3, #0]
 801c536:	2b01      	cmp	r3, #1
 801c538:	d001      	beq.n	801c53e <versionValidaConfigFlash+0x1a>
        return false;
 801c53a:	2300      	movs	r3, #0
 801c53c:	e000      	b.n	801c540 <versionValidaConfigFlash+0x1c>

    return true;
 801c53e:	2301      	movs	r3, #1
}
 801c540:	4618      	mov	r0, r3
 801c542:	370c      	adds	r7, #12
 801c544:	46bd      	mov	sp, r7
 801c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c54a:	4770      	bx	lr
 801c54c:	08008000 	.word	0x08008000

0801c550 <escribirConfigEnFlash>:
**  Descripcion:    Escribe la configuracion en la flash y comprueba la version y la estructura
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void escribirConfigEnFlash(void)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b082      	sub	sp, #8
 801c554:	af00      	add	r7, sp, #0
    bool estado = false;
 801c556:	2300      	movs	r3, #0
 801c558:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < 3 && !estado; i++) {
 801c55a:	2300      	movs	r3, #0
 801c55c:	71bb      	strb	r3, [r7, #6]
 801c55e:	e009      	b.n	801c574 <escribirConfigEnFlash+0x24>
        if (escribirAjustesEnFlash())
 801c560:	f000 f826 	bl	801c5b0 <escribirAjustesEnFlash>
 801c564:	4603      	mov	r3, r0
 801c566:	2b00      	cmp	r3, #0
 801c568:	d001      	beq.n	801c56e <escribirConfigEnFlash+0x1e>
            estado = true;
 801c56a:	2301      	movs	r3, #1
 801c56c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 3 && !estado; i++) {
 801c56e:	79bb      	ldrb	r3, [r7, #6]
 801c570:	3301      	adds	r3, #1
 801c572:	71bb      	strb	r3, [r7, #6]
 801c574:	79bb      	ldrb	r3, [r7, #6]
 801c576:	2b02      	cmp	r3, #2
 801c578:	d805      	bhi.n	801c586 <escribirConfigEnFlash+0x36>
 801c57a:	79fb      	ldrb	r3, [r7, #7]
 801c57c:	f083 0301 	eor.w	r3, r3, #1
 801c580:	b2db      	uxtb	r3, r3
 801c582:	2b00      	cmp	r3, #0
 801c584:	d1ec      	bne.n	801c560 <escribirConfigEnFlash+0x10>
    }

    if (estado && versionValidaConfigFlash() && estructuraFlashConfigValida())
 801c586:	79fb      	ldrb	r3, [r7, #7]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d009      	beq.n	801c5a0 <escribirConfigEnFlash+0x50>
 801c58c:	f7ff ffca 	bl	801c524 <versionValidaConfigFlash>
 801c590:	4603      	mov	r3, r0
 801c592:	2b00      	cmp	r3, #0
 801c594:	d004      	beq.n	801c5a0 <escribirConfigEnFlash+0x50>
 801c596:	f000 f8bd 	bl	801c714 <estructuraFlashConfigValida>
 801c59a:	4603      	mov	r3, r0
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d103      	bne.n	801c5a8 <escribirConfigEnFlash+0x58>
        return;

    // Fallo en la escritura de la Flash
    falloSistema(FALLO_ESCRITURA_FLASH);
 801c5a0:	2002      	movs	r0, #2
 801c5a2:	f7f7 fe0c 	bl	80141be <falloSistema>
 801c5a6:	e000      	b.n	801c5aa <escribirConfigEnFlash+0x5a>
        return;
 801c5a8:	bf00      	nop

}
 801c5aa:	3708      	adds	r7, #8
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd80      	pop	{r7, pc}

0801c5b0 <escribirAjustesEnFlash>:
**  Descripcion:    Escribe los ajustes en la flash
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool escribirAjustesEnFlash(void)
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b08e      	sub	sp, #56	; 0x38
 801c5b4:	af00      	add	r7, sp, #0
    grabadorFlash_t grabador;

    resetearGrabadorFlash(&grabador);
 801c5b6:	f107 0314 	add.w	r3, r7, #20
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7f9 fa5c 	bl	8015a78 <resetearGrabadorFlash>
    desbloquearGrabadorFlash(&grabador, (uintptr_t)&inicioRegionConfig, &finRegionConfig - &inicioRegionConfig);
 801c5c0:	494f      	ldr	r1, [pc, #316]	; (801c700 <escribirAjustesEnFlash+0x150>)
 801c5c2:	4a50      	ldr	r2, [pc, #320]	; (801c704 <escribirAjustesEnFlash+0x154>)
 801c5c4:	4b4e      	ldr	r3, [pc, #312]	; (801c700 <escribirAjustesEnFlash+0x150>)
 801c5c6:	1ad2      	subs	r2, r2, r3
 801c5c8:	f107 0314 	add.w	r3, r7, #20
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f7f9 fa60 	bl	8015a92 <desbloquearGrabadorFlash>

    cabeceraConfig_t cabecera = {
 801c5d2:	4b4d      	ldr	r3, [pc, #308]	; (801c708 <escribirAjustesEnFlash+0x158>)
 801c5d4:	881b      	ldrh	r3, [r3, #0]
 801c5d6:	823b      	strh	r3, [r7, #16]
        .versionFlashConfig = VERSION_CONFIG_FLASH,
        .magicoBE = 0xBE,
    };

    escribirGrabadorFlash(&grabador, (uint8_t *)&cabecera, sizeof(cabecera));
 801c5d8:	f107 0110 	add.w	r1, r7, #16
 801c5dc:	f107 0314 	add.w	r3, r7, #20
 801c5e0:	2202      	movs	r2, #2
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	f7f9 fa87 	bl	8015af6 <escribirGrabadorFlash>
    uint16_t crc = VALOR_INICIO_CRC_CONFIG_FLASH;
 801c5e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    crc = calcularCRC16(crc, (uint8_t *)&cabecera, sizeof(cabecera));
 801c5ee:	f107 0110 	add.w	r1, r7, #16
 801c5f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c5f4:	2202      	movs	r2, #2
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	f7f6 fef2 	bl	80133e0 <calcularCRC16>
 801c5fc:	4603      	mov	r3, r0
 801c5fe:	86fb      	strh	r3, [r7, #54]	; 0x36
    POR_CADA_GP(reg) {
 801c600:	4b42      	ldr	r3, [pc, #264]	; (801c70c <escribirAjustesEnFlash+0x15c>)
 801c602:	633b      	str	r3, [r7, #48]	; 0x30
 801c604:	e039      	b.n	801c67a <escribirAjustesEnFlash+0xca>
        const uint16_t tamReg = tamanioGP(reg);
 801c606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c608:	f7ff ff11 	bl	801c42e <tamanioGP>
 801c60c:	4603      	mov	r3, r0
 801c60e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        configRegistro_t registro = {
            .tam = sizeof(configRegistro_t) + tamReg,
 801c610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c612:	3306      	adds	r3, #6
 801c614:	b29b      	uxth	r3, r3
        configRegistro_t registro = {
 801c616:	80bb      	strh	r3, [r7, #4]
            .gpn = numeroGP(reg),
 801c618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c61a:	f7ff ff17 	bl	801c44c <numeroGP>
 801c61e:	4603      	mov	r3, r0
        configRegistro_t registro = {
 801c620:	80fb      	strh	r3, [r7, #6]
            .version = versionGP(reg),
 801c622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c624:	f7ff ff21 	bl	801c46a <versionGP>
 801c628:	4603      	mov	r3, r0
        configRegistro_t registro = {
 801c62a:	723b      	strb	r3, [r7, #8]
 801c62c:	2300      	movs	r3, #0
 801c62e:	727b      	strb	r3, [r7, #9]
            .flags = 0
        };

        registro.flags |= SISTEMA_CLASIFICACION_CR;
 801c630:	7a7b      	ldrb	r3, [r7, #9]
 801c632:	727b      	strb	r3, [r7, #9]
        escribirGrabadorFlash(&grabador, (uint8_t *)&registro, sizeof(registro));
 801c634:	1d39      	adds	r1, r7, #4
 801c636:	f107 0314 	add.w	r3, r7, #20
 801c63a:	2206      	movs	r2, #6
 801c63c:	4618      	mov	r0, r3
 801c63e:	f7f9 fa5a 	bl	8015af6 <escribirGrabadorFlash>
        crc = calcularCRC16(crc, (uint8_t *)&registro, sizeof(registro));
 801c642:	1d39      	adds	r1, r7, #4
 801c644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c646:	2206      	movs	r2, #6
 801c648:	4618      	mov	r0, r3
 801c64a:	f7f6 fec9 	bl	80133e0 <calcularCRC16>
 801c64e:	4603      	mov	r3, r0
 801c650:	86fb      	strh	r3, [r7, #54]	; 0x36
        escribirGrabadorFlash(&grabador, reg->dir, tamReg);
 801c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c654:	6859      	ldr	r1, [r3, #4]
 801c656:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801c658:	f107 0314 	add.w	r3, r7, #20
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7f9 fa4a 	bl	8015af6 <escribirGrabadorFlash>
        crc = calcularCRC16(crc, reg->dir, tamReg);
 801c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c664:	6859      	ldr	r1, [r3, #4]
 801c666:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801c668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c66a:	4618      	mov	r0, r3
 801c66c:	f7f6 feb8 	bl	80133e0 <calcularCRC16>
 801c670:	4603      	mov	r3, r0
 801c672:	86fb      	strh	r3, [r7, #54]	; 0x36
    POR_CADA_GP(reg) {
 801c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c676:	3310      	adds	r3, #16
 801c678:	633b      	str	r3, [r7, #48]	; 0x30
 801c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c67c:	4a24      	ldr	r2, [pc, #144]	; (801c710 <escribirAjustesEnFlash+0x160>)
 801c67e:	4293      	cmp	r3, r2
 801c680:	d3c1      	bcc.n	801c606 <escribirAjustesEnFlash+0x56>
    }

    terminacionConfig_t terminador = {
 801c682:	2300      	movs	r3, #0
 801c684:	81bb      	strh	r3, [r7, #12]
        .terminador = 0,
    };

    escribirGrabadorFlash(&grabador, (uint8_t *)&terminador, sizeof(terminador));
 801c686:	f107 010c 	add.w	r1, r7, #12
 801c68a:	f107 0314 	add.w	r3, r7, #20
 801c68e:	2202      	movs	r2, #2
 801c690:	4618      	mov	r0, r3
 801c692:	f7f9 fa30 	bl	8015af6 <escribirGrabadorFlash>
    crc = calcularCRC16(crc, (uint8_t *)&terminador, sizeof(terminador));
 801c696:	f107 010c 	add.w	r1, r7, #12
 801c69a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c69c:	2202      	movs	r2, #2
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7f6 fe9e 	bl	80133e0 <calcularCRC16>
 801c6a4:	4603      	mov	r3, r0
 801c6a6:	86fb      	strh	r3, [r7, #54]	; 0x36

    // Incluye el CRC invertido en big endian
    const uint16_t crcInvertidoBigEndian = ~(((crc & 0xFF) << 8) | (crc >> 8));
 801c6a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c6aa:	021b      	lsls	r3, r3, #8
 801c6ac:	b21a      	sxth	r2, r3
 801c6ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c6b0:	0a1b      	lsrs	r3, r3, #8
 801c6b2:	b29b      	uxth	r3, r3
 801c6b4:	b21b      	sxth	r3, r3
 801c6b6:	4313      	orrs	r3, r2
 801c6b8:	b21b      	sxth	r3, r3
 801c6ba:	b29b      	uxth	r3, r3
 801c6bc:	43db      	mvns	r3, r3
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	817b      	strh	r3, [r7, #10]
    escribirGrabadorFlash(&grabador, (uint8_t *)&crcInvertidoBigEndian, sizeof(crc));
 801c6c2:	f107 010a 	add.w	r1, r7, #10
 801c6c6:	f107 0314 	add.w	r3, r7, #20
 801c6ca:	2202      	movs	r2, #2
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	f7f9 fa12 	bl	8015af6 <escribirGrabadorFlash>

    flushGrabadorFlash(&grabador);
 801c6d2:	f107 0314 	add.w	r3, r7, #20
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f7f9 fa40 	bl	8015b5c <flushGrabadorFlash>

    const bool estado = bloquearGrabadorFlash(&grabador) == 0;
 801c6dc:	f107 0314 	add.w	r3, r7, #20
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7f9 f9f5 	bl	8015ad0 <bloquearGrabadorFlash>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	bf0c      	ite	eq
 801c6ec:	2301      	moveq	r3, #1
 801c6ee:	2300      	movne	r3, #0
 801c6f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    return estado;
 801c6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	3738      	adds	r7, #56	; 0x38
 801c6fc:	46bd      	mov	sp, r7
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	08008000 	.word	0x08008000
 801c704:	08010000 	.word	0x08010000
 801c708:	0803a828 	.word	0x0803a828
 801c70c:	0803e6c0 	.word	0x0803e6c0
 801c710:	0803e870 	.word	0x0803e870

0801c714 <estructuraFlashConfigValida>:
**  Descripcion:    Comprueba la estructura de la zona de configuracion
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool estructuraFlashConfigValida(void)
{
 801c714:	b580      	push	{r7, lr}
 801c716:	b086      	sub	sp, #24
 801c718:	af00      	add	r7, sp, #0
    const uint8_t *p = &inicioRegionConfig;
 801c71a:	4b37      	ldr	r3, [pc, #220]	; (801c7f8 <estructuraFlashConfigValida+0xe4>)
 801c71c:	617b      	str	r3, [r7, #20]
    const cabeceraConfig_t *cabecera = (const cabeceraConfig_t *)p;
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	60fb      	str	r3, [r7, #12]

    if (cabecera->magicoBE != 0xBE)
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	785b      	ldrb	r3, [r3, #1]
 801c726:	2bbe      	cmp	r3, #190	; 0xbe
 801c728:	d001      	beq.n	801c72e <estructuraFlashConfigValida+0x1a>
        return false;
 801c72a:	2300      	movs	r3, #0
 801c72c:	e060      	b.n	801c7f0 <estructuraFlashConfigValida+0xdc>

    uint16_t crc = VALOR_INICIO_CRC_CONFIG_FLASH;
 801c72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c732:	827b      	strh	r3, [r7, #18]
    crc = calcularCRC16(crc, cabecera, sizeof(*cabecera));
 801c734:	8a7b      	ldrh	r3, [r7, #18]
 801c736:	2202      	movs	r2, #2
 801c738:	68f9      	ldr	r1, [r7, #12]
 801c73a:	4618      	mov	r0, r3
 801c73c:	f7f6 fe50 	bl	80133e0 <calcularCRC16>
 801c740:	4603      	mov	r3, r0
 801c742:	827b      	strh	r3, [r7, #18]
    p += sizeof(*cabecera);
 801c744:	697b      	ldr	r3, [r7, #20]
 801c746:	3302      	adds	r3, #2
 801c748:	617b      	str	r3, [r7, #20]

    while (1) {
        const configRegistro_t *registro = (const configRegistro_t *)p;
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	60bb      	str	r3, [r7, #8]

        // Encontrado el fin
        if (registro->tam == 0)
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	881b      	ldrh	r3, [r3, #0]
 801c752:	b29b      	uxth	r3, r3
 801c754:	2b00      	cmp	r3, #0
 801c756:	d022      	beq.n	801c79e <estructuraFlashConfigValida+0x8a>
            break;

        // Muy alto o muy pequeno
        if (p + registro->tam >= &finRegionConfig || registro->tam < sizeof(*registro))
 801c758:	68bb      	ldr	r3, [r7, #8]
 801c75a:	881b      	ldrh	r3, [r3, #0]
 801c75c:	b29b      	uxth	r3, r3
 801c75e:	461a      	mov	r2, r3
 801c760:	697b      	ldr	r3, [r7, #20]
 801c762:	4413      	add	r3, r2
 801c764:	4a25      	ldr	r2, [pc, #148]	; (801c7fc <estructuraFlashConfigValida+0xe8>)
 801c766:	4293      	cmp	r3, r2
 801c768:	d204      	bcs.n	801c774 <estructuraFlashConfigValida+0x60>
 801c76a:	68bb      	ldr	r3, [r7, #8]
 801c76c:	881b      	ldrh	r3, [r3, #0]
 801c76e:	b29b      	uxth	r3, r3
 801c770:	2b05      	cmp	r3, #5
 801c772:	d801      	bhi.n	801c778 <estructuraFlashConfigValida+0x64>
            return false;
 801c774:	2300      	movs	r3, #0
 801c776:	e03b      	b.n	801c7f0 <estructuraFlashConfigValida+0xdc>

        crc = calcularCRC16(crc, p, registro->tam);
 801c778:	68bb      	ldr	r3, [r7, #8]
 801c77a:	881b      	ldrh	r3, [r3, #0]
 801c77c:	b29b      	uxth	r3, r3
 801c77e:	461a      	mov	r2, r3
 801c780:	8a7b      	ldrh	r3, [r7, #18]
 801c782:	6979      	ldr	r1, [r7, #20]
 801c784:	4618      	mov	r0, r3
 801c786:	f7f6 fe2b 	bl	80133e0 <calcularCRC16>
 801c78a:	4603      	mov	r3, r0
 801c78c:	827b      	strh	r3, [r7, #18]
        p += registro->tam;
 801c78e:	68bb      	ldr	r3, [r7, #8]
 801c790:	881b      	ldrh	r3, [r3, #0]
 801c792:	b29b      	uxth	r3, r3
 801c794:	461a      	mov	r2, r3
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	4413      	add	r3, r2
 801c79a:	617b      	str	r3, [r7, #20]
    while (1) {
 801c79c:	e7d5      	b.n	801c74a <estructuraFlashConfigValida+0x36>
            break;
 801c79e:	bf00      	nop
    }

    const terminacionConfig_t *terminacion = (const terminacionConfig_t *)p;
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	607b      	str	r3, [r7, #4]
    crc = calcularCRC16(crc, terminacion, sizeof(*terminacion));
 801c7a4:	8a7b      	ldrh	r3, [r7, #18]
 801c7a6:	2202      	movs	r2, #2
 801c7a8:	6879      	ldr	r1, [r7, #4]
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	f7f6 fe18 	bl	80133e0 <calcularCRC16>
 801c7b0:	4603      	mov	r3, r0
 801c7b2:	827b      	strh	r3, [r7, #18]
    p += sizeof(*terminacion);
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	3302      	adds	r3, #2
 801c7b8:	617b      	str	r3, [r7, #20]

    // Incluye el CRC guardado en el calculo
    const uint16_t *crcGuardado = (const uint16_t *)p;
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	603b      	str	r3, [r7, #0]
    crc = calcularCRC16(crc, crcGuardado, sizeof(*crcGuardado));
 801c7be:	8a7b      	ldrh	r3, [r7, #18]
 801c7c0:	2202      	movs	r2, #2
 801c7c2:	6839      	ldr	r1, [r7, #0]
 801c7c4:	4618      	mov	r0, r3
 801c7c6:	f7f6 fe0b 	bl	80133e0 <calcularCRC16>
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	827b      	strh	r3, [r7, #18]
    p += sizeof(crcGuardado);
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	3304      	adds	r3, #4
 801c7d2:	617b      	str	r3, [r7, #20]

    tamConfigFlash = p - &inicioRegionConfig;
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	4a08      	ldr	r2, [pc, #32]	; (801c7f8 <estructuraFlashConfigValida+0xe4>)
 801c7d8:	1a9b      	subs	r3, r3, r2
 801c7da:	b29a      	uxth	r2, r3
 801c7dc:	4b08      	ldr	r3, [pc, #32]	; (801c800 <estructuraFlashConfigValida+0xec>)
 801c7de:	801a      	strh	r2, [r3, #0]

    return crc == VALOR_CHEQUEO_CRC_CONFIG_FLASH;
 801c7e0:	8a7b      	ldrh	r3, [r7, #18]
 801c7e2:	f641 520f 	movw	r2, #7439	; 0x1d0f
 801c7e6:	4293      	cmp	r3, r2
 801c7e8:	bf0c      	ite	eq
 801c7ea:	2301      	moveq	r3, #1
 801c7ec:	2300      	movne	r3, #0
 801c7ee:	b2db      	uxtb	r3, r3
}
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	3718      	adds	r7, #24
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	bd80      	pop	{r7, pc}
 801c7f8:	08008000 	.word	0x08008000
 801c7fc:	08010000 	.word	0x08010000
 801c800:	2000a3ec 	.word	0x2000a3ec

0801c804 <encontrarRegFlashConfig>:
**  Descripcion:    Encuentra un registro en la zona de configuracion
**  Parametros:     Registro a encontrar, clasificacion
**  Retorno:        Registro de configuracion
****************************************************************************************/
const configRegistro_t *encontrarRegFlashConfig(const registroGP_t *reg, flagsConfigRegistro_e clasificacion)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b084      	sub	sp, #16
 801c808:	af00      	add	r7, sp, #0
 801c80a:	6078      	str	r0, [r7, #4]
 801c80c:	460b      	mov	r3, r1
 801c80e:	70fb      	strb	r3, [r7, #3]
    const uint8_t *p = &inicioRegionConfig;
 801c810:	4b1c      	ldr	r3, [pc, #112]	; (801c884 <encontrarRegFlashConfig+0x80>)
 801c812:	60fb      	str	r3, [r7, #12]

    p += sizeof(cabeceraConfig_t);
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	3302      	adds	r3, #2
 801c818:	60fb      	str	r3, [r7, #12]
    while (1) {
        const configRegistro_t *rec = (const configRegistro_t *)p;
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	60bb      	str	r3, [r7, #8]
        if (rec->tam == 0 || p + rec->tam >= &finRegionConfig || rec->tam < sizeof(*rec))
 801c81e:	68bb      	ldr	r3, [r7, #8]
 801c820:	881b      	ldrh	r3, [r3, #0]
 801c822:	b29b      	uxth	r3, r3
 801c824:	2b00      	cmp	r3, #0
 801c826:	d028      	beq.n	801c87a <encontrarRegFlashConfig+0x76>
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	881b      	ldrh	r3, [r3, #0]
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	461a      	mov	r2, r3
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	4413      	add	r3, r2
 801c834:	4a14      	ldr	r2, [pc, #80]	; (801c888 <encontrarRegFlashConfig+0x84>)
 801c836:	4293      	cmp	r3, r2
 801c838:	d21f      	bcs.n	801c87a <encontrarRegFlashConfig+0x76>
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	881b      	ldrh	r3, [r3, #0]
 801c83e:	b29b      	uxth	r3, r3
 801c840:	2b05      	cmp	r3, #5
 801c842:	d91a      	bls.n	801c87a <encontrarRegFlashConfig+0x76>
            break;

        if (numeroGP(reg) == rec->gpn && (rec->flags & MASCARA_CLASIFICACION_CR_CONFIG_FLASH) == clasificacion)
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	f7ff fe01 	bl	801c44c <numeroGP>
 801c84a:	4603      	mov	r3, r0
 801c84c:	461a      	mov	r2, r3
 801c84e:	68bb      	ldr	r3, [r7, #8]
 801c850:	885b      	ldrh	r3, [r3, #2]
 801c852:	b29b      	uxth	r3, r3
 801c854:	429a      	cmp	r2, r3
 801c856:	d108      	bne.n	801c86a <encontrarRegFlashConfig+0x66>
 801c858:	68bb      	ldr	r3, [r7, #8]
 801c85a:	795b      	ldrb	r3, [r3, #5]
 801c85c:	f003 0203 	and.w	r2, r3, #3
 801c860:	78fb      	ldrb	r3, [r7, #3]
 801c862:	429a      	cmp	r2, r3
 801c864:	d101      	bne.n	801c86a <encontrarRegFlashConfig+0x66>
            return rec;
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	e008      	b.n	801c87c <encontrarRegFlashConfig+0x78>

        p += rec->tam;
 801c86a:	68bb      	ldr	r3, [r7, #8]
 801c86c:	881b      	ldrh	r3, [r3, #0]
 801c86e:	b29b      	uxth	r3, r3
 801c870:	461a      	mov	r2, r3
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	4413      	add	r3, r2
 801c876:	60fb      	str	r3, [r7, #12]
    while (1) {
 801c878:	e7cf      	b.n	801c81a <encontrarRegFlashConfig+0x16>
    }
    // Registro no encontrado
    return NULL;
 801c87a:	2300      	movs	r3, #0
}
 801c87c:	4618      	mov	r0, r3
 801c87e:	3710      	adds	r7, #16
 801c880:	46bd      	mov	sp, r7
 801c882:	bd80      	pop	{r7, pc}
 801c884:	08008000 	.word	0x08008000
 801c888:	08010000 	.word	0x08010000

0801c88c <tamanioGP>:
static inline uint16_t tamanioGP(const registroGP_t* reg)   {return reg->tam & GPR_TAMANIO_MASCARA;}
 801c88c:	b480      	push	{r7}
 801c88e:	b083      	sub	sp, #12
 801c890:	af00      	add	r7, sp, #0
 801c892:	6078      	str	r0, [r7, #4]
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	885b      	ldrh	r3, [r3, #2]
 801c898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	4618      	mov	r0, r3
 801c8a0:	370c      	adds	r7, #12
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a8:	4770      	bx	lr

0801c8aa <versionGP>:
static inline uint8_t versionGP(const registroGP_t* reg)    {return (uint8_t)(reg->gpn >> 12);}
 801c8aa:	b480      	push	{r7}
 801c8ac:	b083      	sub	sp, #12
 801c8ae:	af00      	add	r7, sp, #0
 801c8b0:	6078      	str	r0, [r7, #4]
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	881b      	ldrh	r3, [r3, #0]
 801c8b6:	0b1b      	lsrs	r3, r3, #12
 801c8b8:	b29b      	uxth	r3, r3
 801c8ba:	b2db      	uxtb	r3, r3
 801c8bc:	4618      	mov	r0, r3
 801c8be:	370c      	adds	r7, #12
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c6:	4770      	bx	lr

0801c8c8 <cargarGP>:
**  Descripcion:    Carga un registro
**  Parametros:     Registro a cargar, direccion de origen, tamanio, version
**  Retorno:        True si lo carga
****************************************************************************************/
bool cargarGP(const registroGP_t* reg, const void *origen, uint16_t tam, uint8_t version)
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b086      	sub	sp, #24
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	60f8      	str	r0, [r7, #12]
 801c8d0:	60b9      	str	r1, [r7, #8]
 801c8d2:	4611      	mov	r1, r2
 801c8d4:	461a      	mov	r2, r3
 801c8d6:	460b      	mov	r3, r1
 801c8d8:	80fb      	strh	r3, [r7, #6]
 801c8da:	4613      	mov	r3, r2
 801c8dc:	717b      	strb	r3, [r7, #5]
    resetearInstanciaGP(reg, offsetGP(reg));
 801c8de:	68f8      	ldr	r0, [r7, #12]
 801c8e0:	f000 f888 	bl	801c9f4 <offsetGP>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	4619      	mov	r1, r3
 801c8e8:	68f8      	ldr	r0, [r7, #12]
 801c8ea:	f000 f84f 	bl	801c98c <resetearInstanciaGP>

    if (version == versionGP(reg)) {
 801c8ee:	68f8      	ldr	r0, [r7, #12]
 801c8f0:	f7ff ffdb 	bl	801c8aa <versionGP>
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	461a      	mov	r2, r3
 801c8f8:	797b      	ldrb	r3, [r7, #5]
 801c8fa:	4293      	cmp	r3, r2
 801c8fc:	d117      	bne.n	801c92e <cargarGP+0x66>
        const uint16_t num = MIN(tam, tamanioGP(reg));
 801c8fe:	88fb      	ldrh	r3, [r7, #6]
 801c900:	82fb      	strh	r3, [r7, #22]
 801c902:	68f8      	ldr	r0, [r7, #12]
 801c904:	f7ff ffc2 	bl	801c88c <tamanioGP>
 801c908:	4603      	mov	r3, r0
 801c90a:	82bb      	strh	r3, [r7, #20]
 801c90c:	8aba      	ldrh	r2, [r7, #20]
 801c90e:	8afb      	ldrh	r3, [r7, #22]
 801c910:	4293      	cmp	r3, r2
 801c912:	bf28      	it	cs
 801c914:	4613      	movcs	r3, r2
 801c916:	b29b      	uxth	r3, r3
 801c918:	827b      	strh	r3, [r7, #18]
        memcpy(offsetGP(reg), origen, num);
 801c91a:	68f8      	ldr	r0, [r7, #12]
 801c91c:	f000 f86a 	bl	801c9f4 <offsetGP>
 801c920:	8a7b      	ldrh	r3, [r7, #18]
 801c922:	461a      	mov	r2, r3
 801c924:	68b9      	ldr	r1, [r7, #8]
 801c926:	f018 fc93 	bl	8035250 <memcpy>
        return true;
 801c92a:	2301      	movs	r3, #1
 801c92c:	e000      	b.n	801c930 <cargarGP+0x68>
    }

    return false;
 801c92e:	2300      	movs	r3, #0
}
 801c930:	4618      	mov	r0, r3
 801c932:	3718      	adds	r7, #24
 801c934:	46bd      	mov	sp, r7
 801c936:	bd80      	pop	{r7, pc}

0801c938 <resetearTodosGP>:
**  Descripcion:    Resetea todos los GP
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void resetearTodosGP(void)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
    POR_CADA_GP(reg) {
 801c93e:	4b09      	ldr	r3, [pc, #36]	; (801c964 <resetearTodosGP+0x2c>)
 801c940:	607b      	str	r3, [r7, #4]
 801c942:	e005      	b.n	801c950 <resetearTodosGP+0x18>
        resetearGP(reg);
 801c944:	6878      	ldr	r0, [r7, #4]
 801c946:	f000 f811 	bl	801c96c <resetearGP>
    POR_CADA_GP(reg) {
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	3310      	adds	r3, #16
 801c94e:	607b      	str	r3, [r7, #4]
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	4a05      	ldr	r2, [pc, #20]	; (801c968 <resetearTodosGP+0x30>)
 801c954:	4293      	cmp	r3, r2
 801c956:	d3f5      	bcc.n	801c944 <resetearTodosGP+0xc>
    }
}
 801c958:	bf00      	nop
 801c95a:	bf00      	nop
 801c95c:	3708      	adds	r7, #8
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd80      	pop	{r7, pc}
 801c962:	bf00      	nop
 801c964:	0803e6c0 	.word	0x0803e6c0
 801c968:	0803e870 	.word	0x0803e870

0801c96c <resetearGP>:
**  Descripcion:    Resetea el GP
**  Parametros:     Registro a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void resetearGP(const registroGP_t* reg)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b082      	sub	sp, #8
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
    resetearInstanciaGP(reg, offsetGP(reg));
 801c974:	6878      	ldr	r0, [r7, #4]
 801c976:	f000 f83d 	bl	801c9f4 <offsetGP>
 801c97a:	4603      	mov	r3, r0
 801c97c:	4619      	mov	r1, r3
 801c97e:	6878      	ldr	r0, [r7, #4]
 801c980:	f000 f804 	bl	801c98c <resetearInstanciaGP>
}
 801c984:	bf00      	nop
 801c986:	3708      	adds	r7, #8
 801c988:	46bd      	mov	sp, r7
 801c98a:	bd80      	pop	{r7, pc}

0801c98c <resetearInstanciaGP>:
**  Descripcion:    Resetea la instancia del GP
**  Parametros:     Registro a resetear, direccion base
**  Retorno:        Ninguno
****************************************************************************************/
void resetearInstanciaGP(const registroGP_t *reg, uint8_t *base)
{
 801c98c:	b580      	push	{r7, lr}
 801c98e:	b084      	sub	sp, #16
 801c990:	af00      	add	r7, sp, #0
 801c992:	6078      	str	r0, [r7, #4]
 801c994:	6039      	str	r1, [r7, #0]
    const uint16_t tamReg = tamanioGP(reg);
 801c996:	6878      	ldr	r0, [r7, #4]
 801c998:	f7ff ff78 	bl	801c88c <tamanioGP>
 801c99c:	4603      	mov	r3, r0
 801c99e:	81fb      	strh	r3, [r7, #14]

    memset(base, 0, tamReg);
 801c9a0:	89fb      	ldrh	r3, [r7, #14]
 801c9a2:	461a      	mov	r2, r3
 801c9a4:	2100      	movs	r1, #0
 801c9a6:	6838      	ldr	r0, [r7, #0]
 801c9a8:	f018 fc7a 	bl	80352a0 <memset>
    if (reg->reset.ptr >= (void*)_sresetGP && reg->reset.ptr < (void*)_eresetGP)
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	4a0e      	ldr	r2, [pc, #56]	; (801c9ec <resetearInstanciaGP+0x60>)
 801c9b2:	4293      	cmp	r3, r2
 801c9b4:	d30c      	bcc.n	801c9d0 <resetearInstanciaGP+0x44>
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	68db      	ldr	r3, [r3, #12]
 801c9ba:	4a0d      	ldr	r2, [pc, #52]	; (801c9f0 <resetearInstanciaGP+0x64>)
 801c9bc:	4293      	cmp	r3, r2
 801c9be:	d207      	bcs.n	801c9d0 <resetearInstanciaGP+0x44>
        memcpy(base, reg->reset.ptr, tamReg);
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	68db      	ldr	r3, [r3, #12]
 801c9c4:	89fa      	ldrh	r2, [r7, #14]
 801c9c6:	4619      	mov	r1, r3
 801c9c8:	6838      	ldr	r0, [r7, #0]
 801c9ca:	f018 fc41 	bl	8035250 <memcpy>
    else if (reg->reset.fn)
        reg->reset.fn(base, tamReg);
}
 801c9ce:	e009      	b.n	801c9e4 <resetearInstanciaGP+0x58>
    else if (reg->reset.fn)
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	68db      	ldr	r3, [r3, #12]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d005      	beq.n	801c9e4 <resetearInstanciaGP+0x58>
        reg->reset.fn(base, tamReg);
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	68db      	ldr	r3, [r3, #12]
 801c9dc:	89fa      	ldrh	r2, [r7, #14]
 801c9de:	4611      	mov	r1, r2
 801c9e0:	6838      	ldr	r0, [r7, #0]
 801c9e2:	4798      	blx	r3
}
 801c9e4:	bf00      	nop
 801c9e6:	3710      	adds	r7, #16
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	bd80      	pop	{r7, pc}
 801c9ec:	0803e870 	.word	0x0803e870
 801c9f0:	0803e9e2 	.word	0x0803e9e2

0801c9f4 <offsetGP>:
**  Descripcion:    Obtiene el offset del registro
**  Parametros:     Registro
**  Retorno:        Offset
****************************************************************************************/
uint8_t *offsetGP(const registroGP_t* reg)
{
 801c9f4:	b480      	push	{r7}
 801c9f6:	b083      	sub	sp, #12
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
    return reg->dir;
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	685b      	ldr	r3, [r3, #4]
}
 801ca00:	4618      	mov	r0, r3
 801ca02:	370c      	adds	r7, #12
 801ca04:	46bd      	mov	sp, r7
 801ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca0a:	4770      	bx	lr

0801ca0c <fnResetGP_configADC>:
**  Descripcion:    Funcion de reset de la configuracion del ADC
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configADC(configADC_t *configADC)
{
 801ca0c:	b4b0      	push	{r4, r5, r7}
 801ca0e:	b085      	sub	sp, #20
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 801ca14:	2300      	movs	r3, #0
 801ca16:	73fb      	strb	r3, [r7, #15]
 801ca18:	e031      	b.n	801ca7e <fnResetGP_configADC+0x72>
        for (uint8_t j = 0; j < NUM_CANALES_ADC; j++)
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	73bb      	strb	r3, [r7, #14]
 801ca1e:	e016      	b.n	801ca4e <fnResetGP_configADC+0x42>
    	    configADC[i].pin[j] = configADCdefecto[i].pin[j];
 801ca20:	7bfa      	ldrb	r2, [r7, #15]
 801ca22:	7bbc      	ldrb	r4, [r7, #14]
 801ca24:	7bf9      	ldrb	r1, [r7, #15]
 801ca26:	460b      	mov	r3, r1
 801ca28:	009b      	lsls	r3, r3, #2
 801ca2a:	440b      	add	r3, r1
 801ca2c:	009b      	lsls	r3, r3, #2
 801ca2e:	4619      	mov	r1, r3
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	1858      	adds	r0, r3, r1
 801ca34:	7bb9      	ldrb	r1, [r7, #14]
 801ca36:	4d16      	ldr	r5, [pc, #88]	; (801ca90 <fnResetGP_configADC+0x84>)
 801ca38:	4613      	mov	r3, r2
 801ca3a:	009b      	lsls	r3, r3, #2
 801ca3c:	4413      	add	r3, r2
 801ca3e:	009b      	lsls	r3, r3, #2
 801ca40:	442b      	add	r3, r5
 801ca42:	4423      	add	r3, r4
 801ca44:	781b      	ldrb	r3, [r3, #0]
 801ca46:	5443      	strb	r3, [r0, r1]
        for (uint8_t j = 0; j < NUM_CANALES_ADC; j++)
 801ca48:	7bbb      	ldrb	r3, [r7, #14]
 801ca4a:	3301      	adds	r3, #1
 801ca4c:	73bb      	strb	r3, [r7, #14]
 801ca4e:	7bbb      	ldrb	r3, [r7, #14]
 801ca50:	2b0f      	cmp	r3, #15
 801ca52:	d9e5      	bls.n	801ca20 <fnResetGP_configADC+0x14>

    	configADC[i].dma = configADCdefecto[i].dma;
 801ca54:	7bfa      	ldrb	r2, [r7, #15]
 801ca56:	7bf9      	ldrb	r1, [r7, #15]
 801ca58:	460b      	mov	r3, r1
 801ca5a:	009b      	lsls	r3, r3, #2
 801ca5c:	440b      	add	r3, r1
 801ca5e:	009b      	lsls	r3, r3, #2
 801ca60:	4619      	mov	r1, r3
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	4419      	add	r1, r3
 801ca66:	480a      	ldr	r0, [pc, #40]	; (801ca90 <fnResetGP_configADC+0x84>)
 801ca68:	4613      	mov	r3, r2
 801ca6a:	009b      	lsls	r3, r3, #2
 801ca6c:	4413      	add	r3, r2
 801ca6e:	009b      	lsls	r3, r3, #2
 801ca70:	4403      	add	r3, r0
 801ca72:	3310      	adds	r3, #16
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	610b      	str	r3, [r1, #16]
    for (uint8_t i = 0; i < NUM_MAX_ADC; i++) {
 801ca78:	7bfb      	ldrb	r3, [r7, #15]
 801ca7a:	3301      	adds	r3, #1
 801ca7c:	73fb      	strb	r3, [r7, #15]
 801ca7e:	7bfb      	ldrb	r3, [r7, #15]
 801ca80:	2b02      	cmp	r3, #2
 801ca82:	d9ca      	bls.n	801ca1a <fnResetGP_configADC+0xe>
    }
}
 801ca84:	bf00      	nop
 801ca86:	bf00      	nop
 801ca88:	3714      	adds	r7, #20
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	bcb0      	pop	{r4, r5, r7}
 801ca8e:	4770      	bx	lr
 801ca90:	0803bdc0 	.word	0x0803bdc0

0801ca94 <fnResetGP_configBaro>:
**  Descripcion:    Funcion de reset de la configuracion del barometro
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configBaro(configBaro_t *configBaro)
{
 801ca94:	b480      	push	{r7}
 801ca96:	b085      	sub	sp, #20
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	73fb      	strb	r3, [r7, #15]
 801caa0:	e0c8      	b.n	801cc34 <fnResetGP_configBaro+0x1a0>
        configBaro[i].tipoBaro = configBaroDefecto[i].tipoBaro;
 801caa2:	7bfa      	ldrb	r2, [r7, #15]
 801caa4:	7bf9      	ldrb	r1, [r7, #15]
 801caa6:	460b      	mov	r3, r1
 801caa8:	005b      	lsls	r3, r3, #1
 801caaa:	440b      	add	r3, r1
 801caac:	009b      	lsls	r3, r3, #2
 801caae:	4619      	mov	r1, r3
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	4419      	add	r1, r3
 801cab4:	4865      	ldr	r0, [pc, #404]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cab6:	4613      	mov	r3, r2
 801cab8:	005b      	lsls	r3, r3, #1
 801caba:	4413      	add	r3, r2
 801cabc:	009b      	lsls	r3, r3, #2
 801cabe:	4403      	add	r3, r0
 801cac0:	f993 3000 	ldrsb.w	r3, [r3]
 801cac4:	700b      	strb	r3, [r1, #0]
        configBaro[i].auxiliar = configBaroDefecto[i].auxiliar;
 801cac6:	7bfa      	ldrb	r2, [r7, #15]
 801cac8:	7bf9      	ldrb	r1, [r7, #15]
 801caca:	460b      	mov	r3, r1
 801cacc:	005b      	lsls	r3, r3, #1
 801cace:	440b      	add	r3, r1
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	4619      	mov	r1, r3
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	4419      	add	r1, r3
 801cad8:	485c      	ldr	r0, [pc, #368]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cada:	4613      	mov	r3, r2
 801cadc:	005b      	lsls	r3, r3, #1
 801cade:	4413      	add	r3, r2
 801cae0:	009b      	lsls	r3, r3, #2
 801cae2:	4403      	add	r3, r0
 801cae4:	3301      	adds	r3, #1
 801cae6:	781b      	ldrb	r3, [r3, #0]
 801cae8:	704b      	strb	r3, [r1, #1]
        configBaro[i].rangoFiltro = configBaroDefecto[i].rangoFiltro;
 801caea:	7bfa      	ldrb	r2, [r7, #15]
 801caec:	7bf9      	ldrb	r1, [r7, #15]
 801caee:	460b      	mov	r3, r1
 801caf0:	005b      	lsls	r3, r3, #1
 801caf2:	440b      	add	r3, r1
 801caf4:	009b      	lsls	r3, r3, #2
 801caf6:	4619      	mov	r1, r3
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	4419      	add	r1, r3
 801cafc:	4853      	ldr	r0, [pc, #332]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cafe:	4613      	mov	r3, r2
 801cb00:	005b      	lsls	r3, r3, #1
 801cb02:	4413      	add	r3, r2
 801cb04:	009b      	lsls	r3, r3, #2
 801cb06:	4403      	add	r3, r0
 801cb08:	3307      	adds	r3, #7
 801cb0a:	781b      	ldrb	r3, [r3, #0]
 801cb0c:	71cb      	strb	r3, [r1, #7]
        configBaro[i].dispBus = configBaroDefecto[i].dispBus;
 801cb0e:	7bfa      	ldrb	r2, [r7, #15]
 801cb10:	7bf9      	ldrb	r1, [r7, #15]
 801cb12:	460b      	mov	r3, r1
 801cb14:	005b      	lsls	r3, r3, #1
 801cb16:	440b      	add	r3, r1
 801cb18:	009b      	lsls	r3, r3, #2
 801cb1a:	4619      	mov	r1, r3
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	4419      	add	r1, r3
 801cb20:	484a      	ldr	r0, [pc, #296]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cb22:	4613      	mov	r3, r2
 801cb24:	005b      	lsls	r3, r3, #1
 801cb26:	4413      	add	r3, r2
 801cb28:	009b      	lsls	r3, r3, #2
 801cb2a:	4403      	add	r3, r0
 801cb2c:	3303      	adds	r3, #3
 801cb2e:	781b      	ldrb	r3, [r3, #0]
 801cb30:	70cb      	strb	r3, [r1, #3]
        configBaro[i].bus = configBaroDefecto[i].bus;
 801cb32:	7bfa      	ldrb	r2, [r7, #15]
 801cb34:	7bf9      	ldrb	r1, [r7, #15]
 801cb36:	460b      	mov	r3, r1
 801cb38:	005b      	lsls	r3, r3, #1
 801cb3a:	440b      	add	r3, r1
 801cb3c:	009b      	lsls	r3, r3, #2
 801cb3e:	4619      	mov	r1, r3
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	4419      	add	r1, r3
 801cb44:	4841      	ldr	r0, [pc, #260]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cb46:	4613      	mov	r3, r2
 801cb48:	005b      	lsls	r3, r3, #1
 801cb4a:	4413      	add	r3, r2
 801cb4c:	009b      	lsls	r3, r3, #2
 801cb4e:	4403      	add	r3, r0
 801cb50:	3302      	adds	r3, #2
 801cb52:	f993 3000 	ldrsb.w	r3, [r3]
 801cb56:	708b      	strb	r3, [r1, #2]
        configBaro[i].drdy = configBaroDefecto[i].drdy;
 801cb58:	7bfa      	ldrb	r2, [r7, #15]
 801cb5a:	7bf9      	ldrb	r1, [r7, #15]
 801cb5c:	460b      	mov	r3, r1
 801cb5e:	005b      	lsls	r3, r3, #1
 801cb60:	440b      	add	r3, r1
 801cb62:	009b      	lsls	r3, r3, #2
 801cb64:	4619      	mov	r1, r3
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	4419      	add	r1, r3
 801cb6a:	4838      	ldr	r0, [pc, #224]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cb6c:	4613      	mov	r3, r2
 801cb6e:	005b      	lsls	r3, r3, #1
 801cb70:	4413      	add	r3, r2
 801cb72:	009b      	lsls	r3, r3, #2
 801cb74:	4403      	add	r3, r0
 801cb76:	3306      	adds	r3, #6
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	718b      	strb	r3, [r1, #6]
        configBaro[i].frecActualizar = configBaroDefecto[i].frecActualizar;
 801cb7c:	7bfa      	ldrb	r2, [r7, #15]
 801cb7e:	7bf9      	ldrb	r1, [r7, #15]
 801cb80:	460b      	mov	r3, r1
 801cb82:	005b      	lsls	r3, r3, #1
 801cb84:	440b      	add	r3, r1
 801cb86:	009b      	lsls	r3, r3, #2
 801cb88:	4619      	mov	r1, r3
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	4419      	add	r1, r3
 801cb8e:	482f      	ldr	r0, [pc, #188]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cb90:	4613      	mov	r3, r2
 801cb92:	005b      	lsls	r3, r3, #1
 801cb94:	4413      	add	r3, r2
 801cb96:	009b      	lsls	r3, r3, #2
 801cb98:	4403      	add	r3, r0
 801cb9a:	3308      	adds	r3, #8
 801cb9c:	881b      	ldrh	r3, [r3, #0]
 801cb9e:	810b      	strh	r3, [r1, #8]
        configBaro[i].frecLeer = configBaroDefecto[i].frecLeer;
 801cba0:	7bfa      	ldrb	r2, [r7, #15]
 801cba2:	7bf9      	ldrb	r1, [r7, #15]
 801cba4:	460b      	mov	r3, r1
 801cba6:	005b      	lsls	r3, r3, #1
 801cba8:	440b      	add	r3, r1
 801cbaa:	009b      	lsls	r3, r3, #2
 801cbac:	4619      	mov	r1, r3
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	4419      	add	r1, r3
 801cbb2:	4826      	ldr	r0, [pc, #152]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cbb4:	4613      	mov	r3, r2
 801cbb6:	005b      	lsls	r3, r3, #1
 801cbb8:	4413      	add	r3, r2
 801cbba:	009b      	lsls	r3, r3, #2
 801cbbc:	4403      	add	r3, r0
 801cbbe:	330a      	adds	r3, #10
 801cbc0:	881b      	ldrh	r3, [r3, #0]
 801cbc2:	814b      	strh	r3, [r1, #10]

        switch (configBaro[i].bus) {
 801cbc4:	7bfa      	ldrb	r2, [r7, #15]
 801cbc6:	4613      	mov	r3, r2
 801cbc8:	005b      	lsls	r3, r3, #1
 801cbca:	4413      	add	r3, r2
 801cbcc:	009b      	lsls	r3, r3, #2
 801cbce:	461a      	mov	r2, r3
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	4413      	add	r3, r2
 801cbd4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d002      	beq.n	801cbe2 <fnResetGP_configBaro+0x14e>
 801cbdc:	2b01      	cmp	r3, #1
 801cbde:	d013      	beq.n	801cc08 <fnResetGP_configBaro+0x174>
            case BUS_SPI:
                configBaro[i].csSPI = configBaroDefecto[i].csSPI;
        	    break;

            default:
                break;
 801cbe0:	e025      	b.n	801cc2e <fnResetGP_configBaro+0x19a>
                configBaro[i].dirI2C = configBaroDefecto[i].dirI2C;
 801cbe2:	7bfa      	ldrb	r2, [r7, #15]
 801cbe4:	7bf9      	ldrb	r1, [r7, #15]
 801cbe6:	460b      	mov	r3, r1
 801cbe8:	005b      	lsls	r3, r3, #1
 801cbea:	440b      	add	r3, r1
 801cbec:	009b      	lsls	r3, r3, #2
 801cbee:	4619      	mov	r1, r3
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	4419      	add	r1, r3
 801cbf4:	4815      	ldr	r0, [pc, #84]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cbf6:	4613      	mov	r3, r2
 801cbf8:	005b      	lsls	r3, r3, #1
 801cbfa:	4413      	add	r3, r2
 801cbfc:	009b      	lsls	r3, r3, #2
 801cbfe:	4403      	add	r3, r0
 801cc00:	3305      	adds	r3, #5
 801cc02:	781b      	ldrb	r3, [r3, #0]
 801cc04:	714b      	strb	r3, [r1, #5]
        	    break;
 801cc06:	e012      	b.n	801cc2e <fnResetGP_configBaro+0x19a>
                configBaro[i].csSPI = configBaroDefecto[i].csSPI;
 801cc08:	7bfa      	ldrb	r2, [r7, #15]
 801cc0a:	7bf9      	ldrb	r1, [r7, #15]
 801cc0c:	460b      	mov	r3, r1
 801cc0e:	005b      	lsls	r3, r3, #1
 801cc10:	440b      	add	r3, r1
 801cc12:	009b      	lsls	r3, r3, #2
 801cc14:	4619      	mov	r1, r3
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	4419      	add	r1, r3
 801cc1a:	480c      	ldr	r0, [pc, #48]	; (801cc4c <fnResetGP_configBaro+0x1b8>)
 801cc1c:	4613      	mov	r3, r2
 801cc1e:	005b      	lsls	r3, r3, #1
 801cc20:	4413      	add	r3, r2
 801cc22:	009b      	lsls	r3, r3, #2
 801cc24:	4403      	add	r3, r0
 801cc26:	3304      	adds	r3, #4
 801cc28:	781b      	ldrb	r3, [r3, #0]
 801cc2a:	710b      	strb	r3, [r1, #4]
        	    break;
 801cc2c:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 801cc2e:	7bfb      	ldrb	r3, [r7, #15]
 801cc30:	3301      	adds	r3, #1
 801cc32:	73fb      	strb	r3, [r7, #15]
 801cc34:	7bfb      	ldrb	r3, [r7, #15]
 801cc36:	2b04      	cmp	r3, #4
 801cc38:	f67f af33 	bls.w	801caa2 <fnResetGP_configBaro+0xe>
        }
    }
}
 801cc3c:	bf00      	nop
 801cc3e:	bf00      	nop
 801cc40:	3714      	adds	r7, #20
 801cc42:	46bd      	mov	sp, r7
 801cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc48:	4770      	bx	lr
 801cc4a:	bf00      	nop
 801cc4c:	0803bdfc 	.word	0x0803bdfc

0801cc50 <fnResetGP_configCalIMU>:
**  Descripcion:    Funcion de reset de la configuracion del calibrador de la IMU
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configCalIMU(configCalIMU_t *configCalIMU)
{
 801cc50:	b480      	push	{r7}
 801cc52:	b083      	sub	sp, #12
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
        configCalIMU[i].calIMU.calAcelerometro.ganancia[2][1] = -0.0005;
        configCalIMU[i].calIMU.calAcelerometro.ganancia[2][2] =  0.9894;
	}
	*/

    configCalIMU[0].calIMU.calGiroscopio.calibrado = false;
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	701a      	strb	r2, [r3, #0]
    configCalIMU[0].calIMU.calGiroscopio.offset[0] =  0.22;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	4a5f      	ldr	r2, [pc, #380]	; (801cde0 <fnResetGP_configCalIMU+0x190>)
 801cc62:	605a      	str	r2, [r3, #4]
    configCalIMU[0].calIMU.calGiroscopio.offset[1] = -0.47;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	4a5f      	ldr	r2, [pc, #380]	; (801cde4 <fnResetGP_configCalIMU+0x194>)
 801cc68:	609a      	str	r2, [r3, #8]
    configCalIMU[0].calIMU.calGiroscopio.offset[2] =  1.35;
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	4a5e      	ldr	r2, [pc, #376]	; (801cde8 <fnResetGP_configCalIMU+0x198>)
 801cc6e:	60da      	str	r2, [r3, #12]

    configCalIMU[0].calIMU.calAcelerometro.calibrado = false;
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	2200      	movs	r2, #0
 801cc74:	741a      	strb	r2, [r3, #16]
    configCalIMU[0].calIMU.calAcelerometro.offset[0] =  0.0058;
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	4a5c      	ldr	r2, [pc, #368]	; (801cdec <fnResetGP_configCalIMU+0x19c>)
 801cc7a:	615a      	str	r2, [r3, #20]
    configCalIMU[0].calIMU.calAcelerometro.offset[1] = -0.0038;
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	4a5c      	ldr	r2, [pc, #368]	; (801cdf0 <fnResetGP_configCalIMU+0x1a0>)
 801cc80:	619a      	str	r2, [r3, #24]
    configCalIMU[0].calIMU.calAcelerometro.offset[2] =  0.0077;
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	4a5b      	ldr	r2, [pc, #364]	; (801cdf4 <fnResetGP_configCalIMU+0x1a4>)
 801cc86:	61da      	str	r2, [r3, #28]

    configCalIMU[0].calIMU.calAcelerometro.ganancia[0][0] =  1.0;
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801cc8e:	621a      	str	r2, [r3, #32]
    configCalIMU[0].calIMU.calAcelerometro.ganancia[0][1] =  0.023;
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	4a59      	ldr	r2, [pc, #356]	; (801cdf8 <fnResetGP_configCalIMU+0x1a8>)
 801cc94:	625a      	str	r2, [r3, #36]	; 0x24
    configCalIMU[0].calIMU.calAcelerometro.ganancia[0][2] = -0.012;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	4a58      	ldr	r2, [pc, #352]	; (801cdfc <fnResetGP_configCalIMU+0x1ac>)
 801cc9a:	629a      	str	r2, [r3, #40]	; 0x28

    configCalIMU[0].calIMU.calAcelerometro.ganancia[1][0] = -0.023;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	4a58      	ldr	r2, [pc, #352]	; (801ce00 <fnResetGP_configCalIMU+0x1b0>)
 801cca0:	62da      	str	r2, [r3, #44]	; 0x2c
    configCalIMU[0].calIMU.calAcelerometro.ganancia[1][1] =  0.998;
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	4a57      	ldr	r2, [pc, #348]	; (801ce04 <fnResetGP_configCalIMU+0x1b4>)
 801cca6:	631a      	str	r2, [r3, #48]	; 0x30
    configCalIMU[0].calIMU.calAcelerometro.ganancia[1][2] =  0.009;
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	4a57      	ldr	r2, [pc, #348]	; (801ce08 <fnResetGP_configCalIMU+0x1b8>)
 801ccac:	635a      	str	r2, [r3, #52]	; 0x34

    configCalIMU[0].calIMU.calAcelerometro.ganancia[2][0] = -0.008;
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	4a56      	ldr	r2, [pc, #344]	; (801ce0c <fnResetGP_configCalIMU+0x1bc>)
 801ccb2:	639a      	str	r2, [r3, #56]	; 0x38
    configCalIMU[0].calIMU.calAcelerometro.ganancia[2][1] =  0.003;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	4a56      	ldr	r2, [pc, #344]	; (801ce10 <fnResetGP_configCalIMU+0x1c0>)
 801ccb8:	63da      	str	r2, [r3, #60]	; 0x3c
    configCalIMU[0].calIMU.calAcelerometro.ganancia[2][2] =  0.984;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	4a55      	ldr	r2, [pc, #340]	; (801ce14 <fnResetGP_configCalIMU+0x1c4>)
 801ccbe:	641a      	str	r2, [r3, #64]	; 0x40


    configCalIMU[1].calIMU.calGiroscopio.calibrado = false;
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	3344      	adds	r3, #68	; 0x44
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	701a      	strb	r2, [r3, #0]
    configCalIMU[1].calIMU.calGiroscopio.offset[0] =  5.34;
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	3344      	adds	r3, #68	; 0x44
 801cccc:	4a52      	ldr	r2, [pc, #328]	; (801ce18 <fnResetGP_configCalIMU+0x1c8>)
 801ccce:	605a      	str	r2, [r3, #4]
    configCalIMU[1].calIMU.calGiroscopio.offset[1] =  6.15;
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	3344      	adds	r3, #68	; 0x44
 801ccd4:	4a51      	ldr	r2, [pc, #324]	; (801ce1c <fnResetGP_configCalIMU+0x1cc>)
 801ccd6:	609a      	str	r2, [r3, #8]
    configCalIMU[1].calIMU.calGiroscopio.offset[2] =  0.89;
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	3344      	adds	r3, #68	; 0x44
 801ccdc:	4a50      	ldr	r2, [pc, #320]	; (801ce20 <fnResetGP_configCalIMU+0x1d0>)
 801ccde:	60da      	str	r2, [r3, #12]

    configCalIMU[1].calIMU.calAcelerometro.calibrado = false;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	3344      	adds	r3, #68	; 0x44
 801cce4:	2200      	movs	r2, #0
 801cce6:	741a      	strb	r2, [r3, #16]
    configCalIMU[1].calIMU.calAcelerometro.offset[0] =  0.010;
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	3344      	adds	r3, #68	; 0x44
 801ccec:	4a4d      	ldr	r2, [pc, #308]	; (801ce24 <fnResetGP_configCalIMU+0x1d4>)
 801ccee:	615a      	str	r2, [r3, #20]
    configCalIMU[1].calIMU.calAcelerometro.offset[1] = -0.010;
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	3344      	adds	r3, #68	; 0x44
 801ccf4:	4a4c      	ldr	r2, [pc, #304]	; (801ce28 <fnResetGP_configCalIMU+0x1d8>)
 801ccf6:	619a      	str	r2, [r3, #24]
    configCalIMU[1].calIMU.calAcelerometro.offset[2] =  0.002;
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	3344      	adds	r3, #68	; 0x44
 801ccfc:	4a4b      	ldr	r2, [pc, #300]	; (801ce2c <fnResetGP_configCalIMU+0x1dc>)
 801ccfe:	61da      	str	r2, [r3, #28]

    configCalIMU[1].calIMU.calAcelerometro.ganancia[0][0] =  1.00;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	3344      	adds	r3, #68	; 0x44
 801cd04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801cd08:	621a      	str	r2, [r3, #32]
    configCalIMU[1].calIMU.calAcelerometro.ganancia[0][1] =  0.032;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	3344      	adds	r3, #68	; 0x44
 801cd0e:	4a48      	ldr	r2, [pc, #288]	; (801ce30 <fnResetGP_configCalIMU+0x1e0>)
 801cd10:	625a      	str	r2, [r3, #36]	; 0x24
    configCalIMU[1].calIMU.calAcelerometro.ganancia[0][2] = -0.066;
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	3344      	adds	r3, #68	; 0x44
 801cd16:	4a47      	ldr	r2, [pc, #284]	; (801ce34 <fnResetGP_configCalIMU+0x1e4>)
 801cd18:	629a      	str	r2, [r3, #40]	; 0x28

    configCalIMU[1].calIMU.calAcelerometro.ganancia[1][0] = -0.030;
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	3344      	adds	r3, #68	; 0x44
 801cd1e:	4a46      	ldr	r2, [pc, #280]	; (801ce38 <fnResetGP_configCalIMU+0x1e8>)
 801cd20:	62da      	str	r2, [r3, #44]	; 0x2c
    configCalIMU[1].calIMU.calAcelerometro.ganancia[1][1] =  0.999;
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	3344      	adds	r3, #68	; 0x44
 801cd26:	4a45      	ldr	r2, [pc, #276]	; (801ce3c <fnResetGP_configCalIMU+0x1ec>)
 801cd28:	631a      	str	r2, [r3, #48]	; 0x30
    configCalIMU[1].calIMU.calAcelerometro.ganancia[1][2] =  0.023;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	3344      	adds	r3, #68	; 0x44
 801cd2e:	4a32      	ldr	r2, [pc, #200]	; (801cdf8 <fnResetGP_configCalIMU+0x1a8>)
 801cd30:	635a      	str	r2, [r3, #52]	; 0x34

    configCalIMU[1].calIMU.calAcelerometro.ganancia[2][0] =  0.058;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	3344      	adds	r3, #68	; 0x44
 801cd36:	4a42      	ldr	r2, [pc, #264]	; (801ce40 <fnResetGP_configCalIMU+0x1f0>)
 801cd38:	639a      	str	r2, [r3, #56]	; 0x38
    configCalIMU[1].calIMU.calAcelerometro.ganancia[2][1] =  0.022;
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	3344      	adds	r3, #68	; 0x44
 801cd3e:	4a41      	ldr	r2, [pc, #260]	; (801ce44 <fnResetGP_configCalIMU+0x1f4>)
 801cd40:	63da      	str	r2, [r3, #60]	; 0x3c
    configCalIMU[1].calIMU.calAcelerometro.ganancia[2][2] =  0.995;
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	3344      	adds	r3, #68	; 0x44
 801cd46:	4a40      	ldr	r2, [pc, #256]	; (801ce48 <fnResetGP_configCalIMU+0x1f8>)
 801cd48:	641a      	str	r2, [r3, #64]	; 0x40


    configCalIMU[2].calIMU.calGiroscopio.calibrado = false;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	3388      	adds	r3, #136	; 0x88
 801cd4e:	2200      	movs	r2, #0
 801cd50:	701a      	strb	r2, [r3, #0]
    configCalIMU[2].calIMU.calGiroscopio.offset[0] =  3.81;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	3388      	adds	r3, #136	; 0x88
 801cd56:	4a3d      	ldr	r2, [pc, #244]	; (801ce4c <fnResetGP_configCalIMU+0x1fc>)
 801cd58:	605a      	str	r2, [r3, #4]
    configCalIMU[2].calIMU.calGiroscopio.offset[1] = -6.76;
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	3388      	adds	r3, #136	; 0x88
 801cd5e:	4a3c      	ldr	r2, [pc, #240]	; (801ce50 <fnResetGP_configCalIMU+0x200>)
 801cd60:	609a      	str	r2, [r3, #8]
    configCalIMU[2].calIMU.calGiroscopio.offset[2] = -0.86;
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	3388      	adds	r3, #136	; 0x88
 801cd66:	4a3b      	ldr	r2, [pc, #236]	; (801ce54 <fnResetGP_configCalIMU+0x204>)
 801cd68:	60da      	str	r2, [r3, #12]

    configCalIMU[2].calIMU.calAcelerometro.calibrado = false;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	3388      	adds	r3, #136	; 0x88
 801cd6e:	2200      	movs	r2, #0
 801cd70:	741a      	strb	r2, [r3, #16]
    configCalIMU[2].calIMU.calAcelerometro.offset[0] = -0.004;
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	3388      	adds	r3, #136	; 0x88
 801cd76:	4a38      	ldr	r2, [pc, #224]	; (801ce58 <fnResetGP_configCalIMU+0x208>)
 801cd78:	615a      	str	r2, [r3, #20]
    configCalIMU[2].calIMU.calAcelerometro.offset[1] = -0.018;
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	3388      	adds	r3, #136	; 0x88
 801cd7e:	4a37      	ldr	r2, [pc, #220]	; (801ce5c <fnResetGP_configCalIMU+0x20c>)
 801cd80:	619a      	str	r2, [r3, #24]
    configCalIMU[2].calIMU.calAcelerometro.offset[2] =  0.014;
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	3388      	adds	r3, #136	; 0x88
 801cd86:	4a36      	ldr	r2, [pc, #216]	; (801ce60 <fnResetGP_configCalIMU+0x210>)
 801cd88:	61da      	str	r2, [r3, #28]

    configCalIMU[2].calIMU.calAcelerometro.ganancia[0][0] =  1.029;
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	3388      	adds	r3, #136	; 0x88
 801cd8e:	4a35      	ldr	r2, [pc, #212]	; (801ce64 <fnResetGP_configCalIMU+0x214>)
 801cd90:	621a      	str	r2, [r3, #32]
    configCalIMU[2].calIMU.calAcelerometro.ganancia[0][1] =  0.026;
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	3388      	adds	r3, #136	; 0x88
 801cd96:	4a34      	ldr	r2, [pc, #208]	; (801ce68 <fnResetGP_configCalIMU+0x218>)
 801cd98:	625a      	str	r2, [r3, #36]	; 0x24
    configCalIMU[2].calIMU.calAcelerometro.ganancia[0][2] = -0.076;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	3388      	adds	r3, #136	; 0x88
 801cd9e:	4a33      	ldr	r2, [pc, #204]	; (801ce6c <fnResetGP_configCalIMU+0x21c>)
 801cda0:	629a      	str	r2, [r3, #40]	; 0x28

    configCalIMU[2].calIMU.calAcelerometro.ganancia[1][0] = -0.026;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	3388      	adds	r3, #136	; 0x88
 801cda6:	4a32      	ldr	r2, [pc, #200]	; (801ce70 <fnResetGP_configCalIMU+0x220>)
 801cda8:	62da      	str	r2, [r3, #44]	; 0x2c
    configCalIMU[2].calIMU.calAcelerometro.ganancia[1][1] =  0.999;
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	3388      	adds	r3, #136	; 0x88
 801cdae:	4a23      	ldr	r2, [pc, #140]	; (801ce3c <fnResetGP_configCalIMU+0x1ec>)
 801cdb0:	631a      	str	r2, [r3, #48]	; 0x30
    configCalIMU[2].calIMU.calAcelerometro.ganancia[1][2] =  0.012;
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	3388      	adds	r3, #136	; 0x88
 801cdb6:	4a2f      	ldr	r2, [pc, #188]	; (801ce74 <fnResetGP_configCalIMU+0x224>)
 801cdb8:	635a      	str	r2, [r3, #52]	; 0x34

    configCalIMU[2].calIMU.calAcelerometro.ganancia[2][0] =  0.034;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	3388      	adds	r3, #136	; 0x88
 801cdbe:	4a2e      	ldr	r2, [pc, #184]	; (801ce78 <fnResetGP_configCalIMU+0x228>)
 801cdc0:	639a      	str	r2, [r3, #56]	; 0x38
    configCalIMU[2].calIMU.calAcelerometro.ganancia[2][1] =  0.033;
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	3388      	adds	r3, #136	; 0x88
 801cdc6:	4a2d      	ldr	r2, [pc, #180]	; (801ce7c <fnResetGP_configCalIMU+0x22c>)
 801cdc8:	63da      	str	r2, [r3, #60]	; 0x3c
    configCalIMU[2].calIMU.calAcelerometro.ganancia[2][2] =  1.002;
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	3388      	adds	r3, #136	; 0x88
 801cdce:	4a2c      	ldr	r2, [pc, #176]	; (801ce80 <fnResetGP_configCalIMU+0x230>)
 801cdd0:	641a      	str	r2, [r3, #64]	; 0x40
}
 801cdd2:	bf00      	nop
 801cdd4:	370c      	adds	r7, #12
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cddc:	4770      	bx	lr
 801cdde:	bf00      	nop
 801cde0:	3e6147ae 	.word	0x3e6147ae
 801cde4:	bef0a3d7 	.word	0xbef0a3d7
 801cde8:	3faccccd 	.word	0x3faccccd
 801cdec:	3bbe0ded 	.word	0x3bbe0ded
 801cdf0:	bb79096c 	.word	0xbb79096c
 801cdf4:	3bfc5048 	.word	0x3bfc5048
 801cdf8:	3cbc6a7f 	.word	0x3cbc6a7f
 801cdfc:	bc449ba6 	.word	0xbc449ba6
 801ce00:	bcbc6a7f 	.word	0xbcbc6a7f
 801ce04:	3f7f7cee 	.word	0x3f7f7cee
 801ce08:	3c1374bc 	.word	0x3c1374bc
 801ce0c:	bc03126f 	.word	0xbc03126f
 801ce10:	3b449ba6 	.word	0x3b449ba6
 801ce14:	3f7be76d 	.word	0x3f7be76d
 801ce18:	40aae148 	.word	0x40aae148
 801ce1c:	40c4cccd 	.word	0x40c4cccd
 801ce20:	3f63d70a 	.word	0x3f63d70a
 801ce24:	3c23d70a 	.word	0x3c23d70a
 801ce28:	bc23d70a 	.word	0xbc23d70a
 801ce2c:	3b03126f 	.word	0x3b03126f
 801ce30:	3d03126f 	.word	0x3d03126f
 801ce34:	bd872b02 	.word	0xbd872b02
 801ce38:	bcf5c28f 	.word	0xbcf5c28f
 801ce3c:	3f7fbe77 	.word	0x3f7fbe77
 801ce40:	3d6d9168 	.word	0x3d6d9168
 801ce44:	3cb43958 	.word	0x3cb43958
 801ce48:	3f7eb852 	.word	0x3f7eb852
 801ce4c:	4073d70a 	.word	0x4073d70a
 801ce50:	c0d851ec 	.word	0xc0d851ec
 801ce54:	bf5c28f6 	.word	0xbf5c28f6
 801ce58:	bb83126f 	.word	0xbb83126f
 801ce5c:	bc9374bc 	.word	0xbc9374bc
 801ce60:	3c656042 	.word	0x3c656042
 801ce64:	3f83b646 	.word	0x3f83b646
 801ce68:	3cd4fdf4 	.word	0x3cd4fdf4
 801ce6c:	bd9ba5e3 	.word	0xbd9ba5e3
 801ce70:	bcd4fdf4 	.word	0xbcd4fdf4
 801ce74:	3c449ba6 	.word	0x3c449ba6
 801ce78:	3d0b4396 	.word	0x3d0b4396
 801ce7c:	3d072b02 	.word	0x3d072b02
 801ce80:	3f804189 	.word	0x3f804189

0801ce84 <fnResetGP_configCalMag>:
**  Descripcion:    Funcion de reset de la configuracion del calibrador del magnetometro
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configCalMag(configCalMag_t *configCalMag)
{
 801ce84:	b480      	push	{r7}
 801ce86:	b083      	sub	sp, #12
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]

}
 801ce8c:	bf00      	nop
 801ce8e:	370c      	adds	r7, #12
 801ce90:	46bd      	mov	sp, r7
 801ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce96:	4770      	bx	lr

0801ce98 <fnResetGP_configGPS>:
**  Descripcion:    Funcion de reset de la configuracion del GPS
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configGPS(configGPS_t *configGPS)
{
 801ce98:	b480      	push	{r7}
 801ce9a:	b085      	sub	sp, #20
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 801cea0:	2300      	movs	r3, #0
 801cea2:	73fb      	strb	r3, [r7, #15]
 801cea4:	e0a8      	b.n	801cff8 <fnResetGP_configGPS+0x160>
    	configGPS[i].tipoGPS = configGPSdefecto[i].tipoGPS;
 801cea6:	7bfa      	ldrb	r2, [r7, #15]
 801cea8:	7bf9      	ldrb	r1, [r7, #15]
 801ceaa:	460b      	mov	r3, r1
 801ceac:	005b      	lsls	r3, r3, #1
 801ceae:	440b      	add	r3, r1
 801ceb0:	009b      	lsls	r3, r3, #2
 801ceb2:	4619      	mov	r1, r3
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	4419      	add	r1, r3
 801ceb8:	4855      	ldr	r0, [pc, #340]	; (801d010 <fnResetGP_configGPS+0x178>)
 801ceba:	4613      	mov	r3, r2
 801cebc:	005b      	lsls	r3, r3, #1
 801cebe:	4413      	add	r3, r2
 801cec0:	009b      	lsls	r3, r3, #2
 801cec2:	4403      	add	r3, r0
 801cec4:	f993 3000 	ldrsb.w	r3, [r3]
 801cec8:	700b      	strb	r3, [r1, #0]
    	configGPS[i].auxiliar = configGPSdefecto[i].auxiliar;
 801ceca:	7bfa      	ldrb	r2, [r7, #15]
 801cecc:	7bf9      	ldrb	r1, [r7, #15]
 801cece:	460b      	mov	r3, r1
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	440b      	add	r3, r1
 801ced4:	009b      	lsls	r3, r3, #2
 801ced6:	4619      	mov	r1, r3
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	4419      	add	r1, r3
 801cedc:	484c      	ldr	r0, [pc, #304]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cede:	4613      	mov	r3, r2
 801cee0:	005b      	lsls	r3, r3, #1
 801cee2:	4413      	add	r3, r2
 801cee4:	009b      	lsls	r3, r3, #2
 801cee6:	4403      	add	r3, r0
 801cee8:	3301      	adds	r3, #1
 801ceea:	781b      	ldrb	r3, [r3, #0]
 801ceec:	704b      	strb	r3, [r1, #1]
    	configGPS[i].dispUART = configGPSdefecto[i].dispUART;
 801ceee:	7bfa      	ldrb	r2, [r7, #15]
 801cef0:	7bf9      	ldrb	r1, [r7, #15]
 801cef2:	460b      	mov	r3, r1
 801cef4:	005b      	lsls	r3, r3, #1
 801cef6:	440b      	add	r3, r1
 801cef8:	009b      	lsls	r3, r3, #2
 801cefa:	4619      	mov	r1, r3
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	4419      	add	r1, r3
 801cf00:	4843      	ldr	r0, [pc, #268]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cf02:	4613      	mov	r3, r2
 801cf04:	005b      	lsls	r3, r3, #1
 801cf06:	4413      	add	r3, r2
 801cf08:	009b      	lsls	r3, r3, #2
 801cf0a:	4403      	add	r3, r0
 801cf0c:	3302      	adds	r3, #2
 801cf0e:	f993 3000 	ldrsb.w	r3, [r3]
 801cf12:	708b      	strb	r3, [r1, #2]
    	configGPS[i].modoConf = configGPSdefecto[i].modoConf;
 801cf14:	7bfa      	ldrb	r2, [r7, #15]
 801cf16:	7bf9      	ldrb	r1, [r7, #15]
 801cf18:	460b      	mov	r3, r1
 801cf1a:	005b      	lsls	r3, r3, #1
 801cf1c:	440b      	add	r3, r1
 801cf1e:	009b      	lsls	r3, r3, #2
 801cf20:	4619      	mov	r1, r3
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	4419      	add	r1, r3
 801cf26:	483a      	ldr	r0, [pc, #232]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cf28:	4613      	mov	r3, r2
 801cf2a:	005b      	lsls	r3, r3, #1
 801cf2c:	4413      	add	r3, r2
 801cf2e:	009b      	lsls	r3, r3, #2
 801cf30:	4403      	add	r3, r0
 801cf32:	3304      	adds	r3, #4
 801cf34:	f993 3000 	ldrsb.w	r3, [r3]
 801cf38:	710b      	strb	r3, [r1, #4]
    	configGPS[i].modoSBAS = configGPSdefecto[i].modoSBAS;
 801cf3a:	7bfa      	ldrb	r2, [r7, #15]
 801cf3c:	7bf9      	ldrb	r1, [r7, #15]
 801cf3e:	460b      	mov	r3, r1
 801cf40:	005b      	lsls	r3, r3, #1
 801cf42:	440b      	add	r3, r1
 801cf44:	009b      	lsls	r3, r3, #2
 801cf46:	4619      	mov	r1, r3
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	4419      	add	r1, r3
 801cf4c:	4830      	ldr	r0, [pc, #192]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cf4e:	4613      	mov	r3, r2
 801cf50:	005b      	lsls	r3, r3, #1
 801cf52:	4413      	add	r3, r2
 801cf54:	009b      	lsls	r3, r3, #2
 801cf56:	4403      	add	r3, r0
 801cf58:	3303      	adds	r3, #3
 801cf5a:	f993 3000 	ldrsb.w	r3, [r3]
 801cf5e:	70cb      	strb	r3, [r1, #3]
    	configGPS[i].elevacionMin = configGPSdefecto[i].elevacionMin;
 801cf60:	7bfa      	ldrb	r2, [r7, #15]
 801cf62:	7bf9      	ldrb	r1, [r7, #15]
 801cf64:	460b      	mov	r3, r1
 801cf66:	005b      	lsls	r3, r3, #1
 801cf68:	440b      	add	r3, r1
 801cf6a:	009b      	lsls	r3, r3, #2
 801cf6c:	4619      	mov	r1, r3
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	4419      	add	r1, r3
 801cf72:	4827      	ldr	r0, [pc, #156]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cf74:	4613      	mov	r3, r2
 801cf76:	005b      	lsls	r3, r3, #1
 801cf78:	4413      	add	r3, r2
 801cf7a:	009b      	lsls	r3, r3, #2
 801cf7c:	4403      	add	r3, r0
 801cf7e:	3305      	adds	r3, #5
 801cf80:	f993 3000 	ldrsb.w	r3, [r3]
 801cf84:	714b      	strb	r3, [r1, #5]
    	configGPS[i].gnss = configGPSdefecto[i].gnss;
 801cf86:	7bfa      	ldrb	r2, [r7, #15]
 801cf88:	7bf9      	ldrb	r1, [r7, #15]
 801cf8a:	460b      	mov	r3, r1
 801cf8c:	005b      	lsls	r3, r3, #1
 801cf8e:	440b      	add	r3, r1
 801cf90:	009b      	lsls	r3, r3, #2
 801cf92:	4619      	mov	r1, r3
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	4419      	add	r1, r3
 801cf98:	481d      	ldr	r0, [pc, #116]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cf9a:	4613      	mov	r3, r2
 801cf9c:	005b      	lsls	r3, r3, #1
 801cf9e:	4413      	add	r3, r2
 801cfa0:	009b      	lsls	r3, r3, #2
 801cfa2:	4403      	add	r3, r0
 801cfa4:	3306      	adds	r3, #6
 801cfa6:	781b      	ldrb	r3, [r3, #0]
 801cfa8:	718b      	strb	r3, [r1, #6]
    	configGPS[i].periodoMuestreo = configGPSdefecto[i].periodoMuestreo;
 801cfaa:	7bfa      	ldrb	r2, [r7, #15]
 801cfac:	7bf9      	ldrb	r1, [r7, #15]
 801cfae:	460b      	mov	r3, r1
 801cfb0:	005b      	lsls	r3, r3, #1
 801cfb2:	440b      	add	r3, r1
 801cfb4:	009b      	lsls	r3, r3, #2
 801cfb6:	4619      	mov	r1, r3
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	4419      	add	r1, r3
 801cfbc:	4814      	ldr	r0, [pc, #80]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cfbe:	4613      	mov	r3, r2
 801cfc0:	005b      	lsls	r3, r3, #1
 801cfc2:	4413      	add	r3, r2
 801cfc4:	009b      	lsls	r3, r3, #2
 801cfc6:	4403      	add	r3, r0
 801cfc8:	3308      	adds	r3, #8
 801cfca:	881b      	ldrh	r3, [r3, #0]
 801cfcc:	810b      	strh	r3, [r1, #8]
    	configGPS[i].frecLeer = configGPSdefecto[i].frecLeer;
 801cfce:	7bfa      	ldrb	r2, [r7, #15]
 801cfd0:	7bf9      	ldrb	r1, [r7, #15]
 801cfd2:	460b      	mov	r3, r1
 801cfd4:	005b      	lsls	r3, r3, #1
 801cfd6:	440b      	add	r3, r1
 801cfd8:	009b      	lsls	r3, r3, #2
 801cfda:	4619      	mov	r1, r3
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	4419      	add	r1, r3
 801cfe0:	480b      	ldr	r0, [pc, #44]	; (801d010 <fnResetGP_configGPS+0x178>)
 801cfe2:	4613      	mov	r3, r2
 801cfe4:	005b      	lsls	r3, r3, #1
 801cfe6:	4413      	add	r3, r2
 801cfe8:	009b      	lsls	r3, r3, #2
 801cfea:	4403      	add	r3, r0
 801cfec:	330a      	adds	r3, #10
 801cfee:	881b      	ldrh	r3, [r3, #0]
 801cff0:	814b      	strh	r3, [r1, #10]
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 801cff2:	7bfb      	ldrb	r3, [r7, #15]
 801cff4:	3301      	adds	r3, #1
 801cff6:	73fb      	strb	r3, [r7, #15]
 801cff8:	7bfb      	ldrb	r3, [r7, #15]
 801cffa:	2b02      	cmp	r3, #2
 801cffc:	f67f af53 	bls.w	801cea6 <fnResetGP_configGPS+0xe>
    }
}
 801d000:	bf00      	nop
 801d002:	bf00      	nop
 801d004:	3714      	adds	r7, #20
 801d006:	46bd      	mov	sp, r7
 801d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d00c:	4770      	bx	lr
 801d00e:	bf00      	nop
 801d010:	0803be38 	.word	0x0803be38

0801d014 <fnResetGP_configI2C>:
**  Descripcion:    Funcion de reset de la configuracion del I2C
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configI2C(configI2C_t *configI2C)
{
 801d014:	b480      	push	{r7}
 801d016:	b085      	sub	sp, #20
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_I2C; i++) {
 801d01c:	2300      	movs	r3, #0
 801d01e:	73fb      	strb	r3, [r7, #15]
 801d020:	e029      	b.n	801d076 <fnResetGP_configI2C+0x62>
    	configI2C[i].pinSCL = configI2Cdefecto[i].pinSCL;
 801d022:	7bfa      	ldrb	r2, [r7, #15]
 801d024:	7bfb      	ldrb	r3, [r7, #15]
 801d026:	009b      	lsls	r3, r3, #2
 801d028:	6879      	ldr	r1, [r7, #4]
 801d02a:	440b      	add	r3, r1
 801d02c:	4917      	ldr	r1, [pc, #92]	; (801d08c <fnResetGP_configI2C+0x78>)
 801d02e:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 801d032:	701a      	strb	r2, [r3, #0]
    	configI2C[i].pinSDA = configI2Cdefecto[i].pinSDA;
 801d034:	7bfb      	ldrb	r3, [r7, #15]
 801d036:	7bfa      	ldrb	r2, [r7, #15]
 801d038:	0092      	lsls	r2, r2, #2
 801d03a:	6879      	ldr	r1, [r7, #4]
 801d03c:	440a      	add	r2, r1
 801d03e:	4913      	ldr	r1, [pc, #76]	; (801d08c <fnResetGP_configI2C+0x78>)
 801d040:	009b      	lsls	r3, r3, #2
 801d042:	440b      	add	r3, r1
 801d044:	785b      	ldrb	r3, [r3, #1]
 801d046:	7053      	strb	r3, [r2, #1]
    	configI2C[i].overclock = configI2Cdefecto[i].overclock;
 801d048:	7bfb      	ldrb	r3, [r7, #15]
 801d04a:	7bfa      	ldrb	r2, [r7, #15]
 801d04c:	0092      	lsls	r2, r2, #2
 801d04e:	6879      	ldr	r1, [r7, #4]
 801d050:	440a      	add	r2, r1
 801d052:	490e      	ldr	r1, [pc, #56]	; (801d08c <fnResetGP_configI2C+0x78>)
 801d054:	009b      	lsls	r3, r3, #2
 801d056:	440b      	add	r3, r1
 801d058:	789b      	ldrb	r3, [r3, #2]
 801d05a:	7093      	strb	r3, [r2, #2]
    	configI2C[i].pullup = configI2Cdefecto[i].pullup;
 801d05c:	7bfb      	ldrb	r3, [r7, #15]
 801d05e:	7bfa      	ldrb	r2, [r7, #15]
 801d060:	0092      	lsls	r2, r2, #2
 801d062:	6879      	ldr	r1, [r7, #4]
 801d064:	440a      	add	r2, r1
 801d066:	4909      	ldr	r1, [pc, #36]	; (801d08c <fnResetGP_configI2C+0x78>)
 801d068:	009b      	lsls	r3, r3, #2
 801d06a:	440b      	add	r3, r1
 801d06c:	78db      	ldrb	r3, [r3, #3]
 801d06e:	70d3      	strb	r3, [r2, #3]
    for (uint8_t i = 0; i < NUM_MAX_I2C; i++) {
 801d070:	7bfb      	ldrb	r3, [r7, #15]
 801d072:	3301      	adds	r3, #1
 801d074:	73fb      	strb	r3, [r7, #15]
 801d076:	7bfb      	ldrb	r3, [r7, #15]
 801d078:	2b03      	cmp	r3, #3
 801d07a:	d9d2      	bls.n	801d022 <fnResetGP_configI2C+0xe>
    }
}
 801d07c:	bf00      	nop
 801d07e:	bf00      	nop
 801d080:	3714      	adds	r7, #20
 801d082:	46bd      	mov	sp, r7
 801d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d088:	4770      	bx	lr
 801d08a:	bf00      	nop
 801d08c:	0803be5c 	.word	0x0803be5c

0801d090 <fnResetGP_configIMU>:
**  Descripcion:    Funcion de reset de la configuracion de la IMU
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configIMU(configIMU_t *configIMU)
{
 801d090:	b480      	push	{r7}
 801d092:	b085      	sub	sp, #20
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 801d098:	2300      	movs	r3, #0
 801d09a:	73fb      	strb	r3, [r7, #15]
 801d09c:	e0ec      	b.n	801d278 <fnResetGP_configIMU+0x1e8>
        configIMU[i].tipoIMU = configIMUdefecto[i].tipoIMU;
 801d09e:	7bfa      	ldrb	r2, [r7, #15]
 801d0a0:	7bf9      	ldrb	r1, [r7, #15]
 801d0a2:	460b      	mov	r3, r1
 801d0a4:	005b      	lsls	r3, r3, #1
 801d0a6:	440b      	add	r3, r1
 801d0a8:	00db      	lsls	r3, r3, #3
 801d0aa:	4619      	mov	r1, r3
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	4419      	add	r1, r3
 801d0b0:	4877      	ldr	r0, [pc, #476]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d0b2:	4613      	mov	r3, r2
 801d0b4:	005b      	lsls	r3, r3, #1
 801d0b6:	4413      	add	r3, r2
 801d0b8:	00db      	lsls	r3, r3, #3
 801d0ba:	4403      	add	r3, r0
 801d0bc:	f993 3000 	ldrsb.w	r3, [r3]
 801d0c0:	700b      	strb	r3, [r1, #0]
        configIMU[i].auxiliar = configIMUdefecto[i].auxiliar;
 801d0c2:	7bfa      	ldrb	r2, [r7, #15]
 801d0c4:	7bf9      	ldrb	r1, [r7, #15]
 801d0c6:	460b      	mov	r3, r1
 801d0c8:	005b      	lsls	r3, r3, #1
 801d0ca:	440b      	add	r3, r1
 801d0cc:	00db      	lsls	r3, r3, #3
 801d0ce:	4619      	mov	r1, r3
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	4419      	add	r1, r3
 801d0d4:	486e      	ldr	r0, [pc, #440]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d0d6:	4613      	mov	r3, r2
 801d0d8:	005b      	lsls	r3, r3, #1
 801d0da:	4413      	add	r3, r2
 801d0dc:	00db      	lsls	r3, r3, #3
 801d0de:	4403      	add	r3, r0
 801d0e0:	3301      	adds	r3, #1
 801d0e2:	781b      	ldrb	r3, [r3, #0]
 801d0e4:	704b      	strb	r3, [r1, #1]
        configIMU[i].dispBus = configIMUdefecto[i].dispBus;
 801d0e6:	7bfa      	ldrb	r2, [r7, #15]
 801d0e8:	7bf9      	ldrb	r1, [r7, #15]
 801d0ea:	460b      	mov	r3, r1
 801d0ec:	005b      	lsls	r3, r3, #1
 801d0ee:	440b      	add	r3, r1
 801d0f0:	00db      	lsls	r3, r3, #3
 801d0f2:	4619      	mov	r1, r3
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	4419      	add	r1, r3
 801d0f8:	4865      	ldr	r0, [pc, #404]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	005b      	lsls	r3, r3, #1
 801d0fe:	4413      	add	r3, r2
 801d100:	00db      	lsls	r3, r3, #3
 801d102:	4403      	add	r3, r0
 801d104:	3303      	adds	r3, #3
 801d106:	781b      	ldrb	r3, [r3, #0]
 801d108:	70cb      	strb	r3, [r1, #3]
        configIMU[i].drdy = configIMUdefecto[i].drdy;
 801d10a:	7bfa      	ldrb	r2, [r7, #15]
 801d10c:	7bf9      	ldrb	r1, [r7, #15]
 801d10e:	460b      	mov	r3, r1
 801d110:	005b      	lsls	r3, r3, #1
 801d112:	440b      	add	r3, r1
 801d114:	00db      	lsls	r3, r3, #3
 801d116:	4619      	mov	r1, r3
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	4419      	add	r1, r3
 801d11c:	485c      	ldr	r0, [pc, #368]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d11e:	4613      	mov	r3, r2
 801d120:	005b      	lsls	r3, r3, #1
 801d122:	4413      	add	r3, r2
 801d124:	00db      	lsls	r3, r3, #3
 801d126:	4403      	add	r3, r0
 801d128:	3306      	adds	r3, #6
 801d12a:	781b      	ldrb	r3, [r3, #0]
 801d12c:	718b      	strb	r3, [r1, #6]
        configIMU[i].bus = configIMUdefecto[i].bus;
 801d12e:	7bfa      	ldrb	r2, [r7, #15]
 801d130:	7bf9      	ldrb	r1, [r7, #15]
 801d132:	460b      	mov	r3, r1
 801d134:	005b      	lsls	r3, r3, #1
 801d136:	440b      	add	r3, r1
 801d138:	00db      	lsls	r3, r3, #3
 801d13a:	4619      	mov	r1, r3
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	4419      	add	r1, r3
 801d140:	4853      	ldr	r0, [pc, #332]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d142:	4613      	mov	r3, r2
 801d144:	005b      	lsls	r3, r3, #1
 801d146:	4413      	add	r3, r2
 801d148:	00db      	lsls	r3, r3, #3
 801d14a:	4403      	add	r3, r0
 801d14c:	3302      	adds	r3, #2
 801d14e:	f993 3000 	ldrsb.w	r3, [r3]
 801d152:	708b      	strb	r3, [r1, #2]
        configIMU[i].frecFiltroAcel = configIMUdefecto[i].frecFiltroAcel;
 801d154:	7bfa      	ldrb	r2, [r7, #15]
 801d156:	7bf9      	ldrb	r1, [r7, #15]
 801d158:	460b      	mov	r3, r1
 801d15a:	005b      	lsls	r3, r3, #1
 801d15c:	440b      	add	r3, r1
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	4619      	mov	r1, r3
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	4419      	add	r1, r3
 801d166:	484a      	ldr	r0, [pc, #296]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d168:	4613      	mov	r3, r2
 801d16a:	005b      	lsls	r3, r3, #1
 801d16c:	4413      	add	r3, r2
 801d16e:	00db      	lsls	r3, r3, #3
 801d170:	4403      	add	r3, r0
 801d172:	3308      	adds	r3, #8
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	608b      	str	r3, [r1, #8]
        configIMU[i].frecFiltroGiro = configIMUdefecto[i].frecFiltroGiro;
 801d178:	7bfa      	ldrb	r2, [r7, #15]
 801d17a:	7bf9      	ldrb	r1, [r7, #15]
 801d17c:	460b      	mov	r3, r1
 801d17e:	005b      	lsls	r3, r3, #1
 801d180:	440b      	add	r3, r1
 801d182:	00db      	lsls	r3, r3, #3
 801d184:	4619      	mov	r1, r3
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	4419      	add	r1, r3
 801d18a:	4841      	ldr	r0, [pc, #260]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d18c:	4613      	mov	r3, r2
 801d18e:	005b      	lsls	r3, r3, #1
 801d190:	4413      	add	r3, r2
 801d192:	00db      	lsls	r3, r3, #3
 801d194:	4403      	add	r3, r0
 801d196:	330c      	adds	r3, #12
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	60cb      	str	r3, [r1, #12]
        configIMU[i].rotacion = configIMUdefecto[i].rotacion;
 801d19c:	7bfa      	ldrb	r2, [r7, #15]
 801d19e:	7bf9      	ldrb	r1, [r7, #15]
 801d1a0:	460b      	mov	r3, r1
 801d1a2:	005b      	lsls	r3, r3, #1
 801d1a4:	440b      	add	r3, r1
 801d1a6:	00db      	lsls	r3, r3, #3
 801d1a8:	4619      	mov	r1, r3
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	4419      	add	r1, r3
 801d1ae:	4838      	ldr	r0, [pc, #224]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d1b0:	4613      	mov	r3, r2
 801d1b2:	005b      	lsls	r3, r3, #1
 801d1b4:	4413      	add	r3, r2
 801d1b6:	00db      	lsls	r3, r3, #3
 801d1b8:	4403      	add	r3, r0
 801d1ba:	3310      	adds	r3, #16
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	610b      	str	r3, [r1, #16]
        configIMU[i].frecActualizar = configIMUdefecto[i].frecActualizar;
 801d1c0:	7bfa      	ldrb	r2, [r7, #15]
 801d1c2:	7bf9      	ldrb	r1, [r7, #15]
 801d1c4:	460b      	mov	r3, r1
 801d1c6:	005b      	lsls	r3, r3, #1
 801d1c8:	440b      	add	r3, r1
 801d1ca:	00db      	lsls	r3, r3, #3
 801d1cc:	4619      	mov	r1, r3
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	4419      	add	r1, r3
 801d1d2:	482f      	ldr	r0, [pc, #188]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d1d4:	4613      	mov	r3, r2
 801d1d6:	005b      	lsls	r3, r3, #1
 801d1d8:	4413      	add	r3, r2
 801d1da:	00db      	lsls	r3, r3, #3
 801d1dc:	4403      	add	r3, r0
 801d1de:	3314      	adds	r3, #20
 801d1e0:	881b      	ldrh	r3, [r3, #0]
 801d1e2:	828b      	strh	r3, [r1, #20]
        configIMU[i].frecLeer = configIMUdefecto[i].frecLeer;
 801d1e4:	7bfa      	ldrb	r2, [r7, #15]
 801d1e6:	7bf9      	ldrb	r1, [r7, #15]
 801d1e8:	460b      	mov	r3, r1
 801d1ea:	005b      	lsls	r3, r3, #1
 801d1ec:	440b      	add	r3, r1
 801d1ee:	00db      	lsls	r3, r3, #3
 801d1f0:	4619      	mov	r1, r3
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	4419      	add	r1, r3
 801d1f6:	4826      	ldr	r0, [pc, #152]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d1f8:	4613      	mov	r3, r2
 801d1fa:	005b      	lsls	r3, r3, #1
 801d1fc:	4413      	add	r3, r2
 801d1fe:	00db      	lsls	r3, r3, #3
 801d200:	4403      	add	r3, r0
 801d202:	3316      	adds	r3, #22
 801d204:	881b      	ldrh	r3, [r3, #0]
 801d206:	82cb      	strh	r3, [r1, #22]

        switch (configIMU[i].bus) {
 801d208:	7bfa      	ldrb	r2, [r7, #15]
 801d20a:	4613      	mov	r3, r2
 801d20c:	005b      	lsls	r3, r3, #1
 801d20e:	4413      	add	r3, r2
 801d210:	00db      	lsls	r3, r3, #3
 801d212:	461a      	mov	r2, r3
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	4413      	add	r3, r2
 801d218:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d002      	beq.n	801d226 <fnResetGP_configIMU+0x196>
 801d220:	2b01      	cmp	r3, #1
 801d222:	d013      	beq.n	801d24c <fnResetGP_configIMU+0x1bc>
            case BUS_SPI:
                configIMU[i].csSPI = configIMUdefecto[i].csSPI;
        	    break;

            default:
                break;
 801d224:	e025      	b.n	801d272 <fnResetGP_configIMU+0x1e2>
                configIMU[i].dirI2C = configIMUdefecto[i].dirI2C;
 801d226:	7bfa      	ldrb	r2, [r7, #15]
 801d228:	7bf9      	ldrb	r1, [r7, #15]
 801d22a:	460b      	mov	r3, r1
 801d22c:	005b      	lsls	r3, r3, #1
 801d22e:	440b      	add	r3, r1
 801d230:	00db      	lsls	r3, r3, #3
 801d232:	4619      	mov	r1, r3
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	4419      	add	r1, r3
 801d238:	4815      	ldr	r0, [pc, #84]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d23a:	4613      	mov	r3, r2
 801d23c:	005b      	lsls	r3, r3, #1
 801d23e:	4413      	add	r3, r2
 801d240:	00db      	lsls	r3, r3, #3
 801d242:	4403      	add	r3, r0
 801d244:	3305      	adds	r3, #5
 801d246:	781b      	ldrb	r3, [r3, #0]
 801d248:	714b      	strb	r3, [r1, #5]
        	    break;
 801d24a:	e012      	b.n	801d272 <fnResetGP_configIMU+0x1e2>
                configIMU[i].csSPI = configIMUdefecto[i].csSPI;
 801d24c:	7bfa      	ldrb	r2, [r7, #15]
 801d24e:	7bf9      	ldrb	r1, [r7, #15]
 801d250:	460b      	mov	r3, r1
 801d252:	005b      	lsls	r3, r3, #1
 801d254:	440b      	add	r3, r1
 801d256:	00db      	lsls	r3, r3, #3
 801d258:	4619      	mov	r1, r3
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	4419      	add	r1, r3
 801d25e:	480c      	ldr	r0, [pc, #48]	; (801d290 <fnResetGP_configIMU+0x200>)
 801d260:	4613      	mov	r3, r2
 801d262:	005b      	lsls	r3, r3, #1
 801d264:	4413      	add	r3, r2
 801d266:	00db      	lsls	r3, r3, #3
 801d268:	4403      	add	r3, r0
 801d26a:	3304      	adds	r3, #4
 801d26c:	781b      	ldrb	r3, [r3, #0]
 801d26e:	710b      	strb	r3, [r1, #4]
        	    break;
 801d270:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 801d272:	7bfb      	ldrb	r3, [r7, #15]
 801d274:	3301      	adds	r3, #1
 801d276:	73fb      	strb	r3, [r7, #15]
 801d278:	7bfb      	ldrb	r3, [r7, #15]
 801d27a:	2b04      	cmp	r3, #4
 801d27c:	f67f af0f 	bls.w	801d09e <fnResetGP_configIMU+0xe>
        }
    }
}
 801d280:	bf00      	nop
 801d282:	bf00      	nop
 801d284:	3714      	adds	r7, #20
 801d286:	46bd      	mov	sp, r7
 801d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d28c:	4770      	bx	lr
 801d28e:	bf00      	nop
 801d290:	0803be6c 	.word	0x0803be6c

0801d294 <fnResetGP_configMag>:
**  Descripcion:    Funcion de reset de la configuracion del magnetometro
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configMag(configMag_t *configMag)
{
 801d294:	b480      	push	{r7}
 801d296:	b085      	sub	sp, #20
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 801d29c:	2300      	movs	r3, #0
 801d29e:	73fb      	strb	r3, [r7, #15]
 801d2a0:	e07f      	b.n	801d3a2 <fnResetGP_configMag+0x10e>
    	configMag[i].tipoMag = configMagDefecto[i].tipoMag;
 801d2a2:	7bfa      	ldrb	r2, [r7, #15]
 801d2a4:	7bfb      	ldrb	r3, [r7, #15]
 801d2a6:	011b      	lsls	r3, r3, #4
 801d2a8:	6879      	ldr	r1, [r7, #4]
 801d2aa:	440b      	add	r3, r1
 801d2ac:	4942      	ldr	r1, [pc, #264]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d2ae:	0112      	lsls	r2, r2, #4
 801d2b0:	440a      	add	r2, r1
 801d2b2:	f992 2000 	ldrsb.w	r2, [r2]
 801d2b6:	701a      	strb	r2, [r3, #0]
        configMag[i].auxiliar = configMagDefecto[i].auxiliar;
 801d2b8:	7bfa      	ldrb	r2, [r7, #15]
 801d2ba:	7bfb      	ldrb	r3, [r7, #15]
 801d2bc:	011b      	lsls	r3, r3, #4
 801d2be:	6879      	ldr	r1, [r7, #4]
 801d2c0:	440b      	add	r3, r1
 801d2c2:	493d      	ldr	r1, [pc, #244]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d2c4:	0112      	lsls	r2, r2, #4
 801d2c6:	440a      	add	r2, r1
 801d2c8:	3201      	adds	r2, #1
 801d2ca:	7812      	ldrb	r2, [r2, #0]
 801d2cc:	705a      	strb	r2, [r3, #1]
    	configMag[i].dispBus = configMagDefecto[i].dispBus;
 801d2ce:	7bfa      	ldrb	r2, [r7, #15]
 801d2d0:	7bfb      	ldrb	r3, [r7, #15]
 801d2d2:	011b      	lsls	r3, r3, #4
 801d2d4:	6879      	ldr	r1, [r7, #4]
 801d2d6:	440b      	add	r3, r1
 801d2d8:	4937      	ldr	r1, [pc, #220]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d2da:	0112      	lsls	r2, r2, #4
 801d2dc:	440a      	add	r2, r1
 801d2de:	3203      	adds	r2, #3
 801d2e0:	7812      	ldrb	r2, [r2, #0]
 801d2e2:	70da      	strb	r2, [r3, #3]
    	configMag[i].bus = configMagDefecto[i].bus;
 801d2e4:	7bfa      	ldrb	r2, [r7, #15]
 801d2e6:	7bfb      	ldrb	r3, [r7, #15]
 801d2e8:	011b      	lsls	r3, r3, #4
 801d2ea:	6879      	ldr	r1, [r7, #4]
 801d2ec:	440b      	add	r3, r1
 801d2ee:	4932      	ldr	r1, [pc, #200]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d2f0:	0112      	lsls	r2, r2, #4
 801d2f2:	440a      	add	r2, r1
 801d2f4:	3202      	adds	r2, #2
 801d2f6:	f992 2000 	ldrsb.w	r2, [r2]
 801d2fa:	709a      	strb	r2, [r3, #2]
    	configMag[i].drdy = configMagDefecto[i].drdy;
 801d2fc:	7bfa      	ldrb	r2, [r7, #15]
 801d2fe:	7bfb      	ldrb	r3, [r7, #15]
 801d300:	011b      	lsls	r3, r3, #4
 801d302:	6879      	ldr	r1, [r7, #4]
 801d304:	440b      	add	r3, r1
 801d306:	492c      	ldr	r1, [pc, #176]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d308:	0112      	lsls	r2, r2, #4
 801d30a:	440a      	add	r2, r1
 801d30c:	3206      	adds	r2, #6
 801d30e:	7812      	ldrb	r2, [r2, #0]
 801d310:	719a      	strb	r2, [r3, #6]
        configMag[i].rotacion = configMagDefecto[i].rotacion;
 801d312:	7bfa      	ldrb	r2, [r7, #15]
 801d314:	7bfb      	ldrb	r3, [r7, #15]
 801d316:	011b      	lsls	r3, r3, #4
 801d318:	6879      	ldr	r1, [r7, #4]
 801d31a:	440b      	add	r3, r1
 801d31c:	4926      	ldr	r1, [pc, #152]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d31e:	0112      	lsls	r2, r2, #4
 801d320:	440a      	add	r2, r1
 801d322:	3208      	adds	r2, #8
 801d324:	3308      	adds	r3, #8
 801d326:	6810      	ldr	r0, [r2, #0]
 801d328:	6018      	str	r0, [r3, #0]
    	configMag[i].frecActualizar = configMagDefecto[i].frecActualizar;
 801d32a:	7bfa      	ldrb	r2, [r7, #15]
 801d32c:	7bfb      	ldrb	r3, [r7, #15]
 801d32e:	011b      	lsls	r3, r3, #4
 801d330:	6879      	ldr	r1, [r7, #4]
 801d332:	440b      	add	r3, r1
 801d334:	4920      	ldr	r1, [pc, #128]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d336:	0112      	lsls	r2, r2, #4
 801d338:	440a      	add	r2, r1
 801d33a:	320c      	adds	r2, #12
 801d33c:	8812      	ldrh	r2, [r2, #0]
 801d33e:	819a      	strh	r2, [r3, #12]
    	configMag[i].frecLeer = configMagDefecto[i].frecLeer;
 801d340:	7bfa      	ldrb	r2, [r7, #15]
 801d342:	7bfb      	ldrb	r3, [r7, #15]
 801d344:	011b      	lsls	r3, r3, #4
 801d346:	6879      	ldr	r1, [r7, #4]
 801d348:	440b      	add	r3, r1
 801d34a:	491b      	ldr	r1, [pc, #108]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d34c:	0112      	lsls	r2, r2, #4
 801d34e:	440a      	add	r2, r1
 801d350:	320e      	adds	r2, #14
 801d352:	8812      	ldrh	r2, [r2, #0]
 801d354:	81da      	strh	r2, [r3, #14]

        switch (configMag[i].bus) {
 801d356:	7bfb      	ldrb	r3, [r7, #15]
 801d358:	011b      	lsls	r3, r3, #4
 801d35a:	687a      	ldr	r2, [r7, #4]
 801d35c:	4413      	add	r3, r2
 801d35e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d002      	beq.n	801d36c <fnResetGP_configMag+0xd8>
 801d366:	2b01      	cmp	r3, #1
 801d368:	d00c      	beq.n	801d384 <fnResetGP_configMag+0xf0>
            case BUS_SPI:
                configMag[i].csSPI = configMagDefecto[i].csSPI;
        	    break;

            default:
                break;
 801d36a:	e017      	b.n	801d39c <fnResetGP_configMag+0x108>
                configMag[i].dirI2C = configMagDefecto[i].dirI2C;
 801d36c:	7bfa      	ldrb	r2, [r7, #15]
 801d36e:	7bfb      	ldrb	r3, [r7, #15]
 801d370:	011b      	lsls	r3, r3, #4
 801d372:	6879      	ldr	r1, [r7, #4]
 801d374:	440b      	add	r3, r1
 801d376:	4910      	ldr	r1, [pc, #64]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d378:	0112      	lsls	r2, r2, #4
 801d37a:	440a      	add	r2, r1
 801d37c:	3205      	adds	r2, #5
 801d37e:	7812      	ldrb	r2, [r2, #0]
 801d380:	715a      	strb	r2, [r3, #5]
        	    break;
 801d382:	e00b      	b.n	801d39c <fnResetGP_configMag+0x108>
                configMag[i].csSPI = configMagDefecto[i].csSPI;
 801d384:	7bfa      	ldrb	r2, [r7, #15]
 801d386:	7bfb      	ldrb	r3, [r7, #15]
 801d388:	011b      	lsls	r3, r3, #4
 801d38a:	6879      	ldr	r1, [r7, #4]
 801d38c:	440b      	add	r3, r1
 801d38e:	490a      	ldr	r1, [pc, #40]	; (801d3b8 <fnResetGP_configMag+0x124>)
 801d390:	0112      	lsls	r2, r2, #4
 801d392:	440a      	add	r2, r1
 801d394:	3204      	adds	r2, #4
 801d396:	7812      	ldrb	r2, [r2, #0]
 801d398:	711a      	strb	r2, [r3, #4]
        	    break;
 801d39a:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 801d39c:	7bfb      	ldrb	r3, [r7, #15]
 801d39e:	3301      	adds	r3, #1
 801d3a0:	73fb      	strb	r3, [r7, #15]
 801d3a2:	7bfb      	ldrb	r3, [r7, #15]
 801d3a4:	2b04      	cmp	r3, #4
 801d3a6:	f67f af7c 	bls.w	801d2a2 <fnResetGP_configMag+0xe>
        }
    }
}
 801d3aa:	bf00      	nop
 801d3ac:	bf00      	nop
 801d3ae:	3714      	adds	r7, #20
 801d3b0:	46bd      	mov	sp, r7
 801d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b6:	4770      	bx	lr
 801d3b8:	0803bee4 	.word	0x0803bee4

0801d3bc <fnResetGP_configMixer>:
**  Descripcion:    Funcion de reset de la configuracion del mixer
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configMixer(configMixer_t *configMixer)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b082      	sub	sp, #8
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	6078      	str	r0, [r7, #4]
	configMixer->tipoDrone = configMixerDefecto.tipoDrone;
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	701a      	strb	r2, [r3, #0]
	configMixer->curvaPWM = limitarFloat(configMixerDefecto.curvaPWM, 0.0, 1.0);
 801d3ca:	eddf 7a20 	vldr	s15, [pc, #128]	; 801d44c <fnResetGP_configMixer+0x90>
 801d3ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d3d2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801d44c <fnResetGP_configMixer+0x90>
 801d3d6:	eeb0 0a67 	vmov.f32	s0, s15
 801d3da:	f7f6 f920 	bl	801361e <limitarFloat>
 801d3de:	eef0 7a40 	vmov.f32	s15, s0
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	edc3 7a01 	vstr	s15, [r3, #4]
	configMixer->valorArmado = limitarFloat(configMixerDefecto.valorArmado, 0.0, 1.0);
 801d3e8:	eddf 7a19 	vldr	s15, [pc, #100]	; 801d450 <fnResetGP_configMixer+0x94>
 801d3ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d3f0:	eddf 0a16 	vldr	s1, [pc, #88]	; 801d44c <fnResetGP_configMixer+0x90>
 801d3f4:	eeb0 0a67 	vmov.f32	s0, s15
 801d3f8:	f7f6 f911 	bl	801361e <limitarFloat>
 801d3fc:	eef0 7a40 	vmov.f32	s15, s0
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	edc3 7a02 	vstr	s15, [r3, #8]
	configMixer->valorMaximo = limitarFloat(configMixerDefecto.valorMaximo, 0.0, 1.0);
 801d406:	eddf 7a13 	vldr	s15, [pc, #76]	; 801d454 <fnResetGP_configMixer+0x98>
 801d40a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d40e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 801d44c <fnResetGP_configMixer+0x90>
 801d412:	eeb0 0a67 	vmov.f32	s0, s15
 801d416:	f7f6 f902 	bl	801361e <limitarFloat>
 801d41a:	eef0 7a40 	vmov.f32	s15, s0
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	edc3 7a03 	vstr	s15, [r3, #12]
	configMixer->valorMinimo = limitarFloat(configMixerDefecto.valorMinimo, 0.0, 1.0);
 801d424:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801d458 <fnResetGP_configMixer+0x9c>
 801d428:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d42c:	eddf 0a07 	vldr	s1, [pc, #28]	; 801d44c <fnResetGP_configMixer+0x90>
 801d430:	eeb0 0a67 	vmov.f32	s0, s15
 801d434:	f7f6 f8f3 	bl	801361e <limitarFloat>
 801d438:	eef0 7a40 	vmov.f32	s15, s0
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 801d442:	bf00      	nop
 801d444:	3708      	adds	r7, #8
 801d446:	46bd      	mov	sp, r7
 801d448:	bd80      	pop	{r7, pc}
 801d44a:	bf00      	nop
 801d44c:	00000000 	.word	0x00000000
 801d450:	3d8f5c29 	.word	0x3d8f5c29
 801d454:	3f733333 	.word	0x3f733333
 801d458:	3dcccccd 	.word	0x3dcccccd

0801d45c <fnResetGP_configPowerModule>:
**  Descripcion:    Funcion de reset de la configuracion del Power Module
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configPowerModule(configPowerModule_t *configPowerModule)
{
 801d45c:	b480      	push	{r7}
 801d45e:	b085      	sub	sp, #20
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 801d464:	2300      	movs	r3, #0
 801d466:	73fb      	strb	r3, [r7, #15]
 801d468:	e090      	b.n	801d58c <fnResetGP_configPowerModule+0x130>
        configPowerModule[i].tipo = configPowerModuleDefecto[i].tipo;
 801d46a:	7bfa      	ldrb	r2, [r7, #15]
 801d46c:	7bf9      	ldrb	r1, [r7, #15]
 801d46e:	460b      	mov	r3, r1
 801d470:	009b      	lsls	r3, r3, #2
 801d472:	440b      	add	r3, r1
 801d474:	005b      	lsls	r3, r3, #1
 801d476:	4619      	mov	r1, r3
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	4419      	add	r1, r3
 801d47c:	4849      	ldr	r0, [pc, #292]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d47e:	4613      	mov	r3, r2
 801d480:	009b      	lsls	r3, r3, #2
 801d482:	4413      	add	r3, r2
 801d484:	005b      	lsls	r3, r3, #1
 801d486:	4403      	add	r3, r0
 801d488:	f993 3000 	ldrsb.w	r3, [r3]
 801d48c:	700b      	strb	r3, [r1, #0]

        switch (configPowerModuleDefecto[i].tipo) {
 801d48e:	7bfa      	ldrb	r2, [r7, #15]
 801d490:	4944      	ldr	r1, [pc, #272]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d492:	4613      	mov	r3, r2
 801d494:	009b      	lsls	r3, r3, #2
 801d496:	4413      	add	r3, r2
 801d498:	005b      	lsls	r3, r3, #1
 801d49a:	440b      	add	r3, r1
 801d49c:	f993 3000 	ldrsb.w	r3, [r3]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d002      	beq.n	801d4aa <fnResetGP_configPowerModule+0x4e>
 801d4a4:	2b01      	cmp	r3, #1
 801d4a6:	d025      	beq.n	801d4f4 <fnResetGP_configPowerModule+0x98>
                configPowerModule[i].dispBus = configPowerModuleDefecto[i].dispBus;
                configPowerModule[i].dirI2C = configPowerModuleDefecto[i].dirI2C;
    	        break;

    	    default:
                break;
 801d4a8:	e049      	b.n	801d53e <fnResetGP_configPowerModule+0xe2>
                configPowerModule[i].multV = configPowerModuleDefecto[i].multV;
 801d4aa:	7bfa      	ldrb	r2, [r7, #15]
 801d4ac:	7bf9      	ldrb	r1, [r7, #15]
 801d4ae:	460b      	mov	r3, r1
 801d4b0:	009b      	lsls	r3, r3, #2
 801d4b2:	440b      	add	r3, r1
 801d4b4:	005b      	lsls	r3, r3, #1
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	4419      	add	r1, r3
 801d4bc:	4839      	ldr	r0, [pc, #228]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d4be:	4613      	mov	r3, r2
 801d4c0:	009b      	lsls	r3, r3, #2
 801d4c2:	4413      	add	r3, r2
 801d4c4:	005b      	lsls	r3, r3, #1
 801d4c6:	4403      	add	r3, r0
 801d4c8:	3301      	adds	r3, #1
 801d4ca:	781b      	ldrb	r3, [r3, #0]
 801d4cc:	704b      	strb	r3, [r1, #1]
                configPowerModule[i].multI = configPowerModuleDefecto[i].multI;
 801d4ce:	7bfa      	ldrb	r2, [r7, #15]
 801d4d0:	7bf9      	ldrb	r1, [r7, #15]
 801d4d2:	460b      	mov	r3, r1
 801d4d4:	009b      	lsls	r3, r3, #2
 801d4d6:	440b      	add	r3, r1
 801d4d8:	005b      	lsls	r3, r3, #1
 801d4da:	4619      	mov	r1, r3
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	4419      	add	r1, r3
 801d4e0:	4830      	ldr	r0, [pc, #192]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d4e2:	4613      	mov	r3, r2
 801d4e4:	009b      	lsls	r3, r3, #2
 801d4e6:	4413      	add	r3, r2
 801d4e8:	005b      	lsls	r3, r3, #1
 801d4ea:	4403      	add	r3, r0
 801d4ec:	3302      	adds	r3, #2
 801d4ee:	781b      	ldrb	r3, [r3, #0]
 801d4f0:	708b      	strb	r3, [r1, #2]
    	        break;
 801d4f2:	e024      	b.n	801d53e <fnResetGP_configPowerModule+0xe2>
                configPowerModule[i].dispBus = configPowerModuleDefecto[i].dispBus;
 801d4f4:	7bfa      	ldrb	r2, [r7, #15]
 801d4f6:	7bf9      	ldrb	r1, [r7, #15]
 801d4f8:	460b      	mov	r3, r1
 801d4fa:	009b      	lsls	r3, r3, #2
 801d4fc:	440b      	add	r3, r1
 801d4fe:	005b      	lsls	r3, r3, #1
 801d500:	4619      	mov	r1, r3
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	4419      	add	r1, r3
 801d506:	4827      	ldr	r0, [pc, #156]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d508:	4613      	mov	r3, r2
 801d50a:	009b      	lsls	r3, r3, #2
 801d50c:	4413      	add	r3, r2
 801d50e:	005b      	lsls	r3, r3, #1
 801d510:	4403      	add	r3, r0
 801d512:	3303      	adds	r3, #3
 801d514:	781b      	ldrb	r3, [r3, #0]
 801d516:	70cb      	strb	r3, [r1, #3]
                configPowerModule[i].dirI2C = configPowerModuleDefecto[i].dirI2C;
 801d518:	7bfa      	ldrb	r2, [r7, #15]
 801d51a:	7bf9      	ldrb	r1, [r7, #15]
 801d51c:	460b      	mov	r3, r1
 801d51e:	009b      	lsls	r3, r3, #2
 801d520:	440b      	add	r3, r1
 801d522:	005b      	lsls	r3, r3, #1
 801d524:	4619      	mov	r1, r3
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	4419      	add	r1, r3
 801d52a:	481e      	ldr	r0, [pc, #120]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d52c:	4613      	mov	r3, r2
 801d52e:	009b      	lsls	r3, r3, #2
 801d530:	4413      	add	r3, r2
 801d532:	005b      	lsls	r3, r3, #1
 801d534:	4403      	add	r3, r0
 801d536:	3304      	adds	r3, #4
 801d538:	781b      	ldrb	r3, [r3, #0]
 801d53a:	710b      	strb	r3, [r1, #4]
    	        break;
 801d53c:	bf00      	nop
        }

        configPowerModule[i].frecLeer = configPowerModuleDefecto[i].frecLeer;
 801d53e:	7bfa      	ldrb	r2, [r7, #15]
 801d540:	7bf9      	ldrb	r1, [r7, #15]
 801d542:	460b      	mov	r3, r1
 801d544:	009b      	lsls	r3, r3, #2
 801d546:	440b      	add	r3, r1
 801d548:	005b      	lsls	r3, r3, #1
 801d54a:	4619      	mov	r1, r3
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	4419      	add	r1, r3
 801d550:	4814      	ldr	r0, [pc, #80]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d552:	4613      	mov	r3, r2
 801d554:	009b      	lsls	r3, r3, #2
 801d556:	4413      	add	r3, r2
 801d558:	005b      	lsls	r3, r3, #1
 801d55a:	4403      	add	r3, r0
 801d55c:	3306      	adds	r3, #6
 801d55e:	881b      	ldrh	r3, [r3, #0]
 801d560:	80cb      	strh	r3, [r1, #6]
        configPowerModule[i].frecActualizar = configPowerModuleDefecto[i].frecActualizar;
 801d562:	7bfa      	ldrb	r2, [r7, #15]
 801d564:	7bf9      	ldrb	r1, [r7, #15]
 801d566:	460b      	mov	r3, r1
 801d568:	009b      	lsls	r3, r3, #2
 801d56a:	440b      	add	r3, r1
 801d56c:	005b      	lsls	r3, r3, #1
 801d56e:	4619      	mov	r1, r3
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	4419      	add	r1, r3
 801d574:	480b      	ldr	r0, [pc, #44]	; (801d5a4 <fnResetGP_configPowerModule+0x148>)
 801d576:	4613      	mov	r3, r2
 801d578:	009b      	lsls	r3, r3, #2
 801d57a:	4413      	add	r3, r2
 801d57c:	005b      	lsls	r3, r3, #1
 801d57e:	4403      	add	r3, r0
 801d580:	3308      	adds	r3, #8
 801d582:	881b      	ldrh	r3, [r3, #0]
 801d584:	810b      	strh	r3, [r1, #8]
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 801d586:	7bfb      	ldrb	r3, [r7, #15]
 801d588:	3301      	adds	r3, #1
 801d58a:	73fb      	strb	r3, [r7, #15]
 801d58c:	7bfb      	ldrb	r3, [r7, #15]
 801d58e:	2b01      	cmp	r3, #1
 801d590:	f67f af6b 	bls.w	801d46a <fnResetGP_configPowerModule+0xe>
    }
}
 801d594:	bf00      	nop
 801d596:	bf00      	nop
 801d598:	3714      	adds	r7, #20
 801d59a:	46bd      	mov	sp, r7
 801d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5a0:	4770      	bx	lr
 801d5a2:	bf00      	nop
 801d5a4:	0803bf34 	.word	0x0803bf34

0801d5a8 <configRefRC>:
DECLARAR_GP(configRefRC_t, configRefRC);
 801d5a8:	b480      	push	{r7}
 801d5aa:	af00      	add	r7, sp, #0
 801d5ac:	4b02      	ldr	r3, [pc, #8]	; (801d5b8 <configRefRC+0x10>)
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5b6:	4770      	bx	lr
 801d5b8:	2000a93c 	.word	0x2000a93c

0801d5bc <fnResetGP_configCanalRC>:
**  Descripcion:    Funcion de reset de la configuracion de los canales RC
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configCanalRC(configCanalRC_t *configCanalRC)
{
 801d5bc:	b590      	push	{r4, r7, lr}
 801d5be:	b085      	sub	sp, #20
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CANALES_PWM_RADIO; i++) {
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	73fb      	strb	r3, [r7, #15]
 801d5c8:	e075      	b.n	801d6b6 <fnResetGP_configCanalRC+0xfa>
    	configCanalRC[i].valorMin = limitarUint16(VALOR_MINIMO_CANAL_RC, VALOR_MINIMO_RADIO, VALOR_MAXIMO_RADIO);
 801d5ca:	7bfa      	ldrb	r2, [r7, #15]
 801d5cc:	4613      	mov	r3, r2
 801d5ce:	009b      	lsls	r3, r3, #2
 801d5d0:	4413      	add	r3, r2
 801d5d2:	005b      	lsls	r3, r3, #1
 801d5d4:	461a      	mov	r2, r3
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	189c      	adds	r4, r3, r2
 801d5da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801d5de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d5e2:	f240 404c 	movw	r0, #1100	; 0x44c
 801d5e6:	f7f5 ffe5 	bl	80135b4 <limitarUint16>
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	8023      	strh	r3, [r4, #0]
    	configCanalRC[i].valorMax = limitarUint16(VALOR_MAXIMO_CANAL_RC, VALOR_MINIMO_RADIO, VALOR_MAXIMO_RADIO);
 801d5ee:	7bfa      	ldrb	r2, [r7, #15]
 801d5f0:	4613      	mov	r3, r2
 801d5f2:	009b      	lsls	r3, r3, #2
 801d5f4:	4413      	add	r3, r2
 801d5f6:	005b      	lsls	r3, r3, #1
 801d5f8:	461a      	mov	r2, r3
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	189c      	adds	r4, r3, r2
 801d5fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801d602:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d606:	f240 706c 	movw	r0, #1900	; 0x76c
 801d60a:	f7f5 ffd3 	bl	80135b4 <limitarUint16>
 801d60e:	4603      	mov	r3, r0
 801d610:	8063      	strh	r3, [r4, #2]
    	configCanalRC[i].valorTrim = limitarUint16(VALOR_TRIM_CANAL_RC, VALOR_MINIMO_RADIO, VALOR_MAXIMO_RADIO);
 801d612:	7bfa      	ldrb	r2, [r7, #15]
 801d614:	4613      	mov	r3, r2
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	4413      	add	r3, r2
 801d61a:	005b      	lsls	r3, r3, #1
 801d61c:	461a      	mov	r2, r3
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	189c      	adds	r4, r3, r2
 801d622:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801d626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d62a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801d62e:	f7f5 ffc1 	bl	80135b4 <limitarUint16>
 801d632:	4603      	mov	r3, r0
 801d634:	80a3      	strh	r3, [r4, #4]
    	configCanalRC[i].zonaMuerta = limitarUint16(ZONA_MUERTA_CANAL_RC, ZONA_MUERTA_MIN_RC, ZONA_MUERTA_MAX_RC);
 801d636:	7bfa      	ldrb	r2, [r7, #15]
 801d638:	4613      	mov	r3, r2
 801d63a:	009b      	lsls	r3, r3, #2
 801d63c:	4413      	add	r3, r2
 801d63e:	005b      	lsls	r3, r3, #1
 801d640:	461a      	mov	r2, r3
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	189c      	adds	r4, r3, r2
 801d646:	22c8      	movs	r2, #200	; 0xc8
 801d648:	2100      	movs	r1, #0
 801d64a:	2000      	movs	r0, #0
 801d64c:	f7f5 ffb2 	bl	80135b4 <limitarUint16>
 801d650:	4603      	mov	r3, r0
 801d652:	80e3      	strh	r3, [r4, #6]
    	configCanalRC[i].reverse = false;
 801d654:	7bfa      	ldrb	r2, [r7, #15]
 801d656:	4613      	mov	r3, r2
 801d658:	009b      	lsls	r3, r3, #2
 801d65a:	4413      	add	r3, r2
 801d65c:	005b      	lsls	r3, r3, #1
 801d65e:	461a      	mov	r2, r3
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	4413      	add	r3, r2
 801d664:	2200      	movs	r2, #0
 801d666:	721a      	strb	r2, [r3, #8]

    	if (i == configRefRC()->yaw.canalRC)
 801d668:	7bfc      	ldrb	r4, [r7, #15]
 801d66a:	f7ff ff9d 	bl	801d5a8 <configRefRC>
 801d66e:	4603      	mov	r3, r0
 801d670:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801d674:	429c      	cmp	r4, r3
 801d676:	d109      	bne.n	801d68c <fnResetGP_configCanalRC+0xd0>
            configCanalRC[i].zonaMuerta = ZONA_MUERTA_YAW_RC;
 801d678:	7bfa      	ldrb	r2, [r7, #15]
 801d67a:	4613      	mov	r3, r2
 801d67c:	009b      	lsls	r3, r3, #2
 801d67e:	4413      	add	r3, r2
 801d680:	005b      	lsls	r3, r3, #1
 801d682:	461a      	mov	r2, r3
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	4413      	add	r3, r2
 801d688:	2214      	movs	r2, #20
 801d68a:	80da      	strh	r2, [r3, #6]

    	if (i == configRefRC()->alt.canalRC)
 801d68c:	7bfc      	ldrb	r4, [r7, #15]
 801d68e:	f7ff ff8b 	bl	801d5a8 <configRefRC>
 801d692:	4603      	mov	r3, r0
 801d694:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801d698:	429c      	cmp	r4, r3
 801d69a:	d109      	bne.n	801d6b0 <fnResetGP_configCanalRC+0xf4>
            configCanalRC[i].zonaMuerta = ZONA_MUERTA_ALT_RC;
 801d69c:	7bfa      	ldrb	r2, [r7, #15]
 801d69e:	4613      	mov	r3, r2
 801d6a0:	009b      	lsls	r3, r3, #2
 801d6a2:	4413      	add	r3, r2
 801d6a4:	005b      	lsls	r3, r3, #1
 801d6a6:	461a      	mov	r2, r3
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	4413      	add	r3, r2
 801d6ac:	2214      	movs	r2, #20
 801d6ae:	80da      	strh	r2, [r3, #6]
    for (uint8_t i = 0; i < CANALES_PWM_RADIO; i++) {
 801d6b0:	7bfb      	ldrb	r3, [r7, #15]
 801d6b2:	3301      	adds	r3, #1
 801d6b4:	73fb      	strb	r3, [r7, #15]
 801d6b6:	7bfb      	ldrb	r3, [r7, #15]
 801d6b8:	2b07      	cmp	r3, #7
 801d6ba:	d986      	bls.n	801d5ca <fnResetGP_configCanalRC+0xe>
    }
}
 801d6bc:	bf00      	nop
 801d6be:	bf00      	nop
 801d6c0:	3714      	adds	r7, #20
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	bd90      	pop	{r4, r7, pc}
	...

0801d6c8 <fnResetGP_configRefRC>:
**  Descripcion:    Funcion de reset de la configuracion del sistema de referencia RC
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configRefRC(configRefRC_t *configRefRC)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	b082      	sub	sp, #8
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	6078      	str	r0, [r7, #4]
    configRefRC->roll.valorMax = ANGULO_MAX_ROLL_REF_RC;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	222d      	movs	r2, #45	; 0x2d
 801d6d4:	801a      	strh	r2, [r3, #0]
    configRefRC->roll.canalRC = CANAL4;
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	2203      	movs	r2, #3
 801d6da:	709a      	strb	r2, [r3, #2]

    configRefRC->pitch.valorMax = ANGULO_MAX_ROLL_REF_RC;
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	222d      	movs	r2, #45	; 0x2d
 801d6e0:	809a      	strh	r2, [r3, #4]
    configRefRC->pitch.canalRC = CANAL2;
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	2201      	movs	r2, #1
 801d6e6:	719a      	strb	r2, [r3, #6]

    configRefRC->yaw.valorMax = VEL_MAX_YAW_REF_RC;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	22c8      	movs	r2, #200	; 0xc8
 801d6ec:	811a      	strh	r2, [r3, #8]
    configRefRC->yaw.grado = limitarFloat(GRADO_YAW_REF_RC, 0.0, 1.0);
 801d6ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d6f2:	eddf 0a27 	vldr	s1, [pc, #156]	; 801d790 <fnResetGP_configRefRC+0xc8>
 801d6f6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 801d6fa:	f7f5 ff90 	bl	801361e <limitarFloat>
 801d6fe:	eef0 7a40 	vmov.f32	s15, s0
 801d702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d706:	edc7 7a00 	vstr	s15, [r7]
 801d70a:	783b      	ldrb	r3, [r7, #0]
 801d70c:	b2da      	uxtb	r2, r3
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	729a      	strb	r2, [r3, #10]
    if (configRefRC->yaw.grado % 2 == 0)
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	7a9b      	ldrb	r3, [r3, #10]
 801d716:	f003 0301 	and.w	r3, r3, #1
 801d71a:	b2db      	uxtb	r3, r3
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d102      	bne.n	801d726 <fnResetGP_configRefRC+0x5e>
        configRefRC->yaw.grado = 3;
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	2203      	movs	r2, #3
 801d724:	729a      	strb	r2, [r3, #10]
    configRefRC->yaw.acro = limitarFloat(ACRO_YAW_REF_RC, 0.0, 1.0);
 801d726:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d72a:	eddf 0a19 	vldr	s1, [pc, #100]	; 801d790 <fnResetGP_configRefRC+0xc8>
 801d72e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801d794 <fnResetGP_configRefRC+0xcc>
 801d732:	f7f5 ff74 	bl	801361e <limitarFloat>
 801d736:	eef0 7a40 	vmov.f32	s15, s0
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	edc3 7a03 	vstr	s15, [r3, #12]
    configRefRC->yaw.canalRC = CANAL1;
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	2200      	movs	r2, #0
 801d744:	741a      	strb	r2, [r3, #16]

    configRefRC->alt.valorMax = VEL_MAX_ALTITUD_REF_RC;
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	22fa      	movs	r2, #250	; 0xfa
 801d74a:	829a      	strh	r2, [r3, #20]
    configRefRC->alt.expoMedio = limitarFloat(VALOR_MEDIO_EXPO_THROTTLE_RC, 0.0, 1.0);
 801d74c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d750:	eddf 0a0f 	vldr	s1, [pc, #60]	; 801d790 <fnResetGP_configRefRC+0xc8>
 801d754:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801d758:	f7f5 ff61 	bl	801361e <limitarFloat>
 801d75c:	eef0 7a40 	vmov.f32	s15, s0
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	edc3 7a06 	vstr	s15, [r3, #24]
    configRefRC->alt.expoGrado = limitarFloat(GRADO_EXPO_THROTTLE_RC, 0.0, 1.0);
 801d766:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d76a:	eddf 0a09 	vldr	s1, [pc, #36]	; 801d790 <fnResetGP_configRefRC+0xc8>
 801d76e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801d798 <fnResetGP_configRefRC+0xd0>
 801d772:	f7f5 ff54 	bl	801361e <limitarFloat>
 801d776:	eef0 7a40 	vmov.f32	s15, s0
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	edc3 7a07 	vstr	s15, [r3, #28]
    configRefRC->alt.canalRC = CANAL3;
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	2202      	movs	r2, #2
 801d784:	f883 2020 	strb.w	r2, [r3, #32]
}
 801d788:	bf00      	nop
 801d78a:	3708      	adds	r7, #8
 801d78c:	46bd      	mov	sp, r7
 801d78e:	bd80      	pop	{r7, pc}
 801d790:	00000000 	.word	0x00000000
 801d794:	3f333333 	.word	0x3f333333
 801d798:	3f266666 	.word	0x3f266666

0801d79c <fnResetGP_configSecuenciaRC>:
**  Descripcion:    Funcion de reset de la configuracion de las secuencias RC
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configSecuenciaRC(configSecuenciaRC_t *configSecuenciaRC)
{
 801d79c:	b480      	push	{r7}
 801d79e:	b085      	sub	sp, #20
 801d7a0:	af00      	add	r7, sp, #0
 801d7a2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++) {
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	73fb      	strb	r3, [r7, #15]
 801d7a8:	e016      	b.n	801d7d8 <fnResetGP_configSecuenciaRC+0x3c>
        configSecuenciaRC->armado[i] = VALOR_MIN_SECUENCIA_RC;
 801d7aa:	7bfa      	ldrb	r2, [r7, #15]
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	f240 414c 	movw	r1, #1100	; 0x44c
 801d7b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        configSecuenciaRC->desarmado[i] = VALOR_MIN_SECUENCIA_RC;
 801d7b6:	7bfa      	ldrb	r2, [r7, #15]
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	3204      	adds	r2, #4
 801d7bc:	f240 414c 	movw	r1, #1100	; 0x44c
 801d7c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        configSecuenciaRC->calibracion[i] = VALOR_MAX_SECUENCIA_RC;
 801d7c4:	7bfa      	ldrb	r2, [r7, #15]
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	3208      	adds	r2, #8
 801d7ca:	f240 716c 	movw	r1, #1900	; 0x76c
 801d7ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < 4; i++) {
 801d7d2:	7bfb      	ldrb	r3, [r7, #15]
 801d7d4:	3301      	adds	r3, #1
 801d7d6:	73fb      	strb	r3, [r7, #15]
 801d7d8:	7bfb      	ldrb	r3, [r7, #15]
 801d7da:	2b03      	cmp	r3, #3
 801d7dc:	d9e5      	bls.n	801d7aa <fnResetGP_configSecuenciaRC+0xe>
    }
}
 801d7de:	bf00      	nop
 801d7e0:	bf00      	nop
 801d7e2:	3714      	adds	r7, #20
 801d7e4:	46bd      	mov	sp, r7
 801d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ea:	4770      	bx	lr

0801d7ec <fnResetGP_configSPI>:
**  Descripcion:    Funcion de reset de la configuracion del SPI
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configSPI(configSPI_t *configSPI)
{
 801d7ec:	b480      	push	{r7}
 801d7ee:	b085      	sub	sp, #20
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_SPI; i++) {
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	73fb      	strb	r3, [r7, #15]
 801d7f8:	e029      	b.n	801d84e <fnResetGP_configSPI+0x62>
    	configSPI[i].pinSCK = configSPIdefecto[i].pinSCK;
 801d7fa:	7bfa      	ldrb	r2, [r7, #15]
 801d7fc:	7bfb      	ldrb	r3, [r7, #15]
 801d7fe:	009b      	lsls	r3, r3, #2
 801d800:	6879      	ldr	r1, [r7, #4]
 801d802:	440b      	add	r3, r1
 801d804:	4917      	ldr	r1, [pc, #92]	; (801d864 <fnResetGP_configSPI+0x78>)
 801d806:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 801d80a:	701a      	strb	r2, [r3, #0]
    	configSPI[i].pinMISO = configSPIdefecto[i].pinMISO;
 801d80c:	7bfb      	ldrb	r3, [r7, #15]
 801d80e:	7bfa      	ldrb	r2, [r7, #15]
 801d810:	0092      	lsls	r2, r2, #2
 801d812:	6879      	ldr	r1, [r7, #4]
 801d814:	440a      	add	r2, r1
 801d816:	4913      	ldr	r1, [pc, #76]	; (801d864 <fnResetGP_configSPI+0x78>)
 801d818:	009b      	lsls	r3, r3, #2
 801d81a:	440b      	add	r3, r1
 801d81c:	785b      	ldrb	r3, [r3, #1]
 801d81e:	7053      	strb	r3, [r2, #1]
    	configSPI[i].pinMOSI = configSPIdefecto[i].pinMOSI;
 801d820:	7bfb      	ldrb	r3, [r7, #15]
 801d822:	7bfa      	ldrb	r2, [r7, #15]
 801d824:	0092      	lsls	r2, r2, #2
 801d826:	6879      	ldr	r1, [r7, #4]
 801d828:	440a      	add	r2, r1
 801d82a:	490e      	ldr	r1, [pc, #56]	; (801d864 <fnResetGP_configSPI+0x78>)
 801d82c:	009b      	lsls	r3, r3, #2
 801d82e:	440b      	add	r3, r1
 801d830:	789b      	ldrb	r3, [r3, #2]
 801d832:	7093      	strb	r3, [r2, #2]
    	configSPI[i].leadingEdge = configSPIdefecto[i].leadingEdge;
 801d834:	7bfb      	ldrb	r3, [r7, #15]
 801d836:	7bfa      	ldrb	r2, [r7, #15]
 801d838:	0092      	lsls	r2, r2, #2
 801d83a:	6879      	ldr	r1, [r7, #4]
 801d83c:	440a      	add	r2, r1
 801d83e:	4909      	ldr	r1, [pc, #36]	; (801d864 <fnResetGP_configSPI+0x78>)
 801d840:	009b      	lsls	r3, r3, #2
 801d842:	440b      	add	r3, r1
 801d844:	78db      	ldrb	r3, [r3, #3]
 801d846:	70d3      	strb	r3, [r2, #3]
    for (uint8_t i = 0; i < NUM_MAX_SPI; i++) {
 801d848:	7bfb      	ldrb	r3, [r7, #15]
 801d84a:	3301      	adds	r3, #1
 801d84c:	73fb      	strb	r3, [r7, #15]
 801d84e:	7bfb      	ldrb	r3, [r7, #15]
 801d850:	2b05      	cmp	r3, #5
 801d852:	d9d2      	bls.n	801d7fa <fnResetGP_configSPI+0xe>
    }
}
 801d854:	bf00      	nop
 801d856:	bf00      	nop
 801d858:	3714      	adds	r7, #20
 801d85a:	46bd      	mov	sp, r7
 801d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d860:	4770      	bx	lr
 801d862:	bf00      	nop
 801d864:	0803bf48 	.word	0x0803bf48

0801d868 <fnResetGP_configUART>:
**  Descripcion:    Funcion de reset de la configuracion de la UART
**  Parametros:     Configuracion a resetear
**  Retorno:        Ninguno
****************************************************************************************/
void fnResetGP_configUART(configUART_t *configUART)
{
 801d868:	b480      	push	{r7}
 801d86a:	b085      	sub	sp, #20
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_MAX_UART; i++) {
 801d870:	2300      	movs	r3, #0
 801d872:	73fb      	strb	r3, [r7, #15]
 801d874:	e05b      	b.n	801d92e <fnResetGP_configUART+0xc6>
        configUART[i].pinTx = configUARTdefecto[i].pinTx;
 801d876:	7bfa      	ldrb	r2, [r7, #15]
 801d878:	7bf9      	ldrb	r1, [r7, #15]
 801d87a:	460b      	mov	r3, r1
 801d87c:	005b      	lsls	r3, r3, #1
 801d87e:	440b      	add	r3, r1
 801d880:	009b      	lsls	r3, r3, #2
 801d882:	4619      	mov	r1, r3
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	4419      	add	r1, r3
 801d888:	482e      	ldr	r0, [pc, #184]	; (801d944 <fnResetGP_configUART+0xdc>)
 801d88a:	4613      	mov	r3, r2
 801d88c:	005b      	lsls	r3, r3, #1
 801d88e:	4413      	add	r3, r2
 801d890:	009b      	lsls	r3, r3, #2
 801d892:	4403      	add	r3, r0
 801d894:	781b      	ldrb	r3, [r3, #0]
 801d896:	700b      	strb	r3, [r1, #0]
        configUART[i].pinRx = configUARTdefecto[i].pinRx;
 801d898:	7bfa      	ldrb	r2, [r7, #15]
 801d89a:	7bf9      	ldrb	r1, [r7, #15]
 801d89c:	460b      	mov	r3, r1
 801d89e:	005b      	lsls	r3, r3, #1
 801d8a0:	440b      	add	r3, r1
 801d8a2:	009b      	lsls	r3, r3, #2
 801d8a4:	4619      	mov	r1, r3
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	4419      	add	r1, r3
 801d8aa:	4826      	ldr	r0, [pc, #152]	; (801d944 <fnResetGP_configUART+0xdc>)
 801d8ac:	4613      	mov	r3, r2
 801d8ae:	005b      	lsls	r3, r3, #1
 801d8b0:	4413      	add	r3, r2
 801d8b2:	009b      	lsls	r3, r3, #2
 801d8b4:	4403      	add	r3, r0
 801d8b6:	3301      	adds	r3, #1
 801d8b8:	781b      	ldrb	r3, [r3, #0]
 801d8ba:	704b      	strb	r3, [r1, #1]
        configUART[i].usarDMA = configUARTdefecto[i].usarDMA;
 801d8bc:	7bfa      	ldrb	r2, [r7, #15]
 801d8be:	7bf9      	ldrb	r1, [r7, #15]
 801d8c0:	460b      	mov	r3, r1
 801d8c2:	005b      	lsls	r3, r3, #1
 801d8c4:	440b      	add	r3, r1
 801d8c6:	009b      	lsls	r3, r3, #2
 801d8c8:	4619      	mov	r1, r3
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	4419      	add	r1, r3
 801d8ce:	481d      	ldr	r0, [pc, #116]	; (801d944 <fnResetGP_configUART+0xdc>)
 801d8d0:	4613      	mov	r3, r2
 801d8d2:	005b      	lsls	r3, r3, #1
 801d8d4:	4413      	add	r3, r2
 801d8d6:	009b      	lsls	r3, r3, #2
 801d8d8:	4403      	add	r3, r0
 801d8da:	3302      	adds	r3, #2
 801d8dc:	781b      	ldrb	r3, [r3, #0]
 801d8de:	708b      	strb	r3, [r1, #2]
        configUART[i].dmaTx = configUARTdefecto[i].dmaTx;
 801d8e0:	7bfa      	ldrb	r2, [r7, #15]
 801d8e2:	7bf9      	ldrb	r1, [r7, #15]
 801d8e4:	460b      	mov	r3, r1
 801d8e6:	005b      	lsls	r3, r3, #1
 801d8e8:	440b      	add	r3, r1
 801d8ea:	009b      	lsls	r3, r3, #2
 801d8ec:	4619      	mov	r1, r3
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	4419      	add	r1, r3
 801d8f2:	4814      	ldr	r0, [pc, #80]	; (801d944 <fnResetGP_configUART+0xdc>)
 801d8f4:	4613      	mov	r3, r2
 801d8f6:	005b      	lsls	r3, r3, #1
 801d8f8:	4413      	add	r3, r2
 801d8fa:	009b      	lsls	r3, r3, #2
 801d8fc:	4403      	add	r3, r0
 801d8fe:	3304      	adds	r3, #4
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	604b      	str	r3, [r1, #4]
        configUART[i].dmaRx = configUARTdefecto[i].dmaRx;
 801d904:	7bfa      	ldrb	r2, [r7, #15]
 801d906:	7bf9      	ldrb	r1, [r7, #15]
 801d908:	460b      	mov	r3, r1
 801d90a:	005b      	lsls	r3, r3, #1
 801d90c:	440b      	add	r3, r1
 801d90e:	009b      	lsls	r3, r3, #2
 801d910:	4619      	mov	r1, r3
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	4419      	add	r1, r3
 801d916:	480b      	ldr	r0, [pc, #44]	; (801d944 <fnResetGP_configUART+0xdc>)
 801d918:	4613      	mov	r3, r2
 801d91a:	005b      	lsls	r3, r3, #1
 801d91c:	4413      	add	r3, r2
 801d91e:	009b      	lsls	r3, r3, #2
 801d920:	4403      	add	r3, r0
 801d922:	3308      	adds	r3, #8
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	608b      	str	r3, [r1, #8]
    for (uint8_t i = 0; i < NUM_MAX_UART; i++) {
 801d928:	7bfb      	ldrb	r3, [r7, #15]
 801d92a:	3301      	adds	r3, #1
 801d92c:	73fb      	strb	r3, [r7, #15]
 801d92e:	7bfb      	ldrb	r3, [r7, #15]
 801d930:	2b07      	cmp	r3, #7
 801d932:	d9a0      	bls.n	801d876 <fnResetGP_configUART+0xe>
    }
}
 801d934:	bf00      	nop
 801d936:	bf00      	nop
 801d938:	3714      	adds	r7, #20
 801d93a:	46bd      	mov	sp, r7
 801d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d940:	4770      	bx	lr
 801d942:	bf00      	nop
 801d944:	0803bf60 	.word	0x0803bf60

0801d948 <configMotor>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configMotor_t, configMotor);
 801d948:	b480      	push	{r7}
 801d94a:	af00      	add	r7, sp, #0
 801d94c:	4b02      	ldr	r3, [pc, #8]	; (801d958 <configMotor+0x10>)
 801d94e:	4618      	mov	r0, r3
 801d950:	46bd      	mov	sp, r7
 801d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d956:	4770      	bx	lr
 801d958:	2000a8ac 	.word	0x2000a8ac

0801d95c <iniciarMotores>:
**  Descripcion:    Inicia los Motores
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarMotores(void)
{
 801d95c:	b590      	push	{r4, r7, lr}
 801d95e:	b08f      	sub	sp, #60	; 0x3c
 801d960:	af02      	add	r7, sp, #8
    memset(motores, 0, sizeof(motores));
 801d962:	2201      	movs	r2, #1
 801d964:	2100      	movs	r1, #0
 801d966:	48a0      	ldr	r0, [pc, #640]	; (801dbe8 <iniciarMotores+0x28c>)
 801d968:	f017 fc9a 	bl	80352a0 <memset>

    bool usarPWMnoSincronizado = false;
 801d96c:	2300      	movs	r3, #0
 801d96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    float sMin = 0;
 801d972:	f04f 0300 	mov.w	r3, #0
 801d976:	62bb      	str	r3, [r7, #40]	; 0x28
    float sLon = 0;
 801d978:	f04f 0300 	mov.w	r3, #0
 801d97c:	627b      	str	r3, [r7, #36]	; 0x24
    esDshot = false;
 801d97e:	4b9b      	ldr	r3, [pc, #620]	; (801dbec <iniciarMotores+0x290>)
 801d980:	2200      	movs	r2, #0
 801d982:	701a      	strb	r2, [r3, #0]

    switch (configMotor()->protocolo) {
 801d984:	f7ff ffe0 	bl	801d948 <configMotor>
 801d988:	4603      	mov	r3, r0
 801d98a:	781b      	ldrb	r3, [r3, #0]
 801d98c:	2b03      	cmp	r3, #3
 801d98e:	d822      	bhi.n	801d9d6 <iniciarMotores+0x7a>
 801d990:	a201      	add	r2, pc, #4	; (adr r2, 801d998 <iniciarMotores+0x3c>)
 801d992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d996:	bf00      	nop
 801d998:	0801d9a9 	.word	0x0801d9a9
 801d99c:	0801d9b9 	.word	0x0801d9b9
 801d9a0:	0801d9c3 	.word	0x0801d9c3
 801d9a4:	0801d9cd 	.word	0x0801d9cd
        case PWM_TIPO_ESTANDAR:
            sMin = 1e-3f;
 801d9a8:	4b91      	ldr	r3, [pc, #580]	; (801dbf0 <iniciarMotores+0x294>)
 801d9aa:	62bb      	str	r3, [r7, #40]	; 0x28
            sLon = 1e-3f;
 801d9ac:	4b90      	ldr	r3, [pc, #576]	; (801dbf0 <iniciarMotores+0x294>)
 801d9ae:	627b      	str	r3, [r7, #36]	; 0x24
            usarPWMnoSincronizado = true;
 801d9b0:	2301      	movs	r3, #1
 801d9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 801d9b6:	e00e      	b.n	801d9d6 <iniciarMotores+0x7a>

        case PWM_TIPO_ONESHOT125:
            sMin = 125e-6f;
 801d9b8:	4b8e      	ldr	r3, [pc, #568]	; (801dbf4 <iniciarMotores+0x298>)
 801d9ba:	62bb      	str	r3, [r7, #40]	; 0x28
            sLon = 125e-6f;
 801d9bc:	4b8d      	ldr	r3, [pc, #564]	; (801dbf4 <iniciarMotores+0x298>)
 801d9be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801d9c0:	e009      	b.n	801d9d6 <iniciarMotores+0x7a>

        case PWM_TIPO_ONESHOT42:
            sMin = 42e-6f;
 801d9c2:	4b8d      	ldr	r3, [pc, #564]	; (801dbf8 <iniciarMotores+0x29c>)
 801d9c4:	62bb      	str	r3, [r7, #40]	; 0x28
            sLon = 42e-6f;
 801d9c6:	4b8c      	ldr	r3, [pc, #560]	; (801dbf8 <iniciarMotores+0x29c>)
 801d9c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801d9ca:	e004      	b.n	801d9d6 <iniciarMotores+0x7a>

        case PWM_TIPO_MULTISHOT:
            sMin = 5e-6f;
 801d9cc:	4b8b      	ldr	r3, [pc, #556]	; (801dbfc <iniciarMotores+0x2a0>)
 801d9ce:	62bb      	str	r3, [r7, #40]	; 0x28
            sLon = 20e-6f;
 801d9d0:	4b8b      	ldr	r3, [pc, #556]	; (801dc00 <iniciarMotores+0x2a4>)
 801d9d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801d9d4:	bf00      	nop
                usarBurstDshot = true;
            break;
#endif
    }

    if (!esDshot) {
 801d9d6:	4b85      	ldr	r3, [pc, #532]	; (801dbec <iniciarMotores+0x290>)
 801d9d8:	781b      	ldrb	r3, [r3, #0]
 801d9da:	f083 0301 	eor.w	r3, r3, #1
 801d9de:	b2db      	uxtb	r3, r3
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d00b      	beq.n	801d9fc <iniciarMotores+0xa0>
        escribirPWM = &escribirPWMestandar;
 801d9e4:	4b87      	ldr	r3, [pc, #540]	; (801dc04 <iniciarMotores+0x2a8>)
 801d9e6:	4a88      	ldr	r2, [pc, #544]	; (801dc08 <iniciarMotores+0x2ac>)
 801d9e8:	601a      	str	r2, [r3, #0]
        actualizarPWM = usarPWMnoSincronizado ? &actualizarPWMnoUsado : &actualizarPWMoneshot;
 801d9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d001      	beq.n	801d9f6 <iniciarMotores+0x9a>
 801d9f2:	4b86      	ldr	r3, [pc, #536]	; (801dc0c <iniciarMotores+0x2b0>)
 801d9f4:	e000      	b.n	801d9f8 <iniciarMotores+0x9c>
 801d9f6:	4b86      	ldr	r3, [pc, #536]	; (801dc10 <iniciarMotores+0x2b4>)
 801d9f8:	4a86      	ldr	r2, [pc, #536]	; (801dc14 <iniciarMotores+0x2b8>)
 801d9fa:	6013      	str	r3, [r2, #0]
    }

    for (uint8_t i = 0; i < NUM_MAX_MOTORES && i < configMotor()->numMotores; i++) {
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801da02:	e131      	b.n	801dc68 <iniciarMotores+0x30c>
        motor_t *driver = &motor[i];
 801da04:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801da08:	4613      	mov	r3, r2
 801da0a:	009b      	lsls	r3, r3, #2
 801da0c:	4413      	add	r3, r2
 801da0e:	009b      	lsls	r3, r3, #2
 801da10:	4a81      	ldr	r2, [pc, #516]	; (801dc18 <iniciarMotores+0x2bc>)
 801da12:	4413      	add	r3, r2
 801da14:	61fb      	str	r3, [r7, #28]

        if (configMotor()->pinMotor[i].pin == 0)
 801da16:	f7ff ff97 	bl	801d948 <configMotor>
 801da1a:	4602      	mov	r2, r0
 801da1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da20:	005b      	lsls	r3, r3, #1
 801da22:	4413      	add	r3, r2
 801da24:	795b      	ldrb	r3, [r3, #5]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d101      	bne.n	801da2e <iniciarMotores+0xd2>
            return false;
 801da2a:	2300      	movs	r3, #0
 801da2c:	e12d      	b.n	801dc8a <iniciarMotores+0x32e>

        // Iniciamos el timer
        if (!iniciarTimer(configMotor()->pinMotor[i].numTimer, configMotor()->pinMotor[i].pin, TIM_USO_MOTOR))
 801da2e:	f7ff ff8b 	bl	801d948 <configMotor>
 801da32:	4602      	mov	r2, r0
 801da34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da38:	005b      	lsls	r3, r3, #1
 801da3a:	4413      	add	r3, r2
 801da3c:	f993 4006 	ldrsb.w	r4, [r3, #6]
 801da40:	f7ff ff82 	bl	801d948 <configMotor>
 801da44:	4602      	mov	r2, r0
 801da46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da4a:	005b      	lsls	r3, r3, #1
 801da4c:	4413      	add	r3, r2
 801da4e:	795b      	ldrb	r3, [r3, #5]
 801da50:	2204      	movs	r2, #4
 801da52:	4619      	mov	r1, r3
 801da54:	4620      	mov	r0, r4
 801da56:	f7fa f8e5 	bl	8017c24 <iniciarTimer>
 801da5a:	4603      	mov	r3, r0
 801da5c:	f083 0301 	eor.w	r3, r3, #1
 801da60:	b2db      	uxtb	r3, r3
 801da62:	2b00      	cmp	r3, #0
 801da64:	d001      	beq.n	801da6a <iniciarMotores+0x10e>
        	return false;
 801da66:	2300      	movs	r3, #0
 801da68:	e10f      	b.n	801dc8a <iniciarMotores+0x32e>

        // Obtenemos el Timer
        bool encontrado;
        tim_t *dTim = timerPorTag(configMotor()->pinMotor[i].pin, &encontrado);
 801da6a:	f7ff ff6d 	bl	801d948 <configMotor>
 801da6e:	4602      	mov	r2, r0
 801da70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da74:	005b      	lsls	r3, r3, #1
 801da76:	4413      	add	r3, r2
 801da78:	795b      	ldrb	r3, [r3, #5]
 801da7a:	1dfa      	adds	r2, r7, #7
 801da7c:	4611      	mov	r1, r2
 801da7e:	4618      	mov	r0, r3
 801da80:	f7fa f9a6 	bl	8017dd0 <timerPorTag>
 801da84:	61b8      	str	r0, [r7, #24]

        if (!encontrado || dTim == NULL) {
 801da86:	79fb      	ldrb	r3, [r7, #7]
 801da88:	f083 0301 	eor.w	r3, r3, #1
 801da8c:	b2db      	uxtb	r3, r3
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d102      	bne.n	801da98 <iniciarMotores+0x13c>
 801da92:	69bb      	ldr	r3, [r7, #24]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d107      	bne.n	801daa8 <iniciarMotores+0x14c>
            // No hay suficientes motores configurados
            escribirPWM = &escribirPWMnoUsado;
 801da98:	4b5a      	ldr	r3, [pc, #360]	; (801dc04 <iniciarMotores+0x2a8>)
 801da9a:	4a60      	ldr	r2, [pc, #384]	; (801dc1c <iniciarMotores+0x2c0>)
 801da9c:	601a      	str	r2, [r3, #0]
            actualizarPWM = &actualizarPWMnoUsado;
 801da9e:	4b5d      	ldr	r3, [pc, #372]	; (801dc14 <iniciarMotores+0x2b8>)
 801daa0:	4a5a      	ldr	r2, [pc, #360]	; (801dc0c <iniciarMotores+0x2b0>)
 801daa2:	601a      	str	r2, [r3, #0]
            return false;
 801daa4:	2300      	movs	r3, #0
 801daa6:	e0f0      	b.n	801dc8a <iniciarMotores+0x32e>
            continue;
        }
#endif

        // Configuramos el GPIO
        configurarIO(dTim->pin.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_LOW, GPIO_NOPULL), dTim->pin.af);
 801daa8:	69bb      	ldr	r3, [r7, #24]
 801daaa:	7a58      	ldrb	r0, [r3, #9]
 801daac:	69bb      	ldr	r3, [r7, #24]
 801daae:	7a9b      	ldrb	r3, [r3, #10]
 801dab0:	461a      	mov	r2, r3
 801dab2:	2102      	movs	r1, #2
 801dab4:	f7f8 fc7c 	bl	80163b0 <configurarIO>

        // El margen de seguridad es de 4 periodos cuando es sincronizado
        const unsigned pwmRateHz = usarPWMnoSincronizado ? configMotor()->frecActualizacionPWM : ceilf(1 / ((sMin + sLon) * 4));
 801dab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d00a      	beq.n	801dad6 <iniciarMotores+0x17a>
 801dac0:	f7ff ff42 	bl	801d948 <configMotor>
 801dac4:	4603      	mov	r3, r0
 801dac6:	885b      	ldrh	r3, [r3, #2]
 801dac8:	ee07 3a90 	vmov	s15, r3
 801dacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dad4:	e015      	b.n	801db02 <iniciarMotores+0x1a6>
 801dad6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801dada:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801dade:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dae2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801dae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801daea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801daf2:	eeb0 0a47 	vmov.f32	s0, s14
 801daf6:	f01a ff85 	bl	8038a04 <ceilf>
 801dafa:	eef0 7a40 	vmov.f32	s15, s0
 801dafe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db02:	edc7 7a05 	vstr	s15, [r7, #20]
        /* Encontramos la frecuencia deseada para la maxima resolucion
         * Se obtiene la frecuencia teorica del contador para la cuenta sea máxima Fc = F_PWM * (ARR + 1) = F_PWM * 0x10000
         * Conocida la frecuencia del contador se obtiene el pescaler Fc = (F_u / (P + 1)) -->  P = Fu / (F_PWM * 0x10000) - 1
         * Se redondea al alza el prescaler P' = Fu / (F_PWM * 0x10000) - 1 + 0,99999   --> P' = (Fu / F_PWM - 1) / 0x10000
         */
        const uint16_t prescaler = ((SystemCoreClock / pwmRateHz) - 1) / 0x10000;
 801db06:	4b46      	ldr	r3, [pc, #280]	; (801dc20 <iniciarMotores+0x2c4>)
 801db08:	681a      	ldr	r2, [r3, #0]
 801db0a:	697b      	ldr	r3, [r7, #20]
 801db0c:	fbb2 f3f3 	udiv	r3, r2, r3
 801db10:	3b01      	subs	r3, #1
 801db12:	0c1b      	lsrs	r3, r3, #16
 801db14:	827b      	strh	r3, [r7, #18]
        const uint32_t hz = SystemCoreClock / (prescaler + 1);
 801db16:	4b42      	ldr	r3, [pc, #264]	; (801dc20 <iniciarMotores+0x2c4>)
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	8a7a      	ldrh	r2, [r7, #18]
 801db1c:	3201      	adds	r2, #1
 801db1e:	fbb3 f3f2 	udiv	r3, r3, r2
 801db22:	60fb      	str	r3, [r7, #12]
        const uint16_t periodo = usarPWMnoSincronizado ? hz / pwmRateHz : 0xFFFF;
 801db24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d005      	beq.n	801db38 <iniciarMotores+0x1dc>
 801db2c:	68fa      	ldr	r2, [r7, #12]
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	fbb2 f3f3 	udiv	r3, r2, r3
 801db34:	b29b      	uxth	r3, r3
 801db36:	e001      	b.n	801db3c <iniciarMotores+0x1e0>
 801db38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801db3c:	817b      	strh	r3, [r7, #10]

        driver->escalaPulso = sLon * hz;
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	ee07 3a90 	vmov	s15, r3
 801db44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801db48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801db4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db50:	69fb      	ldr	r3, [r7, #28]
 801db52:	edc3 7a02 	vstr	s15, [r3, #8]
        driver->offsetPulso = sMin * hz;
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	ee07 3a90 	vmov	s15, r3
 801db5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801db60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801db64:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db68:	69fb      	ldr	r3, [r7, #28]
 801db6a:	edc3 7a03 	vstr	s15, [r3, #12]

        uint16_t pulsoReposo = driver->offsetPulso;
 801db6e:	69fb      	ldr	r3, [r7, #28]
 801db70:	edd3 7a03 	vldr	s15, [r3, #12]
 801db74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db78:	ee17 3a90 	vmov	r3, s15
 801db7c:	813b      	strh	r3, [r7, #8]
        if (!configurarSalidaPWMtimer(dTim, &driver->canal, hz, periodo, pulsoReposo, configMotor()->inversion))
 801db7e:	69fc      	ldr	r4, [r7, #28]
 801db80:	f7ff fee2 	bl	801d948 <configMotor>
 801db84:	4603      	mov	r3, r0
 801db86:	791b      	ldrb	r3, [r3, #4]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	bf14      	ite	ne
 801db8c:	2301      	movne	r3, #1
 801db8e:	2300      	moveq	r3, #0
 801db90:	b2db      	uxtb	r3, r3
 801db92:	897a      	ldrh	r2, [r7, #10]
 801db94:	9301      	str	r3, [sp, #4]
 801db96:	893b      	ldrh	r3, [r7, #8]
 801db98:	9300      	str	r3, [sp, #0]
 801db9a:	4613      	mov	r3, r2
 801db9c:	68fa      	ldr	r2, [r7, #12]
 801db9e:	4621      	mov	r1, r4
 801dba0:	69b8      	ldr	r0, [r7, #24]
 801dba2:	f7fa fa7a 	bl	801809a <configurarSalidaPWMtimer>
 801dba6:	4603      	mov	r3, r0
 801dba8:	f083 0301 	eor.w	r3, r3, #1
 801dbac:	b2db      	uxtb	r3, r3
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d001      	beq.n	801dbb6 <iniciarMotores+0x25a>
        	return false;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	e069      	b.n	801dc8a <iniciarMotores+0x32e>

        bool timerEnUso = false;
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        for (uint8_t j = 0; j < i; j++) {
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 801dbc2:	e034      	b.n	801dc2e <iniciarMotores+0x2d2>
            if (motor[j].canal.tim == driver->canal.tim) {
 801dbc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801dbc8:	4913      	ldr	r1, [pc, #76]	; (801dc18 <iniciarMotores+0x2bc>)
 801dbca:	4613      	mov	r3, r2
 801dbcc:	009b      	lsls	r3, r3, #2
 801dbce:	4413      	add	r3, r2
 801dbd0:	009b      	lsls	r3, r3, #2
 801dbd2:	440b      	add	r3, r1
 801dbd4:	681a      	ldr	r2, [r3, #0]
 801dbd6:	69fb      	ldr	r3, [r7, #28]
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	429a      	cmp	r2, r3
 801dbdc:	d122      	bne.n	801dc24 <iniciarMotores+0x2c8>
                timerEnUso = true;
 801dbde:	2301      	movs	r3, #1
 801dbe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                break;
 801dbe4:	e029      	b.n	801dc3a <iniciarMotores+0x2de>
 801dbe6:	bf00      	nop
 801dbe8:	0801dd5d 	.word	0x0801dd5d
 801dbec:	2000ab20 	.word	0x2000ab20
 801dbf0:	3a83126f 	.word	0x3a83126f
 801dbf4:	3903126f 	.word	0x3903126f
 801dbf8:	38302928 	.word	0x38302928
 801dbfc:	36a7c5ac 	.word	0x36a7c5ac
 801dc00:	37a7c5ac 	.word	0x37a7c5ac
 801dc04:	2000ab18 	.word	0x2000ab18
 801dc08:	0801df61 	.word	0x0801df61
 801dc0c:	0801deb1 	.word	0x0801deb1
 801dc10:	0801dec9 	.word	0x0801dec9
 801dc14:	2000ab1c 	.word	0x2000ab1c
 801dc18:	2000aa28 	.word	0x2000aa28
 801dc1c:	0801df45 	.word	0x0801df45
 801dc20:	2000cc48 	.word	0x2000cc48
        for (uint8_t j = 0; j < i; j++) {
 801dc24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801dc28:	3301      	adds	r3, #1
 801dc2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 801dc2e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801dc32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dc36:	429a      	cmp	r2, r3
 801dc38:	d3c4      	bcc.n	801dbc4 <iniciarMotores+0x268>
            }
        }
        driver->forzarOverflow = !timerEnUso;
 801dc3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	bf14      	ite	ne
 801dc42:	2301      	movne	r3, #1
 801dc44:	2300      	moveq	r3, #0
 801dc46:	b2db      	uxtb	r3, r3
 801dc48:	f083 0301 	eor.w	r3, r3, #1
 801dc4c:	b2db      	uxtb	r3, r3
 801dc4e:	f003 0301 	and.w	r3, r3, #1
 801dc52:	b2da      	uxtb	r2, r3
 801dc54:	69fb      	ldr	r3, [r7, #28]
 801dc56:	741a      	strb	r2, [r3, #16]
        driver->habilitado = true;
 801dc58:	69fb      	ldr	r3, [r7, #28]
 801dc5a:	2201      	movs	r2, #1
 801dc5c:	745a      	strb	r2, [r3, #17]
    for (uint8_t i = 0; i < NUM_MAX_MOTORES && i < configMotor()->numMotores; i++) {
 801dc5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dc62:	3301      	adds	r3, #1
 801dc64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801dc68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dc6c:	2b0b      	cmp	r3, #11
 801dc6e:	d808      	bhi.n	801dc82 <iniciarMotores+0x326>
 801dc70:	f7ff fe6a 	bl	801d948 <configMotor>
 801dc74:	4603      	mov	r3, r0
 801dc76:	785b      	ldrb	r3, [r3, #1]
 801dc78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801dc7c:	429a      	cmp	r2, r3
 801dc7e:	f4ff aec1 	bcc.w	801da04 <iniciarMotores+0xa8>
    }

    motoresIniciados = true;
 801dc82:	4b04      	ldr	r3, [pc, #16]	; (801dc94 <iniciarMotores+0x338>)
 801dc84:	2201      	movs	r2, #1
 801dc86:	701a      	strb	r2, [r3, #0]
    return true;
 801dc88:	2301      	movs	r3, #1
}
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	3734      	adds	r7, #52	; 0x34
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	bd90      	pop	{r4, r7, pc}
 801dc92:	bf00      	nop
 801dc94:	2000ab22 	.word	0x2000ab22

0801dc98 <deshabilitarMotores>:
**  Descripcion:    Deshabilita los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void deshabilitarMotores(void)
{
 801dc98:	b580      	push	{r7, lr}
 801dc9a:	b082      	sub	sp, #8
 801dc9c:	af00      	add	r7, sp, #0
	if (!esDshot) {
 801dc9e:	4b16      	ldr	r3, [pc, #88]	; (801dcf8 <deshabilitarMotores+0x60>)
 801dca0:	781b      	ldrb	r3, [r3, #0]
 801dca2:	f083 0301 	eor.w	r3, r3, #1
 801dca6:	b2db      	uxtb	r3, r3
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d01d      	beq.n	801dce8 <deshabilitarMotores+0x50>
		uint8_t numeroMotores = numMotores();
 801dcac:	f7fd fade 	bl	801b26c <numMotores>
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	71bb      	strb	r3, [r7, #6]
        for (uint8_t i = 0; i < numeroMotores; i++) {
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	71fb      	strb	r3, [r7, #7]
 801dcb8:	e012      	b.n	801dce0 <deshabilitarMotores+0x48>
            motor_t *driver = &motor[i];
 801dcba:	79fa      	ldrb	r2, [r7, #7]
 801dcbc:	4613      	mov	r3, r2
 801dcbe:	009b      	lsls	r3, r3, #2
 801dcc0:	4413      	add	r3, r2
 801dcc2:	009b      	lsls	r3, r3, #2
 801dcc4:	4a0d      	ldr	r2, [pc, #52]	; (801dcfc <deshabilitarMotores+0x64>)
 801dcc6:	4413      	add	r3, r2
 801dcc8:	603b      	str	r3, [r7, #0]
            // Reseteamos el registro CCR
            if (driver->canal.ccr)
 801dcca:	683b      	ldr	r3, [r7, #0]
 801dccc:	685b      	ldr	r3, [r3, #4]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d003      	beq.n	801dcda <deshabilitarMotores+0x42>
                *driver->canal.ccr = 0;
 801dcd2:	683b      	ldr	r3, [r7, #0]
 801dcd4:	685b      	ldr	r3, [r3, #4]
 801dcd6:	2200      	movs	r2, #0
 801dcd8:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < numeroMotores; i++) {
 801dcda:	79fb      	ldrb	r3, [r7, #7]
 801dcdc:	3301      	adds	r3, #1
 801dcde:	71fb      	strb	r3, [r7, #7]
 801dce0:	79fa      	ldrb	r2, [r7, #7]
 801dce2:	79bb      	ldrb	r3, [r7, #6]
 801dce4:	429a      	cmp	r2, r3
 801dce6:	d3e8      	bcc.n	801dcba <deshabilitarMotores+0x22>
        }
	}

    motoresHabilitados = false;
 801dce8:	4b05      	ldr	r3, [pc, #20]	; (801dd00 <deshabilitarMotores+0x68>)
 801dcea:	2200      	movs	r2, #0
 801dcec:	701a      	strb	r2, [r3, #0]
}
 801dcee:	bf00      	nop
 801dcf0:	3708      	adds	r7, #8
 801dcf2:	46bd      	mov	sp, r7
 801dcf4:	bd80      	pop	{r7, pc}
 801dcf6:	bf00      	nop
 801dcf8:	2000ab20 	.word	0x2000ab20
 801dcfc:	2000aa28 	.word	0x2000aa28
 801dd00:	2000ab21 	.word	0x2000ab21

0801dd04 <habilitarMotores>:
**  Descripcion:    Habilita los motores
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void habilitarMotores(void)
{
 801dd04:	b480      	push	{r7}
 801dd06:	af00      	add	r7, sp, #0
	motoresHabilitados = motoresIniciados && (escribirPWM != &escribirPWMnoUsado);
 801dd08:	4b0a      	ldr	r3, [pc, #40]	; (801dd34 <habilitarMotores+0x30>)
 801dd0a:	781b      	ldrb	r3, [r3, #0]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d006      	beq.n	801dd1e <habilitarMotores+0x1a>
 801dd10:	4b09      	ldr	r3, [pc, #36]	; (801dd38 <habilitarMotores+0x34>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4a09      	ldr	r2, [pc, #36]	; (801dd3c <habilitarMotores+0x38>)
 801dd16:	4293      	cmp	r3, r2
 801dd18:	d001      	beq.n	801dd1e <habilitarMotores+0x1a>
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	e000      	b.n	801dd20 <habilitarMotores+0x1c>
 801dd1e:	2300      	movs	r3, #0
 801dd20:	f003 0301 	and.w	r3, r3, #1
 801dd24:	b2da      	uxtb	r2, r3
 801dd26:	4b06      	ldr	r3, [pc, #24]	; (801dd40 <habilitarMotores+0x3c>)
 801dd28:	701a      	strb	r2, [r3, #0]
}
 801dd2a:	bf00      	nop
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd32:	4770      	bx	lr
 801dd34:	2000ab22 	.word	0x2000ab22
 801dd38:	2000ab18 	.word	0x2000ab18
 801dd3c:	0801df45 	.word	0x0801df45
 801dd40:	2000ab21 	.word	0x2000ab21

0801dd44 <estanMotoresHabilitados>:
**  Descripcion:    Comprueba si los motores estan habilitados
**  Parametros:     Ninguno
**  Retorno:        True si habilitados
****************************************************************************************/
bool estanMotoresHabilitados(void)
{
 801dd44:	b480      	push	{r7}
 801dd46:	af00      	add	r7, sp, #0
    return motoresHabilitados;
 801dd48:	4b03      	ldr	r3, [pc, #12]	; (801dd58 <estanMotoresHabilitados+0x14>)
 801dd4a:	781b      	ldrb	r3, [r3, #0]
}
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd54:	4770      	bx	lr
 801dd56:	bf00      	nop
 801dd58:	2000ab21 	.word	0x2000ab21

0801dd5c <motores>:
**  Descripcion:    Retorna la direccion de la varible motores
**  Parametros:     Ninguno
**  Retorno:        Direccion de la variable
****************************************************************************************/
motor_t *motores(void)
{
 801dd5c:	b480      	push	{r7}
 801dd5e:	af00      	add	r7, sp, #0
    return motor;
 801dd60:	4b02      	ldr	r3, [pc, #8]	; (801dd6c <motores+0x10>)
}
 801dd62:	4618      	mov	r0, r3
 801dd64:	46bd      	mov	sp, r7
 801dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6a:	4770      	bx	lr
 801dd6c:	2000aa28 	.word	0x2000aa28

0801dd70 <escribirMotor>:
**  Descripcion:    Escribe un valor en un motor
**  Parametros:     Motor a escribir, valor
**  Retorno:        Ninguno
****************************************************************************************/
void escribirMotor(uint8_t indice, float valor)
{
 801dd70:	b580      	push	{r7, lr}
 801dd72:	b082      	sub	sp, #8
 801dd74:	af00      	add	r7, sp, #0
 801dd76:	4603      	mov	r3, r0
 801dd78:	ed87 0a00 	vstr	s0, [r7]
 801dd7c:	71fb      	strb	r3, [r7, #7]
	if (estanMotoresHabilitados()) {
 801dd7e:	f7ff ffe1 	bl	801dd44 <estanMotoresHabilitados>
 801dd82:	4603      	mov	r3, r0
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d008      	beq.n	801dd9a <escribirMotor+0x2a>
        escribirPWM(indice, valor);
 801dd88:	4b06      	ldr	r3, [pc, #24]	; (801dda4 <escribirMotor+0x34>)
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	79fa      	ldrb	r2, [r7, #7]
 801dd8e:	ed97 0a00 	vldr	s0, [r7]
 801dd92:	4610      	mov	r0, r2
 801dd94:	4798      	blx	r3
        actualizarMotores();
 801dd96:	f000 f853 	bl	801de40 <actualizarMotores>
	}
}
 801dd9a:	bf00      	nop
 801dd9c:	3708      	adds	r7, #8
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	bd80      	pop	{r7, pc}
 801dda2:	bf00      	nop
 801dda4:	2000ab18 	.word	0x2000ab18

0801dda8 <escribirMotores>:
**  Descripcion:    Escribe un valor en todos los motores
**  Parametros:     Valor a escribir
**  Retorno:        Ninguno
****************************************************************************************/
void escribirMotores(float *valor)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b084      	sub	sp, #16
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]

    if (estanMotoresHabilitados()) {
 801ddb0:	f7ff ffc8 	bl	801dd44 <estanMotoresHabilitados>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d01b      	beq.n	801ddf2 <escribirMotores+0x4a>
        uint8_t numeroMotores = numMotores();
 801ddba:	f7fd fa57 	bl	801b26c <numMotores>
 801ddbe:	4603      	mov	r3, r0
 801ddc0:	73bb      	strb	r3, [r7, #14]
        for (uint8_t i = 0; i < numeroMotores; i++)
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	73fb      	strb	r3, [r7, #15]
 801ddc6:	e00e      	b.n	801dde6 <escribirMotores+0x3e>
    	    escribirMotor(i, valor[i]);
 801ddc8:	7bfb      	ldrb	r3, [r7, #15]
 801ddca:	009b      	lsls	r3, r3, #2
 801ddcc:	687a      	ldr	r2, [r7, #4]
 801ddce:	4413      	add	r3, r2
 801ddd0:	edd3 7a00 	vldr	s15, [r3]
 801ddd4:	7bfb      	ldrb	r3, [r7, #15]
 801ddd6:	eeb0 0a67 	vmov.f32	s0, s15
 801ddda:	4618      	mov	r0, r3
 801dddc:	f7ff ffc8 	bl	801dd70 <escribirMotor>
        for (uint8_t i = 0; i < numeroMotores; i++)
 801dde0:	7bfb      	ldrb	r3, [r7, #15]
 801dde2:	3301      	adds	r3, #1
 801dde4:	73fb      	strb	r3, [r7, #15]
 801dde6:	7bfa      	ldrb	r2, [r7, #15]
 801dde8:	7bbb      	ldrb	r3, [r7, #14]
 801ddea:	429a      	cmp	r2, r3
 801ddec:	d3ec      	bcc.n	801ddc8 <escribirMotores+0x20>

        actualizarMotores();
 801ddee:	f000 f827 	bl	801de40 <actualizarMotores>
    }
}
 801ddf2:	bf00      	nop
 801ddf4:	3710      	adds	r7, #16
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	bd80      	pop	{r7, pc}

0801ddfa <escribirValorTodosMotores>:
**  Descripcion:    Escribe un valor en todos los motores
**  Parametros:     Valor a escribir
**  Retorno:        Ninguno
****************************************************************************************/
void escribirValorTodosMotores(float valor)
{
 801ddfa:	b580      	push	{r7, lr}
 801ddfc:	b084      	sub	sp, #16
 801ddfe:	af00      	add	r7, sp, #0
 801de00:	ed87 0a01 	vstr	s0, [r7, #4]
    if (estanMotoresHabilitados()) {
 801de04:	f7ff ff9e 	bl	801dd44 <estanMotoresHabilitados>
 801de08:	4603      	mov	r3, r0
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d013      	beq.n	801de36 <escribirValorTodosMotores+0x3c>
        uint8_t numeroMotores = numMotores();
 801de0e:	f7fd fa2d 	bl	801b26c <numMotores>
 801de12:	4603      	mov	r3, r0
 801de14:	73bb      	strb	r3, [r7, #14]
        for (uint8_t i = 0; i < numeroMotores; i++)
 801de16:	2300      	movs	r3, #0
 801de18:	73fb      	strb	r3, [r7, #15]
 801de1a:	e008      	b.n	801de2e <escribirValorTodosMotores+0x34>
    	    escribirMotor(i, valor);
 801de1c:	7bfb      	ldrb	r3, [r7, #15]
 801de1e:	ed97 0a01 	vldr	s0, [r7, #4]
 801de22:	4618      	mov	r0, r3
 801de24:	f7ff ffa4 	bl	801dd70 <escribirMotor>
        for (uint8_t i = 0; i < numeroMotores; i++)
 801de28:	7bfb      	ldrb	r3, [r7, #15]
 801de2a:	3301      	adds	r3, #1
 801de2c:	73fb      	strb	r3, [r7, #15]
 801de2e:	7bfa      	ldrb	r2, [r7, #15]
 801de30:	7bbb      	ldrb	r3, [r7, #14]
 801de32:	429a      	cmp	r2, r3
 801de34:	d3f2      	bcc.n	801de1c <escribirValorTodosMotores+0x22>
    }
}
 801de36:	bf00      	nop
 801de38:	3710      	adds	r7, #16
 801de3a:	46bd      	mov	sp, r7
 801de3c:	bd80      	pop	{r7, pc}
	...

0801de40 <actualizarMotores>:
**  Descripcion:    Actualiza el valor del PWM
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMotores(void)
{
 801de40:	b598      	push	{r3, r4, r7, lr}
 801de42:	af00      	add	r7, sp, #0

    if ((micros() > 30000000) && iniR == false) {
 801de44:	f7f9 fe48 	bl	8017ad8 <micros>
 801de48:	4603      	mov	r3, r0
 801de4a:	4a14      	ldr	r2, [pc, #80]	; (801de9c <actualizarMotores+0x5c>)
 801de4c:	4293      	cmp	r3, r2
 801de4e:	d90c      	bls.n	801de6a <actualizarMotores+0x2a>
 801de50:	4b13      	ldr	r3, [pc, #76]	; (801dea0 <actualizarMotores+0x60>)
 801de52:	781b      	ldrb	r3, [r3, #0]
 801de54:	f083 0301 	eor.w	r3, r3, #1
 801de58:	b2db      	uxtb	r3, r3
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d005      	beq.n	801de6a <actualizarMotores+0x2a>
    	iniR = true;
 801de5e:	4b10      	ldr	r3, [pc, #64]	; (801dea0 <actualizarMotores+0x60>)
 801de60:	2201      	movs	r2, #1
 801de62:	701a      	strb	r2, [r3, #0]
    	cambiarID = true;
 801de64:	4b0f      	ldr	r3, [pc, #60]	; (801dea4 <actualizarMotores+0x64>)
 801de66:	2201      	movs	r2, #1
 801de68:	701a      	strb	r2, [r3, #0]
    }

    if (cambiarID) {
 801de6a:	4b0e      	ldr	r3, [pc, #56]	; (801dea4 <actualizarMotores+0x64>)
 801de6c:	781b      	ldrb	r3, [r3, #0]
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d00a      	beq.n	801de88 <actualizarMotores+0x48>
    	cambiarID = false;
 801de72:	4b0c      	ldr	r3, [pc, #48]	; (801dea4 <actualizarMotores+0x64>)
 801de74:	2200      	movs	r2, #0
 801de76:	701a      	strb	r2, [r3, #0]

		reaction.tiempo = micros();
 801de78:	f7f9 fe2e 	bl	8017ad8 <micros>
 801de7c:	4603      	mov	r3, r0
 801de7e:	4a0a      	ldr	r2, [pc, #40]	; (801dea8 <actualizarMotores+0x68>)
 801de80:	6013      	str	r3, [r2, #0]
		reaction.id = 'A';
 801de82:	4b09      	ldr	r3, [pc, #36]	; (801dea8 <actualizarMotores+0x68>)
 801de84:	2241      	movs	r2, #65	; 0x41
 801de86:	711a      	strb	r2, [r3, #4]
    }

    actualizarPWM(numMotores());
 801de88:	4b08      	ldr	r3, [pc, #32]	; (801deac <actualizarMotores+0x6c>)
 801de8a:	681c      	ldr	r4, [r3, #0]
 801de8c:	f7fd f9ee 	bl	801b26c <numMotores>
 801de90:	4603      	mov	r3, r0
 801de92:	4618      	mov	r0, r3
 801de94:	47a0      	blx	r4





}
 801de96:	bf00      	nop
 801de98:	bd98      	pop	{r3, r4, r7, pc}
 801de9a:	bf00      	nop
 801de9c:	01c9c380 	.word	0x01c9c380
 801dea0:	2000c685 	.word	0x2000c685
 801dea4:	2000c684 	.word	0x2000c684
 801dea8:	2000c67c 	.word	0x2000c67c
 801deac:	2000ab1c 	.word	0x2000ab1c

0801deb0 <actualizarPWMnoUsado>:
**  Descripcion:    Funcion vacia
**  Parametros:     Numero de motores
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarPWMnoUsado(uint8_t numMotores)
{
 801deb0:	b480      	push	{r7}
 801deb2:	b083      	sub	sp, #12
 801deb4:	af00      	add	r7, sp, #0
 801deb6:	4603      	mov	r3, r0
 801deb8:	71fb      	strb	r3, [r7, #7]
    UNUSED(numMotores);
}
 801deba:	bf00      	nop
 801debc:	370c      	adds	r7, #12
 801debe:	46bd      	mov	sp, r7
 801dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec4:	4770      	bx	lr
	...

0801dec8 <actualizarPWMoneshot>:
**  Descripcion:    Funcion vacia
**  Parametros:     Numero de motores
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarPWMoneshot(uint8_t numMotores)
{
 801dec8:	b580      	push	{r7, lr}
 801deca:	b086      	sub	sp, #24
 801decc:	af00      	add	r7, sp, #0
 801dece:	4603      	mov	r3, r0
 801ded0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < numMotores; i++) {
 801ded2:	2300      	movs	r3, #0
 801ded4:	75fb      	strb	r3, [r7, #23]
 801ded6:	e029      	b.n	801df2c <actualizarPWMoneshot+0x64>
        motor_t *driver = &motor[i];
 801ded8:	7dfa      	ldrb	r2, [r7, #23]
 801deda:	4613      	mov	r3, r2
 801dedc:	009b      	lsls	r3, r3, #2
 801dede:	4413      	add	r3, r2
 801dee0:	009b      	lsls	r3, r3, #2
 801dee2:	4a17      	ldr	r2, [pc, #92]	; (801df40 <actualizarPWMoneshot+0x78>)
 801dee4:	4413      	add	r3, r2
 801dee6:	613b      	str	r3, [r7, #16]

        if (driver->forzarOverflow) {
 801dee8:	693b      	ldr	r3, [r7, #16]
 801deea:	7c1b      	ldrb	r3, [r3, #16]
 801deec:	2b00      	cmp	r3, #0
 801deee:	d016      	beq.n	801df1e <actualizarPWMoneshot+0x56>
            bool encontrado;
            tim_t *dTim = timerPorTag(configMotor()->pinMotor[i].pin, &encontrado);
 801def0:	f7ff fd2a 	bl	801d948 <configMotor>
 801def4:	4602      	mov	r2, r0
 801def6:	7dfb      	ldrb	r3, [r7, #23]
 801def8:	005b      	lsls	r3, r3, #1
 801defa:	4413      	add	r3, r2
 801defc:	795b      	ldrb	r3, [r3, #5]
 801defe:	f107 020b 	add.w	r2, r7, #11
 801df02:	4611      	mov	r1, r2
 801df04:	4618      	mov	r0, r3
 801df06:	f7f9 ff63 	bl	8017dd0 <timerPorTag>
 801df0a:	60f8      	str	r0, [r7, #12]

            if (encontrado && dTim != NULL)
 801df0c:	7afb      	ldrb	r3, [r7, #11]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d005      	beq.n	801df1e <actualizarPWMoneshot+0x56>
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d002      	beq.n	801df1e <actualizarPWMoneshot+0x56>
                forzarOverflowTimer(dTim);
 801df18:	68f8      	ldr	r0, [r7, #12]
 801df1a:	f7fa fac0 	bl	801849e <forzarOverflowTimer>
        }

        *driver->canal.ccr = 0;
 801df1e:	693b      	ldr	r3, [r7, #16]
 801df20:	685b      	ldr	r3, [r3, #4]
 801df22:	2200      	movs	r2, #0
 801df24:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < numMotores; i++) {
 801df26:	7dfb      	ldrb	r3, [r7, #23]
 801df28:	3301      	adds	r3, #1
 801df2a:	75fb      	strb	r3, [r7, #23]
 801df2c:	7dfa      	ldrb	r2, [r7, #23]
 801df2e:	79fb      	ldrb	r3, [r7, #7]
 801df30:	429a      	cmp	r2, r3
 801df32:	d3d1      	bcc.n	801ded8 <actualizarPWMoneshot+0x10>
    }
}
 801df34:	bf00      	nop
 801df36:	bf00      	nop
 801df38:	3718      	adds	r7, #24
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}
 801df3e:	bf00      	nop
 801df40:	2000aa28 	.word	0x2000aa28

0801df44 <escribirPWMnoUsado>:
**  Descripcion:    Funcion vacia para los motores no utilizados
**  Parametros:     Motor a escribir, valor
**  Retorno:        Ninguno
****************************************************************************************/
void escribirPWMnoUsado(uint8_t indice, float valor)
{
 801df44:	b480      	push	{r7}
 801df46:	b083      	sub	sp, #12
 801df48:	af00      	add	r7, sp, #0
 801df4a:	4603      	mov	r3, r0
 801df4c:	ed87 0a00 	vstr	s0, [r7]
 801df50:	71fb      	strb	r3, [r7, #7]
    UNUSED(indice);
    UNUSED(valor);
}
 801df52:	bf00      	nop
 801df54:	370c      	adds	r7, #12
 801df56:	46bd      	mov	sp, r7
 801df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5c:	4770      	bx	lr
	...

0801df60 <escribirPWMestandar>:
**  Descripcion:    Funcion de escritura de los motores
**  Parametros:     Motor a escribir, valor entre 0 y 1
**  Retorno:        Ninguno
****************************************************************************************/
void escribirPWMestandar(uint8_t indice, float valor)
{
 801df60:	b580      	push	{r7, lr}
 801df62:	b084      	sub	sp, #16
 801df64:	af00      	add	r7, sp, #0
 801df66:	4603      	mov	r3, r0
 801df68:	ed87 0a00 	vstr	s0, [r7]
 801df6c:	71fb      	strb	r3, [r7, #7]
	motor_t *driver = &motor[indice];
 801df6e:	79fa      	ldrb	r2, [r7, #7]
 801df70:	4613      	mov	r3, r2
 801df72:	009b      	lsls	r3, r3, #2
 801df74:	4413      	add	r3, r2
 801df76:	009b      	lsls	r3, r3, #2
 801df78:	4a0d      	ldr	r2, [pc, #52]	; (801dfb0 <escribirPWMestandar+0x50>)
 801df7a:	4413      	add	r3, r2
 801df7c:	60fb      	str	r3, [r7, #12]

    // El valor de entrada debe estar entre 0-1
    *driver->canal.ccr = lrintf((valor * driver->escalaPulso) + driver->offsetPulso);
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	ed93 7a02 	vldr	s14, [r3, #8]
 801df84:	edd7 7a00 	vldr	s15, [r7]
 801df88:	ee27 7a27 	vmul.f32	s14, s14, s15
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	edd3 7a03 	vldr	s15, [r3, #12]
 801df92:	ee77 7a27 	vadd.f32	s15, s14, s15
 801df96:	eeb0 0a67 	vmov.f32	s0, s15
 801df9a:	f01a fe4f 	bl	8038c3c <lrintf>
 801df9e:	4602      	mov	r2, r0
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	685b      	ldr	r3, [r3, #4]
 801dfa4:	601a      	str	r2, [r3, #0]
}
 801dfa6:	bf00      	nop
 801dfa8:	3710      	adds	r7, #16
 801dfaa:	46bd      	mov	sp, r7
 801dfac:	bd80      	pop	{r7, pc}
 801dfae:	bf00      	nop
 801dfb0:	2000aa28 	.word	0x2000aa28

0801dfb4 <iniciarPID>:
**  Parametros:     PID, ganancia proporcional, integral, derivada, feedforward, limite de la parte integral
**                  limite de la salida
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarPID(pid_t *pid, float kp, float ki, float kd, float kff, float limIntegral, float limSalida)
{
 801dfb4:	b480      	push	{r7}
 801dfb6:	b089      	sub	sp, #36	; 0x24
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	61f8      	str	r0, [r7, #28]
 801dfbc:	ed87 0a06 	vstr	s0, [r7, #24]
 801dfc0:	edc7 0a05 	vstr	s1, [r7, #20]
 801dfc4:	ed87 1a04 	vstr	s2, [r7, #16]
 801dfc8:	edc7 1a03 	vstr	s3, [r7, #12]
 801dfcc:	ed87 2a02 	vstr	s4, [r7, #8]
 801dfd0:	edc7 2a01 	vstr	s5, [r7, #4]
	pid->integral = 0.0;
 801dfd4:	69fb      	ldr	r3, [r7, #28]
 801dfd6:	f04f 0200 	mov.w	r2, #0
 801dfda:	619a      	str	r2, [r3, #24]

    pid->p.kp = kp;
 801dfdc:	69fb      	ldr	r3, [r7, #28]
 801dfde:	69ba      	ldr	r2, [r7, #24]
 801dfe0:	601a      	str	r2, [r3, #0]
    pid->p.ki = ki;
 801dfe2:	69fb      	ldr	r3, [r7, #28]
 801dfe4:	697a      	ldr	r2, [r7, #20]
 801dfe6:	605a      	str	r2, [r3, #4]
    pid->p.kd = kd;
 801dfe8:	69fb      	ldr	r3, [r7, #28]
 801dfea:	693a      	ldr	r2, [r7, #16]
 801dfec:	609a      	str	r2, [r3, #8]
    pid->p.kff = kff;
 801dfee:	69fb      	ldr	r3, [r7, #28]
 801dff0:	68fa      	ldr	r2, [r7, #12]
 801dff2:	60da      	str	r2, [r3, #12]
    pid->p.limIntegral = limIntegral;
 801dff4:	69fb      	ldr	r3, [r7, #28]
 801dff6:	68ba      	ldr	r2, [r7, #8]
 801dff8:	611a      	str	r2, [r3, #16]
    pid->p.limSalida = limSalida;
 801dffa:	69fb      	ldr	r3, [r7, #28]
 801dffc:	687a      	ldr	r2, [r7, #4]
 801dffe:	615a      	str	r2, [r3, #20]
}
 801e000:	bf00      	nop
 801e002:	3724      	adds	r7, #36	; 0x24
 801e004:	46bd      	mov	sp, r7
 801e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e00a:	4770      	bx	lr

0801e00c <actualizarPID>:
**  Descripcion:    Actualiza el PID
**  Parametros:     PID, setpoint, realimentacion, derivada de la realimentacion, incremento de tiempo, habilitacion de la parte integral
**  Retorno:        Accion de control
****************************************************************************************/
float actualizarPID(pid_t *pid, float setPoint, float sensor, float sensorDerivada, float dt, bool habIntegral)
{
 801e00c:	b580      	push	{r7, lr}
 801e00e:	b08a      	sub	sp, #40	; 0x28
 801e010:	af00      	add	r7, sp, #0
 801e012:	6178      	str	r0, [r7, #20]
 801e014:	ed87 0a04 	vstr	s0, [r7, #16]
 801e018:	edc7 0a03 	vstr	s1, [r7, #12]
 801e01c:	ed87 1a02 	vstr	s2, [r7, #8]
 801e020:	edc7 1a01 	vstr	s3, [r7, #4]
 801e024:	460b      	mov	r3, r1
 801e026:	70fb      	strb	r3, [r7, #3]
    float salida;
    float error = setPoint - sensor;
 801e028:	ed97 7a04 	vldr	s14, [r7, #16]
 801e02c:	edd7 7a03 	vldr	s15, [r7, #12]
 801e030:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e034:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    salida = error * pid->p.kp + pid->integral - sensorDerivada * pid->p.kd + setPoint * pid->p.kff;
 801e038:	697b      	ldr	r3, [r7, #20]
 801e03a:	ed93 7a00 	vldr	s14, [r3]
 801e03e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e042:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e046:	697b      	ldr	r3, [r7, #20]
 801e048:	edd3 7a06 	vldr	s15, [r3, #24]
 801e04c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e050:	697b      	ldr	r3, [r7, #20]
 801e052:	edd3 6a02 	vldr	s13, [r3, #8]
 801e056:	edd7 7a02 	vldr	s15, [r7, #8]
 801e05a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e05e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e062:	697b      	ldr	r3, [r7, #20]
 801e064:	edd3 6a03 	vldr	s13, [r3, #12]
 801e068:	edd7 7a04 	vldr	s15, [r7, #16]
 801e06c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e070:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e074:	edc7 7a08 	vstr	s15, [r7, #32]

    if (habIntegral) {
 801e078:	78fb      	ldrb	r3, [r7, #3]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d026      	beq.n	801e0cc <actualizarPID+0xc0>
        float integral = pid->integral + error * dt * pid->p.ki;
 801e07e:	697b      	ldr	r3, [r7, #20]
 801e080:	ed93 7a06 	vldr	s14, [r3, #24]
 801e084:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801e088:	edd7 7a01 	vldr	s15, [r7, #4]
 801e08c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	edd3 7a01 	vldr	s15, [r3, #4]
 801e096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e09a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e09e:	edc7 7a07 	vstr	s15, [r7, #28]
        pid->integral = limitarFloat(integral, -pid->p.limIntegral, pid->p.limIntegral);
 801e0a2:	697b      	ldr	r3, [r7, #20]
 801e0a4:	edd3 7a04 	vldr	s15, [r3, #16]
 801e0a8:	eef1 7a67 	vneg.f32	s15, s15
 801e0ac:	697b      	ldr	r3, [r7, #20]
 801e0ae:	ed93 7a04 	vldr	s14, [r3, #16]
 801e0b2:	eeb0 1a47 	vmov.f32	s2, s14
 801e0b6:	eef0 0a67 	vmov.f32	s1, s15
 801e0ba:	ed97 0a07 	vldr	s0, [r7, #28]
 801e0be:	f7f5 faae 	bl	801361e <limitarFloat>
 801e0c2:	eef0 7a40 	vmov.f32	s15, s0
 801e0c6:	697b      	ldr	r3, [r7, #20]
 801e0c8:	edc3 7a06 	vstr	s15, [r3, #24]

    }

    return limitarFloat(salida, -pid->p.limSalida, pid->p.limSalida);
 801e0cc:	697b      	ldr	r3, [r7, #20]
 801e0ce:	edd3 7a05 	vldr	s15, [r3, #20]
 801e0d2:	eef1 7a67 	vneg.f32	s15, s15
 801e0d6:	697b      	ldr	r3, [r7, #20]
 801e0d8:	ed93 7a05 	vldr	s14, [r3, #20]
 801e0dc:	eeb0 1a47 	vmov.f32	s2, s14
 801e0e0:	eef0 0a67 	vmov.f32	s1, s15
 801e0e4:	ed97 0a08 	vldr	s0, [r7, #32]
 801e0e8:	f7f5 fa99 	bl	801361e <limitarFloat>
 801e0ec:	eef0 7a40 	vmov.f32	s15, s0
}
 801e0f0:	eeb0 0a67 	vmov.f32	s0, s15
 801e0f4:	3728      	adds	r7, #40	; 0x28
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}

0801e0fa <resetearIntegralPID>:
**  Descripcion:    Resetea la parte integral
**  Parametros:     PID
**  Retorno:        Ninguno
****************************************************************************************/
void resetearIntegralPID(pid_t *pid)
{
 801e0fa:	b480      	push	{r7}
 801e0fc:	b083      	sub	sp, #12
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
	pid->integral = 0.0;
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f04f 0200 	mov.w	r2, #0
 801e108:	619a      	str	r2, [r3, #24]
}
 801e10a:	bf00      	nop
 801e10c:	370c      	adds	r7, #12
 801e10e:	46bd      	mov	sp, r7
 801e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e114:	4770      	bx	lr
	...

0801e118 <configRadio>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_GP(configRadio_t, configRadio);
 801e118:	b480      	push	{r7}
 801e11a:	af00      	add	r7, sp, #0
 801e11c:	4b02      	ldr	r3, [pc, #8]	; (801e128 <configRadio+0x10>)
 801e11e:	4618      	mov	r0, r3
 801e120:	46bd      	mov	sp, r7
 801e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e126:	4770      	bx	lr
 801e128:	2000a8e0 	.word	0x2000a8e0

0801e12c <iniciarIBUS>:
**  Descripcion:    Reseteamos las variables del IBUS y abrimos el puerto serie
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarIBUS(void)
{
 801e12c:	b580      	push	{r7, lr}
 801e12e:	b082      	sub	sp, #8
 801e130:	af00      	add	r7, sp, #0
    memset(&ibus, 0, sizeof(ibus_t));
 801e132:	224c      	movs	r2, #76	; 0x4c
 801e134:	2100      	movs	r1, #0
 801e136:	4811      	ldr	r0, [pc, #68]	; (801e17c <iniciarIBUS+0x50>)
 801e138:	f017 f8b2 	bl	80352a0 <memset>

    // Arrancamos la UART
    configIniUART_t config;
    config.baudrate = 115200;
 801e13c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801e140:	603b      	str	r3, [r7, #0]
    config.lWord = UART_LONGITUD_WORD_8;
 801e142:	2301      	movs	r3, #1
 801e144:	713b      	strb	r3, [r7, #4]
    config.paridad = UART_NO_PARIDAD;
 801e146:	2300      	movs	r3, #0
 801e148:	717b      	strb	r3, [r7, #5]
    config.stop = UART_BIT_STOP_1;
 801e14a:	2300      	movs	r3, #0
 801e14c:	71bb      	strb	r3, [r7, #6]
    if (!iniciarUART(configRadio()->dispUART, config, procesarByteIBUS))
 801e14e:	f7ff ffe3 	bl	801e118 <configRadio>
 801e152:	4603      	mov	r3, r0
 801e154:	f993 0001 	ldrsb.w	r0, [r3, #1]
 801e158:	4b09      	ldr	r3, [pc, #36]	; (801e180 <iniciarIBUS+0x54>)
 801e15a:	463a      	mov	r2, r7
 801e15c:	ca06      	ldmia	r2, {r1, r2}
 801e15e:	f7fa fdf9 	bl	8018d54 <iniciarUART>
 801e162:	4603      	mov	r3, r0
 801e164:	f083 0301 	eor.w	r3, r3, #1
 801e168:	b2db      	uxtb	r3, r3
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d001      	beq.n	801e172 <iniciarIBUS+0x46>
        return false;
 801e16e:	2300      	movs	r3, #0
 801e170:	e000      	b.n	801e174 <iniciarIBUS+0x48>

    return true;
 801e172:	2301      	movs	r3, #1
}
 801e174:	4618      	mov	r0, r3
 801e176:	3708      	adds	r7, #8
 801e178:	46bd      	mov	sp, r7
 801e17a:	bd80      	pop	{r7, pc}
 801e17c:	2000ab24 	.word	0x2000ab24
 801e180:	0801e185 	.word	0x0801e185

0801e184 <procesarByteIBUS>:
**  Descripcion:    Recibe los bytes de la trama IBUs
**  Parametros:     Byte recibido
**  Retorno:        Ninguno
****************************************************************************************/
void procesarByteIBUS(uint8_t RxByte)
{
 801e184:	b580      	push	{r7, lr}
 801e186:	b088      	sub	sp, #32
 801e188:	af00      	add	r7, sp, #0
 801e18a:	4603      	mov	r3, r0
 801e18c:	71fb      	strb	r3, [r7, #7]
    ibus_t *driver = &ibus;
 801e18e:	4b32      	ldr	r3, [pc, #200]	; (801e258 <procesarByteIBUS+0xd4>)
 801e190:	617b      	str	r3, [r7, #20]

    uint32_t tiempoActual = microsISR();
 801e192:	f7f9 fc59 	bl	8017a48 <microsISR>
 801e196:	6138      	str	r0, [r7, #16]
    const bool separacionTrama = (tiempoActual - driver->tiempoAnterior >= 2000U);
 801e198:	697b      	ldr	r3, [r7, #20]
 801e19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e19c:	693a      	ldr	r2, [r7, #16]
 801e19e:	1ad3      	subs	r3, r2, r3
 801e1a0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801e1a4:	4293      	cmp	r3, r2
 801e1a6:	bf8c      	ite	hi
 801e1a8:	2301      	movhi	r3, #1
 801e1aa:	2300      	movls	r3, #0
 801e1ac:	73fb      	strb	r3, [r7, #15]
    driver->tiempoAnterior = tiempoActual;
 801e1ae:	697b      	ldr	r3, [r7, #20]
 801e1b0:	693a      	ldr	r2, [r7, #16]
 801e1b2:	649a      	str	r2, [r3, #72]	; 0x48

    if (separacionTrama)                         // Si tenemos separacion reseteamos el offset para recibir nueva trama
 801e1b4:	7bfb      	ldrb	r3, [r7, #15]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d003      	beq.n	801e1c2 <procesarByteIBUS+0x3e>
    	driver->offset = 0;
 801e1ba:	697b      	ldr	r3, [r7, #20]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    if (RxByte != 0x20 && driver->offset == 0)      // Para ser IBUS el primer byte es 0x20
 801e1c2:	79fb      	ldrb	r3, [r7, #7]
 801e1c4:	2b20      	cmp	r3, #32
 801e1c6:	d004      	beq.n	801e1d2 <procesarByteIBUS+0x4e>
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d03b      	beq.n	801e24a <procesarByteIBUS+0xc6>
        return;

    if (driver->offset == 0 && !separacionTrama) // Debe haber una separacion entre tramas para empezar un nuevo frame
 801e1d2:	697b      	ldr	r3, [r7, #20]
 801e1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d105      	bne.n	801e1e8 <procesarByteIBUS+0x64>
 801e1dc:	7bfb      	ldrb	r3, [r7, #15]
 801e1de:	f083 0301 	eor.w	r3, r3, #1
 801e1e2:	b2db      	uxtb	r3, r3
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d132      	bne.n	801e24e <procesarByteIBUS+0xca>
        return;

    driver->buffer[driver->offset++] = RxByte;
 801e1e8:	697b      	ldr	r3, [r7, #20]
 801e1ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e1ee:	1c5a      	adds	r2, r3, #1
 801e1f0:	b2d1      	uxtb	r1, r2
 801e1f2:	697a      	ldr	r2, [r7, #20]
 801e1f4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 801e1f8:	461a      	mov	r2, r3
 801e1fa:	697b      	ldr	r3, [r7, #20]
 801e1fc:	4413      	add	r3, r2
 801e1fe:	79fa      	ldrb	r2, [r7, #7]
 801e200:	705a      	strb	r2, [r3, #1]

    if (driver->offset == sizeof(driver->buffer)) {
 801e202:	697b      	ldr	r3, [r7, #20]
 801e204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e208:	2b20      	cmp	r3, #32
 801e20a:	d121      	bne.n	801e250 <procesarByteIBUS+0xcc>
    	driver->offset = 0;
 801e20c:	697b      	ldr	r3, [r7, #20]
 801e20e:	2200      	movs	r2, #0
 801e210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    	driver->tramaRecibida = true;
 801e214:	697b      	ldr	r3, [r7, #20]
 801e216:	2201      	movs	r2, #1
 801e218:	701a      	strb	r2, [r3, #0]

        uint32_t *p = (uint32_t *)driver->buffer;
 801e21a:	697b      	ldr	r3, [r7, #20]
 801e21c:	3301      	adds	r3, #1
 801e21e:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < TAMANIO_FRAME_IBUS_32; i++) {
 801e220:	2300      	movs	r3, #0
 801e222:	76fb      	strb	r3, [r7, #27]
 801e224:	e00d      	b.n	801e242 <procesarByteIBUS+0xbe>
            driver->trama[i] = *p;
 801e226:	7efb      	ldrb	r3, [r7, #27]
 801e228:	69fa      	ldr	r2, [r7, #28]
 801e22a:	6812      	ldr	r2, [r2, #0]
 801e22c:	6979      	ldr	r1, [r7, #20]
 801e22e:	3308      	adds	r3, #8
 801e230:	009b      	lsls	r3, r3, #2
 801e232:	440b      	add	r3, r1
 801e234:	605a      	str	r2, [r3, #4]
            p++;
 801e236:	69fb      	ldr	r3, [r7, #28]
 801e238:	3304      	adds	r3, #4
 801e23a:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < TAMANIO_FRAME_IBUS_32; i++) {
 801e23c:	7efb      	ldrb	r3, [r7, #27]
 801e23e:	3301      	adds	r3, #1
 801e240:	76fb      	strb	r3, [r7, #27]
 801e242:	7efb      	ldrb	r3, [r7, #27]
 801e244:	2b07      	cmp	r3, #7
 801e246:	d9ee      	bls.n	801e226 <procesarByteIBUS+0xa2>
 801e248:	e002      	b.n	801e250 <procesarByteIBUS+0xcc>
        return;
 801e24a:	bf00      	nop
 801e24c:	e000      	b.n	801e250 <procesarByteIBUS+0xcc>
        return;
 801e24e:	bf00      	nop
        }
    }
}
 801e250:	3720      	adds	r7, #32
 801e252:	46bd      	mov	sp, r7
 801e254:	bd80      	pop	{r7, pc}
 801e256:	bf00      	nop
 801e258:	2000ab24 	.word	0x2000ab24

0801e25c <decodificarTramaIBUS>:
**  Descripcion:    Obtiene los valores de los canales dada una trama
**  Parametros:     Trama, valores de los canales
**  Retorno:        True si ok, failsafe
****************************************************************************************/
bool decodificarTramaIBUS(const uint8_t *trama, uint16_t *valores)
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b084      	sub	sp, #16
 801e260:	af00      	add	r7, sp, #0
 801e262:	6078      	str	r0, [r7, #4]
 801e264:	6039      	str	r1, [r7, #0]
    uint32_t checksum = 96;
 801e266:	2360      	movs	r3, #96	; 0x60
 801e268:	60fb      	str	r3, [r7, #12]

    // El inicio de la trama comienza con 0x20, 0x40
    if ((trama[0] != 0x20) || (trama[1] != 0x40))
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	781b      	ldrb	r3, [r3, #0]
 801e26e:	2b20      	cmp	r3, #32
 801e270:	d104      	bne.n	801e27c <decodificarTramaIBUS+0x20>
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	3301      	adds	r3, #1
 801e276:	781b      	ldrb	r3, [r3, #0]
 801e278:	2b40      	cmp	r3, #64	; 0x40
 801e27a:	d001      	beq.n	801e280 <decodificarTramaIBUS+0x24>
        return false;
 801e27c:	2300      	movs	r3, #0
 801e27e:	e05a      	b.n	801e336 <decodificarTramaIBUS+0xda>

    // Extraemos los datos de la trama
    for (uint8_t canal = 0, i = 2; canal < NUM_CANALES_ENTRADA_IBUS; canal++, i += 2) {
 801e280:	2300      	movs	r3, #0
 801e282:	72fb      	strb	r3, [r7, #11]
 801e284:	2302      	movs	r3, #2
 801e286:	72bb      	strb	r3, [r7, #10]
 801e288:	e02b      	b.n	801e2e2 <decodificarTramaIBUS+0x86>
        valores[canal] = trama[i] | (trama[i + 1] & 0x0F) << 8;
 801e28a:	7abb      	ldrb	r3, [r7, #10]
 801e28c:	687a      	ldr	r2, [r7, #4]
 801e28e:	4413      	add	r3, r2
 801e290:	781b      	ldrb	r3, [r3, #0]
 801e292:	b21a      	sxth	r2, r3
 801e294:	7abb      	ldrb	r3, [r7, #10]
 801e296:	3301      	adds	r3, #1
 801e298:	6879      	ldr	r1, [r7, #4]
 801e29a:	440b      	add	r3, r1
 801e29c:	781b      	ldrb	r3, [r3, #0]
 801e29e:	021b      	lsls	r3, r3, #8
 801e2a0:	b21b      	sxth	r3, r3
 801e2a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e2a6:	b21b      	sxth	r3, r3
 801e2a8:	4313      	orrs	r3, r2
 801e2aa:	b219      	sxth	r1, r3
 801e2ac:	7afb      	ldrb	r3, [r7, #11]
 801e2ae:	005b      	lsls	r3, r3, #1
 801e2b0:	683a      	ldr	r2, [r7, #0]
 801e2b2:	4413      	add	r3, r2
 801e2b4:	b28a      	uxth	r2, r1
 801e2b6:	801a      	strh	r2, [r3, #0]
        checksum += trama[i] + trama[i + 1];
 801e2b8:	7abb      	ldrb	r3, [r7, #10]
 801e2ba:	687a      	ldr	r2, [r7, #4]
 801e2bc:	4413      	add	r3, r2
 801e2be:	781b      	ldrb	r3, [r3, #0]
 801e2c0:	4619      	mov	r1, r3
 801e2c2:	7abb      	ldrb	r3, [r7, #10]
 801e2c4:	3301      	adds	r3, #1
 801e2c6:	687a      	ldr	r2, [r7, #4]
 801e2c8:	4413      	add	r3, r2
 801e2ca:	781b      	ldrb	r3, [r3, #0]
 801e2cc:	440b      	add	r3, r1
 801e2ce:	461a      	mov	r2, r3
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	4413      	add	r3, r2
 801e2d4:	60fb      	str	r3, [r7, #12]
    for (uint8_t canal = 0, i = 2; canal < NUM_CANALES_ENTRADA_IBUS; canal++, i += 2) {
 801e2d6:	7afb      	ldrb	r3, [r7, #11]
 801e2d8:	3301      	adds	r3, #1
 801e2da:	72fb      	strb	r3, [r7, #11]
 801e2dc:	7abb      	ldrb	r3, [r7, #10]
 801e2de:	3302      	adds	r3, #2
 801e2e0:	72bb      	strb	r3, [r7, #10]
 801e2e2:	7afb      	ldrb	r3, [r7, #11]
 801e2e4:	2b0d      	cmp	r3, #13
 801e2e6:	d9d0      	bls.n	801e28a <decodificarTramaIBUS+0x2e>
    }

    checksum += trama[TAMANIO_FRAME_IBUS - 2] | trama[TAMANIO_FRAME_IBUS - 1] << 8;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	331e      	adds	r3, #30
 801e2ec:	781b      	ldrb	r3, [r3, #0]
 801e2ee:	461a      	mov	r2, r3
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	331f      	adds	r3, #31
 801e2f4:	781b      	ldrb	r3, [r3, #0]
 801e2f6:	021b      	lsls	r3, r3, #8
 801e2f8:	4313      	orrs	r3, r2
 801e2fa:	461a      	mov	r2, r3
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	4413      	add	r3, r2
 801e300:	60fb      	str	r3, [r7, #12]

    if (checksum != 0xFFFF)
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e308:	4293      	cmp	r3, r2
 801e30a:	d001      	beq.n	801e310 <decodificarTramaIBUS+0xb4>
        return false;
 801e30c:	2300      	movs	r3, #0
 801e30e:	e012      	b.n	801e336 <decodificarTramaIBUS+0xda>

    if ((trama[3] & 0xF0) || (trama[9] & 0xF0)) { // Failsafe
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	3303      	adds	r3, #3
 801e314:	781b      	ldrb	r3, [r3, #0]
 801e316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d106      	bne.n	801e32c <decodificarTramaIBUS+0xd0>
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	3309      	adds	r3, #9
 801e322:	781b      	ldrb	r3, [r3, #0]
 801e324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d003      	beq.n	801e334 <decodificarTramaIBUS+0xd8>
        activarFailsafeRadio();
 801e32c:	f000 fb88 	bl	801ea40 <activarFailsafeRadio>
        return false;
 801e330:	2300      	movs	r3, #0
 801e332:	e000      	b.n	801e336 <decodificarTramaIBUS+0xda>
    }

    return true;
 801e334:	2301      	movs	r3, #1
}
 801e336:	4618      	mov	r0, r3
 801e338:	3710      	adds	r7, #16
 801e33a:	46bd      	mov	sp, r7
 801e33c:	bd80      	pop	{r7, pc}
	...

0801e340 <leerIBUS>:
**  Descripcion:    Lee la trama
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void leerIBUS(uint32_t tiempoActual)
{
 801e340:	b580      	push	{r7, lr}
 801e342:	b08a      	sub	sp, #40	; 0x28
 801e344:	af00      	add	r7, sp, #0
 801e346:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);
    ibus_t *driver = &ibus;
 801e348:	4b10      	ldr	r3, [pc, #64]	; (801e38c <leerIBUS+0x4c>)
 801e34a:	627b      	str	r3, [r7, #36]	; 0x24

    if (!driver->tramaRecibida)
 801e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e34e:	781b      	ldrb	r3, [r3, #0]
 801e350:	f083 0301 	eor.w	r3, r3, #1
 801e354:	b2db      	uxtb	r3, r3
 801e356:	2b00      	cmp	r3, #0
 801e358:	d114      	bne.n	801e384 <leerIBUS+0x44>
        return;

    uint16_t valores[NUM_CANALES_ENTRADA_IBUS];

    if (decodificarTramaIBUS((uint8_t *)driver->trama, valores)) {
 801e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e35c:	3324      	adds	r3, #36	; 0x24
 801e35e:	f107 0208 	add.w	r2, r7, #8
 801e362:	4611      	mov	r1, r2
 801e364:	4618      	mov	r0, r3
 801e366:	f7ff ff79 	bl	801e25c <decodificarTramaIBUS>
 801e36a:	4603      	mov	r3, r0
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d00a      	beq.n	801e386 <leerIBUS+0x46>
    	driver->tramaRecibida = false;
 801e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e372:	2200      	movs	r2, #0
 801e374:	701a      	strb	r2, [r3, #0]
        anadirRecepcionRadio(NUM_CANALES_ENTRADA_IBUS, valores);
 801e376:	f107 0308 	add.w	r3, r7, #8
 801e37a:	4619      	mov	r1, r3
 801e37c:	200e      	movs	r0, #14
 801e37e:	f000 fa9f 	bl	801e8c0 <anadirRecepcionRadio>
 801e382:	e000      	b.n	801e386 <leerIBUS+0x46>
        return;
 801e384:	bf00      	nop
    }
}
 801e386:	3728      	adds	r7, #40	; 0x28
 801e388:	46bd      	mov	sp, r7
 801e38a:	bd80      	pop	{r7, pc}
 801e38c:	2000ab24 	.word	0x2000ab24

0801e390 <configRadio>:
 801e390:	b480      	push	{r7}
 801e392:	af00      	add	r7, sp, #0
 801e394:	4b02      	ldr	r3, [pc, #8]	; (801e3a0 <configRadio+0x10>)
 801e396:	4618      	mov	r0, r3
 801e398:	46bd      	mov	sp, r7
 801e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e39e:	4770      	bx	lr
 801e3a0:	2000a8e0 	.word	0x2000a8e0

0801e3a4 <iniciarPPM>:
**  Descripcion:    Inicia el PPM
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarPPM(void)
{
 801e3a4:	b590      	push	{r4, r7, lr}
 801e3a6:	b083      	sub	sp, #12
 801e3a8:	af00      	add	r7, sp, #0
    resetearPPM();
 801e3aa:	f000 f971 	bl	801e690 <resetearPPM>

    // Iniciamos el timer
    if (!iniciarTimer(configRadio()->pinPPM.numTimer, configRadio()->pinPPM.pin, TIM_USO_PPM))
 801e3ae:	f7ff ffef 	bl	801e390 <configRadio>
 801e3b2:	4603      	mov	r3, r0
 801e3b4:	f993 4003 	ldrsb.w	r4, [r3, #3]
 801e3b8:	f7ff ffea 	bl	801e390 <configRadio>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	789b      	ldrb	r3, [r3, #2]
 801e3c0:	2201      	movs	r2, #1
 801e3c2:	4619      	mov	r1, r3
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f7f9 fc2d 	bl	8017c24 <iniciarTimer>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	f083 0301 	eor.w	r3, r3, #1
 801e3d0:	b2db      	uxtb	r3, r3
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d001      	beq.n	801e3da <iniciarPPM+0x36>
        return false;
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	e030      	b.n	801e43c <iniciarPPM+0x98>

    // Obtenemos el Timer para hacer las lecturas PPM
    bool encontrado;
    tim_t *dTim = timerPorTag(configRadio()->pinPPM.pin, &encontrado);
 801e3da:	f7ff ffd9 	bl	801e390 <configRadio>
 801e3de:	4603      	mov	r3, r0
 801e3e0:	789b      	ldrb	r3, [r3, #2]
 801e3e2:	1cfa      	adds	r2, r7, #3
 801e3e4:	4611      	mov	r1, r2
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f7f9 fcf2 	bl	8017dd0 <timerPorTag>
 801e3ec:	6078      	str	r0, [r7, #4]

    if (!encontrado || dTim == NULL)
 801e3ee:	78fb      	ldrb	r3, [r7, #3]
 801e3f0:	f083 0301 	eor.w	r3, r3, #1
 801e3f4:	b2db      	uxtb	r3, r3
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d102      	bne.n	801e400 <iniciarPPM+0x5c>
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d101      	bne.n	801e404 <iniciarPPM+0x60>
        return false;
 801e400:	2300      	movs	r3, #0
 801e402:	e01b      	b.n	801e43c <iniciarPPM+0x98>

    // Configuramos el GPIO
    configurarIO(dTim->pin.pin, CONFIG_IO(GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_LOW, GPIO_NOPULL), dTim->pin.af);
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	7a58      	ldrb	r0, [r3, #9]
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	7a9b      	ldrb	r3, [r3, #10]
 801e40c:	461a      	mov	r2, r3
 801e40e:	2102      	movs	r1, #2
 801e410:	f7f7 ffce 	bl	80163b0 <configurarIO>

    // Configuramos el Timer
    configurarCapturaEntradaTimer(dTim, (uint16_t)TIMER_PERIODO_PPM, TIMER_1MHZ, true);
 801e414:	2301      	movs	r3, #1
 801e416:	4a0b      	ldr	r2, [pc, #44]	; (801e444 <iniciarPPM+0xa0>)
 801e418:	2100      	movs	r1, #0
 801e41a:	6878      	ldr	r0, [r7, #4]
 801e41c:	f7f9 fee2 	bl	80181e4 <configurarCapturaEntradaTimer>

    // Asignamos las funciones
    asignarCallbackCCtimer(&ppm.edgeCb, edgeCallbackPPM);
 801e420:	4909      	ldr	r1, [pc, #36]	; (801e448 <iniciarPPM+0xa4>)
 801e422:	480a      	ldr	r0, [pc, #40]	; (801e44c <iniciarPPM+0xa8>)
 801e424:	f7f9 ff7d 	bl	8018322 <asignarCallbackCCtimer>
    asignarCallbackOvrTimer(&ppm.overflowCb, overflowCallbackPPM);
 801e428:	4909      	ldr	r1, [pc, #36]	; (801e450 <iniciarPPM+0xac>)
 801e42a:	480a      	ldr	r0, [pc, #40]	; (801e454 <iniciarPPM+0xb0>)
 801e42c:	f7f9 ff87 	bl	801833e <asignarCallbackOvrTimer>
    configurarCallbacksTimer(dTim, &ppm.edgeCb, &ppm.overflowCb);
 801e430:	4a08      	ldr	r2, [pc, #32]	; (801e454 <iniciarPPM+0xb0>)
 801e432:	4906      	ldr	r1, [pc, #24]	; (801e44c <iniciarPPM+0xa8>)
 801e434:	6878      	ldr	r0, [r7, #4]
 801e436:	f7f9 ff93 	bl	8018360 <configurarCallbacksTimer>
    return true;
 801e43a:	2301      	movs	r3, #1
}
 801e43c:	4618      	mov	r0, r3
 801e43e:	370c      	adds	r7, #12
 801e440:	46bd      	mov	sp, r7
 801e442:	bd90      	pop	{r4, r7, pc}
 801e444:	000f4240 	.word	0x000f4240
 801e448:	0801e495 	.word	0x0801e495
 801e44c:	2000aba0 	.word	0x2000aba0
 801e450:	0801e459 	.word	0x0801e459
 801e454:	2000aba4 	.word	0x2000aba4

0801e458 <overflowCallbackPPM>:
**  Descripcion:    Funcion callback overflow del Timer que gestiona el PPM
**  Parametros:     Puntero al handler Overflow, captura
**  Retorno:        Ninguno
****************************************************************************************/
void overflowCallbackPPM(timerOvrHandlerRec_t* cbRec, uint16_t captura)
{
 801e458:	b480      	push	{r7}
 801e45a:	b083      	sub	sp, #12
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
 801e460:	460b      	mov	r3, r1
 801e462:	807b      	strh	r3, [r7, #2]
    UNUSED(cbRec);

    ppm.contadorLargo += captura + 1;
 801e464:	4b0a      	ldr	r3, [pc, #40]	; (801e490 <overflowCallbackPPM+0x38>)
 801e466:	681a      	ldr	r2, [r3, #0]
 801e468:	887b      	ldrh	r3, [r7, #2]
 801e46a:	4413      	add	r3, r2
 801e46c:	3301      	adds	r3, #1
 801e46e:	4a08      	ldr	r2, [pc, #32]	; (801e490 <overflowCallbackPPM+0x38>)
 801e470:	6013      	str	r3, [r2, #0]
    if (captura == TIMER_PERIODO_PPM - 1)
 801e472:	887b      	ldrh	r3, [r7, #2]
 801e474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e478:	4293      	cmp	r3, r2
 801e47a:	d102      	bne.n	801e482 <overflowCallbackPPM+0x2a>
        ppm.overflowed = true;
 801e47c:	4b04      	ldr	r3, [pc, #16]	; (801e490 <overflowCallbackPPM+0x38>)
 801e47e:	2201      	movs	r2, #1
 801e480:	755a      	strb	r2, [r3, #21]
}
 801e482:	bf00      	nop
 801e484:	370c      	adds	r7, #12
 801e486:	46bd      	mov	sp, r7
 801e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	2000ab70 	.word	0x2000ab70

0801e494 <edgeCallbackPPM>:
**  Descripcion:    Funcion callback Edge del Timer que gestiona el PPM
**  Parametros:     Puntero al handler Capture Compare, captura
**  Retorno:        Ninguno
****************************************************************************************/
void edgeCallbackPPM(timerCCHandlerRec_t* cbRec, uint16_t captura)
{
 801e494:	b580      	push	{r7, lr}
 801e496:	b086      	sub	sp, #24
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	460b      	mov	r3, r1
 801e49e:	807b      	strh	r3, [r7, #2]
    UNUSED(cbRec);
    int32_t i;
    uint32_t tiempoAnterior = ppm.tiempoActual;
 801e4a0:	4b74      	ldr	r3, [pc, #464]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4a2:	689b      	ldr	r3, [r3, #8]
 801e4a4:	60fb      	str	r3, [r7, #12]
    uint32_t capturaPrevia = ppm.capturaActual;
 801e4a6:	4b73      	ldr	r3, [pc, #460]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4a8:	685b      	ldr	r3, [r3, #4]
 801e4aa:	60bb      	str	r3, [r7, #8]

    uint32_t tiempoActual = captura;
 801e4ac:	887b      	ldrh	r3, [r7, #2]
 801e4ae:	613b      	str	r3, [r7, #16]
    tiempoActual += ppm.contadorLargo;
 801e4b0:	4b70      	ldr	r3, [pc, #448]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	693a      	ldr	r2, [r7, #16]
 801e4b6:	4413      	add	r3, r2
 801e4b8:	613b      	str	r3, [r7, #16]

    if (captura < capturaPrevia) {
 801e4ba:	887b      	ldrh	r3, [r7, #2]
 801e4bc:	68ba      	ldr	r2, [r7, #8]
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	d907      	bls.n	801e4d2 <edgeCallbackPPM+0x3e>
        if (ppm.overflowed)
 801e4c2:	4b6c      	ldr	r3, [pc, #432]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4c4:	7d5b      	ldrb	r3, [r3, #21]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d003      	beq.n	801e4d2 <edgeCallbackPPM+0x3e>
            tiempoActual += TIMER_PERIODO_PPM;
 801e4ca:	693b      	ldr	r3, [r7, #16]
 801e4cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801e4d0:	613b      	str	r3, [r7, #16]
    }

    if (tiempoActual > tiempoAnterior)
 801e4d2:	693a      	ldr	r2, [r7, #16]
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	429a      	cmp	r2, r3
 801e4d8:	d90e      	bls.n	801e4f8 <edgeCallbackPPM+0x64>
        ppm.incrementoTiempo = tiempoActual - (tiempoAnterior + (ppm.overflowed ? TIMER_PERIODO_PPM : 0));
 801e4da:	4b66      	ldr	r3, [pc, #408]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4dc:	7d5b      	ldrb	r3, [r3, #21]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d002      	beq.n	801e4e8 <edgeCallbackPPM+0x54>
 801e4e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801e4e6:	e000      	b.n	801e4ea <edgeCallbackPPM+0x56>
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	4413      	add	r3, r2
 801e4ee:	693a      	ldr	r2, [r7, #16]
 801e4f0:	1ad3      	subs	r3, r2, r3
 801e4f2:	4a60      	ldr	r2, [pc, #384]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e4f4:	60d3      	str	r3, [r2, #12]
 801e4f6:	e006      	b.n	801e506 <edgeCallbackPPM+0x72>
    else
        ppm.incrementoTiempo = TIMER_PERIODO_PPM + tiempoActual - tiempoAnterior;
 801e4f8:	693a      	ldr	r2, [r7, #16]
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	1ad3      	subs	r3, r2, r3
 801e4fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801e502:	4a5c      	ldr	r2, [pc, #368]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e504:	60d3      	str	r3, [r2, #12]

    ppm.overflowed = false;
 801e506:	4b5b      	ldr	r3, [pc, #364]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e508:	2200      	movs	r2, #0
 801e50a:	755a      	strb	r2, [r3, #21]

    // Guardamos las medidas
    ppm.tiempoActual = tiempoActual;
 801e50c:	4a59      	ldr	r2, [pc, #356]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e50e:	693b      	ldr	r3, [r7, #16]
 801e510:	6093      	str	r3, [r2, #8]
    ppm.capturaActual = captura;
 801e512:	887b      	ldrh	r3, [r7, #2]
 801e514:	4a57      	ldr	r2, [pc, #348]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e516:	6053      	str	r3, [r2, #4]

    // Pulso de sincronismo detectado
    if (ppm.incrementoTiempo > SINCRONISMO_US_PPM) {
 801e518:	4b56      	ldr	r3, [pc, #344]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e51a:	68db      	ldr	r3, [r3, #12]
 801e51c:	f640 228c 	movw	r2, #2700	; 0xa8c
 801e520:	4293      	cmp	r3, r2
 801e522:	d96a      	bls.n	801e5fa <edgeCallbackPPM+0x166>
        if (ppm.indicePulso == ppm.numCanalesPrevFrame && ppm.indicePulso >= MIN_CANALES_PPM && ppm.indicePulso <= NUM_CANALES_PPM) {
 801e524:	4b53      	ldr	r3, [pc, #332]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e526:	7c1b      	ldrb	r3, [r3, #16]
 801e528:	461a      	mov	r2, r3
 801e52a:	4b52      	ldr	r3, [pc, #328]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e52c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 801e530:	429a      	cmp	r2, r3
 801e532:	d118      	bne.n	801e566 <edgeCallbackPPM+0xd2>
 801e534:	4b4f      	ldr	r3, [pc, #316]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e536:	7c1b      	ldrb	r3, [r3, #16]
 801e538:	2b03      	cmp	r3, #3
 801e53a:	d914      	bls.n	801e566 <edgeCallbackPPM+0xd2>
 801e53c:	4b4d      	ldr	r3, [pc, #308]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e53e:	7c1b      	ldrb	r3, [r3, #16]
 801e540:	2b0c      	cmp	r3, #12
 801e542:	d810      	bhi.n	801e566 <edgeCallbackPPM+0xd2>
            // Si vemos n tramas simultaneas del mismo numero de canales lo guardamos como el tamanio de trama
            if (ppm.contadorFramesEstables < NUM_FRAMES_ESTABLES_REQUERIDOS_PPM)
 801e544:	4b4b      	ldr	r3, [pc, #300]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e546:	7cdb      	ldrb	r3, [r3, #19]
 801e548:	2b18      	cmp	r3, #24
 801e54a:	d806      	bhi.n	801e55a <edgeCallbackPPM+0xc6>
                ppm.contadorFramesEstables++;
 801e54c:	4b49      	ldr	r3, [pc, #292]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e54e:	7cdb      	ldrb	r3, [r3, #19]
 801e550:	3301      	adds	r3, #1
 801e552:	b2da      	uxtb	r2, r3
 801e554:	4b47      	ldr	r3, [pc, #284]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e556:	74da      	strb	r2, [r3, #19]
            if (ppm.contadorFramesEstables < NUM_FRAMES_ESTABLES_REQUERIDOS_PPM)
 801e558:	e008      	b.n	801e56c <edgeCallbackPPM+0xd8>
            else
                ppm.numCanales = ppm.indicePulso;
 801e55a:	4b46      	ldr	r3, [pc, #280]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e55c:	7c1b      	ldrb	r3, [r3, #16]
 801e55e:	b25a      	sxtb	r2, r3
 801e560:	4b44      	ldr	r3, [pc, #272]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e562:	745a      	strb	r2, [r3, #17]
            if (ppm.contadorFramesEstables < NUM_FRAMES_ESTABLES_REQUERIDOS_PPM)
 801e564:	e002      	b.n	801e56c <edgeCallbackPPM+0xd8>
        }
        else
            ppm.contadorFramesEstables = 0;
 801e566:	4b43      	ldr	r3, [pc, #268]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e568:	2200      	movs	r2, #0
 801e56a:	74da      	strb	r2, [r3, #19]

        // Comprobamos si la ultima trama estaba bien formateada
        if (ppm.indicePulso == ppm.numCanales && ppm.tracking) {
 801e56c:	4b41      	ldr	r3, [pc, #260]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e56e:	7c1b      	ldrb	r3, [r3, #16]
 801e570:	461a      	mov	r2, r3
 801e572:	4b40      	ldr	r3, [pc, #256]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e574:	f993 3011 	ldrsb.w	r3, [r3, #17]
 801e578:	429a      	cmp	r2, r3
 801e57a:	d132      	bne.n	801e5e2 <edgeCallbackPPM+0x14e>
 801e57c:	4b3d      	ldr	r3, [pc, #244]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e57e:	7d1b      	ldrb	r3, [r3, #20]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d02e      	beq.n	801e5e2 <edgeCallbackPPM+0x14e>
            // La ultima trama estaba bien formateada
            for (i = 0; i < ppm.numCanales; i++)
 801e584:	2300      	movs	r3, #0
 801e586:	617b      	str	r3, [r7, #20]
 801e588:	e00c      	b.n	801e5a4 <edgeCallbackPPM+0x110>
                capturasPPM[i] = ppm.capturas[i];
 801e58a:	4a3a      	ldr	r2, [pc, #232]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e58c:	697b      	ldr	r3, [r7, #20]
 801e58e:	3308      	adds	r3, #8
 801e590:	005b      	lsls	r3, r3, #1
 801e592:	4413      	add	r3, r2
 801e594:	88d9      	ldrh	r1, [r3, #6]
 801e596:	4a38      	ldr	r2, [pc, #224]	; (801e678 <edgeCallbackPPM+0x1e4>)
 801e598:	697b      	ldr	r3, [r7, #20]
 801e59a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < ppm.numCanales; i++)
 801e59e:	697b      	ldr	r3, [r7, #20]
 801e5a0:	3301      	adds	r3, #1
 801e5a2:	617b      	str	r3, [r7, #20]
 801e5a4:	4b33      	ldr	r3, [pc, #204]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5a6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 801e5aa:	461a      	mov	r2, r3
 801e5ac:	697b      	ldr	r3, [r7, #20]
 801e5ae:	4293      	cmp	r3, r2
 801e5b0:	dbeb      	blt.n	801e58a <edgeCallbackPPM+0xf6>

            for (i = ppm.numCanales; i < NUM_CANALES_PPM; i++)
 801e5b2:	4b30      	ldr	r3, [pc, #192]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5b4:	f993 3011 	ldrsb.w	r3, [r3, #17]
 801e5b8:	617b      	str	r3, [r7, #20]
 801e5ba:	e007      	b.n	801e5cc <edgeCallbackPPM+0x138>
                capturasPPM[i] = 0;
 801e5bc:	4a2e      	ldr	r2, [pc, #184]	; (801e678 <edgeCallbackPPM+0x1e4>)
 801e5be:	697b      	ldr	r3, [r7, #20]
 801e5c0:	2100      	movs	r1, #0
 801e5c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = ppm.numCanales; i < NUM_CANALES_PPM; i++)
 801e5c6:	697b      	ldr	r3, [r7, #20]
 801e5c8:	3301      	adds	r3, #1
 801e5ca:	617b      	str	r3, [r7, #20]
 801e5cc:	697b      	ldr	r3, [r7, #20]
 801e5ce:	2b0b      	cmp	r3, #11
 801e5d0:	ddf4      	ble.n	801e5bc <edgeCallbackPPM+0x128>

            anadirRecepcionRadio(ppm.numCanales, capturasPPM);
 801e5d2:	4b28      	ldr	r3, [pc, #160]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5d4:	f993 3011 	ldrsb.w	r3, [r3, #17]
 801e5d8:	b2db      	uxtb	r3, r3
 801e5da:	4927      	ldr	r1, [pc, #156]	; (801e678 <edgeCallbackPPM+0x1e4>)
 801e5dc:	4618      	mov	r0, r3
 801e5de:	f000 f96f 	bl	801e8c0 <anadirRecepcionRadio>
        }

        ppm.tracking = true;
 801e5e2:	4b24      	ldr	r3, [pc, #144]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5e4:	2201      	movs	r2, #1
 801e5e6:	751a      	strb	r2, [r3, #20]
        ppm.numCanalesPrevFrame = ppm.indicePulso;
 801e5e8:	4b22      	ldr	r3, [pc, #136]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5ea:	7c1b      	ldrb	r3, [r3, #16]
 801e5ec:	b25a      	sxtb	r2, r3
 801e5ee:	4b21      	ldr	r3, [pc, #132]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5f0:	749a      	strb	r2, [r3, #18]
        ppm.indicePulso = 0;
 801e5f2:	4b20      	ldr	r3, [pc, #128]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	741a      	strb	r2, [r3, #16]
            ppm.tracking = false;
            for (i = 0; i < NUM_CAPTURAS_PPM; i++)
                ppm.capturas[i] = 0;
        }
    }
}
 801e5f8:	e038      	b.n	801e66c <edgeCallbackPPM+0x1d8>
    else if (ppm.tracking) {
 801e5fa:	4b1e      	ldr	r3, [pc, #120]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e5fc:	7d1b      	ldrb	r3, [r3, #20]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d034      	beq.n	801e66c <edgeCallbackPPM+0x1d8>
        if (ppm.incrementoTiempo > PULSO_MIN_CANAL_PPM && ppm.incrementoTiempo < PULSO_MAX_CANAL_PPM && ppm.indicePulso < NUM_CANALES_PPM) {
 801e602:	4b1c      	ldr	r3, [pc, #112]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e604:	68db      	ldr	r3, [r3, #12]
 801e606:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e60a:	4293      	cmp	r3, r2
 801e60c:	d91b      	bls.n	801e646 <edgeCallbackPPM+0x1b2>
 801e60e:	4b19      	ldr	r3, [pc, #100]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e610:	68db      	ldr	r3, [r3, #12]
 801e612:	f640 02c9 	movw	r2, #2249	; 0x8c9
 801e616:	4293      	cmp	r3, r2
 801e618:	d815      	bhi.n	801e646 <edgeCallbackPPM+0x1b2>
 801e61a:	4b16      	ldr	r3, [pc, #88]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e61c:	7c1b      	ldrb	r3, [r3, #16]
 801e61e:	2b0b      	cmp	r3, #11
 801e620:	d811      	bhi.n	801e646 <edgeCallbackPPM+0x1b2>
            ppm.capturas[ppm.indicePulso] = ppm.incrementoTiempo;
 801e622:	4b14      	ldr	r3, [pc, #80]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e624:	68da      	ldr	r2, [r3, #12]
 801e626:	4b13      	ldr	r3, [pc, #76]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e628:	7c1b      	ldrb	r3, [r3, #16]
 801e62a:	b291      	uxth	r1, r2
 801e62c:	4a11      	ldr	r2, [pc, #68]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e62e:	3308      	adds	r3, #8
 801e630:	005b      	lsls	r3, r3, #1
 801e632:	4413      	add	r3, r2
 801e634:	460a      	mov	r2, r1
 801e636:	80da      	strh	r2, [r3, #6]
            ppm.indicePulso++;
 801e638:	4b0e      	ldr	r3, [pc, #56]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e63a:	7c1b      	ldrb	r3, [r3, #16]
 801e63c:	3301      	adds	r3, #1
 801e63e:	b2da      	uxtb	r2, r3
 801e640:	4b0c      	ldr	r3, [pc, #48]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e642:	741a      	strb	r2, [r3, #16]
}
 801e644:	e012      	b.n	801e66c <edgeCallbackPPM+0x1d8>
            ppm.tracking = false;
 801e646:	4b0b      	ldr	r3, [pc, #44]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e648:	2200      	movs	r2, #0
 801e64a:	751a      	strb	r2, [r3, #20]
            for (i = 0; i < NUM_CAPTURAS_PPM; i++)
 801e64c:	2300      	movs	r3, #0
 801e64e:	617b      	str	r3, [r7, #20]
 801e650:	e009      	b.n	801e666 <edgeCallbackPPM+0x1d2>
                ppm.capturas[i] = 0;
 801e652:	4a08      	ldr	r2, [pc, #32]	; (801e674 <edgeCallbackPPM+0x1e0>)
 801e654:	697b      	ldr	r3, [r7, #20]
 801e656:	3308      	adds	r3, #8
 801e658:	005b      	lsls	r3, r3, #1
 801e65a:	4413      	add	r3, r2
 801e65c:	2200      	movs	r2, #0
 801e65e:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < NUM_CAPTURAS_PPM; i++)
 801e660:	697b      	ldr	r3, [r7, #20]
 801e662:	3301      	adds	r3, #1
 801e664:	617b      	str	r3, [r7, #20]
 801e666:	697b      	ldr	r3, [r7, #20]
 801e668:	2b0b      	cmp	r3, #11
 801e66a:	ddf2      	ble.n	801e652 <edgeCallbackPPM+0x1be>
}
 801e66c:	bf00      	nop
 801e66e:	3718      	adds	r7, #24
 801e670:	46bd      	mov	sp, r7
 801e672:	bd80      	pop	{r7, pc}
 801e674:	2000ab70 	.word	0x2000ab70
 801e678:	2000abac 	.word	0x2000abac

0801e67c <leerPPM>:
**  Descripcion:    Lee el valor de todos los canales
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerPPM(uint32_t tiempoActual)
{
 801e67c:	b480      	push	{r7}
 801e67e:	b083      	sub	sp, #12
 801e680:	af00      	add	r7, sp, #0
 801e682:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);
}
 801e684:	bf00      	nop
 801e686:	370c      	adds	r7, #12
 801e688:	46bd      	mov	sp, r7
 801e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e68e:	4770      	bx	lr

0801e690 <resetearPPM>:
**  Descripcion:    Resetea la estructura PPM
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void resetearPPM(void)
{
 801e690:	b480      	push	{r7}
 801e692:	af00      	add	r7, sp, #0
    ppm.indicePulso = 0;
 801e694:	4b11      	ldr	r3, [pc, #68]	; (801e6dc <resetearPPM+0x4c>)
 801e696:	2200      	movs	r2, #0
 801e698:	741a      	strb	r2, [r3, #16]
    ppm.capturaActual = 0;
 801e69a:	4b10      	ldr	r3, [pc, #64]	; (801e6dc <resetearPPM+0x4c>)
 801e69c:	2200      	movs	r2, #0
 801e69e:	605a      	str	r2, [r3, #4]
    ppm.tiempoActual = 0;
 801e6a0:	4b0e      	ldr	r3, [pc, #56]	; (801e6dc <resetearPPM+0x4c>)
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	609a      	str	r2, [r3, #8]
    ppm.incrementoTiempo = 0;
 801e6a6:	4b0d      	ldr	r3, [pc, #52]	; (801e6dc <resetearPPM+0x4c>)
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	60da      	str	r2, [r3, #12]
    ppm.contadorLargo = 0;
 801e6ac:	4b0b      	ldr	r3, [pc, #44]	; (801e6dc <resetearPPM+0x4c>)
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	601a      	str	r2, [r3, #0]
    ppm.numCanales = -1;
 801e6b2:	4b0a      	ldr	r3, [pc, #40]	; (801e6dc <resetearPPM+0x4c>)
 801e6b4:	22ff      	movs	r2, #255	; 0xff
 801e6b6:	745a      	strb	r2, [r3, #17]
    ppm.numCanalesPrevFrame = -1;
 801e6b8:	4b08      	ldr	r3, [pc, #32]	; (801e6dc <resetearPPM+0x4c>)
 801e6ba:	22ff      	movs	r2, #255	; 0xff
 801e6bc:	749a      	strb	r2, [r3, #18]
    ppm.contadorFramesEstables = 0;
 801e6be:	4b07      	ldr	r3, [pc, #28]	; (801e6dc <resetearPPM+0x4c>)
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	74da      	strb	r2, [r3, #19]
    ppm.tracking = false;
 801e6c4:	4b05      	ldr	r3, [pc, #20]	; (801e6dc <resetearPPM+0x4c>)
 801e6c6:	2200      	movs	r2, #0
 801e6c8:	751a      	strb	r2, [r3, #20]
    ppm.overflowed = false;
 801e6ca:	4b04      	ldr	r3, [pc, #16]	; (801e6dc <resetearPPM+0x4c>)
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	755a      	strb	r2, [r3, #21]
}
 801e6d0:	bf00      	nop
 801e6d2:	46bd      	mov	sp, r7
 801e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6d8:	4770      	bx	lr
 801e6da:	bf00      	nop
 801e6dc:	2000ab70 	.word	0x2000ab70

0801e6e0 <configRadio>:
 801e6e0:	b480      	push	{r7}
 801e6e2:	af00      	add	r7, sp, #0
 801e6e4:	4b02      	ldr	r3, [pc, #8]	; (801e6f0 <configRadio+0x10>)
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	46bd      	mov	sp, r7
 801e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ee:	4770      	bx	lr
 801e6f0:	2000a8e0 	.word	0x2000a8e0

0801e6f4 <iniciarRadio>:
**  Descripcion:    Inicia la radio
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarRadio(void)
{
 801e6f4:	b580      	push	{r7, lr}
 801e6f6:	b082      	sub	sp, #8
 801e6f8:	af00      	add	r7, sp, #0
    // Reseteamos las variables de la radio
    memset(&radio, 0, sizeof(radio_t));
 801e6fa:	2238      	movs	r2, #56	; 0x38
 801e6fc:	2100      	movs	r1, #0
 801e6fe:	4833      	ldr	r0, [pc, #204]	; (801e7cc <iniciarRadio+0xd8>)
 801e700:	f016 fdce 	bl	80352a0 <memset>

    for (uint8_t i = 0; i < NUM_MAX_CANALES_RADIO; i++)
 801e704:	2300      	movs	r3, #0
 801e706:	71fb      	strb	r3, [r7, #7]
 801e708:	e008      	b.n	801e71c <iniciarRadio+0x28>
    	radio.canales[i] = VALOR_MEDIO_RADIO;
 801e70a:	79fb      	ldrb	r3, [r7, #7]
 801e70c:	4a2f      	ldr	r2, [pc, #188]	; (801e7cc <iniciarRadio+0xd8>)
 801e70e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801e712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < NUM_MAX_CANALES_RADIO; i++)
 801e716:	79fb      	ldrb	r3, [r7, #7]
 801e718:	3301      	adds	r3, #1
 801e71a:	71fb      	strb	r3, [r7, #7]
 801e71c:	79fb      	ldrb	r3, [r7, #7]
 801e71e:	2b11      	cmp	r3, #17
 801e720:	d9f3      	bls.n	801e70a <iniciarRadio+0x16>

    switch (configRadio()->protocolo) {
 801e722:	f7ff ffdd 	bl	801e6e0 <configRadio>
 801e726:	4603      	mov	r3, r0
 801e728:	f993 3000 	ldrsb.w	r3, [r3]
 801e72c:	2b02      	cmp	r3, #2
 801e72e:	d01f      	beq.n	801e770 <iniciarRadio+0x7c>
 801e730:	2b02      	cmp	r3, #2
 801e732:	dc2d      	bgt.n	801e790 <iniciarRadio+0x9c>
 801e734:	2b00      	cmp	r3, #0
 801e736:	d002      	beq.n	801e73e <iniciarRadio+0x4a>
 801e738:	2b01      	cmp	r3, #1
 801e73a:	d009      	beq.n	801e750 <iniciarRadio+0x5c>
 801e73c:	e028      	b.n	801e790 <iniciarRadio+0x9c>
#ifdef USAR_RADIO_PPM
        case RX_PPM:
        	tablaFnRadio = &tablaFnRadioPPM;
 801e73e:	4b24      	ldr	r3, [pc, #144]	; (801e7d0 <iniciarRadio+0xdc>)
 801e740:	4a24      	ldr	r2, [pc, #144]	; (801e7d4 <iniciarRadio+0xe0>)
 801e742:	601a      	str	r2, [r3, #0]
            ajustarFrecuenciaEjecucionTarea(TAREA_LEER_RADIO, PERIODO_TAREA_HZ_SCHEDULER(50));
 801e744:	f644 6120 	movw	r1, #20000	; 0x4e20
 801e748:	200f      	movs	r0, #15
 801e74a:	f000 fc11 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
            break;
 801e74e:	e024      	b.n	801e79a <iniciarRadio+0xa6>
#endif
#ifdef USAR_RADIO_UART
        case RX_IBUS:
        	tablaFnRadio = &tablaFnRadioIBUS;
 801e750:	4b1f      	ldr	r3, [pc, #124]	; (801e7d0 <iniciarRadio+0xdc>)
 801e752:	4a21      	ldr	r2, [pc, #132]	; (801e7d8 <iniciarRadio+0xe4>)
 801e754:	601a      	str	r2, [r3, #0]
            ajustarFrecuenciaEjecucionTarea(TAREA_LEER_RADIO, PERIODO_TAREA_HZ_SCHEDULER(configRadio()->frecLeer));
 801e756:	f7ff ffc3 	bl	801e6e0 <configRadio>
 801e75a:	4603      	mov	r3, r0
 801e75c:	889b      	ldrh	r3, [r3, #4]
 801e75e:	461a      	mov	r2, r3
 801e760:	4b1e      	ldr	r3, [pc, #120]	; (801e7dc <iniciarRadio+0xe8>)
 801e762:	fb93 f3f2 	sdiv	r3, r3, r2
 801e766:	4619      	mov	r1, r3
 801e768:	200f      	movs	r0, #15
 801e76a:	f000 fc01 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
            break;
 801e76e:	e014      	b.n	801e79a <iniciarRadio+0xa6>

        case RX_SBUS:
        	tablaFnRadio = &tablaFnRadioSBUS;
 801e770:	4b17      	ldr	r3, [pc, #92]	; (801e7d0 <iniciarRadio+0xdc>)
 801e772:	4a1b      	ldr	r2, [pc, #108]	; (801e7e0 <iniciarRadio+0xec>)
 801e774:	601a      	str	r2, [r3, #0]
            ajustarFrecuenciaEjecucionTarea(TAREA_LEER_RADIO, PERIODO_TAREA_HZ_SCHEDULER(configRadio()->frecLeer));
 801e776:	f7ff ffb3 	bl	801e6e0 <configRadio>
 801e77a:	4603      	mov	r3, r0
 801e77c:	889b      	ldrh	r3, [r3, #4]
 801e77e:	461a      	mov	r2, r3
 801e780:	4b16      	ldr	r3, [pc, #88]	; (801e7dc <iniciarRadio+0xe8>)
 801e782:	fb93 f3f2 	sdiv	r3, r3, r2
 801e786:	4619      	mov	r1, r3
 801e788:	200f      	movs	r0, #15
 801e78a:	f000 fbf1 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
            break;
 801e78e:	e004      	b.n	801e79a <iniciarRadio+0xa6>
#endif
        default:
#ifdef DEBUG
            printf("Fallo en la definicion del protocolo de la Radio\n");
 801e790:	4814      	ldr	r0, [pc, #80]	; (801e7e4 <iniciarRadio+0xf0>)
 801e792:	f017 fb35 	bl	8035e00 <puts>
#endif
            return false;
 801e796:	2300      	movs	r3, #0
 801e798:	e013      	b.n	801e7c2 <iniciarRadio+0xce>
            break;
    }

    if (iniciarDriverRadio())
 801e79a:	f000 f827 	bl	801e7ec <iniciarDriverRadio>
 801e79e:	4603      	mov	r3, r0
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d004      	beq.n	801e7ae <iniciarRadio+0xba>
        radio.iniciada = true;
 801e7a4:	4b09      	ldr	r3, [pc, #36]	; (801e7cc <iniciarRadio+0xd8>)
 801e7a6:	2201      	movs	r2, #1
 801e7a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801e7ac:	e006      	b.n	801e7bc <iniciarRadio+0xc8>
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion de la Radio\n");
 801e7ae:	480e      	ldr	r0, [pc, #56]	; (801e7e8 <iniciarRadio+0xf4>)
 801e7b0:	f017 fb26 	bl	8035e00 <puts>
#endif
    	radio.iniciada = false;
 801e7b4:	4b05      	ldr	r3, [pc, #20]	; (801e7cc <iniciarRadio+0xd8>)
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    }

    return radio.iniciada;
 801e7bc:	4b03      	ldr	r3, [pc, #12]	; (801e7cc <iniciarRadio+0xd8>)
 801e7be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	3708      	adds	r7, #8
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
 801e7ca:	bf00      	nop
 801e7cc:	2000abc4 	.word	0x2000abc4
 801e7d0:	2000abfc 	.word	0x2000abfc
 801e7d4:	20000258 	.word	0x20000258
 801e7d8:	20000250 	.word	0x20000250
 801e7dc:	000f4240 	.word	0x000f4240
 801e7e0:	20000260 	.word	0x20000260
 801e7e4:	0803a82c 	.word	0x0803a82c
 801e7e8:	0803a860 	.word	0x0803a860

0801e7ec <iniciarDriverRadio>:
**  Descripcion:    Inicia el protocolo de la radio
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverRadio(void)
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	af00      	add	r7, sp, #0
    if (tablaFnRadio->iniciarRadio())
 801e7f0:	4b05      	ldr	r3, [pc, #20]	; (801e808 <iniciarDriverRadio+0x1c>)
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	4798      	blx	r3
 801e7f8:	4603      	mov	r3, r0
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d001      	beq.n	801e802 <iniciarDriverRadio+0x16>
        return true;
 801e7fe:	2301      	movs	r3, #1
 801e800:	e000      	b.n	801e804 <iniciarDriverRadio+0x18>

    return false;
 801e802:	2300      	movs	r3, #0
}
 801e804:	4618      	mov	r0, r3
 801e806:	bd80      	pop	{r7, pc}
 801e808:	2000abfc 	.word	0x2000abfc

0801e80c <leerRadio>:
**  Descripcion:    Lee la radio y actualiza los canales
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerRadio(uint32_t tiempoActual)
{
 801e80c:	b580      	push	{r7, lr}
 801e80e:	b082      	sub	sp, #8
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]


    if (reaction.id == 'C') {
 801e814:	4b22      	ldr	r3, [pc, #136]	; (801e8a0 <leerRadio+0x94>)
 801e816:	791b      	ldrb	r3, [r3, #4]
 801e818:	2b43      	cmp	r3, #67	; 0x43
 801e81a:	d11e      	bne.n	801e85a <leerRadio+0x4e>
    	cambiarID = true;
 801e81c:	4b21      	ldr	r3, [pc, #132]	; (801e8a4 <leerRadio+0x98>)
 801e81e:	2201      	movs	r2, #1
 801e820:	701a      	strb	r2, [r3, #0]

		rTime1 = micros() - reaction.tiempo;
 801e822:	f7f9 f959 	bl	8017ad8 <micros>
 801e826:	4602      	mov	r2, r0
 801e828:	4b1d      	ldr	r3, [pc, #116]	; (801e8a0 <leerRadio+0x94>)
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	1ad3      	subs	r3, r2, r3
 801e82e:	4a1e      	ldr	r2, [pc, #120]	; (801e8a8 <leerRadio+0x9c>)
 801e830:	6013      	str	r3, [r2, #0]
		if (rTime1 > rTimeMax)
 801e832:	4b1d      	ldr	r3, [pc, #116]	; (801e8a8 <leerRadio+0x9c>)
 801e834:	681a      	ldr	r2, [r3, #0]
 801e836:	4b1d      	ldr	r3, [pc, #116]	; (801e8ac <leerRadio+0xa0>)
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	429a      	cmp	r2, r3
 801e83c:	d903      	bls.n	801e846 <leerRadio+0x3a>
			rTimeMax = rTime1;
 801e83e:	4b1a      	ldr	r3, [pc, #104]	; (801e8a8 <leerRadio+0x9c>)
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	4a1a      	ldr	r2, [pc, #104]	; (801e8ac <leerRadio+0xa0>)
 801e844:	6013      	str	r3, [r2, #0]

		if (rTime1 < rTimeMin)
 801e846:	4b18      	ldr	r3, [pc, #96]	; (801e8a8 <leerRadio+0x9c>)
 801e848:	681a      	ldr	r2, [r3, #0]
 801e84a:	4b19      	ldr	r3, [pc, #100]	; (801e8b0 <leerRadio+0xa4>)
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	429a      	cmp	r2, r3
 801e850:	d203      	bcs.n	801e85a <leerRadio+0x4e>
			rTimeMin = rTime1;
 801e852:	4b15      	ldr	r3, [pc, #84]	; (801e8a8 <leerRadio+0x9c>)
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	4a16      	ldr	r2, [pc, #88]	; (801e8b0 <leerRadio+0xa4>)
 801e858:	6013      	str	r3, [r2, #0]
    }



    radio.nuevaEntrada = false;
 801e85a:	4b16      	ldr	r3, [pc, #88]	; (801e8b4 <leerRadio+0xa8>)
 801e85c:	2200      	movs	r2, #0
 801e85e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    if (radio.iniciada) {
 801e862:	4b14      	ldr	r3, [pc, #80]	; (801e8b4 <leerRadio+0xa8>)
 801e864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d013      	beq.n	801e894 <leerRadio+0x88>
    	failsafeExtRadio = false;
 801e86c:	4b12      	ldr	r3, [pc, #72]	; (801e8b8 <leerRadio+0xac>)
 801e86e:	2200      	movs	r2, #0
 801e870:	701a      	strb	r2, [r3, #0]
        tablaFnRadio->leerRadio(tiempoActual);
 801e872:	4b12      	ldr	r3, [pc, #72]	; (801e8bc <leerRadio+0xb0>)
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	685b      	ldr	r3, [r3, #4]
 801e878:	6878      	ldr	r0, [r7, #4]
 801e87a:	4798      	blx	r3

        if (nuevaRecepcionRadio()) {
 801e87c:	f000 f846 	bl	801e90c <nuevaRecepcionRadio>
 801e880:	4603      	mov	r3, r0
 801e882:	2b00      	cmp	r3, #0
 801e884:	d006      	beq.n	801e894 <leerRadio+0x88>
            radio.nuevaEntrada = true;
 801e886:	4b0b      	ldr	r3, [pc, #44]	; (801e8b4 <leerRadio+0xa8>)
 801e888:	2201      	movs	r2, #1
 801e88a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            radio.ultimaMedida = tiempoActual;
 801e88e:	4a09      	ldr	r2, [pc, #36]	; (801e8b4 <leerRadio+0xa8>)
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	6353      	str	r3, [r2, #52]	; 0x34
        }
    }

    actualizarFailsafeRadio();
 801e894:	f000 f856 	bl	801e944 <actualizarFailsafeRadio>
}
 801e898:	bf00      	nop
 801e89a:	3708      	adds	r7, #8
 801e89c:	46bd      	mov	sp, r7
 801e89e:	bd80      	pop	{r7, pc}
 801e8a0:	2000c67c 	.word	0x2000c67c
 801e8a4:	2000c684 	.word	0x2000c684
 801e8a8:	2000c68c 	.word	0x2000c68c
 801e8ac:	2000c688 	.word	0x2000c688
 801e8b0:	20002938 	.word	0x20002938
 801e8b4:	2000abc4 	.word	0x2000abc4
 801e8b8:	2000ac00 	.word	0x2000ac00
 801e8bc:	2000abfc 	.word	0x2000abfc

0801e8c0 <anadirRecepcionRadio>:
**  Descripcion:    Anade una nueva recepcion de datos de radio
**  Parametros:     Numero de canales recibidos, valores de los canales, failsafe
**  Retorno:        Ninguno
****************************************************************************************/
void anadirRecepcionRadio(uint8_t numValores, uint16_t *valores)
{
 801e8c0:	b580      	push	{r7, lr}
 801e8c2:	b084      	sub	sp, #16
 801e8c4:	af00      	add	r7, sp, #0
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	6039      	str	r1, [r7, #0]
 801e8ca:	71fb      	strb	r3, [r7, #7]
    numValores = MIN(numValores, NUM_MAX_CANALES_RADIO);
 801e8cc:	79fb      	ldrb	r3, [r7, #7]
 801e8ce:	73fb      	strb	r3, [r7, #15]
 801e8d0:	2312      	movs	r3, #18
 801e8d2:	60bb      	str	r3, [r7, #8]
 801e8d4:	7bfa      	ldrb	r2, [r7, #15]
 801e8d6:	68bb      	ldr	r3, [r7, #8]
 801e8d8:	4293      	cmp	r3, r2
 801e8da:	bfa8      	it	ge
 801e8dc:	4613      	movge	r3, r2
 801e8de:	71fb      	strb	r3, [r7, #7]
    memcpy(radio.canales, valores, numValores * sizeof(uint16_t));
 801e8e0:	79fb      	ldrb	r3, [r7, #7]
 801e8e2:	005b      	lsls	r3, r3, #1
 801e8e4:	461a      	mov	r2, r3
 801e8e6:	6839      	ldr	r1, [r7, #0]
 801e8e8:	4807      	ldr	r0, [pc, #28]	; (801e908 <anadirRecepcionRadio+0x48>)
 801e8ea:	f016 fcb1 	bl	8035250 <memcpy>

    radio.numCanales = numValores;
 801e8ee:	4a06      	ldr	r2, [pc, #24]	; (801e908 <anadirRecepcionRadio+0x48>)
 801e8f0:	79fb      	ldrb	r3, [r7, #7]
 801e8f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    radio.contadorEntradas++;
 801e8f6:	4b04      	ldr	r3, [pc, #16]	; (801e908 <anadirRecepcionRadio+0x48>)
 801e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8fa:	3301      	adds	r3, #1
 801e8fc:	4a02      	ldr	r2, [pc, #8]	; (801e908 <anadirRecepcionRadio+0x48>)
 801e8fe:	6293      	str	r3, [r2, #40]	; 0x28
}
 801e900:	bf00      	nop
 801e902:	3710      	adds	r7, #16
 801e904:	46bd      	mov	sp, r7
 801e906:	bd80      	pop	{r7, pc}
 801e908:	2000abc4 	.word	0x2000abc4

0801e90c <nuevaRecepcionRadio>:
**  Descripcion:    Comprueba si ha habido una nueva recepcion de datos
**  Parametros:     Ninguno
**  Retorno:        True si se han recibido datos de radio
****************************************************************************************/
bool nuevaRecepcionRadio(void)
{
 801e90c:	b480      	push	{r7}
 801e90e:	b083      	sub	sp, #12
 801e910:	af00      	add	r7, sp, #0
    bool recepcion = radio.contadorEntradas != radio.ultimoContadorEntradas;
 801e912:	4b0b      	ldr	r3, [pc, #44]	; (801e940 <nuevaRecepcionRadio+0x34>)
 801e914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e916:	4b0a      	ldr	r3, [pc, #40]	; (801e940 <nuevaRecepcionRadio+0x34>)
 801e918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e91a:	429a      	cmp	r2, r3
 801e91c:	bf14      	ite	ne
 801e91e:	2301      	movne	r3, #1
 801e920:	2300      	moveq	r3, #0
 801e922:	71fb      	strb	r3, [r7, #7]
    if (recepcion)
 801e924:	79fb      	ldrb	r3, [r7, #7]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d003      	beq.n	801e932 <nuevaRecepcionRadio+0x26>
        radio.ultimoContadorEntradas = radio.contadorEntradas;
 801e92a:	4b05      	ldr	r3, [pc, #20]	; (801e940 <nuevaRecepcionRadio+0x34>)
 801e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e92e:	4a04      	ldr	r2, [pc, #16]	; (801e940 <nuevaRecepcionRadio+0x34>)
 801e930:	62d3      	str	r3, [r2, #44]	; 0x2c

    return recepcion;
 801e932:	79fb      	ldrb	r3, [r7, #7]
}
 801e934:	4618      	mov	r0, r3
 801e936:	370c      	adds	r7, #12
 801e938:	46bd      	mov	sp, r7
 801e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e93e:	4770      	bx	lr
 801e940:	2000abc4 	.word	0x2000abc4

0801e944 <actualizarFailsafeRadio>:
**  Descripcion:    Actualiza la bandera del failsafe
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarFailsafeRadio(void)
{
 801e944:	b590      	push	{r4, r7, lr}
 801e946:	b083      	sub	sp, #12
 801e948:	af00      	add	r7, sp, #0
    if (!radio.iniciada || failsafeExtRadio) {   // Failsafe activado externamente
 801e94a:	4b2c      	ldr	r3, [pc, #176]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e94c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e950:	f083 0301 	eor.w	r3, r3, #1
 801e954:	b2db      	uxtb	r3, r3
 801e956:	2b00      	cmp	r3, #0
 801e958:	d103      	bne.n	801e962 <actualizarFailsafeRadio+0x1e>
 801e95a:	4b29      	ldr	r3, [pc, #164]	; (801ea00 <actualizarFailsafeRadio+0xbc>)
 801e95c:	781b      	ldrb	r3, [r3, #0]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d004      	beq.n	801e96c <actualizarFailsafeRadio+0x28>
        radio.failsafe = true;
 801e962:	4b26      	ldr	r3, [pc, #152]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e964:	2201      	movs	r2, #1
 801e966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return;
 801e96a:	e044      	b.n	801e9f6 <actualizarFailsafeRadio+0xb2>
    }

    // Se considera que la radio esta operativa si se ha actualizado en X tiempo,
    const uint32_t tiempo = micros();
 801e96c:	f7f9 f8b4 	bl	8017ad8 <micros>
 801e970:	6038      	str	r0, [r7, #0]
    radio.failsafe = (tiempo - radio.ultimaMedida) > TIMEOUT_MEDIDA_RADIO;
 801e972:	4b22      	ldr	r3, [pc, #136]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e976:	683a      	ldr	r2, [r7, #0]
 801e978:	1ad3      	subs	r3, r2, r3
 801e97a:	4a22      	ldr	r2, [pc, #136]	; (801ea04 <actualizarFailsafeRadio+0xc0>)
 801e97c:	4293      	cmp	r3, r2
 801e97e:	bf8c      	ite	hi
 801e980:	2301      	movhi	r3, #1
 801e982:	2300      	movls	r3, #0
 801e984:	b2da      	uxtb	r2, r3
 801e986:	4b1d      	ldr	r3, [pc, #116]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    if (radio.failsafe)
 801e98c:	4b1b      	ldr	r3, [pc, #108]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e98e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e992:	2b00      	cmp	r3, #0
 801e994:	d12e      	bne.n	801e9f4 <actualizarFailsafeRadio+0xb0>
        return;

    if (radio.nuevaEntrada) {
 801e996:	4b19      	ldr	r3, [pc, #100]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e998:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d02a      	beq.n	801e9f6 <actualizarFailsafeRadio+0xb2>
    	radio.failsafe = false;
 801e9a0:	4b16      	ldr	r3, [pc, #88]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e9a2:	2200      	movs	r2, #0
 801e9a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        for (uint8_t i = 0; i < radio.numCanales; i++) {
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	71fb      	strb	r3, [r7, #7]
 801e9ac:	e01b      	b.n	801e9e6 <actualizarFailsafeRadio+0xa2>
    	    if (radio.canales[i] < configRadio()->minFailsafe || radio.canales[i] > configRadio()->maxFailsafe) {
 801e9ae:	79fb      	ldrb	r3, [r7, #7]
 801e9b0:	4a12      	ldr	r2, [pc, #72]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e9b2:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 801e9b6:	f7ff fe93 	bl	801e6e0 <configRadio>
 801e9ba:	4603      	mov	r3, r0
 801e9bc:	88db      	ldrh	r3, [r3, #6]
 801e9be:	429c      	cmp	r4, r3
 801e9c0:	d309      	bcc.n	801e9d6 <actualizarFailsafeRadio+0x92>
 801e9c2:	79fb      	ldrb	r3, [r7, #7]
 801e9c4:	4a0d      	ldr	r2, [pc, #52]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e9c6:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 801e9ca:	f7ff fe89 	bl	801e6e0 <configRadio>
 801e9ce:	4603      	mov	r3, r0
 801e9d0:	891b      	ldrh	r3, [r3, #8]
 801e9d2:	429c      	cmp	r4, r3
 801e9d4:	d904      	bls.n	801e9e0 <actualizarFailsafeRadio+0x9c>
                radio.failsafe = true;
 801e9d6:	4b09      	ldr	r3, [pc, #36]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e9d8:	2201      	movs	r2, #1
 801e9da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                return;
 801e9de:	e00a      	b.n	801e9f6 <actualizarFailsafeRadio+0xb2>
        for (uint8_t i = 0; i < radio.numCanales; i++) {
 801e9e0:	79fb      	ldrb	r3, [r7, #7]
 801e9e2:	3301      	adds	r3, #1
 801e9e4:	71fb      	strb	r3, [r7, #7]
 801e9e6:	4b05      	ldr	r3, [pc, #20]	; (801e9fc <actualizarFailsafeRadio+0xb8>)
 801e9e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801e9ec:	79fa      	ldrb	r2, [r7, #7]
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	d3dd      	bcc.n	801e9ae <actualizarFailsafeRadio+0x6a>
 801e9f2:	e000      	b.n	801e9f6 <actualizarFailsafeRadio+0xb2>
        return;
 801e9f4:	bf00      	nop
    	    }
        }
    }
}
 801e9f6:	370c      	adds	r7, #12
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	bd90      	pop	{r4, r7, pc}
 801e9fc:	2000abc4 	.word	0x2000abc4
 801ea00:	2000ac00 	.word	0x2000ac00
 801ea04:	000186a0 	.word	0x000186a0

0801ea08 <radioOperativa>:
**  Descripcion:    Comprueba si la radio esta operativa
**  Parametros:     Ninguno
**  Retorno:        True si OK
****************************************************************************************/
bool radioOperativa(void)
{
 801ea08:	b480      	push	{r7}
 801ea0a:	af00      	add	r7, sp, #0
    return radio.iniciada && !radio.failsafe;
 801ea0c:	4b0b      	ldr	r3, [pc, #44]	; (801ea3c <radioOperativa+0x34>)
 801ea0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d009      	beq.n	801ea2a <radioOperativa+0x22>
 801ea16:	4b09      	ldr	r3, [pc, #36]	; (801ea3c <radioOperativa+0x34>)
 801ea18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ea1c:	f083 0301 	eor.w	r3, r3, #1
 801ea20:	b2db      	uxtb	r3, r3
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d001      	beq.n	801ea2a <radioOperativa+0x22>
 801ea26:	2301      	movs	r3, #1
 801ea28:	e000      	b.n	801ea2c <radioOperativa+0x24>
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	f003 0301 	and.w	r3, r3, #1
 801ea30:	b2db      	uxtb	r3, r3
}
 801ea32:	4618      	mov	r0, r3
 801ea34:	46bd      	mov	sp, r7
 801ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3a:	4770      	bx	lr
 801ea3c:	2000abc4 	.word	0x2000abc4

0801ea40 <activarFailsafeRadio>:
**  Descripcion:    Activa el failsafe de la radio
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void activarFailsafeRadio(void)
{
 801ea40:	b480      	push	{r7}
 801ea42:	af00      	add	r7, sp, #0
	failsafeExtRadio = true;
 801ea44:	4b03      	ldr	r3, [pc, #12]	; (801ea54 <activarFailsafeRadio+0x14>)
 801ea46:	2201      	movs	r2, #1
 801ea48:	701a      	strb	r2, [r3, #0]
}
 801ea4a:	bf00      	nop
 801ea4c:	46bd      	mov	sp, r7
 801ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea52:	4770      	bx	lr
 801ea54:	2000ac00 	.word	0x2000ac00

0801ea58 <canalRadio>:
**  Descripcion:    Devuelve el valor de un canal
**  Parametros:     Ninguno
**  Retorno:        Valor del canal
****************************************************************************************/
uint16_t canalRadio(uint8_t canal)
{
 801ea58:	b480      	push	{r7}
 801ea5a:	b083      	sub	sp, #12
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	4603      	mov	r3, r0
 801ea60:	71fb      	strb	r3, [r7, #7]
    if (canal < NUM_MAX_CANALES_RADIO)
 801ea62:	79fb      	ldrb	r3, [r7, #7]
 801ea64:	2b11      	cmp	r3, #17
 801ea66:	d804      	bhi.n	801ea72 <canalRadio+0x1a>
        return radio.canales[canal];
 801ea68:	79fb      	ldrb	r3, [r7, #7]
 801ea6a:	4a05      	ldr	r2, [pc, #20]	; (801ea80 <canalRadio+0x28>)
 801ea6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ea70:	e000      	b.n	801ea74 <canalRadio+0x1c>
    else
        return 0;
 801ea72:	2300      	movs	r3, #0
}
 801ea74:	4618      	mov	r0, r3
 801ea76:	370c      	adds	r7, #12
 801ea78:	46bd      	mov	sp, r7
 801ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea7e:	4770      	bx	lr
 801ea80:	2000abc4 	.word	0x2000abc4

0801ea84 <configRadio>:
 801ea84:	b480      	push	{r7}
 801ea86:	af00      	add	r7, sp, #0
 801ea88:	4b02      	ldr	r3, [pc, #8]	; (801ea94 <configRadio+0x10>)
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	46bd      	mov	sp, r7
 801ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea92:	4770      	bx	lr
 801ea94:	2000a8e0 	.word	0x2000a8e0

0801ea98 <iniciarSBUS>:
**  Descripcion:    Reseteamos las variables del SBUS y abrimos el puerto serie
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarSBUS(void)
{
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b082      	sub	sp, #8
 801ea9c:	af00      	add	r7, sp, #0
    memset(&sbus, 0, sizeof(sbus_t));
 801ea9e:	2240      	movs	r2, #64	; 0x40
 801eaa0:	2100      	movs	r1, #0
 801eaa2:	4811      	ldr	r0, [pc, #68]	; (801eae8 <iniciarSBUS+0x50>)
 801eaa4:	f016 fbfc 	bl	80352a0 <memset>

    // Arrancamos la UART
    configIniUART_t config;
    config.baudrate = 100000;
 801eaa8:	4b10      	ldr	r3, [pc, #64]	; (801eaec <iniciarSBUS+0x54>)
 801eaaa:	603b      	str	r3, [r7, #0]
    config.lWord = UART_LONGITUD_WORD_8;
 801eaac:	2301      	movs	r3, #1
 801eaae:	713b      	strb	r3, [r7, #4]
    config.paridad = UART_NO_PARIDAD;
 801eab0:	2300      	movs	r3, #0
 801eab2:	717b      	strb	r3, [r7, #5]
    config.stop = UART_BIT_STOP_2;
 801eab4:	2301      	movs	r3, #1
 801eab6:	71bb      	strb	r3, [r7, #6]
    if (!iniciarUART(configRadio()->dispUART, config, procesarByteSBUS))
 801eab8:	f7ff ffe4 	bl	801ea84 <configRadio>
 801eabc:	4603      	mov	r3, r0
 801eabe:	f993 0001 	ldrsb.w	r0, [r3, #1]
 801eac2:	4b0b      	ldr	r3, [pc, #44]	; (801eaf0 <iniciarSBUS+0x58>)
 801eac4:	463a      	mov	r2, r7
 801eac6:	ca06      	ldmia	r2, {r1, r2}
 801eac8:	f7fa f944 	bl	8018d54 <iniciarUART>
 801eacc:	4603      	mov	r3, r0
 801eace:	f083 0301 	eor.w	r3, r3, #1
 801ead2:	b2db      	uxtb	r3, r3
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d001      	beq.n	801eadc <iniciarSBUS+0x44>
        return false;
 801ead8:	2300      	movs	r3, #0
 801eada:	e000      	b.n	801eade <iniciarSBUS+0x46>

    return true;
 801eadc:	2301      	movs	r3, #1
}
 801eade:	4618      	mov	r0, r3
 801eae0:	3708      	adds	r7, #8
 801eae2:	46bd      	mov	sp, r7
 801eae4:	bd80      	pop	{r7, pc}
 801eae6:	bf00      	nop
 801eae8:	2000ac04 	.word	0x2000ac04
 801eaec:	000186a0 	.word	0x000186a0
 801eaf0:	0801eaf5 	.word	0x0801eaf5

0801eaf4 <procesarByteSBUS>:
**  Descripcion:    Recibe los bytes de la trama SBUs y la decodifica
**  Parametros:     Tiempo actual, byte recibido
**  Retorno:        Ninguno
****************************************************************************************/
void procesarByteSBUS(uint8_t RxByte)
{
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b088      	sub	sp, #32
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	4603      	mov	r3, r0
 801eafc:	71fb      	strb	r3, [r7, #7]
	sbus_t *driver = &sbus;
 801eafe:	4b32      	ldr	r3, [pc, #200]	; (801ebc8 <procesarByteSBUS+0xd4>)
 801eb00:	617b      	str	r3, [r7, #20]

	uint32_t tiempoActual = microsISR();
 801eb02:	f7f8 ffa1 	bl	8017a48 <microsISR>
 801eb06:	6138      	str	r0, [r7, #16]
    const bool separacionTrama = (tiempoActual - driver->tiempoAnterior >= 2000U);
 801eb08:	697b      	ldr	r3, [r7, #20]
 801eb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb0c:	693a      	ldr	r2, [r7, #16]
 801eb0e:	1ad3      	subs	r3, r2, r3
 801eb10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801eb14:	4293      	cmp	r3, r2
 801eb16:	bf8c      	ite	hi
 801eb18:	2301      	movhi	r3, #1
 801eb1a:	2300      	movls	r3, #0
 801eb1c:	73fb      	strb	r3, [r7, #15]
    driver->tiempoAnterior = tiempoActual;
 801eb1e:	697b      	ldr	r3, [r7, #20]
 801eb20:	693a      	ldr	r2, [r7, #16]
 801eb22:	63da      	str	r2, [r3, #60]	; 0x3c

    if (separacionTrama)                         // Si tenemos separacion reseteamos el offset para recibir nueva trama
 801eb24:	7bfb      	ldrb	r3, [r7, #15]
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d003      	beq.n	801eb32 <procesarByteSBUS+0x3e>
    	driver->offset = 0;
 801eb2a:	697b      	ldr	r3, [r7, #20]
 801eb2c:	2200      	movs	r2, #0
 801eb2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if (RxByte != 0x0F && driver->offset == 0)   // Para ser IBUS el primer byte es 0x20
 801eb32:	79fb      	ldrb	r3, [r7, #7]
 801eb34:	2b0f      	cmp	r3, #15
 801eb36:	d004      	beq.n	801eb42 <procesarByteSBUS+0x4e>
 801eb38:	697b      	ldr	r3, [r7, #20]
 801eb3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d03b      	beq.n	801ebba <procesarByteSBUS+0xc6>
        return;

    if (driver->offset == 0 && !separacionTrama) // Debe haber una separacion entre tramas para empezar un nuevo frame
 801eb42:	697b      	ldr	r3, [r7, #20]
 801eb44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d105      	bne.n	801eb58 <procesarByteSBUS+0x64>
 801eb4c:	7bfb      	ldrb	r3, [r7, #15]
 801eb4e:	f083 0301 	eor.w	r3, r3, #1
 801eb52:	b2db      	uxtb	r3, r3
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d132      	bne.n	801ebbe <procesarByteSBUS+0xca>
        return;

    driver->buffer[driver->offset++] = RxByte;
 801eb58:	697b      	ldr	r3, [r7, #20]
 801eb5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb5e:	1c5a      	adds	r2, r3, #1
 801eb60:	b2d1      	uxtb	r1, r2
 801eb62:	697a      	ldr	r2, [r7, #20]
 801eb64:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 801eb68:	461a      	mov	r2, r3
 801eb6a:	697b      	ldr	r3, [r7, #20]
 801eb6c:	4413      	add	r3, r2
 801eb6e:	79fa      	ldrb	r2, [r7, #7]
 801eb70:	705a      	strb	r2, [r3, #1]

    if (driver->offset == sizeof(driver->buffer)) {
 801eb72:	697b      	ldr	r3, [r7, #20]
 801eb74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb78:	2b19      	cmp	r3, #25
 801eb7a:	d121      	bne.n	801ebc0 <procesarByteSBUS+0xcc>
    	driver->offset = 0;
 801eb7c:	697b      	ldr	r3, [r7, #20]
 801eb7e:	2200      	movs	r2, #0
 801eb80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    	driver->tramaRecibida = true;
 801eb84:	697b      	ldr	r3, [r7, #20]
 801eb86:	2201      	movs	r2, #1
 801eb88:	701a      	strb	r2, [r3, #0]

        uint32_t *p = (uint32_t *)driver->buffer;
 801eb8a:	697b      	ldr	r3, [r7, #20]
 801eb8c:	3301      	adds	r3, #1
 801eb8e:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < TAMANIO_FRAME_SBUS_32; i++) {
 801eb90:	2300      	movs	r3, #0
 801eb92:	76fb      	strb	r3, [r7, #27]
 801eb94:	e00d      	b.n	801ebb2 <procesarByteSBUS+0xbe>
        	driver->trama[i] = *p;
 801eb96:	7efb      	ldrb	r3, [r7, #27]
 801eb98:	69fa      	ldr	r2, [r7, #28]
 801eb9a:	6812      	ldr	r2, [r2, #0]
 801eb9c:	6979      	ldr	r1, [r7, #20]
 801eb9e:	3306      	adds	r3, #6
 801eba0:	009b      	lsls	r3, r3, #2
 801eba2:	440b      	add	r3, r1
 801eba4:	605a      	str	r2, [r3, #4]
        	p++;
 801eba6:	69fb      	ldr	r3, [r7, #28]
 801eba8:	3304      	adds	r3, #4
 801ebaa:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < TAMANIO_FRAME_SBUS_32; i++) {
 801ebac:	7efb      	ldrb	r3, [r7, #27]
 801ebae:	3301      	adds	r3, #1
 801ebb0:	76fb      	strb	r3, [r7, #27]
 801ebb2:	7efb      	ldrb	r3, [r7, #27]
 801ebb4:	2b06      	cmp	r3, #6
 801ebb6:	d9ee      	bls.n	801eb96 <procesarByteSBUS+0xa2>
 801ebb8:	e002      	b.n	801ebc0 <procesarByteSBUS+0xcc>
        return;
 801ebba:	bf00      	nop
 801ebbc:	e000      	b.n	801ebc0 <procesarByteSBUS+0xcc>
        return;
 801ebbe:	bf00      	nop
        }
    }
}
 801ebc0:	3720      	adds	r7, #32
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	2000ac04 	.word	0x2000ac04

0801ebcc <decodificarTramaSBUS>:
**  Descripcion:    Obtiene los valores de los canales dada una trama
**  Parametros:     Trama, valores de los canales
**  Retorno:        True si ok
****************************************************************************************/
bool decodificarTramaSBUS(const uint8_t *trama, uint16_t *valores)
{
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b086      	sub	sp, #24
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
 801ebd4:	6039      	str	r1, [r7, #0]
    // El inicio de la trama comienza con 0x0F
    if (trama[0] != 0x0F)
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	781b      	ldrb	r3, [r3, #0]
 801ebda:	2b0f      	cmp	r3, #15
 801ebdc:	d001      	beq.n	801ebe2 <decodificarTramaSBUS+0x16>
        return false;
 801ebde:	2300      	movs	r3, #0
 801ebe0:	e092      	b.n	801ed08 <decodificarTramaSBUS+0x13c>

    switch (trama[24]) {
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	3318      	adds	r3, #24
 801ebe6:	781b      	ldrb	r3, [r3, #0]
 801ebe8:	2be3      	cmp	r3, #227	; 0xe3
 801ebea:	d01e      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ebec:	2be3      	cmp	r3, #227	; 0xe3
 801ebee:	dc1e      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ebf0:	2bc3      	cmp	r3, #195	; 0xc3
 801ebf2:	d01a      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ebf4:	2bc3      	cmp	r3, #195	; 0xc3
 801ebf6:	dc1a      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ebf8:	2ba3      	cmp	r3, #163	; 0xa3
 801ebfa:	d016      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ebfc:	2ba3      	cmp	r3, #163	; 0xa3
 801ebfe:	dc16      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ec00:	2b83      	cmp	r3, #131	; 0x83
 801ec02:	d016      	beq.n	801ec32 <decodificarTramaSBUS+0x66>
 801ec04:	2b83      	cmp	r3, #131	; 0x83
 801ec06:	dc12      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ec08:	2b63      	cmp	r3, #99	; 0x63
 801ec0a:	d00e      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ec0c:	2b63      	cmp	r3, #99	; 0x63
 801ec0e:	dc0e      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ec10:	2b43      	cmp	r3, #67	; 0x43
 801ec12:	d00a      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ec14:	2b43      	cmp	r3, #67	; 0x43
 801ec16:	dc0a      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ec18:	2b23      	cmp	r3, #35	; 0x23
 801ec1a:	d006      	beq.n	801ec2a <decodificarTramaSBUS+0x5e>
 801ec1c:	2b23      	cmp	r3, #35	; 0x23
 801ec1e:	dc06      	bgt.n	801ec2e <decodificarTramaSBUS+0x62>
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d008      	beq.n	801ec36 <decodificarTramaSBUS+0x6a>
 801ec24:	2b03      	cmp	r3, #3
 801ec26:	d008      	beq.n	801ec3a <decodificarTramaSBUS+0x6e>
        case 0xE3:
            break;

        default:
            // Se espera uno de los bytes de arriba
            break;
 801ec28:	e001      	b.n	801ec2e <decodificarTramaSBUS+0x62>
            break;
 801ec2a:	bf00      	nop
 801ec2c:	e006      	b.n	801ec3c <decodificarTramaSBUS+0x70>
            break;
 801ec2e:	bf00      	nop
 801ec30:	e004      	b.n	801ec3c <decodificarTramaSBUS+0x70>
            break;
 801ec32:	bf00      	nop
 801ec34:	e002      	b.n	801ec3c <decodificarTramaSBUS+0x70>
            break;
 801ec36:	bf00      	nop
 801ec38:	e000      	b.n	801ec3c <decodificarTramaSBUS+0x70>
            break;
 801ec3a:	bf00      	nop
    }

    // Extraemos los datos de la trama usando la matriz
    for (uint8_t canal = 0; canal < NUM_CANALES_ENTRADA_SBUS; canal++) {
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	75fb      	strb	r3, [r7, #23]
 801ec40:	e04a      	b.n	801ecd8 <decodificarTramaSBUS+0x10c>
        uint16_t valor = 0;
 801ec42:	2300      	movs	r3, #0
 801ec44:	82bb      	strh	r3, [r7, #20]

        for (uint8_t i = 0; i < 3; i++) {
 801ec46:	2300      	movs	r3, #0
 801ec48:	74fb      	strb	r3, [r7, #19]
 801ec4a:	e02c      	b.n	801eca6 <decodificarTramaSBUS+0xda>
            const decodificadorSBUS_t *decodificador = &decodificadorSBUS[canal][i];
 801ec4c:	7dfa      	ldrb	r2, [r7, #23]
 801ec4e:	7cf9      	ldrb	r1, [r7, #19]
 801ec50:	4613      	mov	r3, r2
 801ec52:	005b      	lsls	r3, r3, #1
 801ec54:	4413      	add	r3, r2
 801ec56:	440b      	add	r3, r1
 801ec58:	009b      	lsls	r3, r3, #2
 801ec5a:	4a2d      	ldr	r2, [pc, #180]	; (801ed10 <decodificarTramaSBUS+0x144>)
 801ec5c:	4413      	add	r3, r2
 801ec5e:	60fb      	str	r3, [r7, #12]

            if (decodificador->mascara != 0) {
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	789b      	ldrb	r3, [r3, #2]
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d01b      	beq.n	801eca0 <decodificarTramaSBUS+0xd4>
                uint8_t pieza = trama[1 + decodificador->byte];
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	781b      	ldrb	r3, [r3, #0]
 801ec6c:	3301      	adds	r3, #1
 801ec6e:	461a      	mov	r2, r3
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	4413      	add	r3, r2
 801ec74:	781b      	ldrb	r3, [r3, #0]
 801ec76:	72fb      	strb	r3, [r7, #11]
                pieza >>= decodificador->rshift;
 801ec78:	7afb      	ldrb	r3, [r7, #11]
 801ec7a:	68fa      	ldr	r2, [r7, #12]
 801ec7c:	7852      	ldrb	r2, [r2, #1]
 801ec7e:	4113      	asrs	r3, r2
 801ec80:	72fb      	strb	r3, [r7, #11]
                pieza &= decodificador->mascara;
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	789a      	ldrb	r2, [r3, #2]
 801ec86:	7afb      	ldrb	r3, [r7, #11]
 801ec88:	4013      	ands	r3, r2
 801ec8a:	72fb      	strb	r3, [r7, #11]
                pieza <<= decodificador->lshift;
 801ec8c:	7afb      	ldrb	r3, [r7, #11]
 801ec8e:	68fa      	ldr	r2, [r7, #12]
 801ec90:	78d2      	ldrb	r2, [r2, #3]
 801ec92:	4093      	lsls	r3, r2
 801ec94:	72fb      	strb	r3, [r7, #11]

                valor |= pieza;
 801ec96:	7afb      	ldrb	r3, [r7, #11]
 801ec98:	b29a      	uxth	r2, r3
 801ec9a:	8abb      	ldrh	r3, [r7, #20]
 801ec9c:	4313      	orrs	r3, r2
 801ec9e:	82bb      	strh	r3, [r7, #20]
        for (uint8_t i = 0; i < 3; i++) {
 801eca0:	7cfb      	ldrb	r3, [r7, #19]
 801eca2:	3301      	adds	r3, #1
 801eca4:	74fb      	strb	r3, [r7, #19]
 801eca6:	7cfb      	ldrb	r3, [r7, #19]
 801eca8:	2b02      	cmp	r3, #2
 801ecaa:	d9cf      	bls.n	801ec4c <decodificarTramaSBUS+0x80>
            }
        }

        // Convierte de 0-2048 a 1000-2000
        valores[canal] = (valor * 1000 / 2048) + 1000;
 801ecac:	8abb      	ldrh	r3, [r7, #20]
 801ecae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ecb2:	fb02 f303 	mul.w	r3, r2, r3
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	da01      	bge.n	801ecbe <decodificarTramaSBUS+0xf2>
 801ecba:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801ecbe:	12db      	asrs	r3, r3, #11
 801ecc0:	b29a      	uxth	r2, r3
 801ecc2:	7dfb      	ldrb	r3, [r7, #23]
 801ecc4:	005b      	lsls	r3, r3, #1
 801ecc6:	6839      	ldr	r1, [r7, #0]
 801ecc8:	440b      	add	r3, r1
 801ecca:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 801ecce:	b292      	uxth	r2, r2
 801ecd0:	801a      	strh	r2, [r3, #0]
    for (uint8_t canal = 0; canal < NUM_CANALES_ENTRADA_SBUS; canal++) {
 801ecd2:	7dfb      	ldrb	r3, [r7, #23]
 801ecd4:	3301      	adds	r3, #1
 801ecd6:	75fb      	strb	r3, [r7, #23]
 801ecd8:	7dfb      	ldrb	r3, [r7, #23]
 801ecda:	2b0f      	cmp	r3, #15
 801ecdc:	d9b1      	bls.n	801ec42 <decodificarTramaSBUS+0x76>
    }

    // Decodifica el failsafe y la perdida de trama
    if (trama[BYTE_FLAGS_SBUS] & (1 << BIT_FAILSAFE_SBUS)) {
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	3317      	adds	r3, #23
 801ece2:	781b      	ldrb	r3, [r3, #0]
 801ece4:	f003 0308 	and.w	r3, r3, #8
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d003      	beq.n	801ecf4 <decodificarTramaSBUS+0x128>
    	activarFailsafeRadio();
 801ecec:	f7ff fea8 	bl	801ea40 <activarFailsafeRadio>
    	return false;
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	e009      	b.n	801ed08 <decodificarTramaSBUS+0x13c>
    }

    // Decodifica la perdida de trama
    if (trama[BYTE_FLAGS_SBUS] & (1 << BIT_TRAMA_PERDIDA_SBUS))
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	3317      	adds	r3, #23
 801ecf8:	781b      	ldrb	r3, [r3, #0]
 801ecfa:	f003 0304 	and.w	r3, r3, #4
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d001      	beq.n	801ed06 <decodificarTramaSBUS+0x13a>
        return false;
 801ed02:	2300      	movs	r3, #0
 801ed04:	e000      	b.n	801ed08 <decodificarTramaSBUS+0x13c>

    return true;
 801ed06:	2301      	movs	r3, #1
}
 801ed08:	4618      	mov	r0, r3
 801ed0a:	3718      	adds	r7, #24
 801ed0c:	46bd      	mov	sp, r7
 801ed0e:	bd80      	pop	{r7, pc}
 801ed10:	0803bfc0 	.word	0x0803bfc0

0801ed14 <leerSBUS>:
**  Descripcion:    Lee la trama
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void leerSBUS(uint32_t tiempoActual)
{
 801ed14:	b580      	push	{r7, lr}
 801ed16:	b08c      	sub	sp, #48	; 0x30
 801ed18:	af00      	add	r7, sp, #0
 801ed1a:	6078      	str	r0, [r7, #4]
	sbus_t *driver = &sbus;
 801ed1c:	4b10      	ldr	r3, [pc, #64]	; (801ed60 <leerSBUS+0x4c>)
 801ed1e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!driver->tramaRecibida)
 801ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed22:	781b      	ldrb	r3, [r3, #0]
 801ed24:	f083 0301 	eor.w	r3, r3, #1
 801ed28:	b2db      	uxtb	r3, r3
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d114      	bne.n	801ed58 <leerSBUS+0x44>
        return;

    uint16_t valores[NUM_CANALES_ENTRADA_SBUS];

    if (decodificarTramaSBUS((uint8_t *)driver->buffer, valores)) {
 801ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed30:	3301      	adds	r3, #1
 801ed32:	f107 020c 	add.w	r2, r7, #12
 801ed36:	4611      	mov	r1, r2
 801ed38:	4618      	mov	r0, r3
 801ed3a:	f7ff ff47 	bl	801ebcc <decodificarTramaSBUS>
 801ed3e:	4603      	mov	r3, r0
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d00a      	beq.n	801ed5a <leerSBUS+0x46>
        driver->tramaRecibida = false;
 801ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed46:	2200      	movs	r2, #0
 801ed48:	701a      	strb	r2, [r3, #0]
        anadirRecepcionRadio(NUM_CANALES_ENTRADA_SBUS, valores);
 801ed4a:	f107 030c 	add.w	r3, r7, #12
 801ed4e:	4619      	mov	r1, r3
 801ed50:	2010      	movs	r0, #16
 801ed52:	f7ff fdb5 	bl	801e8c0 <anadirRecepcionRadio>
 801ed56:	e000      	b.n	801ed5a <leerSBUS+0x46>
        return;
 801ed58:	bf00      	nop
    }
}
 801ed5a:	3730      	adds	r7, #48	; 0x30
 801ed5c:	46bd      	mov	sp, r7
 801ed5e:	bd80      	pop	{r7, pc}
 801ed60:	2000ac04 	.word	0x2000ac04

0801ed64 <configSistema>:
 801ed64:	b480      	push	{r7}
 801ed66:	af00      	add	r7, sp, #0
 801ed68:	4b02      	ldr	r3, [pc, #8]	; (801ed74 <configSistema+0x10>)
 801ed6a:	4618      	mov	r0, r3
 801ed6c:	46bd      	mov	sp, r7
 801ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed72:	4770      	bx	lr
 801ed74:	2000a9a0 	.word	0x2000a9a0

0801ed78 <limpiarColaTareas>:
**  Descripcion:    Resetea la cola de tareas
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void limpiarColaTareas(void)
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	af00      	add	r7, sp, #0
    memset(colaTareas, 0, sizeof(colaTareas));
 801ed7c:	2258      	movs	r2, #88	; 0x58
 801ed7e:	2100      	movs	r1, #0
 801ed80:	4805      	ldr	r0, [pc, #20]	; (801ed98 <limpiarColaTareas+0x20>)
 801ed82:	f016 fa8d 	bl	80352a0 <memset>
    posColaTareas = 0;
 801ed86:	4b05      	ldr	r3, [pc, #20]	; (801ed9c <limpiarColaTareas+0x24>)
 801ed88:	2200      	movs	r2, #0
 801ed8a:	701a      	strb	r2, [r3, #0]
    tamColaTareas = 0;
 801ed8c:	4b04      	ldr	r3, [pc, #16]	; (801eda0 <limpiarColaTareas+0x28>)
 801ed8e:	2200      	movs	r2, #0
 801ed90:	701a      	strb	r2, [r3, #0]
}
 801ed92:	bf00      	nop
 801ed94:	bd80      	pop	{r7, pc}
 801ed96:	bf00      	nop
 801ed98:	2000cf30 	.word	0x2000cf30
 801ed9c:	2000cf8c 	.word	0x2000cf8c
 801eda0:	2000cf90 	.word	0x2000cf90

0801eda4 <anadirTareaEnCola>:
**  Descripcion:    Anade una tarea a la cola
**  Parametros:     Tarea a anadir
**  Retorno:        True si ok
****************************************************************************************/
bool anadirTareaEnCola(tarea_t *tarea)
{
 801eda4:	b580      	push	{r7, lr}
 801eda6:	b084      	sub	sp, #16
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	6078      	str	r0, [r7, #4]
    // Chequeamos el tamanio de la cola o si ya esta metida
    if ((tamColaTareas >= TAREA_CONTADOR) || tareaEnCola(tarea))
 801edac:	4b24      	ldr	r3, [pc, #144]	; (801ee40 <anadirTareaEnCola+0x9c>)
 801edae:	781b      	ldrb	r3, [r3, #0]
 801edb0:	2b14      	cmp	r3, #20
 801edb2:	d805      	bhi.n	801edc0 <anadirTareaEnCola+0x1c>
 801edb4:	6878      	ldr	r0, [r7, #4]
 801edb6:	f000 f881 	bl	801eebc <tareaEnCola>
 801edba:	4603      	mov	r3, r0
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	d001      	beq.n	801edc4 <anadirTareaEnCola+0x20>
        return false;
 801edc0:	2300      	movs	r3, #0
 801edc2:	e039      	b.n	801ee38 <anadirTareaEnCola+0x94>

    // Organiza la cola por prioridad
    for (uint8_t i = 0; i <= tamColaTareas; i++) {
 801edc4:	2300      	movs	r3, #0
 801edc6:	73fb      	strb	r3, [r7, #15]
 801edc8:	e030      	b.n	801ee2c <anadirTareaEnCola+0x88>
        if (colaTareas[i] == NULL || colaTareas[i]->prioridadEstatica < tarea->prioridadEstatica) {
 801edca:	7bfb      	ldrb	r3, [r7, #15]
 801edcc:	4a1d      	ldr	r2, [pc, #116]	; (801ee44 <anadirTareaEnCola+0xa0>)
 801edce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d008      	beq.n	801ede8 <anadirTareaEnCola+0x44>
 801edd6:	7bfb      	ldrb	r3, [r7, #15]
 801edd8:	4a1a      	ldr	r2, [pc, #104]	; (801ee44 <anadirTareaEnCola+0xa0>)
 801edda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801edde:	7c1a      	ldrb	r2, [r3, #16]
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	7c1b      	ldrb	r3, [r3, #16]
 801ede4:	429a      	cmp	r2, r3
 801ede6:	d21e      	bcs.n	801ee26 <anadirTareaEnCola+0x82>
            memmove(&colaTareas[i + 1], &colaTareas[i], sizeof(tarea) * (tamColaTareas - i));
 801ede8:	7bfb      	ldrb	r3, [r7, #15]
 801edea:	3301      	adds	r3, #1
 801edec:	009b      	lsls	r3, r3, #2
 801edee:	4a15      	ldr	r2, [pc, #84]	; (801ee44 <anadirTareaEnCola+0xa0>)
 801edf0:	1898      	adds	r0, r3, r2
 801edf2:	7bfb      	ldrb	r3, [r7, #15]
 801edf4:	009b      	lsls	r3, r3, #2
 801edf6:	4a13      	ldr	r2, [pc, #76]	; (801ee44 <anadirTareaEnCola+0xa0>)
 801edf8:	1899      	adds	r1, r3, r2
 801edfa:	4b11      	ldr	r3, [pc, #68]	; (801ee40 <anadirTareaEnCola+0x9c>)
 801edfc:	781b      	ldrb	r3, [r3, #0]
 801edfe:	461a      	mov	r2, r3
 801ee00:	7bfb      	ldrb	r3, [r7, #15]
 801ee02:	1ad3      	subs	r3, r2, r3
 801ee04:	009b      	lsls	r3, r3, #2
 801ee06:	461a      	mov	r2, r3
 801ee08:	f016 fa30 	bl	803526c <memmove>
            colaTareas[i] = tarea;
 801ee0c:	7bfb      	ldrb	r3, [r7, #15]
 801ee0e:	490d      	ldr	r1, [pc, #52]	; (801ee44 <anadirTareaEnCola+0xa0>)
 801ee10:	687a      	ldr	r2, [r7, #4]
 801ee12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            tamColaTareas++;
 801ee16:	4b0a      	ldr	r3, [pc, #40]	; (801ee40 <anadirTareaEnCola+0x9c>)
 801ee18:	781b      	ldrb	r3, [r3, #0]
 801ee1a:	3301      	adds	r3, #1
 801ee1c:	b2da      	uxtb	r2, r3
 801ee1e:	4b08      	ldr	r3, [pc, #32]	; (801ee40 <anadirTareaEnCola+0x9c>)
 801ee20:	701a      	strb	r2, [r3, #0]
            return true;
 801ee22:	2301      	movs	r3, #1
 801ee24:	e008      	b.n	801ee38 <anadirTareaEnCola+0x94>
    for (uint8_t i = 0; i <= tamColaTareas; i++) {
 801ee26:	7bfb      	ldrb	r3, [r7, #15]
 801ee28:	3301      	adds	r3, #1
 801ee2a:	73fb      	strb	r3, [r7, #15]
 801ee2c:	4b04      	ldr	r3, [pc, #16]	; (801ee40 <anadirTareaEnCola+0x9c>)
 801ee2e:	781b      	ldrb	r3, [r3, #0]
 801ee30:	7bfa      	ldrb	r2, [r7, #15]
 801ee32:	429a      	cmp	r2, r3
 801ee34:	d9c9      	bls.n	801edca <anadirTareaEnCola+0x26>
        }
    }
    return false;
 801ee36:	2300      	movs	r3, #0
}
 801ee38:	4618      	mov	r0, r3
 801ee3a:	3710      	adds	r7, #16
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	bd80      	pop	{r7, pc}
 801ee40:	2000cf90 	.word	0x2000cf90
 801ee44:	2000cf30 	.word	0x2000cf30

0801ee48 <quitarTareaDeCola>:
**  Descripcion:    Quita una tarea de la cola
**  Parametros:     Tarea a quitar
**  Retorno:        True si ok
****************************************************************************************/
bool quitarTareaDeCola(tarea_t *tarea)
{
 801ee48:	b580      	push	{r7, lr}
 801ee4a:	b084      	sub	sp, #16
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < tamColaTareas; i++) {
 801ee50:	2300      	movs	r3, #0
 801ee52:	73fb      	strb	r3, [r7, #15]
 801ee54:	e023      	b.n	801ee9e <quitarTareaDeCola+0x56>
        if (colaTareas[i] == tarea) {
 801ee56:	7bfb      	ldrb	r3, [r7, #15]
 801ee58:	4a16      	ldr	r2, [pc, #88]	; (801eeb4 <quitarTareaDeCola+0x6c>)
 801ee5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ee5e:	687a      	ldr	r2, [r7, #4]
 801ee60:	429a      	cmp	r2, r3
 801ee62:	d119      	bne.n	801ee98 <quitarTareaDeCola+0x50>
            memmove(&colaTareas[i], &colaTareas[i+1], sizeof(tarea) * (tamColaTareas - i));
 801ee64:	7bfb      	ldrb	r3, [r7, #15]
 801ee66:	009b      	lsls	r3, r3, #2
 801ee68:	4a12      	ldr	r2, [pc, #72]	; (801eeb4 <quitarTareaDeCola+0x6c>)
 801ee6a:	1898      	adds	r0, r3, r2
 801ee6c:	7bfb      	ldrb	r3, [r7, #15]
 801ee6e:	3301      	adds	r3, #1
 801ee70:	009b      	lsls	r3, r3, #2
 801ee72:	4a10      	ldr	r2, [pc, #64]	; (801eeb4 <quitarTareaDeCola+0x6c>)
 801ee74:	1899      	adds	r1, r3, r2
 801ee76:	4b10      	ldr	r3, [pc, #64]	; (801eeb8 <quitarTareaDeCola+0x70>)
 801ee78:	781b      	ldrb	r3, [r3, #0]
 801ee7a:	461a      	mov	r2, r3
 801ee7c:	7bfb      	ldrb	r3, [r7, #15]
 801ee7e:	1ad3      	subs	r3, r2, r3
 801ee80:	009b      	lsls	r3, r3, #2
 801ee82:	461a      	mov	r2, r3
 801ee84:	f016 f9f2 	bl	803526c <memmove>
            --tamColaTareas;
 801ee88:	4b0b      	ldr	r3, [pc, #44]	; (801eeb8 <quitarTareaDeCola+0x70>)
 801ee8a:	781b      	ldrb	r3, [r3, #0]
 801ee8c:	3b01      	subs	r3, #1
 801ee8e:	b2da      	uxtb	r2, r3
 801ee90:	4b09      	ldr	r3, [pc, #36]	; (801eeb8 <quitarTareaDeCola+0x70>)
 801ee92:	701a      	strb	r2, [r3, #0]
            return true;
 801ee94:	2301      	movs	r3, #1
 801ee96:	e008      	b.n	801eeaa <quitarTareaDeCola+0x62>
    for (uint8_t i = 0; i < tamColaTareas; i++) {
 801ee98:	7bfb      	ldrb	r3, [r7, #15]
 801ee9a:	3301      	adds	r3, #1
 801ee9c:	73fb      	strb	r3, [r7, #15]
 801ee9e:	4b06      	ldr	r3, [pc, #24]	; (801eeb8 <quitarTareaDeCola+0x70>)
 801eea0:	781b      	ldrb	r3, [r3, #0]
 801eea2:	7bfa      	ldrb	r2, [r7, #15]
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d3d6      	bcc.n	801ee56 <quitarTareaDeCola+0xe>
        }
    }
    return false;
 801eea8:	2300      	movs	r3, #0
}
 801eeaa:	4618      	mov	r0, r3
 801eeac:	3710      	adds	r7, #16
 801eeae:	46bd      	mov	sp, r7
 801eeb0:	bd80      	pop	{r7, pc}
 801eeb2:	bf00      	nop
 801eeb4:	2000cf30 	.word	0x2000cf30
 801eeb8:	2000cf90 	.word	0x2000cf90

0801eebc <tareaEnCola>:
**  Descripcion:    Comprueba si una tarea esta en la cola
**  Parametros:     Tarea a comprobar
**  Retorno:        True si esta metida
****************************************************************************************/
bool tareaEnCola(tarea_t *tarea)
{
 801eebc:	b480      	push	{r7}
 801eebe:	b085      	sub	sp, #20
 801eec0:	af00      	add	r7, sp, #0
 801eec2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < tamColaTareas; i++) {
 801eec4:	2300      	movs	r3, #0
 801eec6:	73fb      	strb	r3, [r7, #15]
 801eec8:	e00b      	b.n	801eee2 <tareaEnCola+0x26>
        if (colaTareas[i] == tarea)
 801eeca:	7bfb      	ldrb	r3, [r7, #15]
 801eecc:	4a0b      	ldr	r2, [pc, #44]	; (801eefc <tareaEnCola+0x40>)
 801eece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	429a      	cmp	r2, r3
 801eed6:	d101      	bne.n	801eedc <tareaEnCola+0x20>
            return true;
 801eed8:	2301      	movs	r3, #1
 801eeda:	e008      	b.n	801eeee <tareaEnCola+0x32>
    for (uint8_t i = 0; i < tamColaTareas; i++) {
 801eedc:	7bfb      	ldrb	r3, [r7, #15]
 801eede:	3301      	adds	r3, #1
 801eee0:	73fb      	strb	r3, [r7, #15]
 801eee2:	4b07      	ldr	r3, [pc, #28]	; (801ef00 <tareaEnCola+0x44>)
 801eee4:	781b      	ldrb	r3, [r3, #0]
 801eee6:	7bfa      	ldrb	r2, [r7, #15]
 801eee8:	429a      	cmp	r2, r3
 801eeea:	d3ee      	bcc.n	801eeca <tareaEnCola+0xe>
    }
    return false;
 801eeec:	2300      	movs	r3, #0
}
 801eeee:	4618      	mov	r0, r3
 801eef0:	3714      	adds	r7, #20
 801eef2:	46bd      	mov	sp, r7
 801eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eef8:	4770      	bx	lr
 801eefa:	bf00      	nop
 801eefc:	2000cf30 	.word	0x2000cf30
 801ef00:	2000cf90 	.word	0x2000cf90

0801ef04 <primeraTareaCola>:
**  Descripcion:    Retorna la primera tarea de la cola
**  Parametros:     Ninguno
**  Retorno:        Primera tarea
****************************************************************************************/
CODIGO_RAPIDO tarea_t *primeraTareaCola(void)
{
 801ef04:	b480      	push	{r7}
 801ef06:	af00      	add	r7, sp, #0
    posColaTareas = 0;
 801ef08:	4b04      	ldr	r3, [pc, #16]	; (801ef1c <primeraTareaCola+0x18>)
 801ef0a:	2200      	movs	r2, #0
 801ef0c:	701a      	strb	r2, [r3, #0]
    return colaTareas[0];
 801ef0e:	4b04      	ldr	r3, [pc, #16]	; (801ef20 <primeraTareaCola+0x1c>)
 801ef10:	681b      	ldr	r3, [r3, #0]
}
 801ef12:	4618      	mov	r0, r3
 801ef14:	46bd      	mov	sp, r7
 801ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef1a:	4770      	bx	lr
 801ef1c:	2000cf8c 	.word	0x2000cf8c
 801ef20:	2000cf30 	.word	0x2000cf30

0801ef24 <siguienteTareaCola>:
**  Descripcion:    Avanza la posicion de la cola
**  Parametros:     Ninguno
**  Retorno:        Siguiente tarea
****************************************************************************************/
CODIGO_RAPIDO tarea_t *siguienteTareaCola(void)
{
 801ef24:	b480      	push	{r7}
 801ef26:	af00      	add	r7, sp, #0
    return colaTareas[++posColaTareas];
 801ef28:	4b08      	ldr	r3, [pc, #32]	; (801ef4c <siguienteTareaCola+0x28>)
 801ef2a:	781b      	ldrb	r3, [r3, #0]
 801ef2c:	3301      	adds	r3, #1
 801ef2e:	b2da      	uxtb	r2, r3
 801ef30:	4b06      	ldr	r3, [pc, #24]	; (801ef4c <siguienteTareaCola+0x28>)
 801ef32:	701a      	strb	r2, [r3, #0]
 801ef34:	4b05      	ldr	r3, [pc, #20]	; (801ef4c <siguienteTareaCola+0x28>)
 801ef36:	781b      	ldrb	r3, [r3, #0]
 801ef38:	461a      	mov	r2, r3
 801ef3a:	4b05      	ldr	r3, [pc, #20]	; (801ef50 <siguienteTareaCola+0x2c>)
 801ef3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 801ef40:	4618      	mov	r0, r3
 801ef42:	46bd      	mov	sp, r7
 801ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef48:	4770      	bx	lr
 801ef4a:	bf00      	nop
 801ef4c:	2000cf8c 	.word	0x2000cf8c
 801ef50:	2000cf30 	.word	0x2000cf30

0801ef54 <iniciarScheduler>:
**  Descripcion:    Inicia el scheduler
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarScheduler(void)
{
 801ef54:	b580      	push	{r7, lr}
 801ef56:	af00      	add	r7, sp, #0
    calcularEstadisticasTareas = configSistema()->estadisticasTareas || true;
 801ef58:	f7ff ff04 	bl	801ed64 <configSistema>
 801ef5c:	2201      	movs	r2, #1
 801ef5e:	4b03      	ldr	r3, [pc, #12]	; (801ef6c <iniciarScheduler+0x18>)
 801ef60:	701a      	strb	r2, [r3, #0]
    limpiarColaTareas();
 801ef62:	f7ff ff09 	bl	801ed78 <limpiarColaTareas>
}
 801ef66:	bf00      	nop
 801ef68:	bd80      	pop	{r7, pc}
 801ef6a:	bf00      	nop
 801ef6c:	2000cfa0 	.word	0x2000cfa0

0801ef70 <ajustarFrecuenciaEjecucionTarea>:
**  Descripcion:    Ajusta el periodo de una tarea
**  Parametros:     Tarea, periodo
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarFrecuenciaEjecucionTarea(idTarea_e idTarea, uint32_t periodo)
{
 801ef70:	b480      	push	{r7}
 801ef72:	b089      	sub	sp, #36	; 0x24
 801ef74:	af00      	add	r7, sp, #0
 801ef76:	4603      	mov	r3, r0
 801ef78:	6039      	str	r1, [r7, #0]
 801ef7a:	71fb      	strb	r3, [r7, #7]
    tarea_t *tarea = NULL;
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	61fb      	str	r3, [r7, #28]

    if (idTarea == TASK_SELF) {
 801ef80:	79fb      	ldrb	r3, [r7, #7]
 801ef82:	2b16      	cmp	r3, #22
 801ef84:	d10e      	bne.n	801efa4 <ajustarFrecuenciaEjecucionTarea+0x34>
        tarea = tareaActual;
 801ef86:	4b15      	ldr	r3, [pc, #84]	; (801efdc <ajustarFrecuenciaEjecucionTarea+0x6c>)
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	61fb      	str	r3, [r7, #28]
        tarea->periodo = MAX(LIMITE_FREC_US_SCHEDULER, (int32_t)periodo);  // Limite para prevenir la saturacion del scheduler
 801ef8c:	230a      	movs	r3, #10
 801ef8e:	613b      	str	r3, [r7, #16]
 801ef90:	683b      	ldr	r3, [r7, #0]
 801ef92:	60fb      	str	r3, [r7, #12]
 801ef94:	68fa      	ldr	r2, [r7, #12]
 801ef96:	693b      	ldr	r3, [r7, #16]
 801ef98:	429a      	cmp	r2, r3
 801ef9a:	bfb8      	it	lt
 801ef9c:	461a      	movlt	r2, r3
 801ef9e:	69fb      	ldr	r3, [r7, #28]
 801efa0:	60da      	str	r2, [r3, #12]
    }
    else if (idTarea < TAREA_CONTADOR) {
        tarea = &tareas[idTarea];
        tarea->periodo = MAX(LIMITE_FREC_US_SCHEDULER, (int32_t)periodo);  // Limite para prevenir la saturacion del scheduler
    }
}
 801efa2:	e015      	b.n	801efd0 <ajustarFrecuenciaEjecucionTarea+0x60>
    else if (idTarea < TAREA_CONTADOR) {
 801efa4:	79fb      	ldrb	r3, [r7, #7]
 801efa6:	2b14      	cmp	r3, #20
 801efa8:	d812      	bhi.n	801efd0 <ajustarFrecuenciaEjecucionTarea+0x60>
        tarea = &tareas[idTarea];
 801efaa:	79fb      	ldrb	r3, [r7, #7]
 801efac:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801efb0:	fb02 f303 	mul.w	r3, r2, r3
 801efb4:	4a0a      	ldr	r2, [pc, #40]	; (801efe0 <ajustarFrecuenciaEjecucionTarea+0x70>)
 801efb6:	4413      	add	r3, r2
 801efb8:	61fb      	str	r3, [r7, #28]
        tarea->periodo = MAX(LIMITE_FREC_US_SCHEDULER, (int32_t)periodo);  // Limite para prevenir la saturacion del scheduler
 801efba:	230a      	movs	r3, #10
 801efbc:	61bb      	str	r3, [r7, #24]
 801efbe:	683b      	ldr	r3, [r7, #0]
 801efc0:	617b      	str	r3, [r7, #20]
 801efc2:	697a      	ldr	r2, [r7, #20]
 801efc4:	69bb      	ldr	r3, [r7, #24]
 801efc6:	429a      	cmp	r2, r3
 801efc8:	bfb8      	it	lt
 801efca:	461a      	movlt	r2, r3
 801efcc:	69fb      	ldr	r3, [r7, #28]
 801efce:	60da      	str	r2, [r3, #12]
}
 801efd0:	bf00      	nop
 801efd2:	3724      	adds	r7, #36	; 0x24
 801efd4:	46bd      	mov	sp, r7
 801efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efda:	4770      	bx	lr
 801efdc:	2000cf88 	.word	0x2000cf88
 801efe0:	20000268 	.word	0x20000268

0801efe4 <calcularCargaScheduler>:
**  Descripcion:    Calcula la carga del scheduler
**  Parametros:     Tiempo actual en us
**  Retorno:        Ninguno
****************************************************************************************/
void calcularCargaScheduler(uint32_t tiempoActual)
{
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b082      	sub	sp, #8
 801efe8:	af00      	add	r7, sp, #0
 801efea:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    actualizarBitVidaScheduler(VERDE);
 801efec:	2004      	movs	r0, #4
 801efee:	f000 f85d 	bl	801f0ac <actualizarBitVidaScheduler>

    if (t1 > 0 || t2 > 0) {
 801eff2:	4b25      	ldr	r3, [pc, #148]	; (801f088 <calcularCargaScheduler+0xa4>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d103      	bne.n	801f002 <calcularCargaScheduler+0x1e>
 801effa:	4b24      	ldr	r3, [pc, #144]	; (801f08c <calcularCargaScheduler+0xa8>)
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	2b00      	cmp	r3, #0
 801f000:	d027      	beq.n	801f052 <calcularCargaScheduler+0x6e>
    	porcentaje = (float)(t1 + t2) / 100000.0;
 801f002:	4b21      	ldr	r3, [pc, #132]	; (801f088 <calcularCargaScheduler+0xa4>)
 801f004:	681a      	ldr	r2, [r3, #0]
 801f006:	4b21      	ldr	r3, [pc, #132]	; (801f08c <calcularCargaScheduler+0xa8>)
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	4413      	add	r3, r2
 801f00c:	ee07 3a90 	vmov	s15, r3
 801f010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f014:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801f090 <calcularCargaScheduler+0xac>
 801f018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f01c:	4b1d      	ldr	r3, [pc, #116]	; (801f094 <calcularCargaScheduler+0xb0>)
 801f01e:	edc3 7a00 	vstr	s15, [r3]
    	if (pMax < porcentaje)
 801f022:	4b1d      	ldr	r3, [pc, #116]	; (801f098 <calcularCargaScheduler+0xb4>)
 801f024:	ed93 7a00 	vldr	s14, [r3]
 801f028:	4b1a      	ldr	r3, [pc, #104]	; (801f094 <calcularCargaScheduler+0xb0>)
 801f02a:	edd3 7a00 	vldr	s15, [r3]
 801f02e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f036:	d503      	bpl.n	801f040 <calcularCargaScheduler+0x5c>
    		pMax = porcentaje;
 801f038:	4b16      	ldr	r3, [pc, #88]	; (801f094 <calcularCargaScheduler+0xb0>)
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	4a16      	ldr	r2, [pc, #88]	; (801f098 <calcularCargaScheduler+0xb4>)
 801f03e:	6013      	str	r3, [r2, #0]
    	t1 = 0;
 801f040:	4b11      	ldr	r3, [pc, #68]	; (801f088 <calcularCargaScheduler+0xa4>)
 801f042:	2200      	movs	r2, #0
 801f044:	601a      	str	r2, [r3, #0]
    	t2 = 0;
 801f046:	4b11      	ldr	r3, [pc, #68]	; (801f08c <calcularCargaScheduler+0xa8>)
 801f048:	2200      	movs	r2, #0
 801f04a:	601a      	str	r2, [r3, #0]
    	contador = 0;
 801f04c:	4b13      	ldr	r3, [pc, #76]	; (801f09c <calcularCargaScheduler+0xb8>)
 801f04e:	2200      	movs	r2, #0
 801f050:	601a      	str	r2, [r3, #0]
    }


    if (totalMuestraTareasEsperando > 0) {
 801f052:	4b13      	ldr	r3, [pc, #76]	; (801f0a0 <calcularCargaScheduler+0xbc>)
 801f054:	681b      	ldr	r3, [r3, #0]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d011      	beq.n	801f07e <calcularCargaScheduler+0x9a>
        porcentajeCargaSistema = 100 * totalTareasEsperando / totalMuestraTareasEsperando;
 801f05a:	4b12      	ldr	r3, [pc, #72]	; (801f0a4 <calcularCargaScheduler+0xc0>)
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	2264      	movs	r2, #100	; 0x64
 801f060:	fb03 f202 	mul.w	r2, r3, r2
 801f064:	4b0e      	ldr	r3, [pc, #56]	; (801f0a0 <calcularCargaScheduler+0xbc>)
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	fbb2 f3f3 	udiv	r3, r2, r3
 801f06c:	b2da      	uxtb	r2, r3
 801f06e:	4b0e      	ldr	r3, [pc, #56]	; (801f0a8 <calcularCargaScheduler+0xc4>)
 801f070:	701a      	strb	r2, [r3, #0]
        totalMuestraTareasEsperando = 0;
 801f072:	4b0b      	ldr	r3, [pc, #44]	; (801f0a0 <calcularCargaScheduler+0xbc>)
 801f074:	2200      	movs	r2, #0
 801f076:	601a      	str	r2, [r3, #0]
        totalTareasEsperando = 0;
 801f078:	4b0a      	ldr	r3, [pc, #40]	; (801f0a4 <calcularCargaScheduler+0xc0>)
 801f07a:	2200      	movs	r2, #0
 801f07c:	601a      	str	r2, [r3, #0]
    }

}
 801f07e:	bf00      	nop
 801f080:	3708      	adds	r7, #8
 801f082:	46bd      	mov	sp, r7
 801f084:	bd80      	pop	{r7, pc}
 801f086:	bf00      	nop
 801f088:	2000ac5c 	.word	0x2000ac5c
 801f08c:	2000ac60 	.word	0x2000ac60
 801f090:	47c35000 	.word	0x47c35000
 801f094:	2000ac54 	.word	0x2000ac54
 801f098:	2000ac58 	.word	0x2000ac58
 801f09c:	2000ac48 	.word	0x2000ac48
 801f0a0:	2000cf9c 	.word	0x2000cf9c
 801f0a4:	2000cf98 	.word	0x2000cf98
 801f0a8:	2000cf94 	.word	0x2000cf94

0801f0ac <actualizarBitVidaScheduler>:
**  Descripcion:    Actualiza el bit de vida
**  Parametros:     Color
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarBitVidaScheduler(colorRGB_e color)
{
 801f0ac:	b580      	push	{r7, lr}
 801f0ae:	b082      	sub	sp, #8
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	4603      	mov	r3, r0
 801f0b4:	71fb      	strb	r3, [r7, #7]
	if (bitVidaScheduler) {
 801f0b6:	4b0b      	ldr	r3, [pc, #44]	; (801f0e4 <actualizarBitVidaScheduler+0x38>)
 801f0b8:	781b      	ldrb	r3, [r3, #0]
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d007      	beq.n	801f0ce <actualizarBitVidaScheduler+0x22>
		escribirLedEstado(color);
 801f0be:	79fb      	ldrb	r3, [r7, #7]
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	f7f5 fa51 	bl	8014568 <escribirLedEstado>
		bitVidaScheduler = false;
 801f0c6:	4b07      	ldr	r3, [pc, #28]	; (801f0e4 <actualizarBitVidaScheduler+0x38>)
 801f0c8:	2200      	movs	r2, #0
 801f0ca:	701a      	strb	r2, [r3, #0]
	}
	else {
		escribirLedEstado(NEGRO);
		bitVidaScheduler = true;
	}
}
 801f0cc:	e005      	b.n	801f0da <actualizarBitVidaScheduler+0x2e>
		escribirLedEstado(NEGRO);
 801f0ce:	2000      	movs	r0, #0
 801f0d0:	f7f5 fa4a 	bl	8014568 <escribirLedEstado>
		bitVidaScheduler = true;
 801f0d4:	4b03      	ldr	r3, [pc, #12]	; (801f0e4 <actualizarBitVidaScheduler+0x38>)
 801f0d6:	2201      	movs	r2, #1
 801f0d8:	701a      	strb	r2, [r3, #0]
}
 801f0da:	bf00      	nop
 801f0dc:	3708      	adds	r7, #8
 801f0de:	46bd      	mov	sp, r7
 801f0e0:	bd80      	pop	{r7, pc}
 801f0e2:	bf00      	nop
 801f0e4:	2000ac44 	.word	0x2000ac44

0801f0e8 <scheduler>:
**  Descripcion:    Funcion de ejecucion de las tareas
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void scheduler(void)
{
 801f0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f0ec:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 801f0f0:	af00      	add	r7, sp, #0
    bool tareaTiempoRealEjecutada = false;
 801f0f2:	2300      	movs	r3, #0
 801f0f4:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
    int32_t tiempoHastaEjec = 0x7FFFFFFF;
 801f0f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f0fc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

    uint32_t tiempoActual = micros();
 801f100:	f7f8 fcea 	bl	8017ad8 <micros>
 801f104:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    if (!ini) {
 801f108:	4bd3      	ldr	r3, [pc, #844]	; (801f458 <scheduler+0x370>)
 801f10a:	781b      	ldrb	r3, [r3, #0]
 801f10c:	f083 0301 	eor.w	r3, r3, #1
 801f110:	b2db      	uxtb	r3, r3
 801f112:	2b00      	cmp	r3, #0
 801f114:	d006      	beq.n	801f124 <scheduler+0x3c>
    	tiempoIni = tiempoActual;
 801f116:	4ad1      	ldr	r2, [pc, #836]	; (801f45c <scheduler+0x374>)
 801f118:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801f11c:	6013      	str	r3, [r2, #0]
        ini = true;
 801f11e:	4ace      	ldr	r2, [pc, #824]	; (801f458 <scheduler+0x370>)
 801f120:	2301      	movs	r3, #1
 801f122:	7013      	strb	r3, [r2, #0]
    }

    if ((tiempoActual - tiempoIni) < 100000)
 801f124:	4bcd      	ldr	r3, [pc, #820]	; (801f45c <scheduler+0x374>)
 801f126:	681a      	ldr	r2, [r3, #0]
 801f128:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801f12c:	1a9a      	subs	r2, r3, r2
 801f12e:	4bcc      	ldr	r3, [pc, #816]	; (801f460 <scheduler+0x378>)
 801f130:	429a      	cmp	r2, r3
 801f132:	d804      	bhi.n	801f13e <scheduler+0x56>
        contador1++;
 801f134:	4bcb      	ldr	r3, [pc, #812]	; (801f464 <scheduler+0x37c>)
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	1c5a      	adds	r2, r3, #1
 801f13a:	4bca      	ldr	r3, [pc, #808]	; (801f464 <scheduler+0x37c>)
 801f13c:	601a      	str	r2, [r3, #0]

    // Actualizacion de las tareas en tiempo real
    for (tarea_t *tarea = primeraTareaCola(); tarea != NULL; tarea = siguienteTareaCola()) {
 801f13e:	f7ff fee1 	bl	801ef04 <primeraTareaCola>
 801f142:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 801f146:	e15f      	b.n	801f408 <scheduler+0x320>
	    if (tarea->prioridadEstatica != PRIORIDAD_TIEMPO_REAL)
 801f148:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f14c:	7c1b      	ldrb	r3, [r3, #16]
 801f14e:	2b06      	cmp	r3, #6
 801f150:	f040 8160 	bne.w	801f414 <scheduler+0x32c>
	        break;

        uint32_t tiempoEjecTiempoReal = tarea->ultimoTiempoEjec + tarea->periodo;
 801f154:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f158:	69da      	ldr	r2, [r3, #28]
 801f15a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f15e:	68db      	ldr	r3, [r3, #12]
 801f160:	4413      	add	r3, r2
 801f162:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        int32_t tiempoEjec = tiempoEjecTiempoReal - tiempoActual;
 801f166:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801f16a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801f16e:	1ad3      	subs	r3, r2, r3
 801f170:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

        if (tiempoEjec < tiempoHastaEjec)
 801f174:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801f178:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f17c:	429a      	cmp	r2, r3
 801f17e:	da03      	bge.n	801f188 <scheduler+0xa0>
            tiempoHastaEjec = tiempoEjec;
 801f180:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801f184:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

        if (tiempoEjec <= 0) {
 801f188:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	f300 8137 	bgt.w	801f400 <scheduler+0x318>
            tarea->ultimoPeriodoEjec = tiempoActual - tarea->ultimoTiempoEjec;
 801f192:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f196:	69da      	ldr	r2, [r3, #28]
 801f198:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801f19c:	1a9b      	subs	r3, r3, r2
 801f19e:	461a      	mov	r2, r3
 801f1a0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f1a4:	619a      	str	r2, [r3, #24]
            tarea->ultimoTiempoEjec = tiempoActual;
 801f1a6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f1aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801f1ae:	61d3      	str	r3, [r2, #28]

#if defined(USAR_ESTADISTICAS_TAREAS)
            if (calcularEstadisticasTareas) {
 801f1b0:	4bad      	ldr	r3, [pc, #692]	; (801f468 <scheduler+0x380>)
 801f1b2:	781b      	ldrb	r3, [r3, #0]
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	f000 8113 	beq.w	801f3e0 <scheduler+0x2f8>
                const uint32_t tiempoActualAntesLlamada = micros();
 801f1ba:	f7f8 fc8d 	bl	8017ad8 <micros>
 801f1be:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
                tarea->funTarea(tiempoActual);
 801f1c2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f1c6:	689b      	ldr	r3, [r3, #8]
 801f1c8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 801f1cc:	4798      	blx	r3
                const uint32_t tiempoEjecTarea = micros() - tiempoActualAntesLlamada;
 801f1ce:	f7f8 fc83 	bl	8017ad8 <micros>
 801f1d2:	4602      	mov	r2, r0
 801f1d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f1d8:	1ad3      	subs	r3, r2, r3
 801f1da:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
                tarea->sumaMovTiempoEjec += tiempoEjecTarea - tarea->sumaMovTiempoEjec / NUM_MUESTRAS_SUMA_SCHEDULER;
 801f1de:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f1e2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 801f1e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801f1ea:	2200      	movs	r2, #0
 801f1ec:	64bb      	str	r3, [r7, #72]	; 0x48
 801f1ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 801f1f0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f1f8:	f04f 0000 	mov.w	r0, #0
 801f1fc:	f04f 0100 	mov.w	r1, #0
 801f200:	0950      	lsrs	r0, r2, #5
 801f202:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 801f206:	0959      	lsrs	r1, r3, #5
 801f208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f20a:	ebb3 0800 	subs.w	r8, r3, r0
 801f20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f210:	eb63 0901 	sbc.w	r9, r3, r1
 801f214:	eb14 0308 	adds.w	r3, r4, r8
 801f218:	643b      	str	r3, [r7, #64]	; 0x40
 801f21a:	eb45 0309 	adc.w	r3, r5, r9
 801f21e:	647b      	str	r3, [r7, #68]	; 0x44
 801f220:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f224:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801f228:	e9c3 1208 	strd	r1, r2, [r3, #32]
                tarea->tiempoEjecucionTotal += tiempoEjecTarea;   // Tiempo consumido por el scheduler + tarea
 801f22c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f230:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801f234:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 801f238:	2000      	movs	r0, #0
 801f23a:	63b9      	str	r1, [r7, #56]	; 0x38
 801f23c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801f23e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801f242:	4621      	mov	r1, r4
 801f244:	1851      	adds	r1, r2, r1
 801f246:	6339      	str	r1, [r7, #48]	; 0x30
 801f248:	4629      	mov	r1, r5
 801f24a:	414b      	adcs	r3, r1
 801f24c:	637b      	str	r3, [r7, #52]	; 0x34
 801f24e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f252:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801f256:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
                tarea->tiempoMaxEjecucion = MAX(tarea->tiempoMaxEjecucion, tiempoEjecTarea);
 801f25a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f25e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801f262:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
 801f266:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801f26a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801f26e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f272:	2200      	movs	r2, #0
 801f274:	62bb      	str	r3, [r7, #40]	; 0x28
 801f276:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f278:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 801f27c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801f280:	4621      	mov	r1, r4
 801f282:	428a      	cmp	r2, r1
 801f284:	4629      	mov	r1, r5
 801f286:	eb73 0101 	sbcs.w	r1, r3, r1
 801f28a:	d201      	bcs.n	801f290 <scheduler+0x1a8>
 801f28c:	4622      	mov	r2, r4
 801f28e:	462b      	mov	r3, r5
 801f290:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 801f294:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                t1 = t1 + tiempoEjecTarea;
 801f298:	4b74      	ldr	r3, [pc, #464]	; (801f46c <scheduler+0x384>)
 801f29a:	681a      	ldr	r2, [r3, #0]
 801f29c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801f2a0:	441a      	add	r2, r3
 801f2a2:	4b72      	ldr	r3, [pc, #456]	; (801f46c <scheduler+0x384>)
 801f2a4:	601a      	str	r2, [r3, #0]
                if (tarea->cntHist < 100) {
 801f2a6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2aa:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f2ae:	2b63      	cmp	r3, #99	; 0x63
 801f2b0:	f200 809c 	bhi.w	801f3ec <scheduler+0x304>
                    tarea->periodoHist[tarea->cntHist] = tarea->ultimoPeriodoEjec;
 801f2b4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2b8:	f8d3 01c8 	ldr.w	r0, [r3, #456]	; 0x1c8
 801f2bc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2c0:	6999      	ldr	r1, [r3, #24]
 801f2c2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f2c6:	f100 030e 	add.w	r3, r0, #14
 801f2ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    tarea->cntHist++;
 801f2ce:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2d2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f2d6:	1c5a      	adds	r2, r3, #1
 801f2d8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2dc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

                    if (tarea->cntHist == 100) {
 801f2e0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2e4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f2e8:	2b64      	cmp	r3, #100	; 0x64
 801f2ea:	d17f      	bne.n	801f3ec <scheduler+0x304>
                    	if (tarea->calc) {
 801f2ec:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f2f0:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d068      	beq.n	801f3ca <scheduler+0x2e2>
							float tau = 0.0;
 801f2f8:	f04f 0300 	mov.w	r3, #0
 801f2fc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
							float dif[100];
							for (uint32_t cnt = 0; cnt < 100; cnt++) {
 801f300:	2300      	movs	r3, #0
 801f302:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801f306:	e039      	b.n	801f37c <scheduler+0x294>
								dif[cnt] = (float)(tarea->periodo - tarea->periodoHist[cnt]);
 801f308:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f30c:	68d9      	ldr	r1, [r3, #12]
 801f30e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f312:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f316:	330e      	adds	r3, #14
 801f318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f31c:	1acb      	subs	r3, r1, r3
 801f31e:	ee07 3a90 	vmov	s15, r3
 801f322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f326:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f32a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f32e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f332:	009b      	lsls	r3, r3, #2
 801f334:	4413      	add	r3, r2
 801f336:	edc3 7a00 	vstr	s15, [r3]
								tau = tau + (dif[cnt] * dif[cnt]);
 801f33a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f33e:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f342:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f346:	009b      	lsls	r3, r3, #2
 801f348:	4413      	add	r3, r2
 801f34a:	ed93 7a00 	vldr	s14, [r3]
 801f34e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f352:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f356:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f35a:	009b      	lsls	r3, r3, #2
 801f35c:	4413      	add	r3, r2
 801f35e:	edd3 7a00 	vldr	s15, [r3]
 801f362:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f366:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 801f36a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f36e:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
							for (uint32_t cnt = 0; cnt < 100; cnt++) {
 801f372:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f376:	3301      	adds	r3, #1
 801f378:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801f37c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f380:	2b63      	cmp	r3, #99	; 0x63
 801f382:	d9c1      	bls.n	801f308 <scheduler+0x220>
							}

							tau = sqrt(tau) / 100;
 801f384:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 801f388:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801f38c:	eeb0 0b47 	vmov.f64	d0, d7
 801f390:	f019 fefe 	bl	8039190 <sqrt>
 801f394:	eeb0 6b40 	vmov.f64	d6, d0
 801f398:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 801f450 <scheduler+0x368>
 801f39c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f3a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f3a4:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
							if (tau > tarea->tau)
 801f3a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f3ac:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 801f3b0:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 801f3b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3bc:	dd05      	ble.n	801f3ca <scheduler+0x2e2>
								tarea->tau = tau;
 801f3be:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f3c2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801f3c6:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
                    	}
                    	tarea->cntHist = 0;
 801f3ca:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f3ce:	2300      	movs	r3, #0
 801f3d0:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
                    	tarea->calc = true;
 801f3d4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f3d8:	2301      	movs	r3, #1
 801f3da:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
 801f3de:	e005      	b.n	801f3ec <scheduler+0x304>
                    }
                }
            }
            else
#endif
            tarea->funTarea(tiempoActual);
 801f3e0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f3e4:	689b      	ldr	r3, [r3, #8]
 801f3e6:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 801f3ea:	4798      	blx	r3

            tiempoHastaEjec -= tarea->tiempoMaxEjecucion;
 801f3ec:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 801f3f0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f3f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801f3f8:	4613      	mov	r3, r2
 801f3fa:	1acb      	subs	r3, r1, r3
 801f3fc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    for (tarea_t *tarea = primeraTareaCola(); tarea != NULL; tarea = siguienteTareaCola()) {
 801f400:	f7ff fd90 	bl	801ef24 <siguienteTareaCola>
 801f404:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 801f408:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	f47f ae9b 	bne.w	801f148 <scheduler+0x60>
 801f412:	e000      	b.n	801f416 <scheduler+0x32e>
	        break;
 801f414:	bf00      	nop
        }
    }

    // Actualizacion de las tareas no en tiempo real
    if (tareaTiempoRealEjecutada || tiempoHastaEjec > INTERVALO_GUARDA_TIEMPO_REAL) {
 801f416:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d104      	bne.n	801f428 <scheduler+0x340>
 801f41e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f422:	2b32      	cmp	r3, #50	; 0x32
 801f424:	f340 81b3 	ble.w	801f78e <scheduler+0x6a6>
        // Tarea para ser invocada
        tarea_t *tareaSeleccionada = NULL;
 801f428:	2300      	movs	r3, #0
 801f42a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
        uint16_t prioridadDinamicaTareaSeleccionada = 0;
 801f42e:	2300      	movs	r3, #0
 801f430:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232

        tiempoActual = micros();
 801f434:	f7f8 fb50 	bl	8017ad8 <micros>
 801f438:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

        // Actualizar la prioridad dinamica
        uint16_t tareasEnEspera = 0;
 801f43c:	2300      	movs	r3, #0
 801f43e:	f8a7 3230 	strh.w	r3, [r7, #560]	; 0x230
        for (tarea_t *tarea = primeraTareaCola(); tarea != NULL; tarea = siguienteTareaCola()) {
 801f442:	f7ff fd5f 	bl	801ef04 <primeraTareaCola>
 801f446:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
 801f44a:	e054      	b.n	801f4f6 <scheduler+0x40e>
 801f44c:	f3af 8000 	nop.w
 801f450:	00000000 	.word	0x00000000
 801f454:	40590000 	.word	0x40590000
 801f458:	2000ac50 	.word	0x2000ac50
 801f45c:	2000ac4c 	.word	0x2000ac4c
 801f460:	0001869f 	.word	0x0001869f
 801f464:	2000ac64 	.word	0x2000ac64
 801f468:	2000cfa0 	.word	0x2000cfa0
 801f46c:	2000ac5c 	.word	0x2000ac5c
        	if (tarea->prioridadEstatica == PRIORIDAD_TIEMPO_REAL)
 801f470:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f474:	7c1b      	ldrb	r3, [r3, #16]
 801f476:	2b06      	cmp	r3, #6
 801f478:	d038      	beq.n	801f4ec <scheduler+0x404>
        	    continue;

            // La prioridad dinamica es la edad de la ultima ejecucion (medida en periodos)
            // La edad de la tarea es calculada con la ultima ejecucion
            tarea->edadCiclosTarea = ((tiempoActual - tarea->ultimoTiempoEjec) / tarea->periodo);
 801f47a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f47e:	69db      	ldr	r3, [r3, #28]
 801f480:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801f484:	1ad2      	subs	r2, r2, r3
 801f486:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f48a:	68db      	ldr	r3, [r3, #12]
 801f48c:	fbb2 f3f3 	udiv	r3, r2, r3
 801f490:	b29b      	uxth	r3, r3
 801f492:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801f496:	8293      	strh	r3, [r2, #20]
            if (tarea->edadCiclosTarea > 0) {
 801f498:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f49c:	8a9b      	ldrh	r3, [r3, #20]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d013      	beq.n	801f4ca <scheduler+0x3e2>
                tarea->prioridadDinamica = 1 + tarea->prioridadEstatica * tarea->edadCiclosTarea;
 801f4a2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4a6:	7c1b      	ldrb	r3, [r3, #16]
 801f4a8:	b29a      	uxth	r2, r3
 801f4aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4ae:	8a9b      	ldrh	r3, [r3, #20]
 801f4b0:	fb12 f303 	smulbb	r3, r2, r3
 801f4b4:	b29b      	uxth	r3, r3
 801f4b6:	3301      	adds	r3, #1
 801f4b8:	b29b      	uxth	r3, r3
 801f4ba:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801f4be:	8253      	strh	r3, [r2, #18]
                tareasEnEspera++;
 801f4c0:	f8b7 3230 	ldrh.w	r3, [r7, #560]	; 0x230
 801f4c4:	3301      	adds	r3, #1
 801f4c6:	f8a7 3230 	strh.w	r3, [r7, #560]	; 0x230
            }

            if (tarea->prioridadDinamica > prioridadDinamicaTareaSeleccionada) {
 801f4ca:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4ce:	8a5b      	ldrh	r3, [r3, #18]
 801f4d0:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 801f4d4:	429a      	cmp	r2, r3
 801f4d6:	d20a      	bcs.n	801f4ee <scheduler+0x406>
                prioridadDinamicaTareaSeleccionada = tarea->prioridadDinamica;
 801f4d8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4dc:	8a5b      	ldrh	r3, [r3, #18]
 801f4de:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
                tareaSeleccionada = tarea;
 801f4e2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4e6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801f4ea:	e000      	b.n	801f4ee <scheduler+0x406>
        	    continue;
 801f4ec:	bf00      	nop
        for (tarea_t *tarea = primeraTareaCola(); tarea != NULL; tarea = siguienteTareaCola()) {
 801f4ee:	f7ff fd19 	bl	801ef24 <siguienteTareaCola>
 801f4f2:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
 801f4f6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d1b8      	bne.n	801f470 <scheduler+0x388>
            }
        }

        totalMuestraTareasEsperando++;
 801f4fe:	4baa      	ldr	r3, [pc, #680]	; (801f7a8 <scheduler+0x6c0>)
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	3301      	adds	r3, #1
 801f504:	4aa8      	ldr	r2, [pc, #672]	; (801f7a8 <scheduler+0x6c0>)
 801f506:	6013      	str	r3, [r2, #0]
        totalTareasEsperando += tareasEnEspera;
 801f508:	f8b7 2230 	ldrh.w	r2, [r7, #560]	; 0x230
 801f50c:	4ba7      	ldr	r3, [pc, #668]	; (801f7ac <scheduler+0x6c4>)
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	4413      	add	r3, r2
 801f512:	4aa6      	ldr	r2, [pc, #664]	; (801f7ac <scheduler+0x6c4>)
 801f514:	6013      	str	r3, [r2, #0]
        tareaActual = tareaSeleccionada;
 801f516:	4aa6      	ldr	r2, [pc, #664]	; (801f7b0 <scheduler+0x6c8>)
 801f518:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f51c:	6013      	str	r3, [r2, #0]

        if (tareaSeleccionada) {
 801f51e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f522:	2b00      	cmp	r3, #0
 801f524:	f000 8133 	beq.w	801f78e <scheduler+0x6a6>
            // Se ha encontrado una tarea que debe ser ejecutada
            tareaSeleccionada->ultimoPeriodoEjec = tiempoActual - tareaSeleccionada->ultimoTiempoEjec;
 801f528:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f52c:	69db      	ldr	r3, [r3, #28]
 801f52e:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801f532:	1ad3      	subs	r3, r2, r3
 801f534:	461a      	mov	r2, r3
 801f536:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f53a:	619a      	str	r2, [r3, #24]
            tareaSeleccionada->ultimoTiempoEjec = tiempoActual;
 801f53c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f540:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801f544:	61da      	str	r2, [r3, #28]
            tareaSeleccionada->prioridadDinamica = 0;
 801f546:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f54a:	2300      	movs	r3, #0
 801f54c:	8253      	strh	r3, [r2, #18]

            // Ejecuta la tarea
#if defined(USAR_ESTADISTICAS_TAREAS)
            if (calcularEstadisticasTareas) {
 801f54e:	4b99      	ldr	r3, [pc, #612]	; (801f7b4 <scheduler+0x6cc>)
 801f550:	781b      	ldrb	r3, [r3, #0]
 801f552:	2b00      	cmp	r3, #0
 801f554:	f000 8115 	beq.w	801f782 <scheduler+0x69a>
                const uint32_t tiempoActualAntesLlamada = micros();
 801f558:	f7f8 fabe 	bl	8017ad8 <micros>
 801f55c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

                tareaSeleccionada->funTarea(tiempoActualAntesLlamada);
 801f560:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f564:	689b      	ldr	r3, [r3, #8]
 801f566:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 801f56a:	4798      	blx	r3
                const uint32_t tiempoEjecTarea = micros() - tiempoActualAntesLlamada;
 801f56c:	f7f8 fab4 	bl	8017ad8 <micros>
 801f570:	4602      	mov	r2, r0
 801f572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f576:	1ad3      	subs	r3, r2, r3
 801f578:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                tareaSeleccionada->sumaMovTiempoEjec += tiempoEjecTarea - tareaSeleccionada->sumaMovTiempoEjec / NUM_MUESTRAS_SUMA_SCHEDULER;
 801f57c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f580:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 801f584:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f588:	2200      	movs	r2, #0
 801f58a:	623b      	str	r3, [r7, #32]
 801f58c:	627a      	str	r2, [r7, #36]	; 0x24
 801f58e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f592:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f596:	f04f 0000 	mov.w	r0, #0
 801f59a:	f04f 0100 	mov.w	r1, #0
 801f59e:	0950      	lsrs	r0, r2, #5
 801f5a0:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 801f5a4:	0959      	lsrs	r1, r3, #5
 801f5a6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801f5aa:	4643      	mov	r3, r8
 801f5ac:	ebb3 0a00 	subs.w	sl, r3, r0
 801f5b0:	464b      	mov	r3, r9
 801f5b2:	eb63 0b01 	sbc.w	fp, r3, r1
 801f5b6:	eb14 030a 	adds.w	r3, r4, sl
 801f5ba:	61bb      	str	r3, [r7, #24]
 801f5bc:	eb45 030b 	adc.w	r3, r5, fp
 801f5c0:	61fb      	str	r3, [r7, #28]
 801f5c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f5c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f5ca:	e9c3 1208 	strd	r1, r2, [r3, #32]
                tareaSeleccionada->tiempoEjecucionTotal += tiempoEjecTarea;   // Tiempo consumido por el scheduler + tarea
 801f5ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f5d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801f5d6:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 801f5da:	2000      	movs	r0, #0
 801f5dc:	6139      	str	r1, [r7, #16]
 801f5de:	6178      	str	r0, [r7, #20]
 801f5e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801f5e4:	4621      	mov	r1, r4
 801f5e6:	1851      	adds	r1, r2, r1
 801f5e8:	60b9      	str	r1, [r7, #8]
 801f5ea:	4629      	mov	r1, r5
 801f5ec:	eb43 0101 	adc.w	r1, r3, r1
 801f5f0:	60f9      	str	r1, [r7, #12]
 801f5f2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f5f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f5fa:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
                tareaSeleccionada->tiempoMaxEjecucion = MAX(tareaSeleccionada->tiempoMaxEjecucion, tiempoEjecTarea);
 801f5fe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f602:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801f606:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
 801f60a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f60e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801f612:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801f616:	2200      	movs	r2, #0
 801f618:	603b      	str	r3, [r7, #0]
 801f61a:	607a      	str	r2, [r7, #4]
 801f61c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 801f620:	e9d7 4500 	ldrd	r4, r5, [r7]
 801f624:	4621      	mov	r1, r4
 801f626:	428a      	cmp	r2, r1
 801f628:	4629      	mov	r1, r5
 801f62a:	eb73 0101 	sbcs.w	r1, r3, r1
 801f62e:	d201      	bcs.n	801f634 <scheduler+0x54c>
 801f630:	4622      	mov	r2, r4
 801f632:	462b      	mov	r3, r5
 801f634:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 801f638:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                if (tareaSeleccionada->cntHist < 100){
 801f63c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f640:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f644:	2b63      	cmp	r3, #99	; 0x63
 801f646:	f200 8094 	bhi.w	801f772 <scheduler+0x68a>
                    tareaSeleccionada->periodoHist[tareaSeleccionada->cntHist] = tareaSeleccionada->ultimoPeriodoEjec;
 801f64a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f64e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801f652:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f656:	6999      	ldr	r1, [r3, #24]
 801f658:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f65c:	320e      	adds	r2, #14
 801f65e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    tareaSeleccionada->cntHist++;
 801f662:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f666:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f66a:	1c5a      	adds	r2, r3, #1
 801f66c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f670:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                    if (tareaSeleccionada->cntHist == 100) {
 801f674:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f678:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801f67c:	2b64      	cmp	r3, #100	; 0x64
 801f67e:	d178      	bne.n	801f772 <scheduler+0x68a>
                    	if (tareaSeleccionada->calc) {
 801f680:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f684:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d068      	beq.n	801f75e <scheduler+0x676>
							float tau = 0.0;
 801f68c:	f04f 0300 	mov.w	r3, #0
 801f690:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
							float dif[100];
							for (uint32_t cnt = 0; cnt < 100; cnt++) {
 801f694:	2300      	movs	r3, #0
 801f696:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801f69a:	e039      	b.n	801f710 <scheduler+0x628>
								dif[cnt] = (float)(tareaSeleccionada->periodo - tareaSeleccionada->periodoHist[cnt]);
 801f69c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f6a0:	68da      	ldr	r2, [r3, #12]
 801f6a2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f6a6:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 801f6aa:	310e      	adds	r1, #14
 801f6ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f6b0:	1ad3      	subs	r3, r2, r3
 801f6b2:	ee07 3a90 	vmov	s15, r3
 801f6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f6be:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f6c2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f6c6:	009b      	lsls	r3, r3, #2
 801f6c8:	4413      	add	r3, r2
 801f6ca:	edc3 7a00 	vstr	s15, [r3]
								tau = tau + (dif[cnt] * dif[cnt]);
 801f6ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f6d2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f6d6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f6da:	009b      	lsls	r3, r3, #2
 801f6dc:	4413      	add	r3, r2
 801f6de:	ed93 7a00 	vldr	s14, [r3]
 801f6e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801f6e6:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f6ea:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f6ee:	009b      	lsls	r3, r3, #2
 801f6f0:	4413      	add	r3, r2
 801f6f2:	edd3 7a00 	vldr	s15, [r3]
 801f6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6fa:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 801f6fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f702:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
							for (uint32_t cnt = 0; cnt < 100; cnt++) {
 801f706:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f70a:	3301      	adds	r3, #1
 801f70c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801f710:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f714:	2b63      	cmp	r3, #99	; 0x63
 801f716:	d9c1      	bls.n	801f69c <scheduler+0x5b4>
							}

							tau = sqrt(tau) / 100;
 801f718:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 801f71c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801f720:	eeb0 0b47 	vmov.f64	d0, d7
 801f724:	f019 fd34 	bl	8039190 <sqrt>
 801f728:	eeb0 6b40 	vmov.f64	d6, d0
 801f72c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801f7a0 <scheduler+0x6b8>
 801f730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f734:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f738:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
							if (tau > tareaSeleccionada->tau)
 801f73c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f740:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 801f744:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 801f748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f750:	dd05      	ble.n	801f75e <scheduler+0x676>
							tareaSeleccionada->tau = tau;
 801f752:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f756:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801f75a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
                    	}
                    	tareaSeleccionada->cntHist = 0;
 801f75e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f762:	2200      	movs	r2, #0
 801f764:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                    	tareaSeleccionada->calc = true;
 801f768:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f76c:	2201      	movs	r2, #1
 801f76e:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
                    }
                }
                t2 = t2 + tiempoEjecTarea;
 801f772:	4b11      	ldr	r3, [pc, #68]	; (801f7b8 <scheduler+0x6d0>)
 801f774:	681a      	ldr	r2, [r3, #0]
 801f776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f77a:	4413      	add	r3, r2
 801f77c:	4a0e      	ldr	r2, [pc, #56]	; (801f7b8 <scheduler+0x6d0>)
 801f77e:	6013      	str	r3, [r2, #0]
            else
#endif
            tareaSeleccionada->funTarea(tiempoActual);
        }
    }
}
 801f780:	e005      	b.n	801f78e <scheduler+0x6a6>
            tareaSeleccionada->funTarea(tiempoActual);
 801f782:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f786:	689b      	ldr	r3, [r3, #8]
 801f788:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 801f78c:	4798      	blx	r3
}
 801f78e:	bf00      	nop
 801f790:	f507 7712 	add.w	r7, r7, #584	; 0x248
 801f794:	46bd      	mov	sp, r7
 801f796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f79a:	bf00      	nop
 801f79c:	f3af 8000 	nop.w
 801f7a0:	00000000 	.word	0x00000000
 801f7a4:	40590000 	.word	0x40590000
 801f7a8:	2000cf9c 	.word	0x2000cf9c
 801f7ac:	2000cf98 	.word	0x2000cf98
 801f7b0:	2000cf88 	.word	0x2000cf88
 801f7b4:	2000cfa0 	.word	0x2000cfa0
 801f7b8:	2000ac60 	.word	0x2000ac60

0801f7bc <iniciarTareas>:
**  Descripcion:    Inicia el scheduler y habilita las tareas
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarTareas(void)
{
 801f7bc:	b580      	push	{r7, lr}
 801f7be:	af00      	add	r7, sp, #0
    iniciarScheduler();
 801f7c0:	f7ff fbc8 	bl	801ef54 <iniciarScheduler>

    anadirTareaEnCola(&tareas[TAREA_SCHEDULER]);
 801f7c4:	481b      	ldr	r0, [pc, #108]	; (801f834 <iniciarTareas+0x78>)
 801f7c6:	f7ff faed 	bl	801eda4 <anadirTareaEnCola>
    anadirTareaEnCola(&tareas[TAREA_STACK]);
 801f7ca:	481b      	ldr	r0, [pc, #108]	; (801f838 <iniciarTareas+0x7c>)
 801f7cc:	f7ff faea 	bl	801eda4 <anadirTareaEnCola>

#ifdef USAR_ADC_INTERNO
    anadirTareaEnCola(&tareas[TAREA_ADC_INTERNO]);
 801f7d0:	481a      	ldr	r0, [pc, #104]	; (801f83c <iniciarTareas+0x80>)
 801f7d2:	f7ff fae7 	bl	801eda4 <anadirTareaEnCola>
#endif

#ifdef USAR_POWER_MODULE
    anadirTareaEnCola(&tareas[TAREA_LEER_POWER_MODULE]);
 801f7d6:	481a      	ldr	r0, [pc, #104]	; (801f840 <iniciarTareas+0x84>)
 801f7d8:	f7ff fae4 	bl	801eda4 <anadirTareaEnCola>
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_POWER_MODULE]);
 801f7dc:	4819      	ldr	r0, [pc, #100]	; (801f844 <iniciarTareas+0x88>)
 801f7de:	f7ff fae1 	bl	801eda4 <anadirTareaEnCola>
#endif

#ifdef USAR_IMU
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_IMU]);
 801f7e2:	4819      	ldr	r0, [pc, #100]	; (801f848 <iniciarTareas+0x8c>)
 801f7e4:	f7ff fade 	bl	801eda4 <anadirTareaEnCola>
  #ifdef LEER_IMU_SCHEDULER
    anadirTareaEnCola(&tareas[TAREA_LEER_IMU]);
 801f7e8:	4818      	ldr	r0, [pc, #96]	; (801f84c <iniciarTareas+0x90>)
 801f7ea:	f7ff fadb 	bl	801eda4 <anadirTareaEnCola>
  #endif
#endif

#ifdef USAR_BARO
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_BARO]);
 801f7ee:	4818      	ldr	r0, [pc, #96]	; (801f850 <iniciarTareas+0x94>)
 801f7f0:	f7ff fad8 	bl	801eda4 <anadirTareaEnCola>
  #ifdef LEER_BARO_SCHEDULER
    anadirTareaEnCola(&tareas[TAREA_LEER_BARO]);
 801f7f4:	4817      	ldr	r0, [pc, #92]	; (801f854 <iniciarTareas+0x98>)
 801f7f6:	f7ff fad5 	bl	801eda4 <anadirTareaEnCola>
  #endif
#endif

#ifdef USAR_MAG
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_MAG]);
 801f7fa:	4817      	ldr	r0, [pc, #92]	; (801f858 <iniciarTareas+0x9c>)
 801f7fc:	f7ff fad2 	bl	801eda4 <anadirTareaEnCola>
  #ifdef LEER_MAG_SCHEDULER
    anadirTareaEnCola(&tareas[TAREA_LEER_MAG]);
 801f800:	4816      	ldr	r0, [pc, #88]	; (801f85c <iniciarTareas+0xa0>)
 801f802:	f7ff facf 	bl	801eda4 <anadirTareaEnCola>
  #endif
#endif

#ifdef USAR_GPS
  #ifdef LEER_GPS_SCHEDULER
    anadirTareaEnCola(&tareas[TAREA_LEER_GPS]);
 801f806:	4816      	ldr	r0, [pc, #88]	; (801f860 <iniciarTareas+0xa4>)
 801f808:	f7ff facc 	bl	801eda4 <anadirTareaEnCola>
  #endif
#endif

#ifdef USAR_RADIO
    anadirTareaEnCola(&tareas[TAREA_LEER_RADIO]);
 801f80c:	4815      	ldr	r0, [pc, #84]	; (801f864 <iniciarTareas+0xa8>)
 801f80e:	f7ff fac9 	bl	801eda4 <anadirTareaEnCola>
#endif

    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_RC]);
 801f812:	4815      	ldr	r0, [pc, #84]	; (801f868 <iniciarTareas+0xac>)
 801f814:	f7ff fac6 	bl	801eda4 <anadirTareaEnCola>

    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_VEL_ANGULAR_FC]);
 801f818:	4814      	ldr	r0, [pc, #80]	; (801f86c <iniciarTareas+0xb0>)
 801f81a:	f7ff fac3 	bl	801eda4 <anadirTareaEnCola>
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_ACTITUD_FC]);
 801f81e:	4814      	ldr	r0, [pc, #80]	; (801f870 <iniciarTareas+0xb4>)
 801f820:	f7ff fac0 	bl	801eda4 <anadirTareaEnCola>
    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_POSICION_FC]);
 801f824:	4813      	ldr	r0, [pc, #76]	; (801f874 <iniciarTareas+0xb8>)
 801f826:	f7ff fabd 	bl	801eda4 <anadirTareaEnCola>

    anadirTareaEnCola(&tareas[TAREA_ACTUALIZAR_TELEMETRIA]);
 801f82a:	4813      	ldr	r0, [pc, #76]	; (801f878 <iniciarTareas+0xbc>)
 801f82c:	f7ff faba 	bl	801eda4 <anadirTareaEnCola>
}
 801f830:	bf00      	nop
 801f832:	bd80      	pop	{r7, pc}
 801f834:	20000268 	.word	0x20000268
 801f838:	20000440 	.word	0x20000440
 801f83c:	20000618 	.word	0x20000618
 801f840:	200007f0 	.word	0x200007f0
 801f844:	200009c8 	.word	0x200009c8
 801f848:	200014d8 	.word	0x200014d8
 801f84c:	200016b0 	.word	0x200016b0
 801f850:	20000ba0 	.word	0x20000ba0
 801f854:	20000d78 	.word	0x20000d78
 801f858:	20000f50 	.word	0x20000f50
 801f85c:	20001128 	.word	0x20001128
 801f860:	20001c38 	.word	0x20001c38
 801f864:	20001e10 	.word	0x20001e10
 801f868:	20001fe8 	.word	0x20001fe8
 801f86c:	200021c0 	.word	0x200021c0
 801f870:	20002398 	.word	0x20002398
 801f874:	20002570 	.word	0x20002570
 801f878:	20002748 	.word	0x20002748
 801f87c:	00000000 	.word	0x00000000

0801f880 <iniciarBaroBosch>:
**  Descripcion:    Inicia el barometro
**  Parametros:     Puntero al barometro
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarBaroBosch(baro_t *dBaro)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b086      	sub	sp, #24
 801f884:	af00      	add	r7, sp, #0
 801f886:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    baroBosch_t *driver = &baroBosch[dBaro->numBaro];
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	781b      	ldrb	r3, [r3, #0]
 801f88c:	461a      	mov	r2, r3
 801f88e:	2368      	movs	r3, #104	; 0x68
 801f890:	fb02 f303 	mul.w	r3, r2, r3
 801f894:	4a82      	ldr	r2, [pc, #520]	; (801faa0 <iniciarBaroBosch+0x220>)
 801f896:	4413      	add	r3, r2
 801f898:	617b      	str	r3, [r7, #20]
    dBaro->driver = driver;
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	697a      	ldr	r2, [r7, #20]
 801f89e:	605a      	str	r2, [r3, #4]

    // Iniciamos y configuramos el bus
    iniciarBusBaroBosch(&dBaro->bus);
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	3301      	adds	r3, #1
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f000 f905 	bl	801fab4 <iniciarBusBaroBosch>

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 801f8aa:	2268      	movs	r2, #104	; 0x68
 801f8ac:	2100      	movs	r1, #0
 801f8ae:	6978      	ldr	r0, [r7, #20]
 801f8b0:	f015 fcf6 	bl	80352a0 <memset>

    // Leemos la PROM y validamos que son datos correctos
    if (!leerPromBaroBosch(&dBaro->bus, driver))
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	3301      	adds	r3, #1
 801f8b8:	6979      	ldr	r1, [r7, #20]
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	f000 f91c 	bl	801faf8 <leerPromBaroBosch>
 801f8c0:	4603      	mov	r3, r0
 801f8c2:	f083 0301 	eor.w	r3, r3, #1
 801f8c6:	b2db      	uxtb	r3, r3
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d001      	beq.n	801f8d0 <iniciarBaroBosch+0x50>
        return false;
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	e0c0      	b.n	801fa52 <iniciarBaroBosch+0x1d2>

    float c3,c4,b1;

    c3 = 160.0 * pow(2, -15) * driver->AC3;
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f8d6:	ee07 3a90 	vmov	s15, r3
 801f8da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f8de:	ed9f 6b60 	vldr	d6, [pc, #384]	; 801fa60 <iniciarBaroBosch+0x1e0>
 801f8e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f8e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f8ea:	edc7 7a04 	vstr	s15, [r7, #16]
    c4 = pow(10, -3) * pow(2, -15) * driver->AC4;
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	8a5b      	ldrh	r3, [r3, #18]
 801f8f2:	ee07 3a90 	vmov	s15, r3
 801f8f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f8fa:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 801fa68 <iniciarBaroBosch+0x1e8>
 801f8fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f906:	edc7 7a03 	vstr	s15, [r7, #12]
    b1 = pow(160, 2) * pow(2, -30) * driver->B1;
 801f90a:	697b      	ldr	r3, [r7, #20]
 801f90c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f910:	ee07 3a90 	vmov	s15, r3
 801f914:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f918:	ed9f 6b55 	vldr	d6, [pc, #340]	; 801fa70 <iniciarBaroBosch+0x1f0>
 801f91c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f920:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f924:	edc7 7a02 	vstr	s15, [r7, #8]
    driver->c5 = (pow(2, -15) / 160) * driver->AC5;
 801f928:	697b      	ldr	r3, [r7, #20]
 801f92a:	8a9b      	ldrh	r3, [r3, #20]
 801f92c:	ee07 3a90 	vmov	s15, r3
 801f930:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f934:	ed9f 6b50 	vldr	d6, [pc, #320]	; 801fa78 <iniciarBaroBosch+0x1f8>
 801f938:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f93c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f940:	697b      	ldr	r3, [r7, #20]
 801f942:	edc3 7a06 	vstr	s15, [r3, #24]
    driver->c6 = driver->AC6;
 801f946:	697b      	ldr	r3, [r7, #20]
 801f948:	8adb      	ldrh	r3, [r3, #22]
 801f94a:	ee07 3a90 	vmov	s15, r3
 801f94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f952:	697b      	ldr	r3, [r7, #20]
 801f954:	edc3 7a07 	vstr	s15, [r3, #28]
    driver->mc = (pow(2, 11) / pow(160, 2)) * driver->MC;
 801f958:	697b      	ldr	r3, [r7, #20]
 801f95a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801f95e:	ee07 3a90 	vmov	s15, r3
 801f962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f966:	ed9f 6b46 	vldr	d6, [pc, #280]	; 801fa80 <iniciarBaroBosch+0x200>
 801f96a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f96e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f972:	697b      	ldr	r3, [r7, #20]
 801f974:	edc3 7a08 	vstr	s15, [r3, #32]
    driver->md = driver->MD / 160.0;
 801f978:	697b      	ldr	r3, [r7, #20]
 801f97a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f97e:	ee07 3a90 	vmov	s15, r3
 801f982:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f986:	ed9f 5b40 	vldr	d5, [pc, #256]	; 801fa88 <iniciarBaroBosch+0x208>
 801f98a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f98e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f992:	697b      	ldr	r3, [r7, #20]
 801f994:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    driver->x0 = driver->AC1;
 801f998:	697b      	ldr	r3, [r7, #20]
 801f99a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f99e:	ee07 3a90 	vmov	s15, r3
 801f9a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f9a6:	697b      	ldr	r3, [r7, #20]
 801f9a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    driver->x1 = 160.0 * pow(2, -13) * driver->AC2;
 801f9ac:	697b      	ldr	r3, [r7, #20]
 801f9ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f9b2:	ee07 3a90 	vmov	s15, r3
 801f9b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f9ba:	ed9f 6b35 	vldr	d6, [pc, #212]	; 801fa90 <iniciarBaroBosch+0x210>
 801f9be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9c6:	697b      	ldr	r3, [r7, #20]
 801f9c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    driver->x2 = pow(160, 2) * pow(2, -25) * driver->B2;
 801f9cc:	697b      	ldr	r3, [r7, #20]
 801f9ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801f9d2:	ee07 3a90 	vmov	s15, r3
 801f9d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f9da:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 801fa98 <iniciarBaroBosch+0x218>
 801f9de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9e6:	697b      	ldr	r3, [r7, #20]
 801f9e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    driver->y0 = c4 * pow(2, 15);
 801f9ec:	edd7 7a03 	vldr	s15, [r7, #12]
 801f9f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801faa4 <iniciarBaroBosch+0x224>
 801f9f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f9f8:	697b      	ldr	r3, [r7, #20]
 801f9fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    driver->y1 = c4 * c3;
 801f9fe:	ed97 7a03 	vldr	s14, [r7, #12]
 801fa02:	edd7 7a04 	vldr	s15, [r7, #16]
 801fa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fa0a:	697b      	ldr	r3, [r7, #20]
 801fa0c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    driver->y2 = c4 * b1;
 801fa10:	ed97 7a03 	vldr	s14, [r7, #12]
 801fa14:	edd7 7a02 	vldr	s15, [r7, #8]
 801fa18:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fa1c:	697b      	ldr	r3, [r7, #20]
 801fa1e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    driver->p0 = (3791.0 - 8.0) / 1600.0;
 801fa22:	697b      	ldr	r3, [r7, #20]
 801fa24:	4a20      	ldr	r2, [pc, #128]	; (801faa8 <iniciarBaroBosch+0x228>)
 801fa26:	641a      	str	r2, [r3, #64]	; 0x40
    driver->p1 = 1.0 - 7357.0 * pow(2, -20);
 801fa28:	697b      	ldr	r3, [r7, #20]
 801fa2a:	4a20      	ldr	r2, [pc, #128]	; (801faac <iniciarBaroBosch+0x22c>)
 801fa2c:	645a      	str	r2, [r3, #68]	; 0x44
    driver->p2 = 3038.0 * 100.0 * pow(2, -36);
 801fa2e:	697b      	ldr	r3, [r7, #20]
 801fa30:	4a1f      	ldr	r2, [pc, #124]	; (801fab0 <iniciarBaroBosch+0x230>)
 801fa32:	649a      	str	r2, [r3, #72]	; 0x48

    // Asignamos los comandos
    driver->comandoP = CMD_ADC_P_RES_1_BARO_BOSCH;
 801fa34:	697b      	ldr	r3, [r7, #20]
 801fa36:	2274      	movs	r2, #116	; 0x74
 801fa38:	701a      	strb	r2, [r3, #0]
    driver->comandoT = CMD_ADC_T_BARO_BOSCH;
 801fa3a:	697b      	ldr	r3, [r7, #20]
 801fa3c:	222e      	movs	r2, #46	; 0x2e
 801fa3e:	705a      	strb	r2, [r3, #1]

    // Enviamos el comando de lectura de la temperatura
    escribirRegistroBus(&dBaro->bus, CMD_REG_CONTROL_BARO_BOSCH, driver->comandoT);
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	1c58      	adds	r0, r3, #1
 801fa44:	697b      	ldr	r3, [r7, #20]
 801fa46:	785b      	ldrb	r3, [r3, #1]
 801fa48:	461a      	mov	r2, r3
 801fa4a:	21f4      	movs	r1, #244	; 0xf4
 801fa4c:	f7f5 fca2 	bl	8015394 <escribirRegistroBus>

    return true;
 801fa50:	2301      	movs	r3, #1
}
 801fa52:	4618      	mov	r0, r3
 801fa54:	3718      	adds	r7, #24
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}
 801fa5a:	bf00      	nop
 801fa5c:	f3af 8000 	nop.w
 801fa60:	00000000 	.word	0x00000000
 801fa64:	3f740000 	.word	0x3f740000
 801fa68:	d2f1a9fc 	.word	0xd2f1a9fc
 801fa6c:	3e60624d 	.word	0x3e60624d
 801fa70:	00000000 	.word	0x00000000
 801fa74:	3ef90000 	.word	0x3ef90000
 801fa78:	9999999a 	.word	0x9999999a
 801fa7c:	3e899999 	.word	0x3e899999
 801fa80:	47ae147b 	.word	0x47ae147b
 801fa84:	3fb47ae1 	.word	0x3fb47ae1
 801fa88:	00000000 	.word	0x00000000
 801fa8c:	40640000 	.word	0x40640000
 801fa90:	00000000 	.word	0x00000000
 801fa94:	3f940000 	.word	0x3f940000
 801fa98:	00000000 	.word	0x00000000
 801fa9c:	3f490000 	.word	0x3f490000
 801faa0:	2000ac68 	.word	0x2000ac68
 801faa4:	47000000 	.word	0x47000000
 801faa8:	401751ec 	.word	0x401751ec
 801faac:	3f7e3430 	.word	0x3f7e3430
 801fab0:	36945700 	.word	0x36945700

0801fab4 <iniciarBusBaroBosch>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBusBaroBosch(bus_t *bus)
{
 801fab4:	b580      	push	{r7, lr}
 801fab6:	b082      	sub	sp, #8
 801fab8:	af00      	add	r7, sp, #0
 801faba:	6078      	str	r0, [r7, #4]
    if (bus->tipo == BUS_SPI) {
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	f993 3000 	ldrsb.w	r3, [r3]
 801fac2:	2b01      	cmp	r3, #1
 801fac4:	d114      	bne.n	801faf0 <iniciarBusBaroBosch+0x3c>
        configurarIO(bus->bus_u.spi.pinCS, CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL), 0);
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	789b      	ldrb	r3, [r3, #2]
 801faca:	2200      	movs	r2, #0
 801facc:	f240 3101 	movw	r1, #769	; 0x301
 801fad0:	4618      	mov	r0, r3
 801fad2:	f7f6 fc6d 	bl	80163b0 <configurarIO>
        escribirIO(bus->bus_u.spi.pinCS, true);
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	789b      	ldrb	r3, [r3, #2]
 801fada:	2101      	movs	r1, #1
 801fadc:	4618      	mov	r0, r3
 801fade:	f7f6 fd47 	bl	8016570 <escribirIO>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_ESTANDAR);
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fae8:	2110      	movs	r1, #16
 801faea:	4618      	mov	r0, r3
 801faec:	f7f7 fd83 	bl	80175f6 <ajustarRelojSPI>
    }
}
 801faf0:	bf00      	nop
 801faf2:	3708      	adds	r7, #8
 801faf4:	46bd      	mov	sp, r7
 801faf6:	bd80      	pop	{r7, pc}

0801faf8 <leerPromBaroBosch>:
**  Descripcion:    Lee la PROM entera y comprueba si el CRC es correcto
**  Parametros:     Bus, array donde se guarda la PROM
**  Retorno:        True si el CRC es correcto
****************************************************************************************/
bool leerPromBaroBosch(bus_t *bus, baroBosch_t *dBaro)
{
 801faf8:	b580      	push	{r7, lr}
 801fafa:	b086      	sub	sp, #24
 801fafc:	af00      	add	r7, sp, #0
 801fafe:	6078      	str	r0, [r7, #4]
 801fb00:	6039      	str	r1, [r7, #0]
    bool estado[11];

    estado[0] = leerIntWordPromBaroBosch(bus, 0, &dBaro->AC1);
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	3302      	adds	r3, #2
 801fb06:	461a      	mov	r2, r3
 801fb08:	2100      	movs	r1, #0
 801fb0a:	6878      	ldr	r0, [r7, #4]
 801fb0c:	f000 f8a0 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fb10:	4603      	mov	r3, r0
 801fb12:	733b      	strb	r3, [r7, #12]
    estado[1] = leerIntWordPromBaroBosch(bus, 1, &dBaro->AC2);
 801fb14:	683b      	ldr	r3, [r7, #0]
 801fb16:	3304      	adds	r3, #4
 801fb18:	461a      	mov	r2, r3
 801fb1a:	2101      	movs	r1, #1
 801fb1c:	6878      	ldr	r0, [r7, #4]
 801fb1e:	f000 f897 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fb22:	4603      	mov	r3, r0
 801fb24:	737b      	strb	r3, [r7, #13]
    estado[2] = leerIntWordPromBaroBosch(bus, 2, &dBaro->AC3);
 801fb26:	683b      	ldr	r3, [r7, #0]
 801fb28:	3306      	adds	r3, #6
 801fb2a:	461a      	mov	r2, r3
 801fb2c:	2102      	movs	r1, #2
 801fb2e:	6878      	ldr	r0, [r7, #4]
 801fb30:	f000 f88e 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fb34:	4603      	mov	r3, r0
 801fb36:	73bb      	strb	r3, [r7, #14]
    estado[3] = leerWordPromBaroBosch(bus, 3, &dBaro->AC4);
 801fb38:	683b      	ldr	r3, [r7, #0]
 801fb3a:	3312      	adds	r3, #18
 801fb3c:	461a      	mov	r2, r3
 801fb3e:	2103      	movs	r1, #3
 801fb40:	6878      	ldr	r0, [r7, #4]
 801fb42:	f000 f85b 	bl	801fbfc <leerWordPromBaroBosch>
 801fb46:	4603      	mov	r3, r0
 801fb48:	73fb      	strb	r3, [r7, #15]
    estado[4] = leerWordPromBaroBosch(bus, 4, &dBaro->AC5);
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	3314      	adds	r3, #20
 801fb4e:	461a      	mov	r2, r3
 801fb50:	2104      	movs	r1, #4
 801fb52:	6878      	ldr	r0, [r7, #4]
 801fb54:	f000 f852 	bl	801fbfc <leerWordPromBaroBosch>
 801fb58:	4603      	mov	r3, r0
 801fb5a:	743b      	strb	r3, [r7, #16]
    estado[5] = leerWordPromBaroBosch(bus, 5, &dBaro->AC6);
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	3316      	adds	r3, #22
 801fb60:	461a      	mov	r2, r3
 801fb62:	2105      	movs	r1, #5
 801fb64:	6878      	ldr	r0, [r7, #4]
 801fb66:	f000 f849 	bl	801fbfc <leerWordPromBaroBosch>
 801fb6a:	4603      	mov	r3, r0
 801fb6c:	747b      	strb	r3, [r7, #17]
    estado[6] = leerIntWordPromBaroBosch(bus, 6, &dBaro->B1);
 801fb6e:	683b      	ldr	r3, [r7, #0]
 801fb70:	3308      	adds	r3, #8
 801fb72:	461a      	mov	r2, r3
 801fb74:	2106      	movs	r1, #6
 801fb76:	6878      	ldr	r0, [r7, #4]
 801fb78:	f000 f86a 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fb7c:	4603      	mov	r3, r0
 801fb7e:	74bb      	strb	r3, [r7, #18]
    estado[7] = leerIntWordPromBaroBosch(bus, 7, &dBaro->B2);
 801fb80:	683b      	ldr	r3, [r7, #0]
 801fb82:	330a      	adds	r3, #10
 801fb84:	461a      	mov	r2, r3
 801fb86:	2107      	movs	r1, #7
 801fb88:	6878      	ldr	r0, [r7, #4]
 801fb8a:	f000 f861 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fb8e:	4603      	mov	r3, r0
 801fb90:	74fb      	strb	r3, [r7, #19]
    estado[8] = leerIntWordPromBaroBosch(bus, 8, &dBaro->MB);
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	330c      	adds	r3, #12
 801fb96:	461a      	mov	r2, r3
 801fb98:	2108      	movs	r1, #8
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	f000 f858 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fba0:	4603      	mov	r3, r0
 801fba2:	753b      	strb	r3, [r7, #20]
    estado[9] = leerIntWordPromBaroBosch(bus, 9, &dBaro->MC);
 801fba4:	683b      	ldr	r3, [r7, #0]
 801fba6:	330e      	adds	r3, #14
 801fba8:	461a      	mov	r2, r3
 801fbaa:	2109      	movs	r1, #9
 801fbac:	6878      	ldr	r0, [r7, #4]
 801fbae:	f000 f84f 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fbb2:	4603      	mov	r3, r0
 801fbb4:	757b      	strb	r3, [r7, #21]
    estado[10] = leerIntWordPromBaroBosch(bus, 10, &dBaro->MD);
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	3310      	adds	r3, #16
 801fbba:	461a      	mov	r2, r3
 801fbbc:	210a      	movs	r1, #10
 801fbbe:	6878      	ldr	r0, [r7, #4]
 801fbc0:	f000 f846 	bl	801fc50 <leerIntWordPromBaroBosch>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	75bb      	strb	r3, [r7, #22]

    for (uint8_t i = 0; i < 11; i++) {
 801fbc8:	2300      	movs	r3, #0
 801fbca:	75fb      	strb	r3, [r7, #23]
 801fbcc:	e00e      	b.n	801fbec <leerPromBaroBosch+0xf4>
        if (estado[i] == false)
 801fbce:	7dfb      	ldrb	r3, [r7, #23]
 801fbd0:	3318      	adds	r3, #24
 801fbd2:	443b      	add	r3, r7
 801fbd4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801fbd8:	f083 0301 	eor.w	r3, r3, #1
 801fbdc:	b2db      	uxtb	r3, r3
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d001      	beq.n	801fbe6 <leerPromBaroBosch+0xee>
            return false;
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	e006      	b.n	801fbf4 <leerPromBaroBosch+0xfc>
    for (uint8_t i = 0; i < 11; i++) {
 801fbe6:	7dfb      	ldrb	r3, [r7, #23]
 801fbe8:	3301      	adds	r3, #1
 801fbea:	75fb      	strb	r3, [r7, #23]
 801fbec:	7dfb      	ldrb	r3, [r7, #23]
 801fbee:	2b0a      	cmp	r3, #10
 801fbf0:	d9ed      	bls.n	801fbce <leerPromBaroBosch+0xd6>
    }

    return true;
 801fbf2:	2301      	movs	r3, #1
}
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	3718      	adds	r7, #24
 801fbf8:	46bd      	mov	sp, r7
 801fbfa:	bd80      	pop	{r7, pc}

0801fbfc <leerWordPromBaroBosch>:
**  Descripcion:    Lee una word de la PROM
**  Parametros:     Bus, numero de word a leer, dato leido
**  Retorno:        True si ok
****************************************************************************************/
bool leerWordPromBaroBosch(bus_t *bus, uint8_t word, uint16_t *dato)
{
 801fbfc:	b580      	push	{r7, lr}
 801fbfe:	b086      	sub	sp, #24
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	60f8      	str	r0, [r7, #12]
 801fc04:	460b      	mov	r3, r1
 801fc06:	607a      	str	r2, [r7, #4]
 801fc08:	72fb      	strb	r3, [r7, #11]
    const uint8_t reg = CMD_PROM_RD_BARO_BOSCH + (word << 1);
 801fc0a:	7afb      	ldrb	r3, [r7, #11]
 801fc0c:	005b      	lsls	r3, r3, #1
 801fc0e:	b2db      	uxtb	r3, r3
 801fc10:	3b56      	subs	r3, #86	; 0x56
 801fc12:	75fb      	strb	r3, [r7, #23]

    uint8_t val[2];
    if (!leerBufferRegistroBus(bus, reg, val, 2))
 801fc14:	f107 0214 	add.w	r2, r7, #20
 801fc18:	7df9      	ldrb	r1, [r7, #23]
 801fc1a:	2302      	movs	r3, #2
 801fc1c:	68f8      	ldr	r0, [r7, #12]
 801fc1e:	f7f5 fc0e 	bl	801543e <leerBufferRegistroBus>
 801fc22:	4603      	mov	r3, r0
 801fc24:	f083 0301 	eor.w	r3, r3, #1
 801fc28:	b2db      	uxtb	r3, r3
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d001      	beq.n	801fc32 <leerWordPromBaroBosch+0x36>
        return false;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	e00a      	b.n	801fc48 <leerWordPromBaroBosch+0x4c>

    *dato = (val[0] << 8) | val[1];
 801fc32:	7d3b      	ldrb	r3, [r7, #20]
 801fc34:	021b      	lsls	r3, r3, #8
 801fc36:	b21a      	sxth	r2, r3
 801fc38:	7d7b      	ldrb	r3, [r7, #21]
 801fc3a:	b21b      	sxth	r3, r3
 801fc3c:	4313      	orrs	r3, r2
 801fc3e:	b21b      	sxth	r3, r3
 801fc40:	b29a      	uxth	r2, r3
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	801a      	strh	r2, [r3, #0]
    return true;
 801fc46:	2301      	movs	r3, #1
}
 801fc48:	4618      	mov	r0, r3
 801fc4a:	3718      	adds	r7, #24
 801fc4c:	46bd      	mov	sp, r7
 801fc4e:	bd80      	pop	{r7, pc}

0801fc50 <leerIntWordPromBaroBosch>:
**  Descripcion:    Lee una word de la PROM
**  Parametros:     Bus, numero de word a leer, dato leido
**  Retorno:        True si ok
****************************************************************************************/
bool leerIntWordPromBaroBosch(bus_t *bus, uint8_t word, int16_t *dato)
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b086      	sub	sp, #24
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	60f8      	str	r0, [r7, #12]
 801fc58:	460b      	mov	r3, r1
 801fc5a:	607a      	str	r2, [r7, #4]
 801fc5c:	72fb      	strb	r3, [r7, #11]
    const uint8_t reg = CMD_PROM_RD_BARO_BOSCH + (word << 1);
 801fc5e:	7afb      	ldrb	r3, [r7, #11]
 801fc60:	005b      	lsls	r3, r3, #1
 801fc62:	b2db      	uxtb	r3, r3
 801fc64:	3b56      	subs	r3, #86	; 0x56
 801fc66:	75fb      	strb	r3, [r7, #23]

    uint8_t val[2];
    if (!leerBufferRegistroBus(bus, reg, val, 2))
 801fc68:	f107 0214 	add.w	r2, r7, #20
 801fc6c:	7df9      	ldrb	r1, [r7, #23]
 801fc6e:	2302      	movs	r3, #2
 801fc70:	68f8      	ldr	r0, [r7, #12]
 801fc72:	f7f5 fbe4 	bl	801543e <leerBufferRegistroBus>
 801fc76:	4603      	mov	r3, r0
 801fc78:	f083 0301 	eor.w	r3, r3, #1
 801fc7c:	b2db      	uxtb	r3, r3
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d001      	beq.n	801fc86 <leerIntWordPromBaroBosch+0x36>
        return false;
 801fc82:	2300      	movs	r3, #0
 801fc84:	e009      	b.n	801fc9a <leerIntWordPromBaroBosch+0x4a>

    *dato = (val[0] << 8) | val[1];
 801fc86:	7d3b      	ldrb	r3, [r7, #20]
 801fc88:	021b      	lsls	r3, r3, #8
 801fc8a:	b21a      	sxth	r2, r3
 801fc8c:	7d7b      	ldrb	r3, [r7, #21]
 801fc8e:	b21b      	sxth	r3, r3
 801fc90:	4313      	orrs	r3, r2
 801fc92:	b21a      	sxth	r2, r3
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	801a      	strh	r2, [r3, #0]
    return true;
 801fc98:	2301      	movs	r3, #1
}
 801fc9a:	4618      	mov	r0, r3
 801fc9c:	3718      	adds	r7, #24
 801fc9e:	46bd      	mov	sp, r7
 801fca0:	bd80      	pop	{r7, pc}

0801fca2 <leer16bitsAdcBaroBosch>:
**  Descripcion:    Lee el ADC del sensor
**  Parametros:     Bus, dato leido
**  Retorno:        True si ok
****************************************************************************************/
bool leer16bitsAdcBaroBosch(bus_t *bus, uint32_t *adc)
{
 801fca2:	b580      	push	{r7, lr}
 801fca4:	b084      	sub	sp, #16
 801fca6:	af00      	add	r7, sp, #0
 801fca8:	6078      	str	r0, [r7, #4]
 801fcaa:	6039      	str	r1, [r7, #0]
    uint8_t val[2];

    if (!leerBufferRegistroBus(bus, CMD_ADC_READ_BARO_BOSCH, val, 2))
 801fcac:	f107 020c 	add.w	r2, r7, #12
 801fcb0:	2302      	movs	r3, #2
 801fcb2:	21f6      	movs	r1, #246	; 0xf6
 801fcb4:	6878      	ldr	r0, [r7, #4]
 801fcb6:	f7f5 fbc2 	bl	801543e <leerBufferRegistroBus>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	f083 0301 	eor.w	r3, r3, #1
 801fcc0:	b2db      	uxtb	r3, r3
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d001      	beq.n	801fcca <leer16bitsAdcBaroBosch+0x28>
        return false;
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	e007      	b.n	801fcda <leer16bitsAdcBaroBosch+0x38>

    *adc = val[0] * 256 + val[1];
 801fcca:	7b3b      	ldrb	r3, [r7, #12]
 801fccc:	021b      	lsls	r3, r3, #8
 801fcce:	7b7a      	ldrb	r2, [r7, #13]
 801fcd0:	4413      	add	r3, r2
 801fcd2:	461a      	mov	r2, r3
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	601a      	str	r2, [r3, #0]
    return true;
 801fcd8:	2301      	movs	r3, #1
}
 801fcda:	4618      	mov	r0, r3
 801fcdc:	3710      	adds	r7, #16
 801fcde:	46bd      	mov	sp, r7
 801fce0:	bd80      	pop	{r7, pc}

0801fce2 <leer24bitsAdcBaroBosch>:
**  Descripcion:    Lee el ADC del sensor
**  Parametros:     Bus, dato leido
**  Retorno:        True si ok
****************************************************************************************/
bool leer24bitsAdcBaroBosch(bus_t *bus, uint32_t *adc)
{
 801fce2:	b580      	push	{r7, lr}
 801fce4:	b084      	sub	sp, #16
 801fce6:	af00      	add	r7, sp, #0
 801fce8:	6078      	str	r0, [r7, #4]
 801fcea:	6039      	str	r1, [r7, #0]
    uint8_t val[3];

    if (!leerBufferRegistroBus(bus, CMD_ADC_READ_BARO_BOSCH, val, 3))
 801fcec:	f107 020c 	add.w	r2, r7, #12
 801fcf0:	2303      	movs	r3, #3
 801fcf2:	21f6      	movs	r1, #246	; 0xf6
 801fcf4:	6878      	ldr	r0, [r7, #4]
 801fcf6:	f7f5 fba2 	bl	801543e <leerBufferRegistroBus>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	f083 0301 	eor.w	r3, r3, #1
 801fd00:	b2db      	uxtb	r3, r3
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d001      	beq.n	801fd0a <leer24bitsAdcBaroBosch+0x28>
        return false;
 801fd06:	2300      	movs	r3, #0
 801fd08:	e00d      	b.n	801fd26 <leer24bitsAdcBaroBosch+0x44>

    *adc = val[0] * 256 + val[1] + val[0] / 256;
 801fd0a:	7b3b      	ldrb	r3, [r7, #12]
 801fd0c:	021b      	lsls	r3, r3, #8
 801fd0e:	7b7a      	ldrb	r2, [r7, #13]
 801fd10:	441a      	add	r2, r3
 801fd12:	7b3b      	ldrb	r3, [r7, #12]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	da00      	bge.n	801fd1a <leer24bitsAdcBaroBosch+0x38>
 801fd18:	33ff      	adds	r3, #255	; 0xff
 801fd1a:	121b      	asrs	r3, r3, #8
 801fd1c:	4413      	add	r3, r2
 801fd1e:	461a      	mov	r2, r3
 801fd20:	683b      	ldr	r3, [r7, #0]
 801fd22:	601a      	str	r2, [r3, #0]
    return true;
 801fd24:	2301      	movs	r3, #1
}
 801fd26:	4618      	mov	r0, r3
 801fd28:	3710      	adds	r7, #16
 801fd2a:	46bd      	mov	sp, r7
 801fd2c:	bd80      	pop	{r7, pc}

0801fd2e <leerBaroBosch>:
**  Descripcion:    Lee la presion y la temperatura
**  Parametros:     Puntero al barometro
**  Retorno:        Ninguno
****************************************************************************************/
void leerBaroBosch(baro_t *dBaro)
{
 801fd2e:	b580      	push	{r7, lr}
 801fd30:	b086      	sub	sp, #24
 801fd32:	af00      	add	r7, sp, #0
 801fd34:	6078      	str	r0, [r7, #4]
    float aP, aT;
    uint8_t cuentaP, cuentaT;
    baroBosch_t *driver = dBaro->driver;
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	685b      	ldr	r3, [r3, #4]
 801fd3a:	617b      	str	r3, [r7, #20]

    if (driver->acumuladorP.contador == 0)
 801fd3c:	697b      	ldr	r3, [r7, #20]
 801fd3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d047      	beq.n	801fdd6 <leerBaroBosch+0xa8>
        return;

    aP = driver->acumuladorP.acumulado;
 801fd46:	697b      	ldr	r3, [r7, #20]
 801fd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd4a:	613b      	str	r3, [r7, #16]
    aT = driver->acumuladorT.acumulado;
 801fd4c:	697b      	ldr	r3, [r7, #20]
 801fd4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801fd50:	60fb      	str	r3, [r7, #12]
    cuentaP = driver->acumuladorP.contador;
 801fd52:	697b      	ldr	r3, [r7, #20]
 801fd54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fd58:	72fb      	strb	r3, [r7, #11]
    cuentaT = driver->acumuladorT.contador;
 801fd5a:	697b      	ldr	r3, [r7, #20]
 801fd5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801fd60:	72bb      	strb	r3, [r7, #10]
    memset(&driver->acumuladorP, 0, sizeof(driver->acumuladorP));
 801fd62:	697b      	ldr	r3, [r7, #20]
 801fd64:	3354      	adds	r3, #84	; 0x54
 801fd66:	2208      	movs	r2, #8
 801fd68:	2100      	movs	r1, #0
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f015 fa98 	bl	80352a0 <memset>
    memset(&driver->acumuladorT, 0, sizeof(driver->acumuladorT));
 801fd70:	697b      	ldr	r3, [r7, #20]
 801fd72:	335c      	adds	r3, #92	; 0x5c
 801fd74:	2208      	movs	r2, #8
 801fd76:	2100      	movs	r1, #0
 801fd78:	4618      	mov	r0, r3
 801fd7a:	f015 fa91 	bl	80352a0 <memset>

    if (cuentaP != 0)
 801fd7e:	7afb      	ldrb	r3, [r7, #11]
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d00b      	beq.n	801fd9c <leerBaroBosch+0x6e>
        driver->presionRaw = (aP) / cuentaP;
 801fd84:	7afb      	ldrb	r3, [r7, #11]
 801fd86:	ee07 3a90 	vmov	s15, r3
 801fd8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fd8e:	edd7 6a04 	vldr	s13, [r7, #16]
 801fd92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    if (cuentaT != 0)
 801fd9c:	7abb      	ldrb	r3, [r7, #10]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d00b      	beq.n	801fdba <leerBaroBosch+0x8c>
        driver->temperaturaRaw = (aT) / cuentaT;
 801fda2:	7abb      	ldrb	r3, [r7, #10]
 801fda4:	ee07 3a90 	vmov	s15, r3
 801fda8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fdac:	edd7 6a03 	vldr	s13, [r7, #12]
 801fdb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fdb4:	697b      	ldr	r3, [r7, #20]
 801fdb6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

    if (cuentaP != 0 || cuentaT != 0) {
 801fdba:	7afb      	ldrb	r3, [r7, #11]
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d102      	bne.n	801fdc6 <leerBaroBosch+0x98>
 801fdc0:	7abb      	ldrb	r3, [r7, #10]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d008      	beq.n	801fdd8 <leerBaroBosch+0xaa>
        calcularBaroBosch(dBaro);
 801fdc6:	6878      	ldr	r0, [r7, #4]
 801fdc8:	f000 f8a8 	bl	801ff1c <calcularBaroBosch>
        dBaro->nuevaMedida = true;
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	2201      	movs	r2, #1
 801fdd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 801fdd4:	e000      	b.n	801fdd8 <leerBaroBosch+0xaa>
        return;
 801fdd6:	bf00      	nop
    }
}
 801fdd8:	3718      	adds	r7, #24
 801fdda:	46bd      	mov	sp, r7
 801fddc:	bd80      	pop	{r7, pc}
	...

0801fde0 <actualizarBaroBosch>:
**  Descripcion:    Actualiza las lecturas del barometro
**  Parametros:     Puntero al barometro
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarBaroBosch(baro_t *dBaro)
{
 801fde0:	b580      	push	{r7, lr}
 801fde2:	b088      	sub	sp, #32
 801fde4:	af00      	add	r7, sp, #0
 801fde6:	6078      	str	r0, [r7, #4]
    baroBosch_t *driver = dBaro->driver;
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	685b      	ldr	r3, [r3, #4]
 801fdec:	61bb      	str	r3, [r7, #24]
    uint8_t sigComando;
    uint8_t sigEstado;
    uint32_t adc;
    float baroRaw;

    if (driver->estado == 0)
 801fdee:	69bb      	ldr	r3, [r7, #24]
 801fdf0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d10a      	bne.n	801fe0e <actualizarBaroBosch+0x2e>
        estado = leer16bitsAdcBaroBosch(&dBaro->bus, &adc);
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	3301      	adds	r3, #1
 801fdfc:	f107 020c 	add.w	r2, r7, #12
 801fe00:	4611      	mov	r1, r2
 801fe02:	4618      	mov	r0, r3
 801fe04:	f7ff ff4d 	bl	801fca2 <leer16bitsAdcBaroBosch>
 801fe08:	4603      	mov	r3, r0
 801fe0a:	77fb      	strb	r3, [r7, #31]
 801fe0c:	e009      	b.n	801fe22 <actualizarBaroBosch+0x42>
    else
        estado = leer24bitsAdcBaroBosch(&dBaro->bus, &adc);
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	3301      	adds	r3, #1
 801fe12:	f107 020c 	add.w	r2, r7, #12
 801fe16:	4611      	mov	r1, r2
 801fe18:	4618      	mov	r0, r3
 801fe1a:	f7ff ff62 	bl	801fce2 <leer24bitsAdcBaroBosch>
 801fe1e:	4603      	mov	r3, r0
 801fe20:	77fb      	strb	r3, [r7, #31]

    if (adc == 0 || estado == false)
 801fe22:	68fb      	ldr	r3, [r7, #12]
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d005      	beq.n	801fe34 <actualizarBaroBosch+0x54>
 801fe28:	7ffb      	ldrb	r3, [r7, #31]
 801fe2a:	f083 0301 	eor.w	r3, r3, #1
 801fe2e:	b2db      	uxtb	r3, r3
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d004      	beq.n	801fe3e <actualizarBaroBosch+0x5e>
        sigEstado = driver->estado;
 801fe34:	69bb      	ldr	r3, [r7, #24]
 801fe36:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801fe3a:	77bb      	strb	r3, [r7, #30]
 801fe3c:	e00f      	b.n	801fe5e <actualizarBaroBosch+0x7e>
    else
        sigEstado = (driver->estado + 1) % 5;
 801fe3e:	69bb      	ldr	r3, [r7, #24]
 801fe40:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801fe44:	1c5a      	adds	r2, r3, #1
 801fe46:	4b34      	ldr	r3, [pc, #208]	; (801ff18 <actualizarBaroBosch+0x138>)
 801fe48:	fb83 1302 	smull	r1, r3, r3, r2
 801fe4c:	1059      	asrs	r1, r3, #1
 801fe4e:	17d3      	asrs	r3, r2, #31
 801fe50:	1ac9      	subs	r1, r1, r3
 801fe52:	460b      	mov	r3, r1
 801fe54:	009b      	lsls	r3, r3, #2
 801fe56:	440b      	add	r3, r1
 801fe58:	1ad1      	subs	r1, r2, r3
 801fe5a:	460b      	mov	r3, r1
 801fe5c:	77bb      	strb	r3, [r7, #30]

    // Enviamos el comando que toque
    sigComando = sigEstado == 0 ? driver->comandoT : driver->comandoP;
 801fe5e:	7fbb      	ldrb	r3, [r7, #30]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	d102      	bne.n	801fe6a <actualizarBaroBosch+0x8a>
 801fe64:	69bb      	ldr	r3, [r7, #24]
 801fe66:	785b      	ldrb	r3, [r3, #1]
 801fe68:	e001      	b.n	801fe6e <actualizarBaroBosch+0x8e>
 801fe6a:	69bb      	ldr	r3, [r7, #24]
 801fe6c:	781b      	ldrb	r3, [r3, #0]
 801fe6e:	75fb      	strb	r3, [r7, #23]
    escribirRegistroBus(&dBaro->bus, CMD_REG_CONTROL_BARO_BOSCH, sigComando);
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	3301      	adds	r3, #1
 801fe74:	7dfa      	ldrb	r2, [r7, #23]
 801fe76:	21f4      	movs	r1, #244	; 0xf4
 801fe78:	4618      	mov	r0, r3
 801fe7a:	f7f5 fa8b 	bl	8015394 <escribirRegistroBus>

    // Si la medida ha sido mala descartamos la siguiente
    if (adc == 0 || estado == false) {
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d005      	beq.n	801fe90 <actualizarBaroBosch+0xb0>
 801fe84:	7ffb      	ldrb	r3, [r7, #31]
 801fe86:	f083 0301 	eor.w	r3, r3, #1
 801fe8a:	b2db      	uxtb	r3, r3
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d004      	beq.n	801fe9a <actualizarBaroBosch+0xba>
        driver->descartarLect = true;
 801fe90:	69bb      	ldr	r3, [r7, #24]
 801fe92:	2201      	movs	r2, #1
 801fe94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        return;
 801fe98:	e03b      	b.n	801ff12 <actualizarBaroBosch+0x132>
    }

    if (driver->descartarLect) {
 801fe9a:	69bb      	ldr	r3, [r7, #24]
 801fe9c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d008      	beq.n	801feb6 <actualizarBaroBosch+0xd6>
        driver->descartarLect = false;
 801fea4:	69bb      	ldr	r3, [r7, #24]
 801fea6:	2200      	movs	r2, #0
 801fea8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        driver->estado = sigEstado;
 801feac:	69bb      	ldr	r3, [r7, #24]
 801feae:	7fba      	ldrb	r2, [r7, #30]
 801feb0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        return;
 801feb4:	e02d      	b.n	801ff12 <actualizarBaroBosch+0x132>
    }

    baroRaw = (float)adc;
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	ee07 3a90 	vmov	s15, r3
 801febc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fec0:	edc7 7a04 	vstr	s15, [r7, #16]
    dBaro->timing.ultimaActualizacion = micros();
 801fec4:	f7f7 fe08 	bl	8017ad8 <micros>
 801fec8:	4602      	mov	r2, r0
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (driver->estado == 0)
 801fece:	69bb      	ldr	r3, [r7, #24]
 801fed0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d108      	bne.n	801feea <actualizarBaroBosch+0x10a>
    	acumularLectura(&driver->acumuladorT, baroRaw, 100);
 801fed8:	69bb      	ldr	r3, [r7, #24]
 801feda:	335c      	adds	r3, #92	; 0x5c
 801fedc:	2164      	movs	r1, #100	; 0x64
 801fede:	ed97 0a04 	vldr	s0, [r7, #16]
 801fee2:	4618      	mov	r0, r3
 801fee4:	f008 fa36 	bl	8028354 <acumularLectura>
 801fee8:	e00f      	b.n	801ff0a <actualizarBaroBosch+0x12a>

    else if (presionBaroOk(dBaro, baroRaw))
 801feea:	ed97 0a04 	vldr	s0, [r7, #16]
 801feee:	6878      	ldr	r0, [r7, #4]
 801fef0:	f000 ff94 	bl	8020e1c <presionBaroOk>
 801fef4:	4603      	mov	r3, r0
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d007      	beq.n	801ff0a <actualizarBaroBosch+0x12a>
    	acumularLectura(&driver->acumuladorP, baroRaw, 100);
 801fefa:	69bb      	ldr	r3, [r7, #24]
 801fefc:	3354      	adds	r3, #84	; 0x54
 801fefe:	2164      	movs	r1, #100	; 0x64
 801ff00:	ed97 0a04 	vldr	s0, [r7, #16]
 801ff04:	4618      	mov	r0, r3
 801ff06:	f008 fa25 	bl	8028354 <acumularLectura>

    driver->estado = sigEstado;
 801ff0a:	69bb      	ldr	r3, [r7, #24]
 801ff0c:	7fba      	ldrb	r2, [r7, #30]
 801ff0e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 801ff12:	3720      	adds	r7, #32
 801ff14:	46bd      	mov	sp, r7
 801ff16:	bd80      	pop	{r7, pc}
 801ff18:	66666667 	.word	0x66666667

0801ff1c <calcularBaroBosch>:
**  Descripcion:    Compensa las lecturas con los valores de calibracion
**  Parametros:     Driver Bosch
**  Retorno:        Ninguno
****************************************************************************************/
void calcularBaroBosch(baro_t *dBaro)
{
 801ff1c:	b580      	push	{r7, lr}
 801ff1e:	ed2d 8b02 	vpush	{d8}
 801ff22:	b08c      	sub	sp, #48	; 0x30
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	6078      	str	r0, [r7, #4]
    baroBosch_t *driver = dBaro->driver;
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	685b      	ldr	r3, [r3, #4]
 801ff2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    float presion, temperatura;
    float a, s, x, y, z;
    uint32_t tiempo = micros();
 801ff2e:	f7f7 fdd3 	bl	8017ad8 <micros>
 801ff32:	62b8      	str	r0, [r7, #40]	; 0x28

    // Formulas de http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf
    // Vamos a realizar los calculos con flotantes para mayor rapidez y precision
    a = driver->c5 * (driver->temperaturaRaw - driver->c6);
 801ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff36:	ed93 7a06 	vldr	s14, [r3, #24]
 801ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff3c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff42:	edd3 7a07 	vldr	s15, [r3, #28]
 801ff46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801ff4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ff4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    temperatura = a + (driver->mc / (a + driver->md));                    // Temperatura en ºC
 801ff52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff54:	edd3 6a08 	vldr	s13, [r3, #32]
 801ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff5a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801ff5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ff62:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ff66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ff6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801ff6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ff72:	edc7 7a08 	vstr	s15, [r7, #32]

    s = temperatura - 25.0;
 801ff76:	edd7 7a08 	vldr	s15, [r7, #32]
 801ff7a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 801ff7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff82:	edc7 7a07 	vstr	s15, [r7, #28]
    x = (driver->x2 * pow(s, 2)) + (driver->x1 * s) + driver->x0;
 801ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff88:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ff8c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801ff90:	edd7 7a07 	vldr	s15, [r7, #28]
 801ff94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ff98:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 801ff9c:	eeb0 0b47 	vmov.f64	d0, d7
 801ffa0:	f018 fade 	bl	8038560 <pow>
 801ffa4:	eeb0 7b40 	vmov.f64	d7, d0
 801ffa8:	ee28 6b07 	vmul.f64	d6, d8, d7
 801ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ffb2:	edd7 7a07 	vldr	s15, [r7, #28]
 801ffb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ffba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ffbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffc4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801ffc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ffcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 801ffd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ffd4:	edc7 7a06 	vstr	s15, [r7, #24]
    y = (driver->y2 * pow(s, 2)) + (driver->y1 * s) + driver->y0;
 801ffd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffda:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801ffde:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801ffe2:	edd7 7a07 	vldr	s15, [r7, #28]
 801ffe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ffea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 801ffee:	eeb0 0b47 	vmov.f64	d0, d7
 801fff2:	f018 fab5 	bl	8038560 <pow>
 801fff6:	eeb0 7b40 	vmov.f64	d7, d0
 801fffa:	ee28 6b07 	vmul.f64	d6, d8, d7
 801fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020000:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8020004:	edd7 7a07 	vldr	s15, [r7, #28]
 8020008:	ee67 7a27 	vmul.f32	s15, s14, s15
 802000c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8020010:	ee36 6b07 	vadd.f64	d6, d6, d7
 8020014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020016:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 802001a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802001e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8020022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020026:	edc7 7a05 	vstr	s15, [r7, #20]
    z = (driver->presionRaw - x) / y;
 802002a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802002c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8020030:	edd7 7a06 	vldr	s15, [r7, #24]
 8020034:	ee77 6a67 	vsub.f32	s13, s14, s15
 8020038:	ed97 7a05 	vldr	s14, [r7, #20]
 802003c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020040:	edc7 7a04 	vstr	s15, [r7, #16]
    presion = (driver->p2 * pow(z, 2)) + (driver->p1 * z) + driver->p0;   // Presion en mBar
 8020044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020046:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 802004a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 802004e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020052:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8020056:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 802005a:	eeb0 0b47 	vmov.f64	d0, d7
 802005e:	f018 fa7f 	bl	8038560 <pow>
 8020062:	eeb0 7b40 	vmov.f64	d7, d0
 8020066:	ee28 6b07 	vmul.f64	d6, d8, d7
 802006a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802006c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8020070:	edd7 7a04 	vldr	s15, [r7, #16]
 8020074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020078:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802007c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8020080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020082:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8020086:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802008a:	ee36 7b07 	vadd.f64	d7, d6, d7
 802008e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020092:	edc7 7a03 	vstr	s15, [r7, #12]

    if (dBaro->presion != presion)
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	edd3 7a03 	vldr	s15, [r3, #12]
 802009c:	ed97 7a03 	vldr	s14, [r7, #12]
 80200a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80200a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200a8:	d002      	beq.n	80200b0 <calcularBaroBosch+0x194>
    	dBaro->timing.ultimoCambio = tiempo;
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80200ae:	635a      	str	r2, [r3, #52]	; 0x34

    dBaro->presion = presion;
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	68fa      	ldr	r2, [r7, #12]
 80200b4:	60da      	str	r2, [r3, #12]
    dBaro->temperatura = temperatura;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	6a3a      	ldr	r2, [r7, #32]
 80200ba:	611a      	str	r2, [r3, #16]
    dBaro->timing.ultimaMedida = tiempo;
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80200c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80200c2:	bf00      	nop
 80200c4:	3730      	adds	r7, #48	; 0x30
 80200c6:	46bd      	mov	sp, r7
 80200c8:	ecbd 8b02 	vpop	{d8}
 80200cc:	bd80      	pop	{r7, pc}
	...

080200d0 <iniciarBaroTEConectivity>:
**  Descripcion:    Inicia el barometro
**  Parametros:     Puntero al barometro
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarBaroTEConectivity(baro_t *dBaro)
{
 80200d0:	b580      	push	{r7, lr}
 80200d2:	b084      	sub	sp, #16
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    baroTEConectivity_t *driver = &baroTEConectivity[dBaro->numBaro];
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	781b      	ldrb	r3, [r3, #0]
 80200dc:	461a      	mov	r2, r3
 80200de:	4613      	mov	r3, r2
 80200e0:	005b      	lsls	r3, r3, #1
 80200e2:	4413      	add	r3, r2
 80200e4:	011b      	lsls	r3, r3, #4
 80200e6:	4a1d      	ldr	r2, [pc, #116]	; (802015c <iniciarBaroTEConectivity+0x8c>)
 80200e8:	4413      	add	r3, r2
 80200ea:	60fb      	str	r3, [r7, #12]
    dBaro->driver = driver;
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	68fa      	ldr	r2, [r7, #12]
 80200f0:	605a      	str	r2, [r3, #4]

    // Iniciamos y configuramos el bus
    iniciarBusBaroTEConectivity(&dBaro->bus);
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	3301      	adds	r3, #1
 80200f6:	4618      	mov	r0, r3
 80200f8:	f000 f832 	bl	8020160 <iniciarBusBaroTEConectivity>

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 80200fc:	2230      	movs	r2, #48	; 0x30
 80200fe:	2100      	movs	r1, #0
 8020100:	68f8      	ldr	r0, [r7, #12]
 8020102:	f015 f8cd 	bl	80352a0 <memset>

    // Reseteamos el barometro
    resetearBaroTEConectivity(&dBaro->bus);
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	3301      	adds	r3, #1
 802010a:	4618      	mov	r0, r3
 802010c:	f000 f84a 	bl	80201a4 <resetearBaroTEConectivity>

    // Leemos la PROM y validamos que son datos correctos
    if (!leerPromBaroTEConectivity(&dBaro->bus, driver->prom))
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	1c5a      	adds	r2, r3, #1
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	3302      	adds	r3, #2
 8020118:	4619      	mov	r1, r3
 802011a:	4610      	mov	r0, r2
 802011c:	f000 f852 	bl	80201c4 <leerPromBaroTEConectivity>
 8020120:	4603      	mov	r3, r0
 8020122:	f083 0301 	eor.w	r3, r3, #1
 8020126:	b2db      	uxtb	r3, r3
 8020128:	2b00      	cmp	r3, #0
 802012a:	d001      	beq.n	8020130 <iniciarBaroTEConectivity+0x60>
        return false;
 802012c:	2300      	movs	r3, #0
 802012e:	e011      	b.n	8020154 <iniciarBaroTEConectivity+0x84>

    driver->comandoP = CMD_ADC_P_RES_3_BARO_TEC;
 8020130:	68fb      	ldr	r3, [r7, #12]
 8020132:	2246      	movs	r2, #70	; 0x46
 8020134:	701a      	strb	r2, [r3, #0]
    driver->comandoT = CMD_ADC_T_RES_3_BARO_TEC;
 8020136:	68fb      	ldr	r3, [r7, #12]
 8020138:	2256      	movs	r2, #86	; 0x56
 802013a:	705a      	strb	r2, [r3, #1]

    // Enviamos el comando de lectura de la temperatura
    escribirRegistroBus(&dBaro->bus, driver->comandoP, 1);
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	1c58      	adds	r0, r3, #1
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	781b      	ldrb	r3, [r3, #0]
 8020144:	2201      	movs	r2, #1
 8020146:	4619      	mov	r1, r3
 8020148:	f7f5 f924 	bl	8015394 <escribirRegistroBus>
    delay(10);
 802014c:	200a      	movs	r0, #10
 802014e:	f7f7 fd22 	bl	8017b96 <delay>

    return true;
 8020152:	2301      	movs	r3, #1
}
 8020154:	4618      	mov	r0, r3
 8020156:	3710      	adds	r7, #16
 8020158:	46bd      	mov	sp, r7
 802015a:	bd80      	pop	{r7, pc}
 802015c:	2000ae70 	.word	0x2000ae70

08020160 <iniciarBusBaroTEConectivity>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBusBaroTEConectivity(bus_t *bus)
{
 8020160:	b580      	push	{r7, lr}
 8020162:	b082      	sub	sp, #8
 8020164:	af00      	add	r7, sp, #0
 8020166:	6078      	str	r0, [r7, #4]
    if (bus->tipo == BUS_SPI) {
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	f993 3000 	ldrsb.w	r3, [r3]
 802016e:	2b01      	cmp	r3, #1
 8020170:	d114      	bne.n	802019c <iniciarBusBaroTEConectivity+0x3c>
        configurarIO(bus->bus_u.spi.pinCS, CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL), 0);
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	789b      	ldrb	r3, [r3, #2]
 8020176:	2200      	movs	r2, #0
 8020178:	f240 3101 	movw	r1, #769	; 0x301
 802017c:	4618      	mov	r0, r3
 802017e:	f7f6 f917 	bl	80163b0 <configurarIO>
        escribirIO(bus->bus_u.spi.pinCS, true);
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	789b      	ldrb	r3, [r3, #2]
 8020186:	2101      	movs	r1, #1
 8020188:	4618      	mov	r0, r3
 802018a:	f7f6 f9f1 	bl	8016570 <escribirIO>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_ESTANDAR);
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020194:	2110      	movs	r1, #16
 8020196:	4618      	mov	r0, r3
 8020198:	f7f7 fa2d 	bl	80175f6 <ajustarRelojSPI>
    }
}
 802019c:	bf00      	nop
 802019e:	3708      	adds	r7, #8
 80201a0:	46bd      	mov	sp, r7
 80201a2:	bd80      	pop	{r7, pc}

080201a4 <resetearBaroTEConectivity>:
**  Descripcion:    Resetea el barometro y espera 4 ms para que se inicie
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void resetearBaroTEConectivity(bus_t *bus)
{
 80201a4:	b580      	push	{r7, lr}
 80201a6:	b082      	sub	sp, #8
 80201a8:	af00      	add	r7, sp, #0
 80201aa:	6078      	str	r0, [r7, #4]
	escribirRegistroBus(bus, CMD_RESET_BARO_TEC, 1);
 80201ac:	2201      	movs	r2, #1
 80201ae:	211e      	movs	r1, #30
 80201b0:	6878      	ldr	r0, [r7, #4]
 80201b2:	f7f5 f8ef 	bl	8015394 <escribirRegistroBus>
    delay(4);
 80201b6:	2004      	movs	r0, #4
 80201b8:	f7f7 fced 	bl	8017b96 <delay>
}
 80201bc:	bf00      	nop
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}

080201c4 <leerPromBaroTEConectivity>:
**  Descripcion:    Lee la PROM entera y comprueba si el CRC es correcto
**  Parametros:     Bus, array donde se guarda la PROM
**  Retorno:        True si el CRC es correcto
****************************************************************************************/
bool leerPromBaroTEConectivity(bus_t *bus, uint16_t *prom)
{
 80201c4:	b580      	push	{r7, lr}
 80201c6:	b084      	sub	sp, #16
 80201c8:	af00      	add	r7, sp, #0
 80201ca:	6078      	str	r0, [r7, #4]
 80201cc:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80201ce:	2300      	movs	r3, #0
 80201d0:	73fb      	strb	r3, [r7, #15]
 80201d2:	e013      	b.n	80201fc <leerPromBaroTEConectivity+0x38>
        if (!leerWordPromBaroTEConectivity(bus, i, &prom[i]))
 80201d4:	7bfb      	ldrb	r3, [r7, #15]
 80201d6:	005b      	lsls	r3, r3, #1
 80201d8:	683a      	ldr	r2, [r7, #0]
 80201da:	441a      	add	r2, r3
 80201dc:	7bfb      	ldrb	r3, [r7, #15]
 80201de:	4619      	mov	r1, r3
 80201e0:	6878      	ldr	r0, [r7, #4]
 80201e2:	f000 f82c 	bl	802023e <leerWordPromBaroTEConectivity>
 80201e6:	4603      	mov	r3, r0
 80201e8:	f083 0301 	eor.w	r3, r3, #1
 80201ec:	b2db      	uxtb	r3, r3
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d001      	beq.n	80201f6 <leerPromBaroTEConectivity+0x32>
            return false;
 80201f2:	2300      	movs	r3, #0
 80201f4:	e01f      	b.n	8020236 <leerPromBaroTEConectivity+0x72>
    for (uint8_t i = 0; i < 8; i++) {
 80201f6:	7bfb      	ldrb	r3, [r7, #15]
 80201f8:	3301      	adds	r3, #1
 80201fa:	73fb      	strb	r3, [r7, #15]
 80201fc:	7bfb      	ldrb	r3, [r7, #15]
 80201fe:	2b07      	cmp	r3, #7
 8020200:	d9e8      	bls.n	80201d4 <leerPromBaroTEConectivity+0x10>
    }

    // Leemos el CRC
    const uint16_t crc = prom[7] & 0xF;
 8020202:	683b      	ldr	r3, [r7, #0]
 8020204:	330e      	adds	r3, #14
 8020206:	881b      	ldrh	r3, [r3, #0]
 8020208:	f003 030f 	and.w	r3, r3, #15
 802020c:	81bb      	strh	r3, [r7, #12]
    prom[7] &= 0xff00;
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	330e      	adds	r3, #14
 8020212:	881a      	ldrh	r2, [r3, #0]
 8020214:	683b      	ldr	r3, [r7, #0]
 8020216:	330e      	adds	r3, #14
 8020218:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802021c:	b292      	uxth	r2, r2
 802021e:	801a      	strh	r2, [r3, #0]

    return crc == calcularCRC4(prom);
 8020220:	6838      	ldr	r0, [r7, #0]
 8020222:	f7f3 f85d 	bl	80132e0 <calcularCRC4>
 8020226:	4603      	mov	r3, r0
 8020228:	461a      	mov	r2, r3
 802022a:	89bb      	ldrh	r3, [r7, #12]
 802022c:	4293      	cmp	r3, r2
 802022e:	bf0c      	ite	eq
 8020230:	2301      	moveq	r3, #1
 8020232:	2300      	movne	r3, #0
 8020234:	b2db      	uxtb	r3, r3
}
 8020236:	4618      	mov	r0, r3
 8020238:	3710      	adds	r7, #16
 802023a:	46bd      	mov	sp, r7
 802023c:	bd80      	pop	{r7, pc}

0802023e <leerWordPromBaroTEConectivity>:
**  Descripcion:    Lee una word de la PROM
**  Parametros:     Bus, numero de word a leer
**  Retorno:        Dato de la PROM
****************************************************************************************/
bool leerWordPromBaroTEConectivity(bus_t *bus, uint8_t word, uint16_t *dato)
{
 802023e:	b580      	push	{r7, lr}
 8020240:	b086      	sub	sp, #24
 8020242:	af00      	add	r7, sp, #0
 8020244:	60f8      	str	r0, [r7, #12]
 8020246:	460b      	mov	r3, r1
 8020248:	607a      	str	r2, [r7, #4]
 802024a:	72fb      	strb	r3, [r7, #11]
    const uint8_t reg = CMD_PROM_RD_BARO_TEC + (word << 1);
 802024c:	7afb      	ldrb	r3, [r7, #11]
 802024e:	005b      	lsls	r3, r3, #1
 8020250:	b2db      	uxtb	r3, r3
 8020252:	3b60      	subs	r3, #96	; 0x60
 8020254:	75fb      	strb	r3, [r7, #23]
    uint8_t val[2];

    if (!leerBufferRegistroBus(bus, reg, val, sizeof(val)))
 8020256:	f107 0214 	add.w	r2, r7, #20
 802025a:	7df9      	ldrb	r1, [r7, #23]
 802025c:	2302      	movs	r3, #2
 802025e:	68f8      	ldr	r0, [r7, #12]
 8020260:	f7f5 f8ed 	bl	801543e <leerBufferRegistroBus>
 8020264:	4603      	mov	r3, r0
 8020266:	f083 0301 	eor.w	r3, r3, #1
 802026a:	b2db      	uxtb	r3, r3
 802026c:	2b00      	cmp	r3, #0
 802026e:	d001      	beq.n	8020274 <leerWordPromBaroTEConectivity+0x36>
        return false;
 8020270:	2300      	movs	r3, #0
 8020272:	e00a      	b.n	802028a <leerWordPromBaroTEConectivity+0x4c>

    *dato = (val[0] << 8) | val[1];
 8020274:	7d3b      	ldrb	r3, [r7, #20]
 8020276:	021b      	lsls	r3, r3, #8
 8020278:	b21a      	sxth	r2, r3
 802027a:	7d7b      	ldrb	r3, [r7, #21]
 802027c:	b21b      	sxth	r3, r3
 802027e:	4313      	orrs	r3, r2
 8020280:	b21b      	sxth	r3, r3
 8020282:	b29a      	uxth	r2, r3
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	801a      	strh	r2, [r3, #0]
    return true;
 8020288:	2301      	movs	r3, #1
}
 802028a:	4618      	mov	r0, r3
 802028c:	3718      	adds	r7, #24
 802028e:	46bd      	mov	sp, r7
 8020290:	bd80      	pop	{r7, pc}

08020292 <leerAdcBaroTEConectivity>:
**  Descripcion:    Lee el ADC del sensor
**  Parametros:     Bus, puntero al adc
**  Retorno:        Dato leido
****************************************************************************************/
bool leerAdcBaroTEConectivity(bus_t *bus, uint32_t *adc)
{
 8020292:	b580      	push	{r7, lr}
 8020294:	b084      	sub	sp, #16
 8020296:	af00      	add	r7, sp, #0
 8020298:	6078      	str	r0, [r7, #4]
 802029a:	6039      	str	r1, [r7, #0]
    uint8_t val[3];

    if (!leerBufferRegistroBus(bus, CMD_ADC_READ_BARO_TEC, val, 3))
 802029c:	f107 020c 	add.w	r2, r7, #12
 80202a0:	2303      	movs	r3, #3
 80202a2:	2100      	movs	r1, #0
 80202a4:	6878      	ldr	r0, [r7, #4]
 80202a6:	f7f5 f8ca 	bl	801543e <leerBufferRegistroBus>
 80202aa:	4603      	mov	r3, r0
 80202ac:	f083 0301 	eor.w	r3, r3, #1
 80202b0:	b2db      	uxtb	r3, r3
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d001      	beq.n	80202ba <leerAdcBaroTEConectivity+0x28>
        return false;
 80202b6:	2300      	movs	r3, #0
 80202b8:	e00a      	b.n	80202d0 <leerAdcBaroTEConectivity+0x3e>

    *adc = (val[0] << 16) | (val[1] << 8) | val[2];
 80202ba:	7b3b      	ldrb	r3, [r7, #12]
 80202bc:	041a      	lsls	r2, r3, #16
 80202be:	7b7b      	ldrb	r3, [r7, #13]
 80202c0:	021b      	lsls	r3, r3, #8
 80202c2:	4313      	orrs	r3, r2
 80202c4:	7bba      	ldrb	r2, [r7, #14]
 80202c6:	4313      	orrs	r3, r2
 80202c8:	461a      	mov	r2, r3
 80202ca:	683b      	ldr	r3, [r7, #0]
 80202cc:	601a      	str	r2, [r3, #0]
    return true;
 80202ce:	2301      	movs	r3, #1
}
 80202d0:	4618      	mov	r0, r3
 80202d2:	3710      	adds	r7, #16
 80202d4:	46bd      	mov	sp, r7
 80202d6:	bd80      	pop	{r7, pc}

080202d8 <leerBaroTEConectivity>:
**  Descripcion:    Lee la presion y la temperatura
**  Parametros:     Puntero al barometro
**  Retorno:        Ninguno
****************************************************************************************/
void leerBaroTEConectivity(baro_t *dBaro)
{
 80202d8:	b580      	push	{r7, lr}
 80202da:	b086      	sub	sp, #24
 80202dc:	af00      	add	r7, sp, #0
 80202de:	6078      	str	r0, [r7, #4]
    uint32_t aP, aT;
    uint8_t cuentaP, cuentaT;
    baroTEConectivity_t *driver = dBaro->driver;
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	685b      	ldr	r3, [r3, #4]
 80202e4:	617b      	str	r3, [r7, #20]

    if (driver->acumuladorP.contador == 0)
 80202e6:	697b      	ldr	r3, [r7, #20]
 80202e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d057      	beq.n	80203a0 <leerBaroTEConectivity+0xc8>
        return;

    aP = driver->acumuladorP.acumulado;
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80202f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80202fa:	ee17 3a90 	vmov	r3, s15
 80202fe:	613b      	str	r3, [r7, #16]
    aT = driver->acumuladorT.acumulado;
 8020300:	697b      	ldr	r3, [r7, #20]
 8020302:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8020306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802030a:	ee17 3a90 	vmov	r3, s15
 802030e:	60fb      	str	r3, [r7, #12]
    cuentaP = driver->acumuladorP.contador;
 8020310:	697b      	ldr	r3, [r7, #20]
 8020312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8020316:	72fb      	strb	r3, [r7, #11]
    cuentaT = driver->acumuladorT.contador;
 8020318:	697b      	ldr	r3, [r7, #20]
 802031a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802031e:	72bb      	strb	r3, [r7, #10]
    memset(&driver->acumuladorP, 0, sizeof(driver->acumuladorP));
 8020320:	697b      	ldr	r3, [r7, #20]
 8020322:	331c      	adds	r3, #28
 8020324:	2208      	movs	r2, #8
 8020326:	2100      	movs	r1, #0
 8020328:	4618      	mov	r0, r3
 802032a:	f014 ffb9 	bl	80352a0 <memset>
    memset(&driver->acumuladorT, 0, sizeof(driver->acumuladorT));
 802032e:	697b      	ldr	r3, [r7, #20]
 8020330:	3324      	adds	r3, #36	; 0x24
 8020332:	2208      	movs	r2, #8
 8020334:	2100      	movs	r1, #0
 8020336:	4618      	mov	r0, r3
 8020338:	f014 ffb2 	bl	80352a0 <memset>

    if (cuentaP != 0)
 802033c:	7afb      	ldrb	r3, [r7, #11]
 802033e:	2b00      	cmp	r3, #0
 8020340:	d00e      	beq.n	8020360 <leerBaroTEConectivity+0x88>
        driver->presionRaw = ((float)aP) / cuentaP;
 8020342:	693b      	ldr	r3, [r7, #16]
 8020344:	ee07 3a90 	vmov	s15, r3
 8020348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802034c:	7afb      	ldrb	r3, [r7, #11]
 802034e:	ee07 3a90 	vmov	s15, r3
 8020352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802035a:	697b      	ldr	r3, [r7, #20]
 802035c:	edc3 7a05 	vstr	s15, [r3, #20]

    if (cuentaT != 0)
 8020360:	7abb      	ldrb	r3, [r7, #10]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d00e      	beq.n	8020384 <leerBaroTEConectivity+0xac>
        driver->temperaturaRaw = ((float)aT) / cuentaT;
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	ee07 3a90 	vmov	s15, r3
 802036c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020370:	7abb      	ldrb	r3, [r7, #10]
 8020372:	ee07 3a90 	vmov	s15, r3
 8020376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802037a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802037e:	697b      	ldr	r3, [r7, #20]
 8020380:	edc3 7a06 	vstr	s15, [r3, #24]

    if (cuentaP != 0 || cuentaT != 0) {
 8020384:	7afb      	ldrb	r3, [r7, #11]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d102      	bne.n	8020390 <leerBaroTEConectivity+0xb8>
 802038a:	7abb      	ldrb	r3, [r7, #10]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d008      	beq.n	80203a2 <leerBaroTEConectivity+0xca>
        calcularBaroTEConectivity(dBaro);
 8020390:	6878      	ldr	r0, [r7, #4]
 8020392:	f000 f89f 	bl	80204d4 <calcularBaroTEConectivity>
        dBaro->nuevaMedida = true;
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	2201      	movs	r2, #1
 802039a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 802039e:	e000      	b.n	80203a2 <leerBaroTEConectivity+0xca>
        return;
 80203a0:	bf00      	nop
    }
}
 80203a2:	3718      	adds	r7, #24
 80203a4:	46bd      	mov	sp, r7
 80203a6:	bd80      	pop	{r7, pc}

080203a8 <actualizarBaroTEConectivity>:
**  Descripcion:    Actualiza las lecturas del barometro
**  Parametros:     Puntero al barometro
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarBaroTEConectivity(baro_t *dBaro)
{
 80203a8:	b580      	push	{r7, lr}
 80203aa:	b086      	sub	sp, #24
 80203ac:	af00      	add	r7, sp, #0
 80203ae:	6078      	str	r0, [r7, #4]
    baroTEConectivity_t *driver = dBaro->driver;
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	685b      	ldr	r3, [r3, #4]
 80203b4:	613b      	str	r3, [r7, #16]
    uint8_t sigComando;
    uint8_t sigEstado;
    uint32_t valorAdc;

    bool estado = leerAdcBaroTEConectivity(&dBaro->bus, &valorAdc);
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	3301      	adds	r3, #1
 80203ba:	f107 0208 	add.w	r2, r7, #8
 80203be:	4611      	mov	r1, r2
 80203c0:	4618      	mov	r0, r3
 80203c2:	f7ff ff66 	bl	8020292 <leerAdcBaroTEConectivity>
 80203c6:	4603      	mov	r3, r0
 80203c8:	73fb      	strb	r3, [r7, #15]

    if (valorAdc == 0 || estado == false)
 80203ca:	68bb      	ldr	r3, [r7, #8]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d005      	beq.n	80203dc <actualizarBaroTEConectivity+0x34>
 80203d0:	7bfb      	ldrb	r3, [r7, #15]
 80203d2:	f083 0301 	eor.w	r3, r3, #1
 80203d6:	b2db      	uxtb	r3, r3
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d004      	beq.n	80203e6 <actualizarBaroTEConectivity+0x3e>
        sigEstado = driver->estado;
 80203dc:	693b      	ldr	r3, [r7, #16]
 80203de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80203e2:	75fb      	strb	r3, [r7, #23]
 80203e4:	e00f      	b.n	8020406 <actualizarBaroTEConectivity+0x5e>
    else
        sigEstado = (driver->estado + 1) % 5;
 80203e6:	693b      	ldr	r3, [r7, #16]
 80203e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80203ec:	1c5a      	adds	r2, r3, #1
 80203ee:	4b38      	ldr	r3, [pc, #224]	; (80204d0 <actualizarBaroTEConectivity+0x128>)
 80203f0:	fb83 1302 	smull	r1, r3, r3, r2
 80203f4:	1059      	asrs	r1, r3, #1
 80203f6:	17d3      	asrs	r3, r2, #31
 80203f8:	1ac9      	subs	r1, r1, r3
 80203fa:	460b      	mov	r3, r1
 80203fc:	009b      	lsls	r3, r3, #2
 80203fe:	440b      	add	r3, r1
 8020400:	1ad1      	subs	r1, r2, r3
 8020402:	460b      	mov	r3, r1
 8020404:	75fb      	strb	r3, [r7, #23]

    // Enviamos el comando que toque
    sigComando = sigEstado == 0 ? driver->comandoT : driver->comandoP;
 8020406:	7dfb      	ldrb	r3, [r7, #23]
 8020408:	2b00      	cmp	r3, #0
 802040a:	d102      	bne.n	8020412 <actualizarBaroTEConectivity+0x6a>
 802040c:	693b      	ldr	r3, [r7, #16]
 802040e:	785b      	ldrb	r3, [r3, #1]
 8020410:	e001      	b.n	8020416 <actualizarBaroTEConectivity+0x6e>
 8020412:	693b      	ldr	r3, [r7, #16]
 8020414:	781b      	ldrb	r3, [r3, #0]
 8020416:	73bb      	strb	r3, [r7, #14]
    escribirRegistroBus(&dBaro->bus, sigComando, 1);
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	3301      	adds	r3, #1
 802041c:	7bb9      	ldrb	r1, [r7, #14]
 802041e:	2201      	movs	r2, #1
 8020420:	4618      	mov	r0, r3
 8020422:	f7f4 ffb7 	bl	8015394 <escribirRegistroBus>

    // Si la medida ha sido mala descartamos la siguiente
    if (valorAdc == 0 || estado == false) {
 8020426:	68bb      	ldr	r3, [r7, #8]
 8020428:	2b00      	cmp	r3, #0
 802042a:	d005      	beq.n	8020438 <actualizarBaroTEConectivity+0x90>
 802042c:	7bfb      	ldrb	r3, [r7, #15]
 802042e:	f083 0301 	eor.w	r3, r3, #1
 8020432:	b2db      	uxtb	r3, r3
 8020434:	2b00      	cmp	r3, #0
 8020436:	d004      	beq.n	8020442 <actualizarBaroTEConectivity+0x9a>
        driver->descartarLect = true;
 8020438:	693b      	ldr	r3, [r7, #16]
 802043a:	2201      	movs	r2, #1
 802043c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return;
 8020440:	e043      	b.n	80204ca <actualizarBaroTEConectivity+0x122>
    }

    if (driver->descartarLect) {
 8020442:	693b      	ldr	r3, [r7, #16]
 8020444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020448:	2b00      	cmp	r3, #0
 802044a:	d008      	beq.n	802045e <actualizarBaroTEConectivity+0xb6>
        driver->descartarLect = false;
 802044c:	693b      	ldr	r3, [r7, #16]
 802044e:	2200      	movs	r2, #0
 8020450:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        driver->estado = sigEstado;
 8020454:	693b      	ldr	r3, [r7, #16]
 8020456:	7dfa      	ldrb	r2, [r7, #23]
 8020458:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return;
 802045c:	e035      	b.n	80204ca <actualizarBaroTEConectivity+0x122>
    }

    dBaro->timing.ultimaActualizacion = micros();
 802045e:	f7f7 fb3b 	bl	8017ad8 <micros>
 8020462:	4602      	mov	r2, r0
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	62da      	str	r2, [r3, #44]	; 0x2c

    if (driver->estado == 0)
 8020468:	693b      	ldr	r3, [r7, #16]
 802046a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802046e:	2b00      	cmp	r3, #0
 8020470:	d10d      	bne.n	802048e <actualizarBaroTEConectivity+0xe6>
        acumularLectura(&driver->acumuladorT, (float)valorAdc, 100);
 8020472:	693b      	ldr	r3, [r7, #16]
 8020474:	3324      	adds	r3, #36	; 0x24
 8020476:	68ba      	ldr	r2, [r7, #8]
 8020478:	ee07 2a90 	vmov	s15, r2
 802047c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020480:	2164      	movs	r1, #100	; 0x64
 8020482:	eeb0 0a67 	vmov.f32	s0, s15
 8020486:	4618      	mov	r0, r3
 8020488:	f007 ff64 	bl	8028354 <acumularLectura>
 802048c:	e019      	b.n	80204c2 <actualizarBaroTEConectivity+0x11a>
    else if (presionBaroOk(dBaro, valorAdc))
 802048e:	68bb      	ldr	r3, [r7, #8]
 8020490:	ee07 3a90 	vmov	s15, r3
 8020494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020498:	eeb0 0a67 	vmov.f32	s0, s15
 802049c:	6878      	ldr	r0, [r7, #4]
 802049e:	f000 fcbd 	bl	8020e1c <presionBaroOk>
 80204a2:	4603      	mov	r3, r0
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d00c      	beq.n	80204c2 <actualizarBaroTEConectivity+0x11a>
        acumularLectura(&driver->acumuladorP, (float)valorAdc, 100);
 80204a8:	693b      	ldr	r3, [r7, #16]
 80204aa:	331c      	adds	r3, #28
 80204ac:	68ba      	ldr	r2, [r7, #8]
 80204ae:	ee07 2a90 	vmov	s15, r2
 80204b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80204b6:	2164      	movs	r1, #100	; 0x64
 80204b8:	eeb0 0a67 	vmov.f32	s0, s15
 80204bc:	4618      	mov	r0, r3
 80204be:	f007 ff49 	bl	8028354 <acumularLectura>

    driver->estado = sigEstado;
 80204c2:	693b      	ldr	r3, [r7, #16]
 80204c4:	7dfa      	ldrb	r2, [r7, #23]
 80204c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80204ca:	3718      	adds	r7, #24
 80204cc:	46bd      	mov	sp, r7
 80204ce:	bd80      	pop	{r7, pc}
 80204d0:	66666667 	.word	0x66666667

080204d4 <calcularBaroTEConectivity>:
**  Descripcion:    Compensa las lecturas con los valores de calibracion
**  Parametros:     Driver TEConectivity
**  Retorno:        Ninguno
****************************************************************************************/
void calcularBaroTEConectivity(baro_t *dBaro)
{
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b08e      	sub	sp, #56	; 0x38
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]
    baroTEConectivity_t *driver = dBaro->driver;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	685b      	ldr	r3, [r3, #4]
 80204e0:	62bb      	str	r3, [r7, #40]	; 0x28
    float presion, temperatura;
    uint32_t tiempo = micros();
 80204e2:	f7f7 faf9 	bl	8017ad8 <micros>
 80204e6:	6278      	str	r0, [r7, #36]	; 0x24

    // Formulas del datasheet
    // No esta incluida la compensacion a -15ºC

    // Vamos a realizar los calculos con flotantes para mayor rapidez y precision
    dT = driver->temperaturaRaw - (((uint32_t) driver->prom[5]) << 8);
 80204e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ea:	ed93 7a06 	vldr	s14, [r3, #24]
 80204ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204f0:	899b      	ldrh	r3, [r3, #12]
 80204f2:	021b      	lsls	r3, r3, #8
 80204f4:	ee07 3a90 	vmov	s15, r3
 80204f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80204fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020500:	edc7 7a08 	vstr	s15, [r7, #32]
    TEMP = (dT * driver->prom[6]) / 8388608;
 8020504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020506:	89db      	ldrh	r3, [r3, #14]
 8020508:	ee07 3a90 	vmov	s15, r3
 802050c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020510:	edd7 7a08 	vldr	s15, [r7, #32]
 8020514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020518:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8020690 <calcularBaroTEConectivity+0x1bc>
 802051c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020520:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    OFF = driver->prom[2] * 65536.0f + (driver->prom[4] * dT) / 128;
 8020524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020526:	88db      	ldrh	r3, [r3, #6]
 8020528:	ee07 3a90 	vmov	s15, r3
 802052c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020530:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8020694 <calcularBaroTEConectivity+0x1c0>
 8020534:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802053a:	895b      	ldrh	r3, [r3, #10]
 802053c:	ee07 3a90 	vmov	s15, r3
 8020540:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8020544:	edd7 7a08 	vldr	s15, [r7, #32]
 8020548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 802054c:	ed9f 6a52 	vldr	s12, [pc, #328]	; 8020698 <calcularBaroTEConectivity+0x1c4>
 8020550:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8020554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020558:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    SENS = driver->prom[1] * 32768.0f + (driver->prom[3] * dT) / 256;
 802055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802055e:	889b      	ldrh	r3, [r3, #4]
 8020560:	ee07 3a90 	vmov	s15, r3
 8020564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020568:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 802069c <calcularBaroTEConectivity+0x1c8>
 802056c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020572:	891b      	ldrh	r3, [r3, #8]
 8020574:	ee07 3a90 	vmov	s15, r3
 8020578:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802057c:	edd7 7a08 	vldr	s15, [r7, #32]
 8020580:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8020584:	ed9f 6a46 	vldr	s12, [pc, #280]	; 80206a0 <calcularBaroTEConectivity+0x1cc>
 8020588:	eec6 7a86 	vdiv.f32	s15, s13, s12
 802058c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020590:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    if (TEMP < 0) {
 8020594:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8020598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205a0:	d537      	bpl.n	8020612 <calcularBaroTEConectivity+0x13e>
        // Compensacion de segundo orden cuando estamos a menos de 20ºC
        float T2 = (dT * dT) / 0x80000000;
 80205a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80205a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80205aa:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80206a4 <calcularBaroTEConectivity+0x1d0>
 80205ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80205b2:	edc7 7a07 	vstr	s15, [r7, #28]
        float Aux = TEMP * TEMP;
 80205b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80205ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80205be:	edc7 7a06 	vstr	s15, [r7, #24]
        float OFF2 = 2.5f * Aux;
 80205c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80205c6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80205ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80205ce:	edc7 7a05 	vstr	s15, [r7, #20]
        float SENS2 = 1.25f * Aux;
 80205d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80205d6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80205da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80205de:	edc7 7a04 	vstr	s15, [r7, #16]
        TEMP = TEMP - T2;
 80205e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80205e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80205ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        OFF = OFF - OFF2;
 80205f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80205f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80205fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        SENS = SENS - SENS2;
 8020602:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8020606:	edd7 7a04 	vldr	s15, [r7, #16]
 802060a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802060e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }
    presion = ((driver->presionRaw * SENS / 2097152 - OFF) / 32768) * 0.01f;     // Presion en mBar
 8020612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020614:	ed93 7a05 	vldr	s14, [r3, #20]
 8020618:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802061c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020620:	eddf 6a21 	vldr	s13, [pc, #132]	; 80206a8 <calcularBaroTEConectivity+0x1d4>
 8020624:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8020628:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 802062c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020630:	eddf 6a1a 	vldr	s13, [pc, #104]	; 802069c <calcularBaroTEConectivity+0x1c8>
 8020634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020638:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80206ac <calcularBaroTEConectivity+0x1d8>
 802063c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020640:	edc7 7a03 	vstr	s15, [r7, #12]
    temperatura = (TEMP + 2000) * 0.01f;                                         // Temperatura en ºC
 8020644:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8020648:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80206b0 <calcularBaroTEConectivity+0x1dc>
 802064c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020650:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80206ac <calcularBaroTEConectivity+0x1d8>
 8020654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020658:	edc7 7a02 	vstr	s15, [r7, #8]

    if (dBaro->presion != presion)
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	edd3 7a03 	vldr	s15, [r3, #12]
 8020662:	ed97 7a03 	vldr	s14, [r7, #12]
 8020666:	eeb4 7a67 	vcmp.f32	s14, s15
 802066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802066e:	d002      	beq.n	8020676 <calcularBaroTEConectivity+0x1a2>
    	dBaro->timing.ultimoCambio = tiempo;
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020674:	635a      	str	r2, [r3, #52]	; 0x34

    dBaro->presion = presion;
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	68fa      	ldr	r2, [r7, #12]
 802067a:	60da      	str	r2, [r3, #12]
    dBaro->temperatura = temperatura;
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	68ba      	ldr	r2, [r7, #8]
 8020680:	611a      	str	r2, [r3, #16]
    dBaro->timing.ultimaMedida = tiempo;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8020688:	bf00      	nop
 802068a:	3738      	adds	r7, #56	; 0x38
 802068c:	46bd      	mov	sp, r7
 802068e:	bd80      	pop	{r7, pc}
 8020690:	4b000000 	.word	0x4b000000
 8020694:	47800000 	.word	0x47800000
 8020698:	43000000 	.word	0x43000000
 802069c:	47000000 	.word	0x47000000
 80206a0:	43800000 	.word	0x43800000
 80206a4:	4f000000 	.word	0x4f000000
 80206a8:	4a000000 	.word	0x4a000000
 80206ac:	3c23d70a 	.word	0x3c23d70a
 80206b0:	44fa0000 	.word	0x44fa0000

080206b4 <configBaro>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configBaro_t, NUM_MAX_BARO, configBaro);
 80206b4:	b480      	push	{r7}
 80206b6:	b083      	sub	sp, #12
 80206b8:	af00      	add	r7, sp, #0
 80206ba:	6078      	str	r0, [r7, #4]
 80206bc:	687a      	ldr	r2, [r7, #4]
 80206be:	4613      	mov	r3, r2
 80206c0:	005b      	lsls	r3, r3, #1
 80206c2:	4413      	add	r3, r2
 80206c4:	009b      	lsls	r3, r3, #2
 80206c6:	4a04      	ldr	r2, [pc, #16]	; (80206d8 <configBaro+0x24>)
 80206c8:	4413      	add	r3, r2
 80206ca:	4618      	mov	r0, r3
 80206cc:	370c      	adds	r7, #12
 80206ce:	46bd      	mov	sp, r7
 80206d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206d4:	4770      	bx	lr
 80206d6:	bf00      	nop
 80206d8:	2000a460 	.word	0x2000a460

080206dc <iniciarBaro>:
**  Descripcion:    Inicia los barometros
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarBaro(void)
{
 80206dc:	b580      	push	{r7, lr}
 80206de:	b082      	sub	sp, #8
 80206e0:	af00      	add	r7, sp, #0
    // Ajustamos las frecuencias del scheduler
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_BARO, PERIODO_TAREA_HZ_SCHEDULER(configBaro(0)->frecActualizar));
 80206e2:	2000      	movs	r0, #0
 80206e4:	f7ff ffe6 	bl	80206b4 <configBaro>
 80206e8:	4603      	mov	r3, r0
 80206ea:	891b      	ldrh	r3, [r3, #8]
 80206ec:	461a      	mov	r2, r3
 80206ee:	4b7a      	ldr	r3, [pc, #488]	; (80208d8 <iniciarBaro+0x1fc>)
 80206f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80206f4:	4619      	mov	r1, r3
 80206f6:	2005      	movs	r0, #5
 80206f8:	f7fe fc3a 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#ifdef LEER_BARO_SCHEDULER
    ajustarFrecuenciaEjecucionTarea(TAREA_LEER_BARO, PERIODO_TAREA_HZ_SCHEDULER(configBaro(0)->frecLeer));
 80206fc:	2000      	movs	r0, #0
 80206fe:	f7ff ffd9 	bl	80206b4 <configBaro>
 8020702:	4603      	mov	r3, r0
 8020704:	895b      	ldrh	r3, [r3, #10]
 8020706:	461a      	mov	r2, r3
 8020708:	4b73      	ldr	r3, [pc, #460]	; (80208d8 <iniciarBaro+0x1fc>)
 802070a:	fb93 f3f2 	sdiv	r3, r3, r2
 802070e:	4619      	mov	r1, r3
 8020710:	2006      	movs	r0, #6
 8020712:	f7fe fc2d 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#endif

    // Reseteamos las variables del sensor general
    memset(&baroGen, 0, sizeof(baroGen_t));
 8020716:	2214      	movs	r2, #20
 8020718:	2100      	movs	r1, #0
 802071a:	4870      	ldr	r0, [pc, #448]	; (80208dc <iniciarBaro+0x200>)
 802071c:	f014 fdc0 	bl	80352a0 <memset>

    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020720:	2300      	movs	r3, #0
 8020722:	71fb      	strb	r3, [r7, #7]
 8020724:	e0c9      	b.n	80208ba <iniciarBaro+0x1de>
        if (configBaro(i)->tipoBaro == BARO_NINGUNO)
 8020726:	79fb      	ldrb	r3, [r7, #7]
 8020728:	4618      	mov	r0, r3
 802072a:	f7ff ffc3 	bl	80206b4 <configBaro>
 802072e:	4603      	mov	r3, r0
 8020730:	f993 3000 	ldrsb.w	r3, [r3]
 8020734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020738:	f000 80bb 	beq.w	80208b2 <iniciarBaro+0x1d6>
            continue;

        baro_t *driver = &baro[i];
 802073c:	79fa      	ldrb	r2, [r7, #7]
 802073e:	4613      	mov	r3, r2
 8020740:	00db      	lsls	r3, r3, #3
 8020742:	1a9b      	subs	r3, r3, r2
 8020744:	00db      	lsls	r3, r3, #3
 8020746:	4a66      	ldr	r2, [pc, #408]	; (80208e0 <iniciarBaro+0x204>)
 8020748:	4413      	add	r3, r2
 802074a:	603b      	str	r3, [r7, #0]

        // Reseteamos las variables del barometro
        memset(driver, 0, sizeof(baro_t));
 802074c:	2238      	movs	r2, #56	; 0x38
 802074e:	2100      	movs	r1, #0
 8020750:	6838      	ldr	r0, [r7, #0]
 8020752:	f014 fda5 	bl	80352a0 <memset>

        // Asignamos el numero del barometro
        driver->numBaro = i;
 8020756:	683b      	ldr	r3, [r7, #0]
 8020758:	79fa      	ldrb	r2, [r7, #7]
 802075a:	701a      	strb	r2, [r3, #0]

        // Data ready del sensor
        driver->drdy = configBaro(i)->drdy;
 802075c:	79fb      	ldrb	r3, [r7, #7]
 802075e:	4618      	mov	r0, r3
 8020760:	f7ff ffa8 	bl	80206b4 <configBaro>
 8020764:	4603      	mov	r3, r0
 8020766:	799a      	ldrb	r2, [r3, #6]
 8020768:	683b      	ldr	r3, [r7, #0]
 802076a:	721a      	strb	r2, [r3, #8]

        // Cargamos la configuracion del bus
        switch (configBaro(i)->bus) {
 802076c:	79fb      	ldrb	r3, [r7, #7]
 802076e:	4618      	mov	r0, r3
 8020770:	f7ff ffa0 	bl	80206b4 <configBaro>
 8020774:	4603      	mov	r3, r0
 8020776:	f993 3002 	ldrsb.w	r3, [r3, #2]
 802077a:	2b00      	cmp	r3, #0
 802077c:	d002      	beq.n	8020784 <iniciarBaro+0xa8>
 802077e:	2b01      	cmp	r3, #1
 8020780:	d02d      	beq.n	80207de <iniciarBaro+0x102>
 8020782:	e059      	b.n	8020838 <iniciarBaro+0x15c>
            case BUS_I2C:
                driver->bus.tipo = BUS_I2C;
 8020784:	683b      	ldr	r3, [r7, #0]
 8020786:	2200      	movs	r2, #0
 8020788:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.i2c.numI2C = configBaro(i)->dispBus;
 802078a:	79fb      	ldrb	r3, [r7, #7]
 802078c:	4618      	mov	r0, r3
 802078e:	f7ff ff91 	bl	80206b4 <configBaro>
 8020792:	4603      	mov	r3, r0
 8020794:	78db      	ldrb	r3, [r3, #3]
 8020796:	b25a      	sxtb	r2, r3
 8020798:	683b      	ldr	r3, [r7, #0]
 802079a:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.i2c.dir = configBaro(i)->dirI2C;
 802079c:	79fb      	ldrb	r3, [r7, #7]
 802079e:	4618      	mov	r0, r3
 80207a0:	f7ff ff88 	bl	80206b4 <configBaro>
 80207a4:	4603      	mov	r3, r0
 80207a6:	795a      	ldrb	r2, [r3, #5]
 80207a8:	683b      	ldr	r3, [r7, #0]
 80207aa:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!i2cIniciado(driver->bus.bus_u.i2c.numI2C) && !iniciarI2C(driver->bus.bus_u.i2c.numI2C))
 80207ac:	683b      	ldr	r3, [r7, #0]
 80207ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80207b2:	4618      	mov	r0, r3
 80207b4:	f7f5 fb0c 	bl	8015dd0 <i2cIniciado>
 80207b8:	4603      	mov	r3, r0
 80207ba:	f083 0301 	eor.w	r3, r3, #1
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d040      	beq.n	8020846 <iniciarBaro+0x16a>
 80207c4:	683b      	ldr	r3, [r7, #0]
 80207c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80207ca:	4618      	mov	r0, r3
 80207cc:	f7f5 fabc 	bl	8015d48 <iniciarI2C>
 80207d0:	4603      	mov	r3, r0
 80207d2:	f083 0301 	eor.w	r3, r3, #1
 80207d6:	b2db      	uxtb	r3, r3
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d034      	beq.n	8020846 <iniciarBaro+0x16a>
                    continue;
 80207dc:	e06a      	b.n	80208b4 <iniciarBaro+0x1d8>

                break;

            case BUS_SPI:
                driver->bus.tipo = BUS_SPI;
 80207de:	683b      	ldr	r3, [r7, #0]
 80207e0:	2201      	movs	r2, #1
 80207e2:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.spi.numSPI = configBaro(i)->dispBus;
 80207e4:	79fb      	ldrb	r3, [r7, #7]
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7ff ff64 	bl	80206b4 <configBaro>
 80207ec:	4603      	mov	r3, r0
 80207ee:	78db      	ldrb	r3, [r3, #3]
 80207f0:	b25a      	sxtb	r2, r3
 80207f2:	683b      	ldr	r3, [r7, #0]
 80207f4:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.spi.pinCS = configBaro(i)->csSPI;
 80207f6:	79fb      	ldrb	r3, [r7, #7]
 80207f8:	4618      	mov	r0, r3
 80207fa:	f7ff ff5b 	bl	80206b4 <configBaro>
 80207fe:	4603      	mov	r3, r0
 8020800:	791a      	ldrb	r2, [r3, #4]
 8020802:	683b      	ldr	r3, [r7, #0]
 8020804:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!spiIniciado(driver->bus.bus_u.spi.numSPI) && !iniciarSPI(driver->bus.bus_u.spi.numSPI))
 8020806:	683b      	ldr	r3, [r7, #0]
 8020808:	f993 3002 	ldrsb.w	r3, [r3, #2]
 802080c:	4618      	mov	r0, r3
 802080e:	f7f6 fc93 	bl	8017138 <spiIniciado>
 8020812:	4603      	mov	r3, r0
 8020814:	f083 0301 	eor.w	r3, r3, #1
 8020818:	b2db      	uxtb	r3, r3
 802081a:	2b00      	cmp	r3, #0
 802081c:	d015      	beq.n	802084a <iniciarBaro+0x16e>
 802081e:	683b      	ldr	r3, [r7, #0]
 8020820:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8020824:	4618      	mov	r0, r3
 8020826:	f7f6 fc43 	bl	80170b0 <iniciarSPI>
 802082a:	4603      	mov	r3, r0
 802082c:	f083 0301 	eor.w	r3, r3, #1
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d009      	beq.n	802084a <iniciarBaro+0x16e>
                    continue;
 8020836:	e03d      	b.n	80208b4 <iniciarBaro+0x1d8>

                break;

            default:
#ifdef DEBUG
                printf("Fallo en la definicion del bus del Barometro %u\n", i + 1);
 8020838:	79fb      	ldrb	r3, [r7, #7]
 802083a:	3301      	adds	r3, #1
 802083c:	4619      	mov	r1, r3
 802083e:	4829      	ldr	r0, [pc, #164]	; (80208e4 <iniciarBaro+0x208>)
 8020840:	f015 fa58 	bl	8035cf4 <iprintf>
#endif
                break;
 8020844:	e002      	b.n	802084c <iniciarBaro+0x170>
                break;
 8020846:	bf00      	nop
 8020848:	e000      	b.n	802084c <iniciarBaro+0x170>
                break;
 802084a:	bf00      	nop
        }

        // Asignamos la tabla de funcion
        switch (configBaro(i)->tipoBaro) {
 802084c:	79fb      	ldrb	r3, [r7, #7]
 802084e:	4618      	mov	r0, r3
 8020850:	f7ff ff30 	bl	80206b4 <configBaro>
 8020854:	4603      	mov	r3, r0
 8020856:	f993 3000 	ldrsb.w	r3, [r3]
 802085a:	2b00      	cmp	r3, #0
 802085c:	d002      	beq.n	8020864 <iniciarBaro+0x188>
 802085e:	2b01      	cmp	r3, #1
 8020860:	d006      	beq.n	8020870 <iniciarBaro+0x194>
 8020862:	e00b      	b.n	802087c <iniciarBaro+0x1a0>
            case BARO_MS5611:
                tablaFnBaro[i] = &tablaFnBaroTEConectivity;
 8020864:	79fb      	ldrb	r3, [r7, #7]
 8020866:	4a20      	ldr	r2, [pc, #128]	; (80208e8 <iniciarBaro+0x20c>)
 8020868:	4920      	ldr	r1, [pc, #128]	; (80208ec <iniciarBaro+0x210>)
 802086a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 802086e:	e00c      	b.n	802088a <iniciarBaro+0x1ae>

            case BARO_BMP180:
                tablaFnBaro[i] = &tablaFnBaroBosch;
 8020870:	79fb      	ldrb	r3, [r7, #7]
 8020872:	4a1d      	ldr	r2, [pc, #116]	; (80208e8 <iniciarBaro+0x20c>)
 8020874:	491e      	ldr	r1, [pc, #120]	; (80208f0 <iniciarBaro+0x214>)
 8020876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 802087a:	e006      	b.n	802088a <iniciarBaro+0x1ae>

            default:
#ifdef DEBUG
                printf("Fallo en la definicion del Barometro %u\n", i + 1);
 802087c:	79fb      	ldrb	r3, [r7, #7]
 802087e:	3301      	adds	r3, #1
 8020880:	4619      	mov	r1, r3
 8020882:	481c      	ldr	r0, [pc, #112]	; (80208f4 <iniciarBaro+0x218>)
 8020884:	f015 fa36 	bl	8035cf4 <iprintf>
#endif
                continue;
 8020888:	e014      	b.n	80208b4 <iniciarBaro+0x1d8>
                break;
        }

        // Iniciamos el barometro
        driver->iniciado = iniciarDriverBaro(driver);
 802088a:	6838      	ldr	r0, [r7, #0]
 802088c:	f000 f836 	bl	80208fc <iniciarDriverBaro>
 8020890:	4603      	mov	r3, r0
 8020892:	461a      	mov	r2, r3
 8020894:	683b      	ldr	r3, [r7, #0]
 8020896:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

        if (driver->iniciado)
 802089a:	683b      	ldr	r3, [r7, #0]
 802089c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d007      	beq.n	80208b4 <iniciarBaro+0x1d8>
        	cntBarosconectados++;
 80208a4:	4b14      	ldr	r3, [pc, #80]	; (80208f8 <iniciarBaro+0x21c>)
 80208a6:	781b      	ldrb	r3, [r3, #0]
 80208a8:	3301      	adds	r3, #1
 80208aa:	b2da      	uxtb	r2, r3
 80208ac:	4b12      	ldr	r3, [pc, #72]	; (80208f8 <iniciarBaro+0x21c>)
 80208ae:	701a      	strb	r2, [r3, #0]
 80208b0:	e000      	b.n	80208b4 <iniciarBaro+0x1d8>
            continue;
 80208b2:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 80208b4:	79fb      	ldrb	r3, [r7, #7]
 80208b6:	3301      	adds	r3, #1
 80208b8:	71fb      	strb	r3, [r7, #7]
 80208ba:	79fb      	ldrb	r3, [r7, #7]
 80208bc:	2b04      	cmp	r3, #4
 80208be:	f67f af32 	bls.w	8020726 <iniciarBaro+0x4a>
    }

    if (cntBarosconectados > 0)
 80208c2:	4b0d      	ldr	r3, [pc, #52]	; (80208f8 <iniciarBaro+0x21c>)
 80208c4:	781b      	ldrb	r3, [r3, #0]
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d001      	beq.n	80208ce <iniciarBaro+0x1f2>
        return true;
 80208ca:	2301      	movs	r3, #1
 80208cc:	e000      	b.n	80208d0 <iniciarBaro+0x1f4>
    else
        return false;
 80208ce:	2300      	movs	r3, #0
}
 80208d0:	4618      	mov	r0, r3
 80208d2:	3708      	adds	r7, #8
 80208d4:	46bd      	mov	sp, r7
 80208d6:	bd80      	pop	{r7, pc}
 80208d8:	000f4240 	.word	0x000f4240
 80208dc:	2000b078 	.word	0x2000b078
 80208e0:	2000af60 	.word	0x2000af60
 80208e4:	0803aaa0 	.word	0x0803aaa0
 80208e8:	2000b090 	.word	0x2000b090
 80208ec:	2000292c 	.word	0x2000292c
 80208f0:	20002920 	.word	0x20002920
 80208f4:	0803aad4 	.word	0x0803aad4
 80208f8:	2000b08c 	.word	0x2000b08c

080208fc <iniciarDriverBaro>:
**  Descripcion:    Inicia un barometro
**  Parametros:     Driver a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverBaro(baro_t *dBaro)
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b082      	sub	sp, #8
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
    if (tablaFnBaro[dBaro->numBaro]->iniciarBaro(dBaro)) {
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	781b      	ldrb	r3, [r3, #0]
 8020908:	461a      	mov	r2, r3
 802090a:	4b16      	ldr	r3, [pc, #88]	; (8020964 <iniciarDriverBaro+0x68>)
 802090c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	6878      	ldr	r0, [r7, #4]
 8020914:	4798      	blx	r3
 8020916:	4603      	mov	r3, r0
 8020918:	2b00      	cmp	r3, #0
 802091a:	d017      	beq.n	802094c <iniciarDriverBaro+0x50>
        if (calibrarBaro(dBaro))
 802091c:	6878      	ldr	r0, [r7, #4]
 802091e:	f000 f9d5 	bl	8020ccc <calibrarBaro>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d004      	beq.n	8020932 <iniciarDriverBaro+0x36>
            dBaro->calibrado = true;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	2201      	movs	r2, #1
 802092c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8020930:	e00a      	b.n	8020948 <iniciarDriverBaro+0x4c>
        else {
        	dBaro->calibrado = false;
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	2200      	movs	r2, #0
 8020936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#ifdef DEBUG
            printf("Fallo en la calibracion del Barometro %u\n", dBaro->numBaro + 1);
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	781b      	ldrb	r3, [r3, #0]
 802093e:	3301      	adds	r3, #1
 8020940:	4619      	mov	r1, r3
 8020942:	4809      	ldr	r0, [pc, #36]	; (8020968 <iniciarDriverBaro+0x6c>)
 8020944:	f015 f9d6 	bl	8035cf4 <iprintf>
#endif
        }

        return true;
 8020948:	2301      	movs	r3, #1
 802094a:	e007      	b.n	802095c <iniciarDriverBaro+0x60>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion del Barometro %u\n", dBaro->numBaro + 1);
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	781b      	ldrb	r3, [r3, #0]
 8020950:	3301      	adds	r3, #1
 8020952:	4619      	mov	r1, r3
 8020954:	4805      	ldr	r0, [pc, #20]	; (802096c <iniciarDriverBaro+0x70>)
 8020956:	f015 f9cd 	bl	8035cf4 <iprintf>
#endif
        return false;
 802095a:	2300      	movs	r3, #0
    }
}
 802095c:	4618      	mov	r0, r3
 802095e:	3708      	adds	r7, #8
 8020960:	46bd      	mov	sp, r7
 8020962:	bd80      	pop	{r7, pc}
 8020964:	2000b090 	.word	0x2000b090
 8020968:	0803ab00 	.word	0x0803ab00
 802096c:	0803ab2c 	.word	0x0803ab2c

08020970 <actualizarFailsafeBaro>:
**  Descripcion:    Comprueba si no hay sensores principales operativos
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarFailsafeBaro(void)
{
 8020970:	b580      	push	{r7, lr}
 8020972:	b082      	sub	sp, #8
 8020974:	af00      	add	r7, sp, #0
    bool failsafe = true;
 8020976:	2301      	movs	r3, #1
 8020978:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 802097a:	2300      	movs	r3, #0
 802097c:	71bb      	strb	r3, [r7, #6]
 802097e:	e021      	b.n	80209c4 <actualizarFailsafeBaro+0x54>
        baro_t *driver = &baro[i];
 8020980:	79ba      	ldrb	r2, [r7, #6]
 8020982:	4613      	mov	r3, r2
 8020984:	00db      	lsls	r3, r3, #3
 8020986:	1a9b      	subs	r3, r3, r2
 8020988:	00db      	lsls	r3, r3, #3
 802098a:	4a13      	ldr	r2, [pc, #76]	; (80209d8 <actualizarFailsafeBaro+0x68>)
 802098c:	4413      	add	r3, r2
 802098e:	603b      	str	r3, [r7, #0]

        if (driver->iniciado && driver->operativo && !configBaro(i)->auxiliar)
 8020990:	683b      	ldr	r3, [r7, #0]
 8020992:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8020996:	2b00      	cmp	r3, #0
 8020998:	d011      	beq.n	80209be <actualizarFailsafeBaro+0x4e>
 802099a:	683b      	ldr	r3, [r7, #0]
 802099c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d00c      	beq.n	80209be <actualizarFailsafeBaro+0x4e>
 80209a4:	79bb      	ldrb	r3, [r7, #6]
 80209a6:	4618      	mov	r0, r3
 80209a8:	f7ff fe84 	bl	80206b4 <configBaro>
 80209ac:	4603      	mov	r3, r0
 80209ae:	785b      	ldrb	r3, [r3, #1]
 80209b0:	f083 0301 	eor.w	r3, r3, #1
 80209b4:	b2db      	uxtb	r3, r3
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d001      	beq.n	80209be <actualizarFailsafeBaro+0x4e>
        	failsafe = false;
 80209ba:	2300      	movs	r3, #0
 80209bc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 80209be:	79bb      	ldrb	r3, [r7, #6]
 80209c0:	3301      	adds	r3, #1
 80209c2:	71bb      	strb	r3, [r7, #6]
 80209c4:	79bb      	ldrb	r3, [r7, #6]
 80209c6:	2b04      	cmp	r3, #4
 80209c8:	d9da      	bls.n	8020980 <actualizarFailsafeBaro+0x10>
    }

    failsafeBaro = failsafe;
 80209ca:	4a04      	ldr	r2, [pc, #16]	; (80209dc <actualizarFailsafeBaro+0x6c>)
 80209cc:	79fb      	ldrb	r3, [r7, #7]
 80209ce:	7013      	strb	r3, [r2, #0]
}
 80209d0:	bf00      	nop
 80209d2:	3708      	adds	r7, #8
 80209d4:	46bd      	mov	sp, r7
 80209d6:	bd80      	pop	{r7, pc}
 80209d8:	2000af60 	.word	0x2000af60
 80209dc:	2000b0a4 	.word	0x2000b0a4

080209e0 <calcularBaroGen>:
**  Descripcion:    Mezcla las medidas de los sensores en uno general
**  Parametros:     Habilitacion de la mezcla de varios sensores
**  Retorno:        Ninguno
****************************************************************************************/
void calcularBaroGen(bool habMezcla)
{
 80209e0:	b580      	push	{r7, lr}
 80209e2:	b088      	sub	sp, #32
 80209e4:	af00      	add	r7, sp, #0
 80209e6:	4603      	mov	r3, r0
 80209e8:	71fb      	strb	r3, [r7, #7]
    float presionAcum = 0, temperaturaAcum = 0, presionSueloAcum = 0, temperaturaSueloAcum = 0;
 80209ea:	f04f 0300 	mov.w	r3, #0
 80209ee:	61fb      	str	r3, [r7, #28]
 80209f0:	f04f 0300 	mov.w	r3, #0
 80209f4:	61bb      	str	r3, [r7, #24]
 80209f6:	f04f 0300 	mov.w	r3, #0
 80209fa:	617b      	str	r3, [r7, #20]
 80209fc:	f04f 0300 	mov.w	r3, #0
 8020a00:	613b      	str	r3, [r7, #16]
    uint8_t numDriversOp = 0;
 8020a02:	2300      	movs	r3, #0
 8020a04:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020a06:	2300      	movs	r3, #0
 8020a08:	73bb      	strb	r3, [r7, #14]
 8020a0a:	e04b      	b.n	8020aa4 <calcularBaroGen+0xc4>
        baro_t *driver = &baro[i];
 8020a0c:	7bba      	ldrb	r2, [r7, #14]
 8020a0e:	4613      	mov	r3, r2
 8020a10:	00db      	lsls	r3, r3, #3
 8020a12:	1a9b      	subs	r3, r3, r2
 8020a14:	00db      	lsls	r3, r3, #3
 8020a16:	4a45      	ldr	r2, [pc, #276]	; (8020b2c <calcularBaroGen+0x14c>)
 8020a18:	4413      	add	r3, r2
 8020a1a:	60bb      	str	r3, [r7, #8]

        if (driver->operativo && (!configBaro(i)->auxiliar || failsafeBaro)) {
 8020a1c:	68bb      	ldr	r3, [r7, #8]
 8020a1e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d03b      	beq.n	8020a9e <calcularBaroGen+0xbe>
 8020a26:	7bbb      	ldrb	r3, [r7, #14]
 8020a28:	4618      	mov	r0, r3
 8020a2a:	f7ff fe43 	bl	80206b4 <configBaro>
 8020a2e:	4603      	mov	r3, r0
 8020a30:	785b      	ldrb	r3, [r3, #1]
 8020a32:	f083 0301 	eor.w	r3, r3, #1
 8020a36:	b2db      	uxtb	r3, r3
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	d103      	bne.n	8020a44 <calcularBaroGen+0x64>
 8020a3c:	4b3c      	ldr	r3, [pc, #240]	; (8020b30 <calcularBaroGen+0x150>)
 8020a3e:	781b      	ldrb	r3, [r3, #0]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	d02c      	beq.n	8020a9e <calcularBaroGen+0xbe>
            presionAcum += driver->presion;
 8020a44:	68bb      	ldr	r3, [r7, #8]
 8020a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8020a4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8020a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a52:	edc7 7a07 	vstr	s15, [r7, #28]
            temperaturaAcum += driver->temperatura;
 8020a56:	68bb      	ldr	r3, [r7, #8]
 8020a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8020a5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8020a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a64:	edc7 7a06 	vstr	s15, [r7, #24]
            presionSueloAcum += driver->presionSuelo;
 8020a68:	68bb      	ldr	r3, [r7, #8]
 8020a6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8020a6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8020a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a76:	edc7 7a05 	vstr	s15, [r7, #20]
            temperaturaSueloAcum += driver->temperaturaSuelo;
 8020a7a:	68bb      	ldr	r3, [r7, #8]
 8020a7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8020a80:	ed97 7a04 	vldr	s14, [r7, #16]
 8020a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a88:	edc7 7a04 	vstr	s15, [r7, #16]
            numDriversOp++;
 8020a8c:	7bfb      	ldrb	r3, [r7, #15]
 8020a8e:	3301      	adds	r3, #1
 8020a90:	73fb      	strb	r3, [r7, #15]

            if (!habMezcla)
 8020a92:	79fb      	ldrb	r3, [r7, #7]
 8020a94:	f083 0301 	eor.w	r3, r3, #1
 8020a98:	b2db      	uxtb	r3, r3
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d106      	bne.n	8020aac <calcularBaroGen+0xcc>
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020a9e:	7bbb      	ldrb	r3, [r7, #14]
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	73bb      	strb	r3, [r7, #14]
 8020aa4:	7bbb      	ldrb	r3, [r7, #14]
 8020aa6:	2b04      	cmp	r3, #4
 8020aa8:	d9b0      	bls.n	8020a0c <calcularBaroGen+0x2c>
 8020aaa:	e000      	b.n	8020aae <calcularBaroGen+0xce>
                break;
 8020aac:	bf00      	nop
        }
    }

    if (numDriversOp > 0) {
 8020aae:	7bfb      	ldrb	r3, [r7, #15]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d033      	beq.n	8020b1c <calcularBaroGen+0x13c>
        baroGen.operativo = true;
 8020ab4:	4b1f      	ldr	r3, [pc, #124]	; (8020b34 <calcularBaroGen+0x154>)
 8020ab6:	2201      	movs	r2, #1
 8020ab8:	701a      	strb	r2, [r3, #0]
        baroGen.presion = presionAcum / numDriversOp;
 8020aba:	7bfb      	ldrb	r3, [r7, #15]
 8020abc:	ee07 3a90 	vmov	s15, r3
 8020ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8020ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020acc:	4b19      	ldr	r3, [pc, #100]	; (8020b34 <calcularBaroGen+0x154>)
 8020ace:	edc3 7a01 	vstr	s15, [r3, #4]
        baroGen.temperatura = temperaturaAcum / numDriversOp;
 8020ad2:	7bfb      	ldrb	r3, [r7, #15]
 8020ad4:	ee07 3a90 	vmov	s15, r3
 8020ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020adc:	edd7 6a06 	vldr	s13, [r7, #24]
 8020ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ae4:	4b13      	ldr	r3, [pc, #76]	; (8020b34 <calcularBaroGen+0x154>)
 8020ae6:	edc3 7a02 	vstr	s15, [r3, #8]
        baroGen.presionSuelo = presionSueloAcum / numDriversOp;
 8020aea:	7bfb      	ldrb	r3, [r7, #15]
 8020aec:	ee07 3a90 	vmov	s15, r3
 8020af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020af4:	edd7 6a05 	vldr	s13, [r7, #20]
 8020af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020afc:	4b0d      	ldr	r3, [pc, #52]	; (8020b34 <calcularBaroGen+0x154>)
 8020afe:	edc3 7a03 	vstr	s15, [r3, #12]
        baroGen.temperaturaSuelo = temperaturaSueloAcum / numDriversOp;
 8020b02:	7bfb      	ldrb	r3, [r7, #15]
 8020b04:	ee07 3a90 	vmov	s15, r3
 8020b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020b0c:	edd7 6a04 	vldr	s13, [r7, #16]
 8020b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020b14:	4b07      	ldr	r3, [pc, #28]	; (8020b34 <calcularBaroGen+0x154>)
 8020b16:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    else
    	baroGen.operativo = false;
}
 8020b1a:	e002      	b.n	8020b22 <calcularBaroGen+0x142>
    	baroGen.operativo = false;
 8020b1c:	4b05      	ldr	r3, [pc, #20]	; (8020b34 <calcularBaroGen+0x154>)
 8020b1e:	2200      	movs	r2, #0
 8020b20:	701a      	strb	r2, [r3, #0]
}
 8020b22:	bf00      	nop
 8020b24:	3720      	adds	r7, #32
 8020b26:	46bd      	mov	sp, r7
 8020b28:	bd80      	pop	{r7, pc}
 8020b2a:	bf00      	nop
 8020b2c:	2000af60 	.word	0x2000af60
 8020b30:	2000b0a4 	.word	0x2000b0a4
 8020b34:	2000b078 	.word	0x2000b078

08020b38 <leerBaro>:
**  Descripcion:    Lee la presion y la temperatura de los barometros
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerBaro(uint32_t tiempoActual)
{
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b084      	sub	sp, #16
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020b40:	2300      	movs	r3, #0
 8020b42:	73fb      	strb	r3, [r7, #15]
 8020b44:	e012      	b.n	8020b6c <leerBaro+0x34>
    	baro_t *driver = &baro[i];
 8020b46:	7bfa      	ldrb	r2, [r7, #15]
 8020b48:	4613      	mov	r3, r2
 8020b4a:	00db      	lsls	r3, r3, #3
 8020b4c:	1a9b      	subs	r3, r3, r2
 8020b4e:	00db      	lsls	r3, r3, #3
 8020b50:	4a0e      	ldr	r2, [pc, #56]	; (8020b8c <leerBaro+0x54>)
 8020b52:	4413      	add	r3, r2
 8020b54:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado)
 8020b56:	68bb      	ldr	r3, [r7, #8]
 8020b58:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d002      	beq.n	8020b66 <leerBaro+0x2e>
            leerDriverBaro(driver);
 8020b60:	68b8      	ldr	r0, [r7, #8]
 8020b62:	f000 f817 	bl	8020b94 <leerDriverBaro>
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020b66:	7bfb      	ldrb	r3, [r7, #15]
 8020b68:	3301      	adds	r3, #1
 8020b6a:	73fb      	strb	r3, [r7, #15]
 8020b6c:	7bfb      	ldrb	r3, [r7, #15]
 8020b6e:	2b04      	cmp	r3, #4
 8020b70:	d9e9      	bls.n	8020b46 <leerBaro+0xe>
    }

    actualizarFailsafeBaro();
 8020b72:	f7ff fefd 	bl	8020970 <actualizarFailsafeBaro>

    if (cntBarosconectados > 0)
 8020b76:	4b06      	ldr	r3, [pc, #24]	; (8020b90 <leerBaro+0x58>)
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d002      	beq.n	8020b84 <leerBaro+0x4c>
        calcularBaroGen(MEZCLADO_MEDIDAS_BARO);
 8020b7e:	2001      	movs	r0, #1
 8020b80:	f7ff ff2e 	bl	80209e0 <calcularBaroGen>
}
 8020b84:	bf00      	nop
 8020b86:	3710      	adds	r7, #16
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	bd80      	pop	{r7, pc}
 8020b8c:	2000af60 	.word	0x2000af60
 8020b90:	2000b08c 	.word	0x2000b08c

08020b94 <leerDriverBaro>:
**  Descripcion:    Lee la presion y la temperatura de un barometro
**  Parametros:     Barometro a leer
**  Retorno:        Ninguno
****************************************************************************************/
void leerDriverBaro(baro_t *dBaro)
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b082      	sub	sp, #8
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
    tablaFnBaro[dBaro->numBaro]->leerBaro(dBaro);
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	781b      	ldrb	r3, [r3, #0]
 8020ba0:	461a      	mov	r2, r3
 8020ba2:	4b08      	ldr	r3, [pc, #32]	; (8020bc4 <leerDriverBaro+0x30>)
 8020ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ba8:	685b      	ldr	r3, [r3, #4]
 8020baa:	6878      	ldr	r0, [r7, #4]
 8020bac:	4798      	blx	r3
    actualizarBaroOperativo(dBaro);
 8020bae:	6878      	ldr	r0, [r7, #4]
 8020bb0:	f000 f856 	bl	8020c60 <actualizarBaroOperativo>
    dBaro->nuevaMedida = false;
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8020bbc:	bf00      	nop
 8020bbe:	3708      	adds	r7, #8
 8020bc0:	46bd      	mov	sp, r7
 8020bc2:	bd80      	pop	{r7, pc}
 8020bc4:	2000b090 	.word	0x2000b090

08020bc8 <actualizarBaro>:
**  Descripcion:    Actualiza las muestras de los barometros
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarBaro(uint32_t tiempoActual)
{
 8020bc8:	b580      	push	{r7, lr}
 8020bca:	b084      	sub	sp, #16
 8020bcc:	af00      	add	r7, sp, #0
 8020bce:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	73fb      	strb	r3, [r7, #15]
 8020bd4:	e026      	b.n	8020c24 <actualizarBaro+0x5c>
    	baro_t *driver = &baro[i];
 8020bd6:	7bfa      	ldrb	r2, [r7, #15]
 8020bd8:	4613      	mov	r3, r2
 8020bda:	00db      	lsls	r3, r3, #3
 8020bdc:	1a9b      	subs	r3, r3, r2
 8020bde:	00db      	lsls	r3, r3, #3
 8020be0:	4a14      	ldr	r2, [pc, #80]	; (8020c34 <actualizarBaro+0x6c>)
 8020be2:	4413      	add	r3, r2
 8020be4:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado && (configBaro(i)->drdy == 0 || leerIO(configBaro(i)->drdy)))
 8020be6:	68bb      	ldr	r3, [r7, #8]
 8020be8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d016      	beq.n	8020c1e <actualizarBaro+0x56>
 8020bf0:	7bfb      	ldrb	r3, [r7, #15]
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	f7ff fd5e 	bl	80206b4 <configBaro>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	799b      	ldrb	r3, [r3, #6]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d00b      	beq.n	8020c18 <actualizarBaro+0x50>
 8020c00:	7bfb      	ldrb	r3, [r7, #15]
 8020c02:	4618      	mov	r0, r3
 8020c04:	f7ff fd56 	bl	80206b4 <configBaro>
 8020c08:	4603      	mov	r3, r0
 8020c0a:	799b      	ldrb	r3, [r3, #6]
 8020c0c:	4618      	mov	r0, r3
 8020c0e:	f7f5 fcd7 	bl	80165c0 <leerIO>
 8020c12:	4603      	mov	r3, r0
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d002      	beq.n	8020c1e <actualizarBaro+0x56>
            actualizarDriverBaro(driver);
 8020c18:	68b8      	ldr	r0, [r7, #8]
 8020c1a:	f000 f80d 	bl	8020c38 <actualizarDriverBaro>
    for (uint8_t i = 0; i < NUM_MAX_BARO; i++) {
 8020c1e:	7bfb      	ldrb	r3, [r7, #15]
 8020c20:	3301      	adds	r3, #1
 8020c22:	73fb      	strb	r3, [r7, #15]
 8020c24:	7bfb      	ldrb	r3, [r7, #15]
 8020c26:	2b04      	cmp	r3, #4
 8020c28:	d9d5      	bls.n	8020bd6 <actualizarBaro+0xe>
    }
}
 8020c2a:	bf00      	nop
 8020c2c:	bf00      	nop
 8020c2e:	3710      	adds	r7, #16
 8020c30:	46bd      	mov	sp, r7
 8020c32:	bd80      	pop	{r7, pc}
 8020c34:	2000af60 	.word	0x2000af60

08020c38 <actualizarDriverBaro>:
**  Descripcion:    Actualiza las muestras de un barometro
**  Parametros:     Puntero al barometro a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarDriverBaro(baro_t *dBaro)
{
 8020c38:	b580      	push	{r7, lr}
 8020c3a:	b082      	sub	sp, #8
 8020c3c:	af00      	add	r7, sp, #0
 8020c3e:	6078      	str	r0, [r7, #4]
    tablaFnBaro[dBaro->numBaro]->actualizarBaro(dBaro);
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	781b      	ldrb	r3, [r3, #0]
 8020c44:	461a      	mov	r2, r3
 8020c46:	4b05      	ldr	r3, [pc, #20]	; (8020c5c <actualizarDriverBaro+0x24>)
 8020c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020c4c:	689b      	ldr	r3, [r3, #8]
 8020c4e:	6878      	ldr	r0, [r7, #4]
 8020c50:	4798      	blx	r3
}
 8020c52:	bf00      	nop
 8020c54:	3708      	adds	r7, #8
 8020c56:	46bd      	mov	sp, r7
 8020c58:	bd80      	pop	{r7, pc}
 8020c5a:	bf00      	nop
 8020c5c:	2000b090 	.word	0x2000b090

08020c60 <actualizarBaroOperativo>:
**  Descripcion:    Actualiza la bandera del estado operativo
**  Parametros:     Puntero al barometro a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarBaroOperativo(baro_t *dBaro)
{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b084      	sub	sp, #16
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
    // Se considera que el sensor esta operativo si se ha actualizado en X tiempo,
    // tiene valores diferentes de 0 y las medidas han cambiado en los ultimos X microsegundos
    const uint32_t tiempo = micros();
 8020c68:	f7f6 ff36 	bl	8017ad8 <micros>
 8020c6c:	60f8      	str	r0, [r7, #12]
    dBaro->operativo =
        ((tiempo - dBaro->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_BARO) &&
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c72:	68fa      	ldr	r2, [r7, #12]
 8020c74:	1ad3      	subs	r3, r2, r3
        ((tiempo - dBaro->timing.ultimaMedida) < TIMEOUT_MEDIDA_BARO) &&
        ((tiempo - dBaro->timing.ultimoCambio) < TIMEOUT_CAMBIO_MEDIDA_BARO) &&
 8020c76:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8020c7a:	4293      	cmp	r3, r2
 8020c7c:	d817      	bhi.n	8020cae <actualizarBaroOperativo+0x4e>
        ((tiempo - dBaro->timing.ultimaMedida) < TIMEOUT_MEDIDA_BARO) &&
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c82:	68fa      	ldr	r2, [r7, #12]
 8020c84:	1ad3      	subs	r3, r2, r3
        ((tiempo - dBaro->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_BARO) &&
 8020c86:	4a0f      	ldr	r2, [pc, #60]	; (8020cc4 <actualizarBaroOperativo+0x64>)
 8020c88:	4293      	cmp	r3, r2
 8020c8a:	d810      	bhi.n	8020cae <actualizarBaroOperativo+0x4e>
        ((tiempo - dBaro->timing.ultimoCambio) < TIMEOUT_CAMBIO_MEDIDA_BARO) &&
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c90:	68fa      	ldr	r2, [r7, #12]
 8020c92:	1ad3      	subs	r3, r2, r3
        ((tiempo - dBaro->timing.ultimaMedida) < TIMEOUT_MEDIDA_BARO) &&
 8020c94:	4a0c      	ldr	r2, [pc, #48]	; (8020cc8 <actualizarBaroOperativo+0x68>)
 8020c96:	4293      	cmp	r3, r2
 8020c98:	d809      	bhi.n	8020cae <actualizarBaroOperativo+0x4e>
        (dBaro->presion > 0);
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	edd3 7a03 	vldr	s15, [r3, #12]
        ((tiempo - dBaro->timing.ultimoCambio) < TIMEOUT_CAMBIO_MEDIDA_BARO) &&
 8020ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ca8:	dd01      	ble.n	8020cae <actualizarBaroOperativo+0x4e>
 8020caa:	2301      	movs	r3, #1
 8020cac:	e000      	b.n	8020cb0 <actualizarBaroOperativo+0x50>
 8020cae:	2300      	movs	r3, #0
 8020cb0:	f003 0301 	and.w	r3, r3, #1
 8020cb4:	b2da      	uxtb	r2, r3
    dBaro->operativo =
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8020cbc:	bf00      	nop
 8020cbe:	3710      	adds	r7, #16
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	00030d3f 	.word	0x00030d3f
 8020cc8:	0007a11f 	.word	0x0007a11f

08020ccc <calibrarBaro>:
**  Descripcion:    Calibra el barometro haciendo una media de las muestras
**  Parametros:     Barometro a calibrar
**  Retorno:        True si ok
****************************************************************************************/
bool calibrarBaro(baro_t *dBaro)
{
 8020ccc:	b580      	push	{r7, lr}
 8020cce:	b08a      	sub	sp, #40	; 0x28
 8020cd0:	af00      	add	r7, sp, #0
 8020cd2:	6078      	str	r0, [r7, #4]
    // Tomamos lecturas durante 1 segundo para evitar lecturas erroneas en el despegue. De no hacer esto se pueden tener errores de hasta 1 metro.
    for (uint8_t j = 0; j < 10; j++) {
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020cda:	e025      	b.n	8020d28 <calibrarBaro+0x5c>
        uint32_t tiempoIni = millis();
 8020cdc:	f7f6 ff3a 	bl	8017b54 <millis>
 8020ce0:	60f8      	str	r0, [r7, #12]
        do {
            if (millis() - tiempoIni > 500)
 8020ce2:	f7f6 ff37 	bl	8017b54 <millis>
 8020ce6:	4602      	mov	r2, r0
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	1ad3      	subs	r3, r2, r3
 8020cec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8020cf0:	d901      	bls.n	8020cf6 <calibrarBaro+0x2a>
                return false;
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	e08d      	b.n	8020e12 <calibrarBaro+0x146>

            actualizarDriverBaro(dBaro);
 8020cf6:	6878      	ldr	r0, [r7, #4]
 8020cf8:	f7ff ff9e 	bl	8020c38 <actualizarDriverBaro>
            leerDriverBaro(dBaro);
 8020cfc:	6878      	ldr	r0, [r7, #4]
 8020cfe:	f7ff ff49 	bl	8020b94 <leerDriverBaro>
            delay(10);
 8020d02:	200a      	movs	r0, #10
 8020d04:	f7f6 ff47 	bl	8017b96 <delay>
        } while (!dBaro->operativo);
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020d0e:	f083 0301 	eor.w	r3, r3, #1
 8020d12:	b2db      	uxtb	r3, r3
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d1e4      	bne.n	8020ce2 <calibrarBaro+0x16>
        delay(100);
 8020d18:	2064      	movs	r0, #100	; 0x64
 8020d1a:	f7f6 ff3c 	bl	8017b96 <delay>
    for (uint8_t j = 0; j < 10; j++) {
 8020d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020d22:	3301      	adds	r3, #1
 8020d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020d2c:	2b09      	cmp	r3, #9
 8020d2e:	d9d5      	bls.n	8020cdc <calibrarBaro+0x10>
    }

    float sumPresion = 0.0;
 8020d30:	f04f 0300 	mov.w	r3, #0
 8020d34:	623b      	str	r3, [r7, #32]
    uint8_t contador = 0;
 8020d36:	2300      	movs	r3, #0
 8020d38:	77fb      	strb	r3, [r7, #31]
    const uint8_t numMuestras = 5;
 8020d3a:	2305      	movs	r3, #5
 8020d3c:	777b      	strb	r3, [r7, #29]

    for (uint8_t j = 0; j < numMuestras; j++) {
 8020d3e:	2300      	movs	r3, #0
 8020d40:	77bb      	strb	r3, [r7, #30]
 8020d42:	e034      	b.n	8020dae <calibrarBaro+0xe2>
        uint32_t tiempoIni = millis();
 8020d44:	f7f6 ff06 	bl	8017b54 <millis>
 8020d48:	6138      	str	r0, [r7, #16]
        do {
            if (millis() - tiempoIni > 500)
 8020d4a:	f7f6 ff03 	bl	8017b54 <millis>
 8020d4e:	4602      	mov	r2, r0
 8020d50:	693b      	ldr	r3, [r7, #16]
 8020d52:	1ad3      	subs	r3, r2, r3
 8020d54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8020d58:	d901      	bls.n	8020d5e <calibrarBaro+0x92>
                return false;
 8020d5a:	2300      	movs	r3, #0
 8020d5c:	e059      	b.n	8020e12 <calibrarBaro+0x146>

            actualizarDriverBaro(dBaro);
 8020d5e:	6878      	ldr	r0, [r7, #4]
 8020d60:	f7ff ff6a 	bl	8020c38 <actualizarDriverBaro>
            leerDriverBaro(dBaro);
 8020d64:	6878      	ldr	r0, [r7, #4]
 8020d66:	f7ff ff15 	bl	8020b94 <leerDriverBaro>
            delay(10);
 8020d6a:	200a      	movs	r0, #10
 8020d6c:	f7f6 ff13 	bl	8017b96 <delay>
        } while (!dBaro->operativo);
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020d76:	f083 0301 	eor.w	r3, r3, #1
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d1e4      	bne.n	8020d4a <calibrarBaro+0x7e>

        if (dBaro->operativo) {
 8020d80:	687b      	ldr	r3, [r7, #4]
 8020d82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d00b      	beq.n	8020da2 <calibrarBaro+0xd6>
            sumPresion += dBaro->presion;
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020d90:	ed97 7a08 	vldr	s14, [r7, #32]
 8020d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020d98:	edc7 7a08 	vstr	s15, [r7, #32]
            contador++;
 8020d9c:	7ffb      	ldrb	r3, [r7, #31]
 8020d9e:	3301      	adds	r3, #1
 8020da0:	77fb      	strb	r3, [r7, #31]
        }

        delay(100);
 8020da2:	2064      	movs	r0, #100	; 0x64
 8020da4:	f7f6 fef7 	bl	8017b96 <delay>
    for (uint8_t j = 0; j < numMuestras; j++) {
 8020da8:	7fbb      	ldrb	r3, [r7, #30]
 8020daa:	3301      	adds	r3, #1
 8020dac:	77bb      	strb	r3, [r7, #30]
 8020dae:	7fba      	ldrb	r2, [r7, #30]
 8020db0:	7f7b      	ldrb	r3, [r7, #29]
 8020db2:	429a      	cmp	r2, r3
 8020db4:	d3c6      	bcc.n	8020d44 <calibrarBaro+0x78>
    }

    if (contador == 0)
 8020db6:	7ffb      	ldrb	r3, [r7, #31]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d101      	bne.n	8020dc0 <calibrarBaro+0xf4>
        return false;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	e028      	b.n	8020e12 <calibrarBaro+0x146>
    else
    	dBaro->presionSuelo = sumPresion / contador;
 8020dc0:	7ffb      	ldrb	r3, [r7, #31]
 8020dc2:	ee07 3a90 	vmov	s15, r3
 8020dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020dca:	edd7 6a08 	vldr	s13, [r7, #32]
 8020dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	edc3 7a05 	vstr	s15, [r3, #20]

    dBaro->temperaturaSuelo = MIN(dBaro->temperatura, 35);
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	691b      	ldr	r3, [r3, #16]
 8020ddc:	61bb      	str	r3, [r7, #24]
 8020dde:	2323      	movs	r3, #35	; 0x23
 8020de0:	617b      	str	r3, [r7, #20]
 8020de2:	697b      	ldr	r3, [r7, #20]
 8020de4:	ee07 3a90 	vmov	s15, r3
 8020de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dec:	ed97 7a06 	vldr	s14, [r7, #24]
 8020df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020df8:	d502      	bpl.n	8020e00 <calibrarBaro+0x134>
 8020dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8020dfe:	e004      	b.n	8020e0a <calibrarBaro+0x13e>
 8020e00:	697b      	ldr	r3, [r7, #20]
 8020e02:	ee07 3a90 	vmov	s15, r3
 8020e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	edc3 7a06 	vstr	s15, [r3, #24]
    return true;
 8020e10:	2301      	movs	r3, #1
}
 8020e12:	4618      	mov	r0, r3
 8020e14:	3728      	adds	r7, #40	; 0x28
 8020e16:	46bd      	mov	sp, r7
 8020e18:	bd80      	pop	{r7, pc}
	...

08020e1c <presionBaroOk>:
**  Descripcion:    Comprueba si la lectura de presion es correcta
**  Parametros:     Puntero al barometro, medida de la presion
**  Retorno:        True si ok
****************************************************************************************/
bool presionBaroOk(baro_t *dBaro, float presion)
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	b086      	sub	sp, #24
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	6078      	str	r0, [r7, #4]
 8020e24:	ed87 0a00 	vstr	s0, [r7]
    if (isinf(presion) || isnan(presion))
 8020e28:	edd7 7a00 	vldr	s15, [r7]
 8020e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8020e30:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8020f44 <presionBaroOk+0x128>
 8020e34:	eef4 7a47 	vcmp.f32	s15, s14
 8020e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e3c:	bfd4      	ite	le
 8020e3e:	2301      	movle	r3, #1
 8020e40:	2300      	movgt	r3, #0
 8020e42:	b2db      	uxtb	r3, r3
 8020e44:	f083 0301 	eor.w	r3, r3, #1
 8020e48:	b2db      	uxtb	r3, r3
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	d108      	bne.n	8020e60 <presionBaroOk+0x44>
 8020e4e:	ed97 7a00 	vldr	s14, [r7]
 8020e52:	edd7 7a00 	vldr	s15, [r7]
 8020e56:	eeb4 7a67 	vcmp.f32	s14, s15
 8020e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e5e:	d701      	bvc.n	8020e64 <presionBaroOk+0x48>
        return false;
 8020e60:	2300      	movs	r3, #0
 8020e62:	e06b      	b.n	8020f3c <presionBaroOk+0x120>

    uint8_t rango = configBaro(dBaro->numBaro)->rangoFiltro;
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	781b      	ldrb	r3, [r3, #0]
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7ff fc23 	bl	80206b4 <configBaro>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	79db      	ldrb	r3, [r3, #7]
 8020e72:	73fb      	strb	r3, [r7, #15]
    if (rango <= 0)
 8020e74:	7bfb      	ldrb	r3, [r7, #15]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d101      	bne.n	8020e7e <presionBaroOk+0x62>
        return true;
 8020e7a:	2301      	movs	r3, #1
 8020e7c:	e05e      	b.n	8020f3c <presionBaroOk+0x120>

    bool estado = true;
 8020e7e:	2301      	movs	r3, #1
 8020e80:	75fb      	strb	r3, [r7, #23]
    if (dBaro->presionMedia == 0)
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	edd3 7a08 	vldr	s15, [r3, #32]
 8020e88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e90:	d103      	bne.n	8020e9a <presionBaroOk+0x7e>
    	dBaro->presionMedia = presion;
 8020e92:	687b      	ldr	r3, [r7, #4]
 8020e94:	683a      	ldr	r2, [r7, #0]
 8020e96:	621a      	str	r2, [r3, #32]
 8020e98:	e04f      	b.n	8020f3a <presionBaroOk+0x11e>
    else {
        const float d = fabsf(dBaro->presionMedia - presion) / (dBaro->presionMedia + presion);
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	ed93 7a08 	vldr	s14, [r3, #32]
 8020ea0:	edd7 7a00 	vldr	s15, [r7]
 8020ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020ea8:	eef0 6ae7 	vabs.f32	s13, s15
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	ed93 7a08 	vldr	s14, [r3, #32]
 8020eb2:	edd7 7a00 	vldr	s15, [r7]
 8020eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ebe:	edc7 7a02 	vstr	s15, [r7, #8]
        float koeff = K_FILTRO_BARO;
 8020ec2:	4b21      	ldr	r3, [pc, #132]	; (8020f48 <presionBaroOk+0x12c>)
 8020ec4:	613b      	str	r3, [r7, #16]

        if (d * 200.0f > rango) {
 8020ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8020eca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8020f4c <presionBaroOk+0x130>
 8020ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020ed2:	7bfb      	ldrb	r3, [r7, #15]
 8020ed4:	ee07 3a90 	vmov	s15, r3
 8020ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ee4:	dd13      	ble.n	8020f0e <presionBaroOk+0xf2>
        	estado = false;
 8020ee6:	2300      	movs	r3, #0
 8020ee8:	75fb      	strb	r3, [r7, #23]
            koeff /= (d * 10.0f);
 8020eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8020eee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8020ef2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020ef6:	edd7 6a04 	vldr	s13, [r7, #16]
 8020efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020efe:	edc7 7a04 	vstr	s15, [r7, #16]
            dBaro->cntErrorFiltro++;
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020f06:	3301      	adds	r3, #1
 8020f08:	b29a      	uxth	r2, r3
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        dBaro->presionMedia = dBaro->presionMedia * (1 - koeff) + presion * koeff; // Filtro complementario 1/k
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	ed93 7a08 	vldr	s14, [r3, #32]
 8020f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8020f1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020f24:	edd7 6a00 	vldr	s13, [r7]
 8020f28:	edd7 7a04 	vldr	s15, [r7, #16]
 8020f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	edc3 7a08 	vstr	s15, [r3, #32]
    }

    return estado;
 8020f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	3718      	adds	r7, #24
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}
 8020f44:	7f7fffff 	.word	0x7f7fffff
 8020f48:	3dcccccd 	.word	0x3dcccccd
 8020f4c:	43480000 	.word	0x43480000

08020f50 <baroGenOperativo>:
**  Descripcion:    Devuelve si el baro general esta operativo
**  Parametros:     Ninguno
**  Retorno:        Baro general operativo
****************************************************************************************/
bool baroGenOperativo(void)
{
 8020f50:	b480      	push	{r7}
 8020f52:	af00      	add	r7, sp, #0
    return baroGen.operativo;
 8020f54:	4b03      	ldr	r3, [pc, #12]	; (8020f64 <baroGenOperativo+0x14>)
 8020f56:	781b      	ldrb	r3, [r3, #0]
}
 8020f58:	4618      	mov	r0, r3
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f60:	4770      	bx	lr
 8020f62:	bf00      	nop
 8020f64:	2000b078 	.word	0x2000b078

08020f68 <presionBaro>:
**  Descripcion:    Devuelve la presion del baro general
**  Parametros:     Ninguno
**  Retorno:        Presion
****************************************************************************************/
float presionBaro(void)
{
 8020f68:	b480      	push	{r7}
 8020f6a:	af00      	add	r7, sp, #0
	return baroGen.presion;
 8020f6c:	4b04      	ldr	r3, [pc, #16]	; (8020f80 <presionBaro+0x18>)
 8020f6e:	685b      	ldr	r3, [r3, #4]
 8020f70:	ee07 3a90 	vmov	s15, r3
}
 8020f74:	eeb0 0a67 	vmov.f32	s0, s15
 8020f78:	46bd      	mov	sp, r7
 8020f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f7e:	4770      	bx	lr
 8020f80:	2000b078 	.word	0x2000b078

08020f84 <presionSueloBaro>:
**  Descripcion:    Devuelve la presion del suelo del baro general
**  Parametros:     Ninguno
**  Retorno:        Presion del suelo
****************************************************************************************/
float presionSueloBaro(void)
{
 8020f84:	b480      	push	{r7}
 8020f86:	af00      	add	r7, sp, #0
	return baroGen.presionSuelo;
 8020f88:	4b04      	ldr	r3, [pc, #16]	; (8020f9c <presionSueloBaro+0x18>)
 8020f8a:	68db      	ldr	r3, [r3, #12]
 8020f8c:	ee07 3a90 	vmov	s15, r3
}
 8020f90:	eeb0 0a67 	vmov.f32	s0, s15
 8020f94:	46bd      	mov	sp, r7
 8020f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f9a:	4770      	bx	lr
 8020f9c:	2000b078 	.word	0x2000b078

08020fa0 <temperaturaSueloBaro>:
**  Descripcion:    Devuelve la temperatura del suelo del baro general
**  Parametros:     Ninguno
**  Retorno:        Temperatura del suelo
****************************************************************************************/
float temperaturaSueloBaro(void)
{
 8020fa0:	b480      	push	{r7}
 8020fa2:	af00      	add	r7, sp, #0
	return baroGen.temperaturaSuelo;
 8020fa4:	4b04      	ldr	r3, [pc, #16]	; (8020fb8 <temperaturaSueloBaro+0x18>)
 8020fa6:	691b      	ldr	r3, [r3, #16]
 8020fa8:	ee07 3a90 	vmov	s15, r3
}
 8020fac:	eeb0 0a67 	vmov.f32	s0, s15
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fb6:	4770      	bx	lr
 8020fb8:	2000b078 	.word	0x2000b078

08020fbc <buscarLadoCalibrador>:
**  Descripcion:    Busca el lado de calibracion
**  Parametros:     Sensor a calibrar, puntero al calibrador
**  Retorno:        Lado encontrado
****************************************************************************************/
estadoLadoCal_e buscarLadoCalibrador(uint8_t numSensor, calibrador_t *calibrador)
{
 8020fbc:	b590      	push	{r4, r7, lr}
 8020fbe:	b08d      	sub	sp, #52	; 0x34
 8020fc0:	af00      	add	r7, sp, #0
 8020fc2:	4603      	mov	r3, r0
 8020fc4:	6039      	str	r1, [r7, #0]
 8020fc6:	71fb      	strb	r3, [r7, #7]
    // Se comprueba el timeout y el numero de errores
    uint32_t tiempoActual = millis();
 8020fc8:	f7f6 fdc4 	bl	8017b54 <millis>
 8020fcc:	62b8      	str	r0, [r7, #40]	; 0x28
        return ORIENTACION_ERROR;
    }
*/
    // Se detecta que el sensor este quieto
    float acel[3], acelFilt[3];
	acelNumIMU(numSensor, acel);
 8020fce:	f107 0218 	add.w	r2, r7, #24
 8020fd2:	79fb      	ldrb	r3, [r7, #7]
 8020fd4:	4611      	mov	r1, r2
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f004 fdee 	bl	8025bb8 <acelNumIMU>

    for (uint8_t i = 0; i < 3; i++)
 8020fdc:	2300      	movs	r3, #0
 8020fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8020fe2:	e025      	b.n	8021030 <buscarLadoCalibrador+0x74>
        acelFilt[i] = actualizarFiltroMediaMovil(&calibrador->filtroAcel[i], acel[i]);
 8020fe4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8020fe8:	4613      	mov	r3, r2
 8020fea:	011b      	lsls	r3, r3, #4
 8020fec:	4413      	add	r3, r2
 8020fee:	009b      	lsls	r3, r3, #2
 8020ff0:	3310      	adds	r3, #16
 8020ff2:	683a      	ldr	r2, [r7, #0]
 8020ff4:	4413      	add	r3, r2
 8020ff6:	1d1a      	adds	r2, r3, #4
 8020ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020ffc:	009b      	lsls	r3, r3, #2
 8020ffe:	3330      	adds	r3, #48	; 0x30
 8021000:	443b      	add	r3, r7
 8021002:	3b18      	subs	r3, #24
 8021004:	edd3 7a00 	vldr	s15, [r3]
 8021008:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 802100c:	eeb0 0a67 	vmov.f32	s0, s15
 8021010:	4610      	mov	r0, r2
 8021012:	f7fb f884 	bl	801c11e <actualizarFiltroMediaMovil>
 8021016:	eef0 7a40 	vmov.f32	s15, s0
 802101a:	00a3      	lsls	r3, r4, #2
 802101c:	3330      	adds	r3, #48	; 0x30
 802101e:	443b      	add	r3, r7
 8021020:	3b24      	subs	r3, #36	; 0x24
 8021022:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; i++)
 8021026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802102a:	3301      	adds	r3, #1
 802102c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021034:	2b02      	cmp	r3, #2
 8021036:	d9d5      	bls.n	8020fe4 <buscarLadoCalibrador+0x28>

    float modAcel = moduloVector3(acelFilt) - 1;
 8021038:	f107 030c 	add.w	r3, r7, #12
 802103c:	4618      	mov	r0, r3
 802103e:	f7f2 fb47 	bl	80136d0 <moduloVector3>
 8021042:	eef0 7a40 	vmov.f32	s15, s0
 8021046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802104a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802104e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    if (modAcel < TOLERANCIA_SENSOR_QUIETO_CALIBRADOR) {
 8021052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021056:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80212b4 <buscarLadoCalibrador+0x2f8>
 802105a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021062:	f140 811e 	bpl.w	80212a2 <buscarLadoCalibrador+0x2e6>
        calibrador->sensorQuieto = true;
 8021066:	683b      	ldr	r3, [r7, #0]
 8021068:	2201      	movs	r2, #1
 802106a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

        // Se busca el lado
        // [ 0,  0,  g ]
        if (fabsf(acelFilt[0]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2] - 1) < TOLERANCIA_LADO_CALIBRADOR) {
 802106e:	edd7 7a03 	vldr	s15, [r7, #12]
 8021072:	eef0 7ae7 	vabs.f32	s15, s15
 8021076:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 802107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021082:	d523      	bpl.n	80210cc <buscarLadoCalibrador+0x110>
 8021084:	edd7 7a04 	vldr	s15, [r7, #16]
 8021088:	eef0 7ae7 	vabs.f32	s15, s15
 802108c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021098:	d518      	bpl.n	80210cc <buscarLadoCalibrador+0x110>
 802109a:	edd7 7a05 	vldr	s15, [r7, #20]
 802109e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80210a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80210a6:	eef0 7ae7 	vabs.f32	s15, s15
 80210aa:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80210ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80210b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210b6:	d509      	bpl.n	80210cc <buscarLadoCalibrador+0x110>
            calibrador->ladoEncontrado[ORIENTACION_BOCA_ARRIBA] = true;
 80210b8:	683b      	ldr	r3, [r7, #0]
 80210ba:	2201      	movs	r2, #1
 80210bc:	735a      	strb	r2, [r3, #13]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 80210be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80210c0:	4b7e      	ldr	r3, [pc, #504]	; (80212bc <buscarLadoCalibrador+0x300>)
 80210c2:	4413      	add	r3, r2
 80210c4:	683a      	ldr	r2, [r7, #0]
 80210c6:	6093      	str	r3, [r2, #8]
            return ORIENTACION_BOCA_ARRIBA;
 80210c8:	2300      	movs	r3, #0
 80210ca:	e0ef      	b.n	80212ac <buscarLadoCalibrador+0x2f0>
        }

        // [ 0,  0, -g ]
        if (fabsf(acelFilt[0]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2] + 1) < TOLERANCIA_LADO_CALIBRADOR) {
 80210cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80210d0:	eef0 7ae7 	vabs.f32	s15, s15
 80210d4:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80210d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80210dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210e0:	d523      	bpl.n	802112a <buscarLadoCalibrador+0x16e>
 80210e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80210e6:	eef0 7ae7 	vabs.f32	s15, s15
 80210ea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80210ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80210f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210f6:	d518      	bpl.n	802112a <buscarLadoCalibrador+0x16e>
 80210f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80210fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021104:	eef0 7ae7 	vabs.f32	s15, s15
 8021108:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 802110c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021114:	d509      	bpl.n	802112a <buscarLadoCalibrador+0x16e>
            calibrador->ladoEncontrado[ORIENTACION_BOCA_ABAJO] = true;
 8021116:	683b      	ldr	r3, [r7, #0]
 8021118:	2201      	movs	r2, #1
 802111a:	739a      	strb	r2, [r3, #14]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 802111c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802111e:	4b67      	ldr	r3, [pc, #412]	; (80212bc <buscarLadoCalibrador+0x300>)
 8021120:	4413      	add	r3, r2
 8021122:	683a      	ldr	r2, [r7, #0]
 8021124:	6093      	str	r3, [r2, #8]
            return ORIENTACION_BOCA_ABAJO;
 8021126:	2301      	movs	r3, #1
 8021128:	e0c0      	b.n	80212ac <buscarLadoCalibrador+0x2f0>

        }

        // [ 0,  g,  0 ]
        if (fabsf(acelFilt[0]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1] - 1) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2]) < TOLERANCIA_LADO_CALIBRADOR) {
 802112a:	edd7 7a03 	vldr	s15, [r7, #12]
 802112e:	eef0 7ae7 	vabs.f32	s15, s15
 8021132:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021136:	eef4 7ac7 	vcmpe.f32	s15, s14
 802113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802113e:	d523      	bpl.n	8021188 <buscarLadoCalibrador+0x1cc>
 8021140:	edd7 7a04 	vldr	s15, [r7, #16]
 8021144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802114c:	eef0 7ae7 	vabs.f32	s15, s15
 8021150:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802115c:	d514      	bpl.n	8021188 <buscarLadoCalibrador+0x1cc>
 802115e:	edd7 7a05 	vldr	s15, [r7, #20]
 8021162:	eef0 7ae7 	vabs.f32	s15, s15
 8021166:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 802116a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021172:	d509      	bpl.n	8021188 <buscarLadoCalibrador+0x1cc>
            calibrador->ladoEncontrado[ORIENTACION_IZQUIERDA_ARRIBA] = true;
 8021174:	683b      	ldr	r3, [r7, #0]
 8021176:	2201      	movs	r2, #1
 8021178:	73da      	strb	r2, [r3, #15]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 802117a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802117c:	4b4f      	ldr	r3, [pc, #316]	; (80212bc <buscarLadoCalibrador+0x300>)
 802117e:	4413      	add	r3, r2
 8021180:	683a      	ldr	r2, [r7, #0]
 8021182:	6093      	str	r3, [r2, #8]
            return ORIENTACION_IZQUIERDA_ARRIBA;
 8021184:	2302      	movs	r3, #2
 8021186:	e091      	b.n	80212ac <buscarLadoCalibrador+0x2f0>

        }

        // [ 0, -g,  0 ]
        if (fabsf(acelFilt[0]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1] + 1) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2]) < TOLERANCIA_LADO_CALIBRADOR) {
 8021188:	edd7 7a03 	vldr	s15, [r7, #12]
 802118c:	eef0 7ae7 	vabs.f32	s15, s15
 8021190:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802119c:	d523      	bpl.n	80211e6 <buscarLadoCalibrador+0x22a>
 802119e:	edd7 7a04 	vldr	s15, [r7, #16]
 80211a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80211aa:	eef0 7ae7 	vabs.f32	s15, s15
 80211ae:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80211b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80211b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211ba:	d514      	bpl.n	80211e6 <buscarLadoCalibrador+0x22a>
 80211bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80211c0:	eef0 7ae7 	vabs.f32	s15, s15
 80211c4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80211c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80211cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211d0:	d509      	bpl.n	80211e6 <buscarLadoCalibrador+0x22a>
            calibrador->ladoEncontrado[ORIENTACION_DERECHA_ARRIBA] = true;
 80211d2:	683b      	ldr	r3, [r7, #0]
 80211d4:	2201      	movs	r2, #1
 80211d6:	741a      	strb	r2, [r3, #16]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 80211d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80211da:	4b38      	ldr	r3, [pc, #224]	; (80212bc <buscarLadoCalibrador+0x300>)
 80211dc:	4413      	add	r3, r2
 80211de:	683a      	ldr	r2, [r7, #0]
 80211e0:	6093      	str	r3, [r2, #8]
            return ORIENTACION_DERECHA_ARRIBA;
 80211e2:	2303      	movs	r3, #3
 80211e4:	e062      	b.n	80212ac <buscarLadoCalibrador+0x2f0>

        }

        // [-g,  0,  0 ]
    	if (fabsf(acelFilt[0] + 1) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2]) < TOLERANCIA_LADO_CALIBRADOR) {
 80211e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80211ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80211f2:	eef0 7ae7 	vabs.f32	s15, s15
 80211f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 80211fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80211fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021202:	d51f      	bpl.n	8021244 <buscarLadoCalibrador+0x288>
 8021204:	edd7 7a04 	vldr	s15, [r7, #16]
 8021208:	eef0 7ae7 	vabs.f32	s15, s15
 802120c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021218:	d514      	bpl.n	8021244 <buscarLadoCalibrador+0x288>
 802121a:	edd7 7a05 	vldr	s15, [r7, #20]
 802121e:	eef0 7ae7 	vabs.f32	s15, s15
 8021222:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021226:	eef4 7ac7 	vcmpe.f32	s15, s14
 802122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802122e:	d509      	bpl.n	8021244 <buscarLadoCalibrador+0x288>
            calibrador->ladoEncontrado[ORIENTACION_DELANTE_ARRIBA] = true;
 8021230:	683b      	ldr	r3, [r7, #0]
 8021232:	2201      	movs	r2, #1
 8021234:	745a      	strb	r2, [r3, #17]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 8021236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021238:	4b20      	ldr	r3, [pc, #128]	; (80212bc <buscarLadoCalibrador+0x300>)
 802123a:	4413      	add	r3, r2
 802123c:	683a      	ldr	r2, [r7, #0]
 802123e:	6093      	str	r3, [r2, #8]
            return ORIENTACION_DELANTE_ARRIBA;
 8021240:	2304      	movs	r3, #4
 8021242:	e033      	b.n	80212ac <buscarLadoCalibrador+0x2f0>
        }

        // [ g,  0,  0 ]
        if (fabsf(acelFilt[0] - 1) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[1]) < TOLERANCIA_LADO_CALIBRADOR && fabsf(acelFilt[2]) < TOLERANCIA_LADO_CALIBRADOR) {
 8021244:	edd7 7a03 	vldr	s15, [r7, #12]
 8021248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802124c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021250:	eef0 7ae7 	vabs.f32	s15, s15
 8021254:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021258:	eef4 7ac7 	vcmpe.f32	s15, s14
 802125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021260:	d523      	bpl.n	80212aa <buscarLadoCalibrador+0x2ee>
 8021262:	edd7 7a04 	vldr	s15, [r7, #16]
 8021266:	eef0 7ae7 	vabs.f32	s15, s15
 802126a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 802126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021276:	d518      	bpl.n	80212aa <buscarLadoCalibrador+0x2ee>
 8021278:	edd7 7a05 	vldr	s15, [r7, #20]
 802127c:	eef0 7ae7 	vabs.f32	s15, s15
 8021280:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80212b8 <buscarLadoCalibrador+0x2fc>
 8021284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802128c:	d50d      	bpl.n	80212aa <buscarLadoCalibrador+0x2ee>
            calibrador->ladoEncontrado[ORIENTACION_DELANTE_ABAJO] = true;
 802128e:	683b      	ldr	r3, [r7, #0]
 8021290:	2201      	movs	r2, #1
 8021292:	749a      	strb	r2, [r3, #18]
            calibrador->tiempoTimeOut = tiempoActual + TIMEOUT_LADO_CALIBRADOR_S;
 8021294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021296:	4b09      	ldr	r3, [pc, #36]	; (80212bc <buscarLadoCalibrador+0x300>)
 8021298:	4413      	add	r3, r2
 802129a:	683a      	ldr	r2, [r7, #0]
 802129c:	6093      	str	r3, [r2, #8]
    		return ORIENTACION_DELANTE_ABAJO;
 802129e:	2305      	movs	r3, #5
 80212a0:	e004      	b.n	80212ac <buscarLadoCalibrador+0x2f0>
        }
    }
    else
        calibrador->sensorQuieto = false;
 80212a2:	683b      	ldr	r3, [r7, #0]
 80212a4:	2200      	movs	r2, #0
 80212a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

    // No se ha detectado ningun lado
    return ORIENTACION_NO_ENCONTRADA;
 80212aa:	2306      	movs	r3, #6
}
 80212ac:	4618      	mov	r0, r3
 80212ae:	3734      	adds	r7, #52	; 0x34
 80212b0:	46bd      	mov	sp, r7
 80212b2:	bd90      	pop	{r4, r7, pc}
 80212b4:	3cf5c28f 	.word	0x3cf5c28f
 80212b8:	3e4ccccd 	.word	0x3e4ccccd
 80212bc:	00015f90 	.word	0x00015f90

080212c0 <terminarCalAcel>:
**  Descripcion:    Termina el calibrador del acelerometro
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void terminarCalAcel(void)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b082      	sub	sp, #8
 80212c4:	af00      	add	r7, sp, #0
    calibradorAcelArrancado = false;
 80212c6:	4b11      	ldr	r3, [pc, #68]	; (802130c <terminarCalAcel+0x4c>)
 80212c8:	2200      	movs	r2, #0
 80212ca:	701a      	strb	r2, [r3, #0]

    uint8_t numSensores = numIMUsConectadas();
 80212cc:	f004 fbf6 	bl	8025abc <numIMUsConectadas>
 80212d0:	4603      	mov	r3, r0
 80212d2:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {//for (uint8_t i = 0; i < numSensores; i++) {
 80212d4:	2300      	movs	r3, #0
 80212d6:	71fb      	strb	r3, [r7, #7]
 80212d8:	e00d      	b.n	80212f6 <terminarCalAcel+0x36>
        calAcel_t *driver = &calAcel[i];
 80212da:	79fb      	ldrb	r3, [r7, #7]
 80212dc:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80212e0:	fb02 f303 	mul.w	r3, r2, r3
 80212e4:	4a0a      	ldr	r2, [pc, #40]	; (8021310 <terminarCalAcel+0x50>)
 80212e6:	4413      	add	r3, r2
 80212e8:	603b      	str	r3, [r7, #0]
        driver->iniciado = false;
 80212ea:	683b      	ldr	r3, [r7, #0]
 80212ec:	2200      	movs	r2, #0
 80212ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {//for (uint8_t i = 0; i < numSensores; i++) {
 80212f0:	79fb      	ldrb	r3, [r7, #7]
 80212f2:	3301      	adds	r3, #1
 80212f4:	71fb      	strb	r3, [r7, #7]
 80212f6:	79fb      	ldrb	r3, [r7, #7]
 80212f8:	2b04      	cmp	r3, #4
 80212fa:	d9ee      	bls.n	80212da <terminarCalAcel+0x1a>
    }

    // Se retira la tarea del scheduler
    quitarTareaDeCola(&tareas[TAREA_ACTUALIZAR_CALIBRADOR_ACELEROMETRO]);
 80212fc:	4805      	ldr	r0, [pc, #20]	; (8021314 <terminarCalAcel+0x54>)
 80212fe:	f7fd fda3 	bl	801ee48 <quitarTareaDeCola>
}
 8021302:	bf00      	nop
 8021304:	3708      	adds	r7, #8
 8021306:	46bd      	mov	sp, r7
 8021308:	bd80      	pop	{r7, pc}
 802130a:	bf00      	nop
 802130c:	2000b955 	.word	0x2000b955
 8021310:	2000b0a8 	.word	0x2000b0a8
 8021314:	20001888 	.word	0x20001888

08021318 <terminarCalGir>:
**  Descripcion:    Inicia el calibrador del acelerometro
**  Parametros:     Acelerometro a calibrar
**  Retorno:        Ninguno
****************************************************************************************/
void terminarCalGir(void)
{
 8021318:	b580      	push	{r7, lr}
 802131a:	b082      	sub	sp, #8
 802131c:	af00      	add	r7, sp, #0
	calibradorGirArrancado = false;
 802131e:	4b11      	ldr	r3, [pc, #68]	; (8021364 <terminarCalGir+0x4c>)
 8021320:	2200      	movs	r2, #0
 8021322:	701a      	strb	r2, [r3, #0]

    uint8_t numSensores = numIMUsConectadas();
 8021324:	f004 fbca 	bl	8025abc <numIMUsConectadas>
 8021328:	4603      	mov	r3, r0
 802132a:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < numSensores; i++) {
 802132c:	2300      	movs	r3, #0
 802132e:	71fb      	strb	r3, [r7, #7]
 8021330:	e00d      	b.n	802134e <terminarCalGir+0x36>
        calGir_t *driver = &calGir[i];
 8021332:	79fa      	ldrb	r2, [r7, #7]
 8021334:	4613      	mov	r3, r2
 8021336:	011b      	lsls	r3, r3, #4
 8021338:	4413      	add	r3, r2
 802133a:	009b      	lsls	r3, r3, #2
 802133c:	4a0a      	ldr	r2, [pc, #40]	; (8021368 <terminarCalGir+0x50>)
 802133e:	4413      	add	r3, r2
 8021340:	603b      	str	r3, [r7, #0]
        driver->iniciado = false;
 8021342:	683b      	ldr	r3, [r7, #0]
 8021344:	2200      	movs	r2, #0
 8021346:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < numSensores; i++) {
 8021348:	79fb      	ldrb	r3, [r7, #7]
 802134a:	3301      	adds	r3, #1
 802134c:	71fb      	strb	r3, [r7, #7]
 802134e:	79fa      	ldrb	r2, [r7, #7]
 8021350:	79bb      	ldrb	r3, [r7, #6]
 8021352:	429a      	cmp	r2, r3
 8021354:	d3ed      	bcc.n	8021332 <terminarCalGir+0x1a>
    }

    // Se retira la tarea del scheduler
    quitarTareaDeCola(&tareas[TAREA_ACTUALIZAR_CALIBRADOR_GIROSCOPIO]);
 8021356:	4805      	ldr	r0, [pc, #20]	; (802136c <terminarCalGir+0x54>)
 8021358:	f7fd fd76 	bl	801ee48 <quitarTareaDeCola>
}
 802135c:	bf00      	nop
 802135e:	3708      	adds	r7, #8
 8021360:	46bd      	mov	sp, r7
 8021362:	bd80      	pop	{r7, pc}
 8021364:	2000b954 	.word	0x2000b954
 8021368:	2000b800 	.word	0x2000b800
 802136c:	20001a60 	.word	0x20001a60

08021370 <actualizarCalAcel>:
**  Descripcion:    Actualiza el calibrador del acelerometro
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCalAcel(uint32_t tiempoActual)
{
 8021370:	b580      	push	{r7, lr}
 8021372:	b088      	sub	sp, #32
 8021374:	af00      	add	r7, sp, #0
 8021376:	6078      	str	r0, [r7, #4]
    bool todosCalibrados = true;
 8021378:	2301      	movs	r3, #1
 802137a:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 802137c:	2300      	movs	r3, #0
 802137e:	77bb      	strb	r3, [r7, #30]
 8021380:	e0fd      	b.n	802157e <actualizarCalAcel+0x20e>
        calAcel_t *driver = &calAcel[i];
 8021382:	7fbb      	ldrb	r3, [r7, #30]
 8021384:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8021388:	fb02 f303 	mul.w	r3, r2, r3
 802138c:	4a82      	ldr	r2, [pc, #520]	; (8021598 <actualizarCalAcel+0x228>)
 802138e:	4413      	add	r3, r2
 8021390:	61bb      	str	r3, [r7, #24]
        if (driver->terminado || !imuOperativa(i)) {
            driver->terminado = true;
            continue;
        }
*/
        todosCalibrados = false;
 8021392:	2300      	movs	r3, #0
 8021394:	77fb      	strb	r3, [r7, #31]

        driver->ladoActual = buscarLadoCalibrador(i, &driver->calibrador);
 8021396:	69bb      	ldr	r3, [r7, #24]
 8021398:	f103 0208 	add.w	r2, r3, #8
 802139c:	7fbb      	ldrb	r3, [r7, #30]
 802139e:	4611      	mov	r1, r2
 80213a0:	4618      	mov	r0, r3
 80213a2:	f7ff fe0b 	bl	8020fbc <buscarLadoCalibrador>
 80213a6:	4603      	mov	r3, r0
 80213a8:	461a      	mov	r2, r3
 80213aa:	69bb      	ldr	r3, [r7, #24]
 80213ac:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
    	if (driver->ladoActual != driver->ladoAnterior) {
 80213b0:	69bb      	ldr	r3, [r7, #24]
 80213b2:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
 80213b6:	69bb      	ldr	r3, [r7, #24]
 80213b8:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80213bc:	429a      	cmp	r2, r3
 80213be:	d018      	beq.n	80213f2 <actualizarCalAcel+0x82>
            driver->acelAcum[0] = 0.0;
 80213c0:	69bb      	ldr	r3, [r7, #24]
 80213c2:	f04f 0200 	mov.w	r2, #0
 80213c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            driver->acelAcum[1] = 0.0;
 80213ca:	69bb      	ldr	r3, [r7, #24]
 80213cc:	f04f 0200 	mov.w	r2, #0
 80213d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            driver->acelAcum[2] = 0.0;
 80213d4:	69bb      	ldr	r3, [r7, #24]
 80213d6:	f04f 0200 	mov.w	r2, #0
 80213da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            driver->cntMuestras = 0;
 80213de:	69bb      	ldr	r3, [r7, #24]
 80213e0:	2200      	movs	r2, #0
 80213e2:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
            driver->ladoAnterior = driver->ladoActual;
 80213e6:	69bb      	ldr	r3, [r7, #24]
 80213e8:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
 80213ec:	69bb      	ldr	r3, [r7, #24]
 80213ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    	}

    	if (driver->ladoActual == ORIENTACION_ERROR || driver->ladoActual == ORIENTACION_NO_ENCONTRADA)
 80213f2:	69bb      	ldr	r3, [r7, #24]
 80213f4:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 80213f8:	2b07      	cmp	r3, #7
 80213fa:	f000 80bc 	beq.w	8021576 <actualizarCalAcel+0x206>
 80213fe:	69bb      	ldr	r3, [r7, #24]
 8021400:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8021404:	2b06      	cmp	r3, #6
 8021406:	f000 80b6 	beq.w	8021576 <actualizarCalAcel+0x206>
    		continue;

        float acel[3];
        acelNumIMU(i, acel);
 802140a:	f107 020c 	add.w	r2, r7, #12
 802140e:	7fbb      	ldrb	r3, [r7, #30]
 8021410:	4611      	mov	r1, r2
 8021412:	4618      	mov	r0, r3
 8021414:	f004 fbd0 	bl	8025bb8 <acelNumIMU>

        driver->acelAcum[0] += acel[0];
 8021418:	69bb      	ldr	r3, [r7, #24]
 802141a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 802141e:	edd7 7a03 	vldr	s15, [r7, #12]
 8021422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021426:	69bb      	ldr	r3, [r7, #24]
 8021428:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
        driver->acelAcum[1] += acel[1];
 802142c:	69bb      	ldr	r3, [r7, #24]
 802142e:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8021432:	edd7 7a04 	vldr	s15, [r7, #16]
 8021436:	ee77 7a27 	vadd.f32	s15, s14, s15
 802143a:	69bb      	ldr	r3, [r7, #24]
 802143c:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
        driver->acelAcum[2] += acel[2];
 8021440:	69bb      	ldr	r3, [r7, #24]
 8021442:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8021446:	edd7 7a05 	vldr	s15, [r7, #20]
 802144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802144e:	69bb      	ldr	r3, [r7, #24]
 8021450:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
    	driver->cntMuestras++;
 8021454:	69bb      	ldr	r3, [r7, #24]
 8021456:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 802145a:	3301      	adds	r3, #1
 802145c:	b29a      	uxth	r2, r3
 802145e:	69bb      	ldr	r3, [r7, #24]
 8021460:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

        if (driver->cntMuestras >= NUM_MUESTRAS_CALIBRADOR_ACELEROMETRO) {
 8021464:	69bb      	ldr	r3, [r7, #24]
 8021466:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 802146a:	2b31      	cmp	r3, #49	; 0x31
 802146c:	f240 8084 	bls.w	8021578 <actualizarCalAcel+0x208>
            driver->acelRef[0][driver->ladoAnterior] = driver->acelAcum[0] / driver->cntMuestras;
 8021470:	69bb      	ldr	r3, [r7, #24]
 8021472:	edd3 6a3c 	vldr	s13, [r3, #240]	; 0xf0
 8021476:	69bb      	ldr	r3, [r7, #24]
 8021478:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 802147c:	ee07 3a90 	vmov	s15, r3
 8021480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021484:	69bb      	ldr	r3, [r7, #24]
 8021486:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 802148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802148e:	69ba      	ldr	r2, [r7, #24]
 8021490:	333e      	adds	r3, #62	; 0x3e
 8021492:	009b      	lsls	r3, r3, #2
 8021494:	4413      	add	r3, r2
 8021496:	3304      	adds	r3, #4
 8021498:	edc3 7a00 	vstr	s15, [r3]
            driver->acelRef[1][driver->ladoAnterior] = driver->acelAcum[1] / driver->cntMuestras;
 802149c:	69bb      	ldr	r3, [r7, #24]
 802149e:	edd3 6a3d 	vldr	s13, [r3, #244]	; 0xf4
 80214a2:	69bb      	ldr	r3, [r7, #24]
 80214a4:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80214a8:	ee07 3a90 	vmov	s15, r3
 80214ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80214b0:	69bb      	ldr	r3, [r7, #24]
 80214b2:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80214b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80214ba:	69ba      	ldr	r2, [r7, #24]
 80214bc:	3344      	adds	r3, #68	; 0x44
 80214be:	009b      	lsls	r3, r3, #2
 80214c0:	4413      	add	r3, r2
 80214c2:	3304      	adds	r3, #4
 80214c4:	edc3 7a00 	vstr	s15, [r3]
            driver->acelRef[2][driver->ladoAnterior] = driver->acelAcum[2] / driver->cntMuestras;
 80214c8:	69bb      	ldr	r3, [r7, #24]
 80214ca:	edd3 6a3e 	vldr	s13, [r3, #248]	; 0xf8
 80214ce:	69bb      	ldr	r3, [r7, #24]
 80214d0:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80214d4:	ee07 3a90 	vmov	s15, r3
 80214d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80214dc:	69bb      	ldr	r3, [r7, #24]
 80214de:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80214e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80214e6:	69ba      	ldr	r2, [r7, #24]
 80214e8:	334a      	adds	r3, #74	; 0x4a
 80214ea:	009b      	lsls	r3, r3, #2
 80214ec:	4413      	add	r3, r2
 80214ee:	3304      	adds	r3, #4
 80214f0:	edc3 7a00 	vstr	s15, [r3]

            driver->acelAcum[0] = 0.0;
 80214f4:	69bb      	ldr	r3, [r7, #24]
 80214f6:	f04f 0200 	mov.w	r2, #0
 80214fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            driver->acelAcum[1] = 0.0;
 80214fe:	69bb      	ldr	r3, [r7, #24]
 8021500:	f04f 0200 	mov.w	r2, #0
 8021504:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            driver->acelAcum[2] = 0.0;
 8021508:	69bb      	ldr	r3, [r7, #24]
 802150a:	f04f 0200 	mov.w	r2, #0
 802150e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            driver->cntMuestras = 0;
 8021512:	69bb      	ldr	r3, [r7, #24]
 8021514:	2200      	movs	r2, #0
 8021516:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

            bool carasEncontradas = true;
 802151a:	2301      	movs	r3, #1
 802151c:	777b      	strb	r3, [r7, #29]
            for (uint8_t j = 0; j < CAL_IMU_NUM_CARAS; j++) {
 802151e:	2300      	movs	r3, #0
 8021520:	773b      	strb	r3, [r7, #28]
 8021522:	e00d      	b.n	8021540 <actualizarCalAcel+0x1d0>
                if (!driver->calibrador.ladoEncontrado[j])
 8021524:	7f3b      	ldrb	r3, [r7, #28]
 8021526:	69ba      	ldr	r2, [r7, #24]
 8021528:	4413      	add	r3, r2
 802152a:	7d5b      	ldrb	r3, [r3, #21]
 802152c:	f083 0301 	eor.w	r3, r3, #1
 8021530:	b2db      	uxtb	r3, r3
 8021532:	2b00      	cmp	r3, #0
 8021534:	d001      	beq.n	802153a <actualizarCalAcel+0x1ca>
                    carasEncontradas = false;
 8021536:	2300      	movs	r3, #0
 8021538:	777b      	strb	r3, [r7, #29]
            for (uint8_t j = 0; j < CAL_IMU_NUM_CARAS; j++) {
 802153a:	7f3b      	ldrb	r3, [r7, #28]
 802153c:	3301      	adds	r3, #1
 802153e:	773b      	strb	r3, [r7, #28]
 8021540:	7f3b      	ldrb	r3, [r7, #28]
 8021542:	2b05      	cmp	r3, #5
 8021544:	d9ee      	bls.n	8021524 <actualizarCalAcel+0x1b4>
            }

            if (carasEncontradas) {
 8021546:	7f7b      	ldrb	r3, [r7, #29]
 8021548:	2b00      	cmp	r3, #0
 802154a:	d015      	beq.n	8021578 <actualizarCalAcel+0x208>
            	if (calcularParametrosCalAcel(driver)) {
 802154c:	69b8      	ldr	r0, [r7, #24]
 802154e:	f000 f825 	bl	802159c <calcularParametrosCalAcel>
 8021552:	4603      	mov	r3, r0
 8021554:	2b00      	cmp	r3, #0
 8021556:	d007      	beq.n	8021568 <actualizarCalAcel+0x1f8>
            		driver->cal.calibrado = true;
 8021558:	69bb      	ldr	r3, [r7, #24]
 802155a:	2201      	movs	r2, #1
 802155c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            		driver->error = false;
 8021560:	69bb      	ldr	r3, [r7, #24]
 8021562:	2200      	movs	r2, #0
 8021564:	709a      	strb	r2, [r3, #2]
 8021566:	e002      	b.n	802156e <actualizarCalAcel+0x1fe>
            	}
            	else
            		driver->error = true;
 8021568:	69bb      	ldr	r3, [r7, #24]
 802156a:	2201      	movs	r2, #1
 802156c:	709a      	strb	r2, [r3, #2]

            	driver->terminado = true;
 802156e:	69bb      	ldr	r3, [r7, #24]
 8021570:	2201      	movs	r2, #1
 8021572:	705a      	strb	r2, [r3, #1]
 8021574:	e000      	b.n	8021578 <actualizarCalAcel+0x208>
    		continue;
 8021576:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8021578:	7fbb      	ldrb	r3, [r7, #30]
 802157a:	3301      	adds	r3, #1
 802157c:	77bb      	strb	r3, [r7, #30]
 802157e:	7fbb      	ldrb	r3, [r7, #30]
 8021580:	2b04      	cmp	r3, #4
 8021582:	f67f aefe 	bls.w	8021382 <actualizarCalAcel+0x12>
            }
        }
	}

    if (todosCalibrados)
 8021586:	7ffb      	ldrb	r3, [r7, #31]
 8021588:	2b00      	cmp	r3, #0
 802158a:	d001      	beq.n	8021590 <actualizarCalAcel+0x220>
        terminarCalAcel();
 802158c:	f7ff fe98 	bl	80212c0 <terminarCalAcel>
}
 8021590:	bf00      	nop
 8021592:	3720      	adds	r7, #32
 8021594:	46bd      	mov	sp, r7
 8021596:	bd80      	pop	{r7, pc}
 8021598:	2000b0a8 	.word	0x2000b0a8

0802159c <calcularParametrosCalAcel>:
**  Descripcion:    Calcula los parametros del calibrador del acelerometro
**  Parametros:     Puntero al calibrador
**  Retorno:        True si ok
****************************************************************************************/
bool calcularParametrosCalAcel(calAcel_t *cal)
{
 802159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802159e:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
 80215a2:	af62      	add	r7, sp, #392	; 0x188
 80215a4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80215a8:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80215ac:	6018      	str	r0, [r3, #0]
    float offset[3][3];
    matriz_t ganancia, gananciaInv;

    // Se resetea la matriz de offsets
    for (uint8_t i = 0; i < 3; i++) {
 80215ae:	2300      	movs	r3, #0
 80215b0:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 80215b4:	e021      	b.n	80215fa <calcularParametrosCalAcel+0x5e>
        for (uint8_t j = 0; j < 3; j++)
 80215b6:	2300      	movs	r3, #0
 80215b8:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
 80215bc:	e014      	b.n	80215e8 <calcularParametrosCalAcel+0x4c>
            offset[i][j] = 0.0;
 80215be:	f897 2357 	ldrb.w	r2, [r7, #855]	; 0x357
 80215c2:	f897 1356 	ldrb.w	r1, [r7, #854]	; 0x356
 80215c6:	4613      	mov	r3, r2
 80215c8:	005b      	lsls	r3, r3, #1
 80215ca:	4413      	add	r3, r2
 80215cc:	440b      	add	r3, r1
 80215ce:	009b      	lsls	r3, r3, #2
 80215d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80215d4:	443b      	add	r3, r7
 80215d6:	3b2c      	subs	r3, #44	; 0x2c
 80215d8:	f04f 0200 	mov.w	r2, #0
 80215dc:	601a      	str	r2, [r3, #0]
        for (uint8_t j = 0; j < 3; j++)
 80215de:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 80215e2:	3301      	adds	r3, #1
 80215e4:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
 80215e8:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 80215ec:	2b02      	cmp	r3, #2
 80215ee:	d9e6      	bls.n	80215be <calcularParametrosCalAcel+0x22>
    for (uint8_t i = 0; i < 3; i++) {
 80215f0:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 80215f4:	3301      	adds	r3, #1
 80215f6:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 80215fa:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 80215fe:	2b02      	cmp	r3, #2
 8021600:	d9d9      	bls.n	80215b6 <calcularParametrosCalAcel+0x1a>
    }

    // Ecuaciones sacadas del paper: https://www.researchgate.net/publication/264794909
    // Titulo: Time-and Computation-Efficient Calibration of MEMS 3D Accelerometers and Gyroscopes
    for (uint8_t i = 0; i < 3; i++) {
 8021602:	2300      	movs	r3, #0
 8021604:	f887 3355 	strb.w	r3, [r7, #853]	; 0x355
 8021608:	e099      	b.n	802173e <calcularParametrosCalAcel+0x1a2>
        offset[i][0] = (cal->acelRef[i][ORIENTACION_DELANTE_ABAJO] + cal->acelRef[i][ORIENTACION_DELANTE_ARRIBA]) / 2.0;
 802160a:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 802160e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021612:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021616:	6819      	ldr	r1, [r3, #0]
 8021618:	4613      	mov	r3, r2
 802161a:	005b      	lsls	r3, r3, #1
 802161c:	4413      	add	r3, r2
 802161e:	00db      	lsls	r3, r3, #3
 8021620:	440b      	add	r3, r1
 8021622:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8021626:	ed93 7a00 	vldr	s14, [r3]
 802162a:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 802162e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021632:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021636:	6819      	ldr	r1, [r3, #0]
 8021638:	4613      	mov	r3, r2
 802163a:	005b      	lsls	r3, r3, #1
 802163c:	4413      	add	r3, r2
 802163e:	00db      	lsls	r3, r3, #3
 8021640:	440b      	add	r3, r1
 8021642:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8021646:	edd3 7a00 	vldr	s15, [r3]
 802164a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802164e:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 8021652:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8021656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802165a:	4613      	mov	r3, r2
 802165c:	005b      	lsls	r3, r3, #1
 802165e:	4413      	add	r3, r2
 8021660:	009b      	lsls	r3, r3, #2
 8021662:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8021666:	443b      	add	r3, r7
 8021668:	3b2c      	subs	r3, #44	; 0x2c
 802166a:	edc3 7a00 	vstr	s15, [r3]
        offset[i][1] = (cal->acelRef[i][ORIENTACION_IZQUIERDA_ARRIBA] + cal->acelRef[i][ORIENTACION_DERECHA_ARRIBA]) / 2.0;
 802166e:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 8021672:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021676:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 802167a:	6819      	ldr	r1, [r3, #0]
 802167c:	4613      	mov	r3, r2
 802167e:	005b      	lsls	r3, r3, #1
 8021680:	4413      	add	r3, r2
 8021682:	00db      	lsls	r3, r3, #3
 8021684:	440b      	add	r3, r1
 8021686:	f503 7382 	add.w	r3, r3, #260	; 0x104
 802168a:	ed93 7a00 	vldr	s14, [r3]
 802168e:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 8021692:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021696:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 802169a:	6819      	ldr	r1, [r3, #0]
 802169c:	4613      	mov	r3, r2
 802169e:	005b      	lsls	r3, r3, #1
 80216a0:	4413      	add	r3, r2
 80216a2:	00db      	lsls	r3, r3, #3
 80216a4:	440b      	add	r3, r1
 80216a6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80216aa:	edd3 7a00 	vldr	s15, [r3]
 80216ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80216b2:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 80216b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80216ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80216be:	4613      	mov	r3, r2
 80216c0:	005b      	lsls	r3, r3, #1
 80216c2:	4413      	add	r3, r2
 80216c4:	009b      	lsls	r3, r3, #2
 80216c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80216ca:	443b      	add	r3, r7
 80216cc:	3b28      	subs	r3, #40	; 0x28
 80216ce:	edc3 7a00 	vstr	s15, [r3]
        offset[i][2] = (cal->acelRef[i][ORIENTACION_BOCA_ARRIBA] + cal->acelRef[i][ORIENTACION_BOCA_ABAJO]) / 2.0;
 80216d2:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 80216d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80216da:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80216de:	6819      	ldr	r1, [r3, #0]
 80216e0:	4613      	mov	r3, r2
 80216e2:	005b      	lsls	r3, r3, #1
 80216e4:	4413      	add	r3, r2
 80216e6:	00db      	lsls	r3, r3, #3
 80216e8:	440b      	add	r3, r1
 80216ea:	33fc      	adds	r3, #252	; 0xfc
 80216ec:	ed93 7a00 	vldr	s14, [r3]
 80216f0:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 80216f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80216f8:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80216fc:	6819      	ldr	r1, [r3, #0]
 80216fe:	4613      	mov	r3, r2
 8021700:	005b      	lsls	r3, r3, #1
 8021702:	4413      	add	r3, r2
 8021704:	00db      	lsls	r3, r3, #3
 8021706:	440b      	add	r3, r1
 8021708:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802170c:	edd3 7a00 	vldr	s15, [r3]
 8021710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021714:	f897 2355 	ldrb.w	r2, [r7, #853]	; 0x355
 8021718:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802171c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021720:	4613      	mov	r3, r2
 8021722:	005b      	lsls	r3, r3, #1
 8021724:	4413      	add	r3, r2
 8021726:	009b      	lsls	r3, r3, #2
 8021728:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802172c:	443b      	add	r3, r7
 802172e:	3b24      	subs	r3, #36	; 0x24
 8021730:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; i++) {
 8021734:	f897 3355 	ldrb.w	r3, [r7, #853]	; 0x355
 8021738:	3301      	adds	r3, #1
 802173a:	f887 3355 	strb.w	r3, [r7, #853]	; 0x355
 802173e:	f897 3355 	ldrb.w	r3, [r7, #853]	; 0x355
 8021742:	2b02      	cmp	r3, #2
 8021744:	f67f af61 	bls.w	802160a <calcularParametrosCalAcel+0x6e>
    }

	// Media de los offsets
    cal->cal.offset[0] = (offset[0][0] + offset[0][1] + offset[0][2]) / 3.0;
 8021748:	ed97 7acb 	vldr	s14, [r7, #812]	; 0x32c
 802174c:	edd7 7acc 	vldr	s15, [r7, #816]	; 0x330
 8021750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021754:	edd7 7acd 	vldr	s15, [r7, #820]	; 0x334
 8021758:	ee37 7a27 	vadd.f32	s14, s14, s15
 802175c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8021760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021764:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021768:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    cal->cal.offset[1] = (offset[1][0] + offset[1][1] + offset[1][2]) / 3.0;
 8021772:	ed97 7ace 	vldr	s14, [r7, #824]	; 0x338
 8021776:	edd7 7acf 	vldr	s15, [r7, #828]	; 0x33c
 802177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802177e:	edd7 7ad0 	vldr	s15, [r7, #832]	; 0x340
 8021782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021786:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 802178a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802178e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021792:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
    cal->cal.offset[2] = (offset[2][0] + offset[2][1] + offset[2][2]) / 3.0;
 802179c:	ed97 7ad1 	vldr	s14, [r7, #836]	; 0x344
 80217a0:	edd7 7ad2 	vldr	s15, [r7, #840]	; 0x348
 80217a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80217a8:	edd7 7ad3 	vldr	s15, [r7, #844]	; 0x34c
 80217ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80217b0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80217b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80217b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80217bc:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

    // Calculo de las ganancias
    for (uint8_t i = 0; i < 3; i++) {
 80217c6:	2300      	movs	r3, #0
 80217c8:	f887 3354 	strb.w	r3, [r7, #852]	; 0x354
 80217cc:	e092      	b.n	80218f4 <calcularParametrosCalAcel+0x358>
        ganancia.m[i][0] = cal->acelRef[i][ORIENTACION_DELANTE_ABAJO] - cal->acelRef[i][ORIENTACION_DELANTE_ARRIBA];
 80217ce:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 80217d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80217d6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80217da:	6819      	ldr	r1, [r3, #0]
 80217dc:	4613      	mov	r3, r2
 80217de:	005b      	lsls	r3, r3, #1
 80217e0:	4413      	add	r3, r2
 80217e2:	00db      	lsls	r3, r3, #3
 80217e4:	440b      	add	r3, r1
 80217e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80217ea:	ed93 7a00 	vldr	s14, [r3]
 80217ee:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 80217f2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80217f6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80217fa:	6819      	ldr	r1, [r3, #0]
 80217fc:	4613      	mov	r3, r2
 80217fe:	005b      	lsls	r3, r3, #1
 8021800:	4413      	add	r3, r2
 8021802:	00db      	lsls	r3, r3, #3
 8021804:	440b      	add	r3, r1
 8021806:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 802180a:	edd3 7a00 	vldr	s15, [r3]
 802180e:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 8021812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021816:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802181a:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 802181e:	4613      	mov	r3, r2
 8021820:	009b      	lsls	r3, r3, #2
 8021822:	4413      	add	r3, r2
 8021824:	00db      	lsls	r3, r3, #3
 8021826:	440b      	add	r3, r1
 8021828:	edc3 7a00 	vstr	s15, [r3]
        ganancia.m[i][1] = cal->acelRef[i][ORIENTACION_IZQUIERDA_ARRIBA] - cal->acelRef[i][ORIENTACION_DERECHA_ARRIBA];
 802182c:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 8021830:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021834:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021838:	6819      	ldr	r1, [r3, #0]
 802183a:	4613      	mov	r3, r2
 802183c:	005b      	lsls	r3, r3, #1
 802183e:	4413      	add	r3, r2
 8021840:	00db      	lsls	r3, r3, #3
 8021842:	440b      	add	r3, r1
 8021844:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8021848:	ed93 7a00 	vldr	s14, [r3]
 802184c:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 8021850:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021854:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021858:	6819      	ldr	r1, [r3, #0]
 802185a:	4613      	mov	r3, r2
 802185c:	005b      	lsls	r3, r3, #1
 802185e:	4413      	add	r3, r2
 8021860:	00db      	lsls	r3, r3, #3
 8021862:	440b      	add	r3, r1
 8021864:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8021868:	edd3 7a00 	vldr	s15, [r3]
 802186c:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 8021870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021874:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021878:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 802187c:	4613      	mov	r3, r2
 802187e:	009b      	lsls	r3, r3, #2
 8021880:	4413      	add	r3, r2
 8021882:	00db      	lsls	r3, r3, #3
 8021884:	440b      	add	r3, r1
 8021886:	3304      	adds	r3, #4
 8021888:	edc3 7a00 	vstr	s15, [r3]
        ganancia.m[i][2] = cal->acelRef[i][ORIENTACION_BOCA_ARRIBA] - cal->acelRef[i][ORIENTACION_BOCA_ABAJO];
 802188c:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 8021890:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021894:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021898:	6819      	ldr	r1, [r3, #0]
 802189a:	4613      	mov	r3, r2
 802189c:	005b      	lsls	r3, r3, #1
 802189e:	4413      	add	r3, r2
 80218a0:	00db      	lsls	r3, r3, #3
 80218a2:	440b      	add	r3, r1
 80218a4:	33fc      	adds	r3, #252	; 0xfc
 80218a6:	ed93 7a00 	vldr	s14, [r3]
 80218aa:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 80218ae:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80218b2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80218b6:	6819      	ldr	r1, [r3, #0]
 80218b8:	4613      	mov	r3, r2
 80218ba:	005b      	lsls	r3, r3, #1
 80218bc:	4413      	add	r3, r2
 80218be:	00db      	lsls	r3, r3, #3
 80218c0:	440b      	add	r3, r1
 80218c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80218c6:	edd3 7a00 	vldr	s15, [r3]
 80218ca:	f897 2354 	ldrb.w	r2, [r7, #852]	; 0x354
 80218ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80218d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80218d6:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 80218da:	4613      	mov	r3, r2
 80218dc:	009b      	lsls	r3, r3, #2
 80218de:	4413      	add	r3, r2
 80218e0:	00db      	lsls	r3, r3, #3
 80218e2:	440b      	add	r3, r1
 80218e4:	3308      	adds	r3, #8
 80218e6:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; i++) {
 80218ea:	f897 3354 	ldrb.w	r3, [r7, #852]	; 0x354
 80218ee:	3301      	adds	r3, #1
 80218f0:	f887 3354 	strb.w	r3, [r7, #852]	; 0x354
 80218f4:	f897 3354 	ldrb.w	r3, [r7, #852]	; 0x354
 80218f8:	2b02      	cmp	r3, #2
 80218fa:	f67f af68 	bls.w	80217ce <calcularParametrosCalAcel+0x232>
    }

    if (inversaMatriz(ganancia, &gananciaInv, 3)) {
 80218fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021902:	f5a3 74de 	sub.w	r4, r3, #444	; 0x1bc
 8021906:	2303      	movs	r3, #3
 8021908:	9361      	str	r3, [sp, #388]	; 0x184
 802190a:	f107 030c 	add.w	r3, r7, #12
 802190e:	9360      	str	r3, [sp, #384]	; 0x180
 8021910:	4668      	mov	r0, sp
 8021912:	f104 0310 	add.w	r3, r4, #16
 8021916:	f44f 72c0 	mov.w	r2, #384	; 0x180
 802191a:	4619      	mov	r1, r3
 802191c:	f013 fc98 	bl	8035250 <memcpy>
 8021920:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8021924:	f7f2 f834 	bl	8013990 <inversaMatriz>
 8021928:	4603      	mov	r3, r0
 802192a:	2b00      	cmp	r3, #0
 802192c:	d059      	beq.n	80219e2 <calcularParametrosCalAcel+0x446>
        for (uint8_t i = 0; i < 3; i++) {
 802192e:	2300      	movs	r3, #0
 8021930:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
 8021934:	e037      	b.n	80219a6 <calcularParametrosCalAcel+0x40a>
            for (uint8_t j = 0; j < 3; j++)
 8021936:	2300      	movs	r3, #0
 8021938:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
 802193c:	e02a      	b.n	8021994 <calcularParametrosCalAcel+0x3f8>
                cal->cal.ganancia[i][j] = 2.0 * gananciaInv.m[i][j];
 802193e:	f897 2353 	ldrb.w	r2, [r7, #851]	; 0x353
 8021942:	f897 0352 	ldrb.w	r0, [r7, #850]	; 0x352
 8021946:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802194a:	f5a3 7153 	sub.w	r1, r3, #844	; 0x34c
 802194e:	4613      	mov	r3, r2
 8021950:	009b      	lsls	r3, r3, #2
 8021952:	4413      	add	r3, r2
 8021954:	005b      	lsls	r3, r3, #1
 8021956:	4403      	add	r3, r0
 8021958:	009b      	lsls	r3, r3, #2
 802195a:	440b      	add	r3, r1
 802195c:	edd3 7a00 	vldr	s15, [r3]
 8021960:	f897 2353 	ldrb.w	r2, [r7, #851]	; 0x353
 8021964:	f897 0352 	ldrb.w	r0, [r7, #850]	; 0x352
 8021968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802196c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8021970:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8021974:	6819      	ldr	r1, [r3, #0]
 8021976:	4613      	mov	r3, r2
 8021978:	005b      	lsls	r3, r3, #1
 802197a:	4413      	add	r3, r2
 802197c:	4403      	add	r3, r0
 802197e:	3354      	adds	r3, #84	; 0x54
 8021980:	009b      	lsls	r3, r3, #2
 8021982:	440b      	add	r3, r1
 8021984:	3304      	adds	r3, #4
 8021986:	edc3 7a00 	vstr	s15, [r3]
            for (uint8_t j = 0; j < 3; j++)
 802198a:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 802198e:	3301      	adds	r3, #1
 8021990:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
 8021994:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 8021998:	2b02      	cmp	r3, #2
 802199a:	d9d0      	bls.n	802193e <calcularParametrosCalAcel+0x3a2>
        for (uint8_t i = 0; i < 3; i++) {
 802199c:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80219a0:	3301      	adds	r3, #1
 80219a2:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
 80219a6:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80219aa:	2b02      	cmp	r3, #2
 80219ac:	d9c3      	bls.n	8021936 <calcularParametrosCalAcel+0x39a>
        }

        if (chequearParametrosCalAcel(cal->cal))
 80219ae:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80219b2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80219b6:	681e      	ldr	r6, [r3, #0]
 80219b8:	466d      	mov	r5, sp
 80219ba:	f506 74aa 	add.w	r4, r6, #340	; 0x154
 80219be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80219c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80219c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80219c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80219c6:	6823      	ldr	r3, [r4, #0]
 80219c8:	602b      	str	r3, [r5, #0]
 80219ca:	f506 73a2 	add.w	r3, r6, #324	; 0x144
 80219ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80219d0:	f000 f82e 	bl	8021a30 <chequearParametrosCalAcel>
 80219d4:	4603      	mov	r3, r0
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d001      	beq.n	80219de <calcularParametrosCalAcel+0x442>
            return true;
 80219da:	2301      	movs	r3, #1
 80219dc:	e023      	b.n	8021a26 <calcularParametrosCalAcel+0x48a>
        else
            return false;
 80219de:	2300      	movs	r3, #0
 80219e0:	e021      	b.n	8021a26 <calcularParametrosCalAcel+0x48a>
    }
    else {
    	for (uint8_t i = 0; i < 3; i++)
 80219e2:	2300      	movs	r3, #0
 80219e4:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
 80219e8:	e018      	b.n	8021a1c <calcularParametrosCalAcel+0x480>
            cal->cal.ganancia[i][i] = 1.0;
 80219ea:	f897 2351 	ldrb.w	r2, [r7, #849]	; 0x351
 80219ee:	f897 0351 	ldrb.w	r0, [r7, #849]	; 0x351
 80219f2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80219f6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80219fa:	6819      	ldr	r1, [r3, #0]
 80219fc:	4613      	mov	r3, r2
 80219fe:	005b      	lsls	r3, r3, #1
 8021a00:	4413      	add	r3, r2
 8021a02:	4403      	add	r3, r0
 8021a04:	3354      	adds	r3, #84	; 0x54
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	440b      	add	r3, r1
 8021a0a:	3304      	adds	r3, #4
 8021a0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8021a10:	601a      	str	r2, [r3, #0]
    	for (uint8_t i = 0; i < 3; i++)
 8021a12:	f897 3351 	ldrb.w	r3, [r7, #849]	; 0x351
 8021a16:	3301      	adds	r3, #1
 8021a18:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
 8021a1c:	f897 3351 	ldrb.w	r3, [r7, #849]	; 0x351
 8021a20:	2b02      	cmp	r3, #2
 8021a22:	d9e2      	bls.n	80219ea <calcularParametrosCalAcel+0x44e>

    	return false;
 8021a24:	2300      	movs	r3, #0
    }
}
 8021a26:	4618      	mov	r0, r3
 8021a28:	f507 7757 	add.w	r7, r7, #860	; 0x35c
 8021a2c:	46bd      	mov	sp, r7
 8021a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021a30 <chequearParametrosCalAcel>:
**  Descripcion:    Chequea los parametros del calibrador del acelerometro
**  Parametros:     Datos de la calibracion
**  Retorno:        True si ok
****************************************************************************************/
bool chequearParametrosCalAcel(calParamAcelerometro_t cal)
{
 8021a30:	b084      	sub	sp, #16
 8021a32:	b480      	push	{r7}
 8021a34:	b083      	sub	sp, #12
 8021a36:	af00      	add	r7, sp, #0
 8021a38:	f107 0c10 	add.w	ip, r7, #16
 8021a3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Chequeo de los offset y las diagonales
    for (uint8_t i = 0; i < 3; i++) {
 8021a40:	2300      	movs	r3, #0
 8021a42:	71fb      	strb	r3, [r7, #7]
 8021a44:	e029      	b.n	8021a9a <chequearParametrosCalAcel+0x6a>
        if (abs(cal.offset[i]) > LIMITE_OFFSET_ACEL || abs(cal.ganancia[i][i]) > LIMITE_GANANCIA_DIAG_ACEL)
 8021a46:	79fb      	ldrb	r3, [r7, #7]
 8021a48:	009b      	lsls	r3, r3, #2
 8021a4a:	3310      	adds	r3, #16
 8021a4c:	443b      	add	r3, r7
 8021a4e:	3304      	adds	r3, #4
 8021a50:	edd3 7a00 	vldr	s15, [r3]
 8021a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a58:	ee17 3a90 	vmov	r3, s15
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	bfb8      	it	lt
 8021a60:	425b      	neglt	r3, r3
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	dc14      	bgt.n	8021a90 <chequearParametrosCalAcel+0x60>
 8021a66:	79fa      	ldrb	r2, [r7, #7]
 8021a68:	79f9      	ldrb	r1, [r7, #7]
 8021a6a:	4613      	mov	r3, r2
 8021a6c:	005b      	lsls	r3, r3, #1
 8021a6e:	4413      	add	r3, r2
 8021a70:	440b      	add	r3, r1
 8021a72:	3304      	adds	r3, #4
 8021a74:	009b      	lsls	r3, r3, #2
 8021a76:	3310      	adds	r3, #16
 8021a78:	443b      	add	r3, r7
 8021a7a:	edd3 7a00 	vldr	s15, [r3]
 8021a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a82:	ee17 3a90 	vmov	r3, s15
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	bfb8      	it	lt
 8021a8a:	425b      	neglt	r3, r3
 8021a8c:	2b01      	cmp	r3, #1
 8021a8e:	dd01      	ble.n	8021a94 <chequearParametrosCalAcel+0x64>
            return false;
 8021a90:	2300      	movs	r3, #0
 8021a92:	e04a      	b.n	8021b2a <chequearParametrosCalAcel+0xfa>
    for (uint8_t i = 0; i < 3; i++) {
 8021a94:	79fb      	ldrb	r3, [r7, #7]
 8021a96:	3301      	adds	r3, #1
 8021a98:	71fb      	strb	r3, [r7, #7]
 8021a9a:	79fb      	ldrb	r3, [r7, #7]
 8021a9c:	2b02      	cmp	r3, #2
 8021a9e:	d9d2      	bls.n	8021a46 <chequearParametrosCalAcel+0x16>
    }

    // Chequeo de los offset de las diagonales
    if (abs(cal.ganancia[0][1]) > LIMITE_GANANCIA_DIAG_ACEL || abs(cal.ganancia[0][2]) > LIMITE_GANANCIA_DIAG_ACEL || abs(cal.ganancia[1][2]) > LIMITE_GANANCIA_DIAG_ACEL
 8021aa0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021aa8:	ee17 3a90 	vmov	r3, s15
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	bfb8      	it	lt
 8021ab0:	425b      	neglt	r3, r3
 8021ab2:	2b01      	cmp	r3, #1
 8021ab4:	dc36      	bgt.n	8021b24 <chequearParametrosCalAcel+0xf4>
 8021ab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8021aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021abe:	ee17 3a90 	vmov	r3, s15
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	bfb8      	it	lt
 8021ac6:	425b      	neglt	r3, r3
 8021ac8:	2b01      	cmp	r3, #1
 8021aca:	dc2b      	bgt.n	8021b24 <chequearParametrosCalAcel+0xf4>
 8021acc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8021ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021ad4:	ee17 3a90 	vmov	r3, s15
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	bfb8      	it	lt
 8021adc:	425b      	neglt	r3, r3
 8021ade:	2b01      	cmp	r3, #1
 8021ae0:	dc20      	bgt.n	8021b24 <chequearParametrosCalAcel+0xf4>
     || abs(cal.ganancia[1][0]) > LIMITE_GANANCIA_DIAG_ACEL || abs(cal.ganancia[2][0]) > LIMITE_GANANCIA_DIAG_ACEL || abs(cal.ganancia[2][1]) > LIMITE_GANANCIA_DIAG_ACEL)
 8021ae2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8021ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021aea:	ee17 3a90 	vmov	r3, s15
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	bfb8      	it	lt
 8021af2:	425b      	neglt	r3, r3
 8021af4:	2b01      	cmp	r3, #1
 8021af6:	dc15      	bgt.n	8021b24 <chequearParametrosCalAcel+0xf4>
 8021af8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8021afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b00:	ee17 3a90 	vmov	r3, s15
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	bfb8      	it	lt
 8021b08:	425b      	neglt	r3, r3
 8021b0a:	2b01      	cmp	r3, #1
 8021b0c:	dc0a      	bgt.n	8021b24 <chequearParametrosCalAcel+0xf4>
 8021b0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8021b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b16:	ee17 3a90 	vmov	r3, s15
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	bfb8      	it	lt
 8021b1e:	425b      	neglt	r3, r3
 8021b20:	2b01      	cmp	r3, #1
 8021b22:	dd01      	ble.n	8021b28 <chequearParametrosCalAcel+0xf8>
        return false;
 8021b24:	2300      	movs	r3, #0
 8021b26:	e000      	b.n	8021b2a <chequearParametrosCalAcel+0xfa>

    return true;
 8021b28:	2301      	movs	r3, #1
}
 8021b2a:	4618      	mov	r0, r3
 8021b2c:	370c      	adds	r7, #12
 8021b2e:	46bd      	mov	sp, r7
 8021b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b34:	b004      	add	sp, #16
 8021b36:	4770      	bx	lr

08021b38 <actualizarCalGir>:
**  Descripcion:    Actualiza el calibrador del giroscopio
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCalGir(uint32_t tiempoActual)
{
 8021b38:	b580      	push	{r7, lr}
 8021b3a:	b08e      	sub	sp, #56	; 0x38
 8021b3c:	af00      	add	r7, sp, #0
 8021b3e:	6078      	str	r0, [r7, #4]
    bool todosCalibrados = true;
 8021b40:	2301      	movs	r3, #1
 8021b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8021b46:	2300      	movs	r3, #0
 8021b48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8021b4c:	e18e      	b.n	8021e6c <actualizarCalGir+0x334>
        calGir_t *driver = &calGir[i];
 8021b4e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8021b52:	4613      	mov	r3, r2
 8021b54:	011b      	lsls	r3, r3, #4
 8021b56:	4413      	add	r3, r2
 8021b58:	009b      	lsls	r3, r3, #2
 8021b5a:	4a88      	ldr	r2, [pc, #544]	; (8021d7c <actualizarCalGir+0x244>)
 8021b5c:	4413      	add	r3, r2
 8021b5e:	633b      	str	r3, [r7, #48]	; 0x30
        if (driver->terminado || !imuOperativa(i)) {
            driver->terminado = true;
            continue;
        }
*/
        todosCalibrados = false;
 8021b60:	2300      	movs	r3, #0
 8021b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        float gir[3];
        giroNumIMU(i, gir);
 8021b66:	f107 0220 	add.w	r2, r7, #32
 8021b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8021b6e:	4611      	mov	r1, r2
 8021b70:	4618      	mov	r0, r3
 8021b72:	f003 ffef 	bl	8025b54 <giroNumIMU>

        driver->girAcum[0] += gir[0];
 8021b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b78:	ed93 7a04 	vldr	s14, [r3, #16]
 8021b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8021b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b86:	edc3 7a04 	vstr	s15, [r3, #16]
        driver->girAcum[1] += gir[1];
 8021b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b8c:	ed93 7a05 	vldr	s14, [r3, #20]
 8021b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b9a:	edc3 7a05 	vstr	s15, [r3, #20]
        driver->girAcum[2] += gir[2];
 8021b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ba0:	ed93 7a06 	vldr	s14, [r3, #24]
 8021ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8021ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bae:	edc3 7a06 	vstr	s15, [r3, #24]
    	driver->cntMuestras++;
 8021bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bb4:	891b      	ldrh	r3, [r3, #8]
 8021bb6:	3301      	adds	r3, #1
 8021bb8:	b29a      	uxth	r2, r3
 8021bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bbc:	811a      	strh	r2, [r3, #8]

        if (driver->cntMuestras >= NUM_MUESTRAS_CALIBRADOR_GIROSCOPIO) {
 8021bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bc0:	891b      	ldrh	r3, [r3, #8]
 8021bc2:	2b31      	cmp	r3, #49	; 0x31
 8021bc4:	f240 8143 	bls.w	8021e4e <actualizarCalGir+0x316>
            float giroMedio[3];
            float giroDif[3];
            float difAbsG;

            giroMedio[0] = driver->girAcum[0] / driver->cntMuestras;
 8021bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bca:	edd3 6a04 	vldr	s13, [r3, #16]
 8021bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bd0:	891b      	ldrh	r3, [r3, #8]
 8021bd2:	ee07 3a90 	vmov	s15, r3
 8021bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021bde:	edc7 7a05 	vstr	s15, [r7, #20]
            giroMedio[1] = driver->girAcum[1] / driver->cntMuestras;
 8021be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021be4:	edd3 6a05 	vldr	s13, [r3, #20]
 8021be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bea:	891b      	ldrh	r3, [r3, #8]
 8021bec:	ee07 3a90 	vmov	s15, r3
 8021bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021bf8:	edc7 7a06 	vstr	s15, [r7, #24]
            giroMedio[2] = driver->girAcum[2] / driver->cntMuestras;
 8021bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bfe:	edd3 6a06 	vldr	s13, [r3, #24]
 8021c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c04:	891b      	ldrh	r3, [r3, #8]
 8021c06:	ee07 3a90 	vmov	s15, r3
 8021c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021c12:	edc7 7a07 	vstr	s15, [r7, #28]

            driver->girAcum[0] = 0;
 8021c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c18:	f04f 0200 	mov.w	r2, #0
 8021c1c:	611a      	str	r2, [r3, #16]
            driver->girAcum[1] = 0;
 8021c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c20:	f04f 0200 	mov.w	r2, #0
 8021c24:	615a      	str	r2, [r3, #20]
            driver->girAcum[2] = 0;
 8021c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c28:	f04f 0200 	mov.w	r2, #0
 8021c2c:	619a      	str	r2, [r3, #24]

            giroDif[0] = driver->ultimaMedia[0] - giroMedio[0];
 8021c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c30:	ed93 7a07 	vldr	s14, [r3, #28]
 8021c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8021c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021c3c:	edc7 7a02 	vstr	s15, [r7, #8]
            giroDif[1] = driver->ultimaMedia[1] - giroMedio[1];
 8021c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c42:	ed93 7a08 	vldr	s14, [r3, #32]
 8021c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8021c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021c4e:	edc7 7a03 	vstr	s15, [r7, #12]
            giroDif[2] = driver->ultimaMedia[2] - giroMedio[2];
 8021c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c54:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8021c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8021c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021c60:	edc7 7a04 	vstr	s15, [r7, #16]

            difAbsG = moduloVector3(giroDif);
 8021c64:	f107 0308 	add.w	r3, r7, #8
 8021c68:	4618      	mov	r0, r3
 8021c6a:	f7f1 fd31 	bl	80136d0 <moduloVector3>
 8021c6e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

            if (driver->cntIntentos == 0) {
 8021c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c74:	7a9b      	ldrb	r3, [r3, #10]
 8021c76:	2b00      	cmp	r3, #0
 8021c78:	d10c      	bne.n	8021c94 <actualizarCalGir+0x15c>
            	driver->mejorDif = difAbsG;
 8021c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021c7e:	60da      	str	r2, [r3, #12]
            	driver->mejorMedia[0] = giroMedio[0];
 8021c80:	697a      	ldr	r2, [r7, #20]
 8021c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c84:	629a      	str	r2, [r3, #40]	; 0x28
            	driver->mejorMedia[1] = giroMedio[1];
 8021c86:	69ba      	ldr	r2, [r7, #24]
 8021c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c8a:	62da      	str	r2, [r3, #44]	; 0x2c
            	driver->mejorMedia[2] = giroMedio[2];
 8021c8c:	69fa      	ldr	r2, [r7, #28]
 8021c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c90:	631a      	str	r2, [r3, #48]	; 0x30
 8021c92:	e0ca      	b.n	8021e2a <actualizarCalGir+0x2f2>
            }
            else if (difAbsG < TOLERANCIA_CAL_GIRO) {
 8021c94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8021c98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ca4:	d56c      	bpl.n	8021d80 <actualizarCalGir+0x248>
            	driver->ultimaMedia[0] = (giroMedio[0] * 0.5) + (driver->ultimaMedia[0] * 0.5);
 8021ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8021caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021cae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021cb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8021cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021cc0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021cc4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021cc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021ccc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cd2:	edc3 7a07 	vstr	s15, [r3, #28]
            	driver->ultimaMedia[1] = (giroMedio[1] * 0.5) + (driver->ultimaMedia[1] * 0.5);
 8021cd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8021cda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021cde:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021ce2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ce8:	edd3 7a08 	vldr	s15, [r3, #32]
 8021cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021cf0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021cf4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021cf8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021cfc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d02:	edc3 7a08 	vstr	s15, [r3, #32]
            	driver->ultimaMedia[2] = (giroMedio[2] * 0.5) + (driver->ultimaMedia[2] * 0.5);
 8021d06:	edd7 7a07 	vldr	s15, [r7, #28]
 8021d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021d0e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021d12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d18:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8021d1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021d20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021d24:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021d28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021d2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            	driver->cal.offset[0] = driver->ultimaMedia[0];
 8021d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d38:	69da      	ldr	r2, [r3, #28]
 8021d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d3c:	639a      	str	r2, [r3, #56]	; 0x38
            	driver->cal.offset[1] = driver->ultimaMedia[1];
 8021d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d40:	6a1a      	ldr	r2, [r3, #32]
 8021d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d44:	63da      	str	r2, [r3, #60]	; 0x3c
            	driver->cal.offset[2] = driver->ultimaMedia[2];
 8021d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d4c:	641a      	str	r2, [r3, #64]	; 0x40

            	driver->terminado = true;
 8021d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d50:	2201      	movs	r2, #1
 8021d52:	705a      	strb	r2, [r3, #1]
            	if (chequearParametrosCalGir(driver->cal)) {
 8021d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d56:	3334      	adds	r3, #52	; 0x34
 8021d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021d5a:	f000 f897 	bl	8021e8c <chequearParametrosCalGir>
 8021d5e:	4603      	mov	r3, r0
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d007      	beq.n	8021d74 <actualizarCalGir+0x23c>
            	    driver->cal.calibrado = true;
 8021d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d66:	2201      	movs	r2, #1
 8021d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            	    driver->error = false;
 8021d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d6e:	2200      	movs	r2, #0
 8021d70:	709a      	strb	r2, [r3, #2]
 8021d72:	e076      	b.n	8021e62 <actualizarCalGir+0x32a>
            	}
            	else
            		driver->error = true;
 8021d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d76:	2201      	movs	r2, #1
 8021d78:	709a      	strb	r2, [r3, #2]
 8021d7a:	e072      	b.n	8021e62 <actualizarCalGir+0x32a>
 8021d7c:	2000b800 	.word	0x2000b800

                continue;
            }
            else if (difAbsG < driver->mejorDif) {
 8021d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d82:	edd3 7a03 	vldr	s15, [r3, #12]
 8021d86:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8021d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d92:	d54a      	bpl.n	8021e2a <actualizarCalGir+0x2f2>
            	driver->mejorDif = difAbsG;
 8021d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021d98:	60da      	str	r2, [r3, #12]
            	driver->mejorMedia[0] = (giroMedio[0] * 0.5) + (driver->ultimaMedia[0] * 0.5);
 8021d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8021d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021da2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021da6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dac:	edd3 7a07 	vldr	s15, [r3, #28]
 8021db0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021db4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021db8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021dbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021dc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dc6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
            	driver->mejorMedia[1] = (giroMedio[1] * 0.5) + (driver->ultimaMedia[1] * 0.5);
 8021dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8021dce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021dd2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021dd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ddc:	edd3 7a08 	vldr	s15, [r3, #32]
 8021de0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021de4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021de8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021dec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021df0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021df6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
            	driver->mejorMedia[2] = (giroMedio[2] * 0.5) + (driver->ultimaMedia[2] * 0.5);
 8021dfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8021dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021e02:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8021e06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8021e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8021e14:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021e18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021e1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8021e20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8021e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e26:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            }

            driver->ultimaMedia[0] = giroMedio[0];
 8021e2a:	697a      	ldr	r2, [r7, #20]
 8021e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e2e:	61da      	str	r2, [r3, #28]
            driver->ultimaMedia[1] = giroMedio[1];
 8021e30:	69ba      	ldr	r2, [r7, #24]
 8021e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e34:	621a      	str	r2, [r3, #32]
            driver->ultimaMedia[2] = giroMedio[2];
 8021e36:	69fa      	ldr	r2, [r7, #28]
 8021e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e3a:	625a      	str	r2, [r3, #36]	; 0x24
            driver->cntIntentos++;
 8021e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e3e:	7a9b      	ldrb	r3, [r3, #10]
 8021e40:	3301      	adds	r3, #1
 8021e42:	b2da      	uxtb	r2, r3
 8021e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e46:	729a      	strb	r2, [r3, #10]
            driver->cntMuestras = 0;
 8021e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	811a      	strh	r2, [r3, #8]
        }

        if (driver->cntIntentos >= NUM_MAX_INT_CALIBRADOR_GIROSCOPIO) {
 8021e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e50:	7a9b      	ldrb	r3, [r3, #10]
 8021e52:	2b09      	cmp	r3, #9
 8021e54:	d905      	bls.n	8021e62 <actualizarCalGir+0x32a>
        	driver->terminado = true;
 8021e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e58:	2201      	movs	r2, #1
 8021e5a:	705a      	strb	r2, [r3, #1]
            driver->error = true;
 8021e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e5e:	2201      	movs	r2, #1
 8021e60:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8021e62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8021e66:	3301      	adds	r3, #1
 8021e68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8021e6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8021e70:	2b04      	cmp	r3, #4
 8021e72:	f67f ae6c 	bls.w	8021b4e <actualizarCalGir+0x16>
        }
    }

    if (todosCalibrados)
 8021e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d001      	beq.n	8021e82 <actualizarCalGir+0x34a>
        terminarCalGir();
 8021e7e:	f7ff fa4b 	bl	8021318 <terminarCalGir>
}
 8021e82:	bf00      	nop
 8021e84:	3738      	adds	r7, #56	; 0x38
 8021e86:	46bd      	mov	sp, r7
 8021e88:	bd80      	pop	{r7, pc}
 8021e8a:	bf00      	nop

08021e8c <chequearParametrosCalGir>:
**  Descripcion:    Chequea los parametros del calibrador del giroscopio
**  Parametros:     Datos de la calibracion
**  Retorno:        True si ok
****************************************************************************************/
bool chequearParametrosCalGir(calParamGiroscopio_t cal)
{
 8021e8c:	b490      	push	{r4, r7}
 8021e8e:	b086      	sub	sp, #24
 8021e90:	af00      	add	r7, sp, #0
 8021e92:	463c      	mov	r4, r7
 8021e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Chequeo de los offset
    for (uint8_t i = 0; i < 3; i++) {
 8021e98:	2300      	movs	r3, #0
 8021e9a:	75fb      	strb	r3, [r7, #23]
 8021e9c:	e014      	b.n	8021ec8 <chequearParametrosCalGir+0x3c>
        if (abs(cal.offset[i]) > LIMITE_OFFSET_GIR)
 8021e9e:	7dfb      	ldrb	r3, [r7, #23]
 8021ea0:	009b      	lsls	r3, r3, #2
 8021ea2:	3318      	adds	r3, #24
 8021ea4:	443b      	add	r3, r7
 8021ea6:	3b14      	subs	r3, #20
 8021ea8:	edd3 7a00 	vldr	s15, [r3]
 8021eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021eb0:	ee17 3a90 	vmov	r3, s15
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	bfb8      	it	lt
 8021eb8:	425b      	neglt	r3, r3
 8021eba:	2b01      	cmp	r3, #1
 8021ebc:	dd01      	ble.n	8021ec2 <chequearParametrosCalGir+0x36>
            return false;
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	e006      	b.n	8021ed0 <chequearParametrosCalGir+0x44>
    for (uint8_t i = 0; i < 3; i++) {
 8021ec2:	7dfb      	ldrb	r3, [r7, #23]
 8021ec4:	3301      	adds	r3, #1
 8021ec6:	75fb      	strb	r3, [r7, #23]
 8021ec8:	7dfb      	ldrb	r3, [r7, #23]
 8021eca:	2b02      	cmp	r3, #2
 8021ecc:	d9e7      	bls.n	8021e9e <chequearParametrosCalGir+0x12>
    }

    return true;
 8021ece:	2301      	movs	r3, #1
}
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	3718      	adds	r7, #24
 8021ed4:	46bd      	mov	sp, r7
 8021ed6:	bc90      	pop	{r4, r7}
 8021ed8:	4770      	bx	lr

08021eda <actualizarCalMag>:
**  Descripcion:    Actualiza el calibrador del magnetometro
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarCalMag(uint32_t tiempoActual)
{
 8021eda:	b480      	push	{r7}
 8021edc:	b085      	sub	sp, #20
 8021ede:	af00      	add	r7, sp, #0
 8021ee0:	6078      	str	r0, [r7, #4]
    bool todosCalibrados = true;
 8021ee2:	2301      	movs	r3, #1
 8021ee4:	73fb      	strb	r3, [r7, #15]
    return;
 8021ee6:	bf00      	nop
        }
    }

    if (todosCalibrados)
        terminarCalMag();
}
 8021ee8:	3714      	adds	r7, #20
 8021eea:	46bd      	mov	sp, r7
 8021eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ef0:	4770      	bx	lr
	...

08021ef4 <configGPS>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configGPS_t, NUM_MAX_GPS, configGPS);
 8021ef4:	b480      	push	{r7}
 8021ef6:	b083      	sub	sp, #12
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	6078      	str	r0, [r7, #4]
 8021efc:	687a      	ldr	r2, [r7, #4]
 8021efe:	4613      	mov	r3, r2
 8021f00:	005b      	lsls	r3, r3, #1
 8021f02:	4413      	add	r3, r2
 8021f04:	009b      	lsls	r3, r3, #2
 8021f06:	4a04      	ldr	r2, [pc, #16]	; (8021f18 <configGPS+0x24>)
 8021f08:	4413      	add	r3, r2
 8021f0a:	4618      	mov	r0, r3
 8021f0c:	370c      	adds	r7, #12
 8021f0e:	46bd      	mov	sp, r7
 8021f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f14:	4770      	bx	lr
 8021f16:	bf00      	nop
 8021f18:	2000a79c 	.word	0x2000a79c

08021f1c <iniciarGPS>:
**  Descripcion:    Inicia los GPS
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarGPS(void)
{
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b084      	sub	sp, #16
 8021f20:	af00      	add	r7, sp, #0
#ifdef LEER_GPS_SCHEDULER
    ajustarFrecuenciaEjecucionTarea(TAREA_LEER_GPS, PERIODO_TAREA_HZ_SCHEDULER(configGPS(0)->frecLeer));
 8021f22:	2000      	movs	r0, #0
 8021f24:	f7ff ffe6 	bl	8021ef4 <configGPS>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	895b      	ldrh	r3, [r3, #10]
 8021f2c:	461a      	mov	r2, r3
 8021f2e:	4b3d      	ldr	r3, [pc, #244]	; (8022024 <iniciarGPS+0x108>)
 8021f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8021f34:	4619      	mov	r1, r3
 8021f36:	200e      	movs	r0, #14
 8021f38:	f7fd f81a 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#endif

    // Reseteamos las variables del sensor general
    memset(&gpsGen, 0, sizeof(gpsGen_t));
 8021f3c:	2248      	movs	r2, #72	; 0x48
 8021f3e:	2100      	movs	r1, #0
 8021f40:	4839      	ldr	r0, [pc, #228]	; (8022028 <iniciarGPS+0x10c>)
 8021f42:	f013 f9ad 	bl	80352a0 <memset>
    gpsGen.estado.hdop = DOP_DESCONOCIDO_GPS;
 8021f46:	4b38      	ldr	r3, [pc, #224]	; (8022028 <iniciarGPS+0x10c>)
 8021f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021f4c:	81da      	strh	r2, [r3, #14]
    gpsGen.estado.vdop = DOP_DESCONOCIDO_GPS;
 8021f4e:	4b36      	ldr	r3, [pc, #216]	; (8022028 <iniciarGPS+0x10c>)
 8021f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021f54:	821a      	strh	r2, [r3, #16]

    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8021f56:	2300      	movs	r3, #0
 8021f58:	73fb      	strb	r3, [r7, #15]
 8021f5a:	e05a      	b.n	8022012 <iniciarGPS+0xf6>

        if (configGPS(i)->tipoGPS == GPS_NINGUNO)
 8021f5c:	7bfb      	ldrb	r3, [r7, #15]
 8021f5e:	4618      	mov	r0, r3
 8021f60:	f7ff ffc8 	bl	8021ef4 <configGPS>
 8021f64:	4603      	mov	r3, r0
 8021f66:	f993 3000 	ldrsb.w	r3, [r3]
 8021f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021f6e:	d04c      	beq.n	802200a <iniciarGPS+0xee>
            continue;

        gps_t *driver = &gps[i];
 8021f70:	7bfa      	ldrb	r2, [r7, #15]
 8021f72:	4613      	mov	r3, r2
 8021f74:	00db      	lsls	r3, r3, #3
 8021f76:	1a9b      	subs	r3, r3, r2
 8021f78:	011b      	lsls	r3, r3, #4
 8021f7a:	4a2c      	ldr	r2, [pc, #176]	; (802202c <iniciarGPS+0x110>)
 8021f7c:	4413      	add	r3, r2
 8021f7e:	60bb      	str	r3, [r7, #8]

        // Reseteamos las variables del sensor
        memset(driver, 0, sizeof(gps_t));
 8021f80:	2270      	movs	r2, #112	; 0x70
 8021f82:	2100      	movs	r1, #0
 8021f84:	68b8      	ldr	r0, [r7, #8]
 8021f86:	f013 f98b 	bl	80352a0 <memset>

        driver->numGPS = i;
 8021f8a:	68bb      	ldr	r3, [r7, #8]
 8021f8c:	7bfa      	ldrb	r2, [r7, #15]
 8021f8e:	701a      	strb	r2, [r3, #0]
        driver->estado.necesitaReiniciar = true;
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	2201      	movs	r2, #1
 8021f94:	f883 2020 	strb.w	r2, [r3, #32]
        driver->estado.status = NO_GPS;
 8021f98:	68bb      	ldr	r3, [r7, #8]
 8021f9a:	2200      	movs	r2, #0
 8021f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        driver->estado.hdop = DOP_DESCONOCIDO_GPS;
 8021fa0:	68bb      	ldr	r3, [r7, #8]
 8021fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        driver->estado.vdop = DOP_DESCONOCIDO_GPS;
 8021fa8:	68bb      	ldr	r3, [r7, #8]
 8021faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021fae:	859a      	strh	r2, [r3, #44]	; 0x2c

        // Arrancamos la UART
        configIniUART_t config;
        config.baudrate = gpsBaudrates[gps->deteccion.baudrateActual];
 8021fb0:	4b1e      	ldr	r3, [pc, #120]	; (802202c <iniciarGPS+0x110>)
 8021fb2:	7e1b      	ldrb	r3, [r3, #24]
 8021fb4:	461a      	mov	r2, r3
 8021fb6:	4b1e      	ldr	r3, [pc, #120]	; (8022030 <iniciarGPS+0x114>)
 8021fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021fbc:	603b      	str	r3, [r7, #0]
        config.lWord = UART_LONGITUD_WORD_8;
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	713b      	strb	r3, [r7, #4]
        config.paridad = UART_NO_PARIDAD;
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	717b      	strb	r3, [r7, #5]
        config.stop = UART_BIT_STOP_1;
 8021fc6:	2300      	movs	r3, #0
 8021fc8:	71bb      	strb	r3, [r7, #6]

        if (!uartIniciada(configGPS(i)->dispUART))
 8021fca:	7bfb      	ldrb	r3, [r7, #15]
 8021fcc:	4618      	mov	r0, r3
 8021fce:	f7ff ff91 	bl	8021ef4 <configGPS>
 8021fd2:	4603      	mov	r3, r0
 8021fd4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8021fd8:	4618      	mov	r0, r3
 8021fda:	f7f6 ff1b 	bl	8018e14 <uartIniciada>
 8021fde:	4603      	mov	r3, r0
 8021fe0:	f083 0301 	eor.w	r3, r3, #1
 8021fe4:	b2db      	uxtb	r3, r3
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	d00b      	beq.n	8022002 <iniciarGPS+0xe6>
            iniciarUART(configGPS(i)->dispUART, config, NULL);
 8021fea:	7bfb      	ldrb	r3, [r7, #15]
 8021fec:	4618      	mov	r0, r3
 8021fee:	f7ff ff81 	bl	8021ef4 <configGPS>
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	463a      	mov	r2, r7
 8021ffc:	ca06      	ldmia	r2, {r1, r2}
 8021ffe:	f7f6 fea9 	bl	8018d54 <iniciarUART>

        // Una vez cargada la configuracion iniciamos el sensor
        iniciarDriverGPS(driver);
 8022002:	68b8      	ldr	r0, [r7, #8]
 8022004:	f000 f816 	bl	8022034 <iniciarDriverGPS>
 8022008:	e000      	b.n	802200c <iniciarGPS+0xf0>
            continue;
 802200a:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 802200c:	7bfb      	ldrb	r3, [r7, #15]
 802200e:	3301      	adds	r3, #1
 8022010:	73fb      	strb	r3, [r7, #15]
 8022012:	7bfb      	ldrb	r3, [r7, #15]
 8022014:	2b02      	cmp	r3, #2
 8022016:	d9a1      	bls.n	8021f5c <iniciarGPS+0x40>
    }

    return true;
 8022018:	2301      	movs	r3, #1
}
 802201a:	4618      	mov	r0, r3
 802201c:	3710      	adds	r7, #16
 802201e:	46bd      	mov	sp, r7
 8022020:	bd80      	pop	{r7, pc}
 8022022:	bf00      	nop
 8022024:	000f4240 	.word	0x000f4240
 8022028:	2000baa8 	.word	0x2000baa8
 802202c:	2000b958 	.word	0x2000b958
 8022030:	0803c080 	.word	0x0803c080

08022034 <iniciarDriverGPS>:
**  Descripcion:    Inicia un GPS
**  Parametros:     Dispositivo a iniciar, posicion que ocupa en el array de sensores
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverGPS(gps_t *dGPS)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b082      	sub	sp, #8
 8022038:	af00      	add	r7, sp, #0
 802203a:	6078      	str	r0, [r7, #4]
    iniciarGPSublox(dGPS);
 802203c:	6878      	ldr	r0, [r7, #4]
 802203e:	f001 f843 	bl	80230c8 <iniciarGPSublox>
    detectarGPS(dGPS);
 8022042:	6878      	ldr	r0, [r7, #4]
 8022044:	f000 f806 	bl	8022054 <detectarGPS>
    return true;
 8022048:	2301      	movs	r3, #1
}
 802204a:	4618      	mov	r0, r3
 802204c:	3708      	adds	r7, #8
 802204e:	46bd      	mov	sp, r7
 8022050:	bd80      	pop	{r7, pc}
	...

08022054 <detectarGPS>:
**  Descripcion:    Lee los datos del GPS
**  Parametros:     Puntero al sensor
**  Retorno:        Sensor detectado
****************************************************************************************/
bool detectarGPS(gps_t *dGPS)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b086      	sub	sp, #24
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
    bool detectado = false;
 802205c:	2300      	movs	r3, #0
 802205e:	75fb      	strb	r3, [r7, #23]
    uint32_t tiempo = millis();
 8022060:	f7f5 fd78 	bl	8017b54 <millis>
 8022064:	6138      	str	r0, [r7, #16]

    dGPS->estado.status = NO_GPS;
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	2200      	movs	r2, #0
 802206a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    dGPS->estado.hdop = DOP_DESCONOCIDO_GPS;
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022074:	855a      	strh	r2, [r3, #42]	; 0x2a
    dGPS->estado.vdop = DOP_DESCONOCIDO_GPS;
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802207c:	859a      	strh	r2, [r3, #44]	; 0x2c

    if (tiempo - dGPS->deteccion.ultimoCambioBaudMs > BAUD_TIEMPO_MS_GPS) {
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	695b      	ldr	r3, [r3, #20]
 8022082:	693a      	ldr	r2, [r7, #16]
 8022084:	1ad3      	subs	r3, r2, r3
 8022086:	f241 3288 	movw	r2, #5000	; 0x1388
 802208a:	4293      	cmp	r3, r2
 802208c:	d944      	bls.n	8022118 <detectarGPS+0xc4>
        // Intenta con el siguiente baudrate
    	dGPS->deteccion.baudrateActual++;
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	7e1b      	ldrb	r3, [r3, #24]
 8022092:	3301      	adds	r3, #1
 8022094:	b2da      	uxtb	r2, r3
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	761a      	strb	r2, [r3, #24]
        if (dGPS->deteccion.baudrateActual == sizeof(gpsBaudrates) / sizeof(uint32_t))
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	7e1b      	ldrb	r3, [r3, #24]
 802209e:	2b03      	cmp	r3, #3
 80220a0:	d102      	bne.n	80220a8 <detectarGPS+0x54>
        	dGPS->deteccion.baudrateActual = 0;
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	2200      	movs	r2, #0
 80220a6:	761a      	strb	r2, [r3, #24]

        ajustarBaudRateUART(configGPS(dGPS->numGPS)->dispUART, gpsBaudrates[dGPS->deteccion.baudrateActual]);
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	781b      	ldrb	r3, [r3, #0]
 80220ac:	4618      	mov	r0, r3
 80220ae:	f7ff ff21 	bl	8021ef4 <configGPS>
 80220b2:	4603      	mov	r3, r0
 80220b4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	7e1b      	ldrb	r3, [r3, #24]
 80220bc:	4619      	mov	r1, r3
 80220be:	4b5a      	ldr	r3, [pc, #360]	; (8022228 <detectarGPS+0x1d4>)
 80220c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80220c4:	4619      	mov	r1, r3
 80220c6:	4610      	mov	r0, r2
 80220c8:	f7f6 feba 	bl	8018e40 <ajustarBaudRateUART>
        dGPS->deteccion.ultimoCambioBaudMs = tiempo;
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	693a      	ldr	r2, [r7, #16]
 80220d0:	615a      	str	r2, [r3, #20]

        if (configGPS(dGPS->numGPS)->tipoGPS == GPS_UBLOX_NEO_6M || configGPS(dGPS->numGPS)->tipoGPS == GPS_UBLOX_NEO_7M || configGPS(gps->numGPS)->tipoGPS == GPS_UBLOX_NEO_M8)
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	4618      	mov	r0, r3
 80220d8:	f7ff ff0c 	bl	8021ef4 <configGPS>
 80220dc:	4603      	mov	r3, r0
 80220de:	f993 3000 	ldrsb.w	r3, [r3]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d013      	beq.n	802210e <detectarGPS+0xba>
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	781b      	ldrb	r3, [r3, #0]
 80220ea:	4618      	mov	r0, r3
 80220ec:	f7ff ff02 	bl	8021ef4 <configGPS>
 80220f0:	4603      	mov	r3, r0
 80220f2:	f993 3000 	ldrsb.w	r3, [r3]
 80220f6:	2b01      	cmp	r3, #1
 80220f8:	d009      	beq.n	802210e <detectarGPS+0xba>
 80220fa:	4b4c      	ldr	r3, [pc, #304]	; (802222c <detectarGPS+0x1d8>)
 80220fc:	781b      	ldrb	r3, [r3, #0]
 80220fe:	4618      	mov	r0, r3
 8022100:	f7ff fef8 	bl	8021ef4 <configGPS>
 8022104:	4603      	mov	r3, r0
 8022106:	f993 3000 	ldrsb.w	r3, [r3]
 802210a:	2b02      	cmp	r3, #2
 802210c:	d104      	bne.n	8022118 <detectarGPS+0xc4>
            ajustarBloqueConfigGPS(dGPS, gpsBloqueConfig, sizeof(gpsBloqueConfig));
 802210e:	222e      	movs	r2, #46	; 0x2e
 8022110:	4947      	ldr	r1, [pc, #284]	; (8022230 <detectarGPS+0x1dc>)
 8022112:	6878      	ldr	r0, [r7, #4]
 8022114:	f000 f892 	bl	802223c <ajustarBloqueConfigGPS>
    }

    // Enviamos el bloque de configuracion
    enviarBloqueConfigGPS(dGPS);
 8022118:	6878      	ldr	r0, [r7, #4]
 802211a:	f000 f8a2 	bl	8022262 <enviarBloqueConfigGPS>

    while (dGPS->bloqueConfiguracion.charRestantes == 0 && bytesRecibidosUART(configGPS(dGPS->numGPS)->dispUART) > 0) {
 802211e:	e05d      	b.n	80221dc <detectarGPS+0x188>
        uint8_t dato;
        dato = leerUART(configGPS(dGPS->numGPS)->dispUART);
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	781b      	ldrb	r3, [r3, #0]
 8022124:	4618      	mov	r0, r3
 8022126:	f7ff fee5 	bl	8021ef4 <configGPS>
 802212a:	4603      	mov	r3, r0
 802212c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8022130:	4618      	mov	r0, r3
 8022132:	f7f7 f81a 	bl	801916a <leerUART>
 8022136:	4603      	mov	r3, r0
 8022138:	73fb      	strb	r3, [r7, #15]

        // Ejecutar un GPS uBlox a menos de 38400 dara lugar a paquetes corruptos ya que no podemos recibir los paquetes en 200 ms (5Hz).
        if ((configGPS(dGPS->numGPS)->tipoGPS == GPS_UBLOX_NEO_6M || configGPS(gps->numGPS)->tipoGPS == GPS_UBLOX_NEO_7M || configGPS(gps->numGPS)->tipoGPS == GPS_UBLOX_NEO_M8) && gpsBaudrates[gps->deteccion.baudrateActual] >= 38400 && detectarGPSublox(dGPS, dato)) {
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	4618      	mov	r0, r3
 8022140:	f7ff fed8 	bl	8021ef4 <configGPS>
 8022144:	4603      	mov	r3, r0
 8022146:	f993 3000 	ldrsb.w	r3, [r3]
 802214a:	2b00      	cmp	r3, #0
 802214c:	d013      	beq.n	8022176 <detectarGPS+0x122>
 802214e:	4b37      	ldr	r3, [pc, #220]	; (802222c <detectarGPS+0x1d8>)
 8022150:	781b      	ldrb	r3, [r3, #0]
 8022152:	4618      	mov	r0, r3
 8022154:	f7ff fece 	bl	8021ef4 <configGPS>
 8022158:	4603      	mov	r3, r0
 802215a:	f993 3000 	ldrsb.w	r3, [r3]
 802215e:	2b01      	cmp	r3, #1
 8022160:	d009      	beq.n	8022176 <detectarGPS+0x122>
 8022162:	4b32      	ldr	r3, [pc, #200]	; (802222c <detectarGPS+0x1d8>)
 8022164:	781b      	ldrb	r3, [r3, #0]
 8022166:	4618      	mov	r0, r3
 8022168:	f7ff fec4 	bl	8021ef4 <configGPS>
 802216c:	4603      	mov	r3, r0
 802216e:	f993 3000 	ldrsb.w	r3, [r3]
 8022172:	2b02      	cmp	r3, #2
 8022174:	d132      	bne.n	80221dc <detectarGPS+0x188>
 8022176:	4b2d      	ldr	r3, [pc, #180]	; (802222c <detectarGPS+0x1d8>)
 8022178:	7e1b      	ldrb	r3, [r3, #24]
 802217a:	461a      	mov	r2, r3
 802217c:	4b2a      	ldr	r3, [pc, #168]	; (8022228 <detectarGPS+0x1d4>)
 802217e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022182:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8022186:	d329      	bcc.n	80221dc <detectarGPS+0x188>
 8022188:	7bfb      	ldrb	r3, [r7, #15]
 802218a:	4619      	mov	r1, r3
 802218c:	6878      	ldr	r0, [r7, #4]
 802218e:	f000 ffdd 	bl	802314c <detectarGPSublox>
 8022192:	4603      	mov	r3, r0
 8022194:	2b00      	cmp	r3, #0
 8022196:	d021      	beq.n	80221dc <detectarGPS+0x188>
#ifdef DEBUG
            printf("GPS detectado nº: %u\n", dGPS->numGPS + 1);
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	781b      	ldrb	r3, [r3, #0]
 802219c:	3301      	adds	r3, #1
 802219e:	4619      	mov	r1, r3
 80221a0:	4824      	ldr	r0, [pc, #144]	; (8022234 <detectarGPS+0x1e0>)
 80221a2:	f013 fda7 	bl	8035cf4 <iprintf>
#endif
            dGPS->detectado = true;
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	2201      	movs	r2, #1
 80221aa:	741a      	strb	r2, [r3, #16]
            detectado = true;
 80221ac:	2301      	movs	r3, #1
 80221ae:	75fb      	strb	r3, [r7, #23]
            cntGPSconectados++;
 80221b0:	4b21      	ldr	r3, [pc, #132]	; (8022238 <detectarGPS+0x1e4>)
 80221b2:	781b      	ldrb	r3, [r3, #0]
 80221b4:	3301      	adds	r3, #1
 80221b6:	b2da      	uxtb	r2, r3
 80221b8:	4b1f      	ldr	r3, [pc, #124]	; (8022238 <detectarGPS+0x1e4>)
 80221ba:	701a      	strb	r2, [r3, #0]
            iniciarGPSublox(dGPS);
 80221bc:	6878      	ldr	r0, [r7, #4]
 80221be:	f000 ff83 	bl	80230c8 <iniciarGPSublox>
            dGPS->estado.necesitaReiniciar = false;
 80221c2:	687b      	ldr	r3, [r7, #4]
 80221c4:	2200      	movs	r2, #0
 80221c6:	f883 2020 	strb.w	r2, [r3, #32]
            ajustarBloqueConfigGPS(dGPS, NULL, 0);          // Detiene cualquier cadena de configuracion que este pendiente
 80221ca:	2200      	movs	r2, #0
 80221cc:	2100      	movs	r1, #0
 80221ce:	6878      	ldr	r0, [r7, #4]
 80221d0:	f000 f834 	bl	802223c <ajustarBloqueConfigGPS>
            solcitarSiguienteConfigGPSublox(dGPS);          // Inicia el proceso de actualizacion de los rates del GPS
 80221d4:	6878      	ldr	r0, [r7, #4]
 80221d6:	f001 f88f 	bl	80232f8 <solcitarSiguienteConfigGPSublox>
            break;
 80221da:	e011      	b.n	8022200 <detectarGPS+0x1ac>
    while (dGPS->bloqueConfiguracion.charRestantes == 0 && bytesRecibidosUART(configGPS(dGPS->numGPS)->dispUART) > 0) {
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	891b      	ldrh	r3, [r3, #8]
 80221e0:	2b00      	cmp	r3, #0
 80221e2:	d10d      	bne.n	8022200 <detectarGPS+0x1ac>
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	781b      	ldrb	r3, [r3, #0]
 80221e8:	4618      	mov	r0, r3
 80221ea:	f7ff fe83 	bl	8021ef4 <configGPS>
 80221ee:	4603      	mov	r3, r0
 80221f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80221f4:	4618      	mov	r0, r3
 80221f6:	f7f6 fff6 	bl	80191e6 <bytesRecibidosUART>
 80221fa:	4603      	mov	r3, r0
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d18f      	bne.n	8022120 <detectarGPS+0xcc>
        }
    }

    if (detectado == true) {
 8022200:	7dfb      	ldrb	r3, [r7, #23]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d00b      	beq.n	802221e <detectarGPS+0x1ca>
    	dGPS->estado.status = NO_FIX;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	2201      	movs	r2, #1
 802220a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    	dGPS->timing.ultimoMensajeMs = tiempo;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	693a      	ldr	r2, [r7, #16]
 8022212:	669a      	str	r2, [r3, #104]	; 0x68
    	dGPS->timing.incrementoTiempoMs = TIMEOUT_MS_GPS;
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 802221a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    }

    return detectado;
 802221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8022220:	4618      	mov	r0, r3
 8022222:	3718      	adds	r7, #24
 8022224:	46bd      	mov	sp, r7
 8022226:	bd80      	pop	{r7, pc}
 8022228:	0803c080 	.word	0x0803c080
 802222c:	2000b958 	.word	0x2000b958
 8022230:	0803c08c 	.word	0x0803c08c
 8022234:	0803ab5c 	.word	0x0803ab5c
 8022238:	2000baf0 	.word	0x2000baf0

0802223c <ajustarBloqueConfigGPS>:
**  Descripcion:    Configura la estructura del mensaje de configuracion
**  Parametros:     Puntero al GPS, mensaje de configuracion, tamanio del mensaje
**  Retorno:        Ninguno
****************************************************************************************/
void ajustarBloqueConfigGPS(gps_t *dGPS, const char *mensaje, uint16_t tam)
{
 802223c:	b480      	push	{r7}
 802223e:	b085      	sub	sp, #20
 8022240:	af00      	add	r7, sp, #0
 8022242:	60f8      	str	r0, [r7, #12]
 8022244:	60b9      	str	r1, [r7, #8]
 8022246:	4613      	mov	r3, r2
 8022248:	80fb      	strh	r3, [r7, #6]
    dGPS->bloqueConfiguracion.mensaje = mensaje;
 802224a:	68fb      	ldr	r3, [r7, #12]
 802224c:	68ba      	ldr	r2, [r7, #8]
 802224e:	605a      	str	r2, [r3, #4]
    dGPS->bloqueConfiguracion.charRestantes = tam;
 8022250:	68fb      	ldr	r3, [r7, #12]
 8022252:	88fa      	ldrh	r2, [r7, #6]
 8022254:	811a      	strh	r2, [r3, #8]
}
 8022256:	bf00      	nop
 8022258:	3714      	adds	r7, #20
 802225a:	46bd      	mov	sp, r7
 802225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022260:	4770      	bx	lr

08022262 <enviarBloqueConfigGPS>:
**  Descripcion:    Envia el bloque de configuracion
**  Parametros:     Puntero al GPS
**  Retorno:        Ninguno
****************************************************************************************/
void enviarBloqueConfigGPS(gps_t *dGPS)
{
 8022262:	b580      	push	{r7, lr}
 8022264:	b084      	sub	sp, #16
 8022266:	af00      	add	r7, sp, #0
 8022268:	6078      	str	r0, [r7, #4]
    // Comprueba si quedan bytes por enviar
    if (dGPS->bloqueConfiguracion.charRestantes > 0) {
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	891b      	ldrh	r3, [r3, #8]
 802226e:	2b00      	cmp	r3, #0
 8022270:	d03b      	beq.n	80222ea <enviarBloqueConfigGPS+0x88>
        int16_t espacio;

        espacio = bytesLibresBufferTxUART(configGPS(dGPS->numGPS)->dispUART);
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	781b      	ldrb	r3, [r3, #0]
 8022276:	4618      	mov	r0, r3
 8022278:	f7ff fe3c 	bl	8021ef4 <configGPS>
 802227c:	4603      	mov	r3, r0
 802227e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8022282:	4618      	mov	r0, r3
 8022284:	f7f6 ffe0 	bl	8019248 <bytesLibresBufferTxUART>
 8022288:	4603      	mov	r3, r0
 802228a:	81fb      	strh	r3, [r7, #14]
        if (espacio > (int16_t) dGPS->bloqueConfiguracion.charRestantes)
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	891b      	ldrh	r3, [r3, #8]
 8022290:	b21b      	sxth	r3, r3
 8022292:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8022296:	429a      	cmp	r2, r3
 8022298:	dd23      	ble.n	80222e2 <enviarBloqueConfigGPS+0x80>
            espacio = dGPS->bloqueConfiguracion.charRestantes;
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	891b      	ldrh	r3, [r3, #8]
 802229e:	81fb      	strh	r3, [r7, #14]

        while (espacio > 0) {
 80222a0:	e01f      	b.n	80222e2 <enviarBloqueConfigGPS+0x80>
            escribirUART(configGPS(dGPS->numGPS)->dispUART, *dGPS->bloqueConfiguracion.mensaje);
 80222a2:	687b      	ldr	r3, [r7, #4]
 80222a4:	781b      	ldrb	r3, [r3, #0]
 80222a6:	4618      	mov	r0, r3
 80222a8:	f7ff fe24 	bl	8021ef4 <configGPS>
 80222ac:	4603      	mov	r3, r0
 80222ae:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	685b      	ldr	r3, [r3, #4]
 80222b6:	781b      	ldrb	r3, [r3, #0]
 80222b8:	4619      	mov	r1, r3
 80222ba:	4610      	mov	r0, r2
 80222bc:	f7f6 feff 	bl	80190be <escribirUART>
            dGPS->bloqueConfiguracion.mensaje++;
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	685b      	ldr	r3, [r3, #4]
 80222c4:	1c5a      	adds	r2, r3, #1
 80222c6:	687b      	ldr	r3, [r7, #4]
 80222c8:	605a      	str	r2, [r3, #4]
            espacio--;
 80222ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80222ce:	b29b      	uxth	r3, r3
 80222d0:	3b01      	subs	r3, #1
 80222d2:	b29b      	uxth	r3, r3
 80222d4:	81fb      	strh	r3, [r7, #14]
            dGPS->bloqueConfiguracion.charRestantes--;
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	891b      	ldrh	r3, [r3, #8]
 80222da:	3b01      	subs	r3, #1
 80222dc:	b29a      	uxth	r2, r3
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	811a      	strh	r2, [r3, #8]
        while (espacio > 0) {
 80222e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	dcdb      	bgt.n	80222a2 <enviarBloqueConfigGPS+0x40>
        }
    }
}
 80222ea:	bf00      	nop
 80222ec:	3710      	adds	r7, #16
 80222ee:	46bd      	mov	sp, r7
 80222f0:	bd80      	pop	{r7, pc}
	...

080222f4 <actualizarFailsafeGPS>:
**  Descripcion:    Comprueba si no hay sensores principales operativos
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarFailsafeGPS(void)
{
 80222f4:	b580      	push	{r7, lr}
 80222f6:	b082      	sub	sp, #8
 80222f8:	af00      	add	r7, sp, #0
    bool failsafe = true;
 80222fa:	2301      	movs	r3, #1
 80222fc:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80222fe:	2300      	movs	r3, #0
 8022300:	71bb      	strb	r3, [r7, #6]
 8022302:	e020      	b.n	8022346 <actualizarFailsafeGPS+0x52>
        gps_t *driver = &gps[i];
 8022304:	79ba      	ldrb	r2, [r7, #6]
 8022306:	4613      	mov	r3, r2
 8022308:	00db      	lsls	r3, r3, #3
 802230a:	1a9b      	subs	r3, r3, r2
 802230c:	011b      	lsls	r3, r3, #4
 802230e:	4a13      	ldr	r2, [pc, #76]	; (802235c <actualizarFailsafeGPS+0x68>)
 8022310:	4413      	add	r3, r2
 8022312:	603b      	str	r3, [r7, #0]

        if (driver->detectado && driver->estado.status > NO_FIX && !configGPS(i)->auxiliar)
 8022314:	683b      	ldr	r3, [r7, #0]
 8022316:	7c1b      	ldrb	r3, [r3, #16]
 8022318:	2b00      	cmp	r3, #0
 802231a:	d011      	beq.n	8022340 <actualizarFailsafeGPS+0x4c>
 802231c:	683b      	ldr	r3, [r7, #0]
 802231e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022322:	2b01      	cmp	r3, #1
 8022324:	d90c      	bls.n	8022340 <actualizarFailsafeGPS+0x4c>
 8022326:	79bb      	ldrb	r3, [r7, #6]
 8022328:	4618      	mov	r0, r3
 802232a:	f7ff fde3 	bl	8021ef4 <configGPS>
 802232e:	4603      	mov	r3, r0
 8022330:	785b      	ldrb	r3, [r3, #1]
 8022332:	f083 0301 	eor.w	r3, r3, #1
 8022336:	b2db      	uxtb	r3, r3
 8022338:	2b00      	cmp	r3, #0
 802233a:	d001      	beq.n	8022340 <actualizarFailsafeGPS+0x4c>
        	failsafe = false;
 802233c:	2300      	movs	r3, #0
 802233e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022340:	79bb      	ldrb	r3, [r7, #6]
 8022342:	3301      	adds	r3, #1
 8022344:	71bb      	strb	r3, [r7, #6]
 8022346:	79bb      	ldrb	r3, [r7, #6]
 8022348:	2b02      	cmp	r3, #2
 802234a:	d9db      	bls.n	8022304 <actualizarFailsafeGPS+0x10>
    }

    failsafeGPS = failsafe;
 802234c:	4a04      	ldr	r2, [pc, #16]	; (8022360 <actualizarFailsafeGPS+0x6c>)
 802234e:	79fb      	ldrb	r3, [r7, #7]
 8022350:	7013      	strb	r3, [r2, #0]
}
 8022352:	bf00      	nop
 8022354:	3708      	adds	r7, #8
 8022356:	46bd      	mov	sp, r7
 8022358:	bd80      	pop	{r7, pc}
 802235a:	bf00      	nop
 802235c:	2000b958 	.word	0x2000b958
 8022360:	2000bb00 	.word	0x2000bb00

08022364 <calcularGPSgen>:
**  Descripcion:    Mezcla las medidas de los sensores en uno general
**  Parametros:     Habilitacion de la mezcla de varios sensores
**  Retorno:        Ninguno
****************************************************************************************/
void calcularGPSgen(bool habMezcla)
{
 8022364:	b580      	push	{r7, lr}
 8022366:	b082      	sub	sp, #8
 8022368:	af00      	add	r7, sp, #0
 802236a:	4603      	mov	r3, r0
 802236c:	71fb      	strb	r3, [r7, #7]
    if (habMezcla && calcularPesosMezclaGPS())
 802236e:	79fb      	ldrb	r3, [r7, #7]
 8022370:	2b00      	cmp	r3, #0
 8022372:	d007      	beq.n	8022384 <calcularGPSgen+0x20>
 8022374:	f000 f8de 	bl	8022534 <calcularPesosMezclaGPS>
 8022378:	4603      	mov	r3, r0
 802237a:	2b00      	cmp	r3, #0
 802237c:	d002      	beq.n	8022384 <calcularGPSgen+0x20>
        mezclarMedidasGPS();
 802237e:	f000 fbb3 	bl	8022ae8 <mezclarMedidasGPS>
 8022382:	e002      	b.n	802238a <calcularGPSgen+0x26>
    else
    	asignarGPSgen();
 8022384:	f000 f806 	bl	8022394 <asignarGPSgen>
}
 8022388:	bf00      	nop
 802238a:	bf00      	nop
 802238c:	3708      	adds	r7, #8
 802238e:	46bd      	mov	sp, r7
 8022390:	bd80      	pop	{r7, pc}
	...

08022394 <asignarGPSgen>:
**  Descripcion:    Asigna los valores del GPS general con el sensor de mayor numero de satelites
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void asignarGPSgen(void)
{
 8022394:	b5b0      	push	{r4, r5, r7, lr}
 8022396:	b084      	sub	sp, #16
 8022398:	af00      	add	r7, sp, #0
    uint8_t satelites = 0;
 802239a:	2300      	movs	r3, #0
 802239c:	73fb      	strb	r3, [r7, #15]
    uint8_t indice = 0;
 802239e:	2300      	movs	r3, #0
 80223a0:	73bb      	strb	r3, [r7, #14]
    bool encontrado = false;
 80223a2:	2300      	movs	r3, #0
 80223a4:	737b      	strb	r3, [r7, #13]
    bool gpsFix = false;
 80223a6:	2300      	movs	r3, #0
 80223a8:	733b      	strb	r3, [r7, #12]

	// Se busca si hay algun GPS en NO_FIX
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80223aa:	2300      	movs	r3, #0
 80223ac:	72fb      	strb	r3, [r7, #11]
 80223ae:	e01d      	b.n	80223ec <asignarGPSgen+0x58>
        gps_t *driver = &gps[i];
 80223b0:	7afa      	ldrb	r2, [r7, #11]
 80223b2:	4613      	mov	r3, r2
 80223b4:	00db      	lsls	r3, r3, #3
 80223b6:	1a9b      	subs	r3, r3, r2
 80223b8:	011b      	lsls	r3, r3, #4
 80223ba:	4a5b      	ldr	r2, [pc, #364]	; (8022528 <asignarGPSgen+0x194>)
 80223bc:	4413      	add	r3, r2
 80223be:	603b      	str	r3, [r7, #0]

        if (driver->detectado) {
 80223c0:	683b      	ldr	r3, [r7, #0]
 80223c2:	7c1b      	ldrb	r3, [r3, #16]
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d003      	beq.n	80223d0 <asignarGPSgen+0x3c>
        	indice = i;
 80223c8:	7afb      	ldrb	r3, [r7, #11]
 80223ca:	73bb      	strb	r3, [r7, #14]
            encontrado = true;
 80223cc:	2301      	movs	r3, #1
 80223ce:	737b      	strb	r3, [r7, #13]
        }

        if (driver->detectado && driver->estado.status > NO_FIX)
 80223d0:	683b      	ldr	r3, [r7, #0]
 80223d2:	7c1b      	ldrb	r3, [r3, #16]
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d006      	beq.n	80223e6 <asignarGPSgen+0x52>
 80223d8:	683b      	ldr	r3, [r7, #0]
 80223da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80223de:	2b01      	cmp	r3, #1
 80223e0:	d901      	bls.n	80223e6 <asignarGPSgen+0x52>
            gpsFix = true;
 80223e2:	2301      	movs	r3, #1
 80223e4:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80223e6:	7afb      	ldrb	r3, [r7, #11]
 80223e8:	3301      	adds	r3, #1
 80223ea:	72fb      	strb	r3, [r7, #11]
 80223ec:	7afb      	ldrb	r3, [r7, #11]
 80223ee:	2b02      	cmp	r3, #2
 80223f0:	d9de      	bls.n	80223b0 <asignarGPSgen+0x1c>
    }

    if (gpsFix) {
 80223f2:	7b3b      	ldrb	r3, [r7, #12]
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d038      	beq.n	802246a <asignarGPSgen+0xd6>
    	encontrado = false;
 80223f8:	2300      	movs	r3, #0
 80223fa:	737b      	strb	r3, [r7, #13]

	    // Se busca el GPS con mayor numero de satelites
        for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80223fc:	2300      	movs	r3, #0
 80223fe:	72bb      	strb	r3, [r7, #10]
 8022400:	e030      	b.n	8022464 <asignarGPSgen+0xd0>
            gps_t *driver = &gps[i];
 8022402:	7aba      	ldrb	r2, [r7, #10]
 8022404:	4613      	mov	r3, r2
 8022406:	00db      	lsls	r3, r3, #3
 8022408:	1a9b      	subs	r3, r3, r2
 802240a:	011b      	lsls	r3, r3, #4
 802240c:	4a46      	ldr	r2, [pc, #280]	; (8022528 <asignarGPSgen+0x194>)
 802240e:	4413      	add	r3, r2
 8022410:	607b      	str	r3, [r7, #4]

            if (driver->detectado && driver->estado.status > NO_FIX && driver->estado.numSats > satelites && (!configGPS(i)->auxiliar || failsafeGPS)) {
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	7c1b      	ldrb	r3, [r3, #16]
 8022416:	2b00      	cmp	r3, #0
 8022418:	d021      	beq.n	802245e <asignarGPSgen+0xca>
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022420:	2b01      	cmp	r3, #1
 8022422:	d91c      	bls.n	802245e <asignarGPSgen+0xca>
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 802242a:	7bfa      	ldrb	r2, [r7, #15]
 802242c:	429a      	cmp	r2, r3
 802242e:	d216      	bcs.n	802245e <asignarGPSgen+0xca>
 8022430:	7abb      	ldrb	r3, [r7, #10]
 8022432:	4618      	mov	r0, r3
 8022434:	f7ff fd5e 	bl	8021ef4 <configGPS>
 8022438:	4603      	mov	r3, r0
 802243a:	785b      	ldrb	r3, [r3, #1]
 802243c:	f083 0301 	eor.w	r3, r3, #1
 8022440:	b2db      	uxtb	r3, r3
 8022442:	2b00      	cmp	r3, #0
 8022444:	d103      	bne.n	802244e <asignarGPSgen+0xba>
 8022446:	4b39      	ldr	r3, [pc, #228]	; (802252c <asignarGPSgen+0x198>)
 8022448:	781b      	ldrb	r3, [r3, #0]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d007      	beq.n	802245e <asignarGPSgen+0xca>
                satelites = driver->estado.numSats;
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8022454:	73fb      	strb	r3, [r7, #15]
                indice = i;
 8022456:	7abb      	ldrb	r3, [r7, #10]
 8022458:	73bb      	strb	r3, [r7, #14]
                encontrado = true;
 802245a:	2301      	movs	r3, #1
 802245c:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 802245e:	7abb      	ldrb	r3, [r7, #10]
 8022460:	3301      	adds	r3, #1
 8022462:	72bb      	strb	r3, [r7, #10]
 8022464:	7abb      	ldrb	r3, [r7, #10]
 8022466:	2b02      	cmp	r3, #2
 8022468:	d9cb      	bls.n	8022402 <asignarGPSgen+0x6e>
            }
        }
    }

    if (encontrado) {
 802246a:	7b7b      	ldrb	r3, [r7, #13]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d049      	beq.n	8022504 <asignarGPSgen+0x170>
        gpsGen.operativo = true;
 8022470:	4b2f      	ldr	r3, [pc, #188]	; (8022530 <asignarGPSgen+0x19c>)
 8022472:	2201      	movs	r2, #1
 8022474:	701a      	strb	r2, [r3, #0]
        gpsGen.estado = gps[indice].estado;
 8022476:	7bba      	ldrb	r2, [r7, #14]
 8022478:	492d      	ldr	r1, [pc, #180]	; (8022530 <asignarGPSgen+0x19c>)
 802247a:	482b      	ldr	r0, [pc, #172]	; (8022528 <asignarGPSgen+0x194>)
 802247c:	4613      	mov	r3, r2
 802247e:	00db      	lsls	r3, r3, #3
 8022480:	1a9b      	subs	r3, r3, r2
 8022482:	011b      	lsls	r3, r3, #4
 8022484:	4403      	add	r3, r0
 8022486:	3320      	adds	r3, #32
 8022488:	1d0c      	adds	r4, r1, #4
 802248a:	461d      	mov	r5, r3
 802248c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802248e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022494:	682b      	ldr	r3, [r5, #0]
 8022496:	6023      	str	r3, [r4, #0]
        gpsGen.localizacion = gps[indice].localizacion;
 8022498:	7bba      	ldrb	r2, [r7, #14]
 802249a:	4925      	ldr	r1, [pc, #148]	; (8022530 <asignarGPSgen+0x19c>)
 802249c:	4822      	ldr	r0, [pc, #136]	; (8022528 <asignarGPSgen+0x194>)
 802249e:	4613      	mov	r3, r2
 80224a0:	00db      	lsls	r3, r3, #3
 80224a2:	1a9b      	subs	r3, r3, r2
 80224a4:	011b      	lsls	r3, r3, #4
 80224a6:	4403      	add	r3, r0
 80224a8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80224ac:	f101 0328 	add.w	r3, r1, #40	; 0x28
 80224b0:	3204      	adds	r2, #4
 80224b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80224b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        gpsGen.velocidad = gps[indice].velocidad;
 80224b8:	7bba      	ldrb	r2, [r7, #14]
 80224ba:	491d      	ldr	r1, [pc, #116]	; (8022530 <asignarGPSgen+0x19c>)
 80224bc:	481a      	ldr	r0, [pc, #104]	; (8022528 <asignarGPSgen+0x194>)
 80224be:	4613      	mov	r3, r2
 80224c0:	00db      	lsls	r3, r3, #3
 80224c2:	1a9b      	subs	r3, r3, r2
 80224c4:	011b      	lsls	r3, r3, #4
 80224c6:	4403      	add	r3, r0
 80224c8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80224cc:	f101 0334 	add.w	r3, r1, #52	; 0x34
 80224d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80224d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        gpsGen.vel2d = gps[indice].vel2d;
 80224d6:	7bba      	ldrb	r2, [r7, #14]
 80224d8:	4913      	ldr	r1, [pc, #76]	; (8022528 <asignarGPSgen+0x194>)
 80224da:	4613      	mov	r3, r2
 80224dc:	00db      	lsls	r3, r3, #3
 80224de:	1a9b      	subs	r3, r3, r2
 80224e0:	011b      	lsls	r3, r3, #4
 80224e2:	440b      	add	r3, r1
 80224e4:	335c      	adds	r3, #92	; 0x5c
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	4a11      	ldr	r2, [pc, #68]	; (8022530 <asignarGPSgen+0x19c>)
 80224ea:	6413      	str	r3, [r2, #64]	; 0x40
        gpsGen.velAngular = gps[indice].velAngular;
 80224ec:	7bba      	ldrb	r2, [r7, #14]
 80224ee:	490e      	ldr	r1, [pc, #56]	; (8022528 <asignarGPSgen+0x194>)
 80224f0:	4613      	mov	r3, r2
 80224f2:	00db      	lsls	r3, r3, #3
 80224f4:	1a9b      	subs	r3, r3, r2
 80224f6:	011b      	lsls	r3, r3, #4
 80224f8:	440b      	add	r3, r1
 80224fa:	3360      	adds	r3, #96	; 0x60
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	4a0c      	ldr	r2, [pc, #48]	; (8022530 <asignarGPSgen+0x19c>)
 8022500:	6453      	str	r3, [r2, #68]	; 0x44
        // Reseteamos las variables del sensor general
        memset(&gpsGen, 0, sizeof(gpsGen_t));
        gpsGen.estado.hdop = DOP_DESCONOCIDO_GPS;
        gpsGen.estado.vdop = DOP_DESCONOCIDO_GPS;
    }
}
 8022502:	e00c      	b.n	802251e <asignarGPSgen+0x18a>
        memset(&gpsGen, 0, sizeof(gpsGen_t));
 8022504:	2248      	movs	r2, #72	; 0x48
 8022506:	2100      	movs	r1, #0
 8022508:	4809      	ldr	r0, [pc, #36]	; (8022530 <asignarGPSgen+0x19c>)
 802250a:	f012 fec9 	bl	80352a0 <memset>
        gpsGen.estado.hdop = DOP_DESCONOCIDO_GPS;
 802250e:	4b08      	ldr	r3, [pc, #32]	; (8022530 <asignarGPSgen+0x19c>)
 8022510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022514:	81da      	strh	r2, [r3, #14]
        gpsGen.estado.vdop = DOP_DESCONOCIDO_GPS;
 8022516:	4b06      	ldr	r3, [pc, #24]	; (8022530 <asignarGPSgen+0x19c>)
 8022518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802251c:	821a      	strh	r2, [r3, #16]
}
 802251e:	bf00      	nop
 8022520:	3710      	adds	r7, #16
 8022522:	46bd      	mov	sp, r7
 8022524:	bdb0      	pop	{r4, r5, r7, pc}
 8022526:	bf00      	nop
 8022528:	2000b958 	.word	0x2000b958
 802252c:	2000bb00 	.word	0x2000bb00
 8022530:	2000baa8 	.word	0x2000baa8

08022534 <calcularPesosMezclaGPS>:
**  Descripcion:    Calcula los pesos de los sensores para mezclar las medidas
**  Parametros:     Ninguno
**  Retorno:        True si se puede mezclar
****************************************************************************************/
bool calcularPesosMezclaGPS(void)
{
 8022534:	b580      	push	{r7, lr}
 8022536:	b09a      	sub	sp, #104	; 0x68
 8022538:	af00      	add	r7, sp, #0
    uint8_t fix = 0;
 802253a:	2300      	movs	r3, #0
 802253c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    // Hacen falta minimo 2 sensores para mezclar las medidas
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022540:	2300      	movs	r3, #0
 8022542:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8022546:	e02f      	b.n	80225a8 <calcularPesosMezclaGPS+0x74>
    	gps_t *driver = &gps[i];
 8022548:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 802254c:	4613      	mov	r3, r2
 802254e:	00db      	lsls	r3, r3, #3
 8022550:	1a9b      	subs	r3, r3, r2
 8022552:	011b      	lsls	r3, r3, #4
 8022554:	4aab      	ldr	r2, [pc, #684]	; (8022804 <calcularPesosMezclaGPS+0x2d0>)
 8022556:	4413      	add	r3, r2
 8022558:	633b      	str	r3, [r7, #48]	; 0x30

        if (driver->detectado && driver->estado.status > NO_FIX && (!configGPS(i)->auxiliar || failsafeGPS))
 802255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802255c:	7c1b      	ldrb	r3, [r3, #16]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d019      	beq.n	8022596 <calcularPesosMezclaGPS+0x62>
 8022562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022568:	2b01      	cmp	r3, #1
 802256a:	d914      	bls.n	8022596 <calcularPesosMezclaGPS+0x62>
 802256c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8022570:	4618      	mov	r0, r3
 8022572:	f7ff fcbf 	bl	8021ef4 <configGPS>
 8022576:	4603      	mov	r3, r0
 8022578:	785b      	ldrb	r3, [r3, #1]
 802257a:	f083 0301 	eor.w	r3, r3, #1
 802257e:	b2db      	uxtb	r3, r3
 8022580:	2b00      	cmp	r3, #0
 8022582:	d103      	bne.n	802258c <calcularPesosMezclaGPS+0x58>
 8022584:	4ba0      	ldr	r3, [pc, #640]	; (8022808 <calcularPesosMezclaGPS+0x2d4>)
 8022586:	781b      	ldrb	r3, [r3, #0]
 8022588:	2b00      	cmp	r3, #0
 802258a:	d004      	beq.n	8022596 <calcularPesosMezclaGPS+0x62>
        	fix++;
 802258c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8022590:	3301      	adds	r3, #1
 8022592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

        if (fix >= 2)
 8022596:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802259a:	2b01      	cmp	r3, #1
 802259c:	d809      	bhi.n	80225b2 <calcularPesosMezclaGPS+0x7e>
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 802259e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80225a2:	3301      	adds	r3, #1
 80225a4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80225a8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80225ac:	2b02      	cmp	r3, #2
 80225ae:	d9cb      	bls.n	8022548 <calcularPesosMezclaGPS+0x14>
 80225b0:	e000      	b.n	80225b4 <calcularPesosMezclaGPS+0x80>
            break;
 80225b2:	bf00      	nop
    }

    if (fix < 2)
 80225b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80225b8:	2b01      	cmp	r3, #1
 80225ba:	d801      	bhi.n	80225c0 <calcularPesosMezclaGPS+0x8c>
        return false;
 80225bc:	2300      	movs	r3, #0
 80225be:	e284      	b.n	8022aca <calcularPesosMezclaGPS+0x596>
    /*
     * Se utiliza el tiempo mas antiguo distinto de cero, pero si la diferencia de tiempo es
     * excesiva, se utiliza el mas nuevo para evitar que un receptor desconectado bloquee las
     * actualizaciones
     */
    uint32_t maxMs =  0;  // La hora de llegada mas reciente del sistema distinto de cero
 80225c0:	2300      	movs	r3, #0
 80225c2:	663b      	str	r3, [r7, #96]	; 0x60
    uint32_t minMs = -1;  // La hora de llegada mas antigua del sistema distinto de cero
 80225c4:	f04f 33ff 	mov.w	r3, #4294967295
 80225c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    int16_t maxPeriodoActMs = 0;
 80225ca:	2300      	movs	r3, #0
 80225cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80225d0:	2300      	movs	r3, #0
 80225d2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80225d6:	e054      	b.n	8022682 <calcularPesosMezclaGPS+0x14e>
    	gps_t *driver = &gps[i];
 80225d8:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80225dc:	4613      	mov	r3, r2
 80225de:	00db      	lsls	r3, r3, #3
 80225e0:	1a9b      	subs	r3, r3, r2
 80225e2:	011b      	lsls	r3, r3, #4
 80225e4:	4a87      	ldr	r2, [pc, #540]	; (8022804 <calcularPesosMezclaGPS+0x2d0>)
 80225e6:	4413      	add	r3, r2
 80225e8:	61fb      	str	r3, [r7, #28]

    	if (!driver->detectado || driver->estado.status <= NO_FIX || (configGPS(i)->auxiliar && !failsafeGPS))
 80225ea:	69fb      	ldr	r3, [r7, #28]
 80225ec:	7c1b      	ldrb	r3, [r3, #16]
 80225ee:	f083 0301 	eor.w	r3, r3, #1
 80225f2:	b2db      	uxtb	r3, r3
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d13e      	bne.n	8022676 <calcularPesosMezclaGPS+0x142>
 80225f8:	69fb      	ldr	r3, [r7, #28]
 80225fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80225fe:	2b01      	cmp	r3, #1
 8022600:	d939      	bls.n	8022676 <calcularPesosMezclaGPS+0x142>
 8022602:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8022606:	4618      	mov	r0, r3
 8022608:	f7ff fc74 	bl	8021ef4 <configGPS>
 802260c:	4603      	mov	r3, r0
 802260e:	785b      	ldrb	r3, [r3, #1]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d006      	beq.n	8022622 <calcularPesosMezclaGPS+0xee>
 8022614:	4b7c      	ldr	r3, [pc, #496]	; (8022808 <calcularPesosMezclaGPS+0x2d4>)
 8022616:	781b      	ldrb	r3, [r3, #0]
 8022618:	f083 0301 	eor.w	r3, r3, #1
 802261c:	b2db      	uxtb	r3, r3
 802261e:	2b00      	cmp	r3, #0
 8022620:	d129      	bne.n	8022676 <calcularPesosMezclaGPS+0x142>
            continue;

        if (driver->estado.ultimaHoraGPSms > maxMs)
 8022622:	69fb      	ldr	r3, [r7, #28]
 8022624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022628:	429a      	cmp	r2, r3
 802262a:	d202      	bcs.n	8022632 <calcularPesosMezclaGPS+0xfe>
        	maxMs = driver->estado.ultimaHoraGPSms;
 802262c:	69fb      	ldr	r3, [r7, #28]
 802262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022630:	663b      	str	r3, [r7, #96]	; 0x60

        if ((driver->estado.ultimaHoraGPSms < minMs) && (driver->estado.ultimaHoraGPSms > 0))
 8022632:	69fb      	ldr	r3, [r7, #28]
 8022634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022636:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8022638:	429a      	cmp	r2, r3
 802263a:	d906      	bls.n	802264a <calcularPesosMezclaGPS+0x116>
 802263c:	69fb      	ldr	r3, [r7, #28]
 802263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022640:	2b00      	cmp	r3, #0
 8022642:	d002      	beq.n	802264a <calcularPesosMezclaGPS+0x116>
        	minMs = driver->estado.ultimaHoraGPSms;
 8022644:	69fb      	ldr	r3, [r7, #28]
 8022646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022648:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (configGPS(i)->periodoMuestreo > maxPeriodoActMs)
 802264a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 802264e:	4618      	mov	r0, r3
 8022650:	f7ff fc50 	bl	8021ef4 <configGPS>
 8022654:	4603      	mov	r3, r0
 8022656:	891b      	ldrh	r3, [r3, #8]
 8022658:	461a      	mov	r2, r3
 802265a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 802265e:	429a      	cmp	r2, r3
 8022660:	dd0a      	ble.n	8022678 <calcularPesosMezclaGPS+0x144>
        	maxPeriodoActMs = configGPS(i)->periodoMuestreo;
 8022662:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8022666:	4618      	mov	r0, r3
 8022668:	f7ff fc44 	bl	8021ef4 <configGPS>
 802266c:	4603      	mov	r3, r0
 802266e:	891b      	ldrh	r3, [r3, #8]
 8022670:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8022674:	e000      	b.n	8022678 <calcularPesosMezclaGPS+0x144>
            continue;
 8022676:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022678:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 802267c:	3301      	adds	r3, #1
 802267e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8022682:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8022686:	2b02      	cmp	r3, #2
 8022688:	d9a6      	bls.n	80225d8 <calcularPesosMezclaGPS+0xa4>
    }

    // Demasiado retardo para mezclar medidas
    if ((int32_t)(maxMs - minMs) > (int32_t)(2 * maxPeriodoActMs))
 802268a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802268c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802268e:	1ad3      	subs	r3, r2, r3
 8022690:	461a      	mov	r2, r3
 8022692:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8022696:	005b      	lsls	r3, r3, #1
 8022698:	429a      	cmp	r2, r3
 802269a:	dd01      	ble.n	80226a0 <calcularPesosMezclaGPS+0x16c>
        return false;
 802269c:	2300      	movs	r3, #0
 802269e:	e214      	b.n	8022aca <calcularPesosMezclaGPS+0x596>

    // Se calcula la suma de cuadrados de la precision teniendo en cuenta la posicion
    float sumaCuadradosPos = 0;
 80226a0:	f04f 0300 	mov.w	r3, #0
 80226a4:	657b      	str	r3, [r7, #84]	; 0x54
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80226a6:	2300      	movs	r3, #0
 80226a8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80226ac:	e045      	b.n	802273a <calcularPesosMezclaGPS+0x206>
        gps_t *driver = &gps[i];
 80226ae:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80226b2:	4613      	mov	r3, r2
 80226b4:	00db      	lsls	r3, r3, #3
 80226b6:	1a9b      	subs	r3, r3, r2
 80226b8:	011b      	lsls	r3, r3, #4
 80226ba:	4a52      	ldr	r2, [pc, #328]	; (8022804 <calcularPesosMezclaGPS+0x2d0>)
 80226bc:	4413      	add	r3, r2
 80226be:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (driver->estado.status >= GPS_OK_FIX_2D && (!configGPS(i)->auxiliar || failsafeGPS)) {
 80226c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80226c6:	2b01      	cmp	r3, #1
 80226c8:	d932      	bls.n	8022730 <calcularPesosMezclaGPS+0x1fc>
 80226ca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80226ce:	4618      	mov	r0, r3
 80226d0:	f7ff fc10 	bl	8021ef4 <configGPS>
 80226d4:	4603      	mov	r3, r0
 80226d6:	785b      	ldrb	r3, [r3, #1]
 80226d8:	f083 0301 	eor.w	r3, r3, #1
 80226dc:	b2db      	uxtb	r3, r3
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d103      	bne.n	80226ea <calcularPesosMezclaGPS+0x1b6>
 80226e2:	4b49      	ldr	r3, [pc, #292]	; (8022808 <calcularPesosMezclaGPS+0x2d4>)
 80226e4:	781b      	ldrb	r3, [r3, #0]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d022      	beq.n	8022730 <calcularPesosMezclaGPS+0x1fc>
            if (driver->estado.tienePrecisionHorizontal && driver->estado.precisionHorizontal > 0)
 80226ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80226f0:	f003 0304 	and.w	r3, r3, #4
 80226f4:	b2db      	uxtb	r3, r3
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d016      	beq.n	8022728 <calcularPesosMezclaGPS+0x1f4>
 80226fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226fc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8022700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022708:	dd0e      	ble.n	8022728 <calcularPesosMezclaGPS+0x1f4>
                sumaCuadradosPos += driver->estado.precisionHorizontal * driver->estado.precisionHorizontal;
 802270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802270c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022712:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8022716:	ee67 7a27 	vmul.f32	s15, s14, s15
 802271a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 802271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022722:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8022726:	e003      	b.n	8022730 <calcularPesosMezclaGPS+0x1fc>
            else {
                sumaCuadradosPos = 0;
 8022728:	f04f 0300 	mov.w	r3, #0
 802272c:	657b      	str	r3, [r7, #84]	; 0x54
                break;
 802272e:	e008      	b.n	8022742 <calcularPesosMezclaGPS+0x20e>
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022730:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8022734:	3301      	adds	r3, #1
 8022736:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 802273a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 802273e:	2b02      	cmp	r3, #2
 8022740:	d9b5      	bls.n	80226ae <calcularPesosMezclaGPS+0x17a>
            }
        }
    }

    // Se calcula la suma de cuadrados de la precision teniendo en cuenta la velocidad
    float sumaCuadradosVel = 0;
 8022742:	f04f 0300 	mov.w	r3, #0
 8022746:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022748:	2300      	movs	r3, #0
 802274a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 802274e:	e045      	b.n	80227dc <calcularPesosMezclaGPS+0x2a8>
        gps_t *driver = &gps[i];
 8022750:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8022754:	4613      	mov	r3, r2
 8022756:	00db      	lsls	r3, r3, #3
 8022758:	1a9b      	subs	r3, r3, r2
 802275a:	011b      	lsls	r3, r3, #4
 802275c:	4a29      	ldr	r2, [pc, #164]	; (8022804 <calcularPesosMezclaGPS+0x2d0>)
 802275e:	4413      	add	r3, r2
 8022760:	62bb      	str	r3, [r7, #40]	; 0x28

        if (driver->estado.status >= GPS_OK_FIX_3D && (!configGPS(i)->auxiliar || failsafeGPS)) {
 8022762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022764:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022768:	2b02      	cmp	r3, #2
 802276a:	d932      	bls.n	80227d2 <calcularPesosMezclaGPS+0x29e>
 802276c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8022770:	4618      	mov	r0, r3
 8022772:	f7ff fbbf 	bl	8021ef4 <configGPS>
 8022776:	4603      	mov	r3, r0
 8022778:	785b      	ldrb	r3, [r3, #1]
 802277a:	f083 0301 	eor.w	r3, r3, #1
 802277e:	b2db      	uxtb	r3, r3
 8022780:	2b00      	cmp	r3, #0
 8022782:	d103      	bne.n	802278c <calcularPesosMezclaGPS+0x258>
 8022784:	4b20      	ldr	r3, [pc, #128]	; (8022808 <calcularPesosMezclaGPS+0x2d4>)
 8022786:	781b      	ldrb	r3, [r3, #0]
 8022788:	2b00      	cmp	r3, #0
 802278a:	d022      	beq.n	80227d2 <calcularPesosMezclaGPS+0x29e>
            if (driver->estado.tienePrecisionVel && driver->estado.precisionVel > 0)
 802278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802278e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022792:	f003 0302 	and.w	r3, r3, #2
 8022796:	b2db      	uxtb	r3, r3
 8022798:	2b00      	cmp	r3, #0
 802279a:	d016      	beq.n	80227ca <calcularPesosMezclaGPS+0x296>
 802279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802279e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80227a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80227a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227aa:	dd0e      	ble.n	80227ca <calcularPesosMezclaGPS+0x296>
            	sumaCuadradosVel += driver->estado.precisionVel * driver->estado.precisionVel;
 80227ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227ae:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80227b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80227b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80227bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80227c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80227c4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80227c8:	e003      	b.n	80227d2 <calcularPesosMezclaGPS+0x29e>
            else {
            	sumaCuadradosVel = 0;
 80227ca:	f04f 0300 	mov.w	r3, #0
 80227ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                break;
 80227d0:	e008      	b.n	80227e4 <calcularPesosMezclaGPS+0x2b0>
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80227d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80227d6:	3301      	adds	r3, #1
 80227d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80227dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80227e0:	2b02      	cmp	r3, #2
 80227e2:	d9b5      	bls.n	8022750 <calcularPesosMezclaGPS+0x21c>
            }
        }

    }

    if (sumaCuadradosPos == 0 && sumaCuadradosVel == 0)
 80227e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80227e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80227ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227f0:	d10c      	bne.n	802280c <calcularPesosMezclaGPS+0x2d8>
 80227f2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80227f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80227fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227fe:	d105      	bne.n	802280c <calcularPesosMezclaGPS+0x2d8>
        return false;
 8022800:	2300      	movs	r3, #0
 8022802:	e162      	b.n	8022aca <calcularPesosMezclaGPS+0x596>
 8022804:	2000b958 	.word	0x2000b958
 8022808:	2000bb00 	.word	0x2000bb00

    float sumaPesos = 0;
 802280c:	f04f 0300 	mov.w	r3, #0
 8022810:	647b      	str	r3, [r7, #68]	; 0x44

    // Calculo de los pesos de posicion
    float pesosPos[NUM_MAX_GPS];
    memset(pesosPos, 0, sizeof(pesosPos));
 8022812:	f107 0310 	add.w	r3, r7, #16
 8022816:	220c      	movs	r2, #12
 8022818:	2100      	movs	r1, #0
 802281a:	4618      	mov	r0, r3
 802281c:	f012 fd40 	bl	80352a0 <memset>

    if (sumaCuadradosPos > 0) {
 8022820:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8022824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802282c:	f340 808a 	ble.w	8022944 <calcularPesosMezclaGPS+0x410>
        float sumaPesosPos = 0;
 8022830:	f04f 0300 	mov.w	r3, #0
 8022834:	643b      	str	r3, [r7, #64]	; 0x40

        // Se calculan los pesos con la inversa de la varianza
        for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022836:	2300      	movs	r3, #0
 8022838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 802283c:	e04e      	b.n	80228dc <calcularPesosMezclaGPS+0x3a8>
        	gps_t *driver = &gps[i];
 802283e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8022842:	4613      	mov	r3, r2
 8022844:	00db      	lsls	r3, r3, #3
 8022846:	1a9b      	subs	r3, r3, r2
 8022848:	011b      	lsls	r3, r3, #4
 802284a:	4aa2      	ldr	r2, [pc, #648]	; (8022ad4 <calcularPesosMezclaGPS+0x5a0>)
 802284c:	4413      	add	r3, r2
 802284e:	627b      	str	r3, [r7, #36]	; 0x24

            if (driver->estado.status >= GPS_OK_FIX_2D && driver->estado.precisionHorizontal >= 0.001f && (!configGPS(i)->auxiliar || failsafeGPS)) {
 8022850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022852:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022856:	2b01      	cmp	r3, #1
 8022858:	d93b      	bls.n	80228d2 <calcularPesosMezclaGPS+0x39e>
 802285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802285c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8022860:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8022ad8 <calcularPesosMezclaGPS+0x5a4>
 8022864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802286c:	db31      	blt.n	80228d2 <calcularPesosMezclaGPS+0x39e>
 802286e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8022872:	4618      	mov	r0, r3
 8022874:	f7ff fb3e 	bl	8021ef4 <configGPS>
 8022878:	4603      	mov	r3, r0
 802287a:	785b      	ldrb	r3, [r3, #1]
 802287c:	f083 0301 	eor.w	r3, r3, #1
 8022880:	b2db      	uxtb	r3, r3
 8022882:	2b00      	cmp	r3, #0
 8022884:	d103      	bne.n	802288e <calcularPesosMezclaGPS+0x35a>
 8022886:	4b95      	ldr	r3, [pc, #596]	; (8022adc <calcularPesosMezclaGPS+0x5a8>)
 8022888:	781b      	ldrb	r3, [r3, #0]
 802288a:	2b00      	cmp	r3, #0
 802288c:	d021      	beq.n	80228d2 <calcularPesosMezclaGPS+0x39e>
            	pesosPos[i] = sumaCuadradosPos / (driver->estado.precisionHorizontal * driver->estado.precisionHorizontal);
 802288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022890:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022896:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 802289a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802289e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80228a2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80228a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80228aa:	009b      	lsls	r3, r3, #2
 80228ac:	3368      	adds	r3, #104	; 0x68
 80228ae:	443b      	add	r3, r7
 80228b0:	3b58      	subs	r3, #88	; 0x58
 80228b2:	edc3 7a00 	vstr	s15, [r3]
            	sumaPesosPos += pesosPos[i];
 80228b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80228ba:	009b      	lsls	r3, r3, #2
 80228bc:	3368      	adds	r3, #104	; 0x68
 80228be:	443b      	add	r3, r7
 80228c0:	3b58      	subs	r3, #88	; 0x58
 80228c2:	edd3 7a00 	vldr	s15, [r3]
 80228c6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80228ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80228ce:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 80228d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80228d6:	3301      	adds	r3, #1
 80228d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80228dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80228e0:	2b02      	cmp	r3, #2
 80228e2:	d9ac      	bls.n	802283e <calcularPesosMezclaGPS+0x30a>
            }
        }

        // Se normalizan los pesos
        if (sumaPesosPos > 0) {
 80228e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80228e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80228ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228f0:	dd28      	ble.n	8022944 <calcularPesosMezclaGPS+0x410>
            for (uint8_t i = 0; i < NUM_MAX_GPS; i++)
 80228f2:	2300      	movs	r3, #0
 80228f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80228f8:	e018      	b.n	802292c <calcularPesosMezclaGPS+0x3f8>
            	pesosPos[i] = pesosPos[i] / sumaPesosPos;
 80228fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80228fe:	009b      	lsls	r3, r3, #2
 8022900:	3368      	adds	r3, #104	; 0x68
 8022902:	443b      	add	r3, r7
 8022904:	3b58      	subs	r3, #88	; 0x58
 8022906:	edd3 6a00 	vldr	s13, [r3]
 802290a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 802290e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8022912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022916:	009b      	lsls	r3, r3, #2
 8022918:	3368      	adds	r3, #104	; 0x68
 802291a:	443b      	add	r3, r7
 802291c:	3b58      	subs	r3, #88	; 0x58
 802291e:	edc3 7a00 	vstr	s15, [r3]
            for (uint8_t i = 0; i < NUM_MAX_GPS; i++)
 8022922:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8022926:	3301      	adds	r3, #1
 8022928:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 802292c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8022930:	2b02      	cmp	r3, #2
 8022932:	d9e2      	bls.n	80228fa <calcularPesosMezclaGPS+0x3c6>

            sumaPesos += 1;
 8022934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8022938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802293c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022940:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        }
    }

    // Calculo de los pesos de velocidad
    float pesosVel[NUM_MAX_GPS];
    memset(pesosVel, 0, sizeof(pesosVel));
 8022944:	1d3b      	adds	r3, r7, #4
 8022946:	220c      	movs	r2, #12
 8022948:	2100      	movs	r1, #0
 802294a:	4618      	mov	r0, r3
 802294c:	f012 fca8 	bl	80352a0 <memset>

    if (sumaCuadradosVel > 0) {
 8022950:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8022954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802295c:	f340 808a 	ble.w	8022a74 <calcularPesosMezclaGPS+0x540>
        float sumaPesosVel = 0;
 8022960:	f04f 0300 	mov.w	r3, #0
 8022964:	63bb      	str	r3, [r7, #56]	; 0x38

        // Se calculan los pesos con la inversa de la varianza
        for (uint8_t i = 0; i< NUM_MAX_GPS; i++) {
 8022966:	2300      	movs	r3, #0
 8022968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802296c:	e04e      	b.n	8022a0c <calcularPesosMezclaGPS+0x4d8>
            gps_t *driver = &gps[i];
 802296e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8022972:	4613      	mov	r3, r2
 8022974:	00db      	lsls	r3, r3, #3
 8022976:	1a9b      	subs	r3, r3, r2
 8022978:	011b      	lsls	r3, r3, #4
 802297a:	4a56      	ldr	r2, [pc, #344]	; (8022ad4 <calcularPesosMezclaGPS+0x5a0>)
 802297c:	4413      	add	r3, r2
 802297e:	623b      	str	r3, [r7, #32]

            if (driver->estado.status >= GPS_OK_FIX_3D && driver->estado.precisionVel >= 0.001f && (!configGPS(i)->auxiliar || failsafeGPS)) {
 8022980:	6a3b      	ldr	r3, [r7, #32]
 8022982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022986:	2b02      	cmp	r3, #2
 8022988:	d93b      	bls.n	8022a02 <calcularPesosMezclaGPS+0x4ce>
 802298a:	6a3b      	ldr	r3, [r7, #32]
 802298c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8022990:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8022ad8 <calcularPesosMezclaGPS+0x5a4>
 8022994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802299c:	db31      	blt.n	8022a02 <calcularPesosMezclaGPS+0x4ce>
 802299e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80229a2:	4618      	mov	r0, r3
 80229a4:	f7ff faa6 	bl	8021ef4 <configGPS>
 80229a8:	4603      	mov	r3, r0
 80229aa:	785b      	ldrb	r3, [r3, #1]
 80229ac:	f083 0301 	eor.w	r3, r3, #1
 80229b0:	b2db      	uxtb	r3, r3
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d103      	bne.n	80229be <calcularPesosMezclaGPS+0x48a>
 80229b6:	4b49      	ldr	r3, [pc, #292]	; (8022adc <calcularPesosMezclaGPS+0x5a8>)
 80229b8:	781b      	ldrb	r3, [r3, #0]
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d021      	beq.n	8022a02 <calcularPesosMezclaGPS+0x4ce>
            	pesosVel[i] = sumaCuadradosVel / (driver->estado.precisionVel * driver->estado.precisionVel);
 80229be:	6a3b      	ldr	r3, [r7, #32]
 80229c0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80229c4:	6a3b      	ldr	r3, [r7, #32]
 80229c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80229ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80229ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80229d2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80229d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80229da:	009b      	lsls	r3, r3, #2
 80229dc:	3368      	adds	r3, #104	; 0x68
 80229de:	443b      	add	r3, r7
 80229e0:	3b64      	subs	r3, #100	; 0x64
 80229e2:	edc3 7a00 	vstr	s15, [r3]
            	sumaPesosVel += pesosVel[i];
 80229e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80229ea:	009b      	lsls	r3, r3, #2
 80229ec:	3368      	adds	r3, #104	; 0x68
 80229ee:	443b      	add	r3, r7
 80229f0:	3b64      	subs	r3, #100	; 0x64
 80229f2:	edd3 7a00 	vldr	s15, [r3]
 80229f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80229fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80229fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        for (uint8_t i = 0; i< NUM_MAX_GPS; i++) {
 8022a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022a06:	3301      	adds	r3, #1
 8022a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8022a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022a10:	2b02      	cmp	r3, #2
 8022a12:	d9ac      	bls.n	802296e <calcularPesosMezclaGPS+0x43a>
            }
        }

        // Se normalizan los pesos
        if (sumaPesosVel > 0) {
 8022a14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8022a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a20:	dd28      	ble.n	8022a74 <calcularPesosMezclaGPS+0x540>
            for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022a22:	2300      	movs	r3, #0
 8022a24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8022a28:	e018      	b.n	8022a5c <calcularPesosMezclaGPS+0x528>
            	pesosVel[i] = pesosVel[i] / sumaPesosVel;
 8022a2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8022a2e:	009b      	lsls	r3, r3, #2
 8022a30:	3368      	adds	r3, #104	; 0x68
 8022a32:	443b      	add	r3, r7
 8022a34:	3b64      	subs	r3, #100	; 0x64
 8022a36:	edd3 6a00 	vldr	s13, [r3]
 8022a3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8022a3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8022a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022a46:	009b      	lsls	r3, r3, #2
 8022a48:	3368      	adds	r3, #104	; 0x68
 8022a4a:	443b      	add	r3, r7
 8022a4c:	3b64      	subs	r3, #100	; 0x64
 8022a4e:	edc3 7a00 	vstr	s15, [r3]
            for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022a52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8022a56:	3301      	adds	r3, #1
 8022a58:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8022a5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8022a60:	2b02      	cmp	r3, #2
 8022a62:	d9e2      	bls.n	8022a2a <calcularPesosMezclaGPS+0x4f6>
            }
            sumaPesos += 1;
 8022a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8022a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        }
    }

    // Calculo final de los pesos
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++)
 8022a74:	2300      	movs	r3, #0
 8022a76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8022a7a:	e021      	b.n	8022ac0 <calcularPesosMezclaGPS+0x58c>
    	pesosGPS[i] = (pesosPos[i] + pesosVel[i]) / sumaPesos;
 8022a7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8022a80:	009b      	lsls	r3, r3, #2
 8022a82:	3368      	adds	r3, #104	; 0x68
 8022a84:	443b      	add	r3, r7
 8022a86:	3b58      	subs	r3, #88	; 0x58
 8022a88:	ed93 7a00 	vldr	s14, [r3]
 8022a8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8022a90:	009b      	lsls	r3, r3, #2
 8022a92:	3368      	adds	r3, #104	; 0x68
 8022a94:	443b      	add	r3, r7
 8022a96:	3b64      	subs	r3, #100	; 0x64
 8022a98:	edd3 7a00 	vldr	s15, [r3]
 8022a9c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8022aa0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8022aa4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8022aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022aac:	4a0c      	ldr	r2, [pc, #48]	; (8022ae0 <calcularPesosMezclaGPS+0x5ac>)
 8022aae:	009b      	lsls	r3, r3, #2
 8022ab0:	4413      	add	r3, r2
 8022ab2:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++)
 8022ab6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8022aba:	3301      	adds	r3, #1
 8022abc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8022ac0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8022ac4:	2b02      	cmp	r3, #2
 8022ac6:	d9d9      	bls.n	8022a7c <calcularPesosMezclaGPS+0x548>

    return true;
 8022ac8:	2301      	movs	r3, #1
}
 8022aca:	4618      	mov	r0, r3
 8022acc:	3768      	adds	r7, #104	; 0x68
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	bd80      	pop	{r7, pc}
 8022ad2:	bf00      	nop
 8022ad4:	2000b958 	.word	0x2000b958
 8022ad8:	3a83126f 	.word	0x3a83126f
 8022adc:	2000bb00 	.word	0x2000bb00
 8022ae0:	2000baf4 	.word	0x2000baf4
 8022ae4:	00000000 	.word	0x00000000

08022ae8 <mezclarMedidasGPS>:
**  Descripcion:    Mezcla las medidas de los sensores en uno general
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void mezclarMedidasGPS(void)
{
 8022ae8:	b5b0      	push	{r4, r5, r7, lr}
 8022aea:	b092      	sub	sp, #72	; 0x48
 8022aec:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022aee:	2300      	movs	r3, #0
 8022af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8022af4:	e119      	b.n	8022d2a <mezclarMedidasGPS+0x242>
        gps_t *driver = &gps[i];
 8022af6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8022afa:	4613      	mov	r3, r2
 8022afc:	00db      	lsls	r3, r3, #3
 8022afe:	1a9b      	subs	r3, r3, r2
 8022b00:	011b      	lsls	r3, r3, #4
 8022b02:	4ab1      	ldr	r2, [pc, #708]	; (8022dc8 <mezclarMedidasGPS+0x2e0>)
 8022b04:	4413      	add	r3, r2
 8022b06:	61bb      	str	r3, [r7, #24]

        if (configGPS(i)->auxiliar && !failsafeGPS)
 8022b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022b0c:	4618      	mov	r0, r3
 8022b0e:	f7ff f9f1 	bl	8021ef4 <configGPS>
 8022b12:	4603      	mov	r3, r0
 8022b14:	785b      	ldrb	r3, [r3, #1]
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	d007      	beq.n	8022b2a <mezclarMedidasGPS+0x42>
 8022b1a:	4bac      	ldr	r3, [pc, #688]	; (8022dcc <mezclarMedidasGPS+0x2e4>)
 8022b1c:	781b      	ldrb	r3, [r3, #0]
 8022b1e:	f083 0301 	eor.w	r3, r3, #1
 8022b22:	b2db      	uxtb	r3, r3
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	f040 80fa 	bne.w	8022d1e <mezclarMedidasGPS+0x236>
        	continue;

        gpsGen.operativo = true;
 8022b2a:	4ba9      	ldr	r3, [pc, #676]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b2c:	2201      	movs	r2, #1
 8022b2e:	701a      	strb	r2, [r3, #0]

        if (driver->estado.status > gpsGen.estado.status)
 8022b30:	69bb      	ldr	r3, [r7, #24]
 8022b32:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8022b36:	4ba6      	ldr	r3, [pc, #664]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b38:	795b      	ldrb	r3, [r3, #5]
 8022b3a:	429a      	cmp	r2, r3
 8022b3c:	d904      	bls.n	8022b48 <mezclarMedidasGPS+0x60>
            gpsGen.estado.status = driver->estado.status;
 8022b3e:	69bb      	ldr	r3, [r7, #24]
 8022b40:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8022b44:	4ba2      	ldr	r3, [pc, #648]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b46:	715a      	strb	r2, [r3, #5]

        if (driver->estado.tienePrecisionHorizontal && driver->estado.precisionHorizontal > 0 && driver->estado.precisionHorizontal < gpsGen.estado.precisionHorizontal) {
 8022b48:	69bb      	ldr	r3, [r7, #24]
 8022b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022b4e:	f003 0304 	and.w	r3, r3, #4
 8022b52:	b2db      	uxtb	r3, r3
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d01d      	beq.n	8022b94 <mezclarMedidasGPS+0xac>
 8022b58:	69bb      	ldr	r3, [r7, #24]
 8022b5a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8022b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b66:	dd15      	ble.n	8022b94 <mezclarMedidasGPS+0xac>
 8022b68:	69bb      	ldr	r3, [r7, #24]
 8022b6a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022b6e:	4b98      	ldr	r3, [pc, #608]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8022b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b7c:	d50a      	bpl.n	8022b94 <mezclarMedidasGPS+0xac>
            gpsGen.estado.tienePrecisionHorizontal = true;
 8022b7e:	4a94      	ldr	r2, [pc, #592]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b80:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022b84:	f043 0304 	orr.w	r3, r3, #4
 8022b88:	f882 3020 	strb.w	r3, [r2, #32]
            gpsGen.estado.precisionHorizontal = driver->estado.precisionHorizontal;
 8022b8c:	69bb      	ldr	r3, [r7, #24]
 8022b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b90:	4a8f      	ldr	r2, [pc, #572]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022b92:	6193      	str	r3, [r2, #24]
        }

        if (driver->estado.tienePrecisionVertical && driver->estado.precisionVertical > 0 && driver->estado.precisionVertical < gpsGen.estado.precisionVertical) {
 8022b94:	69bb      	ldr	r3, [r7, #24]
 8022b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022b9a:	f003 0308 	and.w	r3, r3, #8
 8022b9e:	b2db      	uxtb	r3, r3
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d01d      	beq.n	8022be0 <mezclarMedidasGPS+0xf8>
 8022ba4:	69bb      	ldr	r3, [r7, #24]
 8022ba6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8022baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bb2:	dd15      	ble.n	8022be0 <mezclarMedidasGPS+0xf8>
 8022bb4:	69bb      	ldr	r3, [r7, #24]
 8022bb6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8022bba:	4b85      	ldr	r3, [pc, #532]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022bbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8022bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bc8:	d50a      	bpl.n	8022be0 <mezclarMedidasGPS+0xf8>
    	    gpsGen.estado.tienePrecisionVertical = true;
 8022bca:	4a81      	ldr	r2, [pc, #516]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022bcc:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022bd0:	f043 0308 	orr.w	r3, r3, #8
 8022bd4:	f882 3020 	strb.w	r3, [r2, #32]
    	    gpsGen.estado.precisionVertical = driver->estado.precisionVertical;
 8022bd8:	69bb      	ldr	r3, [r7, #24]
 8022bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bdc:	4a7c      	ldr	r2, [pc, #496]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022bde:	61d3      	str	r3, [r2, #28]
        }

        if (driver->estado.tieneVelVertical)
 8022be0:	69bb      	ldr	r3, [r7, #24]
 8022be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022be6:	f003 0301 	and.w	r3, r3, #1
 8022bea:	b2db      	uxtb	r3, r3
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	d006      	beq.n	8022bfe <mezclarMedidasGPS+0x116>
    	    gpsGen.estado.tieneVelVertical = true;
 8022bf0:	4a77      	ldr	r2, [pc, #476]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022bf2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022bf6:	f043 0301 	orr.w	r3, r3, #1
 8022bfa:	f882 3020 	strb.w	r3, [r2, #32]

        if (driver->estado.tienePrecisionVel && driver->estado.precisionVel > 0 && driver->estado.precisionVel < gpsGen.estado.precisionVel) {
 8022bfe:	69bb      	ldr	r3, [r7, #24]
 8022c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022c04:	f003 0302 	and.w	r3, r3, #2
 8022c08:	b2db      	uxtb	r3, r3
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	d01d      	beq.n	8022c4a <mezclarMedidasGPS+0x162>
 8022c0e:	69bb      	ldr	r3, [r7, #24]
 8022c10:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8022c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c1c:	dd15      	ble.n	8022c4a <mezclarMedidasGPS+0x162>
 8022c1e:	69bb      	ldr	r3, [r7, #24]
 8022c20:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8022c24:	4b6a      	ldr	r3, [pc, #424]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8022c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c32:	d50a      	bpl.n	8022c4a <mezclarMedidasGPS+0x162>
    	    gpsGen.estado.tienePrecisionVel = true;
 8022c34:	4a66      	ldr	r2, [pc, #408]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c36:	f892 3020 	ldrb.w	r3, [r2, #32]
 8022c3a:	f043 0302 	orr.w	r3, r3, #2
 8022c3e:	f882 3020 	strb.w	r3, [r2, #32]
    	    gpsGen.estado.precisionVel = gpsGen.estado.precisionVel;
 8022c42:	4b63      	ldr	r3, [pc, #396]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c44:	695b      	ldr	r3, [r3, #20]
 8022c46:	4a62      	ldr	r2, [pc, #392]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c48:	6153      	str	r3, [r2, #20]
        }

        if (driver->estado.hdop > 0 && driver->estado.hdop < gpsGen.estado.hdop)
 8022c4a:	69bb      	ldr	r3, [r7, #24]
 8022c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d009      	beq.n	8022c66 <mezclarMedidasGPS+0x17e>
 8022c52:	69bb      	ldr	r3, [r7, #24]
 8022c54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8022c56:	4b5e      	ldr	r3, [pc, #376]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c58:	89db      	ldrh	r3, [r3, #14]
 8022c5a:	429a      	cmp	r2, r3
 8022c5c:	d203      	bcs.n	8022c66 <mezclarMedidasGPS+0x17e>
    	    gpsGen.estado.hdop = driver->estado.hdop;
 8022c5e:	69bb      	ldr	r3, [r7, #24]
 8022c60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8022c62:	4b5b      	ldr	r3, [pc, #364]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c64:	81da      	strh	r2, [r3, #14]

        if (driver->estado.vdop > 0 && driver->estado.vdop < gpsGen.estado.vdop)
 8022c66:	69bb      	ldr	r3, [r7, #24]
 8022c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d009      	beq.n	8022c82 <mezclarMedidasGPS+0x19a>
 8022c6e:	69bb      	ldr	r3, [r7, #24]
 8022c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022c72:	4b57      	ldr	r3, [pc, #348]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c74:	8a1b      	ldrh	r3, [r3, #16]
 8022c76:	429a      	cmp	r2, r3
 8022c78:	d203      	bcs.n	8022c82 <mezclarMedidasGPS+0x19a>
    	    gpsGen.estado.vdop = driver->estado.vdop;
 8022c7a:	69bb      	ldr	r3, [r7, #24]
 8022c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022c7e:	4b54      	ldr	r3, [pc, #336]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c80:	821a      	strh	r2, [r3, #16]

        if (driver->estado.numSats > 0 && driver->estado.numSats > gpsGen.estado.numSats)
 8022c82:	69bb      	ldr	r3, [r7, #24]
 8022c84:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8022c88:	2b00      	cmp	r3, #0
 8022c8a:	d00b      	beq.n	8022ca4 <mezclarMedidasGPS+0x1bc>
 8022c8c:	69bb      	ldr	r3, [r7, #24]
 8022c8e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8022c92:	4b4f      	ldr	r3, [pc, #316]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022c94:	7c9b      	ldrb	r3, [r3, #18]
 8022c96:	429a      	cmp	r2, r3
 8022c98:	d904      	bls.n	8022ca4 <mezclarMedidasGPS+0x1bc>
    	    gpsGen.estado.numSats = driver->estado.numSats;
 8022c9a:	69bb      	ldr	r3, [r7, #24]
 8022c9c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8022ca0:	4b4b      	ldr	r3, [pc, #300]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022ca2:	749a      	strb	r2, [r3, #18]

        gpsGen.velocidad.norte += driver->velocidad.norte * pesosGPS[i];
 8022ca4:	4b4a      	ldr	r3, [pc, #296]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022ca6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022caa:	69bb      	ldr	r3, [r7, #24]
 8022cac:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8022cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022cb4:	4a47      	ldr	r2, [pc, #284]	; (8022dd4 <mezclarMedidasGPS+0x2ec>)
 8022cb6:	009b      	lsls	r3, r3, #2
 8022cb8:	4413      	add	r3, r2
 8022cba:	edd3 7a00 	vldr	s15, [r3]
 8022cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022cc6:	4b42      	ldr	r3, [pc, #264]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022cc8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gpsGen.velocidad.este += driver->velocidad.este * pesosGPS[i];
 8022ccc:	4b40      	ldr	r3, [pc, #256]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022cce:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8022cd2:	69bb      	ldr	r3, [r7, #24]
 8022cd4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8022cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022cdc:	4a3d      	ldr	r2, [pc, #244]	; (8022dd4 <mezclarMedidasGPS+0x2ec>)
 8022cde:	009b      	lsls	r3, r3, #2
 8022ce0:	4413      	add	r3, r2
 8022ce2:	edd3 7a00 	vldr	s15, [r3]
 8022ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022cee:	4b38      	ldr	r3, [pc, #224]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022cf0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        gpsGen.velocidad.vertical += driver->velocidad.vertical * pesosGPS[i];
 8022cf4:	4b36      	ldr	r3, [pc, #216]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022cf6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8022cfa:	69bb      	ldr	r3, [r7, #24]
 8022cfc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8022d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022d04:	4a33      	ldr	r2, [pc, #204]	; (8022dd4 <mezclarMedidasGPS+0x2ec>)
 8022d06:	009b      	lsls	r3, r3, #2
 8022d08:	4413      	add	r3, r2
 8022d0a:	edd3 7a00 	vldr	s15, [r3]
 8022d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022d16:	4b2e      	ldr	r3, [pc, #184]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022d18:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8022d1c:	e000      	b.n	8022d20 <mezclarMedidasGPS+0x238>
        	continue;
 8022d1e:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022d24:	3301      	adds	r3, #1
 8022d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8022d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022d2e:	2b02      	cmp	r3, #2
 8022d30:	f67f aee1 	bls.w	8022af6 <mezclarMedidasGPS+0xe>
    }

    float mejorPeso = 0;
 8022d34:	f04f 0300 	mov.w	r3, #0
 8022d38:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t mejorIndice = 0;
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022d40:	2300      	movs	r3, #0
 8022d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022d46:	e02d      	b.n	8022da4 <mezclarMedidasGPS+0x2bc>
        gps_t *driver = &gps[i];
 8022d48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8022d4c:	4613      	mov	r3, r2
 8022d4e:	00db      	lsls	r3, r3, #3
 8022d50:	1a9b      	subs	r3, r3, r2
 8022d52:	011b      	lsls	r3, r3, #4
 8022d54:	4a1c      	ldr	r2, [pc, #112]	; (8022dc8 <mezclarMedidasGPS+0x2e0>)
 8022d56:	4413      	add	r3, r2
 8022d58:	61fb      	str	r3, [r7, #28]

        if (pesosGPS[i] > mejorPeso) {
 8022d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d5e:	4a1d      	ldr	r2, [pc, #116]	; (8022dd4 <mezclarMedidasGPS+0x2ec>)
 8022d60:	009b      	lsls	r3, r3, #2
 8022d62:	4413      	add	r3, r2
 8022d64:	edd3 7a00 	vldr	s15, [r3]
 8022d68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8022d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d74:	d511      	bpl.n	8022d9a <mezclarMedidasGPS+0x2b2>
    	    mejorPeso = pesosGPS[i];
 8022d76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d7a:	4a16      	ldr	r2, [pc, #88]	; (8022dd4 <mezclarMedidasGPS+0x2ec>)
 8022d7c:	009b      	lsls	r3, r3, #2
 8022d7e:	4413      	add	r3, r2
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	633b      	str	r3, [r7, #48]	; 0x30
            mejorIndice = i;
 8022d84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            gpsGen.localizacion = driver->localizacion;
 8022d8c:	4b10      	ldr	r3, [pc, #64]	; (8022dd0 <mezclarMedidasGPS+0x2e8>)
 8022d8e:	69fa      	ldr	r2, [r7, #28]
 8022d90:	3328      	adds	r3, #40	; 0x28
 8022d92:	3244      	adds	r2, #68	; 0x44
 8022d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8022d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022d9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d9e:	3301      	adds	r3, #1
 8022da0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022da4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022da8:	2b02      	cmp	r3, #2
 8022daa:	d9cd      	bls.n	8022d48 <mezclarMedidasGPS+0x260>
        }
    }

    float offsetNE[2] = {0, 0};
 8022dac:	f04f 0300 	mov.w	r3, #0
 8022db0:	613b      	str	r3, [r7, #16]
 8022db2:	f04f 0300 	mov.w	r3, #0
 8022db6:	617b      	str	r3, [r7, #20]
    float offsetAlt = 0.0f;
 8022db8:	f04f 0300 	mov.w	r3, #0
 8022dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022dc4:	e073      	b.n	8022eae <mezclarMedidasGPS+0x3c6>
 8022dc6:	bf00      	nop
 8022dc8:	2000b958 	.word	0x2000b958
 8022dcc:	2000bb00 	.word	0x2000bb00
 8022dd0:	2000baa8 	.word	0x2000baa8
 8022dd4:	2000baf4 	.word	0x2000baf4
        gps_t *driver = &gps[i];
 8022dd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022ddc:	4613      	mov	r3, r2
 8022dde:	00db      	lsls	r3, r3, #3
 8022de0:	1a9b      	subs	r3, r3, r2
 8022de2:	011b      	lsls	r3, r3, #4
 8022de4:	4a58      	ldr	r2, [pc, #352]	; (8022f48 <mezclarMedidasGPS+0x460>)
 8022de6:	4413      	add	r3, r2
 8022de8:	623b      	str	r3, [r7, #32]

        if (pesosGPS[i] > 0 && i != mejorIndice) {
 8022dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022dee:	4a57      	ldr	r2, [pc, #348]	; (8022f4c <mezclarMedidasGPS+0x464>)
 8022df0:	009b      	lsls	r3, r3, #2
 8022df2:	4413      	add	r3, r2
 8022df4:	edd3 7a00 	vldr	s15, [r3]
 8022df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e00:	dd50      	ble.n	8022ea4 <mezclarMedidasGPS+0x3bc>
 8022e02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022e0a:	429a      	cmp	r2, r3
 8022e0c:	d04a      	beq.n	8022ea4 <mezclarMedidasGPS+0x3bc>
    	    float distNE[2];

            distanciaNE(gpsGen.localizacion, driver->localizacion, distNE);
 8022e0e:	6a3b      	ldr	r3, [r7, #32]
 8022e10:	4d4f      	ldr	r5, [pc, #316]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022e12:	463a      	mov	r2, r7
 8022e14:	9202      	str	r2, [sp, #8]
 8022e16:	466c      	mov	r4, sp
 8022e18:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8022e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022e20:	e884 0003 	stmia.w	r4, {r0, r1}
 8022e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022e26:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8022e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8022e2c:	f7f0 fafc 	bl	8013428 <distanciaNE>
            offsetNE[0] += distNE[0] * pesosGPS[i];
 8022e30:	ed97 7a04 	vldr	s14, [r7, #16]
 8022e34:	edd7 6a00 	vldr	s13, [r7]
 8022e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022e3c:	4a43      	ldr	r2, [pc, #268]	; (8022f4c <mezclarMedidasGPS+0x464>)
 8022e3e:	009b      	lsls	r3, r3, #2
 8022e40:	4413      	add	r3, r2
 8022e42:	edd3 7a00 	vldr	s15, [r3]
 8022e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022e4e:	edc7 7a04 	vstr	s15, [r7, #16]
            offsetNE[1] += distNE[1] * pesosGPS[i];
 8022e52:	ed97 7a05 	vldr	s14, [r7, #20]
 8022e56:	edd7 6a01 	vldr	s13, [r7, #4]
 8022e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022e5e:	4a3b      	ldr	r2, [pc, #236]	; (8022f4c <mezclarMedidasGPS+0x464>)
 8022e60:	009b      	lsls	r3, r3, #2
 8022e62:	4413      	add	r3, r2
 8022e64:	edd3 7a00 	vldr	s15, [r3]
 8022e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022e70:	edc7 7a05 	vstr	s15, [r7, #20]
            offsetAlt += (float)(driver->localizacion.altitud - gpsGen.localizacion.altitud) * pesosGPS[i];
 8022e74:	6a3b      	ldr	r3, [r7, #32]
 8022e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022e78:	4b35      	ldr	r3, [pc, #212]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e7c:	1ad3      	subs	r3, r2, r3
 8022e7e:	ee07 3a90 	vmov	s15, r3
 8022e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022e8a:	4a30      	ldr	r2, [pc, #192]	; (8022f4c <mezclarMedidasGPS+0x464>)
 8022e8c:	009b      	lsls	r3, r3, #2
 8022e8e:	4413      	add	r3, r2
 8022e90:	edd3 7a00 	vldr	s15, [r3]
 8022e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022e98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8022e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022ea0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022ea8:	3301      	adds	r3, #1
 8022eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022eb2:	2b02      	cmp	r3, #2
 8022eb4:	d990      	bls.n	8022dd8 <mezclarMedidasGPS+0x2f0>
        }
    }

    anadirOffsetLoc(offsetNE[0], offsetNE[1], offsetAlt, &gpsGen.localizacion);
 8022eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8022eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8022ebe:	4825      	ldr	r0, [pc, #148]	; (8022f54 <mezclarMedidasGPS+0x46c>)
 8022ec0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8022ec4:	eef0 0a47 	vmov.f32	s1, s14
 8022ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8022ecc:	f7f0 faec 	bl	80134a8 <anadirOffsetLoc>

    float vector[2] = {gpsGen.velocidad.norte, gpsGen.velocidad.este};
 8022ed0:	4b1f      	ldr	r3, [pc, #124]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022ed4:	60bb      	str	r3, [r7, #8]
 8022ed6:	4b1e      	ldr	r3, [pc, #120]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022eda:	60fb      	str	r3, [r7, #12]
    gpsGen.vel2d = moduloVector2(vector);
 8022edc:	f107 0308 	add.w	r3, r7, #8
 8022ee0:	4618      	mov	r0, r3
 8022ee2:	f7f0 fbc5 	bl	8013670 <moduloVector2>
 8022ee6:	eef0 7a40 	vmov.f32	s15, s0
 8022eea:	4b19      	ldr	r3, [pc, #100]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022eec:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    gpsGen.velAngular = envolverInt360(grados(atan2f(gpsGen.velocidad.este, gpsGen.velocidad.norte)), 1);
 8022ef0:	4b17      	ldr	r3, [pc, #92]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022ef2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8022ef6:	4b16      	ldr	r3, [pc, #88]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022ef8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022efc:	eef0 0a47 	vmov.f32	s1, s14
 8022f00:	eeb0 0a67 	vmov.f32	s0, s15
 8022f04:	f016 f990 	bl	8039228 <atan2f>
 8022f08:	eef0 7a40 	vmov.f32	s15, s0
 8022f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8022f10:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8022f40 <mezclarMedidasGPS+0x458>
 8022f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022f18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022f1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022f20:	ee17 0a90 	vmov	r0, s15
 8022f24:	f7f0 fc10 	bl	8013748 <envolverInt360>
 8022f28:	eef0 7a40 	vmov.f32	s15, s0
 8022f2c:	4b08      	ldr	r3, [pc, #32]	; (8022f50 <mezclarMedidasGPS+0x468>)
 8022f2e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8022f32:	bf00      	nop
 8022f34:	3738      	adds	r7, #56	; 0x38
 8022f36:	46bd      	mov	sp, r7
 8022f38:	bdb0      	pop	{r4, r5, r7, pc}
 8022f3a:	bf00      	nop
 8022f3c:	f3af 8000 	nop.w
 8022f40:	1a63c1f8 	.word	0x1a63c1f8
 8022f44:	404ca5dc 	.word	0x404ca5dc
 8022f48:	2000b958 	.word	0x2000b958
 8022f4c:	2000baf4 	.word	0x2000baf4
 8022f50:	2000baa8 	.word	0x2000baa8
 8022f54:	2000bad0 	.word	0x2000bad0

08022f58 <leerGPS>:
**  Descripcion:    Lee los datos de los GPS
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerGPS(uint32_t tiempoActual)
{
 8022f58:	b580      	push	{r7, lr}
 8022f5a:	b084      	sub	sp, #16
 8022f5c:	af00      	add	r7, sp, #0
 8022f5e:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022f60:	2300      	movs	r3, #0
 8022f62:	73fb      	strb	r3, [r7, #15]
 8022f64:	e00d      	b.n	8022f82 <leerGPS+0x2a>
    	gps_t *driver = &gps[i];
 8022f66:	7bfa      	ldrb	r2, [r7, #15]
 8022f68:	4613      	mov	r3, r2
 8022f6a:	00db      	lsls	r3, r3, #3
 8022f6c:	1a9b      	subs	r3, r3, r2
 8022f6e:	011b      	lsls	r3, r3, #4
 8022f70:	4a0c      	ldr	r2, [pc, #48]	; (8022fa4 <leerGPS+0x4c>)
 8022f72:	4413      	add	r3, r2
 8022f74:	60bb      	str	r3, [r7, #8]

        leerDriverGPS(driver);
 8022f76:	68b8      	ldr	r0, [r7, #8]
 8022f78:	f000 f818 	bl	8022fac <leerDriverGPS>
    for (uint8_t i = 0; i < NUM_MAX_GPS; i++) {
 8022f7c:	7bfb      	ldrb	r3, [r7, #15]
 8022f7e:	3301      	adds	r3, #1
 8022f80:	73fb      	strb	r3, [r7, #15]
 8022f82:	7bfb      	ldrb	r3, [r7, #15]
 8022f84:	2b02      	cmp	r3, #2
 8022f86:	d9ee      	bls.n	8022f66 <leerGPS+0xe>
    }

    actualizarFailsafeGPS();
 8022f88:	f7ff f9b4 	bl	80222f4 <actualizarFailsafeGPS>

    if (cntGPSconectados > 0)
 8022f8c:	4b06      	ldr	r3, [pc, #24]	; (8022fa8 <leerGPS+0x50>)
 8022f8e:	781b      	ldrb	r3, [r3, #0]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d002      	beq.n	8022f9a <leerGPS+0x42>
        calcularGPSgen(MEZCLADO_MEDIDAS_GPS);
 8022f94:	2001      	movs	r0, #1
 8022f96:	f7ff f9e5 	bl	8022364 <calcularGPSgen>
}
 8022f9a:	bf00      	nop
 8022f9c:	3710      	adds	r7, #16
 8022f9e:	46bd      	mov	sp, r7
 8022fa0:	bd80      	pop	{r7, pc}
 8022fa2:	bf00      	nop
 8022fa4:	2000b958 	.word	0x2000b958
 8022fa8:	2000baf0 	.word	0x2000baf0

08022fac <leerDriverGPS>:
**  Descripcion:    Lee los datos de un GPS
**  Parametros:     GPS a leer
**  Retorno:        Ninguno
****************************************************************************************/
void leerDriverGPS(gps_t *dGPS)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b084      	sub	sp, #16
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	6078      	str	r0, [r7, #4]
    if (dGPS->estado.necesitaReiniciar == true || dGPS->estado.status == NO_GPS) {
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d104      	bne.n	8022fc8 <leerDriverGPS+0x1c>
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d108      	bne.n	8022fda <leerDriverGPS+0x2e>
        // Reiniciamos el gps
        if (!detectarGPS(dGPS))
 8022fc8:	6878      	ldr	r0, [r7, #4]
 8022fca:	f7ff f843 	bl	8022054 <detectarGPS>
 8022fce:	4603      	mov	r3, r0
 8022fd0:	f083 0301 	eor.w	r3, r3, #1
 8022fd4:	b2db      	uxtb	r3, r3
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	d152      	bne.n	8023080 <leerDriverGPS+0xd4>
            return;
    }

    bool resultado = leerGPSublox(dGPS);
 8022fda:	6878      	ldr	r0, [r7, #4]
 8022fdc:	f000 fbe4 	bl	80237a8 <leerGPSublox>
 8022fe0:	4603      	mov	r3, r0
 8022fe2:	73fb      	strb	r3, [r7, #15]
    uint32_t tiempo = millis();
 8022fe4:	f7f4 fdb6 	bl	8017b54 <millis>
 8022fe8:	60b8      	str	r0, [r7, #8]

    // Si no recibimos un mensaje dentro del timeout, reiniciamos el GPS
    if (!resultado) {
 8022fea:	7bfb      	ldrb	r3, [r7, #15]
 8022fec:	f083 0301 	eor.w	r3, r3, #1
 8022ff0:	b2db      	uxtb	r3, r3
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d02e      	beq.n	8023054 <leerDriverGPS+0xa8>
        if (tiempo - dGPS->timing.ultimoMensajeMs > TIMEOUT_MS_GPS) {
 8022ff6:	687b      	ldr	r3, [r7, #4]
 8022ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022ffa:	68ba      	ldr	r2, [r7, #8]
 8022ffc:	1ad3      	subs	r3, r2, r3
 8022ffe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8023002:	d93e      	bls.n	8023082 <leerDriverGPS+0xd6>
        	dGPS->detectado = false;
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	2200      	movs	r2, #0
 8023008:	741a      	strb	r2, [r3, #16]
        	dGPS->estado.necesitaReiniciar = true;
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	2201      	movs	r2, #1
 802300e:	f883 2020 	strb.w	r2, [r3, #32]
            memset(&dGPS->estado, 0, sizeof(dGPS->estado));
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	3320      	adds	r3, #32
 8023016:	2224      	movs	r2, #36	; 0x24
 8023018:	2100      	movs	r1, #0
 802301a:	4618      	mov	r0, r3
 802301c:	f012 f940 	bl	80352a0 <memset>
            dGPS->estado.status = NO_GPS;
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	2200      	movs	r2, #0
 8023024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            dGPS->estado.hdop = DOP_DESCONOCIDO_GPS;
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802302e:	855a      	strh	r2, [r3, #42]	; 0x2a
            dGPS->estado.vdop = DOP_DESCONOCIDO_GPS;
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023036:	859a      	strh	r2, [r3, #44]	; 0x2c
            dGPS->timing.ultimoMensajeMs = tiempo;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	68ba      	ldr	r2, [r7, #8]
 802303c:	669a      	str	r2, [r3, #104]	; 0x68
            dGPS->timing.incrementoTiempoMs = TIMEOUT_MS_GPS;
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8023044:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

            // Asignamos el bloque de configuracion
            ajustarBloqueConfigGPS(dGPS, gpsBloqueConfig, sizeof(gpsBloqueConfig));
 8023048:	222e      	movs	r2, #46	; 0x2e
 802304a:	490f      	ldr	r1, [pc, #60]	; (8023088 <leerDriverGPS+0xdc>)
 802304c:	6878      	ldr	r0, [r7, #4]
 802304e:	f7ff f8f5 	bl	802223c <ajustarBloqueConfigGPS>
 8023052:	e016      	b.n	8023082 <leerDriverGPS+0xd6>
        }
    }
    else {
        // El incremento solo sera correcto después de analizar dos mensajes
    	dGPS->timing.incrementoTiempoMs = tiempo - dGPS->timing.ultimoMensajeMs;
 8023054:	68bb      	ldr	r3, [r7, #8]
 8023056:	b29a      	uxth	r2, r3
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802305c:	b29b      	uxth	r3, r3
 802305e:	1ad3      	subs	r3, r2, r3
 8023060:	b29a      	uxth	r2, r3
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    	dGPS->timing.ultimoMensajeMs = tiempo;
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	68ba      	ldr	r2, [r7, #8]
 802306c:	669a      	str	r2, [r3, #104]	; 0x68
        if (dGPS->estado.status >= GPS_OK_FIX_2D)
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023074:	2b01      	cmp	r3, #1
 8023076:	d904      	bls.n	8023082 <leerDriverGPS+0xd6>
        	dGPS->timing.ultimoFixMs = tiempo;
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	68ba      	ldr	r2, [r7, #8]
 802307c:	665a      	str	r2, [r3, #100]	; 0x64
 802307e:	e000      	b.n	8023082 <leerDriverGPS+0xd6>
            return;
 8023080:	bf00      	nop
    }
}
 8023082:	3710      	adds	r7, #16
 8023084:	46bd      	mov	sp, r7
 8023086:	bd80      	pop	{r7, pc}
 8023088:	0803c08c 	.word	0x0803c08c

0802308c <configGPS>:
 802308c:	b480      	push	{r7}
 802308e:	b083      	sub	sp, #12
 8023090:	af00      	add	r7, sp, #0
 8023092:	6078      	str	r0, [r7, #4]
 8023094:	687a      	ldr	r2, [r7, #4]
 8023096:	4613      	mov	r3, r2
 8023098:	005b      	lsls	r3, r3, #1
 802309a:	4413      	add	r3, r2
 802309c:	009b      	lsls	r3, r3, #2
 802309e:	4a04      	ldr	r2, [pc, #16]	; (80230b0 <configGPS+0x24>)
 80230a0:	4413      	add	r3, r2
 80230a2:	4618      	mov	r0, r3
 80230a4:	370c      	adds	r7, #12
 80230a6:	46bd      	mov	sp, r7
 80230a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230ac:	4770      	bx	lr
 80230ae:	bf00      	nop
 80230b0:	2000a79c 	.word	0x2000a79c

080230b4 <configRTC>:
 80230b4:	b480      	push	{r7}
 80230b6:	af00      	add	r7, sp, #0
 80230b8:	4b02      	ldr	r3, [pc, #8]	; (80230c4 <configRTC+0x10>)
 80230ba:	4618      	mov	r0, r3
 80230bc:	46bd      	mov	sp, r7
 80230be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230c2:	4770      	bx	lr
 80230c4:	2000a988 	.word	0x2000a988

080230c8 <iniciarGPSublox>:
**  Descripcion:    Inicia el sensor
**  Parametros:     Puntero al sensor
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarGPSublox(gps_t *dGPS)
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b084      	sub	sp, #16
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    gpsUblox_t *driver = &gpsUblox[dGPS->numGPS];
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	781b      	ldrb	r3, [r3, #0]
 80230d4:	461a      	mov	r2, r3
 80230d6:	f44f 7398 	mov.w	r3, #304	; 0x130
 80230da:	fb02 f303 	mul.w	r3, r2, r3
 80230de:	4a1a      	ldr	r2, [pc, #104]	; (8023148 <iniciarGPSublox+0x80>)
 80230e0:	4413      	add	r3, r2
 80230e2:	60fb      	str	r3, [r7, #12]
    dGPS->driver = driver;
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	68fa      	ldr	r2, [r7, #12]
 80230e8:	60da      	str	r2, [r3, #12]

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 80230ea:	f44f 7298 	mov.w	r2, #304	; 0x130
 80230ee:	2100      	movs	r1, #0
 80230f0:	68f8      	ldr	r0, [r7, #12]
 80230f2:	f012 f8d5 	bl	80352a0 <memset>
    driver->siguienteMensaje = UBLOX_PASO_PVT;
 80230f6:	68fb      	ldr	r3, [r7, #12]
 80230f8:	2200      	movs	r2, #0
 80230fa:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    driver->mensajesNoConfig = CONFIG_TODO_GPS;
 80230fe:	68fb      	ldr	r3, [r7, #12]
 8023100:	f240 12ff 	movw	r2, #511	; 0x1ff
 8023104:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    driver->siguienteFix = NO_FIX;
 8023108:	68fb      	ldr	r3, [r7, #12]
 802310a:	2201      	movs	r2, #1
 802310c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
    driver->puertoUblox = 255;
 8023110:	68fb      	ldr	r3, [r7, #12]
 8023112:	22ff      	movs	r2, #255	; 0xff
 8023114:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

    switch (configGPS(dGPS->numGPS)->tipoGPS) {
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	781b      	ldrb	r3, [r3, #0]
 802311c:	4618      	mov	r0, r3
 802311e:	f7ff ffb5 	bl	802308c <configGPS>
 8023122:	4603      	mov	r3, r0
 8023124:	f993 3000 	ldrsb.w	r3, [r3]
 8023128:	2b00      	cmp	r3, #0
 802312a:	d108      	bne.n	802313e <iniciarGPSublox+0x76>
        case GPS_UBLOX_NEO_6M:
            // Solo 7 y posterior soporta CONFIG_GNSS_GPS
            driver->mensajesNoConfig &= ~CONFIG_GNSS_GPS;
 802312c:	68fb      	ldr	r3, [r7, #12]
 802312e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023136:	68fb      	ldr	r3, [r7, #12]
 8023138:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            break;
 802313c:	e000      	b.n	8023140 <iniciarGPSublox+0x78>

        case GPS_UBLOX_NEO_7M:
        case GPS_UBLOX_NEO_M8:
        default:
            break;
 802313e:	bf00      	nop
    };
}
 8023140:	bf00      	nop
 8023142:	3710      	adds	r7, #16
 8023144:	46bd      	mov	sp, r7
 8023146:	bd80      	pop	{r7, pc}
 8023148:	2000bb04 	.word	0x2000bb04

0802314c <detectarGPSublox>:
**  Función:  Determina si tenemos conectado un GPS ublox
**  Entradas: Puntero al GPS, dato para reconocer el GPS
**  Salidas:  True si ok
***************************************************************************************/
bool detectarGPSublox(gps_t *dGPS, uint8_t dato)
{
 802314c:	b480      	push	{r7}
 802314e:	b083      	sub	sp, #12
 8023150:	af00      	add	r7, sp, #0
 8023152:	6078      	str	r0, [r7, #4]
 8023154:	460b      	mov	r3, r1
 8023156:	70fb      	strb	r3, [r7, #3]
  reset:
    switch (dGPS->deteccion.ubloxDeteccion.step) {
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	7edb      	ldrb	r3, [r3, #27]
 802315c:	2b08      	cmp	r3, #8
 802315e:	f200 80c4 	bhi.w	80232ea <detectarGPSublox+0x19e>
 8023162:	a201      	add	r2, pc, #4	; (adr r2, 8023168 <detectarGPSublox+0x1c>)
 8023164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023168:	080231a7 	.word	0x080231a7
 802316c:	0802318d 	.word	0x0802318d
 8023170:	080231bd 	.word	0x080231bd
 8023174:	080231d9 	.word	0x080231d9
 8023178:	08023205 	.word	0x08023205
 802317c:	08023237 	.word	0x08023237
 8023180:	08023269 	.word	0x08023269
 8023184:	080232ad 	.word	0x080232ad
 8023188:	080232cb 	.word	0x080232cb
        case 1:
            if (PREAMBLE2 == dato) {
 802318c:	78fb      	ldrb	r3, [r7, #3]
 802318e:	2b62      	cmp	r3, #98	; 0x62
 8023190:	d106      	bne.n	80231a0 <detectarGPSublox+0x54>
            	dGPS->deteccion.ubloxDeteccion.step++;
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	7edb      	ldrb	r3, [r3, #27]
 8023196:	3301      	adds	r3, #1
 8023198:	b2da      	uxtb	r2, r3
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	76da      	strb	r2, [r3, #27]
                break;
 802319e:	e0a4      	b.n	80232ea <detectarGPSublox+0x19e>
            }
            dGPS->deteccion.ubloxDeteccion.step = 0;
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	2200      	movs	r2, #0
 80231a4:	76da      	strb	r2, [r3, #27]
            FALLTHROUGH;

        case 0:
            if (PREAMBLE1 == dato)
 80231a6:	78fb      	ldrb	r3, [r7, #3]
 80231a8:	2bb5      	cmp	r3, #181	; 0xb5
 80231aa:	f040 8099 	bne.w	80232e0 <detectarGPSublox+0x194>
            	dGPS->deteccion.ubloxDeteccion.step++;
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	7edb      	ldrb	r3, [r3, #27]
 80231b2:	3301      	adds	r3, #1
 80231b4:	b2da      	uxtb	r2, r3
 80231b6:	687b      	ldr	r3, [r7, #4]
 80231b8:	76da      	strb	r2, [r3, #27]
            break;
 80231ba:	e091      	b.n	80232e0 <detectarGPSublox+0x194>

        case 2:
        	dGPS->deteccion.ubloxDeteccion.step++;
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	7edb      	ldrb	r3, [r3, #27]
 80231c0:	3301      	adds	r3, #1
 80231c2:	b2da      	uxtb	r2, r3
 80231c4:	687b      	ldr	r3, [r7, #4]
 80231c6:	76da      	strb	r2, [r3, #27]
        	dGPS->deteccion.ubloxDeteccion.ck_b = dGPS->deteccion.ubloxDeteccion.ck_a = dato;
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	78fa      	ldrb	r2, [r7, #3]
 80231cc:	771a      	strb	r2, [r3, #28]
 80231ce:	687b      	ldr	r3, [r7, #4]
 80231d0:	7f1a      	ldrb	r2, [r3, #28]
 80231d2:	687b      	ldr	r3, [r7, #4]
 80231d4:	775a      	strb	r2, [r3, #29]
            break;
 80231d6:	e088      	b.n	80232ea <detectarGPSublox+0x19e>

        case 3:
        	dGPS->deteccion.ubloxDeteccion.step++;
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	7edb      	ldrb	r3, [r3, #27]
 80231dc:	3301      	adds	r3, #1
 80231de:	b2da      	uxtb	r2, r3
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	76da      	strb	r2, [r3, #27]
        	dGPS->deteccion.ubloxDeteccion.ck_b += (dGPS->deteccion.ubloxDeteccion.ck_a += dato);
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	7f1a      	ldrb	r2, [r3, #28]
 80231e8:	78fb      	ldrb	r3, [r7, #3]
 80231ea:	4413      	add	r3, r2
 80231ec:	b2da      	uxtb	r2, r3
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	771a      	strb	r2, [r3, #28]
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	7f1a      	ldrb	r2, [r3, #28]
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	7f5b      	ldrb	r3, [r3, #29]
 80231fa:	4413      	add	r3, r2
 80231fc:	b2da      	uxtb	r2, r3
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	775a      	strb	r2, [r3, #29]
            break;
 8023202:	e072      	b.n	80232ea <detectarGPSublox+0x19e>

        case 4:
        	dGPS->deteccion.ubloxDeteccion.step++;
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	7edb      	ldrb	r3, [r3, #27]
 8023208:	3301      	adds	r3, #1
 802320a:	b2da      	uxtb	r2, r3
 802320c:	687b      	ldr	r3, [r7, #4]
 802320e:	76da      	strb	r2, [r3, #27]
        	dGPS->deteccion.ubloxDeteccion.ck_b += (dGPS->deteccion.ubloxDeteccion.ck_a += dato);
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	7f1a      	ldrb	r2, [r3, #28]
 8023214:	78fb      	ldrb	r3, [r7, #3]
 8023216:	4413      	add	r3, r2
 8023218:	b2da      	uxtb	r2, r3
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	771a      	strb	r2, [r3, #28]
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	7f1a      	ldrb	r2, [r3, #28]
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	7f5b      	ldrb	r3, [r3, #29]
 8023226:	4413      	add	r3, r2
 8023228:	b2da      	uxtb	r2, r3
 802322a:	687b      	ldr	r3, [r7, #4]
 802322c:	775a      	strb	r2, [r3, #29]
        	dGPS->deteccion.ubloxDeteccion.payloadLength = dato;
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	78fa      	ldrb	r2, [r7, #3]
 8023232:	765a      	strb	r2, [r3, #25]
            break;
 8023234:	e059      	b.n	80232ea <detectarGPSublox+0x19e>

        case 5:
        	dGPS->deteccion.ubloxDeteccion.step++;
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	7edb      	ldrb	r3, [r3, #27]
 802323a:	3301      	adds	r3, #1
 802323c:	b2da      	uxtb	r2, r3
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	76da      	strb	r2, [r3, #27]
        	dGPS->deteccion.ubloxDeteccion.ck_b += (dGPS->deteccion.ubloxDeteccion.ck_a += dato);
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	7f1a      	ldrb	r2, [r3, #28]
 8023246:	78fb      	ldrb	r3, [r7, #3]
 8023248:	4413      	add	r3, r2
 802324a:	b2da      	uxtb	r2, r3
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	771a      	strb	r2, [r3, #28]
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	7f1a      	ldrb	r2, [r3, #28]
 8023254:	687b      	ldr	r3, [r7, #4]
 8023256:	7f5b      	ldrb	r3, [r3, #29]
 8023258:	4413      	add	r3, r2
 802325a:	b2da      	uxtb	r2, r3
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	775a      	strb	r2, [r3, #29]
        	dGPS->deteccion.ubloxDeteccion.payloadCounter = 0;
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	2200      	movs	r2, #0
 8023264:	769a      	strb	r2, [r3, #26]
            break;
 8023266:	e040      	b.n	80232ea <detectarGPSublox+0x19e>

        case 6:
        	dGPS->deteccion.ubloxDeteccion.ck_b += (dGPS->deteccion.ubloxDeteccion.ck_a += dato);
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	7f1a      	ldrb	r2, [r3, #28]
 802326c:	78fb      	ldrb	r3, [r7, #3]
 802326e:	4413      	add	r3, r2
 8023270:	b2da      	uxtb	r2, r3
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	771a      	strb	r2, [r3, #28]
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	7f1a      	ldrb	r2, [r3, #28]
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	7f5b      	ldrb	r3, [r3, #29]
 802327e:	4413      	add	r3, r2
 8023280:	b2da      	uxtb	r2, r3
 8023282:	687b      	ldr	r3, [r7, #4]
 8023284:	775a      	strb	r2, [r3, #29]
            if (++dGPS->deteccion.ubloxDeteccion.payloadCounter == dGPS->deteccion.ubloxDeteccion.payloadLength)
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	7e9b      	ldrb	r3, [r3, #26]
 802328a:	3301      	adds	r3, #1
 802328c:	b2da      	uxtb	r2, r3
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	769a      	strb	r2, [r3, #26]
 8023292:	687b      	ldr	r3, [r7, #4]
 8023294:	7e9a      	ldrb	r2, [r3, #26]
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	7e5b      	ldrb	r3, [r3, #25]
 802329a:	429a      	cmp	r2, r3
 802329c:	d122      	bne.n	80232e4 <detectarGPSublox+0x198>
            	dGPS->deteccion.ubloxDeteccion.step++;
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	7edb      	ldrb	r3, [r3, #27]
 80232a2:	3301      	adds	r3, #1
 80232a4:	b2da      	uxtb	r2, r3
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	76da      	strb	r2, [r3, #27]
            break;
 80232aa:	e01b      	b.n	80232e4 <detectarGPSublox+0x198>

        case 7:
        	dGPS->deteccion.ubloxDeteccion.step++;
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	7edb      	ldrb	r3, [r3, #27]
 80232b0:	3301      	adds	r3, #1
 80232b2:	b2da      	uxtb	r2, r3
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	76da      	strb	r2, [r3, #27]
            if (dGPS->deteccion.ubloxDeteccion.ck_a != dato) {
 80232b8:	687b      	ldr	r3, [r7, #4]
 80232ba:	7f1b      	ldrb	r3, [r3, #28]
 80232bc:	78fa      	ldrb	r2, [r7, #3]
 80232be:	429a      	cmp	r2, r3
 80232c0:	d012      	beq.n	80232e8 <detectarGPSublox+0x19c>
            	dGPS->deteccion.ubloxDeteccion.step = 0;
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	2200      	movs	r2, #0
 80232c6:	76da      	strb	r2, [r3, #27]
                goto reset;
 80232c8:	e746      	b.n	8023158 <detectarGPSublox+0xc>
            }
            break;

        case 8:
        	dGPS->deteccion.ubloxDeteccion.step = 0;
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	2200      	movs	r2, #0
 80232ce:	76da      	strb	r2, [r3, #27]
            if (dGPS->deteccion.ubloxDeteccion.ck_b == dato)
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	7f5b      	ldrb	r3, [r3, #29]
 80232d4:	78fa      	ldrb	r2, [r7, #3]
 80232d6:	429a      	cmp	r2, r3
 80232d8:	f47f af3e 	bne.w	8023158 <detectarGPSublox+0xc>
                return true;
 80232dc:	2301      	movs	r3, #1
 80232de:	e005      	b.n	80232ec <detectarGPSublox+0x1a0>
            break;
 80232e0:	bf00      	nop
 80232e2:	e002      	b.n	80232ea <detectarGPSublox+0x19e>
            break;
 80232e4:	bf00      	nop
 80232e6:	e000      	b.n	80232ea <detectarGPSublox+0x19e>
            break;
 80232e8:	bf00      	nop
            else
                goto reset;
    }

    return false;
 80232ea:	2300      	movs	r3, #0
}
 80232ec:	4618      	mov	r0, r3
 80232ee:	370c      	adds	r7, #12
 80232f0:	46bd      	mov	sp, r7
 80232f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232f6:	4770      	bx	lr

080232f8 <solcitarSiguienteConfigGPSublox>:
**  Función:  Solicita la siguiente configuracion al GPS
**  Entradas: Puntero al GPS
**  Salidas:  Ninguno
***************************************************************************************/
void solcitarSiguienteConfigGPSublox(gps_t *dGPS)
{
 80232f8:	b580      	push	{r7, lr}
 80232fa:	b086      	sub	sp, #24
 80232fc:	af02      	add	r7, sp, #8
 80232fe:	6078      	str	r0, [r7, #4]
    gpsUblox_t *driver = dGPS->driver;
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	68db      	ldr	r3, [r3, #12]
 8023304:	60fb      	str	r3, [r7, #12]
    // Asegurarse de que haya suficiente espacio para el mayor mensaje de salida posible
    if (bytesLibresBufferTxUART(configGPS(dGPS->numGPS)->dispUART) < (int16_t)(sizeof(headerUBX_t) + sizeof(cfgNavRateUBX_t) + 2))
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	781b      	ldrb	r3, [r3, #0]
 802330a:	4618      	mov	r0, r3
 802330c:	f7ff febe 	bl	802308c <configGPS>
 8023310:	4603      	mov	r3, r0
 8023312:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8023316:	4618      	mov	r0, r3
 8023318:	f7f5 ff96 	bl	8019248 <bytesLibresBufferTxUART>
 802331c:	4603      	mov	r3, r0
 802331e:	2b0d      	cmp	r3, #13
 8023320:	f240 8164 	bls.w	80235ec <solcitarSiguienteConfigGPSublox+0x2f4>
        return;

    switch (driver->siguienteMensaje) {
 8023324:	68fb      	ldr	r3, [r7, #12]
 8023326:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802332a:	2b0a      	cmp	r3, #10
 802332c:	f200 8159 	bhi.w	80235e2 <solcitarSiguienteConfigGPSublox+0x2ea>
 8023330:	a201      	add	r2, pc, #4	; (adr r2, 8023338 <solcitarSiguienteConfigGPSublox+0x40>)
 8023332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023336:	bf00      	nop
 8023338:	08023365 	.word	0x08023365
 802333c:	0802339d 	.word	0x0802339d
 8023340:	08023495 	.word	0x08023495
 8023344:	08023543 	.word	0x08023543
 8023348:	0802350b 	.word	0x0802350b
 802334c:	080234d3 	.word	0x080234d3
 8023350:	0802357b 	.word	0x0802357b
 8023354:	080233b5 	.word	0x080233b5
 8023358:	08023419 	.word	0x08023419
 802335c:	08023457 	.word	0x08023457
 8023360:	080235b3 	.word	0x080235b3
        case UBLOX_PASO_PVT:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_PVT))
 8023364:	2207      	movs	r2, #7
 8023366:	2101      	movs	r1, #1
 8023368:	6878      	ldr	r0, [r7, #4]
 802336a:	f000 f962 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 802336e:	4603      	mov	r3, r0
 8023370:	f083 0301 	eor.w	r3, r3, #1
 8023374:	b2db      	uxtb	r3, r3
 8023376:	2b00      	cmp	r3, #0
 8023378:	d007      	beq.n	802338a <solcitarSiguienteConfigGPSublox+0x92>
                driver->siguienteMensaje--;
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023380:	3b01      	subs	r3, #1
 8023382:	b2da      	uxtb	r2, r3
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023390:	3301      	adds	r3, #1
 8023392:	b2da      	uxtb	r2, r3
 8023394:	68fb      	ldr	r3, [r7, #12]
 8023396:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 802339a:	e128      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_PORT:
            solicitarPuertoGPSublox(dGPS);
 802339c:	6878      	ldr	r0, [r7, #4]
 802339e:	f000 f929 	bl	80235f4 <solicitarPuertoGPSublox>
            driver->siguienteMensaje++;
 80233a2:	68fb      	ldr	r3, [r7, #12]
 80233a4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80233a8:	3301      	adds	r3, #1
 80233aa:	b2da      	uxtb	r2, r3
 80233ac:	68fb      	ldr	r3, [r7, #12]
 80233ae:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 80233b2:	e11c      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_POLL_SBAS:
            if (configGPS(dGPS->numGPS)->modoSBAS != SBAS_SIN_CAMBIOS) {
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	781b      	ldrb	r3, [r3, #0]
 80233b8:	4618      	mov	r0, r3
 80233ba:	f7ff fe67 	bl	802308c <configGPS>
 80233be:	4603      	mov	r3, r0
 80233c0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80233c4:	2b01      	cmp	r3, #1
 80233c6:	d016      	beq.n	80233f6 <solcitarSiguienteConfigGPSublox+0xfe>
                if (!enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_SBAS, NULL, 0))
 80233c8:	2300      	movs	r3, #0
 80233ca:	9300      	str	r3, [sp, #0]
 80233cc:	2300      	movs	r3, #0
 80233ce:	2216      	movs	r2, #22
 80233d0:	2106      	movs	r1, #6
 80233d2:	6878      	ldr	r0, [r7, #4]
 80233d4:	f000 f947 	bl	8023666 <enviarMensajeGPSublox>
 80233d8:	4603      	mov	r3, r0
 80233da:	f083 0301 	eor.w	r3, r3, #1
 80233de:	b2db      	uxtb	r3, r3
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d010      	beq.n	8023406 <solcitarSiguienteConfigGPSublox+0x10e>
                    driver->siguienteMensaje--;
 80233e4:	68fb      	ldr	r3, [r7, #12]
 80233e6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80233ea:	3b01      	subs	r3, #1
 80233ec:	b2da      	uxtb	r2, r3
 80233ee:	68fb      	ldr	r3, [r7, #12]
 80233f0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 80233f4:	e007      	b.n	8023406 <solcitarSiguienteConfigGPSublox+0x10e>
            }
            else
                driver->mensajesNoConfig &= ~CONFIG_SBAS_GPS;
 80233f6:	68fb      	ldr	r3, [r7, #12]
 80233f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80233fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023400:	68fb      	ldr	r3, [r7, #12]
 8023402:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            driver->siguienteMensaje++;
 8023406:	68fb      	ldr	r3, [r7, #12]
 8023408:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802340c:	3301      	adds	r3, #1
 802340e:	b2da      	uxtb	r2, r3
 8023410:	68fb      	ldr	r3, [r7, #12]
 8023412:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023416:	e0ea      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_POLL_NAV:
            if (!enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0))
 8023418:	2300      	movs	r3, #0
 802341a:	9300      	str	r3, [sp, #0]
 802341c:	2300      	movs	r3, #0
 802341e:	2224      	movs	r2, #36	; 0x24
 8023420:	2106      	movs	r1, #6
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	f000 f91f 	bl	8023666 <enviarMensajeGPSublox>
 8023428:	4603      	mov	r3, r0
 802342a:	f083 0301 	eor.w	r3, r3, #1
 802342e:	b2db      	uxtb	r3, r3
 8023430:	2b00      	cmp	r3, #0
 8023432:	d007      	beq.n	8023444 <solcitarSiguienteConfigGPSublox+0x14c>
                driver->siguienteMensaje--;
 8023434:	68fb      	ldr	r3, [r7, #12]
 8023436:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802343a:	3b01      	subs	r3, #1
 802343c:	b2da      	uxtb	r2, r3
 802343e:	68fb      	ldr	r3, [r7, #12]
 8023440:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 8023444:	68fb      	ldr	r3, [r7, #12]
 8023446:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802344a:	3301      	adds	r3, #1
 802344c:	b2da      	uxtb	r2, r3
 802344e:	68fb      	ldr	r3, [r7, #12]
 8023450:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023454:	e0cb      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_POLL_GNSS:
            if (!enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_GNSS, NULL, 0))
 8023456:	2300      	movs	r3, #0
 8023458:	9300      	str	r3, [sp, #0]
 802345a:	2300      	movs	r3, #0
 802345c:	223e      	movs	r2, #62	; 0x3e
 802345e:	2106      	movs	r1, #6
 8023460:	6878      	ldr	r0, [r7, #4]
 8023462:	f000 f900 	bl	8023666 <enviarMensajeGPSublox>
 8023466:	4603      	mov	r3, r0
 8023468:	f083 0301 	eor.w	r3, r3, #1
 802346c:	b2db      	uxtb	r3, r3
 802346e:	2b00      	cmp	r3, #0
 8023470:	d007      	beq.n	8023482 <solcitarSiguienteConfigGPSublox+0x18a>
                driver->siguienteMensaje--;
 8023472:	68fb      	ldr	r3, [r7, #12]
 8023474:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023478:	3b01      	subs	r3, #1
 802347a:	b2da      	uxtb	r2, r3
 802347c:	68fb      	ldr	r3, [r7, #12]
 802347e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 8023482:	68fb      	ldr	r3, [r7, #12]
 8023484:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023488:	3301      	adds	r3, #1
 802348a:	b2da      	uxtb	r2, r3
 802348c:	68fb      	ldr	r3, [r7, #12]
 802348e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023492:	e0ac      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_NAV_RATE:
            if (!enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_RATE, NULL, 0))
 8023494:	2300      	movs	r3, #0
 8023496:	9300      	str	r3, [sp, #0]
 8023498:	2300      	movs	r3, #0
 802349a:	2208      	movs	r2, #8
 802349c:	2106      	movs	r1, #6
 802349e:	6878      	ldr	r0, [r7, #4]
 80234a0:	f000 f8e1 	bl	8023666 <enviarMensajeGPSublox>
 80234a4:	4603      	mov	r3, r0
 80234a6:	f083 0301 	eor.w	r3, r3, #1
 80234aa:	b2db      	uxtb	r3, r3
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d007      	beq.n	80234c0 <solcitarSiguienteConfigGPSublox+0x1c8>
                driver->siguienteMensaje--;
 80234b0:	68fb      	ldr	r3, [r7, #12]
 80234b2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80234b6:	3b01      	subs	r3, #1
 80234b8:	b2da      	uxtb	r2, r3
 80234ba:	68fb      	ldr	r3, [r7, #12]
 80234bc:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 80234c0:	68fb      	ldr	r3, [r7, #12]
 80234c2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80234c6:	3301      	adds	r3, #1
 80234c8:	b2da      	uxtb	r2, r3
 80234ca:	68fb      	ldr	r3, [r7, #12]
 80234cc:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 80234d0:	e08d      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_POSLLH:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_POSLLH))
 80234d2:	2202      	movs	r2, #2
 80234d4:	2101      	movs	r1, #1
 80234d6:	6878      	ldr	r0, [r7, #4]
 80234d8:	f000 f8ab 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 80234dc:	4603      	mov	r3, r0
 80234de:	f083 0301 	eor.w	r3, r3, #1
 80234e2:	b2db      	uxtb	r3, r3
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d007      	beq.n	80234f8 <solcitarSiguienteConfigGPSublox+0x200>
                driver->siguienteMensaje--;
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80234ee:	3b01      	subs	r3, #1
 80234f0:	b2da      	uxtb	r2, r3
 80234f2:	68fb      	ldr	r3, [r7, #12]
 80234f4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 80234f8:	68fb      	ldr	r3, [r7, #12]
 80234fa:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80234fe:	3301      	adds	r3, #1
 8023500:	b2da      	uxtb	r2, r3
 8023502:	68fb      	ldr	r3, [r7, #12]
 8023504:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023508:	e071      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_STATUS:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_STATUS))
 802350a:	2203      	movs	r2, #3
 802350c:	2101      	movs	r1, #1
 802350e:	6878      	ldr	r0, [r7, #4]
 8023510:	f000 f88f 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 8023514:	4603      	mov	r3, r0
 8023516:	f083 0301 	eor.w	r3, r3, #1
 802351a:	b2db      	uxtb	r3, r3
 802351c:	2b00      	cmp	r3, #0
 802351e:	d007      	beq.n	8023530 <solcitarSiguienteConfigGPSublox+0x238>
                driver->siguienteMensaje--;
 8023520:	68fb      	ldr	r3, [r7, #12]
 8023522:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023526:	3b01      	subs	r3, #1
 8023528:	b2da      	uxtb	r2, r3
 802352a:	68fb      	ldr	r3, [r7, #12]
 802352c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023536:	3301      	adds	r3, #1
 8023538:	b2da      	uxtb	r2, r3
 802353a:	68fb      	ldr	r3, [r7, #12]
 802353c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023540:	e055      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_SOL:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_SOL))
 8023542:	2206      	movs	r2, #6
 8023544:	2101      	movs	r1, #1
 8023546:	6878      	ldr	r0, [r7, #4]
 8023548:	f000 f873 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 802354c:	4603      	mov	r3, r0
 802354e:	f083 0301 	eor.w	r3, r3, #1
 8023552:	b2db      	uxtb	r3, r3
 8023554:	2b00      	cmp	r3, #0
 8023556:	d007      	beq.n	8023568 <solcitarSiguienteConfigGPSublox+0x270>
                driver->siguienteMensaje--;
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802355e:	3b01      	subs	r3, #1
 8023560:	b2da      	uxtb	r2, r3
 8023562:	68fb      	ldr	r3, [r7, #12]
 8023564:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 8023568:	68fb      	ldr	r3, [r7, #12]
 802356a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 802356e:	3301      	adds	r3, #1
 8023570:	b2da      	uxtb	r2, r3
 8023572:	68fb      	ldr	r3, [r7, #12]
 8023574:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 8023578:	e039      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_VELNED:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_VELNED))
 802357a:	2212      	movs	r2, #18
 802357c:	2101      	movs	r1, #1
 802357e:	6878      	ldr	r0, [r7, #4]
 8023580:	f000 f857 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 8023584:	4603      	mov	r3, r0
 8023586:	f083 0301 	eor.w	r3, r3, #1
 802358a:	b2db      	uxtb	r3, r3
 802358c:	2b00      	cmp	r3, #0
 802358e:	d007      	beq.n	80235a0 <solcitarSiguienteConfigGPSublox+0x2a8>
                driver->siguienteMensaje--;
 8023590:	68fb      	ldr	r3, [r7, #12]
 8023592:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8023596:	3b01      	subs	r3, #1
 8023598:	b2da      	uxtb	r2, r3
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje++;
 80235a0:	68fb      	ldr	r3, [r7, #12]
 80235a2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80235a6:	3301      	adds	r3, #1
 80235a8:	b2da      	uxtb	r2, r3
 80235aa:	68fb      	ldr	r3, [r7, #12]
 80235ac:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 80235b0:	e01d      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        case UBLOX_PASO_DOP:
            if (!solicitarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, MSG_DOP))
 80235b2:	2204      	movs	r2, #4
 80235b4:	2101      	movs	r1, #1
 80235b6:	6878      	ldr	r0, [r7, #4]
 80235b8:	f000 f83b 	bl	8023632 <solicitarFrecuenciaMensajeGPSublox>
 80235bc:	4603      	mov	r3, r0
 80235be:	f083 0301 	eor.w	r3, r3, #1
 80235c2:	b2db      	uxtb	r3, r3
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	d007      	beq.n	80235d8 <solcitarSiguienteConfigGPSublox+0x2e0>
                driver->siguienteMensaje--;
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80235ce:	3b01      	subs	r3, #1
 80235d0:	b2da      	uxtb	r2, r3
 80235d2:	68fb      	ldr	r3, [r7, #12]
 80235d4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            driver->siguienteMensaje = UBLOX_PASO_PVT;
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	2200      	movs	r2, #0
 80235dc:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 80235e0:	e005      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>

        default:
            // Nunca se debe llegar a este caso, se hace un reinicio completo
            driver->siguienteMensaje = UBLOX_PASO_PVT;
 80235e2:	68fb      	ldr	r3, [r7, #12]
 80235e4:	2200      	movs	r2, #0
 80235e6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
            break;
 80235ea:	e000      	b.n	80235ee <solcitarSiguienteConfigGPSublox+0x2f6>
        return;
 80235ec:	bf00      	nop
    }
}
 80235ee:	3710      	adds	r7, #16
 80235f0:	46bd      	mov	sp, r7
 80235f2:	bd80      	pop	{r7, pc}

080235f4 <solicitarPuertoGPSublox>:
**  Descripcion:    Solicita el puerto de conexion del GPS
**  Parametros:     Puntero al GPS
**  Retorno:        Ninguno
****************************************************************************************/
void solicitarPuertoGPSublox(gps_t *dGPS)
{
 80235f4:	b580      	push	{r7, lr}
 80235f6:	b084      	sub	sp, #16
 80235f8:	af02      	add	r7, sp, #8
 80235fa:	6078      	str	r0, [r7, #4]
    if (bytesLibresBufferTxUART(configGPS(dGPS->numGPS)->dispUART) < (int16_t)(sizeof(headerUBX_t) + 2))
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	781b      	ldrb	r3, [r3, #0]
 8023600:	4618      	mov	r0, r3
 8023602:	f7ff fd43 	bl	802308c <configGPS>
 8023606:	4603      	mov	r3, r0
 8023608:	f993 3002 	ldrsb.w	r3, [r3, #2]
 802360c:	4618      	mov	r0, r3
 802360e:	f7f5 fe1b 	bl	8019248 <bytesLibresBufferTxUART>
 8023612:	4603      	mov	r3, r0
 8023614:	2b07      	cmp	r3, #7
 8023616:	d908      	bls.n	802362a <solicitarPuertoGPSublox+0x36>
        return;

    enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_PRT, NULL, 0);
 8023618:	2300      	movs	r3, #0
 802361a:	9300      	str	r3, [sp, #0]
 802361c:	2300      	movs	r3, #0
 802361e:	2200      	movs	r2, #0
 8023620:	2106      	movs	r1, #6
 8023622:	6878      	ldr	r0, [r7, #4]
 8023624:	f000 f81f 	bl	8023666 <enviarMensajeGPSublox>
 8023628:	e000      	b.n	802362c <solicitarPuertoGPSublox+0x38>
        return;
 802362a:	bf00      	nop
}
 802362c:	3708      	adds	r7, #8
 802362e:	46bd      	mov	sp, r7
 8023630:	bd80      	pop	{r7, pc}

08023632 <solicitarFrecuenciaMensajeGPSublox>:
**  Descripcion:    Solicita la frecuencia de mensaje dada para una clase de mensaje especifica y msgId
**  Parametros:     Clase de mensaje e id
**  Retorno:        Devuelve true si envio la solicitud, falso si espera conocer el puerto
****************************************************************************************/
bool solicitarFrecuenciaMensajeGPSublox(gps_t *dGPS, uint8_t msgClass, uint8_t msgId)
{
 8023632:	b580      	push	{r7, lr}
 8023634:	b086      	sub	sp, #24
 8023636:	af02      	add	r7, sp, #8
 8023638:	6078      	str	r0, [r7, #4]
 802363a:	460b      	mov	r3, r1
 802363c:	70fb      	strb	r3, [r7, #3]
 802363e:	4613      	mov	r3, r2
 8023640:	70bb      	strb	r3, [r7, #2]
	cfgMsgUBX_t msg;

    msg.msgClass = msgClass;
 8023642:	78fb      	ldrb	r3, [r7, #3]
 8023644:	733b      	strb	r3, [r7, #12]
    msg.msgId = msgId;
 8023646:	78bb      	ldrb	r3, [r7, #2]
 8023648:	737b      	strb	r3, [r7, #13]
    return enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_MSG, &msg, sizeof(msg));
 802364a:	f107 030c 	add.w	r3, r7, #12
 802364e:	2202      	movs	r2, #2
 8023650:	9200      	str	r2, [sp, #0]
 8023652:	2201      	movs	r2, #1
 8023654:	2106      	movs	r1, #6
 8023656:	6878      	ldr	r0, [r7, #4]
 8023658:	f000 f805 	bl	8023666 <enviarMensajeGPSublox>
 802365c:	4603      	mov	r3, r0
}
 802365e:	4618      	mov	r0, r3
 8023660:	3710      	adds	r7, #16
 8023662:	46bd      	mov	sp, r7
 8023664:	bd80      	pop	{r7, pc}

08023666 <enviarMensajeGPSublox>:
**  Descripcion:    Envia un mensaje al GPS
**  Parametros:     Puntero al driver, clase de mensaje, id, contenido y tamanio
**  Retorno:        Mensaje enviado
****************************************************************************************/
bool enviarMensajeGPSublox(gps_t *dGPS, uint8_t msgClass, uint8_t msgId, void *msg, uint16_t tam)
{
 8023666:	b580      	push	{r7, lr}
 8023668:	b088      	sub	sp, #32
 802366a:	af00      	add	r7, sp, #0
 802366c:	60f8      	str	r0, [r7, #12]
 802366e:	607b      	str	r3, [r7, #4]
 8023670:	460b      	mov	r3, r1
 8023672:	72fb      	strb	r3, [r7, #11]
 8023674:	4613      	mov	r3, r2
 8023676:	72bb      	strb	r3, [r7, #10]
    if (bytesLibresBufferTxUART(configGPS(dGPS->numGPS)->dispUART) < (sizeof(headerUBX_t) + 2 + tam))
 8023678:	68fb      	ldr	r3, [r7, #12]
 802367a:	781b      	ldrb	r3, [r3, #0]
 802367c:	4618      	mov	r0, r3
 802367e:	f7ff fd05 	bl	802308c <configGPS>
 8023682:	4603      	mov	r3, r0
 8023684:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8023688:	4618      	mov	r0, r3
 802368a:	f7f5 fddd 	bl	8019248 <bytesLibresBufferTxUART>
 802368e:	4603      	mov	r3, r0
 8023690:	461a      	mov	r2, r3
 8023692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023694:	3308      	adds	r3, #8
 8023696:	429a      	cmp	r2, r3
 8023698:	d201      	bcs.n	802369e <enviarMensajeGPSublox+0x38>
        return false;
 802369a:	2300      	movs	r3, #0
 802369c:	e058      	b.n	8023750 <enviarMensajeGPSublox+0xea>

    headerUBX_t header;
    uint8_t ck_a = 0, ck_b = 0;
 802369e:	2300      	movs	r3, #0
 80236a0:	75fb      	strb	r3, [r7, #23]
 80236a2:	2300      	movs	r3, #0
 80236a4:	75bb      	strb	r3, [r7, #22]
    header.preamble1 = PREAMBLE1;
 80236a6:	23b5      	movs	r3, #181	; 0xb5
 80236a8:	763b      	strb	r3, [r7, #24]
    header.preamble2 = PREAMBLE2;
 80236aa:	2362      	movs	r3, #98	; 0x62
 80236ac:	767b      	strb	r3, [r7, #25]
    header.msgClass = msgClass;
 80236ae:	7afb      	ldrb	r3, [r7, #11]
 80236b0:	76bb      	strb	r3, [r7, #26]
    header.msgId = msgId;
 80236b2:	7abb      	ldrb	r3, [r7, #10]
 80236b4:	76fb      	strb	r3, [r7, #27]
    header.length = tam;
 80236b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80236b8:	83bb      	strh	r3, [r7, #28]

    actualizarChecksumGPSublox((uint8_t *)&header.msgClass, sizeof(header) - 2, &ck_a, &ck_b);
 80236ba:	f107 0116 	add.w	r1, r7, #22
 80236be:	f107 0217 	add.w	r2, r7, #23
 80236c2:	f107 0318 	add.w	r3, r7, #24
 80236c6:	1c98      	adds	r0, r3, #2
 80236c8:	460b      	mov	r3, r1
 80236ca:	2104      	movs	r1, #4
 80236cc:	f000 f844 	bl	8023758 <actualizarChecksumGPSublox>
    actualizarChecksumGPSublox((uint8_t *)msg, tam, &ck_a, &ck_b);
 80236d0:	f107 0316 	add.w	r3, r7, #22
 80236d4:	f107 0217 	add.w	r2, r7, #23
 80236d8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80236da:	6878      	ldr	r0, [r7, #4]
 80236dc:	f000 f83c 	bl	8023758 <actualizarChecksumGPSublox>

    escribirBufferUART(configGPS(dGPS->numGPS)->dispUART, (uint8_t *)&header, sizeof(header));
 80236e0:	68fb      	ldr	r3, [r7, #12]
 80236e2:	781b      	ldrb	r3, [r3, #0]
 80236e4:	4618      	mov	r0, r3
 80236e6:	f7ff fcd1 	bl	802308c <configGPS>
 80236ea:	4603      	mov	r3, r0
 80236ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80236f0:	f107 0118 	add.w	r1, r7, #24
 80236f4:	2206      	movs	r2, #6
 80236f6:	4618      	mov	r0, r3
 80236f8:	f7f5 fd16 	bl	8019128 <escribirBufferUART>
    escribirBufferUART(configGPS(dGPS->numGPS)->dispUART, (uint8_t *)msg, tam);
 80236fc:	68fb      	ldr	r3, [r7, #12]
 80236fe:	781b      	ldrb	r3, [r3, #0]
 8023700:	4618      	mov	r0, r3
 8023702:	f7ff fcc3 	bl	802308c <configGPS>
 8023706:	4603      	mov	r3, r0
 8023708:	f993 3002 	ldrsb.w	r3, [r3, #2]
 802370c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 802370e:	6879      	ldr	r1, [r7, #4]
 8023710:	4618      	mov	r0, r3
 8023712:	f7f5 fd09 	bl	8019128 <escribirBufferUART>
    escribirBufferUART(configGPS(dGPS->numGPS)->dispUART, (uint8_t *)&ck_a, 1);
 8023716:	68fb      	ldr	r3, [r7, #12]
 8023718:	781b      	ldrb	r3, [r3, #0]
 802371a:	4618      	mov	r0, r3
 802371c:	f7ff fcb6 	bl	802308c <configGPS>
 8023720:	4603      	mov	r3, r0
 8023722:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8023726:	f107 0117 	add.w	r1, r7, #23
 802372a:	2201      	movs	r2, #1
 802372c:	4618      	mov	r0, r3
 802372e:	f7f5 fcfb 	bl	8019128 <escribirBufferUART>
    escribirBufferUART(configGPS(dGPS->numGPS)->dispUART, (uint8_t *)&ck_b, 1);
 8023732:	68fb      	ldr	r3, [r7, #12]
 8023734:	781b      	ldrb	r3, [r3, #0]
 8023736:	4618      	mov	r0, r3
 8023738:	f7ff fca8 	bl	802308c <configGPS>
 802373c:	4603      	mov	r3, r0
 802373e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8023742:	f107 0116 	add.w	r1, r7, #22
 8023746:	2201      	movs	r2, #1
 8023748:	4618      	mov	r0, r3
 802374a:	f7f5 fced 	bl	8019128 <escribirBufferUART>
    return true;
 802374e:	2301      	movs	r3, #1
}
 8023750:	4618      	mov	r0, r3
 8023752:	3720      	adds	r7, #32
 8023754:	46bd      	mov	sp, r7
 8023756:	bd80      	pop	{r7, pc}

08023758 <actualizarChecksumGPSublox>:
**  Descripcion:    Actualiza el checksum de la trama
**  Parametros:     Datos, longitud, ck_a, ck_b
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarChecksumGPSublox(uint8_t *dato, uint16_t len, uint8_t *ck_a, uint8_t *ck_b)
{
 8023758:	b480      	push	{r7}
 802375a:	b085      	sub	sp, #20
 802375c:	af00      	add	r7, sp, #0
 802375e:	60f8      	str	r0, [r7, #12]
 8023760:	607a      	str	r2, [r7, #4]
 8023762:	603b      	str	r3, [r7, #0]
 8023764:	460b      	mov	r3, r1
 8023766:	817b      	strh	r3, [r7, #10]
    while (len--) {
 8023768:	e012      	b.n	8023790 <actualizarChecksumGPSublox+0x38>
        *ck_a += *dato;
 802376a:	687b      	ldr	r3, [r7, #4]
 802376c:	781a      	ldrb	r2, [r3, #0]
 802376e:	68fb      	ldr	r3, [r7, #12]
 8023770:	781b      	ldrb	r3, [r3, #0]
 8023772:	4413      	add	r3, r2
 8023774:	b2da      	uxtb	r2, r3
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	701a      	strb	r2, [r3, #0]
        *ck_b += *ck_a;
 802377a:	683b      	ldr	r3, [r7, #0]
 802377c:	781a      	ldrb	r2, [r3, #0]
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	781b      	ldrb	r3, [r3, #0]
 8023782:	4413      	add	r3, r2
 8023784:	b2da      	uxtb	r2, r3
 8023786:	683b      	ldr	r3, [r7, #0]
 8023788:	701a      	strb	r2, [r3, #0]
        dato++;
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	3301      	adds	r3, #1
 802378e:	60fb      	str	r3, [r7, #12]
    while (len--) {
 8023790:	897b      	ldrh	r3, [r7, #10]
 8023792:	1e5a      	subs	r2, r3, #1
 8023794:	817a      	strh	r2, [r7, #10]
 8023796:	2b00      	cmp	r3, #0
 8023798:	d1e7      	bne.n	802376a <actualizarChecksumGPSublox+0x12>
    }
}
 802379a:	bf00      	nop
 802379c:	bf00      	nop
 802379e:	3714      	adds	r7, #20
 80237a0:	46bd      	mov	sp, r7
 80237a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237a6:	4770      	bx	lr

080237a8 <leerGPSublox>:
**  Descripcion:    Lee la trama recibida y actualiza los datos
**  Parametros:     Puntero al sensor
**  Retorno:        Trama leida
****************************************************************************************/
bool leerGPSublox(gps_t *dGPS)
{
 80237a8:	b580      	push	{r7, lr}
 80237aa:	b086      	sub	sp, #24
 80237ac:	af00      	add	r7, sp, #0
 80237ae:	6078      	str	r0, [r7, #4]
    gpsUblox_t *driver = dGPS->driver;
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	68db      	ldr	r3, [r3, #12]
 80237b4:	613b      	str	r3, [r7, #16]
    uint8_t dato;
    uint16_t numc;
    bool analizado = false;
 80237b6:	2300      	movs	r3, #0
 80237b8:	75fb      	strb	r3, [r7, #23]

    if (driver->mensajesNoConfig != 0) {
 80237ba:	693b      	ldr	r3, [r7, #16]
 80237bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d011      	beq.n	80237e8 <leerGPSublox+0x40>
        uint32_t tiempo = millis();
 80237c4:	f7f4 f9c6 	bl	8017b54 <millis>
 80237c8:	60f8      	str	r0, [r7, #12]

        if (tiempo - driver->ultimoTiempoConfig >= TIEMPO_RETARDO_CONFIG_GPS_UBLOX) {
 80237ca:	693b      	ldr	r3, [r7, #16]
 80237cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80237d0:	68fa      	ldr	r2, [r7, #12]
 80237d2:	1ad3      	subs	r3, r2, r3
 80237d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80237d8:	d306      	bcc.n	80237e8 <leerGPSublox+0x40>
            solcitarSiguienteConfigGPSublox(dGPS);
 80237da:	6878      	ldr	r0, [r7, #4]
 80237dc:	f7ff fd8c 	bl	80232f8 <solcitarSiguienteConfigGPSublox>
            driver->ultimoTiempoConfig = tiempo;
 80237e0:	693b      	ldr	r3, [r7, #16]
 80237e2:	68fa      	ldr	r2, [r7, #12]
 80237e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        }
    }

    numc = bytesRecibidosUART(configGPS(dGPS->numGPS)->dispUART);
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	781b      	ldrb	r3, [r3, #0]
 80237ec:	4618      	mov	r0, r3
 80237ee:	f7ff fc4d 	bl	802308c <configGPS>
 80237f2:	4603      	mov	r3, r0
 80237f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80237f8:	4618      	mov	r0, r3
 80237fa:	f7f5 fcf4 	bl	80191e6 <bytesRecibidosUART>
 80237fe:	4603      	mov	r3, r0
 8023800:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < numc; i++) {                          // Procesa los bytes recibidos
 8023802:	2300      	movs	r3, #0
 8023804:	82bb      	strh	r3, [r7, #20]
 8023806:	e14e      	b.n	8023aa6 <leerGPSublox+0x2fe>
        dato = leerUART(configGPS(dGPS->numGPS)->dispUART);
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	781b      	ldrb	r3, [r3, #0]
 802380c:	4618      	mov	r0, r3
 802380e:	f7ff fc3d 	bl	802308c <configGPS>
 8023812:	4603      	mov	r3, r0
 8023814:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8023818:	4618      	mov	r0, r3
 802381a:	f7f5 fca6 	bl	801916a <leerUART>
 802381e:	4603      	mov	r3, r0
 8023820:	727b      	strb	r3, [r7, #9]

      reset:
        switch (driver->estadoLectura) {
 8023822:	693b      	ldr	r3, [r7, #16]
 8023824:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023828:	2b08      	cmp	r3, #8
 802382a:	f200 8139 	bhi.w	8023aa0 <leerGPSublox+0x2f8>
 802382e:	a201      	add	r2, pc, #4	; (adr r2, 8023834 <leerGPSublox+0x8c>)
 8023830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023834:	08023879 	.word	0x08023879
 8023838:	08023859 	.word	0x08023859
 802383c:	08023893 	.word	0x08023893
 8023840:	080238c1 	.word	0x080238c1
 8023844:	08023903 	.word	0x08023903
 8023848:	08023947 	.word	0x08023947
 802384c:	080239d1 	.word	0x080239d1
 8023850:	08023a43 	.word	0x08023a43
 8023854:	08023a69 	.word	0x08023a69
            la maquina de estado y reconsidera el byte fallido como el primer byte del preamble.
            Esto mejora nuestras posibilidades de recuperarse de un desajuste y lo hace menos
            probable a que nos dejemos engañar por el pramble que aparece como datos en algun otro mensaje.
            */
            case 1:
                if (PREAMBLE2 == dato) {
 8023858:	7a7b      	ldrb	r3, [r7, #9]
 802385a:	2b62      	cmp	r3, #98	; 0x62
 802385c:	d108      	bne.n	8023870 <leerGPSublox+0xc8>
                    driver->estadoLectura++;
 802385e:	693b      	ldr	r3, [r7, #16]
 8023860:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023864:	3301      	adds	r3, #1
 8023866:	b2da      	uxtb	r2, r3
 8023868:	693b      	ldr	r3, [r7, #16]
 802386a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                    break;
 802386e:	e117      	b.n	8023aa0 <leerGPSublox+0x2f8>
                }
                else
                    driver->estadoLectura = 0;
 8023870:	693b      	ldr	r3, [r7, #16]
 8023872:	2200      	movs	r2, #0
 8023874:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                FALLTHROUGH;

            case 0:
                if (PREAMBLE1 == dato)
 8023878:	7a7b      	ldrb	r3, [r7, #9]
 802387a:	2bb5      	cmp	r3, #181	; 0xb5
 802387c:	f040 8107 	bne.w	8023a8e <leerGPSublox+0x2e6>
                    driver->estadoLectura++;
 8023880:	693b      	ldr	r3, [r7, #16]
 8023882:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023886:	3301      	adds	r3, #1
 8023888:	b2da      	uxtb	r2, r3
 802388a:	693b      	ldr	r3, [r7, #16]
 802388c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                break;
 8023890:	e0fd      	b.n	8023a8e <leerGPSublox+0x2e6>

            Detectamos la clase y el ID del mensaje para decidir si vamos a juntar los bytes del mensaje o simplemente descartarlos
            Siempre recolectamos la longitud para que podamos evitar ser engañados por los bytes del preamble en los mensajes.
            */
            case 2:
                driver->estadoLectura++;
 8023892:	693b      	ldr	r3, [r7, #16]
 8023894:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023898:	3301      	adds	r3, #1
 802389a:	b2da      	uxtb	r2, r3
 802389c:	693b      	ldr	r3, [r7, #16]
 802389e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                driver->claseMensaje = dato;
 80238a2:	693b      	ldr	r3, [r7, #16]
 80238a4:	7a7a      	ldrb	r2, [r7, #9]
 80238a6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                driver->ckbMensaje = driver->ckaMensaje = dato;             // Resetea los acumuladores del checksum
 80238aa:	693b      	ldr	r3, [r7, #16]
 80238ac:	7a7a      	ldrb	r2, [r7, #9]
 80238ae:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 80238b2:	693b      	ldr	r3, [r7, #16]
 80238b4:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80238b8:	693b      	ldr	r3, [r7, #16]
 80238ba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                break;
 80238be:	e0ef      	b.n	8023aa0 <leerGPSublox+0x2f8>

            case 3:
                driver->estadoLectura++;
 80238c0:	693b      	ldr	r3, [r7, #16]
 80238c2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80238c6:	3301      	adds	r3, #1
 80238c8:	b2da      	uxtb	r2, r3
 80238ca:	693b      	ldr	r3, [r7, #16]
 80238cc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                driver->ckbMensaje += (driver->ckaMensaje += dato);         // Checksum byte
 80238d0:	693b      	ldr	r3, [r7, #16]
 80238d2:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80238d6:	7a7b      	ldrb	r3, [r7, #9]
 80238d8:	4413      	add	r3, r2
 80238da:	b2da      	uxtb	r2, r3
 80238dc:	693b      	ldr	r3, [r7, #16]
 80238de:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 80238e2:	693b      	ldr	r3, [r7, #16]
 80238e4:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80238e8:	693b      	ldr	r3, [r7, #16]
 80238ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80238ee:	4413      	add	r3, r2
 80238f0:	b2da      	uxtb	r2, r3
 80238f2:	693b      	ldr	r3, [r7, #16]
 80238f4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                driver->idMensaje = dato;
 80238f8:	693b      	ldr	r3, [r7, #16]
 80238fa:	7a7a      	ldrb	r2, [r7, #9]
 80238fc:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
                break;
 8023900:	e0ce      	b.n	8023aa0 <leerGPSublox+0x2f8>

            case 4:
                driver->estadoLectura++;
 8023902:	693b      	ldr	r3, [r7, #16]
 8023904:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023908:	3301      	adds	r3, #1
 802390a:	b2da      	uxtb	r2, r3
 802390c:	693b      	ldr	r3, [r7, #16]
 802390e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                driver->ckbMensaje += (driver->ckaMensaje += dato);         // Checksum byte
 8023912:	693b      	ldr	r3, [r7, #16]
 8023914:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 8023918:	7a7b      	ldrb	r3, [r7, #9]
 802391a:	4413      	add	r3, r2
 802391c:	b2da      	uxtb	r2, r3
 802391e:	693b      	ldr	r3, [r7, #16]
 8023920:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8023924:	693b      	ldr	r3, [r7, #16]
 8023926:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 802392a:	693b      	ldr	r3, [r7, #16]
 802392c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8023930:	4413      	add	r3, r2
 8023932:	b2da      	uxtb	r2, r3
 8023934:	693b      	ldr	r3, [r7, #16]
 8023936:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                driver->longitudPayload = dato;                             // Byte bajo de longitud del payload
 802393a:	7a7b      	ldrb	r3, [r7, #9]
 802393c:	b29a      	uxth	r2, r3
 802393e:	693b      	ldr	r3, [r7, #16]
 8023940:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                break;
 8023944:	e0ac      	b.n	8023aa0 <leerGPSublox+0x2f8>

            case 5:
                driver->estadoLectura++;
 8023946:	693b      	ldr	r3, [r7, #16]
 8023948:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 802394c:	3301      	adds	r3, #1
 802394e:	b2da      	uxtb	r2, r3
 8023950:	693b      	ldr	r3, [r7, #16]
 8023952:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                driver->ckbMensaje += (driver->ckaMensaje += dato);         // Checksum byte
 8023956:	693b      	ldr	r3, [r7, #16]
 8023958:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 802395c:	7a7b      	ldrb	r3, [r7, #9]
 802395e:	4413      	add	r3, r2
 8023960:	b2da      	uxtb	r2, r3
 8023962:	693b      	ldr	r3, [r7, #16]
 8023964:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8023968:	693b      	ldr	r3, [r7, #16]
 802396a:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 802396e:	693b      	ldr	r3, [r7, #16]
 8023970:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8023974:	4413      	add	r3, r2
 8023976:	b2da      	uxtb	r2, r3
 8023978:	693b      	ldr	r3, [r7, #16]
 802397a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                driver->longitudPayload += (uint16_t)(dato << 8);
 802397e:	693b      	ldr	r3, [r7, #16]
 8023980:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 8023984:	7a7b      	ldrb	r3, [r7, #9]
 8023986:	b29b      	uxth	r3, r3
 8023988:	021b      	lsls	r3, r3, #8
 802398a:	b29b      	uxth	r3, r3
 802398c:	4413      	add	r3, r2
 802398e:	b29a      	uxth	r2, r3
 8023990:	693b      	ldr	r3, [r7, #16]
 8023992:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                if (driver->longitudPayload > TAM_BUFFER_RECEPCION_GPS_UBLOX) {
 8023996:	693b      	ldr	r3, [r7, #16]
 8023998:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 802399c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80239a0:	d908      	bls.n	80239b4 <leerGPSublox+0x20c>
                    driver->longitudPayload = 0;
 80239a2:	693b      	ldr	r3, [r7, #16]
 80239a4:	2200      	movs	r2, #0
 80239a6:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                    driver->estadoLectura = 0;
 80239aa:	693b      	ldr	r3, [r7, #16]
 80239ac:	2200      	movs	r2, #0
 80239ae:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                    goto reset;
 80239b2:	e736      	b.n	8023822 <leerGPSublox+0x7a>
                }
                if (driver->longitudPayload == 0)
 80239b4:	693b      	ldr	r3, [r7, #16]
 80239b6:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d103      	bne.n	80239c6 <leerGPSublox+0x21e>
                    driver->estadoLectura = 7;
 80239be:	693b      	ldr	r3, [r7, #16]
 80239c0:	2207      	movs	r2, #7
 80239c2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                driver->contadorPayload = 0;                                // Prepara para recibir el payload
 80239c6:	693b      	ldr	r3, [r7, #16]
 80239c8:	2200      	movs	r2, #0
 80239ca:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
                break;
 80239ce:	e067      	b.n	8023aa0 <leerGPSublox+0x2f8>

            // Recibe los datos del mensaje
            case 6:
                driver->ckbMensaje += (driver->ckaMensaje += dato);         // checksum byte
 80239d0:	693b      	ldr	r3, [r7, #16]
 80239d2:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80239d6:	7a7b      	ldrb	r3, [r7, #9]
 80239d8:	4413      	add	r3, r2
 80239da:	b2da      	uxtb	r2, r3
 80239dc:	693b      	ldr	r3, [r7, #16]
 80239de:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 80239e2:	693b      	ldr	r3, [r7, #16]
 80239e4:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 80239e8:	693b      	ldr	r3, [r7, #16]
 80239ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80239ee:	4413      	add	r3, r2
 80239f0:	b2da      	uxtb	r2, r3
 80239f2:	693b      	ldr	r3, [r7, #16]
 80239f4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                if (driver->contadorPayload < TAM_BUFFER_RECEPCION_GPS_UBLOX)
 80239f8:	693b      	ldr	r3, [r7, #16]
 80239fa:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80239fe:	2bff      	cmp	r3, #255	; 0xff
 8023a00:	d806      	bhi.n	8023a10 <leerGPSublox+0x268>
                    driver->bufferRecepcion.buffer[driver->contadorPayload] = dato;
 8023a02:	693b      	ldr	r3, [r7, #16]
 8023a04:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8023a08:	4619      	mov	r1, r3
 8023a0a:	693b      	ldr	r3, [r7, #16]
 8023a0c:	7a7a      	ldrb	r2, [r7, #9]
 8023a0e:	545a      	strb	r2, [r3, r1]

                driver->contadorPayload++;
 8023a10:	693b      	ldr	r3, [r7, #16]
 8023a12:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8023a16:	3301      	adds	r3, #1
 8023a18:	b29a      	uxth	r2, r3
 8023a1a:	693b      	ldr	r3, [r7, #16]
 8023a1c:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
                if (driver->contadorPayload == driver->longitudPayload)
 8023a20:	693b      	ldr	r3, [r7, #16]
 8023a22:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8023a26:	693b      	ldr	r3, [r7, #16]
 8023a28:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8023a2c:	429a      	cmp	r2, r3
 8023a2e:	d130      	bne.n	8023a92 <leerGPSublox+0x2ea>
                    driver->estadoLectura++;
 8023a30:	693b      	ldr	r3, [r7, #16]
 8023a32:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023a36:	3301      	adds	r3, #1
 8023a38:	b2da      	uxtb	r2, r3
 8023a3a:	693b      	ldr	r3, [r7, #16]
 8023a3c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                break;
 8023a40:	e027      	b.n	8023a92 <leerGPSublox+0x2ea>

            // Procesamiento del checksum y el mensaje
            case 7:
                driver->estadoLectura++;
 8023a42:	693b      	ldr	r3, [r7, #16]
 8023a44:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8023a48:	3301      	adds	r3, #1
 8023a4a:	b2da      	uxtb	r2, r3
 8023a4c:	693b      	ldr	r3, [r7, #16]
 8023a4e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                if (driver->ckaMensaje != dato) {
 8023a52:	693b      	ldr	r3, [r7, #16]
 8023a54:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8023a58:	7a7a      	ldrb	r2, [r7, #9]
 8023a5a:	429a      	cmp	r2, r3
 8023a5c:	d01b      	beq.n	8023a96 <leerGPSublox+0x2ee>
                    driver->estadoLectura = 0;
 8023a5e:	693b      	ldr	r3, [r7, #16]
 8023a60:	2200      	movs	r2, #0
 8023a62:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                    goto reset;
 8023a66:	e6dc      	b.n	8023822 <leerGPSublox+0x7a>
                }
                break;

            case 8:
                driver->estadoLectura = 0;
 8023a68:	693b      	ldr	r3, [r7, #16]
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
                if (driver->ckbMensaje != dato)
 8023a70:	693b      	ldr	r3, [r7, #16]
 8023a72:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8023a76:	7a7a      	ldrb	r2, [r7, #9]
 8023a78:	429a      	cmp	r2, r3
 8023a7a:	d10e      	bne.n	8023a9a <leerGPSublox+0x2f2>
                    break;                                                  // Checksum incorrecto

                if (analizarTramaGPSublox(dGPS))
 8023a7c:	6878      	ldr	r0, [r7, #4]
 8023a7e:	f000 f81f 	bl	8023ac0 <analizarTramaGPSublox>
 8023a82:	4603      	mov	r3, r0
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d00a      	beq.n	8023a9e <leerGPSublox+0x2f6>
                    analizado = true;
 8023a88:	2301      	movs	r3, #1
 8023a8a:	75fb      	strb	r3, [r7, #23]
                break;
 8023a8c:	e007      	b.n	8023a9e <leerGPSublox+0x2f6>
                break;
 8023a8e:	bf00      	nop
 8023a90:	e006      	b.n	8023aa0 <leerGPSublox+0x2f8>
                break;
 8023a92:	bf00      	nop
 8023a94:	e004      	b.n	8023aa0 <leerGPSublox+0x2f8>
                break;
 8023a96:	bf00      	nop
 8023a98:	e002      	b.n	8023aa0 <leerGPSublox+0x2f8>
                    break;                                                  // Checksum incorrecto
 8023a9a:	bf00      	nop
 8023a9c:	e000      	b.n	8023aa0 <leerGPSublox+0x2f8>
                break;
 8023a9e:	bf00      	nop
    for (uint16_t i = 0; i < numc; i++) {                          // Procesa los bytes recibidos
 8023aa0:	8abb      	ldrh	r3, [r7, #20]
 8023aa2:	3301      	adds	r3, #1
 8023aa4:	82bb      	strh	r3, [r7, #20]
 8023aa6:	8aba      	ldrh	r2, [r7, #20]
 8023aa8:	897b      	ldrh	r3, [r7, #10]
 8023aaa:	429a      	cmp	r2, r3
 8023aac:	f4ff aeac 	bcc.w	8023808 <leerGPSublox+0x60>
        }
    }
    return analizado;
 8023ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8023ab2:	4618      	mov	r0, r3
 8023ab4:	3718      	adds	r7, #24
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	bd80      	pop	{r7, pc}
 8023aba:	bf00      	nop
 8023abc:	0000      	movs	r0, r0
	...

08023ac0 <analizarTramaGPSublox>:
**  Descripcion:    Analiza el mensaje recibido
**  Parametros:     Puntero al sensor
**  Retorno:        Trama analizada
****************************************************************************************/
bool analizarTramaGPSublox(gps_t *dGPS)
{
 8023ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023ac4:	ed2d 8b02 	vpush	{d8}
 8023ac8:	b0a4      	sub	sp, #144	; 0x90
 8023aca:	af02      	add	r7, sp, #8
 8023acc:	6378      	str	r0, [r7, #52]	; 0x34
    gpsUblox_t *driver = dGPS->driver;
 8023ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023ad0:	68db      	ldr	r3, [r3, #12]
 8023ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if (driver->claseMensaje == CLASS_ACK) {
 8023ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023ada:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8023ade:	2b05      	cmp	r3, #5
 8023ae0:	f040 80a1 	bne.w	8023c26 <analizarTramaGPSublox+0x166>
        if (driver->idMensaje == MSG_ACK_ACK) {
 8023ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023ae8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8023aec:	2b01      	cmp	r3, #1
 8023aee:	f040 8094 	bne.w	8023c1a <analizarTramaGPSublox+0x15a>
            switch (driver->bufferRecepcion.ack.clsID) {
 8023af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023af6:	781b      	ldrb	r3, [r3, #0]
 8023af8:	2b06      	cmp	r3, #6
 8023afa:	f040 8091 	bne.w	8023c20 <analizarTramaGPSublox+0x160>
                case CLASS_CFG:
                    switch (driver->bufferRecepcion.ack.msgID) {
 8023afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023b02:	785b      	ldrb	r3, [r3, #1]
 8023b04:	2b3e      	cmp	r3, #62	; 0x3e
 8023b06:	d063      	beq.n	8023bd0 <analizarTramaGPSublox+0x110>
 8023b08:	2b3e      	cmp	r3, #62	; 0x3e
 8023b0a:	f300 8088 	bgt.w	8023c1e <analizarTramaGPSublox+0x15e>
 8023b0e:	2b24      	cmp	r3, #36	; 0x24
 8023b10:	dc50      	bgt.n	8023bb4 <analizarTramaGPSublox+0xf4>
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	f340 8083 	ble.w	8023c1e <analizarTramaGPSublox+0x15e>
 8023b18:	3b01      	subs	r3, #1
 8023b1a:	2b23      	cmp	r3, #35	; 0x23
 8023b1c:	d87f      	bhi.n	8023c1e <analizarTramaGPSublox+0x15e>
 8023b1e:	a201      	add	r2, pc, #4	; (adr r2, 8023b24 <analizarTramaGPSublox+0x64>)
 8023b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b24:	08023c13 	.word	0x08023c13
 8023b28:	08023c1f 	.word	0x08023c1f
 8023b2c:	08023c1f 	.word	0x08023c1f
 8023b30:	08023c1f 	.word	0x08023c1f
 8023b34:	08023c1f 	.word	0x08023c1f
 8023b38:	08023c1f 	.word	0x08023c1f
 8023b3c:	08023c1f 	.word	0x08023c1f
 8023b40:	08023c13 	.word	0x08023c13
 8023b44:	08023bbb 	.word	0x08023bbb
 8023b48:	08023c1f 	.word	0x08023c1f
 8023b4c:	08023c1f 	.word	0x08023c1f
 8023b50:	08023c1f 	.word	0x08023c1f
 8023b54:	08023c1f 	.word	0x08023c1f
 8023b58:	08023c1f 	.word	0x08023c1f
 8023b5c:	08023c1f 	.word	0x08023c1f
 8023b60:	08023c1f 	.word	0x08023c1f
 8023b64:	08023c1f 	.word	0x08023c1f
 8023b68:	08023c1f 	.word	0x08023c1f
 8023b6c:	08023c1f 	.word	0x08023c1f
 8023b70:	08023c1f 	.word	0x08023c1f
 8023b74:	08023c1f 	.word	0x08023c1f
 8023b78:	08023bfd 	.word	0x08023bfd
 8023b7c:	08023c1f 	.word	0x08023c1f
 8023b80:	08023c1f 	.word	0x08023c1f
 8023b84:	08023c1f 	.word	0x08023c1f
 8023b88:	08023c1f 	.word	0x08023c1f
 8023b8c:	08023c1f 	.word	0x08023c1f
 8023b90:	08023c1f 	.word	0x08023c1f
 8023b94:	08023c1f 	.word	0x08023c1f
 8023b98:	08023c1f 	.word	0x08023c1f
 8023b9c:	08023c1f 	.word	0x08023c1f
 8023ba0:	08023c1f 	.word	0x08023c1f
 8023ba4:	08023c1f 	.word	0x08023c1f
 8023ba8:	08023c1f 	.word	0x08023c1f
 8023bac:	08023c1f 	.word	0x08023c1f
 8023bb0:	08023be7 	.word	0x08023be7
 8023bb4:	2b31      	cmp	r3, #49	; 0x31
 8023bb6:	d02e      	beq.n	8023c16 <analizarTramaGPSublox+0x156>
                            break;

                        case MSG_CFG_TP5:
                            break;
                    }
                    break;
 8023bb8:	e031      	b.n	8023c1e <analizarTramaGPSublox+0x15e>
                            driver->cfgGuardada = true;
 8023bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023bbe:	2201      	movs	r2, #1
 8023bc0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                            driver->cfgNecesitaGuardar = false;
 8023bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023bc8:	2200      	movs	r2, #0
 8023bca:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                            break;
 8023bce:	e023      	b.n	8023c18 <analizarTramaGPSublox+0x158>
                            driver->mensajesNoConfig &= ~CONFIG_GNSS_GPS;
 8023bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023bd4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023bd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023be0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                            break;
 8023be4:	e018      	b.n	8023c18 <analizarTramaGPSublox+0x158>
                            driver->mensajesNoConfig &= ~CONFIG_NAV_SETTINGS_GPS;
 8023be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023bea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023bee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8023bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023bf6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                            break;
 8023bfa:	e00d      	b.n	8023c18 <analizarTramaGPSublox+0x158>
                            driver->mensajesNoConfig &= ~CONFIG_SBAS_GPS;
 8023bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023c00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023c0c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                            break;
 8023c10:	e002      	b.n	8023c18 <analizarTramaGPSublox+0x158>
                            break;
 8023c12:	bf00      	nop
 8023c14:	e003      	b.n	8023c1e <analizarTramaGPSublox+0x15e>
                            break;
 8023c16:	bf00      	nop
                    break;
 8023c18:	e001      	b.n	8023c1e <analizarTramaGPSublox+0x15e>
            }
        }
 8023c1a:	bf00      	nop
 8023c1c:	e000      	b.n	8023c20 <analizarTramaGPSublox+0x160>
                    break;
 8023c1e:	bf00      	nop
        return false;
 8023c20:	2300      	movs	r3, #0
 8023c22:	f000 bf46 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>
    }

    if (driver->claseMensaje == CLASS_CFG) {
 8023c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023c2a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8023c2e:	2b06      	cmp	r3, #6
 8023c30:	f040 82c2 	bne.w	80241b8 <analizarTramaGPSublox+0x6f8>
        switch (driver->idMensaje) {
 8023c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023c38:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8023c3c:	2b24      	cmp	r3, #36	; 0x24
 8023c3e:	dc53      	bgt.n	8023ce8 <analizarTramaGPSublox+0x228>
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	f2c0 82b9 	blt.w	80241b8 <analizarTramaGPSublox+0x6f8>
 8023c46:	2b24      	cmp	r3, #36	; 0x24
 8023c48:	f200 82b6 	bhi.w	80241b8 <analizarTramaGPSublox+0x6f8>
 8023c4c:	a201      	add	r2, pc, #4	; (adr r2, 8023c54 <analizarTramaGPSublox+0x194>)
 8023c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c52:	bf00      	nop
 8023c54:	0802413f 	.word	0x0802413f
 8023c58:	080240d7 	.word	0x080240d7
 8023c5c:	080241b9 	.word	0x080241b9
 8023c60:	080241b9 	.word	0x080241b9
 8023c64:	080241b9 	.word	0x080241b9
 8023c68:	080241b9 	.word	0x080241b9
 8023c6c:	080241b9 	.word	0x080241b9
 8023c70:	080241b9 	.word	0x080241b9
 8023c74:	0802414d 	.word	0x0802414d
 8023c78:	080241b9 	.word	0x080241b9
 8023c7c:	080241b9 	.word	0x080241b9
 8023c80:	080241b9 	.word	0x080241b9
 8023c84:	080241b9 	.word	0x080241b9
 8023c88:	080241b9 	.word	0x080241b9
 8023c8c:	080241b9 	.word	0x080241b9
 8023c90:	080241b9 	.word	0x080241b9
 8023c94:	080241b9 	.word	0x080241b9
 8023c98:	080241b9 	.word	0x080241b9
 8023c9c:	080241b9 	.word	0x080241b9
 8023ca0:	080241b9 	.word	0x080241b9
 8023ca4:	080241b9 	.word	0x080241b9
 8023ca8:	080241b9 	.word	0x080241b9
 8023cac:	0802402d 	.word	0x0802402d
 8023cb0:	080241b9 	.word	0x080241b9
 8023cb4:	080241b9 	.word	0x080241b9
 8023cb8:	080241b9 	.word	0x080241b9
 8023cbc:	080241b9 	.word	0x080241b9
 8023cc0:	080241b9 	.word	0x080241b9
 8023cc4:	080241b9 	.word	0x080241b9
 8023cc8:	080241b9 	.word	0x080241b9
 8023ccc:	080241b9 	.word	0x080241b9
 8023cd0:	080241b9 	.word	0x080241b9
 8023cd4:	080241b9 	.word	0x080241b9
 8023cd8:	080241b9 	.word	0x080241b9
 8023cdc:	080241b9 	.word	0x080241b9
 8023ce0:	080241b9 	.word	0x080241b9
 8023ce4:	08023cf1 	.word	0x08023cf1
 8023ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8023cea:	f000 808b 	beq.w	8023e04 <analizarTramaGPSublox+0x344>
 8023cee:	e263      	b.n	80241b8 <analizarTramaGPSublox+0x6f8>
            case MSG_CFG_NAV_SETTINGS:
                driver->bufferRecepcion.navSettings.mask = 0;
 8023cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023cf4:	2200      	movs	r2, #0
 8023cf6:	801a      	strh	r2, [r3, #0]
                if (configGPS(dGPS->numGPS)->modoConf != GPS_ENGINE_NINGUNO && driver->bufferRecepcion.navSettings.dynModel != configGPS(dGPS->numGPS)->modoConf) {
 8023cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023cfa:	781b      	ldrb	r3, [r3, #0]
 8023cfc:	4618      	mov	r0, r3
 8023cfe:	f7ff f9c5 	bl	802308c <configGPS>
 8023d02:	4603      	mov	r3, r0
 8023d04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8023d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d0c:	d022      	beq.n	8023d54 <analizarTramaGPSublox+0x294>
 8023d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d12:	789b      	ldrb	r3, [r3, #2]
 8023d14:	461c      	mov	r4, r3
 8023d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d18:	781b      	ldrb	r3, [r3, #0]
 8023d1a:	4618      	mov	r0, r3
 8023d1c:	f7ff f9b6 	bl	802308c <configGPS>
 8023d20:	4603      	mov	r3, r0
 8023d22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8023d26:	429c      	cmp	r4, r3
 8023d28:	d014      	beq.n	8023d54 <analizarTramaGPSublox+0x294>
                    // Recibimos la configuracion de navegación actual, cambiamos el modelo de configuracion y lo enviamos de vuelta
                    driver->bufferRecepcion.navSettings.dynModel = configGPS(dGPS->numGPS)->modoConf;
 8023d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d2c:	781b      	ldrb	r3, [r3, #0]
 8023d2e:	4618      	mov	r0, r3
 8023d30:	f7ff f9ac 	bl	802308c <configGPS>
 8023d34:	4603      	mov	r3, r0
 8023d36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8023d3a:	b2da      	uxtb	r2, r3
 8023d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d40:	709a      	strb	r2, [r3, #2]
                    driver->bufferRecepcion.navSettings.mask |= 1;
 8023d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d46:	881b      	ldrh	r3, [r3, #0]
 8023d48:	f043 0301 	orr.w	r3, r3, #1
 8023d4c:	b29a      	uxth	r2, r3
 8023d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d52:	801a      	strh	r2, [r3, #0]
                }
                if (configGPS(dGPS->numGPS)->elevacionMin != -100 && driver->bufferRecepcion.navSettings.minElev != configGPS(dGPS->numGPS)->elevacionMin) {
 8023d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d56:	781b      	ldrb	r3, [r3, #0]
 8023d58:	4618      	mov	r0, r3
 8023d5a:	f7ff f997 	bl	802308c <configGPS>
 8023d5e:	4603      	mov	r3, r0
 8023d60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8023d64:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8023d68:	d021      	beq.n	8023dae <analizarTramaGPSublox+0x2ee>
 8023d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d6e:	f993 400c 	ldrsb.w	r4, [r3, #12]
 8023d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d74:	781b      	ldrb	r3, [r3, #0]
 8023d76:	4618      	mov	r0, r3
 8023d78:	f7ff f988 	bl	802308c <configGPS>
 8023d7c:	4603      	mov	r3, r0
 8023d7e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8023d82:	429c      	cmp	r4, r3
 8023d84:	d013      	beq.n	8023dae <analizarTramaGPSublox+0x2ee>
                    driver->bufferRecepcion.navSettings.minElev = configGPS(dGPS->numGPS)->elevacionMin;
 8023d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d88:	781b      	ldrb	r3, [r3, #0]
 8023d8a:	4618      	mov	r0, r3
 8023d8c:	f7ff f97e 	bl	802308c <configGPS>
 8023d90:	4603      	mov	r3, r0
 8023d92:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8023d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d9a:	731a      	strb	r2, [r3, #12]
                    driver->bufferRecepcion.navSettings.mask |= 2;
 8023d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023da0:	881b      	ldrh	r3, [r3, #0]
 8023da2:	f043 0302 	orr.w	r3, r3, #2
 8023da6:	b29a      	uxth	r2, r3
 8023da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dac:	801a      	strh	r2, [r3, #0]
                }
                if (driver->bufferRecepcion.navSettings.mask != 0) {
 8023dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023db2:	881b      	ldrh	r3, [r3, #0]
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d018      	beq.n	8023dea <analizarTramaGPSublox+0x32a>
                    enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_NAV_SETTINGS, &driver->bufferRecepcion.navSettings, sizeof(driver->bufferRecepcion.navSettings));
 8023db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dbc:	2224      	movs	r2, #36	; 0x24
 8023dbe:	9200      	str	r2, [sp, #0]
 8023dc0:	2224      	movs	r2, #36	; 0x24
 8023dc2:	2106      	movs	r1, #6
 8023dc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023dc6:	f7ff fc4e 	bl	8023666 <enviarMensajeGPSublox>
                    driver->mensajesNoConfig |= CONFIG_NAV_SETTINGS_GPS;
 8023dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023dd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8023dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dda:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    driver->cfgNecesitaGuardar = true;
 8023dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023de2:	2201      	movs	r2, #1
 8023de4:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 8023de8:	e009      	b.n	8023dfe <analizarTramaGPSublox+0x33e>
                }
                else
                    driver->mensajesNoConfig &= ~CONFIG_NAV_SETTINGS_GPS;
 8023dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023df2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8023df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dfa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                return false;
 8023dfe:	2300      	movs	r3, #0
 8023e00:	f000 be57 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>

            case MSG_CFG_GNSS:
                if (configGPS(dGPS->numGPS)->gnss != 0) {
 8023e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e06:	781b      	ldrb	r3, [r3, #0]
 8023e08:	4618      	mov	r0, r3
 8023e0a:	f7ff f93f 	bl	802308c <configGPS>
 8023e0e:	4603      	mov	r3, r0
 8023e10:	799b      	ldrb	r3, [r3, #6]
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	f000 80fd 	beq.w	8024012 <analizarTramaGPSublox+0x552>
                    cfgGNSSubx_t gnssInicial = driver->bufferRecepcion.gnss;
 8023e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023e1c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8023e20:	461d      	mov	r5, r3
 8023e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8023e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                    uint8_t gnssCnt = 0;
 8023e36:	2300      	movs	r3, #0
 8023e38:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    for (uint8_t i = 0; i < NUM_MAX_GNSS_CONFIG_BLOCKS_GPS_UBLOX; i++) {
 8023e3c:	2300      	movs	r3, #0
 8023e3e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8023e42:	e01d      	b.n	8023e80 <analizarTramaGPSublox+0x3c0>
                        if ((configGPS(dGPS->numGPS)->gnss & (1 << i)) && i != GNSS_SBAS)
 8023e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e46:	781b      	ldrb	r3, [r3, #0]
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f7ff f91f 	bl	802308c <configGPS>
 8023e4e:	4603      	mov	r3, r0
 8023e50:	799b      	ldrb	r3, [r3, #6]
 8023e52:	461a      	mov	r2, r3
 8023e54:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8023e58:	fa42 f303 	asr.w	r3, r2, r3
 8023e5c:	f003 0301 	and.w	r3, r3, #1
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d008      	beq.n	8023e76 <analizarTramaGPSublox+0x3b6>
 8023e64:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8023e68:	2b01      	cmp	r3, #1
 8023e6a:	d004      	beq.n	8023e76 <analizarTramaGPSublox+0x3b6>
                            gnssCnt++;
 8023e6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8023e70:	3301      	adds	r3, #1
 8023e72:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                    for (uint8_t i = 0; i < NUM_MAX_GNSS_CONFIG_BLOCKS_GPS_UBLOX; i++) {
 8023e76:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8023e7a:	3301      	adds	r3, #1
 8023e7c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8023e80:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8023e84:	2b06      	cmp	r3, #6
 8023e86:	d9dd      	bls.n	8023e44 <analizarTramaGPSublox+0x384>
                    }

                    for (uint8_t i = 0; i < driver->bufferRecepcion.gnss.numConfigBlocks; i++) {
 8023e88:	2300      	movs	r3, #0
 8023e8a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8023e8e:	e081      	b.n	8023f94 <analizarTramaGPSublox+0x4d4>
                        // Reserva una porcion igual de canales para todos los sistemas habilitados
                        if (configGPS(dGPS->numGPS)->gnss & (1 << driver->bufferRecepcion.gnss.configBlock[i].gnssId)) {
 8023e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e92:	781b      	ldrb	r3, [r3, #0]
 8023e94:	4618      	mov	r0, r3
 8023e96:	f7ff f8f9 	bl	802308c <configGPS>
 8023e9a:	4603      	mov	r3, r0
 8023e9c:	799b      	ldrb	r3, [r3, #6]
 8023e9e:	4619      	mov	r1, r3
 8023ea0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023ea8:	00db      	lsls	r3, r3, #3
 8023eaa:	4413      	add	r3, r2
 8023eac:	791b      	ldrb	r3, [r3, #4]
 8023eae:	fa41 f303 	asr.w	r3, r1, r3
 8023eb2:	f003 0301 	and.w	r3, r3, #1
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d047      	beq.n	8023f4a <analizarTramaGPSublox+0x48a>
                            if (GNSS_SBAS != driver->bufferRecepcion.gnss.configBlock[i].gnssId) {
 8023eba:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023ec2:	00db      	lsls	r3, r3, #3
 8023ec4:	4413      	add	r3, r2
 8023ec6:	791b      	ldrb	r3, [r3, #4]
 8023ec8:	2b01      	cmp	r3, #1
 8023eca:	d01d      	beq.n	8023f08 <analizarTramaGPSublox+0x448>
                                driver->bufferRecepcion.gnss.configBlock[i].resTrkCh = (driver->bufferRecepcion.gnss.numTrkChHw - 3) / (gnssCnt * 2);
 8023ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023ed0:	785b      	ldrb	r3, [r3, #1]
 8023ed2:	1eda      	subs	r2, r3, #3
 8023ed4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8023ed8:	005b      	lsls	r3, r3, #1
 8023eda:	fb92 f2f3 	sdiv	r2, r2, r3
 8023ede:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023ee2:	b2d1      	uxtb	r1, r2
 8023ee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023ee8:	00db      	lsls	r3, r3, #3
 8023eea:	4413      	add	r3, r2
 8023eec:	460a      	mov	r2, r1
 8023eee:	715a      	strb	r2, [r3, #5]
                                driver->bufferRecepcion.gnss.configBlock[i].maxTrkCh = driver->bufferRecepcion.gnss.numTrkChHw;
 8023ef0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023ef4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023ef8:	7851      	ldrb	r1, [r2, #1]
 8023efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023efe:	00db      	lsls	r3, r3, #3
 8023f00:	4413      	add	r3, r2
 8023f02:	460a      	mov	r2, r1
 8023f04:	719a      	strb	r2, [r3, #6]
 8023f06:	e00f      	b.n	8023f28 <analizarTramaGPSublox+0x468>
                            }
                            else {
                                driver->bufferRecepcion.gnss.configBlock[i].resTrkCh = 1;
 8023f08:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f10:	00db      	lsls	r3, r3, #3
 8023f12:	4413      	add	r3, r2
 8023f14:	2201      	movs	r2, #1
 8023f16:	715a      	strb	r2, [r3, #5]
                                driver->bufferRecepcion.gnss.configBlock[i].maxTrkCh = 3;
 8023f18:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f20:	00db      	lsls	r3, r3, #3
 8023f22:	4413      	add	r3, r2
 8023f24:	2203      	movs	r2, #3
 8023f26:	719a      	strb	r2, [r3, #6]
                            }
                            driver->bufferRecepcion.gnss.configBlock[i].flags = driver->bufferRecepcion.gnss.configBlock[i].flags | 0x00000001;
 8023f28:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f30:	00db      	lsls	r3, r3, #3
 8023f32:	4413      	add	r3, r2
 8023f34:	689a      	ldr	r2, [r3, #8]
 8023f36:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f3a:	f042 0201 	orr.w	r2, r2, #1
 8023f3e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8023f42:	00db      	lsls	r3, r3, #3
 8023f44:	440b      	add	r3, r1
 8023f46:	609a      	str	r2, [r3, #8]
 8023f48:	e01f      	b.n	8023f8a <analizarTramaGPSublox+0x4ca>
                        }
                        else {
                            driver->bufferRecepcion.gnss.configBlock[i].resTrkCh = 0;
 8023f4a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f52:	00db      	lsls	r3, r3, #3
 8023f54:	4413      	add	r3, r2
 8023f56:	2200      	movs	r2, #0
 8023f58:	715a      	strb	r2, [r3, #5]
                            driver->bufferRecepcion.gnss.configBlock[i].maxTrkCh = 0;
 8023f5a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f62:	00db      	lsls	r3, r3, #3
 8023f64:	4413      	add	r3, r2
 8023f66:	2200      	movs	r2, #0
 8023f68:	719a      	strb	r2, [r3, #6]
                            driver->bufferRecepcion.gnss.configBlock[i].flags = driver->bufferRecepcion.gnss.configBlock[i].flags & 0xFFFFFFFE;
 8023f6a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023f72:	00db      	lsls	r3, r3, #3
 8023f74:	4413      	add	r3, r2
 8023f76:	689a      	ldr	r2, [r3, #8]
 8023f78:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f7c:	f022 0201 	bic.w	r2, r2, #1
 8023f80:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8023f84:	00db      	lsls	r3, r3, #3
 8023f86:	440b      	add	r3, r1
 8023f88:	609a      	str	r2, [r3, #8]
                    for (uint8_t i = 0; i < driver->bufferRecepcion.gnss.numConfigBlocks; i++) {
 8023f8a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8023f8e:	3301      	adds	r3, #1
 8023f90:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8023f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023f98:	78db      	ldrb	r3, [r3, #3]
 8023f9a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8023f9e:	429a      	cmp	r2, r3
 8023fa0:	f4ff af76 	bcc.w	8023e90 <analizarTramaGPSublox+0x3d0>
                        }
                    }
                    if (!memcmp(&gnssInicial, &driver->bufferRecepcion.gnss, sizeof(gnssInicial))) {
 8023fa4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8023fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8023fac:	223c      	movs	r2, #60	; 0x3c
 8023fae:	4618      	mov	r0, r3
 8023fb0:	f011 f93e 	bl	8035230 <memcmp>
 8023fb4:	4603      	mov	r3, r0
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d120      	bne.n	8023ffc <analizarTramaGPSublox+0x53c>
                        enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_GNSS, &driver->bufferRecepcion.gnss, 4 + (8 * driver->bufferRecepcion.gnss.numConfigBlocks));
 8023fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023fc2:	78db      	ldrb	r3, [r3, #3]
 8023fc4:	b29b      	uxth	r3, r3
 8023fc6:	00db      	lsls	r3, r3, #3
 8023fc8:	b29b      	uxth	r3, r3
 8023fca:	3304      	adds	r3, #4
 8023fcc:	b29b      	uxth	r3, r3
 8023fce:	9300      	str	r3, [sp, #0]
 8023fd0:	4613      	mov	r3, r2
 8023fd2:	223e      	movs	r2, #62	; 0x3e
 8023fd4:	2106      	movs	r1, #6
 8023fd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023fd8:	f7ff fb45 	bl	8023666 <enviarMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_GNSS_GPS;
 8023fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023fe0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8023fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8023fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023fec:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8023ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023ff4:	2201      	movs	r2, #1
 8023ff6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 8023ffa:	e014      	b.n	8024026 <analizarTramaGPSublox+0x566>
                    }
                    else
                        driver->mensajesNoConfig &= ~CONFIG_GNSS_GPS;
 8023ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024000:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024004:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8024008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802400c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8024010:	e009      	b.n	8024026 <analizarTramaGPSublox+0x566>
                }
                else
                    driver->mensajesNoConfig &= ~CONFIG_GNSS_GPS;
 8024012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024016:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 802401a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802401e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024022:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                return false;
 8024026:	2300      	movs	r3, #0
 8024028:	f000 bd43 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>

            case MSG_CFG_SBAS:
                if (configGPS(dGPS->numGPS)->modoSBAS != SBAS_SIN_CAMBIOS) {
 802402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802402e:	781b      	ldrb	r3, [r3, #0]
 8024030:	4618      	mov	r0, r3
 8024032:	f7ff f82b 	bl	802308c <configGPS>
 8024036:	4603      	mov	r3, r0
 8024038:	f993 3003 	ldrsb.w	r3, [r3, #3]
 802403c:	2b01      	cmp	r3, #1
 802403e:	d03d      	beq.n	80240bc <analizarTramaGPSublox+0x5fc>
                    if (driver->bufferRecepcion.sbas.mode != configGPS(dGPS->numGPS)->modoSBAS) {
 8024040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024044:	781b      	ldrb	r3, [r3, #0]
 8024046:	461c      	mov	r4, r3
 8024048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802404a:	781b      	ldrb	r3, [r3, #0]
 802404c:	4618      	mov	r0, r3
 802404e:	f7ff f81d 	bl	802308c <configGPS>
 8024052:	4603      	mov	r3, r0
 8024054:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8024058:	429c      	cmp	r4, r3
 802405a:	d024      	beq.n	80240a6 <analizarTramaGPSublox+0x5e6>
                        driver->bufferRecepcion.sbas.mode = configGPS(dGPS->numGPS)->modoSBAS;
 802405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802405e:	781b      	ldrb	r3, [r3, #0]
 8024060:	4618      	mov	r0, r3
 8024062:	f7ff f813 	bl	802308c <configGPS>
 8024066:	4603      	mov	r3, r0
 8024068:	f993 3003 	ldrsb.w	r3, [r3, #3]
 802406c:	b2da      	uxtb	r2, r3
 802406e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024072:	701a      	strb	r2, [r3, #0]
                        enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_SBAS, &driver->bufferRecepcion.sbas, sizeof(driver->bufferRecepcion.sbas));
 8024074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024078:	2208      	movs	r2, #8
 802407a:	9200      	str	r2, [sp, #0]
 802407c:	2216      	movs	r2, #22
 802407e:	2106      	movs	r1, #6
 8024080:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024082:	f7ff faf0 	bl	8023666 <enviarMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_SBAS_GPS;
 8024086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802408a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 802408e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024096:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 802409a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802409e:	2201      	movs	r2, #1
 80240a0:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 80240a4:	e014      	b.n	80240d0 <analizarTramaGPSublox+0x610>
                    }
                    else
                        driver->mensajesNoConfig &= ~CONFIG_SBAS_GPS;
 80240a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80240ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80240b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240b6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80240ba:	e009      	b.n	80240d0 <analizarTramaGPSublox+0x610>
                }
                else
                    driver->mensajesNoConfig &= ~CONFIG_SBAS_GPS;
 80240bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80240c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80240c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                return false;
 80240d0:	2300      	movs	r3, #0
 80240d2:	f000 bcee 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>

            case MSG_CFG_MSG:
                if (driver->longitudPayload == sizeof(cfgMsgRate6UBX_t)) {
 80240d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240da:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 80240de:	2b08      	cmp	r3, #8
 80240e0:	d11e      	bne.n	8024120 <analizarTramaGPSublox+0x660>
                    if (driver->puertoUblox >= NUM_MAX_PUERTOS_GPS_UBLOX) {
 80240e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240e6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 80240ea:	2b05      	cmp	r3, #5
 80240ec:	d905      	bls.n	80240fa <analizarTramaGPSublox+0x63a>
                        solicitarPuertoGPSublox(dGPS);
 80240ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80240f0:	f7ff fa80 	bl	80235f4 <solicitarPuertoGPSublox>
                        return false;
 80240f4:	2300      	movs	r3, #0
 80240f6:	f000 bcdc 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>
                    }
                    verificarFrecuenciaMensajeGPSublox(dGPS, driver->bufferRecepcion.msgRate6.msgClass, driver->bufferRecepcion.msgRate6.msgId, driver->bufferRecepcion.msgRate6.rates[driver->puertoUblox]);
 80240fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240fe:	7819      	ldrb	r1, [r3, #0]
 8024100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024104:	785a      	ldrb	r2, [r3, #1]
 8024106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802410a:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 802410e:	4618      	mov	r0, r3
 8024110:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024114:	4403      	add	r3, r0
 8024116:	789b      	ldrb	r3, [r3, #2]
 8024118:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802411a:	f000 fcd7 	bl	8024acc <verificarFrecuenciaMensajeGPSublox>
 802411e:	e00b      	b.n	8024138 <analizarTramaGPSublox+0x678>
                }
                else
                    verificarFrecuenciaMensajeGPSublox(dGPS, driver->bufferRecepcion.msgRate.msgClass, driver->bufferRecepcion.msgRate.msgId, driver->bufferRecepcion.msgRate.rate);
 8024120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024124:	7819      	ldrb	r1, [r3, #0]
 8024126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802412a:	785a      	ldrb	r2, [r3, #1]
 802412c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024130:	789b      	ldrb	r3, [r3, #2]
 8024132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024134:	f000 fcca 	bl	8024acc <verificarFrecuenciaMensajeGPSublox>
                return false;
 8024138:	2300      	movs	r3, #0
 802413a:	f000 bcba 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>

            case MSG_CFG_PRT:
                driver->puertoUblox = driver->bufferRecepcion.prt.portID;
 802413e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024142:	781a      	ldrb	r2, [r3, #0]
 8024144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024148:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

            case MSG_CFG_RATE:
                if (driver->bufferRecepcion.navRate.measureRateMs != configGPS(dGPS->numGPS)->periodoMuestreo || driver->bufferRecepcion.navRate.navRate != 1 || driver->bufferRecepcion.navRate.timeRef != 0) {
 802414c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024150:	881c      	ldrh	r4, [r3, #0]
 8024152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024154:	781b      	ldrb	r3, [r3, #0]
 8024156:	4618      	mov	r0, r3
 8024158:	f7fe ff98 	bl	802308c <configGPS>
 802415c:	4603      	mov	r3, r0
 802415e:	891b      	ldrh	r3, [r3, #8]
 8024160:	429c      	cmp	r4, r3
 8024162:	d109      	bne.n	8024178 <analizarTramaGPSublox+0x6b8>
 8024164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024168:	885b      	ldrh	r3, [r3, #2]
 802416a:	2b01      	cmp	r3, #1
 802416c:	d104      	bne.n	8024178 <analizarTramaGPSublox+0x6b8>
 802416e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024172:	889b      	ldrh	r3, [r3, #4]
 8024174:	2b00      	cmp	r3, #0
 8024176:	d012      	beq.n	802419e <analizarTramaGPSublox+0x6de>
                    configurarFrecuenciaNavegacionGPSublox(dGPS);
 8024178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802417a:	f000 fdee 	bl	8024d5a <configurarFrecuenciaNavegacionGPSublox>
                    driver->mensajesNoConfig |= CONFIG_RATE_NAV_GPS;
 802417e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024182:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024186:	f043 0201 	orr.w	r2, r3, #1
 802418a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802418e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    driver->cfgNecesitaGuardar = true;
 8024192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024196:	2201      	movs	r2, #1
 8024198:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 802419c:	e009      	b.n	80241b2 <analizarTramaGPSublox+0x6f2>
                }
                else
                    driver->mensajesNoConfig &= ~CONFIG_RATE_NAV_GPS;
 802419e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80241a6:	f023 0201 	bic.w	r2, r3, #1
 80241aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241ae:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

                return false;
 80241b2:	2300      	movs	r3, #0
 80241b4:	f000 bc7d 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>
        }
    }

    if (driver->claseMensaje != CLASS_NAV) {
 80241b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241bc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80241c0:	2b01      	cmp	r3, #1
 80241c2:	d005      	beq.n	80241d0 <analizarTramaGPSublox+0x710>
        mensajeInesperadoGPSublox(dGPS);
 80241c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80241c6:	f000 fde5 	bl	8024d94 <mensajeInesperadoGPSublox>
        return false;
 80241ca:	2300      	movs	r3, #0
 80241cc:	f000 bc71 	b.w	8024ab2 <analizarTramaGPSublox+0xff2>
    }

    switch (driver->idMensaje) {
 80241d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241d4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80241d8:	3b02      	subs	r3, #2
 80241da:	2b10      	cmp	r3, #16
 80241dc:	f200 8417 	bhi.w	8024a0e <analizarTramaGPSublox+0xf4e>
 80241e0:	a201      	add	r2, pc, #4	; (adr r2, 80241e8 <analizarTramaGPSublox+0x728>)
 80241e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80241e6:	bf00      	nop
 80241e8:	0802422d 	.word	0x0802422d
 80241ec:	080242fb 	.word	0x080242fb
 80241f0:	080243a3 	.word	0x080243a3
 80241f4:	08024a0f 	.word	0x08024a0f
 80241f8:	080243c3 	.word	0x080243c3
 80241fc:	080245b3 	.word	0x080245b3
 8024200:	08024a0f 	.word	0x08024a0f
 8024204:	08024a0f 	.word	0x08024a0f
 8024208:	08024a0f 	.word	0x08024a0f
 802420c:	08024a0f 	.word	0x08024a0f
 8024210:	08024a0f 	.word	0x08024a0f
 8024214:	08024a0f 	.word	0x08024a0f
 8024218:	08024a0f 	.word	0x08024a0f
 802421c:	08024a0f 	.word	0x08024a0f
 8024220:	08024a0f 	.word	0x08024a0f
 8024224:	08024a0f 	.word	0x08024a0f
 8024228:	08024871 	.word	0x08024871
        case MSG_POSLLH:
            if (driver->tienePVTmsg) {
 802422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024230:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024234:	2b00      	cmp	r3, #0
 8024236:	d00a      	beq.n	802424e <analizarTramaGPSublox+0x78e>
                driver->mensajesNoConfig |= CONFIG_RATE_POSLLH_GPS;
 8024238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802423c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024240:	f043 0202 	orr.w	r2, r3, #2
 8024244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024248:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                break;
 802424c:	e3fb      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
            }
            driver->ultimoTiempoPos = driver->bufferRecepcion.posllh.itow;
 802424e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024252:	681a      	ldr	r2, [r3, #0]
 8024254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024258:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            dGPS->localizacion.longitud = driver->bufferRecepcion.posllh.longitude;
 802425c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024260:	685a      	ldr	r2, [r3, #4]
 8024262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024264:	64da      	str	r2, [r3, #76]	; 0x4c
            dGPS->localizacion.latitud = driver->bufferRecepcion.posllh.latitude;
 8024266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802426a:	689a      	ldr	r2, [r3, #8]
 802426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802426e:	649a      	str	r2, [r3, #72]	; 0x48
            dGPS->localizacion.altitud = driver->bufferRecepcion.posllh.altitudeMsl / 10;
 8024270:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024274:	691b      	ldr	r3, [r3, #16]
 8024276:	4a75      	ldr	r2, [pc, #468]	; (802444c <analizarTramaGPSublox+0x98c>)
 8024278:	fb82 1203 	smull	r1, r2, r2, r3
 802427c:	1092      	asrs	r2, r2, #2
 802427e:	17db      	asrs	r3, r3, #31
 8024280:	1ad2      	subs	r2, r2, r3
 8024282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024284:	645a      	str	r2, [r3, #68]	; 0x44
            dGPS->estado.status = driver->siguienteFix;
 8024286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802428a:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 802428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            driver->nuevaPosicion = true;
 8024294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024298:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 802429c:	f043 0301 	orr.w	r3, r3, #1
 80242a0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            dGPS->estado.precisionHorizontal = driver->bufferRecepcion.posllh.horizontalAccuracy * 1.0e-3f;
 80242a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80242a8:	695b      	ldr	r3, [r3, #20]
 80242aa:	ee07 3a90 	vmov	s15, r3
 80242ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80242b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8024450 <analizarTramaGPSublox+0x990>
 80242b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80242ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80242bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
            dGPS->estado.precisionVertical = driver->bufferRecepcion.posllh.verticalAccuracy * 1.0e-3f;
 80242c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80242c4:	699b      	ldr	r3, [r3, #24]
 80242c6:	ee07 3a90 	vmov	s15, r3
 80242ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80242ce:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8024450 <analizarTramaGPSublox+0x990>
 80242d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80242d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80242d8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            dGPS->estado.tienePrecisionHorizontal = true;
 80242dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80242de:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80242e2:	f043 0304 	orr.w	r3, r3, #4
 80242e6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->estado.tienePrecisionVertical = true;
 80242ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80242ec:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80242f0:	f043 0308 	orr.w	r3, r3, #8
 80242f4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            break;
 80242f8:	e3a5      	b.n	8024a46 <analizarTramaGPSublox+0xf86>

        case MSG_STATUS:
            if (driver->tienePVTmsg) {
 80242fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80242fe:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024302:	2b00      	cmp	r3, #0
 8024304:	d00a      	beq.n	802431c <analizarTramaGPSublox+0x85c>
                driver->mensajesNoConfig |= CONFIG_RATE_STATUS_GPS;
 8024306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802430a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 802430e:	f043 0204 	orr.w	r2, r3, #4
 8024312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024316:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                break;
 802431a:	e394      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
            }
            if (driver->bufferRecepcion.status.fixStatus & NAV_STATUS_FIX_VALID) {
 802431c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024320:	795b      	ldrb	r3, [r3, #5]
 8024322:	f003 0301 	and.w	r3, r3, #1
 8024326:	2b00      	cmp	r3, #0
 8024328:	d031      	beq.n	802438e <analizarTramaGPSublox+0x8ce>
                if ((driver->bufferRecepcion.status.fixType == FIX_3D) && (driver->bufferRecepcion.status.fixStatus & NAV_STATUS_DGPS_USED))
 802432a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802432e:	791b      	ldrb	r3, [r3, #4]
 8024330:	2b03      	cmp	r3, #3
 8024332:	d10c      	bne.n	802434e <analizarTramaGPSublox+0x88e>
 8024334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024338:	795b      	ldrb	r3, [r3, #5]
 802433a:	f003 0302 	and.w	r3, r3, #2
 802433e:	2b00      	cmp	r3, #0
 8024340:	d005      	beq.n	802434e <analizarTramaGPSublox+0x88e>
                    driver->siguienteFix = GPS_OK_FIX_3D_DGPS;
 8024342:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024346:	2204      	movs	r2, #4
 8024348:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            }
            else {
                driver->siguienteFix = NO_FIX;
                dGPS->estado.status = NO_FIX;
            }
            break;
 802434c:	e37b      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
                else if (driver->bufferRecepcion.status.fixType == FIX_3D)
 802434e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024352:	791b      	ldrb	r3, [r3, #4]
 8024354:	2b03      	cmp	r3, #3
 8024356:	d105      	bne.n	8024364 <analizarTramaGPSublox+0x8a4>
                    driver->siguienteFix = GPS_OK_FIX_3D;
 8024358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802435c:	2203      	movs	r2, #3
 802435e:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            break;
 8024362:	e370      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
                else if (driver->bufferRecepcion.status.fixType == FIX_2D)
 8024364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024368:	791b      	ldrb	r3, [r3, #4]
 802436a:	2b02      	cmp	r3, #2
 802436c:	d105      	bne.n	802437a <analizarTramaGPSublox+0x8ba>
                    driver->siguienteFix = GPS_OK_FIX_2D;
 802436e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024372:	2202      	movs	r2, #2
 8024374:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            break;
 8024378:	e365      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
                    driver->siguienteFix = NO_FIX;
 802437a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802437e:	2201      	movs	r2, #1
 8024380:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                    dGPS->estado.status = NO_FIX;
 8024384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024386:	2201      	movs	r2, #1
 8024388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 802438c:	e35b      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
                driver->siguienteFix = NO_FIX;
 802438e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024392:	2201      	movs	r2, #1
 8024394:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
                dGPS->estado.status = NO_FIX;
 8024398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802439a:	2201      	movs	r2, #1
 802439c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80243a0:	e351      	b.n	8024a46 <analizarTramaGPSublox+0xf86>

        case MSG_DOP:
            driver->hdopNoRecibido = false;
 80243a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243a6:	2200      	movs	r2, #0
 80243a8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            dGPS->estado.hdop = driver->bufferRecepcion.dop.hDOP;
 80243ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243b0:	899a      	ldrh	r2, [r3, #12]
 80243b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80243b4:	855a      	strh	r2, [r3, #42]	; 0x2a
            dGPS->estado.vdop = driver->bufferRecepcion.dop.vDOP;
 80243b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243ba:	895a      	ldrh	r2, [r3, #10]
 80243bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80243be:	859a      	strh	r2, [r3, #44]	; 0x2c
            break;
 80243c0:	e341      	b.n	8024a46 <analizarTramaGPSublox+0xf86>

        case MSG_SOL:
            if (driver->tienePVTmsg) {
 80243c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243c6:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80243ca:	2b00      	cmp	r3, #0
 80243cc:	d005      	beq.n	80243da <analizarTramaGPSublox+0x91a>
            	dGPS->estado.numSemana = driver->bufferRecepcion.solution.week;
 80243ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243d2:	891a      	ldrh	r2, [r3, #8]
 80243d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80243d6:	851a      	strh	r2, [r3, #40]	; 0x28
                break;
 80243d8:	e335      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
            }
            if (driver->bufferRecepcion.solution.fixStatus & NAV_STATUS_FIX_VALID) {
 80243da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243de:	7adb      	ldrb	r3, [r3, #11]
 80243e0:	f003 0301 	and.w	r3, r3, #1
 80243e4:	2b00      	cmp	r3, #0
 80243e6:	d035      	beq.n	8024454 <analizarTramaGPSublox+0x994>
                if ((driver->bufferRecepcion.solution.fixType == FIX_3D) && (driver->bufferRecepcion.solution.fixStatus & NAV_STATUS_DGPS_USED))
 80243e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243ec:	7a9b      	ldrb	r3, [r3, #10]
 80243ee:	2b03      	cmp	r3, #3
 80243f0:	d10c      	bne.n	802440c <analizarTramaGPSublox+0x94c>
 80243f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243f6:	7adb      	ldrb	r3, [r3, #11]
 80243f8:	f003 0302 	and.w	r3, r3, #2
 80243fc:	2b00      	cmp	r3, #0
 80243fe:	d005      	beq.n	802440c <analizarTramaGPSublox+0x94c>
                    driver->siguienteFix = GPS_OK_FIX_3D_DGPS;
 8024400:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024404:	2304      	movs	r3, #4
 8024406:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
 802440a:	e02c      	b.n	8024466 <analizarTramaGPSublox+0x9a6>
                else if (driver->bufferRecepcion.solution.fixType == FIX_3D)
 802440c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024410:	7a9b      	ldrb	r3, [r3, #10]
 8024412:	2b03      	cmp	r3, #3
 8024414:	d105      	bne.n	8024422 <analizarTramaGPSublox+0x962>
                    driver->siguienteFix = GPS_OK_FIX_3D;
 8024416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802441a:	2303      	movs	r3, #3
 802441c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
 8024420:	e021      	b.n	8024466 <analizarTramaGPSublox+0x9a6>
                else if (driver->bufferRecepcion.solution.fixType == FIX_2D)
 8024422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024426:	7a9b      	ldrb	r3, [r3, #10]
 8024428:	2b02      	cmp	r3, #2
 802442a:	d105      	bne.n	8024438 <analizarTramaGPSublox+0x978>
                    driver->siguienteFix = GPS_OK_FIX_2D;
 802442c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024430:	2302      	movs	r3, #2
 8024432:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
 8024436:	e016      	b.n	8024466 <analizarTramaGPSublox+0x9a6>
                else {
                    driver->siguienteFix = NO_FIX;
 8024438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802443c:	2301      	movs	r3, #1
 802443e:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
                    dGPS->estado.status = NO_FIX;
 8024442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024444:	2301      	movs	r3, #1
 8024446:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 802444a:	e00c      	b.n	8024466 <analizarTramaGPSublox+0x9a6>
 802444c:	66666667 	.word	0x66666667
 8024450:	3a83126f 	.word	0x3a83126f
                }
            }
            else {
                driver->siguienteFix = NO_FIX;
 8024454:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024458:	2301      	movs	r3, #1
 802445a:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
                dGPS->estado.status = NO_FIX;
 802445e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024460:	2301      	movs	r3, #1
 8024462:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            }
            if (driver->hdopNoRecibido)
 8024466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802446a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 802446e:	2b00      	cmp	r3, #0
 8024470:	d004      	beq.n	802447c <analizarTramaGPSublox+0x9bc>
            	dGPS->estado.hdop = driver->bufferRecepcion.solution.positionDOP;
 8024472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8024478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802447a:	8553      	strh	r3, [r2, #42]	; 0x2a

            dGPS->estado.numSats = driver->bufferRecepcion.solution.satellites;
 802447c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8024484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024486:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            if (driver->siguienteFix >= GPS_OK_FIX_2D) {
 802448a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802448e:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8024492:	2b01      	cmp	r3, #1
 8024494:	f240 82d6 	bls.w	8024a44 <analizarTramaGPSublox+0xf84>
            	dGPS->estado.ultimaHoraGPSms = millis();
 8024498:	f7f3 fb5c 	bl	8017b54 <millis>
 802449c:	4602      	mov	r2, r0
 802449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244a0:	641a      	str	r2, [r3, #64]	; 0x40
            	dGPS->estado.horaSemana = driver->bufferRecepcion.solution.itow;
 80244a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80244a6:	681a      	ldr	r2, [r3, #0]
 80244a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244aa:	625a      	str	r2, [r3, #36]	; 0x24
            	dGPS->estado.numSemana = driver->bufferRecepcion.solution.week;
 80244ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80244b0:	891b      	ldrh	r3, [r3, #8]
 80244b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80244b4:	8513      	strh	r3, [r2, #40]	; 0x28
#ifdef USAR_RTC
                // Ajustamos el RTC
                if (!tieneHoraRTC() && (driver->bufferRecepcion.solution.fixStatus & NAV_STATUS_TIME_SECOND_VALID) && (driver->bufferRecepcion.solution.fixStatus & NAV_STATUS_TIME_WEEK_VALID)) {
 80244b6:	f7f2 f9cf 	bl	8016858 <tieneHoraRTC>
 80244ba:	4603      	mov	r3, r0
 80244bc:	f083 0301 	eor.w	r3, r3, #1
 80244c0:	b2db      	uxtb	r3, r3
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	f000 82be 	beq.w	8024a44 <analizarTramaGPSublox+0xf84>
 80244c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80244cc:	7adb      	ldrb	r3, [r3, #11]
 80244ce:	f003 0308 	and.w	r3, r3, #8
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	f000 82b6 	beq.w	8024a44 <analizarTramaGPSublox+0xf84>
 80244d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80244dc:	7adb      	ldrb	r3, [r3, #11]
 80244de:	f003 0304 	and.w	r3, r3, #4
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	f000 82ae 	beq.w	8024a44 <analizarTramaGPSublox+0xf84>
                    //Calculamos el tiempo Unix: numero de semana * ms en una semana + ms de la semana + fracciones de segundo + offset del UNIX - 18 segundos de desfase entre tiempo Unix y el GPS
                    int64_t tiempoUnix = (((int64_t) driver->bufferRecepcion.solution.week) * 7 * 24 * 60 * 60 * 1000) + driver->bufferRecepcion.solution.itow + (driver->bufferRecepcion.solution.timeNsec / 1000000) + 315964800000LL - configRTC()->offsetGPSutc * 1000;
 80244e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80244ec:	891b      	ldrh	r3, [r3, #8]
 80244ee:	b29b      	uxth	r3, r3
 80244f0:	2200      	movs	r2, #0
 80244f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80244f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80244f6:	4b6b      	ldr	r3, [pc, #428]	; (80246a4 <analizarTramaGPSublox+0xbe4>)
 80244f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80244fc:	460a      	mov	r2, r1
 80244fe:	fb03 f202 	mul.w	r2, r3, r2
 8024502:	2300      	movs	r3, #0
 8024504:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8024508:	4601      	mov	r1, r0
 802450a:	fb01 f303 	mul.w	r3, r1, r3
 802450e:	441a      	add	r2, r3
 8024510:	4b64      	ldr	r3, [pc, #400]	; (80246a4 <analizarTramaGPSublox+0xbe4>)
 8024512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024514:	fba1 4503 	umull	r4, r5, r1, r3
 8024518:	1953      	adds	r3, r2, r5
 802451a:	461d      	mov	r5, r3
 802451c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024520:	681b      	ldr	r3, [r3, #0]
 8024522:	2200      	movs	r2, #0
 8024524:	623b      	str	r3, [r7, #32]
 8024526:	627a      	str	r2, [r7, #36]	; 0x24
 8024528:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802452c:	460b      	mov	r3, r1
 802452e:	18e3      	adds	r3, r4, r3
 8024530:	61bb      	str	r3, [r7, #24]
 8024532:	4613      	mov	r3, r2
 8024534:	eb45 0303 	adc.w	r3, r5, r3
 8024538:	61fb      	str	r3, [r7, #28]
 802453a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802453e:	6859      	ldr	r1, [r3, #4]
 8024540:	4b59      	ldr	r3, [pc, #356]	; (80246a8 <analizarTramaGPSublox+0xbe8>)
 8024542:	fb83 2301 	smull	r2, r3, r3, r1
 8024546:	149a      	asrs	r2, r3, #18
 8024548:	17cb      	asrs	r3, r1, #31
 802454a:	1ad3      	subs	r3, r2, r3
 802454c:	17da      	asrs	r2, r3, #31
 802454e:	613b      	str	r3, [r7, #16]
 8024550:	617a      	str	r2, [r7, #20]
 8024552:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8024556:	4623      	mov	r3, r4
 8024558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802455c:	4602      	mov	r2, r0
 802455e:	eb13 0a02 	adds.w	sl, r3, r2
 8024562:	462b      	mov	r3, r5
 8024564:	460a      	mov	r2, r1
 8024566:	eb43 0b02 	adc.w	fp, r3, r2
 802456a:	4b50      	ldr	r3, [pc, #320]	; (80246ac <analizarTramaGPSublox+0xbec>)
 802456c:	eb1a 0803 	adds.w	r8, sl, r3
 8024570:	f14b 0949 	adc.w	r9, fp, #73	; 0x49
 8024574:	f7fe fd9e 	bl	80230b4 <configRTC>
 8024578:	4603      	mov	r3, r0
 802457a:	789b      	ldrb	r3, [r3, #2]
 802457c:	461a      	mov	r2, r3
 802457e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024582:	fb02 f303 	mul.w	r3, r2, r3
 8024586:	17da      	asrs	r2, r3, #31
 8024588:	60bb      	str	r3, [r7, #8]
 802458a:	60fa      	str	r2, [r7, #12]
 802458c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8024590:	460b      	mov	r3, r1
 8024592:	ebb8 0303 	subs.w	r3, r8, r3
 8024596:	603b      	str	r3, [r7, #0]
 8024598:	4613      	mov	r3, r2
 802459a:	eb69 0303 	sbc.w	r3, r9, r3
 802459e:	607b      	str	r3, [r7, #4]
 80245a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80245a4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
                    ajustarUnixRTC(tiempoUnix);
 80245a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80245ac:	f7f2 f966 	bl	801687c <ajustarUnixRTC>
                }
#endif
            }
            break;
 80245b0:	e248      	b.n	8024a44 <analizarTramaGPSublox+0xf84>

        case MSG_PVT:
            driver->tienePVTmsg = true;
 80245b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245b6:	2201      	movs	r2, #1
 80245b8:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d

            // Posicion
            driver->ultimoTiempoPos = driver->bufferRecepcion.pvt.itow;
 80245bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245c0:	681a      	ldr	r2, [r3, #0]
 80245c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            dGPS->localizacion.longitud = driver->bufferRecepcion.pvt.lon;
 80245ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245ce:	699a      	ldr	r2, [r3, #24]
 80245d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80245d2:	64da      	str	r2, [r3, #76]	; 0x4c
            dGPS->localizacion.latitud = driver->bufferRecepcion.pvt.lat;
 80245d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245d8:	69da      	ldr	r2, [r3, #28]
 80245da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80245dc:	649a      	str	r2, [r3, #72]	; 0x48
            dGPS->localizacion.altitud = driver->bufferRecepcion.pvt.h_msl / 10;
 80245de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80245e4:	4a32      	ldr	r2, [pc, #200]	; (80246b0 <analizarTramaGPSublox+0xbf0>)
 80245e6:	fb82 1203 	smull	r1, r2, r2, r3
 80245ea:	1092      	asrs	r2, r2, #2
 80245ec:	17db      	asrs	r3, r3, #31
 80245ee:	1ad2      	subs	r2, r2, r3
 80245f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80245f2:	645a      	str	r2, [r3, #68]	; 0x44
            switch (driver->bufferRecepcion.pvt.fixType) {
 80245f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80245f8:	7d1b      	ldrb	r3, [r3, #20]
 80245fa:	2b05      	cmp	r3, #5
 80245fc:	d84c      	bhi.n	8024698 <analizarTramaGPSublox+0xbd8>
 80245fe:	a201      	add	r2, pc, #4	; (adr r2, 8024604 <analizarTramaGPSublox+0xb44>)
 8024600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024604:	0802461d 	.word	0x0802461d
 8024608:	08024627 	.word	0x08024627
 802460c:	08024631 	.word	0x08024631
 8024610:	0802463b 	.word	0x0802463b
 8024614:	08024685 	.word	0x08024685
 8024618:	0802468f 	.word	0x0802468f
                case 0:
                	dGPS->estado.status = NO_FIX;
 802461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802461e:	2201      	movs	r2, #1
 8024620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 8024624:	e04d      	b.n	80246c2 <analizarTramaGPSublox+0xc02>

                case 1:
                	dGPS->estado.status = NO_FIX;
 8024626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024628:	2201      	movs	r2, #1
 802462a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 802462e:	e048      	b.n	80246c2 <analizarTramaGPSublox+0xc02>

                case 2:
                	dGPS->estado.status = GPS_OK_FIX_2D;
 8024630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024632:	2202      	movs	r2, #2
 8024634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 8024638:	e043      	b.n	80246c2 <analizarTramaGPSublox+0xc02>

                case 3:
                	dGPS->estado.status = GPS_OK_FIX_3D;
 802463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802463c:	2203      	movs	r2, #3
 802463e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    if (driver->bufferRecepcion.pvt.flags & 0b00000010)  // Se han aplicado correcciones diferenciales
 8024642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024646:	7d5b      	ldrb	r3, [r3, #21]
 8024648:	f003 0302 	and.w	r3, r3, #2
 802464c:	2b00      	cmp	r3, #0
 802464e:	d003      	beq.n	8024658 <analizarTramaGPSublox+0xb98>
                    	dGPS->estado.status = GPS_OK_FIX_3D_DGPS;
 8024650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024652:	2204      	movs	r2, #4
 8024654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    if (driver->bufferRecepcion.pvt.flags & 0b01000000)  // carrsoln - float
 8024658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802465c:	7d5b      	ldrb	r3, [r3, #21]
 802465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024662:	2b00      	cmp	r3, #0
 8024664:	d003      	beq.n	802466e <analizarTramaGPSublox+0xbae>
                    	dGPS->estado.status = GPS_OK_FIX_3D_RTK_FLOAT;
 8024666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024668:	2205      	movs	r2, #5
 802466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    if (driver->bufferRecepcion.pvt.flags & 0b10000000)  // carrsoln - fixed
 802466e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024672:	7d5b      	ldrb	r3, [r3, #21]
 8024674:	b25b      	sxtb	r3, r3
 8024676:	2b00      	cmp	r3, #0
 8024678:	da22      	bge.n	80246c0 <analizarTramaGPSublox+0xc00>
                    	dGPS->estado.status = GPS_OK_FIX_3D_RTK_FIXED;
 802467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802467c:	2206      	movs	r2, #6
 802467e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 8024682:	e01d      	b.n	80246c0 <analizarTramaGPSublox+0xc00>

                case 4:
                	dGPS->estado.status = GPS_OK_FIX_3D;
 8024684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024686:	2203      	movs	r2, #3
 8024688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 802468c:	e019      	b.n	80246c2 <analizarTramaGPSublox+0xc02>

                case 5:
                	dGPS->estado.status = NO_FIX;
 802468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024690:	2201      	movs	r2, #1
 8024692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 8024696:	e014      	b.n	80246c2 <analizarTramaGPSublox+0xc02>

                default:
                	dGPS->estado.status = NO_FIX;
 8024698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802469a:	2201      	movs	r2, #1
 802469c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 80246a0:	e00f      	b.n	80246c2 <analizarTramaGPSublox+0xc02>
 80246a2:	bf00      	nop
 80246a4:	240c8400 	.word	0x240c8400
 80246a8:	431bde83 	.word	0x431bde83
 80246ac:	90f83c00 	.word	0x90f83c00
 80246b0:	66666667 	.word	0x66666667
 80246b4:	3a83126f 	.word	0x3a83126f
 80246b8:	3727c5ac 	.word	0x3727c5ac
 80246bc:	3c23d70a 	.word	0x3c23d70a
                    break;
 80246c0:	bf00      	nop
            }
            driver->siguienteFix = dGPS->estado.status;
 80246c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246c4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80246c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80246cc:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            driver->nuevaPosicion = true;
 80246d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80246d4:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 80246d8:	f043 0301 	orr.w	r3, r3, #1
 80246dc:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            dGPS->estado.precisionHorizontal = driver->bufferRecepcion.pvt.hAcc * 1.0e-3f;
 80246e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80246e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246e6:	ee07 3a90 	vmov	s15, r3
 80246ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80246ee:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 80246f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80246f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246f8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
            dGPS->estado.precisionVertical = driver->bufferRecepcion.pvt.vAcc * 1.0e-3f;
 80246fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024702:	ee07 3a90 	vmov	s15, r3
 8024706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802470a:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 802470e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024714:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            dGPS->estado.tienePrecisionHorizontal = true;
 8024718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802471a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 802471e:	f043 0304 	orr.w	r3, r3, #4
 8024722:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->estado.tienePrecisionVertical = true;
 8024726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024728:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 802472c:	f043 0308 	orr.w	r3, r3, #8
 8024730:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

            // Satelites
            dGPS->estado.numSats = driver->bufferRecepcion.pvt.numSv;
 8024734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024738:	7dda      	ldrb	r2, [r3, #23]
 802473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802473c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            // Velocidad
            driver->ultimoTiempoVel = driver->bufferRecepcion.pvt.itow;
 8024740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024744:	681a      	ldr	r2, [r3, #0]
 8024746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802474a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            dGPS->vel2d = driver->bufferRecepcion.pvt.gspeed * 0.001f;                          // m/s
 802474e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024754:	ee07 3a90 	vmov	s15, r3
 8024758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802475c:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 8024760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024766:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            dGPS->velAngular = envolverInt360(driver->bufferRecepcion.pvt.head_mot * 1.0e-5f, 1);  // Heading 2D deg * 100000
 802476a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024770:	ee07 3a90 	vmov	s15, r3
 8024774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024778:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 80246b8 <analizarTramaGPSublox+0xbf8>
 802477c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024788:	ee17 0a90 	vmov	r0, s15
 802478c:	f7ee ffdc 	bl	8013748 <envolverInt360>
 8024790:	eef0 7a40 	vmov.f32	s15, s0
 8024794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024796:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
            dGPS->estado.tieneVelVertical = true;
 802479a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802479c:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80247a0:	f043 0301 	orr.w	r3, r3, #1
 80247a4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->velocidad.norte = driver->bufferRecepcion.pvt.velN * 0.001f;
 80247a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80247ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247ae:	ee07 3a90 	vmov	s15, r3
 80247b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80247b6:	ed1f 7a41 	vldr	s14, [pc, #-260]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 80247ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80247be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247c0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            dGPS->velocidad.este = driver->bufferRecepcion.pvt.velE * 0.001f;
 80247c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80247c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80247ca:	ee07 3a90 	vmov	s15, r3
 80247ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80247d2:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 80247d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80247da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247dc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            dGPS->velocidad.vertical = driver->bufferRecepcion.pvt.velD * 0.001f;
 80247e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80247e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80247e6:	ee07 3a90 	vmov	s15, r3
 80247ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80247ee:	ed1f 7a4f 	vldr	s14, [pc, #-316]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 80247f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80247f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247f8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            dGPS->estado.tienePrecisionVel = true;
 80247fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247fe:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8024802:	f043 0302 	orr.w	r3, r3, #2
 8024806:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->estado.precisionVel = driver->bufferRecepcion.pvt.sAcc * 0.001f;
 802480a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024810:	ee07 3a90 	vmov	s15, r3
 8024814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024818:	ed1f 7a5a 	vldr	s14, [pc, #-360]	; 80246b4 <analizarTramaGPSublox+0xbf4>
 802481c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024822:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            driver->nuevaVelocidad = true;
 8024826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802482a:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 802482e:	f043 0302 	orr.w	r3, r3, #2
 8024832:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128

            // DOP
            if (driver->hdopNoRecibido) {
 8024836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802483a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 802483e:	2b00      	cmp	r3, #0
 8024840:	d00b      	beq.n	802485a <analizarTramaGPSublox+0xd9a>
            	dGPS->estado.hdop = driver->bufferRecepcion.pvt.pDop;
 8024842:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024846:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 802484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802484c:	855a      	strh	r2, [r3, #42]	; 0x2a
            	dGPS->estado.vdop = driver->bufferRecepcion.pvt.pDop;
 802484e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024852:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8024856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024858:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            dGPS->estado.ultimaHoraGPSms = millis();
 802485a:	f7f3 f97b 	bl	8017b54 <millis>
 802485e:	4602      	mov	r2, r0
 8024860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024862:	641a      	str	r2, [r3, #64]	; 0x40

            // Tiempo
            dGPS->estado.horaSemana = driver->bufferRecepcion.pvt.itow;
 8024864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024868:	681a      	ldr	r2, [r3, #0]
 802486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802486c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 802486e:	e0ea      	b.n	8024a46 <analizarTramaGPSublox+0xf86>

        case MSG_VELNED:
            if (driver->tienePVTmsg) {
 8024870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024874:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024878:	2b00      	cmp	r3, #0
 802487a:	d00a      	beq.n	8024892 <analizarTramaGPSublox+0xdd2>
                driver->mensajesNoConfig |= CONFIG_RATE_VELNED_GPS;
 802487c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024880:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024884:	f043 0210 	orr.w	r2, r3, #16
 8024888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802488c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                break;
 8024890:	e0d9      	b.n	8024a46 <analizarTramaGPSublox+0xf86>
            }
            driver->ultimoTiempoVel = driver->bufferRecepcion.velned.itow;
 8024892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024896:	681a      	ldr	r2, [r3, #0]
 8024898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802489c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            dGPS->vel2d = driver->bufferRecepcion.velned.speed2d * 0.01f;                       // m/s
 80248a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80248a4:	695b      	ldr	r3, [r3, #20]
 80248a6:	ee07 3a90 	vmov	s15, r3
 80248aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80248ae:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 80246bc <analizarTramaGPSublox+0xbfc>
 80248b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80248b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248b8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            dGPS->velAngular = envolverInt360(driver->bufferRecepcion.velned.heading2d * 1.0e-5f, 1);    // Heading 2D deg * 100000
 80248bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80248c0:	699b      	ldr	r3, [r3, #24]
 80248c2:	ee07 3a90 	vmov	s15, r3
 80248c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80248ca:	ed1f 7a85 	vldr	s14, [pc, #-532]	; 80246b8 <analizarTramaGPSublox+0xbf8>
 80248ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80248d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80248d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80248da:	ee17 0a90 	vmov	r0, s15
 80248de:	f7ee ff33 	bl	8013748 <envolverInt360>
 80248e2:	eef0 7a40 	vmov.f32	s15, s0
 80248e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248e8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
            dGPS->estado.tieneVelVertical = true;
 80248ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80248ee:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80248f2:	f043 0301 	orr.w	r3, r3, #1
 80248f6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->velocidad.norte = driver->bufferRecepcion.velned.nedNorth * 0.01f;
 80248fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80248fe:	685b      	ldr	r3, [r3, #4]
 8024900:	ee07 3a90 	vmov	s15, r3
 8024904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024908:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 80246bc <analizarTramaGPSublox+0xbfc>
 802490c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024912:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            dGPS->velocidad.este = driver->bufferRecepcion.velned.nedEast * 0.01f;
 8024916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802491a:	689b      	ldr	r3, [r3, #8]
 802491c:	ee07 3a90 	vmov	s15, r3
 8024920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024924:	ed1f 7a9b 	vldr	s14, [pc, #-620]	; 80246bc <analizarTramaGPSublox+0xbfc>
 8024928:	ee67 7a87 	vmul.f32	s15, s15, s14
 802492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802492e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            dGPS->velocidad.vertical = driver->bufferRecepcion.velned.nedDown * 0.01f;
 8024932:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024936:	68db      	ldr	r3, [r3, #12]
 8024938:	ee07 3a90 	vmov	s15, r3
 802493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024940:	ed1f 7aa2 	vldr	s14, [pc, #-648]	; 80246bc <analizarTramaGPSublox+0xbfc>
 8024944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802494a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            dGPS->velAngular = envolverInt360(grados(atan2f(dGPS->velocidad.este, dGPS->velocidad.norte)), 1);
 802494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024950:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8024954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024956:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 802495a:	eef0 0a47 	vmov.f32	s1, s14
 802495e:	eeb0 0a67 	vmov.f32	s0, s15
 8024962:	f014 fc61 	bl	8039228 <atan2f>
 8024966:	eef0 7a40 	vmov.f32	s15, s0
 802496a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802496e:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8024ac0 <analizarTramaGPSublox+0x1000>
 8024972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024976:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802497a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802497e:	ee17 0a90 	vmov	r0, s15
 8024982:	f7ee fee1 	bl	8013748 <envolverInt360>
 8024986:	eef0 7a40 	vmov.f32	s15, s0
 802498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802498c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
            dGPS->vel2d = sqrtf(powf((float)dGPS->velocidad.este, 2) + powf((float)dGPS->velocidad.norte, 2));
 8024990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024992:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8024996:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 802499a:	eeb0 0a67 	vmov.f32	s0, s15
 802499e:	f014 f9a7 	bl	8038cf0 <powf>
 80249a2:	eeb0 8a40 	vmov.f32	s16, s0
 80249a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249a8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80249ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80249b0:	eeb0 0a67 	vmov.f32	s0, s15
 80249b4:	f014 f99c 	bl	8038cf0 <powf>
 80249b8:	eef0 7a40 	vmov.f32	s15, s0
 80249bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80249c0:	eeb0 0a67 	vmov.f32	s0, s15
 80249c4:	f014 fc52 	bl	803926c <sqrtf>
 80249c8:	eef0 7a40 	vmov.f32	s15, s0
 80249cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249ce:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            dGPS->estado.tienePrecisionVel = true;
 80249d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80249d4:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80249d8:	f043 0302 	orr.w	r3, r3, #2
 80249dc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            dGPS->estado.precisionVel = driver->bufferRecepcion.velned.speedAccuracy * 0.01f;
 80249e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80249e4:	69db      	ldr	r3, [r3, #28]
 80249e6:	ee07 3a90 	vmov	s15, r3
 80249ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80249ee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8024ac8 <analizarTramaGPSublox+0x1008>
 80249f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80249f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
            driver->nuevaVelocidad = true;
 80249fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024a00:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 8024a04:	f043 0302 	orr.w	r3, r3, #2
 8024a08:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            break;
 8024a0c:	e01b      	b.n	8024a46 <analizarTramaGPSublox+0xf86>

        default:
            if (++driver->contadorDeshabilitacion == 0)
 8024a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a12:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8024a16:	3301      	adds	r3, #1
 8024a18:	b2da      	uxtb	r2, r3
 8024a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a1e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8024a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a26:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	d108      	bne.n	8024a40 <analizarTramaGPSublox+0xf80>
                configurarFrecuenciaMensajeGPSublox(dGPS, CLASS_NAV, driver->idMensaje, 0);
 8024a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a32:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 8024a36:	2300      	movs	r3, #0
 8024a38:	2101      	movs	r1, #1
 8024a3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024a3c:	f000 f95c 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
            return false;
 8024a40:	2300      	movs	r3, #0
 8024a42:	e036      	b.n	8024ab2 <analizarTramaGPSublox+0xff2>
            break;
 8024a44:	bf00      	nop
    }

    // solo devolvemos true cuando obtenemos nuevos datos de posición y velocidad
    if (driver->nuevaPosicion && driver->nuevaVelocidad && driver->ultimoTiempoVel == driver->ultimoTiempoPos) {
 8024a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a4a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8024a4e:	f003 0301 	and.w	r3, r3, #1
 8024a52:	b2db      	uxtb	r3, r3
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d02b      	beq.n	8024ab0 <analizarTramaGPSublox+0xff0>
 8024a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a5c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8024a60:	f003 0302 	and.w	r3, r3, #2
 8024a64:	b2db      	uxtb	r3, r3
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d022      	beq.n	8024ab0 <analizarTramaGPSublox+0xff0>
 8024a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a6e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8024a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8024a7a:	429a      	cmp	r2, r3
 8024a7c:	d118      	bne.n	8024ab0 <analizarTramaGPSublox+0xff0>
        driver->nuevaVelocidad = driver->nuevaPosicion = false;
 8024a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024a82:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 8024a86:	f36f 0300 	bfc	r3, #0, #1
 8024a8a:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
 8024a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a92:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8024a96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024a9a:	b2d9      	uxtb	r1, r3
 8024a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024aa0:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 8024aa4:	f361 0341 	bfi	r3, r1, #1, #1
 8024aa8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
        return true;
 8024aac:	2301      	movs	r3, #1
 8024aae:	e000      	b.n	8024ab2 <analizarTramaGPSublox+0xff2>
    }
    return false;
 8024ab0:	2300      	movs	r3, #0
}
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	3788      	adds	r7, #136	; 0x88
 8024ab6:	46bd      	mov	sp, r7
 8024ab8:	ecbd 8b02 	vpop	{d8}
 8024abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024ac0:	1a63c1f8 	.word	0x1a63c1f8
 8024ac4:	404ca5dc 	.word	0x404ca5dc
 8024ac8:	3c23d70a 	.word	0x3c23d70a

08024acc <verificarFrecuenciaMensajeGPSublox>:
**  Descripcion:    Verifica la frecuencia de envio del mensaje y si es incorrecta la corrige
**  Parametros:     Puntero al GPS, clase de mensaje, id, frecuencia
**  Retorno:        Ninguno
****************************************************************************************/
void verificarFrecuenciaMensajeGPSublox(gps_t *dGPS, uint8_t clase, uint8_t id, uint8_t frec)
{
 8024acc:	b580      	push	{r7, lr}
 8024ace:	b084      	sub	sp, #16
 8024ad0:	af00      	add	r7, sp, #0
 8024ad2:	6078      	str	r0, [r7, #4]
 8024ad4:	4608      	mov	r0, r1
 8024ad6:	4611      	mov	r1, r2
 8024ad8:	461a      	mov	r2, r3
 8024ada:	4603      	mov	r3, r0
 8024adc:	70fb      	strb	r3, [r7, #3]
 8024ade:	460b      	mov	r3, r1
 8024ae0:	70bb      	strb	r3, [r7, #2]
 8024ae2:	4613      	mov	r3, r2
 8024ae4:	707b      	strb	r3, [r7, #1]
    gpsUblox_t *driver = dGPS->driver;
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	68db      	ldr	r3, [r3, #12]
 8024aea:	60fb      	str	r3, [r7, #12]
    uint8_t frecuenciaDeseada;

    switch (clase) {
 8024aec:	78fb      	ldrb	r3, [r7, #3]
 8024aee:	2b01      	cmp	r3, #1
 8024af0:	f040 80fd 	bne.w	8024cee <verificarFrecuenciaMensajeGPSublox+0x222>
        case CLASS_NAV:
            switch (id) {
 8024af4:	78bb      	ldrb	r3, [r7, #2]
 8024af6:	3b02      	subs	r3, #2
 8024af8:	2b10      	cmp	r3, #16
 8024afa:	f200 80f7 	bhi.w	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
 8024afe:	a201      	add	r2, pc, #4	; (adr r2, 8024b04 <verificarFrecuenciaMensajeGPSublox+0x38>)
 8024b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b04:	08024b49 	.word	0x08024b49
 8024b08:	08024b97 	.word	0x08024b97
 8024b0c:	08024caf 	.word	0x08024caf
 8024b10:	08024ced 	.word	0x08024ced
 8024b14:	08024be5 	.word	0x08024be5
 8024b18:	08024c23 	.word	0x08024c23
 8024b1c:	08024ced 	.word	0x08024ced
 8024b20:	08024ced 	.word	0x08024ced
 8024b24:	08024ced 	.word	0x08024ced
 8024b28:	08024ced 	.word	0x08024ced
 8024b2c:	08024ced 	.word	0x08024ced
 8024b30:	08024ced 	.word	0x08024ced
 8024b34:	08024ced 	.word	0x08024ced
 8024b38:	08024ced 	.word	0x08024ced
 8024b3c:	08024ced 	.word	0x08024ced
 8024b40:	08024ced 	.word	0x08024ced
 8024b44:	08024c61 	.word	0x08024c61
                case MSG_POSLLH:
                    frecuenciaDeseada = driver->tienePVTmsg ? 0 : UBX_RATE_POSLLH;
 8024b48:	68fb      	ldr	r3, [r7, #12]
 8024b4a:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024b4e:	f083 0301 	eor.w	r3, r3, #1
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	72fb      	strb	r3, [r7, #11]
                    if (frec == frecuenciaDeseada)
 8024b56:	787a      	ldrb	r2, [r7, #1]
 8024b58:	7afb      	ldrb	r3, [r7, #11]
 8024b5a:	429a      	cmp	r2, r3
 8024b5c:	d108      	bne.n	8024b70 <verificarFrecuenciaMensajeGPSublox+0xa4>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_POSLLH_GPS;
 8024b5e:	68fb      	ldr	r3, [r7, #12]
 8024b60:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024b64:	f023 0202 	bic.w	r2, r3, #2
 8024b68:	68fb      	ldr	r3, [r7, #12]
 8024b6a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
                        driver->mensajesNoConfig |= CONFIG_RATE_POSLLH_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024b6e:	e0bd      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
 8024b70:	7afb      	ldrb	r3, [r7, #11]
 8024b72:	78ba      	ldrb	r2, [r7, #2]
 8024b74:	78f9      	ldrb	r1, [r7, #3]
 8024b76:	6878      	ldr	r0, [r7, #4]
 8024b78:	f000 f8be 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_POSLLH_GPS;
 8024b7c:	68fb      	ldr	r3, [r7, #12]
 8024b7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024b82:	f043 0202 	orr.w	r2, r3, #2
 8024b86:	68fb      	ldr	r3, [r7, #12]
 8024b88:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024b8c:	68fb      	ldr	r3, [r7, #12]
 8024b8e:	2201      	movs	r2, #1
 8024b90:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024b94:	e0aa      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>

                case MSG_STATUS:
                    frecuenciaDeseada = driver->tienePVTmsg ? 0 : UBX_RATE_STATUS;
 8024b96:	68fb      	ldr	r3, [r7, #12]
 8024b98:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024b9c:	f083 0301 	eor.w	r3, r3, #1
 8024ba0:	b2db      	uxtb	r3, r3
 8024ba2:	72fb      	strb	r3, [r7, #11]
                    if (frec == frecuenciaDeseada)
 8024ba4:	787a      	ldrb	r2, [r7, #1]
 8024ba6:	7afb      	ldrb	r3, [r7, #11]
 8024ba8:	429a      	cmp	r2, r3
 8024baa:	d108      	bne.n	8024bbe <verificarFrecuenciaMensajeGPSublox+0xf2>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_STATUS_GPS;
 8024bac:	68fb      	ldr	r3, [r7, #12]
 8024bae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024bb2:	f023 0204 	bic.w	r2, r3, #4
 8024bb6:	68fb      	ldr	r3, [r7, #12]
 8024bb8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
                        driver->mensajesNoConfig |= CONFIG_RATE_STATUS_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024bbc:	e096      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
 8024bbe:	7afb      	ldrb	r3, [r7, #11]
 8024bc0:	78ba      	ldrb	r2, [r7, #2]
 8024bc2:	78f9      	ldrb	r1, [r7, #3]
 8024bc4:	6878      	ldr	r0, [r7, #4]
 8024bc6:	f000 f897 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_STATUS_GPS;
 8024bca:	68fb      	ldr	r3, [r7, #12]
 8024bcc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024bd0:	f043 0204 	orr.w	r2, r3, #4
 8024bd4:	68fb      	ldr	r3, [r7, #12]
 8024bd6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024bda:	68fb      	ldr	r3, [r7, #12]
 8024bdc:	2201      	movs	r2, #1
 8024bde:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024be2:	e083      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>

                case MSG_SOL:
                    if (frec == UBX_RATE_SOL)
 8024be4:	787b      	ldrb	r3, [r7, #1]
 8024be6:	2b01      	cmp	r3, #1
 8024be8:	d108      	bne.n	8024bfc <verificarFrecuenciaMensajeGPSublox+0x130>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_SOL_GPS;
 8024bea:	68fb      	ldr	r3, [r7, #12]
 8024bec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024bf0:	f023 0208 	bic.w	r2, r3, #8
 8024bf4:	68fb      	ldr	r3, [r7, #12]
 8024bf6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_SOL);
                        driver->mensajesNoConfig |= CONFIG_RATE_SOL_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024bfa:	e077      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_SOL);
 8024bfc:	78ba      	ldrb	r2, [r7, #2]
 8024bfe:	78f9      	ldrb	r1, [r7, #3]
 8024c00:	2301      	movs	r3, #1
 8024c02:	6878      	ldr	r0, [r7, #4]
 8024c04:	f000 f878 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_SOL_GPS;
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024c0e:	f043 0208 	orr.w	r2, r3, #8
 8024c12:	68fb      	ldr	r3, [r7, #12]
 8024c14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024c18:	68fb      	ldr	r3, [r7, #12]
 8024c1a:	2201      	movs	r2, #1
 8024c1c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024c20:	e064      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>

                case MSG_PVT:
                    if (frec == UBX_RATE_PVT)
 8024c22:	787b      	ldrb	r3, [r7, #1]
 8024c24:	2b01      	cmp	r3, #1
 8024c26:	d108      	bne.n	8024c3a <verificarFrecuenciaMensajeGPSublox+0x16e>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_PVT_GPS;
 8024c28:	68fb      	ldr	r3, [r7, #12]
 8024c2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024c2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8024c32:	68fb      	ldr	r3, [r7, #12]
 8024c34:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_PVT);
                        driver->mensajesNoConfig |= CONFIG_RATE_PVT_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024c38:	e058      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_PVT);
 8024c3a:	78ba      	ldrb	r2, [r7, #2]
 8024c3c:	78f9      	ldrb	r1, [r7, #3]
 8024c3e:	2301      	movs	r3, #1
 8024c40:	6878      	ldr	r0, [r7, #4]
 8024c42:	f000 f859 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_PVT_GPS;
 8024c46:	68fb      	ldr	r3, [r7, #12]
 8024c48:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8024c50:	68fb      	ldr	r3, [r7, #12]
 8024c52:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024c56:	68fb      	ldr	r3, [r7, #12]
 8024c58:	2201      	movs	r2, #1
 8024c5a:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024c5e:	e045      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>

                case MSG_VELNED:
                    frecuenciaDeseada = driver->tienePVTmsg ? 0 : UBX_RATE_VELNED;
 8024c60:	68fb      	ldr	r3, [r7, #12]
 8024c62:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8024c66:	f083 0301 	eor.w	r3, r3, #1
 8024c6a:	b2db      	uxtb	r3, r3
 8024c6c:	72fb      	strb	r3, [r7, #11]
                    if (frec == frecuenciaDeseada)
 8024c6e:	787a      	ldrb	r2, [r7, #1]
 8024c70:	7afb      	ldrb	r3, [r7, #11]
 8024c72:	429a      	cmp	r2, r3
 8024c74:	d108      	bne.n	8024c88 <verificarFrecuenciaMensajeGPSublox+0x1bc>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_VELNED_GPS;
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024c7c:	f023 0210 	bic.w	r2, r3, #16
 8024c80:	68fb      	ldr	r3, [r7, #12]
 8024c82:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
                        driver->mensajesNoConfig |= CONFIG_RATE_VELNED_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024c86:	e031      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, frecuenciaDeseada);
 8024c88:	7afb      	ldrb	r3, [r7, #11]
 8024c8a:	78ba      	ldrb	r2, [r7, #2]
 8024c8c:	78f9      	ldrb	r1, [r7, #3]
 8024c8e:	6878      	ldr	r0, [r7, #4]
 8024c90:	f000 f832 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_VELNED_GPS;
 8024c94:	68fb      	ldr	r3, [r7, #12]
 8024c96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024c9a:	f043 0210 	orr.w	r2, r3, #16
 8024c9e:	68fb      	ldr	r3, [r7, #12]
 8024ca0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024ca4:	68fb      	ldr	r3, [r7, #12]
 8024ca6:	2201      	movs	r2, #1
 8024ca8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024cac:	e01e      	b.n	8024cec <verificarFrecuenciaMensajeGPSublox+0x220>

                case MSG_DOP:
                    if (frec == UBX_RATE_DOP)
 8024cae:	787b      	ldrb	r3, [r7, #1]
 8024cb0:	2b01      	cmp	r3, #1
 8024cb2:	d108      	bne.n	8024cc6 <verificarFrecuenciaMensajeGPSublox+0x1fa>
                        driver->mensajesNoConfig &= ~CONFIG_RATE_DOP_GPS;
 8024cb4:	68fb      	ldr	r3, [r7, #12]
 8024cb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024cba:	f023 0220 	bic.w	r2, r3, #32
 8024cbe:	68fb      	ldr	r3, [r7, #12]
 8024cc0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    else {
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_DOP);
                        driver->mensajesNoConfig |= CONFIG_RATE_DOP_GPS;
                        driver->cfgNecesitaGuardar = true;
                    }
                    break;
 8024cc4:	e011      	b.n	8024cea <verificarFrecuenciaMensajeGPSublox+0x21e>
                        configurarFrecuenciaMensajeGPSublox(dGPS, clase, id, UBX_RATE_DOP);
 8024cc6:	78ba      	ldrb	r2, [r7, #2]
 8024cc8:	78f9      	ldrb	r1, [r7, #3]
 8024cca:	2301      	movs	r3, #1
 8024ccc:	6878      	ldr	r0, [r7, #4]
 8024cce:	f000 f813 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
                        driver->mensajesNoConfig |= CONFIG_RATE_DOP_GPS;
 8024cd2:	68fb      	ldr	r3, [r7, #12]
 8024cd4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8024cd8:	f043 0220 	orr.w	r2, r3, #32
 8024cdc:	68fb      	ldr	r3, [r7, #12]
 8024cde:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                        driver->cfgNecesitaGuardar = true;
 8024ce2:	68fb      	ldr	r3, [r7, #12]
 8024ce4:	2201      	movs	r2, #1
 8024ce6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
                    break;
 8024cea:	bf00      	nop
            }
            break;
 8024cec:	bf00      	nop
    }
}
 8024cee:	bf00      	nop
 8024cf0:	3710      	adds	r7, #16
 8024cf2:	46bd      	mov	sp, r7
 8024cf4:	bd80      	pop	{r7, pc}
 8024cf6:	bf00      	nop

08024cf8 <configurarFrecuenciaMensajeGPSublox>:
**  Descripcion:    Configura la frecuencia de envio del mensaje
**  Parametros:     Puntero al GPS, clase de mensaje, id, frecuencia
**  Retorno:        Mensaje enviado
****************************************************************************************/
bool configurarFrecuenciaMensajeGPSublox(gps_t *dGPS, uint8_t clase, uint8_t id, uint8_t frec)
{
 8024cf8:	b580      	push	{r7, lr}
 8024cfa:	b086      	sub	sp, #24
 8024cfc:	af02      	add	r7, sp, #8
 8024cfe:	6078      	str	r0, [r7, #4]
 8024d00:	4608      	mov	r0, r1
 8024d02:	4611      	mov	r1, r2
 8024d04:	461a      	mov	r2, r3
 8024d06:	4603      	mov	r3, r0
 8024d08:	70fb      	strb	r3, [r7, #3]
 8024d0a:	460b      	mov	r3, r1
 8024d0c:	70bb      	strb	r3, [r7, #2]
 8024d0e:	4613      	mov	r3, r2
 8024d10:	707b      	strb	r3, [r7, #1]
    if (bytesLibresBufferTxUART(configGPS(dGPS->numGPS)->dispUART) < (int16_t)(sizeof(headerUBX_t) + sizeof(cfgMsgRateUBX_t) + 2))
 8024d12:	687b      	ldr	r3, [r7, #4]
 8024d14:	781b      	ldrb	r3, [r3, #0]
 8024d16:	4618      	mov	r0, r3
 8024d18:	f7fe f9b8 	bl	802308c <configGPS>
 8024d1c:	4603      	mov	r3, r0
 8024d1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024d22:	4618      	mov	r0, r3
 8024d24:	f7f4 fa90 	bl	8019248 <bytesLibresBufferTxUART>
 8024d28:	4603      	mov	r3, r0
 8024d2a:	2b0a      	cmp	r3, #10
 8024d2c:	d801      	bhi.n	8024d32 <configurarFrecuenciaMensajeGPSublox+0x3a>
        return false;
 8024d2e:	2300      	movs	r3, #0
 8024d30:	e00f      	b.n	8024d52 <configurarFrecuenciaMensajeGPSublox+0x5a>

    cfgMsgRateUBX_t msg;
    msg.msgClass = clase;
 8024d32:	78fb      	ldrb	r3, [r7, #3]
 8024d34:	733b      	strb	r3, [r7, #12]
    msg.msgId = id;
 8024d36:	78bb      	ldrb	r3, [r7, #2]
 8024d38:	737b      	strb	r3, [r7, #13]
    msg.rate = frec;
 8024d3a:	787b      	ldrb	r3, [r7, #1]
 8024d3c:	73bb      	strb	r3, [r7, #14]
    return enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_MSG, &msg, sizeof(msg));
 8024d3e:	f107 030c 	add.w	r3, r7, #12
 8024d42:	2203      	movs	r2, #3
 8024d44:	9200      	str	r2, [sp, #0]
 8024d46:	2201      	movs	r2, #1
 8024d48:	2106      	movs	r1, #6
 8024d4a:	6878      	ldr	r0, [r7, #4]
 8024d4c:	f7fe fc8b 	bl	8023666 <enviarMensajeGPSublox>
 8024d50:	4603      	mov	r3, r0
}
 8024d52:	4618      	mov	r0, r3
 8024d54:	3710      	adds	r7, #16
 8024d56:	46bd      	mov	sp, r7
 8024d58:	bd80      	pop	{r7, pc}

08024d5a <configurarFrecuenciaNavegacionGPSublox>:
**  Descripcion:    Configura la frecuencia de navegacion del GPS
**  Parametros:     Puntero al GPS
**  Retorno:        Ninguno
****************************************************************************************/
void configurarFrecuenciaNavegacionGPSublox(gps_t *dGPS)
{
 8024d5a:	b580      	push	{r7, lr}
 8024d5c:	b086      	sub	sp, #24
 8024d5e:	af02      	add	r7, sp, #8
 8024d60:	6078      	str	r0, [r7, #4]
	cfgNavRateUBX_t msg;

    msg.measureRateMs = configGPS(dGPS->numGPS)->periodoMuestreo;
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	781b      	ldrb	r3, [r3, #0]
 8024d66:	4618      	mov	r0, r3
 8024d68:	f7fe f990 	bl	802308c <configGPS>
 8024d6c:	4603      	mov	r3, r0
 8024d6e:	891b      	ldrh	r3, [r3, #8]
 8024d70:	813b      	strh	r3, [r7, #8]
    msg.navRate = 1;
 8024d72:	2301      	movs	r3, #1
 8024d74:	817b      	strh	r3, [r7, #10]
    msg.timeRef = 0;
 8024d76:	2300      	movs	r3, #0
 8024d78:	81bb      	strh	r3, [r7, #12]
    enviarMensajeGPSublox(dGPS, CLASS_CFG, MSG_CFG_RATE, &msg, sizeof(msg));
 8024d7a:	f107 0308 	add.w	r3, r7, #8
 8024d7e:	2206      	movs	r2, #6
 8024d80:	9200      	str	r2, [sp, #0]
 8024d82:	2208      	movs	r2, #8
 8024d84:	2106      	movs	r1, #6
 8024d86:	6878      	ldr	r0, [r7, #4]
 8024d88:	f7fe fc6d 	bl	8023666 <enviarMensajeGPSublox>
}
 8024d8c:	bf00      	nop
 8024d8e:	3710      	adds	r7, #16
 8024d90:	46bd      	mov	sp, r7
 8024d92:	bd80      	pop	{r7, pc}

08024d94 <mensajeInesperadoGPSublox>:
**  Descripcion:    Deshabilita el envio del mensaje si el contador llega a 256
**  Parametros:     Puntero al GPS
**  Retorno:        Ninguno
****************************************************************************************/
void mensajeInesperadoGPSublox(gps_t *dGPS)
{
 8024d94:	b580      	push	{r7, lr}
 8024d96:	b084      	sub	sp, #16
 8024d98:	af00      	add	r7, sp, #0
 8024d9a:	6078      	str	r0, [r7, #4]
    gpsUblox_t *driver = dGPS->driver;
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	68db      	ldr	r3, [r3, #12]
 8024da0:	60fb      	str	r3, [r7, #12]

    // Deshabilitar futuros envios de este mensaje, pero solo se hace esto cada 256 mensajes porque algunos de
    // los tipos de mensajes no pueden ser deshabilitados y no queremos entrar en una guerra de ack
    if (++driver->contadorDeshabilitacion == 0)
 8024da2:	68fb      	ldr	r3, [r7, #12]
 8024da4:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8024da8:	3301      	adds	r3, #1
 8024daa:	b2da      	uxtb	r2, r3
 8024dac:	68fb      	ldr	r3, [r7, #12]
 8024dae:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	d109      	bne.n	8024dd0 <mensajeInesperadoGPSublox+0x3c>
        configurarFrecuenciaMensajeGPSublox(dGPS, driver->claseMensaje, driver->idMensaje, 0);
 8024dbc:	68fb      	ldr	r3, [r7, #12]
 8024dbe:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 8024dc8:	2300      	movs	r3, #0
 8024dca:	6878      	ldr	r0, [r7, #4]
 8024dcc:	f7ff ff94 	bl	8024cf8 <configurarFrecuenciaMensajeGPSublox>
}
 8024dd0:	bf00      	nop
 8024dd2:	3710      	adds	r7, #16
 8024dd4:	46bd      	mov	sp, r7
 8024dd6:	bd80      	pop	{r7, pc}

08024dd8 <configIMU>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configIMU_t, NUM_MAX_IMU, configIMU);
 8024dd8:	b480      	push	{r7}
 8024dda:	b083      	sub	sp, #12
 8024ddc:	af00      	add	r7, sp, #0
 8024dde:	6078      	str	r0, [r7, #4]
 8024de0:	687a      	ldr	r2, [r7, #4]
 8024de2:	4613      	mov	r3, r2
 8024de4:	005b      	lsls	r3, r3, #1
 8024de6:	4413      	add	r3, r2
 8024de8:	00db      	lsls	r3, r3, #3
 8024dea:	4a04      	ldr	r2, [pc, #16]	; (8024dfc <configIMU+0x24>)
 8024dec:	4413      	add	r3, r2
 8024dee:	4618      	mov	r0, r3
 8024df0:	370c      	adds	r7, #12
 8024df2:	46bd      	mov	sp, r7
 8024df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024df8:	4770      	bx	lr
 8024dfa:	bf00      	nop
 8024dfc:	2000a7d0 	.word	0x2000a7d0

08024e00 <configCalIMU>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configCalIMU_t, NUM_MAX_IMU, configCalIMU);
 8024e00:	b480      	push	{r7}
 8024e02:	b083      	sub	sp, #12
 8024e04:	af00      	add	r7, sp, #0
 8024e06:	6078      	str	r0, [r7, #4]
 8024e08:	687a      	ldr	r2, [r7, #4]
 8024e0a:	4613      	mov	r3, r2
 8024e0c:	011b      	lsls	r3, r3, #4
 8024e0e:	4413      	add	r3, r2
 8024e10:	009b      	lsls	r3, r3, #2
 8024e12:	4a04      	ldr	r2, [pc, #16]	; (8024e24 <configCalIMU+0x24>)
 8024e14:	4413      	add	r3, r2
 8024e16:	4618      	mov	r0, r3
 8024e18:	370c      	adds	r7, #12
 8024e1a:	46bd      	mov	sp, r7
 8024e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e20:	4770      	bx	lr
 8024e22:	bf00      	nop
 8024e24:	2000a4a0 	.word	0x2000a4a0

08024e28 <iniciarIMU>:
**  Descripcion:    Inicia las IMUs
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarIMU(void)
{
 8024e28:	b580      	push	{r7, lr}
 8024e2a:	b082      	sub	sp, #8
 8024e2c:	af00      	add	r7, sp, #0
    // Ajustamos las frecuencias del scheduler
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_IMU, PERIODO_TAREA_HZ_SCHEDULER(configIMU(0)->frecActualizar));
 8024e2e:	2000      	movs	r0, #0
 8024e30:	f7ff ffd2 	bl	8024dd8 <configIMU>
 8024e34:	4603      	mov	r3, r0
 8024e36:	8a9b      	ldrh	r3, [r3, #20]
 8024e38:	461a      	mov	r2, r3
 8024e3a:	4b76      	ldr	r3, [pc, #472]	; (8025014 <iniciarIMU+0x1ec>)
 8024e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8024e40:	4619      	mov	r1, r3
 8024e42:	200a      	movs	r0, #10
 8024e44:	f7fa f894 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#ifdef LEER_IMU_SCHEDULER
    ajustarFrecuenciaEjecucionTarea(TAREA_LEER_IMU, PERIODO_TAREA_HZ_SCHEDULER(configIMU(0)->frecLeer));
 8024e48:	2000      	movs	r0, #0
 8024e4a:	f7ff ffc5 	bl	8024dd8 <configIMU>
 8024e4e:	4603      	mov	r3, r0
 8024e50:	8adb      	ldrh	r3, [r3, #22]
 8024e52:	461a      	mov	r2, r3
 8024e54:	4b6f      	ldr	r3, [pc, #444]	; (8025014 <iniciarIMU+0x1ec>)
 8024e56:	fb93 f3f2 	sdiv	r3, r3, r2
 8024e5a:	4619      	mov	r1, r3
 8024e5c:	200b      	movs	r0, #11
 8024e5e:	f7fa f887 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#endif

    // Reseteamos las variables del sensor
    memset(&imuGen, 0, sizeof(imuGen_t));
 8024e62:	2238      	movs	r2, #56	; 0x38
 8024e64:	2100      	movs	r1, #0
 8024e66:	486c      	ldr	r0, [pc, #432]	; (8025018 <iniciarIMU+0x1f0>)
 8024e68:	f010 fa1a 	bl	80352a0 <memset>

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8024e6c:	2300      	movs	r3, #0
 8024e6e:	71fb      	strb	r3, [r7, #7]
 8024e70:	e0c1      	b.n	8024ff6 <iniciarIMU+0x1ce>
        if (configIMU(i)->tipoIMU == IMU_NINGUNO)
 8024e72:	79fb      	ldrb	r3, [r7, #7]
 8024e74:	4618      	mov	r0, r3
 8024e76:	f7ff ffaf 	bl	8024dd8 <configIMU>
 8024e7a:	4603      	mov	r3, r0
 8024e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8024e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e84:	f000 80b3 	beq.w	8024fee <iniciarIMU+0x1c6>
            continue;

        imu_t *driver = &imu[i];
 8024e88:	79fa      	ldrb	r2, [r7, #7]
 8024e8a:	4613      	mov	r3, r2
 8024e8c:	015b      	lsls	r3, r3, #5
 8024e8e:	1a9b      	subs	r3, r3, r2
 8024e90:	009b      	lsls	r3, r3, #2
 8024e92:	4a62      	ldr	r2, [pc, #392]	; (802501c <iniciarIMU+0x1f4>)
 8024e94:	4413      	add	r3, r2
 8024e96:	603b      	str	r3, [r7, #0]

        // Reseteamos las variables del sensor
        memset(driver, 0, sizeof(imu_t));
 8024e98:	227c      	movs	r2, #124	; 0x7c
 8024e9a:	2100      	movs	r1, #0
 8024e9c:	6838      	ldr	r0, [r7, #0]
 8024e9e:	f010 f9ff 	bl	80352a0 <memset>

        // Asignamos el numero del sensor
        driver->numIMU = i;
 8024ea2:	683b      	ldr	r3, [r7, #0]
 8024ea4:	79fa      	ldrb	r2, [r7, #7]
 8024ea6:	701a      	strb	r2, [r3, #0]

        // Data ready del sensor
        driver->drdy = configIMU(i)->drdy;
 8024ea8:	79fb      	ldrb	r3, [r7, #7]
 8024eaa:	4618      	mov	r0, r3
 8024eac:	f7ff ff94 	bl	8024dd8 <configIMU>
 8024eb0:	4603      	mov	r3, r0
 8024eb2:	799a      	ldrb	r2, [r3, #6]
 8024eb4:	683b      	ldr	r3, [r7, #0]
 8024eb6:	721a      	strb	r2, [r3, #8]

        // Cargamos la configuracion del sensor
        switch (configIMU(i)->bus) {
 8024eb8:	79fb      	ldrb	r3, [r7, #7]
 8024eba:	4618      	mov	r0, r3
 8024ebc:	f7ff ff8c 	bl	8024dd8 <configIMU>
 8024ec0:	4603      	mov	r3, r0
 8024ec2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	d002      	beq.n	8024ed0 <iniciarIMU+0xa8>
 8024eca:	2b01      	cmp	r3, #1
 8024ecc:	d02d      	beq.n	8024f2a <iniciarIMU+0x102>
 8024ece:	e059      	b.n	8024f84 <iniciarIMU+0x15c>
#ifdef USAR_I2C
            case BUS_I2C:
                driver->bus.tipo = BUS_I2C;
 8024ed0:	683b      	ldr	r3, [r7, #0]
 8024ed2:	2200      	movs	r2, #0
 8024ed4:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.i2c.numI2C = configIMU(i)->dispBus;
 8024ed6:	79fb      	ldrb	r3, [r7, #7]
 8024ed8:	4618      	mov	r0, r3
 8024eda:	f7ff ff7d 	bl	8024dd8 <configIMU>
 8024ede:	4603      	mov	r3, r0
 8024ee0:	78db      	ldrb	r3, [r3, #3]
 8024ee2:	b25a      	sxtb	r2, r3
 8024ee4:	683b      	ldr	r3, [r7, #0]
 8024ee6:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.i2c.dir = configIMU(i)->dirI2C;
 8024ee8:	79fb      	ldrb	r3, [r7, #7]
 8024eea:	4618      	mov	r0, r3
 8024eec:	f7ff ff74 	bl	8024dd8 <configIMU>
 8024ef0:	4603      	mov	r3, r0
 8024ef2:	795a      	ldrb	r2, [r3, #5]
 8024ef4:	683b      	ldr	r3, [r7, #0]
 8024ef6:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!i2cIniciado(driver->bus.bus_u.i2c.numI2C) && !iniciarI2C(driver->bus.bus_u.i2c.numI2C))
 8024ef8:	683b      	ldr	r3, [r7, #0]
 8024efa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024efe:	4618      	mov	r0, r3
 8024f00:	f7f0 ff66 	bl	8015dd0 <i2cIniciado>
 8024f04:	4603      	mov	r3, r0
 8024f06:	f083 0301 	eor.w	r3, r3, #1
 8024f0a:	b2db      	uxtb	r3, r3
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d040      	beq.n	8024f92 <iniciarIMU+0x16a>
 8024f10:	683b      	ldr	r3, [r7, #0]
 8024f12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024f16:	4618      	mov	r0, r3
 8024f18:	f7f0 ff16 	bl	8015d48 <iniciarI2C>
 8024f1c:	4603      	mov	r3, r0
 8024f1e:	f083 0301 	eor.w	r3, r3, #1
 8024f22:	b2db      	uxtb	r3, r3
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	d034      	beq.n	8024f92 <iniciarIMU+0x16a>
                    continue;
 8024f28:	e062      	b.n	8024ff0 <iniciarIMU+0x1c8>
                break;
#endif

#ifdef USAR_SPI
            case BUS_SPI:
                driver->bus.tipo = BUS_SPI;
 8024f2a:	683b      	ldr	r3, [r7, #0]
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.spi.numSPI = configIMU(i)->dispBus;
 8024f30:	79fb      	ldrb	r3, [r7, #7]
 8024f32:	4618      	mov	r0, r3
 8024f34:	f7ff ff50 	bl	8024dd8 <configIMU>
 8024f38:	4603      	mov	r3, r0
 8024f3a:	78db      	ldrb	r3, [r3, #3]
 8024f3c:	b25a      	sxtb	r2, r3
 8024f3e:	683b      	ldr	r3, [r7, #0]
 8024f40:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.spi.pinCS = configIMU(i)->csSPI;
 8024f42:	79fb      	ldrb	r3, [r7, #7]
 8024f44:	4618      	mov	r0, r3
 8024f46:	f7ff ff47 	bl	8024dd8 <configIMU>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	791a      	ldrb	r2, [r3, #4]
 8024f4e:	683b      	ldr	r3, [r7, #0]
 8024f50:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!spiIniciado(driver->bus.bus_u.spi.numSPI) && !iniciarSPI(driver->bus.bus_u.spi.numSPI))
 8024f52:	683b      	ldr	r3, [r7, #0]
 8024f54:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024f58:	4618      	mov	r0, r3
 8024f5a:	f7f2 f8ed 	bl	8017138 <spiIniciado>
 8024f5e:	4603      	mov	r3, r0
 8024f60:	f083 0301 	eor.w	r3, r3, #1
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	d015      	beq.n	8024f96 <iniciarIMU+0x16e>
 8024f6a:	683b      	ldr	r3, [r7, #0]
 8024f6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8024f70:	4618      	mov	r0, r3
 8024f72:	f7f2 f89d 	bl	80170b0 <iniciarSPI>
 8024f76:	4603      	mov	r3, r0
 8024f78:	f083 0301 	eor.w	r3, r3, #1
 8024f7c:	b2db      	uxtb	r3, r3
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	d009      	beq.n	8024f96 <iniciarIMU+0x16e>
                    continue;
 8024f82:	e035      	b.n	8024ff0 <iniciarIMU+0x1c8>

                break;
#endif
            default:
#ifdef DEBUG
                printf("Fallo en la definicion del bus de la IMU %u\n", i + 1);
 8024f84:	79fb      	ldrb	r3, [r7, #7]
 8024f86:	3301      	adds	r3, #1
 8024f88:	4619      	mov	r1, r3
 8024f8a:	4825      	ldr	r0, [pc, #148]	; (8025020 <iniciarIMU+0x1f8>)
 8024f8c:	f010 feb2 	bl	8035cf4 <iprintf>
#endif
                break;
 8024f90:	e002      	b.n	8024f98 <iniciarIMU+0x170>
                break;
 8024f92:	bf00      	nop
 8024f94:	e000      	b.n	8024f98 <iniciarIMU+0x170>
                break;
 8024f96:	bf00      	nop
        }

        switch (configIMU(i)->tipoIMU) {
 8024f98:	79fb      	ldrb	r3, [r7, #7]
 8024f9a:	4618      	mov	r0, r3
 8024f9c:	f7ff ff1c 	bl	8024dd8 <configIMU>
 8024fa0:	4603      	mov	r3, r0
 8024fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8024fa6:	2b04      	cmp	r3, #4
 8024fa8:	d813      	bhi.n	8024fd2 <iniciarIMU+0x1aa>
            case IMU_MPU6000:
            case IMU_MPU9250:
            case IMU_ICM20602:
            case IMU_ICM20689:
            case IMU_ICM20789:
                tablaFnIMU[i] = &tablaFnIMUinvensense;
 8024faa:	79fb      	ldrb	r3, [r7, #7]
 8024fac:	4a1d      	ldr	r2, [pc, #116]	; (8025024 <iniciarIMU+0x1fc>)
 8024fae:	491e      	ldr	r1, [pc, #120]	; (8025028 <iniciarIMU+0x200>)
 8024fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8024fb4:	bf00      	nop
                continue;
                break;
        }

        // Una vez cargada la configuracion iniciamos el sensor
        driver->iniciado = iniciarDriverIMU(driver);
 8024fb6:	6838      	ldr	r0, [r7, #0]
 8024fb8:	f000 f83c 	bl	8025034 <iniciarDriverIMU>
 8024fbc:	4603      	mov	r3, r0
 8024fbe:	461a      	mov	r2, r3
 8024fc0:	683b      	ldr	r3, [r7, #0]
 8024fc2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        if (driver->iniciado)
 8024fc6:	683b      	ldr	r3, [r7, #0]
 8024fc8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d00f      	beq.n	8024ff0 <iniciarIMU+0x1c8>
 8024fd0:	e006      	b.n	8024fe0 <iniciarIMU+0x1b8>
                printf("Fallo en la definicion de la IMU %u\n", i + 1);
 8024fd2:	79fb      	ldrb	r3, [r7, #7]
 8024fd4:	3301      	adds	r3, #1
 8024fd6:	4619      	mov	r1, r3
 8024fd8:	4814      	ldr	r0, [pc, #80]	; (802502c <iniciarIMU+0x204>)
 8024fda:	f010 fe8b 	bl	8035cf4 <iprintf>
                continue;
 8024fde:	e007      	b.n	8024ff0 <iniciarIMU+0x1c8>
        	cntIMUSconectadas++;
 8024fe0:	4b13      	ldr	r3, [pc, #76]	; (8025030 <iniciarIMU+0x208>)
 8024fe2:	781b      	ldrb	r3, [r3, #0]
 8024fe4:	3301      	adds	r3, #1
 8024fe6:	b2da      	uxtb	r2, r3
 8024fe8:	4b11      	ldr	r3, [pc, #68]	; (8025030 <iniciarIMU+0x208>)
 8024fea:	701a      	strb	r2, [r3, #0]
 8024fec:	e000      	b.n	8024ff0 <iniciarIMU+0x1c8>
            continue;
 8024fee:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8024ff0:	79fb      	ldrb	r3, [r7, #7]
 8024ff2:	3301      	adds	r3, #1
 8024ff4:	71fb      	strb	r3, [r7, #7]
 8024ff6:	79fb      	ldrb	r3, [r7, #7]
 8024ff8:	2b04      	cmp	r3, #4
 8024ffa:	f67f af3a 	bls.w	8024e72 <iniciarIMU+0x4a>
    }

    if (cntIMUSconectadas > 0)
 8024ffe:	4b0c      	ldr	r3, [pc, #48]	; (8025030 <iniciarIMU+0x208>)
 8025000:	781b      	ldrb	r3, [r3, #0]
 8025002:	2b00      	cmp	r3, #0
 8025004:	d001      	beq.n	802500a <iniciarIMU+0x1e2>
        return true;
 8025006:	2301      	movs	r3, #1
 8025008:	e000      	b.n	802500c <iniciarIMU+0x1e4>
    else
        return false;
 802500a:	2300      	movs	r3, #0
}
 802500c:	4618      	mov	r0, r3
 802500e:	3708      	adds	r7, #8
 8025010:	46bd      	mov	sp, r7
 8025012:	bd80      	pop	{r7, pc}
 8025014:	000f4240 	.word	0x000f4240
 8025018:	2000c100 	.word	0x2000c100
 802501c:	2000be94 	.word	0x2000be94
 8025020:	0803ab74 	.word	0x0803ab74
 8025024:	2000c13c 	.word	0x2000c13c
 8025028:	2000293c 	.word	0x2000293c
 802502c:	0803aba4 	.word	0x0803aba4
 8025030:	2000c138 	.word	0x2000c138

08025034 <iniciarDriverIMU>:
**  Descripcion:    Inicia una IMU
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverIMU(imu_t *dIMU)
{
 8025034:	b590      	push	{r4, r7, lr}
 8025036:	ed2d 8b02 	vpush	{d8}
 802503a:	b085      	sub	sp, #20
 802503c:	af00      	add	r7, sp, #0
 802503e:	6078      	str	r0, [r7, #4]
    if (tablaFnIMU[dIMU->numIMU]->iniciarIMU(dIMU)) {
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	781b      	ldrb	r3, [r3, #0]
 8025044:	461a      	mov	r2, r3
 8025046:	4b38      	ldr	r3, [pc, #224]	; (8025128 <iniciarDriverIMU+0xf4>)
 8025048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802504c:	681b      	ldr	r3, [r3, #0]
 802504e:	6878      	ldr	r0, [r7, #4]
 8025050:	4798      	blx	r3
 8025052:	4603      	mov	r3, r0
 8025054:	2b00      	cmp	r3, #0
 8025056:	d058      	beq.n	802510a <iniciarDriverIMU+0xd6>
        for (uint8_t i = 0; i < 3; i++) {
 8025058:	2300      	movs	r3, #0
 802505a:	73fb      	strb	r3, [r7, #15]
 802505c:	e050      	b.n	8025100 <iniciarDriverIMU+0xcc>
    	    ajustarFiltroPasaBajo2P(&filtroAcelIMU[i][dIMU->numIMU], configIMU(dIMU->numIMU)->frecFiltroAcel, configIMU(dIMU->numIMU)->frecLeer);
 802505e:	7bfb      	ldrb	r3, [r7, #15]
 8025060:	687a      	ldr	r2, [r7, #4]
 8025062:	7812      	ldrb	r2, [r2, #0]
 8025064:	4611      	mov	r1, r2
 8025066:	222c      	movs	r2, #44	; 0x2c
 8025068:	fb01 f202 	mul.w	r2, r1, r2
 802506c:	21dc      	movs	r1, #220	; 0xdc
 802506e:	fb01 f303 	mul.w	r3, r1, r3
 8025072:	4413      	add	r3, r2
 8025074:	4a2d      	ldr	r2, [pc, #180]	; (802512c <iniciarDriverIMU+0xf8>)
 8025076:	189c      	adds	r4, r3, r2
 8025078:	687b      	ldr	r3, [r7, #4]
 802507a:	781b      	ldrb	r3, [r3, #0]
 802507c:	4618      	mov	r0, r3
 802507e:	f7ff feab 	bl	8024dd8 <configIMU>
 8025082:	4603      	mov	r3, r0
 8025084:	ed93 8a02 	vldr	s16, [r3, #8]
 8025088:	687b      	ldr	r3, [r7, #4]
 802508a:	781b      	ldrb	r3, [r3, #0]
 802508c:	4618      	mov	r0, r3
 802508e:	f7ff fea3 	bl	8024dd8 <configIMU>
 8025092:	4603      	mov	r3, r0
 8025094:	8adb      	ldrh	r3, [r3, #22]
 8025096:	ee07 3a90 	vmov	s15, r3
 802509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802509e:	eef0 0a67 	vmov.f32	s1, s15
 80250a2:	eeb0 0a48 	vmov.f32	s0, s16
 80250a6:	4620      	mov	r0, r4
 80250a8:	f7f7 f8a0 	bl	801c1ec <ajustarFiltroPasaBajo2P>
    	    ajustarFiltroPasaBajo2P(&filtroGiroIMU[i][dIMU->numIMU], configIMU(dIMU->numIMU)->frecFiltroGiro, configIMU(dIMU->numIMU)->frecLeer);
 80250ac:	7bfb      	ldrb	r3, [r7, #15]
 80250ae:	687a      	ldr	r2, [r7, #4]
 80250b0:	7812      	ldrb	r2, [r2, #0]
 80250b2:	4611      	mov	r1, r2
 80250b4:	222c      	movs	r2, #44	; 0x2c
 80250b6:	fb01 f202 	mul.w	r2, r1, r2
 80250ba:	21dc      	movs	r1, #220	; 0xdc
 80250bc:	fb01 f303 	mul.w	r3, r1, r3
 80250c0:	4413      	add	r3, r2
 80250c2:	4a1b      	ldr	r2, [pc, #108]	; (8025130 <iniciarDriverIMU+0xfc>)
 80250c4:	189c      	adds	r4, r3, r2
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	781b      	ldrb	r3, [r3, #0]
 80250ca:	4618      	mov	r0, r3
 80250cc:	f7ff fe84 	bl	8024dd8 <configIMU>
 80250d0:	4603      	mov	r3, r0
 80250d2:	ed93 8a03 	vldr	s16, [r3, #12]
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	781b      	ldrb	r3, [r3, #0]
 80250da:	4618      	mov	r0, r3
 80250dc:	f7ff fe7c 	bl	8024dd8 <configIMU>
 80250e0:	4603      	mov	r3, r0
 80250e2:	8adb      	ldrh	r3, [r3, #22]
 80250e4:	ee07 3a90 	vmov	s15, r3
 80250e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80250ec:	eef0 0a67 	vmov.f32	s1, s15
 80250f0:	eeb0 0a48 	vmov.f32	s0, s16
 80250f4:	4620      	mov	r0, r4
 80250f6:	f7f7 f879 	bl	801c1ec <ajustarFiltroPasaBajo2P>
        for (uint8_t i = 0; i < 3; i++) {
 80250fa:	7bfb      	ldrb	r3, [r7, #15]
 80250fc:	3301      	adds	r3, #1
 80250fe:	73fb      	strb	r3, [r7, #15]
 8025100:	7bfb      	ldrb	r3, [r7, #15]
 8025102:	2b02      	cmp	r3, #2
 8025104:	d9ab      	bls.n	802505e <iniciarDriverIMU+0x2a>
        }

        return true;
 8025106:	2301      	movs	r3, #1
 8025108:	e007      	b.n	802511a <iniciarDriverIMU+0xe6>
    }
    else {
#ifdef DEBUG
        printf("Fallo en la inicializacion de la IMU %u\n", dIMU->numIMU + 1);
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	781b      	ldrb	r3, [r3, #0]
 802510e:	3301      	adds	r3, #1
 8025110:	4619      	mov	r1, r3
 8025112:	4808      	ldr	r0, [pc, #32]	; (8025134 <iniciarDriverIMU+0x100>)
 8025114:	f010 fdee 	bl	8035cf4 <iprintf>
#endif
        return false;
 8025118:	2300      	movs	r3, #0
    }
}
 802511a:	4618      	mov	r0, r3
 802511c:	3714      	adds	r7, #20
 802511e:	46bd      	mov	sp, r7
 8025120:	ecbd 8b02 	vpop	{d8}
 8025124:	bd90      	pop	{r4, r7, pc}
 8025126:	bf00      	nop
 8025128:	2000c13c 	.word	0x2000c13c
 802512c:	2000c150 	.word	0x2000c150
 8025130:	2000c3e4 	.word	0x2000c3e4
 8025134:	0803abcc 	.word	0x0803abcc

08025138 <actualizarFailsafeIMU>:
**  Descripcion:    Comprueba si no hay sensores principales operativos
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarFailsafeIMU(void)
{
 8025138:	b580      	push	{r7, lr}
 802513a:	b082      	sub	sp, #8
 802513c:	af00      	add	r7, sp, #0
    bool failsafe = true;
 802513e:	2301      	movs	r3, #1
 8025140:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8025142:	2300      	movs	r3, #0
 8025144:	71bb      	strb	r3, [r7, #6]
 8025146:	e021      	b.n	802518c <actualizarFailsafeIMU+0x54>
        imu_t *driver = &imu[i];
 8025148:	79ba      	ldrb	r2, [r7, #6]
 802514a:	4613      	mov	r3, r2
 802514c:	015b      	lsls	r3, r3, #5
 802514e:	1a9b      	subs	r3, r3, r2
 8025150:	009b      	lsls	r3, r3, #2
 8025152:	4a13      	ldr	r2, [pc, #76]	; (80251a0 <actualizarFailsafeIMU+0x68>)
 8025154:	4413      	add	r3, r2
 8025156:	603b      	str	r3, [r7, #0]

        if (driver->iniciado && driver->operativo && !configIMU(i)->auxiliar)
 8025158:	683b      	ldr	r3, [r7, #0]
 802515a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 802515e:	2b00      	cmp	r3, #0
 8025160:	d011      	beq.n	8025186 <actualizarFailsafeIMU+0x4e>
 8025162:	683b      	ldr	r3, [r7, #0]
 8025164:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8025168:	2b00      	cmp	r3, #0
 802516a:	d00c      	beq.n	8025186 <actualizarFailsafeIMU+0x4e>
 802516c:	79bb      	ldrb	r3, [r7, #6]
 802516e:	4618      	mov	r0, r3
 8025170:	f7ff fe32 	bl	8024dd8 <configIMU>
 8025174:	4603      	mov	r3, r0
 8025176:	785b      	ldrb	r3, [r3, #1]
 8025178:	f083 0301 	eor.w	r3, r3, #1
 802517c:	b2db      	uxtb	r3, r3
 802517e:	2b00      	cmp	r3, #0
 8025180:	d001      	beq.n	8025186 <actualizarFailsafeIMU+0x4e>
        	failsafe = false;
 8025182:	2300      	movs	r3, #0
 8025184:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8025186:	79bb      	ldrb	r3, [r7, #6]
 8025188:	3301      	adds	r3, #1
 802518a:	71bb      	strb	r3, [r7, #6]
 802518c:	79bb      	ldrb	r3, [r7, #6]
 802518e:	2b04      	cmp	r3, #4
 8025190:	d9da      	bls.n	8025148 <actualizarFailsafeIMU+0x10>
    }

    failsafeIMU = failsafe;
 8025192:	4a04      	ldr	r2, [pc, #16]	; (80251a4 <actualizarFailsafeIMU+0x6c>)
 8025194:	79fb      	ldrb	r3, [r7, #7]
 8025196:	7013      	strb	r3, [r2, #0]
}
 8025198:	bf00      	nop
 802519a:	3708      	adds	r7, #8
 802519c:	46bd      	mov	sp, r7
 802519e:	bd80      	pop	{r7, pc}
 80251a0:	2000be94 	.word	0x2000be94
 80251a4:	2000c678 	.word	0x2000c678

080251a8 <calcularIMUGen>:
**  Descripcion:    Mezcla las medidas de los sensores en uno general
**  Parametros:     Habilitacion de la mezcla de varios sensores
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void calcularIMUGen(bool habMezcla)
{
 80251a8:	b580      	push	{r7, lr}
 80251aa:	b092      	sub	sp, #72	; 0x48
 80251ac:	af00      	add	r7, sp, #0
 80251ae:	4603      	mov	r3, r0
 80251b0:	71fb      	strb	r3, [r7, #7]
    float giroAcum[3] = {0, 0, 0};
 80251b2:	f04f 0300 	mov.w	r3, #0
 80251b6:	633b      	str	r3, [r7, #48]	; 0x30
 80251b8:	f04f 0300 	mov.w	r3, #0
 80251bc:	637b      	str	r3, [r7, #52]	; 0x34
 80251be:	f04f 0300 	mov.w	r3, #0
 80251c2:	63bb      	str	r3, [r7, #56]	; 0x38
    float giroFiltAcum[3] = {0, 0, 0};
 80251c4:	f04f 0300 	mov.w	r3, #0
 80251c8:	627b      	str	r3, [r7, #36]	; 0x24
 80251ca:	f04f 0300 	mov.w	r3, #0
 80251ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80251d0:	f04f 0300 	mov.w	r3, #0
 80251d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float acelAcum[3] = {0, 0, 0};
 80251d6:	f04f 0300 	mov.w	r3, #0
 80251da:	61bb      	str	r3, [r7, #24]
 80251dc:	f04f 0300 	mov.w	r3, #0
 80251e0:	61fb      	str	r3, [r7, #28]
 80251e2:	f04f 0300 	mov.w	r3, #0
 80251e6:	623b      	str	r3, [r7, #32]
    float acelFiltAcum[3] = {0, 0, 0};
 80251e8:	f04f 0300 	mov.w	r3, #0
 80251ec:	60fb      	str	r3, [r7, #12]
 80251ee:	f04f 0300 	mov.w	r3, #0
 80251f2:	613b      	str	r3, [r7, #16]
 80251f4:	f04f 0300 	mov.w	r3, #0
 80251f8:	617b      	str	r3, [r7, #20]
    float tempAcum = 0;
 80251fa:	f04f 0300 	mov.w	r3, #0
 80251fe:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t numDriversOp = 0;
 8025200:	2300      	movs	r3, #0
 8025202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8025206:	2300      	movs	r3, #0
 8025208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802520c:	e0a3      	b.n	8025356 <calcularIMUGen+0x1ae>
        imu_t *driver = &imu[i];
 802520e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8025212:	4613      	mov	r3, r2
 8025214:	015b      	lsls	r3, r3, #5
 8025216:	1a9b      	subs	r3, r3, r2
 8025218:	009b      	lsls	r3, r3, #2
 802521a:	4aaf      	ldr	r2, [pc, #700]	; (80254d8 <calcularIMUGen+0x330>)
 802521c:	4413      	add	r3, r2
 802521e:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Mezclado de las medidas
        if (driver->operativo && (!configIMU(i)->auxiliar || failsafeIMU)) {
 8025220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025222:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8025226:	2b00      	cmp	r3, #0
 8025228:	f000 8090 	beq.w	802534c <calcularIMUGen+0x1a4>
 802522c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8025230:	4618      	mov	r0, r3
 8025232:	f7ff fdd1 	bl	8024dd8 <configIMU>
 8025236:	4603      	mov	r3, r0
 8025238:	785b      	ldrb	r3, [r3, #1]
 802523a:	f083 0301 	eor.w	r3, r3, #1
 802523e:	b2db      	uxtb	r3, r3
 8025240:	2b00      	cmp	r3, #0
 8025242:	d103      	bne.n	802524c <calcularIMUGen+0xa4>
 8025244:	4ba5      	ldr	r3, [pc, #660]	; (80254dc <calcularIMUGen+0x334>)
 8025246:	781b      	ldrb	r3, [r3, #0]
 8025248:	2b00      	cmp	r3, #0
 802524a:	d07f      	beq.n	802534c <calcularIMUGen+0x1a4>
            giroAcum[0] += driver->giro[0];
 802524c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8025250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025252:	edd3 7a03 	vldr	s15, [r3, #12]
 8025256:	ee77 7a27 	vadd.f32	s15, s14, s15
 802525a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            giroAcum[1] += driver->giro[1];
 802525e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025264:	edd3 7a04 	vldr	s15, [r3, #16]
 8025268:	ee77 7a27 	vadd.f32	s15, s14, s15
 802526c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            giroAcum[2] += driver->giro[2];
 8025270:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8025274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025276:	edd3 7a05 	vldr	s15, [r3, #20]
 802527a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802527e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            giroFiltAcum[0] += driver->giroFiltrado[0];
 8025282:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8025286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025288:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 802528c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025290:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            giroFiltAcum[1] += driver->giroFiltrado[1];
 8025294:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8025298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802529a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 802529e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            giroFiltAcum[2] += driver->giroFiltrado[2];
 80252a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80252aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80252b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            acelAcum[0] += driver->acel[0];
 80252b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80252bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252be:	edd3 7a06 	vldr	s15, [r3, #24]
 80252c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252c6:	edc7 7a06 	vstr	s15, [r7, #24]
            acelAcum[1] += driver->acel[1];
 80252ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80252ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80252d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252d8:	edc7 7a07 	vstr	s15, [r7, #28]
            acelAcum[2] += driver->acel[2];
 80252dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80252e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80252e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252ea:	edc7 7a08 	vstr	s15, [r7, #32]

            acelFiltAcum[0] += driver->acelFiltrada[0];
 80252ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80252f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80252f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252fc:	edc7 7a03 	vstr	s15, [r7, #12]
            acelFiltAcum[1] += driver->acelFiltrada[1];
 8025300:	ed97 7a04 	vldr	s14, [r7, #16]
 8025304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025306:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 802530a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802530e:	edc7 7a04 	vstr	s15, [r7, #16]
            acelFiltAcum[2] += driver->acelFiltrada[2];
 8025312:	ed97 7a05 	vldr	s14, [r7, #20]
 8025316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025318:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 802531c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025320:	edc7 7a05 	vstr	s15, [r7, #20]

            tempAcum += driver->temperatura;
 8025324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025326:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 802532a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 802532e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025332:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            numDriversOp++;
 8025336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802533a:	3301      	adds	r3, #1
 802533c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

            if (!habMezcla)
 8025340:	79fb      	ldrb	r3, [r7, #7]
 8025342:	f083 0301 	eor.w	r3, r3, #1
 8025346:	b2db      	uxtb	r3, r3
 8025348:	2b00      	cmp	r3, #0
 802534a:	d10a      	bne.n	8025362 <calcularIMUGen+0x1ba>
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 802534c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8025350:	3301      	adds	r3, #1
 8025352:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8025356:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 802535a:	2b04      	cmp	r3, #4
 802535c:	f67f af57 	bls.w	802520e <calcularIMUGen+0x66>
 8025360:	e000      	b.n	8025364 <calcularIMUGen+0x1bc>
                break;
 8025362:	bf00      	nop
        }
    }

    if (numDriversOp > 0) {
 8025364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025368:	2b00      	cmp	r3, #0
 802536a:	f000 80ad 	beq.w	80254c8 <calcularIMUGen+0x320>
        imuGen.operativa = true;
 802536e:	4b5c      	ldr	r3, [pc, #368]	; (80254e0 <calcularIMUGen+0x338>)
 8025370:	2201      	movs	r2, #1
 8025372:	701a      	strb	r2, [r3, #0]

        imuGen.giro[0] = giroAcum[0] / numDriversOp;
 8025374:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8025378:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802537c:	ee07 3a90 	vmov	s15, r3
 8025380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025388:	4b55      	ldr	r3, [pc, #340]	; (80254e0 <calcularIMUGen+0x338>)
 802538a:	edc3 7a01 	vstr	s15, [r3, #4]
        imuGen.giro[1] = giroAcum[1] / numDriversOp;
 802538e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8025392:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025396:	ee07 3a90 	vmov	s15, r3
 802539a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802539e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80253a2:	4b4f      	ldr	r3, [pc, #316]	; (80254e0 <calcularIMUGen+0x338>)
 80253a4:	edc3 7a02 	vstr	s15, [r3, #8]
        imuGen.giro[2] = giroAcum[2] / numDriversOp;
 80253a8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80253ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80253b0:	ee07 3a90 	vmov	s15, r3
 80253b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80253b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80253bc:	4b48      	ldr	r3, [pc, #288]	; (80254e0 <calcularIMUGen+0x338>)
 80253be:	edc3 7a03 	vstr	s15, [r3, #12]

        imuGen.giroFiltrado[0] = giroFiltAcum[0] / numDriversOp;
 80253c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80253c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80253ca:	ee07 3a90 	vmov	s15, r3
 80253ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80253d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80253d6:	4b42      	ldr	r3, [pc, #264]	; (80254e0 <calcularIMUGen+0x338>)
 80253d8:	edc3 7a07 	vstr	s15, [r3, #28]
        imuGen.giroFiltrado[1] = giroFiltAcum[1] / numDriversOp;
 80253dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80253e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80253e4:	ee07 3a90 	vmov	s15, r3
 80253e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80253ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80253f0:	4b3b      	ldr	r3, [pc, #236]	; (80254e0 <calcularIMUGen+0x338>)
 80253f2:	edc3 7a08 	vstr	s15, [r3, #32]
        imuGen.giroFiltrado[2] = giroFiltAcum[2] / numDriversOp;
 80253f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80253fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80253fe:	ee07 3a90 	vmov	s15, r3
 8025402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802540a:	4b35      	ldr	r3, [pc, #212]	; (80254e0 <calcularIMUGen+0x338>)
 802540c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        imuGen.acel[0] = acelAcum[0] / numDriversOp;
 8025410:	edd7 6a06 	vldr	s13, [r7, #24]
 8025414:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025418:	ee07 3a90 	vmov	s15, r3
 802541c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025424:	4b2e      	ldr	r3, [pc, #184]	; (80254e0 <calcularIMUGen+0x338>)
 8025426:	edc3 7a04 	vstr	s15, [r3, #16]
        imuGen.acel[1] = acelAcum[1] / numDriversOp;
 802542a:	edd7 6a07 	vldr	s13, [r7, #28]
 802542e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025432:	ee07 3a90 	vmov	s15, r3
 8025436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802543a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802543e:	4b28      	ldr	r3, [pc, #160]	; (80254e0 <calcularIMUGen+0x338>)
 8025440:	edc3 7a05 	vstr	s15, [r3, #20]
        imuGen.acel[2] = acelAcum[2] / numDriversOp;
 8025444:	edd7 6a08 	vldr	s13, [r7, #32]
 8025448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802544c:	ee07 3a90 	vmov	s15, r3
 8025450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025458:	4b21      	ldr	r3, [pc, #132]	; (80254e0 <calcularIMUGen+0x338>)
 802545a:	edc3 7a06 	vstr	s15, [r3, #24]

        imuGen.acelFiltrada[0] = acelFiltAcum[0] / numDriversOp;
 802545e:	edd7 6a03 	vldr	s13, [r7, #12]
 8025462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025466:	ee07 3a90 	vmov	s15, r3
 802546a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802546e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025472:	4b1b      	ldr	r3, [pc, #108]	; (80254e0 <calcularIMUGen+0x338>)
 8025474:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        imuGen.acelFiltrada[1] = acelFiltAcum[1] / numDriversOp;
 8025478:	edd7 6a04 	vldr	s13, [r7, #16]
 802547c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025480:	ee07 3a90 	vmov	s15, r3
 8025484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802548c:	4b14      	ldr	r3, [pc, #80]	; (80254e0 <calcularIMUGen+0x338>)
 802548e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        imuGen.acelFiltrada[2] = acelFiltAcum[2] / numDriversOp;
 8025492:	edd7 6a05 	vldr	s13, [r7, #20]
 8025496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802549a:	ee07 3a90 	vmov	s15, r3
 802549e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80254a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80254a6:	4b0e      	ldr	r3, [pc, #56]	; (80254e0 <calcularIMUGen+0x338>)
 80254a8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

        imuGen.temperatura = tempAcum / numDriversOp;
 80254ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80254b0:	ee07 3a90 	vmov	s15, r3
 80254b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80254b8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80254bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80254c0:	4b07      	ldr	r3, [pc, #28]	; (80254e0 <calcularIMUGen+0x338>)
 80254c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }
    else
        imuGen.operativa = false;
}
 80254c6:	e002      	b.n	80254ce <calcularIMUGen+0x326>
        imuGen.operativa = false;
 80254c8:	4b05      	ldr	r3, [pc, #20]	; (80254e0 <calcularIMUGen+0x338>)
 80254ca:	2200      	movs	r2, #0
 80254cc:	701a      	strb	r2, [r3, #0]
}
 80254ce:	bf00      	nop
 80254d0:	3748      	adds	r7, #72	; 0x48
 80254d2:	46bd      	mov	sp, r7
 80254d4:	bd80      	pop	{r7, pc}
 80254d6:	bf00      	nop
 80254d8:	2000be94 	.word	0x2000be94
 80254dc:	2000c678 	.word	0x2000c678
 80254e0:	2000c100 	.word	0x2000c100

080254e4 <leerIMU>:
**  Descripcion:    Lee la velocidad angular, aceleracion y temperatura de todas las IMU
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void leerIMU(uint32_t tiempoActual)
{
 80254e4:	b580      	push	{r7, lr}
 80254e6:	b084      	sub	sp, #16
 80254e8:	af00      	add	r7, sp, #0
 80254ea:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 80254ec:	2300      	movs	r3, #0
 80254ee:	73fb      	strb	r3, [r7, #15]
 80254f0:	e012      	b.n	8025518 <leerIMU+0x34>
        imu_t *driver = &imu[i];
 80254f2:	7bfa      	ldrb	r2, [r7, #15]
 80254f4:	4613      	mov	r3, r2
 80254f6:	015b      	lsls	r3, r3, #5
 80254f8:	1a9b      	subs	r3, r3, r2
 80254fa:	009b      	lsls	r3, r3, #2
 80254fc:	4a0e      	ldr	r2, [pc, #56]	; (8025538 <leerIMU+0x54>)
 80254fe:	4413      	add	r3, r2
 8025500:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado)
 8025502:	68bb      	ldr	r3, [r7, #8]
 8025504:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8025508:	2b00      	cmp	r3, #0
 802550a:	d002      	beq.n	8025512 <leerIMU+0x2e>
            leerDriverIMU(driver);
 802550c:	68b8      	ldr	r0, [r7, #8]
 802550e:	f000 f817 	bl	8025540 <leerDriverIMU>
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 8025512:	7bfb      	ldrb	r3, [r7, #15]
 8025514:	3301      	adds	r3, #1
 8025516:	73fb      	strb	r3, [r7, #15]
 8025518:	7bfb      	ldrb	r3, [r7, #15]
 802551a:	2b04      	cmp	r3, #4
 802551c:	d9e9      	bls.n	80254f2 <leerIMU+0xe>
    }

    actualizarFailsafeIMU();
 802551e:	f7ff fe0b 	bl	8025138 <actualizarFailsafeIMU>

    if (cntIMUSconectadas > 0)
 8025522:	4b06      	ldr	r3, [pc, #24]	; (802553c <leerIMU+0x58>)
 8025524:	781b      	ldrb	r3, [r3, #0]
 8025526:	2b00      	cmp	r3, #0
 8025528:	d002      	beq.n	8025530 <leerIMU+0x4c>
        calcularIMUGen(MEZCLADO_MEDIDAS_IMU);
 802552a:	2001      	movs	r0, #1
 802552c:	f7ff fe3c 	bl	80251a8 <calcularIMUGen>
    if (tiempoActual >= 20000000 && !calIni) {
    	iniciarCalAcel();
    	calIni = true;
    }
*/
}
 8025530:	bf00      	nop
 8025532:	3710      	adds	r7, #16
 8025534:	46bd      	mov	sp, r7
 8025536:	bd80      	pop	{r7, pc}
 8025538:	2000be94 	.word	0x2000be94
 802553c:	2000c138 	.word	0x2000c138

08025540 <leerDriverIMU>:
**  Descripcion:    Lee la velocidad angular, aceleracion y temperatura de una IMU
**  Parametros:     IMU a leer
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void leerDriverIMU(imu_t *dIMU)
{
 8025540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025544:	b095      	sub	sp, #84	; 0x54
 8025546:	af10      	add	r7, sp, #64	; 0x40
 8025548:	6078      	str	r0, [r7, #4]
    tablaFnIMU[dIMU->numIMU]->leerIMU(dIMU);
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	781b      	ldrb	r3, [r3, #0]
 802554e:	461a      	mov	r2, r3
 8025550:	4b4f      	ldr	r3, [pc, #316]	; (8025690 <leerDriverIMU+0x150>)
 8025552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025556:	685b      	ldr	r3, [r3, #4]
 8025558:	6878      	ldr	r0, [r7, #4]
 802555a:	4798      	blx	r3

    if (dIMU->nuevaMedida) {
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8025562:	2b00      	cmp	r3, #0
 8025564:	f000 8088 	beq.w	8025678 <leerDriverIMU+0x138>
            dIMU->coningIMU.ultimoGiroRaw[i] = dIMU->giro[i];
        }
#endif

        // Rotacion y correccion de las medidas
        if (configIMU(dIMU->numIMU)->rotacion.rotacion != 0)
 8025568:	687b      	ldr	r3, [r7, #4]
 802556a:	781b      	ldrb	r3, [r3, #0]
 802556c:	4618      	mov	r0, r3
 802556e:	f7ff fc33 	bl	8024dd8 <configIMU>
 8025572:	4603      	mov	r3, r0
 8025574:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8025578:	2b00      	cmp	r3, #0
 802557a:	d00d      	beq.n	8025598 <leerDriverIMU+0x58>
            rotarIMU(configIMU(dIMU->numIMU)->rotacion, dIMU->giro, dIMU->acel);
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	781b      	ldrb	r3, [r3, #0]
 8025580:	4618      	mov	r0, r3
 8025582:	f7ff fc29 	bl	8024dd8 <configIMU>
 8025586:	687b      	ldr	r3, [r7, #4]
 8025588:	f103 010c 	add.w	r1, r3, #12
 802558c:	687b      	ldr	r3, [r7, #4]
 802558e:	3318      	adds	r3, #24
 8025590:	461a      	mov	r2, r3
 8025592:	6900      	ldr	r0, [r0, #16]
 8025594:	f000 f96c 	bl	8025870 <rotarIMU>

        // Se corrigen las medidas de la IMU con la calibracion
        corregirIMU(dIMU->giro, dIMU->acel, configCalIMU(dIMU->numIMU)->calIMU);
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	f103 080c 	add.w	r8, r3, #12
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	f103 0918 	add.w	r9, r3, #24
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	781b      	ldrb	r3, [r3, #0]
 80255a8:	4618      	mov	r0, r3
 80255aa:	f7ff fc29 	bl	8024e00 <configCalIMU>
 80255ae:	4606      	mov	r6, r0
 80255b0:	466d      	mov	r5, sp
 80255b2:	f106 0408 	add.w	r4, r6, #8
 80255b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80255b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80255ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80255bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80255be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80255c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80255c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80255c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80255ca:	e896 000c 	ldmia.w	r6, {r2, r3}
 80255ce:	4649      	mov	r1, r9
 80255d0:	4640      	mov	r0, r8
 80255d2:	f000 f8af 	bl	8025734 <corregirIMU>

        // Filtramos las medidas
        for (uint8_t i = 0; i < 3; i++) {
 80255d6:	2300      	movs	r3, #0
 80255d8:	73fb      	strb	r3, [r7, #15]
 80255da:	e04a      	b.n	8025672 <leerDriverIMU+0x132>
            dIMU->acelFiltrada[i] = actualizarFiltroPasaBajo2P(&filtroAcelIMU[i][dIMU->numIMU], dIMU->acel[i]);
 80255dc:	7bfb      	ldrb	r3, [r7, #15]
 80255de:	687a      	ldr	r2, [r7, #4]
 80255e0:	7812      	ldrb	r2, [r2, #0]
 80255e2:	4611      	mov	r1, r2
 80255e4:	222c      	movs	r2, #44	; 0x2c
 80255e6:	fb01 f202 	mul.w	r2, r1, r2
 80255ea:	21dc      	movs	r1, #220	; 0xdc
 80255ec:	fb01 f303 	mul.w	r3, r1, r3
 80255f0:	4413      	add	r3, r2
 80255f2:	4a28      	ldr	r2, [pc, #160]	; (8025694 <leerDriverIMU+0x154>)
 80255f4:	1899      	adds	r1, r3, r2
 80255f6:	7bfb      	ldrb	r3, [r7, #15]
 80255f8:	687a      	ldr	r2, [r7, #4]
 80255fa:	3306      	adds	r3, #6
 80255fc:	009b      	lsls	r3, r3, #2
 80255fe:	4413      	add	r3, r2
 8025600:	edd3 7a00 	vldr	s15, [r3]
 8025604:	7bfc      	ldrb	r4, [r7, #15]
 8025606:	eeb0 0a67 	vmov.f32	s0, s15
 802560a:	4608      	mov	r0, r1
 802560c:	f7f6 feb8 	bl	801c380 <actualizarFiltroPasaBajo2P>
 8025610:	eef0 7a40 	vmov.f32	s15, s0
 8025614:	687a      	ldr	r2, [r7, #4]
 8025616:	f104 030c 	add.w	r3, r4, #12
 802561a:	009b      	lsls	r3, r3, #2
 802561c:	4413      	add	r3, r2
 802561e:	edc3 7a00 	vstr	s15, [r3]
            dIMU->giroFiltrado[i] = actualizarFiltroPasaBajo2P(&filtroGiroIMU[i][dIMU->numIMU], dIMU->giro[i]);
 8025622:	7bfb      	ldrb	r3, [r7, #15]
 8025624:	687a      	ldr	r2, [r7, #4]
 8025626:	7812      	ldrb	r2, [r2, #0]
 8025628:	4611      	mov	r1, r2
 802562a:	222c      	movs	r2, #44	; 0x2c
 802562c:	fb01 f202 	mul.w	r2, r1, r2
 8025630:	21dc      	movs	r1, #220	; 0xdc
 8025632:	fb01 f303 	mul.w	r3, r1, r3
 8025636:	4413      	add	r3, r2
 8025638:	4a17      	ldr	r2, [pc, #92]	; (8025698 <leerDriverIMU+0x158>)
 802563a:	1899      	adds	r1, r3, r2
 802563c:	7bfb      	ldrb	r3, [r7, #15]
 802563e:	687a      	ldr	r2, [r7, #4]
 8025640:	3302      	adds	r3, #2
 8025642:	009b      	lsls	r3, r3, #2
 8025644:	4413      	add	r3, r2
 8025646:	3304      	adds	r3, #4
 8025648:	edd3 7a00 	vldr	s15, [r3]
 802564c:	7bfc      	ldrb	r4, [r7, #15]
 802564e:	eeb0 0a67 	vmov.f32	s0, s15
 8025652:	4608      	mov	r0, r1
 8025654:	f7f6 fe94 	bl	801c380 <actualizarFiltroPasaBajo2P>
 8025658:	eef0 7a40 	vmov.f32	s15, s0
 802565c:	687a      	ldr	r2, [r7, #4]
 802565e:	f104 0308 	add.w	r3, r4, #8
 8025662:	009b      	lsls	r3, r3, #2
 8025664:	4413      	add	r3, r2
 8025666:	3304      	adds	r3, #4
 8025668:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t i = 0; i < 3; i++) {
 802566c:	7bfb      	ldrb	r3, [r7, #15]
 802566e:	3301      	adds	r3, #1
 8025670:	73fb      	strb	r3, [r7, #15]
 8025672:	7bfb      	ldrb	r3, [r7, #15]
 8025674:	2b02      	cmp	r3, #2
 8025676:	d9b1      	bls.n	80255dc <leerDriverIMU+0x9c>
        }
    }

    actualizarIMUoperativo(dIMU);
 8025678:	6878      	ldr	r0, [r7, #4]
 802567a:	f000 f9b5 	bl	80259e8 <actualizarIMUoperativo>
    dIMU->nuevaMedida = false;
 802567e:	687b      	ldr	r3, [r7, #4]
 8025680:	2200      	movs	r2, #0
 8025682:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8025686:	bf00      	nop
 8025688:	3714      	adds	r7, #20
 802568a:	46bd      	mov	sp, r7
 802568c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025690:	2000c13c 	.word	0x2000c13c
 8025694:	2000c150 	.word	0x2000c150
 8025698:	2000c3e4 	.word	0x2000c3e4

0802569c <actualizarIMU>:
**  Descripcion:    Actualiza las muestras de las IMUs
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarIMU(uint32_t tiempoActual)
{
 802569c:	b580      	push	{r7, lr}
 802569e:	b084      	sub	sp, #16
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]





    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 80256a4:	2300      	movs	r3, #0
 80256a6:	73fb      	strb	r3, [r7, #15]
 80256a8:	e026      	b.n	80256f8 <actualizarIMU+0x5c>
        imu_t *driver = &imu[i];
 80256aa:	7bfa      	ldrb	r2, [r7, #15]
 80256ac:	4613      	mov	r3, r2
 80256ae:	015b      	lsls	r3, r3, #5
 80256b0:	1a9b      	subs	r3, r3, r2
 80256b2:	009b      	lsls	r3, r3, #2
 80256b4:	4a14      	ldr	r2, [pc, #80]	; (8025708 <actualizarIMU+0x6c>)
 80256b6:	4413      	add	r3, r2
 80256b8:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado && (configIMU(i)->drdy == 0 || leerIO(configIMU(i)->drdy)))
 80256ba:	68bb      	ldr	r3, [r7, #8]
 80256bc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	d016      	beq.n	80256f2 <actualizarIMU+0x56>
 80256c4:	7bfb      	ldrb	r3, [r7, #15]
 80256c6:	4618      	mov	r0, r3
 80256c8:	f7ff fb86 	bl	8024dd8 <configIMU>
 80256cc:	4603      	mov	r3, r0
 80256ce:	799b      	ldrb	r3, [r3, #6]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d00b      	beq.n	80256ec <actualizarIMU+0x50>
 80256d4:	7bfb      	ldrb	r3, [r7, #15]
 80256d6:	4618      	mov	r0, r3
 80256d8:	f7ff fb7e 	bl	8024dd8 <configIMU>
 80256dc:	4603      	mov	r3, r0
 80256de:	799b      	ldrb	r3, [r3, #6]
 80256e0:	4618      	mov	r0, r3
 80256e2:	f7f0 ff6d 	bl	80165c0 <leerIO>
 80256e6:	4603      	mov	r3, r0
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	d002      	beq.n	80256f2 <actualizarIMU+0x56>
            actualizarDriverIMU(driver);
 80256ec:	68b8      	ldr	r0, [r7, #8]
 80256ee:	f000 f80d 	bl	802570c <actualizarDriverIMU>
    for (uint8_t i = 0; i < NUM_MAX_IMU; i++) {
 80256f2:	7bfb      	ldrb	r3, [r7, #15]
 80256f4:	3301      	adds	r3, #1
 80256f6:	73fb      	strb	r3, [r7, #15]
 80256f8:	7bfb      	ldrb	r3, [r7, #15]
 80256fa:	2b04      	cmp	r3, #4
 80256fc:	d9d5      	bls.n	80256aa <actualizarIMU+0xe>
    }



}
 80256fe:	bf00      	nop
 8025700:	bf00      	nop
 8025702:	3710      	adds	r7, #16
 8025704:	46bd      	mov	sp, r7
 8025706:	bd80      	pop	{r7, pc}
 8025708:	2000be94 	.word	0x2000be94

0802570c <actualizarDriverIMU>:
**  Descripcion:    Actualiza las muestras de una IMU
**  Parametros:     Puntero a la IMU a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarDriverIMU(imu_t *dIMU)
{
 802570c:	b580      	push	{r7, lr}
 802570e:	b082      	sub	sp, #8
 8025710:	af00      	add	r7, sp, #0
 8025712:	6078      	str	r0, [r7, #4]
    tablaFnIMU[dIMU->numIMU]->actualizarIMU(dIMU);
 8025714:	687b      	ldr	r3, [r7, #4]
 8025716:	781b      	ldrb	r3, [r3, #0]
 8025718:	461a      	mov	r2, r3
 802571a:	4b05      	ldr	r3, [pc, #20]	; (8025730 <actualizarDriverIMU+0x24>)
 802571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025720:	689b      	ldr	r3, [r3, #8]
 8025722:	6878      	ldr	r0, [r7, #4]
 8025724:	4798      	blx	r3
}
 8025726:	bf00      	nop
 8025728:	3708      	adds	r7, #8
 802572a:	46bd      	mov	sp, r7
 802572c:	bd80      	pop	{r7, pc}
 802572e:	bf00      	nop
 8025730:	2000c13c 	.word	0x2000c13c

08025734 <corregirIMU>:
**  Descripcion:    Ajusta los valores de la IMU con la calibracion
**  Parametros:     Puntero al giro, puntero a la acel, parametros de calibracion
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void corregirIMU(float *giro, float *acel, calIMU_t calIMU)
{
 8025734:	b082      	sub	sp, #8
 8025736:	b480      	push	{r7}
 8025738:	b087      	sub	sp, #28
 802573a:	af00      	add	r7, sp, #0
 802573c:	6078      	str	r0, [r7, #4]
 802573e:	6039      	str	r1, [r7, #0]
 8025740:	f107 0120 	add.w	r1, r7, #32
 8025744:	e881 000c 	stmia.w	r1, {r2, r3}
    float off[3];
    off[0] = acel[0] - calIMU.calAcelerometro.offset[0];
 8025748:	683b      	ldr	r3, [r7, #0]
 802574a:	ed93 7a00 	vldr	s14, [r3]
 802574e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8025752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025756:	edc7 7a03 	vstr	s15, [r7, #12]
    off[1] = acel[1] - calIMU.calAcelerometro.offset[1];
 802575a:	683b      	ldr	r3, [r7, #0]
 802575c:	3304      	adds	r3, #4
 802575e:	ed93 7a00 	vldr	s14, [r3]
 8025762:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8025766:	ee77 7a67 	vsub.f32	s15, s14, s15
 802576a:	edc7 7a04 	vstr	s15, [r7, #16]
    off[2] = acel[2] - calIMU.calAcelerometro.offset[2];
 802576e:	683b      	ldr	r3, [r7, #0]
 8025770:	3308      	adds	r3, #8
 8025772:	ed93 7a00 	vldr	s14, [r3]
 8025776:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 802577a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802577e:	edc7 7a05 	vstr	s15, [r7, #20]

    acel[0] = calIMU.calAcelerometro.ganancia[0][0] * off[0] + calIMU.calAcelerometro.ganancia[0][1] * off[1] + calIMU.calAcelerometro.ganancia[0][2] * off[2];
 8025782:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8025786:	edd7 7a03 	vldr	s15, [r7, #12]
 802578a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802578e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8025792:	edd7 7a04 	vldr	s15, [r7, #16]
 8025796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802579a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802579e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80257a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80257a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80257aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80257ae:	683b      	ldr	r3, [r7, #0]
 80257b0:	edc3 7a00 	vstr	s15, [r3]
    acel[1] = calIMU.calAcelerometro.ganancia[1][0] * off[0] + calIMU.calAcelerometro.ganancia[1][1] * off[1] + calIMU.calAcelerometro.ganancia[1][2] * off[2];
 80257b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80257b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80257bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80257c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80257c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80257c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80257cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80257d0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80257d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80257d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80257dc:	683b      	ldr	r3, [r7, #0]
 80257de:	3304      	adds	r3, #4
 80257e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80257e4:	edc3 7a00 	vstr	s15, [r3]
    acel[2] = calIMU.calAcelerometro.ganancia[2][0] * off[0] + calIMU.calAcelerometro.ganancia[2][1] * off[1] + calIMU.calAcelerometro.ganancia[2][2] * off[2];
 80257e8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80257ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80257f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80257f4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80257f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80257fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025804:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8025808:	edd7 7a05 	vldr	s15, [r7, #20]
 802580c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025810:	683b      	ldr	r3, [r7, #0]
 8025812:	3308      	adds	r3, #8
 8025814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025818:	edc3 7a00 	vstr	s15, [r3]

    giro[0] -= calIMU.calGiroscopio.offset[0];
 802581c:	687b      	ldr	r3, [r7, #4]
 802581e:	ed93 7a00 	vldr	s14, [r3]
 8025822:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8025826:	ee77 7a67 	vsub.f32	s15, s14, s15
 802582a:	687b      	ldr	r3, [r7, #4]
 802582c:	edc3 7a00 	vstr	s15, [r3]
    giro[1] -= calIMU.calGiroscopio.offset[1];
 8025830:	687b      	ldr	r3, [r7, #4]
 8025832:	3304      	adds	r3, #4
 8025834:	ed93 7a00 	vldr	s14, [r3]
 8025838:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802583c:	687b      	ldr	r3, [r7, #4]
 802583e:	3304      	adds	r3, #4
 8025840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025844:	edc3 7a00 	vstr	s15, [r3]
    giro[2] -= calIMU.calGiroscopio.offset[2];
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	3308      	adds	r3, #8
 802584c:	ed93 7a00 	vldr	s14, [r3]
 8025850:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025854:	687b      	ldr	r3, [r7, #4]
 8025856:	3308      	adds	r3, #8
 8025858:	ee77 7a67 	vsub.f32	s15, s14, s15
 802585c:	edc3 7a00 	vstr	s15, [r3]
}
 8025860:	bf00      	nop
 8025862:	371c      	adds	r7, #28
 8025864:	46bd      	mov	sp, r7
 8025866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802586a:	b002      	add	sp, #8
 802586c:	4770      	bx	lr
	...

08025870 <rotarIMU>:
**  Descripcion:    Rota la medida de la IMU
**  Parametros:     Rotacion, puntero al giro, puntero a la acel
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void rotarIMU(rotacionSensor_t rotacion, float *giro, float *acel)
{
 8025870:	b580      	push	{r7, lr}
 8025872:	b090      	sub	sp, #64	; 0x40
 8025874:	af00      	add	r7, sp, #0
 8025876:	60f8      	str	r0, [r7, #12]
 8025878:	60b9      	str	r1, [r7, #8]
 802587a:	607a      	str	r2, [r7, #4]
    float matrizR[2][2];
    float giroRot[3], acelRot[3];
    float anguloR = radianes(rotacion.rotacion);
 802587c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8025880:	ee07 3a90 	vmov	s15, r3
 8025884:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025888:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80259e0 <rotarIMU+0x170>
 802588c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8025894:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    matrizR[0][0] = cosf(anguloR);
 8025898:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 802589c:	f012 fd40 	bl	8038320 <cosf>
 80258a0:	eef0 7a40 	vmov.f32	s15, s0
 80258a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    matrizR[0][1] = sinf(anguloR);
 80258a8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80258ac:	f013 fbd8 	bl	8039060 <sinf>
 80258b0:	eef0 7a40 	vmov.f32	s15, s0
 80258b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    matrizR[1][0] = -matrizR[0][1];
 80258b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80258bc:	eef1 7a67 	vneg.f32	s15, s15
 80258c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    matrizR[1][1] =  matrizR[0][0];
 80258c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80258c6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (rotacion.volteado) {
 80258c8:	7bbb      	ldrb	r3, [r7, #14]
 80258ca:	2b00      	cmp	r3, #0
 80258cc:	d027      	beq.n	802591e <rotarIMU+0xae>
    	giro[1] = -giro[1];
 80258ce:	68bb      	ldr	r3, [r7, #8]
 80258d0:	3304      	adds	r3, #4
 80258d2:	edd3 7a00 	vldr	s15, [r3]
 80258d6:	68bb      	ldr	r3, [r7, #8]
 80258d8:	3304      	adds	r3, #4
 80258da:	eef1 7a67 	vneg.f32	s15, s15
 80258de:	edc3 7a00 	vstr	s15, [r3]
    	giro[2] = -giro[2];
 80258e2:	68bb      	ldr	r3, [r7, #8]
 80258e4:	3308      	adds	r3, #8
 80258e6:	edd3 7a00 	vldr	s15, [r3]
 80258ea:	68bb      	ldr	r3, [r7, #8]
 80258ec:	3308      	adds	r3, #8
 80258ee:	eef1 7a67 	vneg.f32	s15, s15
 80258f2:	edc3 7a00 	vstr	s15, [r3]
    	acel[1] = -acel[1];
 80258f6:	687b      	ldr	r3, [r7, #4]
 80258f8:	3304      	adds	r3, #4
 80258fa:	edd3 7a00 	vldr	s15, [r3]
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	3304      	adds	r3, #4
 8025902:	eef1 7a67 	vneg.f32	s15, s15
 8025906:	edc3 7a00 	vstr	s15, [r3]
    	acel[2] = -acel[2];
 802590a:	687b      	ldr	r3, [r7, #4]
 802590c:	3308      	adds	r3, #8
 802590e:	edd3 7a00 	vldr	s15, [r3]
 8025912:	687b      	ldr	r3, [r7, #4]
 8025914:	3308      	adds	r3, #8
 8025916:	eef1 7a67 	vneg.f32	s15, s15
 802591a:	edc3 7a00 	vstr	s15, [r3]
    }

    giroRot[0] = matrizR[0][0] * giro[0] + matrizR[0][1] * giro[1];
 802591e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025922:	68bb      	ldr	r3, [r7, #8]
 8025924:	edd3 7a00 	vldr	s15, [r3]
 8025928:	ee27 7a27 	vmul.f32	s14, s14, s15
 802592c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8025930:	68bb      	ldr	r3, [r7, #8]
 8025932:	3304      	adds	r3, #4
 8025934:	edd3 7a00 	vldr	s15, [r3]
 8025938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802593c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025940:	edc7 7a08 	vstr	s15, [r7, #32]
    giroRot[1] = matrizR[1][0] * giro[0] + matrizR[1][1] * giro[1];
 8025944:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025948:	68bb      	ldr	r3, [r7, #8]
 802594a:	edd3 7a00 	vldr	s15, [r3]
 802594e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025952:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8025956:	68bb      	ldr	r3, [r7, #8]
 8025958:	3304      	adds	r3, #4
 802595a:	edd3 7a00 	vldr	s15, [r3]
 802595e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025966:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    acelRot[0] = matrizR[0][0] * acel[0] + matrizR[0][1] * acel[1];
 802596a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	edd3 7a00 	vldr	s15, [r3]
 8025974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025978:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	3304      	adds	r3, #4
 8025980:	edd3 7a00 	vldr	s15, [r3]
 8025984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025988:	ee77 7a27 	vadd.f32	s15, s14, s15
 802598c:	edc7 7a05 	vstr	s15, [r7, #20]
    acelRot[1] = matrizR[1][0] * acel[0] + matrizR[1][1] * acel[1];
 8025990:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	edd3 7a00 	vldr	s15, [r3]
 802599a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802599e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	3304      	adds	r3, #4
 80259a6:	edd3 7a00 	vldr	s15, [r3]
 80259aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80259ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80259b2:	edc7 7a06 	vstr	s15, [r7, #24]

    giro[0] = giroRot[0];
 80259b6:	6a3a      	ldr	r2, [r7, #32]
 80259b8:	68bb      	ldr	r3, [r7, #8]
 80259ba:	601a      	str	r2, [r3, #0]
    giro[1] = giroRot[1];
 80259bc:	68bb      	ldr	r3, [r7, #8]
 80259be:	3304      	adds	r3, #4
 80259c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80259c2:	601a      	str	r2, [r3, #0]

    acel[0] = acelRot[0];
 80259c4:	697a      	ldr	r2, [r7, #20]
 80259c6:	687b      	ldr	r3, [r7, #4]
 80259c8:	601a      	str	r2, [r3, #0]
    acel[1] = acelRot[1];
 80259ca:	687b      	ldr	r3, [r7, #4]
 80259cc:	3304      	adds	r3, #4
 80259ce:	69ba      	ldr	r2, [r7, #24]
 80259d0:	601a      	str	r2, [r3, #0]
}
 80259d2:	bf00      	nop
 80259d4:	3740      	adds	r7, #64	; 0x40
 80259d6:	46bd      	mov	sp, r7
 80259d8:	bd80      	pop	{r7, pc}
 80259da:	bf00      	nop
 80259dc:	f3af 8000 	nop.w
 80259e0:	a2529d39 	.word	0xa2529d39
 80259e4:	3f91df46 	.word	0x3f91df46

080259e8 <actualizarIMUoperativo>:
**  Descripcion:    Actualiza la bandera del estado operativo
**  Parametros:     Puntero al sensor a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarIMUoperativo(imu_t *dIMU)
{
 80259e8:	b580      	push	{r7, lr}
 80259ea:	b084      	sub	sp, #16
 80259ec:	af00      	add	r7, sp, #0
 80259ee:	6078      	str	r0, [r7, #4]
    // Se considera que el sensor esta operativo si se ha actualizado en X tiempo,
    // tiene valores diferentes de 0 y las medidas han cambiado en los ultimos X microsegundos
    const uint32_t tiempo = micros();
 80259f0:	f7f2 f872 	bl	8017ad8 <micros>
 80259f4:	60f8      	str	r0, [r7, #12]
    dIMU->operativo =
        ((tiempo - dIMU->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_IMU) &&
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80259fa:	68fa      	ldr	r2, [r7, #12]
 80259fc:	1ad3      	subs	r3, r2, r3
        ((tiempo - dIMU->timing.ultimaMedida) < TIMEOUT_MEDIDA_IMU) &&
 80259fe:	4a0f      	ldr	r2, [pc, #60]	; (8025a3c <actualizarIMUoperativo+0x54>)
 8025a00:	4293      	cmp	r3, r2
 8025a02:	d80f      	bhi.n	8025a24 <actualizarIMUoperativo+0x3c>
 8025a04:	687b      	ldr	r3, [r7, #4]
 8025a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025a08:	68fa      	ldr	r2, [r7, #12]
 8025a0a:	1ad3      	subs	r3, r2, r3
        ((tiempo - dIMU->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_IMU) &&
 8025a0c:	4a0c      	ldr	r2, [pc, #48]	; (8025a40 <actualizarIMUoperativo+0x58>)
 8025a0e:	4293      	cmp	r3, r2
 8025a10:	d808      	bhi.n	8025a24 <actualizarIMUoperativo+0x3c>
        ((tiempo - dIMU->timing.ultimoCambio) < TIMEOUT_CAMBIO_MEDIDA_IMU);
 8025a12:	687b      	ldr	r3, [r7, #4]
 8025a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8025a16:	68fa      	ldr	r2, [r7, #12]
 8025a18:	1ad3      	subs	r3, r2, r3
        ((tiempo - dIMU->timing.ultimaMedida) < TIMEOUT_MEDIDA_IMU) &&
 8025a1a:	4a0a      	ldr	r2, [pc, #40]	; (8025a44 <actualizarIMUoperativo+0x5c>)
 8025a1c:	4293      	cmp	r3, r2
 8025a1e:	d801      	bhi.n	8025a24 <actualizarIMUoperativo+0x3c>
 8025a20:	2301      	movs	r3, #1
 8025a22:	e000      	b.n	8025a26 <actualizarIMUoperativo+0x3e>
 8025a24:	2300      	movs	r3, #0
 8025a26:	f003 0301 	and.w	r3, r3, #1
 8025a2a:	b2da      	uxtb	r2, r3
    dIMU->operativo =
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

}
 8025a32:	bf00      	nop
 8025a34:	3710      	adds	r7, #16
 8025a36:	46bd      	mov	sp, r7
 8025a38:	bd80      	pop	{r7, pc}
 8025a3a:	bf00      	nop
 8025a3c:	0001869f 	.word	0x0001869f
 8025a40:	00030d3f 	.word	0x00030d3f
 8025a44:	0007a11f 	.word	0x0007a11f

08025a48 <medidasIMUok>:
**  Descripcion:    Comprueba si la lectura de velocidad angular es correcta
**  Parametros:     Puntero a la IMU que hace la medida, medida
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool medidasIMUok(float *val)
{
 8025a48:	b480      	push	{r7}
 8025a4a:	b085      	sub	sp, #20
 8025a4c:	af00      	add	r7, sp, #0
 8025a4e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 7; i++) {
 8025a50:	2300      	movs	r3, #0
 8025a52:	73fb      	strb	r3, [r7, #15]
 8025a54:	e026      	b.n	8025aa4 <medidasIMUok+0x5c>
        if (isinf(val[i]) || isnan(val[i]))
 8025a56:	7bfb      	ldrb	r3, [r7, #15]
 8025a58:	009b      	lsls	r3, r3, #2
 8025a5a:	687a      	ldr	r2, [r7, #4]
 8025a5c:	4413      	add	r3, r2
 8025a5e:	edd3 7a00 	vldr	s15, [r3]
 8025a62:	eef0 7ae7 	vabs.f32	s15, s15
 8025a66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8025ab8 <medidasIMUok+0x70>
 8025a6a:	eef4 7a47 	vcmp.f32	s15, s14
 8025a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a72:	bfd4      	ite	le
 8025a74:	2301      	movle	r3, #1
 8025a76:	2300      	movgt	r3, #0
 8025a78:	b2db      	uxtb	r3, r3
 8025a7a:	f083 0301 	eor.w	r3, r3, #1
 8025a7e:	b2db      	uxtb	r3, r3
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	d10a      	bne.n	8025a9a <medidasIMUok+0x52>
 8025a84:	7bfb      	ldrb	r3, [r7, #15]
 8025a86:	009b      	lsls	r3, r3, #2
 8025a88:	687a      	ldr	r2, [r7, #4]
 8025a8a:	4413      	add	r3, r2
 8025a8c:	edd3 7a00 	vldr	s15, [r3]
 8025a90:	eef4 7a67 	vcmp.f32	s15, s15
 8025a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a98:	d701      	bvc.n	8025a9e <medidasIMUok+0x56>
            return false;
 8025a9a:	2300      	movs	r3, #0
 8025a9c:	e006      	b.n	8025aac <medidasIMUok+0x64>
    for (uint8_t i = 0; i < 7; i++) {
 8025a9e:	7bfb      	ldrb	r3, [r7, #15]
 8025aa0:	3301      	adds	r3, #1
 8025aa2:	73fb      	strb	r3, [r7, #15]
 8025aa4:	7bfb      	ldrb	r3, [r7, #15]
 8025aa6:	2b06      	cmp	r3, #6
 8025aa8:	d9d5      	bls.n	8025a56 <medidasIMUok+0xe>
    }

    return true;
 8025aaa:	2301      	movs	r3, #1
}
 8025aac:	4618      	mov	r0, r3
 8025aae:	3714      	adds	r7, #20
 8025ab0:	46bd      	mov	sp, r7
 8025ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ab6:	4770      	bx	lr
 8025ab8:	7f7fffff 	.word	0x7f7fffff

08025abc <numIMUsConectadas>:
**  Descripcion:    Devuelve el numero de IMUs conectadas
**  Parametros:     Ninguno
**  Retorno:        Numero de IMUs conectadas
****************************************************************************************/
uint8_t numIMUsConectadas(void)
{
 8025abc:	b480      	push	{r7}
 8025abe:	af00      	add	r7, sp, #0
    return cntIMUSconectadas;
 8025ac0:	4b03      	ldr	r3, [pc, #12]	; (8025ad0 <numIMUsConectadas+0x14>)
 8025ac2:	781b      	ldrb	r3, [r3, #0]
}
 8025ac4:	4618      	mov	r0, r3
 8025ac6:	46bd      	mov	sp, r7
 8025ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025acc:	4770      	bx	lr
 8025ace:	bf00      	nop
 8025ad0:	2000c138 	.word	0x2000c138

08025ad4 <imuGenOperativa>:
**  Descripcion:    Devuelve si la IMU general esta operativo
**  Parametros:     Ninguno
**  Retorno:        IMU general operativa
****************************************************************************************/
bool imuGenOperativa(void)
{
 8025ad4:	b480      	push	{r7}
 8025ad6:	af00      	add	r7, sp, #0
    return imuGen.operativa;
 8025ad8:	4b03      	ldr	r3, [pc, #12]	; (8025ae8 <imuGenOperativa+0x14>)
 8025ada:	781b      	ldrb	r3, [r3, #0]
}
 8025adc:	4618      	mov	r0, r3
 8025ade:	46bd      	mov	sp, r7
 8025ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ae4:	4770      	bx	lr
 8025ae6:	bf00      	nop
 8025ae8:	2000c100 	.word	0x2000c100

08025aec <giroIMU>:
**  Descripcion:    Devuelve la velocidad angular de la IMU general
**  Parametros:     Velocidad angular
**  Retorno:        Ninguno
****************************************************************************************/
void giroIMU(float *giro)
{
 8025aec:	b480      	push	{r7}
 8025aee:	b083      	sub	sp, #12
 8025af0:	af00      	add	r7, sp, #0
 8025af2:	6078      	str	r0, [r7, #4]
    giro[0] = imuGen.giroFiltrado[0];
 8025af4:	4b09      	ldr	r3, [pc, #36]	; (8025b1c <giroIMU+0x30>)
 8025af6:	69da      	ldr	r2, [r3, #28]
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	601a      	str	r2, [r3, #0]
    giro[1] = imuGen.giroFiltrado[1];
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	3304      	adds	r3, #4
 8025b00:	4a06      	ldr	r2, [pc, #24]	; (8025b1c <giroIMU+0x30>)
 8025b02:	6a12      	ldr	r2, [r2, #32]
 8025b04:	601a      	str	r2, [r3, #0]
    giro[2] = imuGen.giroFiltrado[2];
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	3308      	adds	r3, #8
 8025b0a:	4a04      	ldr	r2, [pc, #16]	; (8025b1c <giroIMU+0x30>)
 8025b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8025b0e:	601a      	str	r2, [r3, #0]
}
 8025b10:	bf00      	nop
 8025b12:	370c      	adds	r7, #12
 8025b14:	46bd      	mov	sp, r7
 8025b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b1a:	4770      	bx	lr
 8025b1c:	2000c100 	.word	0x2000c100

08025b20 <acelIMU>:
**  Descripcion:    Devuelve la aceleracion lineal de la IMU general
**  Parametros:     Aceleracion lineal
**  Retorno:        Ninguno
****************************************************************************************/
void acelIMU(float *acel)
{
 8025b20:	b480      	push	{r7}
 8025b22:	b083      	sub	sp, #12
 8025b24:	af00      	add	r7, sp, #0
 8025b26:	6078      	str	r0, [r7, #4]
    acel[0] = imuGen.acelFiltrada[0];
 8025b28:	4b09      	ldr	r3, [pc, #36]	; (8025b50 <acelIMU+0x30>)
 8025b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	601a      	str	r2, [r3, #0]
    acel[1] = imuGen.acelFiltrada[1];
 8025b30:	687b      	ldr	r3, [r7, #4]
 8025b32:	3304      	adds	r3, #4
 8025b34:	4a06      	ldr	r2, [pc, #24]	; (8025b50 <acelIMU+0x30>)
 8025b36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8025b38:	601a      	str	r2, [r3, #0]
    acel[2] = imuGen.acelFiltrada[2];
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	3308      	adds	r3, #8
 8025b3e:	4a04      	ldr	r2, [pc, #16]	; (8025b50 <acelIMU+0x30>)
 8025b40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8025b42:	601a      	str	r2, [r3, #0]
}
 8025b44:	bf00      	nop
 8025b46:	370c      	adds	r7, #12
 8025b48:	46bd      	mov	sp, r7
 8025b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b4e:	4770      	bx	lr
 8025b50:	2000c100 	.word	0x2000c100

08025b54 <giroNumIMU>:
**  Descripcion:    Devuelve la velocidad angular de una IMU
**  Parametros:     Numero de IMU, velocidad angular
**  Retorno:        Ninguno
****************************************************************************************/
void giroNumIMU(numIMU_e numIMU, float *giro)
{
 8025b54:	b480      	push	{r7}
 8025b56:	b083      	sub	sp, #12
 8025b58:	af00      	add	r7, sp, #0
 8025b5a:	4603      	mov	r3, r0
 8025b5c:	6039      	str	r1, [r7, #0]
 8025b5e:	71fb      	strb	r3, [r7, #7]
    giro[0] = imu[numIMU].giroFiltrado[0];
 8025b60:	79fa      	ldrb	r2, [r7, #7]
 8025b62:	4914      	ldr	r1, [pc, #80]	; (8025bb4 <giroNumIMU+0x60>)
 8025b64:	4613      	mov	r3, r2
 8025b66:	015b      	lsls	r3, r3, #5
 8025b68:	1a9b      	subs	r3, r3, r2
 8025b6a:	009b      	lsls	r3, r3, #2
 8025b6c:	440b      	add	r3, r1
 8025b6e:	3324      	adds	r3, #36	; 0x24
 8025b70:	681a      	ldr	r2, [r3, #0]
 8025b72:	683b      	ldr	r3, [r7, #0]
 8025b74:	601a      	str	r2, [r3, #0]
    giro[1] = imu[numIMU].giroFiltrado[1];
 8025b76:	79fa      	ldrb	r2, [r7, #7]
 8025b78:	683b      	ldr	r3, [r7, #0]
 8025b7a:	1d19      	adds	r1, r3, #4
 8025b7c:	480d      	ldr	r0, [pc, #52]	; (8025bb4 <giroNumIMU+0x60>)
 8025b7e:	4613      	mov	r3, r2
 8025b80:	015b      	lsls	r3, r3, #5
 8025b82:	1a9b      	subs	r3, r3, r2
 8025b84:	009b      	lsls	r3, r3, #2
 8025b86:	4403      	add	r3, r0
 8025b88:	3328      	adds	r3, #40	; 0x28
 8025b8a:	681b      	ldr	r3, [r3, #0]
 8025b8c:	600b      	str	r3, [r1, #0]
    giro[2] = imu[numIMU].giroFiltrado[2];
 8025b8e:	79fa      	ldrb	r2, [r7, #7]
 8025b90:	683b      	ldr	r3, [r7, #0]
 8025b92:	f103 0108 	add.w	r1, r3, #8
 8025b96:	4807      	ldr	r0, [pc, #28]	; (8025bb4 <giroNumIMU+0x60>)
 8025b98:	4613      	mov	r3, r2
 8025b9a:	015b      	lsls	r3, r3, #5
 8025b9c:	1a9b      	subs	r3, r3, r2
 8025b9e:	009b      	lsls	r3, r3, #2
 8025ba0:	4403      	add	r3, r0
 8025ba2:	332c      	adds	r3, #44	; 0x2c
 8025ba4:	681b      	ldr	r3, [r3, #0]
 8025ba6:	600b      	str	r3, [r1, #0]
}
 8025ba8:	bf00      	nop
 8025baa:	370c      	adds	r7, #12
 8025bac:	46bd      	mov	sp, r7
 8025bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bb2:	4770      	bx	lr
 8025bb4:	2000be94 	.word	0x2000be94

08025bb8 <acelNumIMU>:
**  Descripcion:    Devuelve la aceleracion lineal de una IMU
**  Parametros:     Numero de IMU, aceleracion lineal
**  Retorno:        Ninguno
****************************************************************************************/
void acelNumIMU(numIMU_e numIMU, float *acel)
{
 8025bb8:	b480      	push	{r7}
 8025bba:	b083      	sub	sp, #12
 8025bbc:	af00      	add	r7, sp, #0
 8025bbe:	4603      	mov	r3, r0
 8025bc0:	6039      	str	r1, [r7, #0]
 8025bc2:	71fb      	strb	r3, [r7, #7]
    acel[0] = imu[numIMU].acelFiltrada[0];
 8025bc4:	79fa      	ldrb	r2, [r7, #7]
 8025bc6:	4914      	ldr	r1, [pc, #80]	; (8025c18 <acelNumIMU+0x60>)
 8025bc8:	4613      	mov	r3, r2
 8025bca:	015b      	lsls	r3, r3, #5
 8025bcc:	1a9b      	subs	r3, r3, r2
 8025bce:	009b      	lsls	r3, r3, #2
 8025bd0:	440b      	add	r3, r1
 8025bd2:	3330      	adds	r3, #48	; 0x30
 8025bd4:	681a      	ldr	r2, [r3, #0]
 8025bd6:	683b      	ldr	r3, [r7, #0]
 8025bd8:	601a      	str	r2, [r3, #0]
    acel[1] = imu[numIMU].acelFiltrada[1];
 8025bda:	79fa      	ldrb	r2, [r7, #7]
 8025bdc:	683b      	ldr	r3, [r7, #0]
 8025bde:	1d19      	adds	r1, r3, #4
 8025be0:	480d      	ldr	r0, [pc, #52]	; (8025c18 <acelNumIMU+0x60>)
 8025be2:	4613      	mov	r3, r2
 8025be4:	015b      	lsls	r3, r3, #5
 8025be6:	1a9b      	subs	r3, r3, r2
 8025be8:	009b      	lsls	r3, r3, #2
 8025bea:	4403      	add	r3, r0
 8025bec:	3334      	adds	r3, #52	; 0x34
 8025bee:	681b      	ldr	r3, [r3, #0]
 8025bf0:	600b      	str	r3, [r1, #0]
    acel[2] = imu[numIMU].acelFiltrada[2];
 8025bf2:	79fa      	ldrb	r2, [r7, #7]
 8025bf4:	683b      	ldr	r3, [r7, #0]
 8025bf6:	f103 0108 	add.w	r1, r3, #8
 8025bfa:	4807      	ldr	r0, [pc, #28]	; (8025c18 <acelNumIMU+0x60>)
 8025bfc:	4613      	mov	r3, r2
 8025bfe:	015b      	lsls	r3, r3, #5
 8025c00:	1a9b      	subs	r3, r3, r2
 8025c02:	009b      	lsls	r3, r3, #2
 8025c04:	4403      	add	r3, r0
 8025c06:	3338      	adds	r3, #56	; 0x38
 8025c08:	681b      	ldr	r3, [r3, #0]
 8025c0a:	600b      	str	r3, [r1, #0]
}
 8025c0c:	bf00      	nop
 8025c0e:	370c      	adds	r7, #12
 8025c10:	46bd      	mov	sp, r7
 8025c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c16:	4770      	bx	lr
 8025c18:	2000be94 	.word	0x2000be94

08025c1c <configIMU>:
 8025c1c:	b480      	push	{r7}
 8025c1e:	b083      	sub	sp, #12
 8025c20:	af00      	add	r7, sp, #0
 8025c22:	6078      	str	r0, [r7, #4]
 8025c24:	687a      	ldr	r2, [r7, #4]
 8025c26:	4613      	mov	r3, r2
 8025c28:	005b      	lsls	r3, r3, #1
 8025c2a:	4413      	add	r3, r2
 8025c2c:	00db      	lsls	r3, r3, #3
 8025c2e:	4a04      	ldr	r2, [pc, #16]	; (8025c40 <configIMU+0x24>)
 8025c30:	4413      	add	r3, r2
 8025c32:	4618      	mov	r0, r3
 8025c34:	370c      	adds	r7, #12
 8025c36:	46bd      	mov	sp, r7
 8025c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c3c:	4770      	bx	lr
 8025c3e:	bf00      	nop
 8025c40:	2000a7d0 	.word	0x2000a7d0

08025c44 <iniciarIMUinvensense>:
**  Descripcion:    Inicia el sensor
**  Parametros:     Puntero al sensor
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarIMUinvensense(imu_t *dIMU)
{
 8025c44:	b5b0      	push	{r4, r5, r7, lr}
 8025c46:	b084      	sub	sp, #16
 8025c48:	af00      	add	r7, sp, #0
 8025c4a:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    imuInvensense_t *driver = &imuInvensense[dIMU->numIMU];
 8025c4c:	687b      	ldr	r3, [r7, #4]
 8025c4e:	781b      	ldrb	r3, [r3, #0]
 8025c50:	461a      	mov	r2, r3
 8025c52:	4613      	mov	r3, r2
 8025c54:	009b      	lsls	r3, r3, #2
 8025c56:	4413      	add	r3, r2
 8025c58:	011b      	lsls	r3, r3, #4
 8025c5a:	4a32      	ldr	r2, [pc, #200]	; (8025d24 <iniciarIMUinvensense+0xe0>)
 8025c5c:	4413      	add	r3, r2
 8025c5e:	60fb      	str	r3, [r7, #12]
    dIMU->driver = driver;
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	68fa      	ldr	r2, [r7, #12]
 8025c64:	605a      	str	r2, [r3, #4]

    // Iniciamos y configuramos el bus
    iniciarBusIMUinvensense(&dIMU->bus);
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	3301      	adds	r3, #1
 8025c6a:	4618      	mov	r0, r3
 8025c6c:	f000 f85c 	bl	8025d28 <iniciarBusIMUinvensense>

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 8025c70:	2250      	movs	r2, #80	; 0x50
 8025c72:	2100      	movs	r1, #0
 8025c74:	68f8      	ldr	r0, [r7, #12]
 8025c76:	f00f fb13 	bl	80352a0 <memset>

    if (!chequearIdIMUinvensense(&dIMU->bus, configIMU(dIMU->numIMU)->tipoIMU))
 8025c7a:	687b      	ldr	r3, [r7, #4]
 8025c7c:	1c5c      	adds	r4, r3, #1
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	781b      	ldrb	r3, [r3, #0]
 8025c82:	4618      	mov	r0, r3
 8025c84:	f7ff ffca 	bl	8025c1c <configIMU>
 8025c88:	4603      	mov	r3, r0
 8025c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8025c8e:	b2db      	uxtb	r3, r3
 8025c90:	4619      	mov	r1, r3
 8025c92:	4620      	mov	r0, r4
 8025c94:	f000 f86c 	bl	8025d70 <chequearIdIMUinvensense>
 8025c98:	4603      	mov	r3, r0
 8025c9a:	f083 0301 	eor.w	r3, r3, #1
 8025c9e:	b2db      	uxtb	r3, r3
 8025ca0:	2b00      	cmp	r3, #0
 8025ca2:	d135      	bne.n	8025d10 <iniciarIMUinvensense+0xcc>
        goto error;

    if (!configurarHardwareIMUinvensense(&dIMU->bus, &driver->regControl, configIMU(dIMU->numIMU)->tipoIMU))
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	1c5c      	adds	r4, r3, #1
 8025ca8:	68fd      	ldr	r5, [r7, #12]
 8025caa:	687b      	ldr	r3, [r7, #4]
 8025cac:	781b      	ldrb	r3, [r3, #0]
 8025cae:	4618      	mov	r0, r3
 8025cb0:	f7ff ffb4 	bl	8025c1c <configIMU>
 8025cb4:	4603      	mov	r3, r0
 8025cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8025cba:	b2db      	uxtb	r3, r3
 8025cbc:	461a      	mov	r2, r3
 8025cbe:	4629      	mov	r1, r5
 8025cc0:	4620      	mov	r0, r4
 8025cc2:	f000 f89b 	bl	8025dfc <configurarHardwareIMUinvensense>
 8025cc6:	4603      	mov	r3, r0
 8025cc8:	f083 0301 	eor.w	r3, r3, #1
 8025ccc:	b2db      	uxtb	r3, r3
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	d120      	bne.n	8025d14 <iniciarIMUinvensense+0xd0>
        goto error;

    if (!configurarIMUinvensense(&dIMU->bus, configIMU(dIMU->numIMU)->tipoIMU, driver))
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	1c5c      	adds	r4, r3, #1
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	781b      	ldrb	r3, [r3, #0]
 8025cda:	4618      	mov	r0, r3
 8025cdc:	f7ff ff9e 	bl	8025c1c <configIMU>
 8025ce0:	4603      	mov	r3, r0
 8025ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8025ce6:	b2db      	uxtb	r3, r3
 8025ce8:	68fa      	ldr	r2, [r7, #12]
 8025cea:	4619      	mov	r1, r3
 8025cec:	4620      	mov	r0, r4
 8025cee:	f000 f937 	bl	8025f60 <configurarIMUinvensense>
 8025cf2:	4603      	mov	r3, r0
 8025cf4:	f083 0301 	eor.w	r3, r3, #1
 8025cf8:	b2db      	uxtb	r3, r3
 8025cfa:	2b00      	cmp	r3, #0
 8025cfc:	d10c      	bne.n	8025d18 <iniciarIMUinvensense+0xd4>
        goto error;

    ajustarRelojSPI(dIMU->bus.bus_u.spi.numSPI, SPI_RELOJ_RAPIDO);
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8025d04:	2108      	movs	r1, #8
 8025d06:	4618      	mov	r0, r3
 8025d08:	f7f1 fc75 	bl	80175f6 <ajustarRelojSPI>
    return true;
 8025d0c:	2301      	movs	r3, #1
 8025d0e:	e005      	b.n	8025d1c <iniciarIMUinvensense+0xd8>
        goto error;
 8025d10:	bf00      	nop
 8025d12:	e002      	b.n	8025d1a <iniciarIMUinvensense+0xd6>
        goto error;
 8025d14:	bf00      	nop
 8025d16:	e000      	b.n	8025d1a <iniciarIMUinvensense+0xd6>
        goto error;
 8025d18:	bf00      	nop

  error:
    return false;
 8025d1a:	2300      	movs	r3, #0
}
 8025d1c:	4618      	mov	r0, r3
 8025d1e:	3710      	adds	r7, #16
 8025d20:	46bd      	mov	sp, r7
 8025d22:	bdb0      	pop	{r4, r5, r7, pc}
 8025d24:	2000c694 	.word	0x2000c694

08025d28 <iniciarBusIMUinvensense>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBusIMUinvensense(bus_t *bus)
{
 8025d28:	b580      	push	{r7, lr}
 8025d2a:	b082      	sub	sp, #8
 8025d2c:	af00      	add	r7, sp, #0
 8025d2e:	6078      	str	r0, [r7, #4]
    if (bus->tipo == BUS_SPI) {
 8025d30:	687b      	ldr	r3, [r7, #4]
 8025d32:	f993 3000 	ldrsb.w	r3, [r3]
 8025d36:	2b01      	cmp	r3, #1
 8025d38:	d115      	bne.n	8025d66 <iniciarBusIMUinvensense+0x3e>
        configurarIO(bus->bus_u.spi.pinCS, CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL), 0);
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	789b      	ldrb	r3, [r3, #2]
 8025d3e:	2200      	movs	r2, #0
 8025d40:	f240 3101 	movw	r1, #769	; 0x301
 8025d44:	4618      	mov	r0, r3
 8025d46:	f7f0 fb33 	bl	80163b0 <configurarIO>
        escribirIO(bus->bus_u.spi.pinCS, true);
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	789b      	ldrb	r3, [r3, #2]
 8025d4e:	2101      	movs	r1, #1
 8025d50:	4618      	mov	r0, r3
 8025d52:	f7f0 fc0d 	bl	8016570 <escribirIO>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_LENTO);
 8025d56:	687b      	ldr	r3, [r7, #4]
 8025d58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8025d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025d60:	4618      	mov	r0, r3
 8025d62:	f7f1 fc48 	bl	80175f6 <ajustarRelojSPI>
    }
}
 8025d66:	bf00      	nop
 8025d68:	3708      	adds	r7, #8
 8025d6a:	46bd      	mov	sp, r7
 8025d6c:	bd80      	pop	{r7, pc}
	...

08025d70 <chequearIdIMUinvensense>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus, tipo de imu
**  Retorno:        True si ok
****************************************************************************************/
bool chequearIdIMUinvensense(bus_t *bus, uint8_t tipoIMU)
{
 8025d70:	b580      	push	{r7, lr}
 8025d72:	b084      	sub	sp, #16
 8025d74:	af00      	add	r7, sp, #0
 8025d76:	6078      	str	r0, [r7, #4]
 8025d78:	460b      	mov	r3, r1
 8025d7a:	70fb      	strb	r3, [r7, #3]
    uint8_t id;
    leerRegistroBus(bus, INVENSENSE_WHOAMI | 0x80, &id);
 8025d7c:	f107 030f 	add.w	r3, r7, #15
 8025d80:	461a      	mov	r2, r3
 8025d82:	21f5      	movs	r1, #245	; 0xf5
 8025d84:	6878      	ldr	r0, [r7, #4]
 8025d86:	f7ef fb48 	bl	801541a <leerRegistroBus>

    switch (tipoIMU) {
 8025d8a:	78fb      	ldrb	r3, [r7, #3]
 8025d8c:	2b04      	cmp	r3, #4
 8025d8e:	d82f      	bhi.n	8025df0 <chequearIdIMUinvensense+0x80>
 8025d90:	a201      	add	r2, pc, #4	; (adr r2, 8025d98 <chequearIdIMUinvensense+0x28>)
 8025d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025d96:	bf00      	nop
 8025d98:	08025dad 	.word	0x08025dad
 8025d9c:	08025db7 	.word	0x08025db7
 8025da0:	08025dc1 	.word	0x08025dc1
 8025da4:	08025dcb 	.word	0x08025dcb
 8025da8:	08025dd5 	.word	0x08025dd5
        case IMU_MPU6000:
            if (id == INVENSENSE_WHOAMI_MPU6000)
 8025dac:	7bfb      	ldrb	r3, [r7, #15]
 8025dae:	2b68      	cmp	r3, #104	; 0x68
 8025db0:	d115      	bne.n	8025dde <chequearIdIMUinvensense+0x6e>
                return true;
 8025db2:	2301      	movs	r3, #1
 8025db4:	e01d      	b.n	8025df2 <chequearIdIMUinvensense+0x82>
            break;

        case IMU_MPU9250:
            if (id == INVENSENSE_WHOAMI_MPU9250)
 8025db6:	7bfb      	ldrb	r3, [r7, #15]
 8025db8:	2b71      	cmp	r3, #113	; 0x71
 8025dba:	d112      	bne.n	8025de2 <chequearIdIMUinvensense+0x72>
                return true;
 8025dbc:	2301      	movs	r3, #1
 8025dbe:	e018      	b.n	8025df2 <chequearIdIMUinvensense+0x82>
            break;

        case IMU_ICM20602:
            if (id == INVENSENSE_WHOAMI_ICM20602)
 8025dc0:	7bfb      	ldrb	r3, [r7, #15]
 8025dc2:	2b12      	cmp	r3, #18
 8025dc4:	d10f      	bne.n	8025de6 <chequearIdIMUinvensense+0x76>
                return true;
 8025dc6:	2301      	movs	r3, #1
 8025dc8:	e013      	b.n	8025df2 <chequearIdIMUinvensense+0x82>
            break;

        case IMU_ICM20689:
            if (id == INVENSENSE_WHOAMI_ICM20689)
 8025dca:	7bfb      	ldrb	r3, [r7, #15]
 8025dcc:	2b98      	cmp	r3, #152	; 0x98
 8025dce:	d10c      	bne.n	8025dea <chequearIdIMUinvensense+0x7a>
                return true;
 8025dd0:	2301      	movs	r3, #1
 8025dd2:	e00e      	b.n	8025df2 <chequearIdIMUinvensense+0x82>
            break;

        case IMU_ICM20789:
            if (id == INVENSENSE_WHOAMI_ICM20789)
 8025dd4:	7bfb      	ldrb	r3, [r7, #15]
 8025dd6:	2b03      	cmp	r3, #3
 8025dd8:	d109      	bne.n	8025dee <chequearIdIMUinvensense+0x7e>
                return true;
 8025dda:	2301      	movs	r3, #1
 8025ddc:	e009      	b.n	8025df2 <chequearIdIMUinvensense+0x82>
            break;
 8025dde:	bf00      	nop
 8025de0:	e006      	b.n	8025df0 <chequearIdIMUinvensense+0x80>
            break;
 8025de2:	bf00      	nop
 8025de4:	e004      	b.n	8025df0 <chequearIdIMUinvensense+0x80>
            break;
 8025de6:	bf00      	nop
 8025de8:	e002      	b.n	8025df0 <chequearIdIMUinvensense+0x80>
            break;
 8025dea:	bf00      	nop
 8025dec:	e000      	b.n	8025df0 <chequearIdIMUinvensense+0x80>
            break;
 8025dee:	bf00      	nop
    }

    return false;
 8025df0:	2300      	movs	r3, #0
}
 8025df2:	4618      	mov	r0, r3
 8025df4:	3710      	adds	r7, #16
 8025df6:	46bd      	mov	sp, r7
 8025df8:	bd80      	pop	{r7, pc}
 8025dfa:	bf00      	nop

08025dfc <configurarHardwareIMUinvensense>:
**  Descripcion:    Configura el hardware del sensor
**  Parametros:     Puntero al bus, registro de control, tipo de IMU
**  Retorno:        True si ok
****************************************************************************************/
bool configurarHardwareIMUinvensense(bus_t *bus, uint8_t *regControl, uint8_t tipoIMU)
{
 8025dfc:	b580      	push	{r7, lr}
 8025dfe:	b086      	sub	sp, #24
 8025e00:	af00      	add	r7, sp, #0
 8025e02:	60f8      	str	r0, [r7, #12]
 8025e04:	60b9      	str	r1, [r7, #8]
 8025e06:	4613      	mov	r3, r2
 8025e08:	71fb      	strb	r3, [r7, #7]
    uint8_t numIntentos = 0;
 8025e0a:	2300      	movs	r3, #0
 8025e0c:	75fb      	strb	r3, [r7, #23]
    for (numIntentos = 0; numIntentos < 5; numIntentos++) {
 8025e0e:	2300      	movs	r3, #0
 8025e10:	75fb      	strb	r3, [r7, #23]
 8025e12:	e092      	b.n	8025f3a <configurarHardwareIMUinvensense+0x13e>
    	leerRegistroBus(bus, INVENSENSE_USER_CTRL | 0x80, regControl);
 8025e14:	68ba      	ldr	r2, [r7, #8]
 8025e16:	21ea      	movs	r1, #234	; 0xea
 8025e18:	68f8      	ldr	r0, [r7, #12]
 8025e1a:	f7ef fafe 	bl	801541a <leerRegistroBus>

        if (tipoIMU == IMU_MPU9250) {
 8025e1e:	79fb      	ldrb	r3, [r7, #7]
 8025e20:	2b01      	cmp	r3, #1
 8025e22:	d111      	bne.n	8025e48 <configurarHardwareIMUinvensense+0x4c>
            *regControl |= INVENSENSE_USER_I2C_MST_EN;
 8025e24:	68bb      	ldr	r3, [r7, #8]
 8025e26:	781b      	ldrb	r3, [r3, #0]
 8025e28:	f043 0320 	orr.w	r3, r3, #32
 8025e2c:	b2da      	uxtb	r2, r3
 8025e2e:	68bb      	ldr	r3, [r7, #8]
 8025e30:	701a      	strb	r2, [r3, #0]
            escribirRegistroBus(bus, INVENSENSE_USER_CTRL, *regControl);
 8025e32:	68bb      	ldr	r3, [r7, #8]
 8025e34:	781b      	ldrb	r3, [r3, #0]
 8025e36:	461a      	mov	r2, r3
 8025e38:	216a      	movs	r1, #106	; 0x6a
 8025e3a:	68f8      	ldr	r0, [r7, #12]
 8025e3c:	f7ef faaa 	bl	8015394 <escribirRegistroBus>
            delay(10);
 8025e40:	200a      	movs	r0, #10
 8025e42:	f7f1 fea8 	bl	8017b96 <delay>
 8025e46:	e016      	b.n	8025e76 <configurarHardwareIMUinvensense+0x7a>
        }
        else {
            // Deshabilitamos el master I2C
            if (*regControl & INVENSENSE_USER_I2C_MST_EN) {
 8025e48:	68bb      	ldr	r3, [r7, #8]
 8025e4a:	781b      	ldrb	r3, [r3, #0]
 8025e4c:	f003 0320 	and.w	r3, r3, #32
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	d010      	beq.n	8025e76 <configurarHardwareIMUinvensense+0x7a>
                *regControl &= ~INVENSENSE_USER_I2C_MST_EN;
 8025e54:	68bb      	ldr	r3, [r7, #8]
 8025e56:	781b      	ldrb	r3, [r3, #0]
 8025e58:	f023 0320 	bic.w	r3, r3, #32
 8025e5c:	b2da      	uxtb	r2, r3
 8025e5e:	68bb      	ldr	r3, [r7, #8]
 8025e60:	701a      	strb	r2, [r3, #0]
                escribirRegistroBus(bus, INVENSENSE_USER_CTRL, *regControl);
 8025e62:	68bb      	ldr	r3, [r7, #8]
 8025e64:	781b      	ldrb	r3, [r3, #0]
 8025e66:	461a      	mov	r2, r3
 8025e68:	216a      	movs	r1, #106	; 0x6a
 8025e6a:	68f8      	ldr	r0, [r7, #12]
 8025e6c:	f7ef fa92 	bl	8015394 <escribirRegistroBus>
                delay(10);
 8025e70:	200a      	movs	r0, #10
 8025e72:	f7f1 fe90 	bl	8017b96 <delay>
            }
        }

        // Reset IMU
        escribirRegistroBus(bus, INVENSENSE_PWR_MGMT_1, INVENSENSE_PWR_1_DEVICE_RST);
 8025e76:	2280      	movs	r2, #128	; 0x80
 8025e78:	216b      	movs	r1, #107	; 0x6b
 8025e7a:	68f8      	ldr	r0, [r7, #12]
 8025e7c:	f7ef fa8a 	bl	8015394 <escribirRegistroBus>
        delay(100);
 8025e80:	2064      	movs	r0, #100	; 0x64
 8025e82:	f7f1 fe88 	bl	8017b96 <delay>

        // Reset analog y signal paths del sensor (Recomendado en el Datasheet para ser hecho despues del reset)
        switch (tipoIMU) {
 8025e86:	79fb      	ldrb	r3, [r7, #7]
 8025e88:	2b01      	cmp	r3, #1
 8025e8a:	dc02      	bgt.n	8025e92 <configurarHardwareIMUinvensense+0x96>
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	da04      	bge.n	8025e9a <configurarHardwareIMUinvensense+0x9e>
 8025e90:	e00f      	b.n	8025eb2 <configurarHardwareIMUinvensense+0xb6>
 8025e92:	3b02      	subs	r3, #2
 8025e94:	2b02      	cmp	r3, #2
 8025e96:	d80c      	bhi.n	8025eb2 <configurarHardwareIMUinvensense+0xb6>
 8025e98:	e005      	b.n	8025ea6 <configurarHardwareIMUinvensense+0xaa>
            case IMU_MPU6000:
            case IMU_MPU9250:
            	escribirRegistroBus(bus, INVENSENSE_SIGNAL_PATH_RESET, INVENSENSE_PATH_TEMP_RESET | INVENSENSE_PATH_ACCEL_RESET | INVENSENSE_PATH_GYRO_RESET);
 8025e9a:	2207      	movs	r2, #7
 8025e9c:	2168      	movs	r1, #104	; 0x68
 8025e9e:	68f8      	ldr	r0, [r7, #12]
 8025ea0:	f7ef fa78 	bl	8015394 <escribirRegistroBus>
                break;
 8025ea4:	e005      	b.n	8025eb2 <configurarHardwareIMUinvensense+0xb6>

            case IMU_ICM20602:
            case IMU_ICM20689:
            case IMU_ICM20789:
            	escribirRegistroBus(bus, INVENSENSE_SIGNAL_PATH_RESET, INVENSENSE_PATH_TEMP_RESET | INVENSENSE_PATH_ACCEL_RESET);
 8025ea6:	2203      	movs	r2, #3
 8025ea8:	2168      	movs	r1, #104	; 0x68
 8025eaa:	68f8      	ldr	r0, [r7, #12]
 8025eac:	f7ef fa72 	bl	8015394 <escribirRegistroBus>
                break;
 8025eb0:	bf00      	nop
        }

        delay(100);
 8025eb2:	2064      	movs	r0, #100	; 0x64
 8025eb4:	f7f1 fe6f 	bl	8017b96 <delay>

        // Deshabilitamos el bus I2C si el SPI es seleccionado (Recomendado en el Datasheet para ser hecho despues del reset)
        if (bus->tipo == BUS_SPI) {
 8025eb8:	68fb      	ldr	r3, [r7, #12]
 8025eba:	f993 3000 	ldrsb.w	r3, [r3]
 8025ebe:	2b01      	cmp	r3, #1
 8025ec0:	d10d      	bne.n	8025ede <configurarHardwareIMUinvensense+0xe2>
            *regControl |= INVENSENSE_USER_I2C_IF_DIS;
 8025ec2:	68bb      	ldr	r3, [r7, #8]
 8025ec4:	781b      	ldrb	r3, [r3, #0]
 8025ec6:	f043 0310 	orr.w	r3, r3, #16
 8025eca:	b2da      	uxtb	r2, r3
 8025ecc:	68bb      	ldr	r3, [r7, #8]
 8025ece:	701a      	strb	r2, [r3, #0]
            escribirRegistroBus(bus, INVENSENSE_USER_CTRL, *regControl);
 8025ed0:	68bb      	ldr	r3, [r7, #8]
 8025ed2:	781b      	ldrb	r3, [r3, #0]
 8025ed4:	461a      	mov	r2, r3
 8025ed6:	216a      	movs	r1, #106	; 0x6a
 8025ed8:	68f8      	ldr	r0, [r7, #12]
 8025eda:	f7ef fa5b 	bl	8015394 <escribirRegistroBus>
        }

        // Habilitamos el bypass del I2C para acceder al dispositivo
        if (bus->tipo == BUS_I2C && (tipoIMU == IMU_MPU9250 || tipoIMU == IMU_ICM20789))
 8025ede:	68fb      	ldr	r3, [r7, #12]
 8025ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	d10a      	bne.n	8025efe <configurarHardwareIMUinvensense+0x102>
 8025ee8:	79fb      	ldrb	r3, [r7, #7]
 8025eea:	2b01      	cmp	r3, #1
 8025eec:	d002      	beq.n	8025ef4 <configurarHardwareIMUinvensense+0xf8>
 8025eee:	79fb      	ldrb	r3, [r7, #7]
 8025ef0:	2b04      	cmp	r3, #4
 8025ef2:	d104      	bne.n	8025efe <configurarHardwareIMUinvensense+0x102>
        	escribirRegistroBus(bus, INVENSENSE_INT_PIN_CFG, INVENSENSE_BYPASS_EN);
 8025ef4:	2202      	movs	r2, #2
 8025ef6:	2137      	movs	r1, #55	; 0x37
 8025ef8:	68f8      	ldr	r0, [r7, #12]
 8025efa:	f7ef fa4b 	bl	8015394 <escribirRegistroBus>

        // Despertamos el sensor y seleccionamos el reloj. El sensor se inicia en sleep mode por lo que puede tomar algo de tiempo
        escribirRegistroBus(bus, INVENSENSE_PWR_MGMT_1, INVENSENSE_PWR_1_CLK_XGYRO);
 8025efe:	2201      	movs	r2, #1
 8025f00:	216b      	movs	r1, #107	; 0x6b
 8025f02:	68f8      	ldr	r0, [r7, #12]
 8025f04:	f7ef fa46 	bl	8015394 <escribirRegistroBus>
        delay(5);
 8025f08:	2005      	movs	r0, #5
 8025f0a:	f7f1 fe44 	bl	8017b96 <delay>

        // Comprobamos si se ha despertado
        uint8_t clk;
        leerRegistroBus(bus, INVENSENSE_PWR_MGMT_1 | 0x80, &clk);
 8025f0e:	f107 0316 	add.w	r3, r7, #22
 8025f12:	461a      	mov	r2, r3
 8025f14:	21eb      	movs	r1, #235	; 0xeb
 8025f16:	68f8      	ldr	r0, [r7, #12]
 8025f18:	f7ef fa7f 	bl	801541a <leerRegistroBus>
        if (clk == INVENSENSE_PWR_1_CLK_XGYRO)
 8025f1c:	7dbb      	ldrb	r3, [r7, #22]
 8025f1e:	2b01      	cmp	r3, #1
 8025f20:	d010      	beq.n	8025f44 <configurarHardwareIMUinvensense+0x148>
            break;

        delay(10);
 8025f22:	200a      	movs	r0, #10
 8025f24:	f7f1 fe37 	bl	8017b96 <delay>
        if (datoDisponibleIMUinvensense(bus))
 8025f28:	68f8      	ldr	r0, [r7, #12]
 8025f2a:	f000 fa6d 	bl	8026408 <datoDisponibleIMUinvensense>
 8025f2e:	4603      	mov	r3, r0
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	d109      	bne.n	8025f48 <configurarHardwareIMUinvensense+0x14c>
    for (numIntentos = 0; numIntentos < 5; numIntentos++) {
 8025f34:	7dfb      	ldrb	r3, [r7, #23]
 8025f36:	3301      	adds	r3, #1
 8025f38:	75fb      	strb	r3, [r7, #23]
 8025f3a:	7dfb      	ldrb	r3, [r7, #23]
 8025f3c:	2b04      	cmp	r3, #4
 8025f3e:	f67f af69 	bls.w	8025e14 <configurarHardwareIMUinvensense+0x18>
 8025f42:	e002      	b.n	8025f4a <configurarHardwareIMUinvensense+0x14e>
            break;
 8025f44:	bf00      	nop
 8025f46:	e000      	b.n	8025f4a <configurarHardwareIMUinvensense+0x14e>
            break;
 8025f48:	bf00      	nop
    }

    if (numIntentos >= 5)
 8025f4a:	7dfb      	ldrb	r3, [r7, #23]
 8025f4c:	2b04      	cmp	r3, #4
 8025f4e:	d901      	bls.n	8025f54 <configurarHardwareIMUinvensense+0x158>
        return false;
 8025f50:	2300      	movs	r3, #0
 8025f52:	e000      	b.n	8025f56 <configurarHardwareIMUinvensense+0x15a>

    return true;
 8025f54:	2301      	movs	r3, #1
}
 8025f56:	4618      	mov	r0, r3
 8025f58:	3718      	adds	r7, #24
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}
	...

08025f60 <configurarIMUinvensense>:
**  Descripcion:    Configura el muestreo, filtro y escalado del sensor
**  Parametros:     Puntero al bus, tipo de imu, puntero al driver
**  Retorno:        True si ok
****************************************************************************************/
bool configurarIMUinvensense(bus_t *bus, uint8_t tipoIMU, imuInvensense_t *dIMU)
{
 8025f60:	b580      	push	{r7, lr}
 8025f62:	b086      	sub	sp, #24
 8025f64:	af00      	add	r7, sp, #0
 8025f66:	60f8      	str	r0, [r7, #12]
 8025f68:	460b      	mov	r3, r1
 8025f6a:	607a      	str	r2, [r7, #4]
 8025f6c:	72fb      	strb	r3, [r7, #11]
    uint8_t rev, regGiro1 = 0, regGiro2 = 0, regAcel1 = 0, regAcel2 = 0;
 8025f6e:	2300      	movs	r3, #0
 8025f70:	75fb      	strb	r3, [r7, #23]
 8025f72:	2300      	movs	r3, #0
 8025f74:	75bb      	strb	r3, [r7, #22]
 8025f76:	2300      	movs	r3, #0
 8025f78:	757b      	strb	r3, [r7, #21]
 8025f7a:	2300      	movs	r3, #0
 8025f7c:	753b      	strb	r3, [r7, #20]

    regGiro2 |= INVENSENSE_GYRO_FS_2000;
 8025f7e:	7dbb      	ldrb	r3, [r7, #22]
 8025f80:	f043 0318 	orr.w	r3, r3, #24
 8025f84:	75bb      	strb	r3, [r7, #22]
    dIMU->escalaGiro = 1 / 16.4f;
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	4a57      	ldr	r2, [pc, #348]	; (80260e8 <configurarIMUinvensense+0x188>)
 8025f8a:	60da      	str	r2, [r3, #12]

    // Leemos la revision del sensor. La revision C tiene la mitad de la sensitividad de la D
    leerRegistroBus(bus, INVENSENSE_PRODUCT_REV | 0x80, &rev);
 8025f8c:	f107 0313 	add.w	r3, r7, #19
 8025f90:	461a      	mov	r2, r3
 8025f92:	218c      	movs	r1, #140	; 0x8c
 8025f94:	68f8      	ldr	r0, [r7, #12]
 8025f96:	f7ef fa40 	bl	801541a <leerRegistroBus>
    if (tipoIMU == IMU_MPU6000 && (((rev == MPU6000ES_REV_C4) || (rev == MPU6000ES_REV_C5) || (rev == MPU6000_REV_C4) || (rev == MPU6000_REV_C5)))) {
 8025f9a:	7afb      	ldrb	r3, [r7, #11]
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	d112      	bne.n	8025fc6 <configurarIMUinvensense+0x66>
 8025fa0:	7cfb      	ldrb	r3, [r7, #19]
 8025fa2:	2b14      	cmp	r3, #20
 8025fa4:	d008      	beq.n	8025fb8 <configurarIMUinvensense+0x58>
 8025fa6:	7cfb      	ldrb	r3, [r7, #19]
 8025fa8:	2b15      	cmp	r3, #21
 8025faa:	d005      	beq.n	8025fb8 <configurarIMUinvensense+0x58>
 8025fac:	7cfb      	ldrb	r3, [r7, #19]
 8025fae:	2b54      	cmp	r3, #84	; 0x54
 8025fb0:	d002      	beq.n	8025fb8 <configurarIMUinvensense+0x58>
 8025fb2:	7cfb      	ldrb	r3, [r7, #19]
 8025fb4:	2b55      	cmp	r3, #85	; 0x55
 8025fb6:	d106      	bne.n	8025fc6 <configurarIMUinvensense+0x66>
        regAcel1 = INVENSENSE_ACCEL_FS_8;
 8025fb8:	2310      	movs	r3, #16
 8025fba:	757b      	strb	r3, [r7, #21]
        dIMU->escalaAcel = 1 / 4096.0;
 8025fbc:	687b      	ldr	r3, [r7, #4]
 8025fbe:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8025fc2:	611a      	str	r2, [r3, #16]
 8025fc4:	e005      	b.n	8025fd2 <configurarIMUinvensense+0x72>
    }
    else {
        regAcel1 = INVENSENSE_ACCEL_FS_16;
 8025fc6:	2318      	movs	r3, #24
 8025fc8:	757b      	strb	r3, [r7, #21]
        dIMU->escalaAcel = 1 / 2048.0;
 8025fca:	687b      	ldr	r3, [r7, #4]
 8025fcc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8025fd0:	611a      	str	r2, [r3, #16]
    }

    switch (tipoIMU) {
 8025fd2:	7afb      	ldrb	r3, [r7, #11]
 8025fd4:	2b04      	cmp	r3, #4
 8025fd6:	d830      	bhi.n	802603a <configurarIMUinvensense+0xda>
 8025fd8:	a201      	add	r2, pc, #4	; (adr r2, 8025fe0 <configurarIMUinvensense+0x80>)
 8025fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025fde:	bf00      	nop
 8025fe0:	08025ff5 	.word	0x08025ff5
 8025fe4:	08026003 	.word	0x08026003
 8025fe8:	08026011 	.word	0x08026011
 8025fec:	0802601f 	.word	0x0802601f
 8025ff0:	0802602d 	.word	0x0802602d
        case IMU_MPU6000:
        	dIMU->tempCero = 36.53f;
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	4a3d      	ldr	r2, [pc, #244]	; (80260ec <configurarIMUinvensense+0x18c>)
 8025ff8:	605a      	str	r2, [r3, #4]
        	dIMU->tempSens = 1.0f / 340;
 8025ffa:	687b      	ldr	r3, [r7, #4]
 8025ffc:	4a3c      	ldr	r2, [pc, #240]	; (80260f0 <configurarIMUinvensense+0x190>)
 8025ffe:	609a      	str	r2, [r3, #8]
            break;
 8026000:	e01b      	b.n	802603a <configurarIMUinvensense+0xda>

        case IMU_MPU9250:
        	dIMU->tempCero = 21.0f;
 8026002:	687b      	ldr	r3, [r7, #4]
 8026004:	4a3b      	ldr	r2, [pc, #236]	; (80260f4 <configurarIMUinvensense+0x194>)
 8026006:	605a      	str	r2, [r3, #4]
        	dIMU->tempSens = 1.0f / 340;
 8026008:	687b      	ldr	r3, [r7, #4]
 802600a:	4a39      	ldr	r2, [pc, #228]	; (80260f0 <configurarIMUinvensense+0x190>)
 802600c:	609a      	str	r2, [r3, #8]
            break;
 802600e:	e014      	b.n	802603a <configurarIMUinvensense+0xda>

        case IMU_ICM20602:
        	dIMU->tempCero = 25.0f;
 8026010:	687b      	ldr	r3, [r7, #4]
 8026012:	4a39      	ldr	r2, [pc, #228]	; (80260f8 <configurarIMUinvensense+0x198>)
 8026014:	605a      	str	r2, [r3, #4]
        	dIMU->tempSens = 1 / 326.8f;
 8026016:	687b      	ldr	r3, [r7, #4]
 8026018:	4a38      	ldr	r2, [pc, #224]	; (80260fc <configurarIMUinvensense+0x19c>)
 802601a:	609a      	str	r2, [r3, #8]
            break;
 802601c:	e00d      	b.n	802603a <configurarIMUinvensense+0xda>

        case IMU_ICM20689:
        	dIMU->tempCero = 25.0f;
 802601e:	687b      	ldr	r3, [r7, #4]
 8026020:	4a35      	ldr	r2, [pc, #212]	; (80260f8 <configurarIMUinvensense+0x198>)
 8026022:	605a      	str	r2, [r3, #4]
        	dIMU->tempSens = 0.003f;
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	4a36      	ldr	r2, [pc, #216]	; (8026100 <configurarIMUinvensense+0x1a0>)
 8026028:	609a      	str	r2, [r3, #8]
            break;
 802602a:	e006      	b.n	802603a <configurarIMUinvensense+0xda>

        case IMU_ICM20789:
        	dIMU->tempCero = 25.0f;
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	4a32      	ldr	r2, [pc, #200]	; (80260f8 <configurarIMUinvensense+0x198>)
 8026030:	605a      	str	r2, [r3, #4]
        	dIMU->tempSens = 0.003f;
 8026032:	687b      	ldr	r3, [r7, #4]
 8026034:	4a32      	ldr	r2, [pc, #200]	; (8026100 <configurarIMUinvensense+0x1a0>)
 8026036:	609a      	str	r2, [r3, #8]
            break;
 8026038:	bf00      	nop
    }

    // Configuramos el filtro. Si tenemos la imu por SPI muestreamos a max. velocidad sin filtro. Sino ponemos el filtro mas alto
    if (tipoIMU > IMU_MPU9250 && bus->tipo == BUS_SPI) {
 802603a:	7afb      	ldrb	r3, [r7, #11]
 802603c:	2b01      	cmp	r3, #1
 802603e:	d90d      	bls.n	802605c <configurarIMUinvensense+0xfc>
 8026040:	68fb      	ldr	r3, [r7, #12]
 8026042:	f993 3000 	ldrsb.w	r3, [r3]
 8026046:	2b01      	cmp	r3, #1
 8026048:	d108      	bne.n	802605c <configurarIMUinvensense+0xfc>
        regGiro1 |= INVENSENSE_GIRO_DLPF_0;
        regGiro2 |= INVENSENSE_GYRO_FCHOICE_1;
 802604a:	7dbb      	ldrb	r3, [r7, #22]
 802604c:	f043 0301 	orr.w	r3, r3, #1
 8026050:	75bb      	strb	r3, [r7, #22]
        regAcel2 |= INVENSENSE_ACCEL_FCHOICE_1 | INVENSENSE_ACCEL_DLPF_0;
 8026052:	7d3b      	ldrb	r3, [r7, #20]
 8026054:	f043 0308 	orr.w	r3, r3, #8
 8026058:	753b      	strb	r3, [r7, #20]
 802605a:	e003      	b.n	8026064 <configurarIMUinvensense+0x104>
    }
    else {
        regGiro1 |= INVENSENSE_GIRO_DLPF_0;
        regGiro2 |= INVENSENSE_GYRO_FCHOICE_0;
        regAcel2 |= INVENSENSE_ACCEL_FCHOICE_0 | INVENSENSE_ACCEL_DLPF_1;
 802605c:	7d3b      	ldrb	r3, [r7, #20]
 802605e:	f043 0301 	orr.w	r3, r3, #1
 8026062:	753b      	strb	r3, [r7, #20]
    }

    escribirRegistroBus(bus, INVENSENSE_CONFIG, regGiro1);
 8026064:	7dfb      	ldrb	r3, [r7, #23]
 8026066:	461a      	mov	r2, r3
 8026068:	211a      	movs	r1, #26
 802606a:	68f8      	ldr	r0, [r7, #12]
 802606c:	f7ef f992 	bl	8015394 <escribirRegistroBus>
    escribirRegistroBus(bus, INVENSENSE_GYRO_CONFIG, regGiro2);
 8026070:	7dbb      	ldrb	r3, [r7, #22]
 8026072:	461a      	mov	r2, r3
 8026074:	211b      	movs	r1, #27
 8026076:	68f8      	ldr	r0, [r7, #12]
 8026078:	f7ef f98c 	bl	8015394 <escribirRegistroBus>
    escribirRegistroBus(bus, INVENSENSE_ACCEL_CONFIG, regAcel1);
 802607c:	7d7b      	ldrb	r3, [r7, #21]
 802607e:	461a      	mov	r2, r3
 8026080:	211c      	movs	r1, #28
 8026082:	68f8      	ldr	r0, [r7, #12]
 8026084:	f7ef f986 	bl	8015394 <escribirRegistroBus>
    escribirRegistroBus(bus, INVENSENSE_ACCEL_CONFIG_2, regAcel2);
 8026088:	7d3b      	ldrb	r3, [r7, #20]
 802608a:	461a      	mov	r2, r3
 802608c:	211d      	movs	r1, #29
 802608e:	68f8      	ldr	r0, [r7, #12]
 8026090:	f7ef f980 	bl	8015394 <escribirRegistroBus>

    // Configuramos la frecuencia de muestreo
    escribirRegistroBus(bus, INVENSENSE_SMPLRT_DIV, 0);
 8026094:	2200      	movs	r2, #0
 8026096:	2119      	movs	r1, #25
 8026098:	68f8      	ldr	r0, [r7, #12]
 802609a:	f7ef f97b 	bl	8015394 <escribirRegistroBus>
    delay(1);
 802609e:	2001      	movs	r0, #1
 80260a0:	f7f1 fd79 	bl	8017b96 <delay>

    if (tipoIMU == IMU_ICM20602)
 80260a4:	7afb      	ldrb	r3, [r7, #11]
 80260a6:	2b02      	cmp	r3, #2
 80260a8:	d104      	bne.n	80260b4 <configurarIMUinvensense+0x154>
    	escribirRegistroBus(bus, INVENSENSE_ICM_UNDOC1, INVENSENSE_ICM_UNDOC1_VALUE);
 80260aa:	22c9      	movs	r2, #201	; 0xc9
 80260ac:	2111      	movs	r1, #17
 80260ae:	68f8      	ldr	r0, [r7, #12]
 80260b0:	f7ef f970 	bl	8015394 <escribirRegistroBus>

    // Configuramos la interrupcion para arrojar datos nuevos
    escribirRegistroBus(bus, INVENSENSE_INT_ENABLE, 0x01);
 80260b4:	2201      	movs	r2, #1
 80260b6:	2138      	movs	r1, #56	; 0x38
 80260b8:	68f8      	ldr	r0, [r7, #12]
 80260ba:	f7ef f96b 	bl	8015394 <escribirRegistroBus>
    delay(1);
 80260be:	2001      	movs	r0, #1
 80260c0:	f7f1 fd69 	bl	8017b96 <delay>

    if (bus->tipo == BUS_SPI)
 80260c4:	68fb      	ldr	r3, [r7, #12]
 80260c6:	f993 3000 	ldrsb.w	r3, [r3]
 80260ca:	2b01      	cmp	r3, #1
 80260cc:	d106      	bne.n	80260dc <configurarIMUinvensense+0x17c>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_ESTANDAR);
 80260ce:	68fb      	ldr	r3, [r7, #12]
 80260d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80260d4:	2110      	movs	r1, #16
 80260d6:	4618      	mov	r0, r3
 80260d8:	f7f1 fa8d 	bl	80175f6 <ajustarRelojSPI>

    return true;
 80260dc:	2301      	movs	r3, #1
}
 80260de:	4618      	mov	r0, r3
 80260e0:	3718      	adds	r7, #24
 80260e2:	46bd      	mov	sp, r7
 80260e4:	bd80      	pop	{r7, pc}
 80260e6:	bf00      	nop
 80260e8:	3d79c190 	.word	0x3d79c190
 80260ec:	42121eb8 	.word	0x42121eb8
 80260f0:	3b40c0c1 	.word	0x3b40c0c1
 80260f4:	41a80000 	.word	0x41a80000
 80260f8:	41c80000 	.word	0x41c80000
 80260fc:	3b4889df 	.word	0x3b4889df
 8026100:	3b449ba6 	.word	0x3b449ba6

08026104 <leerAdcIMUinvensense>:
**  Descripcion:    Obtiene los valores del adc
**  Parametros:     Puntero al bus, valores del adc
**  Retorno:        True si ok
****************************************************************************************/
CODIGO_RAPIDO bool leerAdcIMUinvensense(bus_t *bus, int16_t *adc)
{
 8026104:	b580      	push	{r7, lr}
 8026106:	b086      	sub	sp, #24
 8026108:	af00      	add	r7, sp, #0
 802610a:	6078      	str	r0, [r7, #4]
 802610c:	6039      	str	r1, [r7, #0]
    uint8_t val[14];

    if (!leerBufferRegistroBus(bus, INVENSENSE_ACCEL_XOUT_H | 0x80, val, 14))    // Envia la direccion a leer
 802610e:	f107 0208 	add.w	r2, r7, #8
 8026112:	230e      	movs	r3, #14
 8026114:	21bb      	movs	r1, #187	; 0xbb
 8026116:	6878      	ldr	r0, [r7, #4]
 8026118:	f7ef f991 	bl	801543e <leerBufferRegistroBus>
 802611c:	4603      	mov	r3, r0
 802611e:	f083 0301 	eor.w	r3, r3, #1
 8026122:	b2db      	uxtb	r3, r3
 8026124:	2b00      	cmp	r3, #0
 8026126:	d001      	beq.n	802612c <leerAdcIMUinvensense+0x28>
        return false;
 8026128:	2300      	movs	r3, #0
 802612a:	e045      	b.n	80261b8 <leerAdcIMUinvensense+0xb4>

    adc[0] = (val[0] << 8) | val[1];
 802612c:	7a3b      	ldrb	r3, [r7, #8]
 802612e:	021b      	lsls	r3, r3, #8
 8026130:	b21a      	sxth	r2, r3
 8026132:	7a7b      	ldrb	r3, [r7, #9]
 8026134:	b21b      	sxth	r3, r3
 8026136:	4313      	orrs	r3, r2
 8026138:	b21a      	sxth	r2, r3
 802613a:	683b      	ldr	r3, [r7, #0]
 802613c:	801a      	strh	r2, [r3, #0]
    adc[1] = (val[2] << 8) | val[3];
 802613e:	7abb      	ldrb	r3, [r7, #10]
 8026140:	021b      	lsls	r3, r3, #8
 8026142:	b219      	sxth	r1, r3
 8026144:	7afb      	ldrb	r3, [r7, #11]
 8026146:	b21a      	sxth	r2, r3
 8026148:	683b      	ldr	r3, [r7, #0]
 802614a:	3302      	adds	r3, #2
 802614c:	430a      	orrs	r2, r1
 802614e:	b212      	sxth	r2, r2
 8026150:	801a      	strh	r2, [r3, #0]
    adc[2] = (val[4] << 8) | val[5];
 8026152:	7b3b      	ldrb	r3, [r7, #12]
 8026154:	021b      	lsls	r3, r3, #8
 8026156:	b219      	sxth	r1, r3
 8026158:	7b7b      	ldrb	r3, [r7, #13]
 802615a:	b21a      	sxth	r2, r3
 802615c:	683b      	ldr	r3, [r7, #0]
 802615e:	3304      	adds	r3, #4
 8026160:	430a      	orrs	r2, r1
 8026162:	b212      	sxth	r2, r2
 8026164:	801a      	strh	r2, [r3, #0]
    adc[3] = (val[6] << 8) | val[7];
 8026166:	7bbb      	ldrb	r3, [r7, #14]
 8026168:	021b      	lsls	r3, r3, #8
 802616a:	b219      	sxth	r1, r3
 802616c:	7bfb      	ldrb	r3, [r7, #15]
 802616e:	b21a      	sxth	r2, r3
 8026170:	683b      	ldr	r3, [r7, #0]
 8026172:	3306      	adds	r3, #6
 8026174:	430a      	orrs	r2, r1
 8026176:	b212      	sxth	r2, r2
 8026178:	801a      	strh	r2, [r3, #0]
    adc[4] = (val[8] << 8) | val[9];
 802617a:	7c3b      	ldrb	r3, [r7, #16]
 802617c:	021b      	lsls	r3, r3, #8
 802617e:	b219      	sxth	r1, r3
 8026180:	7c7b      	ldrb	r3, [r7, #17]
 8026182:	b21a      	sxth	r2, r3
 8026184:	683b      	ldr	r3, [r7, #0]
 8026186:	3308      	adds	r3, #8
 8026188:	430a      	orrs	r2, r1
 802618a:	b212      	sxth	r2, r2
 802618c:	801a      	strh	r2, [r3, #0]
    adc[5] = (val[10] << 8) | val[11];
 802618e:	7cbb      	ldrb	r3, [r7, #18]
 8026190:	021b      	lsls	r3, r3, #8
 8026192:	b219      	sxth	r1, r3
 8026194:	7cfb      	ldrb	r3, [r7, #19]
 8026196:	b21a      	sxth	r2, r3
 8026198:	683b      	ldr	r3, [r7, #0]
 802619a:	330a      	adds	r3, #10
 802619c:	430a      	orrs	r2, r1
 802619e:	b212      	sxth	r2, r2
 80261a0:	801a      	strh	r2, [r3, #0]
    adc[6] = (val[12] << 8) | val[13];
 80261a2:	7d3b      	ldrb	r3, [r7, #20]
 80261a4:	021b      	lsls	r3, r3, #8
 80261a6:	b219      	sxth	r1, r3
 80261a8:	7d7b      	ldrb	r3, [r7, #21]
 80261aa:	b21a      	sxth	r2, r3
 80261ac:	683b      	ldr	r3, [r7, #0]
 80261ae:	330c      	adds	r3, #12
 80261b0:	430a      	orrs	r2, r1
 80261b2:	b212      	sxth	r2, r2
 80261b4:	801a      	strh	r2, [r3, #0]

    return true;
 80261b6:	2301      	movs	r3, #1
}
 80261b8:	4618      	mov	r0, r3
 80261ba:	3718      	adds	r7, #24
 80261bc:	46bd      	mov	sp, r7
 80261be:	bd80      	pop	{r7, pc}

080261c0 <leerIMUinvensense>:
**  Descripcion:    Lee la velocidad, aceleracion y temperatura
**  Parametros:     Puntero a la IMU
**  Retorno:        Ninguno
****************************************************************************************/
void leerIMUinvensense(imu_t *dIMU)
{
 80261c0:	b580      	push	{r7, lr}
 80261c2:	b08c      	sub	sp, #48	; 0x30
 80261c4:	af00      	add	r7, sp, #0
 80261c6:	6078      	str	r0, [r7, #4]
    float aIMU[7] = {0, 0, 0, 0, 0, 0, 0};
 80261c8:	f107 030c 	add.w	r3, r7, #12
 80261cc:	2200      	movs	r2, #0
 80261ce:	601a      	str	r2, [r3, #0]
 80261d0:	605a      	str	r2, [r3, #4]
 80261d2:	609a      	str	r2, [r3, #8]
 80261d4:	60da      	str	r2, [r3, #12]
 80261d6:	611a      	str	r2, [r3, #16]
 80261d8:	615a      	str	r2, [r3, #20]
 80261da:	619a      	str	r2, [r3, #24]
    uint8_t cuentaIMU;
    imuInvensense_t *driver = dIMU->driver;
 80261dc:	687b      	ldr	r3, [r7, #4]
 80261de:	685b      	ldr	r3, [r3, #4]
 80261e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (driver->acumulador.contador == 0)
 80261e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d07b      	beq.n	80262e4 <leerIMUinvensense+0x124>
        return;

    memcpy(aIMU, driver->acumulador.acumulado, sizeof(driver->acumulador.acumulado));
 80261ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80261f2:	f107 030c 	add.w	r3, r7, #12
 80261f6:	221c      	movs	r2, #28
 80261f8:	4618      	mov	r0, r3
 80261fa:	f00f f829 	bl	8035250 <memcpy>
    cuentaIMU = driver->acumulador.contador;
 80261fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026200:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8026204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    memset(&driver->acumulador, 0, sizeof(driver->acumulador));
 8026208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802620a:	3330      	adds	r3, #48	; 0x30
 802620c:	2220      	movs	r2, #32
 802620e:	2100      	movs	r1, #0
 8026210:	4618      	mov	r0, r3
 8026212:	f00f f845 	bl	80352a0 <memset>

    if (cuentaIMU != 0) {
 8026216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802621a:	2b00      	cmp	r3, #0
 802621c:	d063      	beq.n	80262e6 <leerIMUinvensense+0x126>
        driver->acelRaw[0] = aIMU[0] / cuentaIMU;
 802621e:	edd7 6a03 	vldr	s13, [r7, #12]
 8026222:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026226:	ee07 3a90 	vmov	s15, r3
 802622a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802622e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026234:	edc3 7a08 	vstr	s15, [r3, #32]
        driver->acelRaw[1] = aIMU[1] / cuentaIMU;
 8026238:	edd7 6a04 	vldr	s13, [r7, #16]
 802623c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026240:	ee07 3a90 	vmov	s15, r3
 8026244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802624e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        driver->acelRaw[2] = aIMU[2] / cuentaIMU;
 8026252:	edd7 6a05 	vldr	s13, [r7, #20]
 8026256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802625a:	ee07 3a90 	vmov	s15, r3
 802625e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026268:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        driver->tempRaw    = aIMU[3] / cuentaIMU;
 802626c:	edd7 6a06 	vldr	s13, [r7, #24]
 8026270:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026274:	ee07 3a90 	vmov	s15, r3
 8026278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802627c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026282:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        driver->giroRaw[0] = aIMU[4] / cuentaIMU;
 8026286:	edd7 6a07 	vldr	s13, [r7, #28]
 802628a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802628e:	ee07 3a90 	vmov	s15, r3
 8026292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802629c:	edc3 7a05 	vstr	s15, [r3, #20]
        driver->giroRaw[1] = aIMU[5] / cuentaIMU;
 80262a0:	edd7 6a08 	vldr	s13, [r7, #32]
 80262a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80262a8:	ee07 3a90 	vmov	s15, r3
 80262ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80262b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80262b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80262b6:	edc3 7a06 	vstr	s15, [r3, #24]
        driver->giroRaw[2] = aIMU[6] / cuentaIMU;
 80262ba:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80262be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80262c2:	ee07 3a90 	vmov	s15, r3
 80262c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80262ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80262ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80262d0:	edc3 7a07 	vstr	s15, [r3, #28]

        calcularIMUinvensense(dIMU);
 80262d4:	6878      	ldr	r0, [r7, #4]
 80262d6:	f000 f8b6 	bl	8026446 <calcularIMUinvensense>
        dIMU->nuevaMedida = true;
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	2201      	movs	r2, #1
 80262de:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 80262e2:	e000      	b.n	80262e6 <leerIMUinvensense+0x126>
        return;
 80262e4:	bf00      	nop
    }
}
 80262e6:	3730      	adds	r7, #48	; 0x30
 80262e8:	46bd      	mov	sp, r7
 80262ea:	bd80      	pop	{r7, pc}

080262ec <actualizarIMUinvensense>:
**  Descripcion:    Actualiza las lecturas de la IMU
**  Parametros:     Puntero a la IMU
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void actualizarIMUinvensense(imu_t *dIMU)
{
 80262ec:	b580      	push	{r7, lr}
 80262ee:	b090      	sub	sp, #64	; 0x40
 80262f0:	af00      	add	r7, sp, #0
 80262f2:	6078      	str	r0, [r7, #4]
    imuInvensense_t *driver = dIMU->driver;
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	685b      	ldr	r3, [r3, #4]
 80262f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    bus_t *bus = &dIMU->bus;
 80262fa:	687b      	ldr	r3, [r7, #4]
 80262fc:	3301      	adds	r3, #1
 80262fe:	63bb      	str	r3, [r7, #56]	; 0x38
    int16_t adc[7];
    float imuRaw[7];

    numIMU_e num = dIMU->numIMU;
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	781b      	ldrb	r3, [r3, #0]
 8026304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (num == IMU_3 && desactivarImu)
 8026308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802630c:	2b02      	cmp	r3, #2
 802630e:	d103      	bne.n	8026318 <actualizarIMUinvensense+0x2c>
 8026310:	4b3c      	ldr	r3, [pc, #240]	; (8026404 <actualizarIMUinvensense+0x118>)
 8026312:	781b      	ldrb	r3, [r3, #0]
 8026314:	2b00      	cmp	r3, #0
 8026316:	d16c      	bne.n	80263f2 <actualizarIMUinvensense+0x106>
    	return;

    if (dIMU->drdy == 0) {
 8026318:	687b      	ldr	r3, [r7, #4]
 802631a:	7a1b      	ldrb	r3, [r3, #8]
 802631c:	2b00      	cmp	r3, #0
 802631e:	d108      	bne.n	8026332 <actualizarIMUinvensense+0x46>
        if (!datoDisponibleIMUinvensense(bus))
 8026320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026322:	f000 f871 	bl	8026408 <datoDisponibleIMUinvensense>
 8026326:	4603      	mov	r3, r0
 8026328:	f083 0301 	eor.w	r3, r3, #1
 802632c:	b2db      	uxtb	r3, r3
 802632e:	2b00      	cmp	r3, #0
 8026330:	d161      	bne.n	80263f6 <actualizarIMUinvensense+0x10a>
            return;
    }

    if (!leerAdcIMUinvensense(bus, adc))
 8026332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026336:	4619      	mov	r1, r3
 8026338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802633a:	f7ff fee3 	bl	8026104 <leerAdcIMUinvensense>
 802633e:	4603      	mov	r3, r0
 8026340:	f083 0301 	eor.w	r3, r3, #1
 8026344:	b2db      	uxtb	r3, r3
 8026346:	2b00      	cmp	r3, #0
 8026348:	d157      	bne.n	80263fa <actualizarIMUinvensense+0x10e>
        return;

    // Se rotan las medidas para alinearlas con los ejes
    imuRaw[0] = -(float)adc[1];
 802634a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 802634e:	ee07 3a90 	vmov	s15, r3
 8026352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026356:	eef1 7a67 	vneg.f32	s15, s15
 802635a:	edc7 7a03 	vstr	s15, [r7, #12]
    imuRaw[1] = -(float)adc[0];
 802635e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8026362:	ee07 3a90 	vmov	s15, r3
 8026366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802636a:	eef1 7a67 	vneg.f32	s15, s15
 802636e:	edc7 7a04 	vstr	s15, [r7, #16]
    imuRaw[2] =  (float)adc[2];
 8026372:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8026376:	ee07 3a90 	vmov	s15, r3
 802637a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802637e:	edc7 7a05 	vstr	s15, [r7, #20]
    imuRaw[3] =  (float)adc[3];
 8026382:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8026386:	ee07 3a90 	vmov	s15, r3
 802638a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802638e:	edc7 7a06 	vstr	s15, [r7, #24]
    imuRaw[4] =  (float)adc[5];
 8026392:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8026396:	ee07 3a90 	vmov	s15, r3
 802639a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802639e:	edc7 7a07 	vstr	s15, [r7, #28]
    imuRaw[5] =  (float)adc[4];
 80263a2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80263a6:	ee07 3a90 	vmov	s15, r3
 80263aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80263ae:	edc7 7a08 	vstr	s15, [r7, #32]
    imuRaw[6] = -(float)adc[6];
 80263b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80263b6:	ee07 3a90 	vmov	s15, r3
 80263ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80263be:	eef1 7a67 	vneg.f32	s15, s15
 80263c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    dIMU->timing.ultimaActualizacion = micros();
 80263c6:	f7f1 fb87 	bl	8017ad8 <micros>
 80263ca:	4602      	mov	r2, r0
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	671a      	str	r2, [r3, #112]	; 0x70

    if (medidasIMUok(imuRaw))
 80263d0:	f107 030c 	add.w	r3, r7, #12
 80263d4:	4618      	mov	r0, r3
 80263d6:	f7ff fb37 	bl	8025a48 <medidasIMUok>
 80263da:	4603      	mov	r3, r0
 80263dc:	2b00      	cmp	r3, #0
 80263de:	d00d      	beq.n	80263fc <actualizarIMUinvensense+0x110>
        acumularLecturas7(&driver->acumulador, imuRaw, 20);
 80263e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80263e2:	3330      	adds	r3, #48	; 0x30
 80263e4:	f107 010c 	add.w	r1, r7, #12
 80263e8:	2214      	movs	r2, #20
 80263ea:	4618      	mov	r0, r3
 80263ec:	f002 f842 	bl	8028474 <acumularLecturas7>
 80263f0:	e004      	b.n	80263fc <actualizarIMUinvensense+0x110>
    	return;
 80263f2:	bf00      	nop
 80263f4:	e002      	b.n	80263fc <actualizarIMUinvensense+0x110>
            return;
 80263f6:	bf00      	nop
 80263f8:	e000      	b.n	80263fc <actualizarIMUinvensense+0x110>
        return;
 80263fa:	bf00      	nop
}
 80263fc:	3740      	adds	r7, #64	; 0x40
 80263fe:	46bd      	mov	sp, r7
 8026400:	bd80      	pop	{r7, pc}
 8026402:	bf00      	nop
 8026404:	2000c690 	.word	0x2000c690

08026408 <datoDisponibleIMUinvensense>:
**  Función:  Comprueba si hay datos disponibles para leer
**  Entradas: Puntero al bus
**  Salidas:  Dato disponible o no
***************************************************************************************/
CODIGO_RAPIDO bool datoDisponibleIMUinvensense(bus_t *bus)
{
 8026408:	b580      	push	{r7, lr}
 802640a:	b084      	sub	sp, #16
 802640c:	af00      	add	r7, sp, #0
 802640e:	6078      	str	r0, [r7, #4]
    uint8_t reg;

    if (!leerRegistroBus(bus, INVENSENSE_INT_STATUS | 0x80, &reg))
 8026410:	f107 030f 	add.w	r3, r7, #15
 8026414:	461a      	mov	r2, r3
 8026416:	21ba      	movs	r1, #186	; 0xba
 8026418:	6878      	ldr	r0, [r7, #4]
 802641a:	f7ee fffe 	bl	801541a <leerRegistroBus>
 802641e:	4603      	mov	r3, r0
 8026420:	f083 0301 	eor.w	r3, r3, #1
 8026424:	b2db      	uxtb	r3, r3
 8026426:	2b00      	cmp	r3, #0
 8026428:	d001      	beq.n	802642e <datoDisponibleIMUinvensense+0x26>
        return false;
 802642a:	2300      	movs	r3, #0
 802642c:	e007      	b.n	802643e <datoDisponibleIMUinvensense+0x36>

    return (reg & INVENSENSE_RAW_RDY_INT) != 0;
 802642e:	7bfb      	ldrb	r3, [r7, #15]
 8026430:	f003 0301 	and.w	r3, r3, #1
 8026434:	2b00      	cmp	r3, #0
 8026436:	bf14      	ite	ne
 8026438:	2301      	movne	r3, #1
 802643a:	2300      	moveq	r3, #0
 802643c:	b2db      	uxtb	r3, r3
}
 802643e:	4618      	mov	r0, r3
 8026440:	3710      	adds	r7, #16
 8026442:	46bd      	mov	sp, r7
 8026444:	bd80      	pop	{r7, pc}

08026446 <calcularIMUinvensense>:
**  Descripcion:    Compensa las lecturas con los valores de calibracion
**  Parametros:     Driver Invensense
**  Retorno:        Ninguno
****************************************************************************************/
void calcularIMUinvensense(imu_t *dIMU)
{
 8026446:	b580      	push	{r7, lr}
 8026448:	b08c      	sub	sp, #48	; 0x30
 802644a:	af00      	add	r7, sp, #0
 802644c:	6078      	str	r0, [r7, #4]
    imuInvensense_t *driver = dIMU->driver;
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	685b      	ldr	r3, [r3, #4]
 8026452:	62fb      	str	r3, [r7, #44]	; 0x2c
    float medidaIMU[7];
    uint32_t tiempo = micros();
 8026454:	f7f1 fb40 	bl	8017ad8 <micros>
 8026458:	62b8      	str	r0, [r7, #40]	; 0x28

    medidaIMU[0] = driver->escalaAcel * driver->acelRaw[0];
 802645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802645c:	ed93 7a04 	vldr	s14, [r3, #16]
 8026460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026462:	edd3 7a08 	vldr	s15, [r3, #32]
 8026466:	ee67 7a27 	vmul.f32	s15, s14, s15
 802646a:	edc7 7a03 	vstr	s15, [r7, #12]
    medidaIMU[1] = driver->escalaAcel * driver->acelRaw[1];
 802646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026470:	ed93 7a04 	vldr	s14, [r3, #16]
 8026474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026476:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 802647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802647e:	edc7 7a04 	vstr	s15, [r7, #16]
    medidaIMU[2] = driver->escalaAcel * driver->acelRaw[2];
 8026482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026484:	ed93 7a04 	vldr	s14, [r3, #16]
 8026488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802648a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 802648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026492:	edc7 7a05 	vstr	s15, [r7, #20]
    medidaIMU[3] = driver->tempRaw    * driver->tempSens + driver->tempCero;
 8026496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026498:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 802649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802649e:	edd3 7a02 	vldr	s15, [r3, #8]
 80264a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80264a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80264ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80264b0:	edc7 7a06 	vstr	s15, [r7, #24]
    medidaIMU[4] = driver->escalaGiro * driver->giroRaw[0];
 80264b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80264ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80264c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80264c4:	edc7 7a07 	vstr	s15, [r7, #28]
    medidaIMU[5] = driver->escalaGiro * driver->giroRaw[1];
 80264c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80264ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80264d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80264d8:	edc7 7a08 	vstr	s15, [r7, #32]
    medidaIMU[6] = driver->escalaGiro * driver->giroRaw[2];
 80264dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264de:	ed93 7a03 	vldr	s14, [r3, #12]
 80264e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80264e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80264e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80264ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    if (dIMU->acel[0] != medidaIMU[0] || dIMU->acel[1] != medidaIMU[1] || dIMU->acel[2] != medidaIMU[2] || dIMU->temperatura != medidaIMU[3] ||
 80264f0:	687b      	ldr	r3, [r7, #4]
 80264f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80264f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80264fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80264fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026502:	d13b      	bne.n	802657c <calcularIMUinvensense+0x136>
 8026504:	687b      	ldr	r3, [r7, #4]
 8026506:	ed93 7a07 	vldr	s14, [r3, #28]
 802650a:	edd7 7a04 	vldr	s15, [r7, #16]
 802650e:	eeb4 7a67 	vcmp.f32	s14, s15
 8026512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026516:	d131      	bne.n	802657c <calcularIMUinvensense+0x136>
 8026518:	687b      	ldr	r3, [r7, #4]
 802651a:	ed93 7a08 	vldr	s14, [r3, #32]
 802651e:	edd7 7a05 	vldr	s15, [r7, #20]
 8026522:	eeb4 7a67 	vcmp.f32	s14, s15
 8026526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802652a:	d127      	bne.n	802657c <calcularIMUinvensense+0x136>
 802652c:	687b      	ldr	r3, [r7, #4]
 802652e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8026532:	edd7 7a06 	vldr	s15, [r7, #24]
 8026536:	eeb4 7a67 	vcmp.f32	s14, s15
 802653a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802653e:	d11d      	bne.n	802657c <calcularIMUinvensense+0x136>
        dIMU->giro[0] != medidaIMU[4] || dIMU->giro[1] != medidaIMU[5] || dIMU->giro[2] != medidaIMU[6])
 8026540:	687b      	ldr	r3, [r7, #4]
 8026542:	ed93 7a03 	vldr	s14, [r3, #12]
 8026546:	edd7 7a07 	vldr	s15, [r7, #28]
    if (dIMU->acel[0] != medidaIMU[0] || dIMU->acel[1] != medidaIMU[1] || dIMU->acel[2] != medidaIMU[2] || dIMU->temperatura != medidaIMU[3] ||
 802654a:	eeb4 7a67 	vcmp.f32	s14, s15
 802654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026552:	d113      	bne.n	802657c <calcularIMUinvensense+0x136>
        dIMU->giro[0] != medidaIMU[4] || dIMU->giro[1] != medidaIMU[5] || dIMU->giro[2] != medidaIMU[6])
 8026554:	687b      	ldr	r3, [r7, #4]
 8026556:	ed93 7a04 	vldr	s14, [r3, #16]
 802655a:	edd7 7a08 	vldr	s15, [r7, #32]
 802655e:	eeb4 7a67 	vcmp.f32	s14, s15
 8026562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026566:	d109      	bne.n	802657c <calcularIMUinvensense+0x136>
 8026568:	687b      	ldr	r3, [r7, #4]
 802656a:	ed93 7a05 	vldr	s14, [r3, #20]
 802656e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026572:	eeb4 7a67 	vcmp.f32	s14, s15
 8026576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802657a:	d002      	beq.n	8026582 <calcularIMUinvensense+0x13c>
    	dIMU->timing.ultimoCambio = tiempo;
 802657c:	687b      	ldr	r3, [r7, #4]
 802657e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026580:	679a      	str	r2, [r3, #120]	; 0x78

    dIMU->giro[0] = medidaIMU[4];
 8026582:	69fa      	ldr	r2, [r7, #28]
 8026584:	687b      	ldr	r3, [r7, #4]
 8026586:	60da      	str	r2, [r3, #12]
    dIMU->giro[1] = medidaIMU[5];
 8026588:	6a3a      	ldr	r2, [r7, #32]
 802658a:	687b      	ldr	r3, [r7, #4]
 802658c:	611a      	str	r2, [r3, #16]
    dIMU->giro[2] = medidaIMU[6];
 802658e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	615a      	str	r2, [r3, #20]
    dIMU->temperatura = medidaIMU[3];
 8026594:	69ba      	ldr	r2, [r7, #24]
 8026596:	687b      	ldr	r3, [r7, #4]
 8026598:	63da      	str	r2, [r3, #60]	; 0x3c
    dIMU->acel[0] = medidaIMU[0];
 802659a:	68fa      	ldr	r2, [r7, #12]
 802659c:	687b      	ldr	r3, [r7, #4]
 802659e:	619a      	str	r2, [r3, #24]
    dIMU->acel[1] = medidaIMU[1];
 80265a0:	693a      	ldr	r2, [r7, #16]
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	61da      	str	r2, [r3, #28]
    dIMU->acel[2] = medidaIMU[2];
 80265a6:	697a      	ldr	r2, [r7, #20]
 80265a8:	687b      	ldr	r3, [r7, #4]
 80265aa:	621a      	str	r2, [r3, #32]
    dIMU->timing.ultimaMedida = tiempo;
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80265b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80265b2:	bf00      	nop
 80265b4:	3730      	adds	r7, #48	; 0x30
 80265b6:	46bd      	mov	sp, r7
 80265b8:	bd80      	pop	{r7, pc}
	...

080265bc <iniciarMagHoneywell>:
**  Descripcion:    Inicia el sensor
**  Parametros:     Puntero al sensor
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarMagHoneywell(mag_t *dMag)
{
 80265bc:	b580      	push	{r7, lr}
 80265be:	b084      	sub	sp, #16
 80265c0:	af00      	add	r7, sp, #0
 80265c2:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    magHoneywell_t *driver = &magHoneywell[dMag->numMag];
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	781b      	ldrb	r3, [r3, #0]
 80265c8:	015b      	lsls	r3, r3, #5
 80265ca:	4a19      	ldr	r2, [pc, #100]	; (8026630 <iniciarMagHoneywell+0x74>)
 80265cc:	4413      	add	r3, r2
 80265ce:	60fb      	str	r3, [r7, #12]
    dMag->driver = driver;
 80265d0:	687b      	ldr	r3, [r7, #4]
 80265d2:	68fa      	ldr	r2, [r7, #12]
 80265d4:	605a      	str	r2, [r3, #4]

    // Iniciamos y configuramos el bus
    iniciarBusMagHoneywell(&dMag->bus);
 80265d6:	687b      	ldr	r3, [r7, #4]
 80265d8:	3301      	adds	r3, #1
 80265da:	4618      	mov	r0, r3
 80265dc:	f000 f82c 	bl	8026638 <iniciarBusMagHoneywell>

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 80265e0:	2220      	movs	r2, #32
 80265e2:	2100      	movs	r1, #0
 80265e4:	68f8      	ldr	r0, [r7, #12]
 80265e6:	f00e fe5b 	bl	80352a0 <memset>

    if (!chequearIdMagHoneywell(&dMag->bus))
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	3301      	adds	r3, #1
 80265ee:	4618      	mov	r0, r3
 80265f0:	f000 f844 	bl	802667c <chequearIdMagHoneywell>
 80265f4:	4603      	mov	r3, r0
 80265f6:	f083 0301 	eor.w	r3, r3, #1
 80265fa:	b2db      	uxtb	r3, r3
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d10f      	bne.n	8026620 <iniciarMagHoneywell+0x64>
        goto error;

    if (!configurarMagHoneywell(&dMag->bus))
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	3301      	adds	r3, #1
 8026604:	4618      	mov	r0, r3
 8026606:	f000 f85c 	bl	80266c2 <configurarMagHoneywell>
 802660a:	4603      	mov	r3, r0
 802660c:	f083 0301 	eor.w	r3, r3, #1
 8026610:	b2db      	uxtb	r3, r3
 8026612:	2b00      	cmp	r3, #0
 8026614:	d106      	bne.n	8026624 <iniciarMagHoneywell+0x68>
        goto error;

    driver->ganancia = (1.0f / 1090) * 1000;
 8026616:	68fb      	ldr	r3, [r7, #12]
 8026618:	4a06      	ldr	r2, [pc, #24]	; (8026634 <iniciarMagHoneywell+0x78>)
 802661a:	601a      	str	r2, [r3, #0]
    return true;
 802661c:	2301      	movs	r3, #1
 802661e:	e003      	b.n	8026628 <iniciarMagHoneywell+0x6c>
        goto error;
 8026620:	bf00      	nop
 8026622:	e000      	b.n	8026626 <iniciarMagHoneywell+0x6a>
        goto error;
 8026624:	bf00      	nop

  error:
    return false;
 8026626:	2300      	movs	r3, #0
}
 8026628:	4618      	mov	r0, r3
 802662a:	3710      	adds	r7, #16
 802662c:	46bd      	mov	sp, r7
 802662e:	bd80      	pop	{r7, pc}
 8026630:	2000c824 	.word	0x2000c824
 8026634:	3f6adcc5 	.word	0x3f6adcc5

08026638 <iniciarBusMagHoneywell>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBusMagHoneywell(bus_t *bus)
{
 8026638:	b580      	push	{r7, lr}
 802663a:	b082      	sub	sp, #8
 802663c:	af00      	add	r7, sp, #0
 802663e:	6078      	str	r0, [r7, #4]
    if (bus->tipo == BUS_SPI) {
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	f993 3000 	ldrsb.w	r3, [r3]
 8026646:	2b01      	cmp	r3, #1
 8026648:	d114      	bne.n	8026674 <iniciarBusMagHoneywell+0x3c>
        configurarIO(bus->bus_u.spi.pinCS, CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL), 0);
 802664a:	687b      	ldr	r3, [r7, #4]
 802664c:	789b      	ldrb	r3, [r3, #2]
 802664e:	2200      	movs	r2, #0
 8026650:	f240 3101 	movw	r1, #769	; 0x301
 8026654:	4618      	mov	r0, r3
 8026656:	f7ef feab 	bl	80163b0 <configurarIO>
        escribirIO(bus->bus_u.spi.pinCS, true);
 802665a:	687b      	ldr	r3, [r7, #4]
 802665c:	789b      	ldrb	r3, [r3, #2]
 802665e:	2101      	movs	r1, #1
 8026660:	4618      	mov	r0, r3
 8026662:	f7ef ff85 	bl	8016570 <escribirIO>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_ESTANDAR);
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	f993 3001 	ldrsb.w	r3, [r3, #1]
 802666c:	2110      	movs	r1, #16
 802666e:	4618      	mov	r0, r3
 8026670:	f7f0 ffc1 	bl	80175f6 <ajustarRelojSPI>
    }
}
 8026674:	bf00      	nop
 8026676:	3708      	adds	r7, #8
 8026678:	46bd      	mov	sp, r7
 802667a:	bd80      	pop	{r7, pc}

0802667c <chequearIdMagHoneywell>:
**  Descripcion:    Chequea si estamos conectados a un HMC5883
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
bool chequearIdMagHoneywell(bus_t *bus)
{
 802667c:	b580      	push	{r7, lr}
 802667e:	b084      	sub	sp, #16
 8026680:	af00      	add	r7, sp, #0
 8026682:	6078      	str	r0, [r7, #4]
    uint8_t id[3];

    if (!leerBufferRegistroBus(bus, HONEYWELL_REG_ID, id, 3))
 8026684:	f107 020c 	add.w	r2, r7, #12
 8026688:	2303      	movs	r3, #3
 802668a:	210a      	movs	r1, #10
 802668c:	6878      	ldr	r0, [r7, #4]
 802668e:	f7ee fed6 	bl	801543e <leerBufferRegistroBus>
 8026692:	4603      	mov	r3, r0
 8026694:	f083 0301 	eor.w	r3, r3, #1
 8026698:	b2db      	uxtb	r3, r3
 802669a:	2b00      	cmp	r3, #0
 802669c:	d001      	beq.n	80266a2 <chequearIdMagHoneywell+0x26>
        return false;
 802669e:	2300      	movs	r3, #0
 80266a0:	e00b      	b.n	80266ba <chequearIdMagHoneywell+0x3e>

    if (id[0] != 'H' || id[1] != '4' || id[2] != '3')
 80266a2:	7b3b      	ldrb	r3, [r7, #12]
 80266a4:	2b48      	cmp	r3, #72	; 0x48
 80266a6:	d105      	bne.n	80266b4 <chequearIdMagHoneywell+0x38>
 80266a8:	7b7b      	ldrb	r3, [r7, #13]
 80266aa:	2b34      	cmp	r3, #52	; 0x34
 80266ac:	d102      	bne.n	80266b4 <chequearIdMagHoneywell+0x38>
 80266ae:	7bbb      	ldrb	r3, [r7, #14]
 80266b0:	2b33      	cmp	r3, #51	; 0x33
 80266b2:	d001      	beq.n	80266b8 <chequearIdMagHoneywell+0x3c>
        return false;
 80266b4:	2300      	movs	r3, #0
 80266b6:	e000      	b.n	80266ba <chequearIdMagHoneywell+0x3e>

    return true;
 80266b8:	2301      	movs	r3, #1
}
 80266ba:	4618      	mov	r0, r3
 80266bc:	3710      	adds	r7, #16
 80266be:	46bd      	mov	sp, r7
 80266c0:	bd80      	pop	{r7, pc}

080266c2 <configurarMagHoneywell>:
**  Descripcion:    Configura el sensor
**  Parametros:     Puntero al bus, configuracion del sample average
**  Retorno:        True si ok
****************************************************************************************/
bool configurarMagHoneywell(bus_t *bus)
{
 80266c2:	b580      	push	{r7, lr}
 80266c4:	b082      	sub	sp, #8
 80266c6:	af00      	add	r7, sp, #0
 80266c8:	6078      	str	r0, [r7, #4]
    if (!escribirRegistroBus(bus, HONEYWELL_REG_CONFIG_A, HONEYWELL_CONF_TEMP_HABILITADA | HONEYWELL_OSR_75HZ | HONEYWELL_SAMPLE_AVERAGING_1) ||
 80266ca:	2298      	movs	r2, #152	; 0x98
 80266cc:	2100      	movs	r1, #0
 80266ce:	6878      	ldr	r0, [r7, #4]
 80266d0:	f7ee fe60 	bl	8015394 <escribirRegistroBus>
 80266d4:	4603      	mov	r3, r0
 80266d6:	f083 0301 	eor.w	r3, r3, #1
 80266da:	b2db      	uxtb	r3, r3
 80266dc:	2b00      	cmp	r3, #0
 80266de:	d115      	bne.n	802670c <configurarMagHoneywell+0x4a>
        !escribirRegistroBus(bus, HONEYWELL_REG_CONFIG_B, HONEYWELL_GAIN_1_30_GA) || !escribirRegistroBus(bus, HONEYWELL_REG_MODO, HONEYWELL_MODO_SINGLE))
 80266e0:	2220      	movs	r2, #32
 80266e2:	2101      	movs	r1, #1
 80266e4:	6878      	ldr	r0, [r7, #4]
 80266e6:	f7ee fe55 	bl	8015394 <escribirRegistroBus>
 80266ea:	4603      	mov	r3, r0
 80266ec:	f083 0301 	eor.w	r3, r3, #1
 80266f0:	b2db      	uxtb	r3, r3
    if (!escribirRegistroBus(bus, HONEYWELL_REG_CONFIG_A, HONEYWELL_CONF_TEMP_HABILITADA | HONEYWELL_OSR_75HZ | HONEYWELL_SAMPLE_AVERAGING_1) ||
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d10a      	bne.n	802670c <configurarMagHoneywell+0x4a>
        !escribirRegistroBus(bus, HONEYWELL_REG_CONFIG_B, HONEYWELL_GAIN_1_30_GA) || !escribirRegistroBus(bus, HONEYWELL_REG_MODO, HONEYWELL_MODO_SINGLE))
 80266f6:	2201      	movs	r2, #1
 80266f8:	2102      	movs	r1, #2
 80266fa:	6878      	ldr	r0, [r7, #4]
 80266fc:	f7ee fe4a 	bl	8015394 <escribirRegistroBus>
 8026700:	4603      	mov	r3, r0
 8026702:	f083 0301 	eor.w	r3, r3, #1
 8026706:	b2db      	uxtb	r3, r3
 8026708:	2b00      	cmp	r3, #0
 802670a:	d001      	beq.n	8026710 <configurarMagHoneywell+0x4e>
        return false;
 802670c:	2300      	movs	r3, #0
 802670e:	e000      	b.n	8026712 <configurarMagHoneywell+0x50>

    return true;
 8026710:	2301      	movs	r3, #1
}
 8026712:	4618      	mov	r0, r3
 8026714:	3708      	adds	r7, #8
 8026716:	46bd      	mov	sp, r7
 8026718:	bd80      	pop	{r7, pc}
	...

0802671c <calibrarMagHoneywell>:
**  Descripcion:    Obtiene los valores del escalado
**  Parametros:     Puntero al magnetometro
**  Retorno:        True si ok
****************************************************************************************/
bool calibrarMagHoneywell(mag_t *dMag)
{
 802671c:	b580      	push	{r7, lr}
 802671e:	b090      	sub	sp, #64	; 0x40
 8026720:	af00      	add	r7, sp, #0
 8026722:	6078      	str	r0, [r7, #4]
    uint8_t numIntentos = 0, cuentasBuenas = 0;
 8026724:	2300      	movs	r3, #0
 8026726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 802672a:	2300      	movs	r3, #0
 802672c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    bool estado = false;
 8026730:	2300      	movs	r3, #0
 8026732:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    float esc[3] = {0, 0, 0};
 8026736:	f04f 0300 	mov.w	r3, #0
 802673a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802673c:	f04f 0300 	mov.w	r3, #0
 8026740:	633b      	str	r3, [r7, #48]	; 0x30
 8026742:	f04f 0300 	mov.w	r3, #0
 8026746:	637b      	str	r3, [r7, #52]	; 0x34
    float cal[3] = {0, 0, 0};
 8026748:	f04f 0300 	mov.w	r3, #0
 802674c:	623b      	str	r3, [r7, #32]
 802674e:	f04f 0300 	mov.w	r3, #0
 8026752:	627b      	str	r3, [r7, #36]	; 0x24
 8026754:	f04f 0300 	mov.w	r3, #0
 8026758:	62bb      	str	r3, [r7, #40]	; 0x28
    float esperado[3] = { 1.16 * 1090, 1.08 * 1090, 1.16 * 1090 };
 802675a:	4ab3      	ldr	r2, [pc, #716]	; (8026a28 <calibrarMagHoneywell+0x30c>)
 802675c:	f107 0314 	add.w	r3, r7, #20
 8026760:	ca07      	ldmia	r2, {r0, r1, r2}
 8026762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t numMuestras = 0;
 8026766:	2300      	movs	r3, #0
 8026768:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    int16_t magRaw[3];
    uint8_t regA, regB, regM;

    uint8_t baseConf = HONEYWELL_OSR_15HZ;
 802676c:	2310      	movs	r3, #16
 802676e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t gCal = HONEYWELL_GAIN_1_30_GA;
 8026772:	2320      	movs	r3, #32
 8026774:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    // Guardamos la configuracion para restaurarla una vez calibrado el sensor
    leerRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_A, &regA);
 8026778:	687b      	ldr	r3, [r7, #4]
 802677a:	3301      	adds	r3, #1
 802677c:	f107 020b 	add.w	r2, r7, #11
 8026780:	2100      	movs	r1, #0
 8026782:	4618      	mov	r0, r3
 8026784:	f7ee fe49 	bl	801541a <leerRegistroBus>
    leerRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_B, &regB);
 8026788:	687b      	ldr	r3, [r7, #4]
 802678a:	3301      	adds	r3, #1
 802678c:	f107 020a 	add.w	r2, r7, #10
 8026790:	2101      	movs	r1, #1
 8026792:	4618      	mov	r0, r3
 8026794:	f7ee fe41 	bl	801541a <leerRegistroBus>
    leerRegistroBus(&dMag->bus, HONEYWELL_REG_MODO, &regM);
 8026798:	687b      	ldr	r3, [r7, #4]
 802679a:	3301      	adds	r3, #1
 802679c:	f107 0209 	add.w	r2, r7, #9
 80267a0:	2102      	movs	r1, #2
 80267a2:	4618      	mov	r0, r3
 80267a4:	f7ee fe39 	bl	801541a <leerRegistroBus>

    while (estado == 0 && numIntentos < 25 && cuentasBuenas < 5) {
 80267a8:	e0d5      	b.n	8026956 <calibrarMagHoneywell+0x23a>
        numIntentos++;
 80267aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80267ae:	3301      	adds	r3, #1
 80267b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        // Forzamos bias posiivo
        if (!escribirRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_A, baseConf | HONEYWELL_MODO_OP_BIAS_POSITIVO))
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	1c58      	adds	r0, r3, #1
 80267b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80267bc:	f043 0301 	orr.w	r3, r3, #1
 80267c0:	b2db      	uxtb	r3, r3
 80267c2:	461a      	mov	r2, r3
 80267c4:	2100      	movs	r1, #0
 80267c6:	f7ee fde5 	bl	8015394 <escribirRegistroBus>
 80267ca:	4603      	mov	r3, r0
 80267cc:	f083 0301 	eor.w	r3, r3, #1
 80267d0:	b2db      	uxtb	r3, r3
 80267d2:	2b00      	cmp	r3, #0
 80267d4:	d000      	beq.n	80267d8 <calibrarMagHoneywell+0xbc>
            continue;
 80267d6:	e0be      	b.n	8026956 <calibrarMagHoneywell+0x23a>

        delay(50);
 80267d8:	2032      	movs	r0, #50	; 0x32
 80267da:	f7f1 f9dc 	bl	8017b96 <delay>
        if (!escribirRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_B, gCal) || !escribirRegistroBus(&dMag->bus, HONEYWELL_REG_MODO, HONEYWELL_MODO_SINGLE))
 80267de:	687b      	ldr	r3, [r7, #4]
 80267e0:	3301      	adds	r3, #1
 80267e2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80267e6:	2101      	movs	r1, #1
 80267e8:	4618      	mov	r0, r3
 80267ea:	f7ee fdd3 	bl	8015394 <escribirRegistroBus>
 80267ee:	4603      	mov	r3, r0
 80267f0:	f083 0301 	eor.w	r3, r3, #1
 80267f4:	b2db      	uxtb	r3, r3
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	f040 80ad 	bne.w	8026956 <calibrarMagHoneywell+0x23a>
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	3301      	adds	r3, #1
 8026800:	2201      	movs	r2, #1
 8026802:	2102      	movs	r1, #2
 8026804:	4618      	mov	r0, r3
 8026806:	f7ee fdc5 	bl	8015394 <escribirRegistroBus>
 802680a:	4603      	mov	r3, r0
 802680c:	f083 0301 	eor.w	r3, r3, #1
 8026810:	b2db      	uxtb	r3, r3
 8026812:	2b00      	cmp	r3, #0
 8026814:	d000      	beq.n	8026818 <calibrarMagHoneywell+0xfc>
            continue;
 8026816:	e09e      	b.n	8026956 <calibrarMagHoneywell+0x23a>

        // Leemos los valores
        delay(50);
 8026818:	2032      	movs	r0, #50	; 0x32
 802681a:	f7f1 f9bc 	bl	8017b96 <delay>
        if (!leerAdcMagHoneywell(&dMag->bus, magRaw))
 802681e:	687b      	ldr	r3, [r7, #4]
 8026820:	3301      	adds	r3, #1
 8026822:	f107 020c 	add.w	r2, r7, #12
 8026826:	4611      	mov	r1, r2
 8026828:	4618      	mov	r0, r3
 802682a:	f000 f903 	bl	8026a34 <leerAdcMagHoneywell>
 802682e:	4603      	mov	r3, r0
 8026830:	f083 0301 	eor.w	r3, r3, #1
 8026834:	b2db      	uxtb	r3, r3
 8026836:	2b00      	cmp	r3, #0
 8026838:	d000      	beq.n	802683c <calibrarMagHoneywell+0x120>
            continue;
 802683a:	e08c      	b.n	8026956 <calibrarMagHoneywell+0x23a>

        numMuestras++;
 802683c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8026840:	3301      	adds	r3, #1
 8026842:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        cal[0] = fabsf(esperado[0] / magRaw[0]);
 8026846:	edd7 6a05 	vldr	s13, [r7, #20]
 802684a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802684e:	ee07 3a90 	vmov	s15, r3
 8026852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802685a:	eef0 7ae7 	vabs.f32	s15, s15
 802685e:	edc7 7a08 	vstr	s15, [r7, #32]
        cal[1] = fabsf(esperado[1] / magRaw[1]);
 8026862:	edd7 6a06 	vldr	s13, [r7, #24]
 8026866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802686a:	ee07 3a90 	vmov	s15, r3
 802686e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026876:	eef0 7ae7 	vabs.f32	s15, s15
 802687a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        cal[2] = fabsf(esperado[2] / magRaw[2]);
 802687e:	edd7 6a07 	vldr	s13, [r7, #28]
 8026882:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8026886:	ee07 3a90 	vmov	s15, r3
 802688a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802688e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026892:	eef0 7ae7 	vabs.f32	s15, s15
 8026896:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        if (numIntentos <= 2)
 802689a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802689e:	2b02      	cmp	r3, #2
 80268a0:	d800      	bhi.n	80268a4 <calibrarMagHoneywell+0x188>
            continue;
 80268a2:	e058      	b.n	8026956 <calibrarMagHoneywell+0x23a>

        if (VALOR_CAL_VALIDO_HONEYWELL(cal[0]) && VALOR_CAL_VALIDO_HONEYWELL(cal[1]) && VALOR_CAL_VALIDO_HONEYWELL(cal[2])) {
 80268a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80268a8:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8026a2c <calibrarMagHoneywell+0x310>
 80268ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80268b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268b4:	dc00      	bgt.n	80268b8 <calibrarMagHoneywell+0x19c>
 80268b6:	e04e      	b.n	8026956 <calibrarMagHoneywell+0x23a>
 80268b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80268bc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8026a30 <calibrarMagHoneywell+0x314>
 80268c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80268c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268c8:	d400      	bmi.n	80268cc <calibrarMagHoneywell+0x1b0>
 80268ca:	e044      	b.n	8026956 <calibrarMagHoneywell+0x23a>
 80268cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80268d0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8026a2c <calibrarMagHoneywell+0x310>
 80268d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80268d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268dc:	dc00      	bgt.n	80268e0 <calibrarMagHoneywell+0x1c4>
 80268de:	e03a      	b.n	8026956 <calibrarMagHoneywell+0x23a>
 80268e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80268e4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8026a30 <calibrarMagHoneywell+0x314>
 80268e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80268ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268f0:	d400      	bmi.n	80268f4 <calibrarMagHoneywell+0x1d8>
 80268f2:	e030      	b.n	8026956 <calibrarMagHoneywell+0x23a>
 80268f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80268f8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8026a2c <calibrarMagHoneywell+0x310>
 80268fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026904:	dc00      	bgt.n	8026908 <calibrarMagHoneywell+0x1ec>
 8026906:	e026      	b.n	8026956 <calibrarMagHoneywell+0x23a>
 8026908:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802690c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8026a30 <calibrarMagHoneywell+0x314>
 8026910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026918:	d400      	bmi.n	802691c <calibrarMagHoneywell+0x200>
 802691a:	e01c      	b.n	8026956 <calibrarMagHoneywell+0x23a>
            cuentasBuenas++;
 802691c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026920:	3301      	adds	r3, #1
 8026922:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

            esc[0] += cal[0];
 8026926:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 802692a:	edd7 7a08 	vldr	s15, [r7, #32]
 802692e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026932:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            esc[1] += cal[1];
 8026936:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 802693a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802693e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026942:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            esc[2] += cal[2];
 8026946:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 802694a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802694e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026952:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    while (estado == 0 && numIntentos < 25 && cuentasBuenas < 5) {
 8026956:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 802695a:	f083 0301 	eor.w	r3, r3, #1
 802695e:	b2db      	uxtb	r3, r3
 8026960:	2b00      	cmp	r3, #0
 8026962:	d008      	beq.n	8026976 <calibrarMagHoneywell+0x25a>
 8026964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8026968:	2b18      	cmp	r3, #24
 802696a:	d804      	bhi.n	8026976 <calibrarMagHoneywell+0x25a>
 802696c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026970:	2b04      	cmp	r3, #4
 8026972:	f67f af1a 	bls.w	80267aa <calibrarMagHoneywell+0x8e>
        }
    }

    if (cuentasBuenas >= 5) {
 8026976:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 802697a:	2b04      	cmp	r3, #4
 802697c:	d92a      	bls.n	80269d4 <calibrarMagHoneywell+0x2b8>
    	dMag->escalado[0] = esc[0] / cuentasBuenas;
 802697e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8026982:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8026986:	ee07 3a90 	vmov	s15, r3
 802698a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802698e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	edc3 7a06 	vstr	s15, [r3, #24]
    	dMag->escalado[1] = esc[1] / cuentasBuenas;
 8026998:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 802699c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80269a0:	ee07 3a90 	vmov	s15, r3
 80269a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80269a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	edc3 7a07 	vstr	s15, [r3, #28]
    	dMag->escalado[2] = esc[2] / cuentasBuenas;
 80269b2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80269b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80269ba:	ee07 3a90 	vmov	s15, r3
 80269be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80269c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	edc3 7a08 	vstr	s15, [r3, #32]
        estado = true;
 80269cc:	2301      	movs	r3, #1
 80269ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80269d2:	e00e      	b.n	80269f2 <calibrarMagHoneywell+0x2d6>
    }
    else {
    	dMag->escalado[0] = 1.0;
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80269da:	619a      	str	r2, [r3, #24]
    	dMag->escalado[1] = 1.0;
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80269e2:	61da      	str	r2, [r3, #28]
    	dMag->escalado[2] = 1.0;
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80269ea:	621a      	str	r2, [r3, #32]
        estado = false;
 80269ec:	2300      	movs	r3, #0
 80269ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }

    // Restauramos la configuracion
    escribirRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_A, regA);
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	3301      	adds	r3, #1
 80269f6:	7afa      	ldrb	r2, [r7, #11]
 80269f8:	2100      	movs	r1, #0
 80269fa:	4618      	mov	r0, r3
 80269fc:	f7ee fcca 	bl	8015394 <escribirRegistroBus>
    escribirRegistroBus(&dMag->bus, HONEYWELL_REG_CONFIG_B, regB);
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	3301      	adds	r3, #1
 8026a04:	7aba      	ldrb	r2, [r7, #10]
 8026a06:	2101      	movs	r1, #1
 8026a08:	4618      	mov	r0, r3
 8026a0a:	f7ee fcc3 	bl	8015394 <escribirRegistroBus>
    escribirRegistroBus(&dMag->bus, HONEYWELL_REG_MODO, regM);
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	3301      	adds	r3, #1
 8026a12:	7a7a      	ldrb	r2, [r7, #9]
 8026a14:	2102      	movs	r1, #2
 8026a16:	4618      	mov	r0, r3
 8026a18:	f7ee fcbc 	bl	8015394 <escribirRegistroBus>
    return estado;
 8026a1c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
}
 8026a20:	4618      	mov	r0, r3
 8026a22:	3740      	adds	r7, #64	; 0x40
 8026a24:	46bd      	mov	sp, r7
 8026a26:	bd80      	pop	{r7, pc}
 8026a28:	0803abf8 	.word	0x0803abf8
 8026a2c:	3f333333 	.word	0x3f333333
 8026a30:	3faccccd 	.word	0x3faccccd

08026a34 <leerAdcMagHoneywell>:
**  Descripcion:    Obtiene los valores del adc
**  Parametros:     Puntero al bus, valores del adc
**  Retorno:        True si ok
****************************************************************************************/
bool leerAdcMagHoneywell(bus_t *bus, int16_t *adc)
{
 8026a34:	b580      	push	{r7, lr}
 8026a36:	b086      	sub	sp, #24
 8026a38:	af00      	add	r7, sp, #0
 8026a3a:	6078      	str	r0, [r7, #4]
 8026a3c:	6039      	str	r1, [r7, #0]
    uint8_t val[6];
    int16_t aux[3];

    if (!leerBufferRegistroBus(bus, HONEYWELL_REG_DATO_X_MSB, (uint8_t *) &val, 6))
 8026a3e:	f107 0210 	add.w	r2, r7, #16
 8026a42:	2306      	movs	r3, #6
 8026a44:	2103      	movs	r1, #3
 8026a46:	6878      	ldr	r0, [r7, #4]
 8026a48:	f7ee fcf9 	bl	801543e <leerBufferRegistroBus>
 8026a4c:	4603      	mov	r3, r0
 8026a4e:	f083 0301 	eor.w	r3, r3, #1
 8026a52:	b2db      	uxtb	r3, r3
 8026a54:	2b00      	cmp	r3, #0
 8026a56:	d001      	beq.n	8026a5c <leerAdcMagHoneywell+0x28>
        return false;
 8026a58:	2300      	movs	r3, #0
 8026a5a:	e037      	b.n	8026acc <leerAdcMagHoneywell+0x98>

    aux[0] = (int16_t)(val[0] << 8) | val[1];
 8026a5c:	7c3b      	ldrb	r3, [r7, #16]
 8026a5e:	021b      	lsls	r3, r3, #8
 8026a60:	b21a      	sxth	r2, r3
 8026a62:	7c7b      	ldrb	r3, [r7, #17]
 8026a64:	b21b      	sxth	r3, r3
 8026a66:	4313      	orrs	r3, r2
 8026a68:	b21b      	sxth	r3, r3
 8026a6a:	813b      	strh	r3, [r7, #8]
    aux[2] = (int16_t)(val[2] << 8) | val[3];
 8026a6c:	7cbb      	ldrb	r3, [r7, #18]
 8026a6e:	021b      	lsls	r3, r3, #8
 8026a70:	b21a      	sxth	r2, r3
 8026a72:	7cfb      	ldrb	r3, [r7, #19]
 8026a74:	b21b      	sxth	r3, r3
 8026a76:	4313      	orrs	r3, r2
 8026a78:	b21b      	sxth	r3, r3
 8026a7a:	81bb      	strh	r3, [r7, #12]
    aux[1] = (int16_t)(val[4] << 8) | val[5];
 8026a7c:	7d3b      	ldrb	r3, [r7, #20]
 8026a7e:	021b      	lsls	r3, r3, #8
 8026a80:	b21a      	sxth	r2, r3
 8026a82:	7d7b      	ldrb	r3, [r7, #21]
 8026a84:	b21b      	sxth	r3, r3
 8026a86:	4313      	orrs	r3, r2
 8026a88:	b21b      	sxth	r3, r3
 8026a8a:	817b      	strh	r3, [r7, #10]

    if (aux[0] == -4096 || aux[1] == -4096 || aux[2] == -4096)
 8026a8c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8026a90:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8026a94:	d009      	beq.n	8026aaa <leerAdcMagHoneywell+0x76>
 8026a96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8026a9a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8026a9e:	d004      	beq.n	8026aaa <leerAdcMagHoneywell+0x76>
 8026aa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8026aa4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8026aa8:	d101      	bne.n	8026aae <leerAdcMagHoneywell+0x7a>
        return false;
 8026aaa:	2300      	movs	r3, #0
 8026aac:	e00e      	b.n	8026acc <leerAdcMagHoneywell+0x98>

    adc[0] = aux[0];
 8026aae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8026ab2:	683b      	ldr	r3, [r7, #0]
 8026ab4:	801a      	strh	r2, [r3, #0]
    adc[1] = aux[1];
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	3302      	adds	r3, #2
 8026aba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8026abe:	801a      	strh	r2, [r3, #0]
    adc[2] = aux[2];
 8026ac0:	683b      	ldr	r3, [r7, #0]
 8026ac2:	3304      	adds	r3, #4
 8026ac4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8026ac8:	801a      	strh	r2, [r3, #0]
    return true;
 8026aca:	2301      	movs	r3, #1
}
 8026acc:	4618      	mov	r0, r3
 8026ace:	3718      	adds	r7, #24
 8026ad0:	46bd      	mov	sp, r7
 8026ad2:	bd80      	pop	{r7, pc}

08026ad4 <leerMagHoneywell>:
**  Descripcion:    Lee el campo magnetico
**  Parametros:     Puntero al magnetometro
**  Retorno:        Ninguno
****************************************************************************************/
void leerMagHoneywell(mag_t *dMag)
{
 8026ad4:	b580      	push	{r7, lr}
 8026ad6:	b088      	sub	sp, #32
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	6078      	str	r0, [r7, #4]
    float aM[3] = {0, 0, 0};
 8026adc:	f04f 0300 	mov.w	r3, #0
 8026ae0:	60fb      	str	r3, [r7, #12]
 8026ae2:	f04f 0300 	mov.w	r3, #0
 8026ae6:	613b      	str	r3, [r7, #16]
 8026ae8:	f04f 0300 	mov.w	r3, #0
 8026aec:	617b      	str	r3, [r7, #20]
    uint8_t cuentaM;
    magHoneywell_t *driver = dMag->driver;
 8026aee:	687b      	ldr	r3, [r7, #4]
 8026af0:	685b      	ldr	r3, [r3, #4]
 8026af2:	61fb      	str	r3, [r7, #28]

    if (driver->acumulador.contador == 0)
 8026af4:	69fb      	ldr	r3, [r7, #28]
 8026af6:	7f1b      	ldrb	r3, [r3, #28]
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d041      	beq.n	8026b80 <leerMagHoneywell+0xac>
        return;

    memcpy(aM, driver->acumulador.acumulado, sizeof(driver->acumulador.acumulado));
 8026afc:	69fb      	ldr	r3, [r7, #28]
 8026afe:	f103 0110 	add.w	r1, r3, #16
 8026b02:	f107 030c 	add.w	r3, r7, #12
 8026b06:	220c      	movs	r2, #12
 8026b08:	4618      	mov	r0, r3
 8026b0a:	f00e fba1 	bl	8035250 <memcpy>
    cuentaM = driver->acumulador.contador;
 8026b0e:	69fb      	ldr	r3, [r7, #28]
 8026b10:	7f1b      	ldrb	r3, [r3, #28]
 8026b12:	76fb      	strb	r3, [r7, #27]
    memset(&driver->acumulador, 0, sizeof(driver->acumulador));
 8026b14:	69fb      	ldr	r3, [r7, #28]
 8026b16:	3310      	adds	r3, #16
 8026b18:	2210      	movs	r2, #16
 8026b1a:	2100      	movs	r1, #0
 8026b1c:	4618      	mov	r0, r3
 8026b1e:	f00e fbbf 	bl	80352a0 <memset>

    if (cuentaM != 0) {
 8026b22:	7efb      	ldrb	r3, [r7, #27]
 8026b24:	2b00      	cmp	r3, #0
 8026b26:	d02c      	beq.n	8026b82 <leerMagHoneywell+0xae>
        driver->campoMagRaw[0] = aM[0] / cuentaM;
 8026b28:	edd7 6a03 	vldr	s13, [r7, #12]
 8026b2c:	7efb      	ldrb	r3, [r7, #27]
 8026b2e:	ee07 3a90 	vmov	s15, r3
 8026b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026b3a:	69fb      	ldr	r3, [r7, #28]
 8026b3c:	edc3 7a01 	vstr	s15, [r3, #4]
        driver->campoMagRaw[1] = aM[1] / cuentaM;
 8026b40:	edd7 6a04 	vldr	s13, [r7, #16]
 8026b44:	7efb      	ldrb	r3, [r7, #27]
 8026b46:	ee07 3a90 	vmov	s15, r3
 8026b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026b52:	69fb      	ldr	r3, [r7, #28]
 8026b54:	edc3 7a02 	vstr	s15, [r3, #8]
        driver->campoMagRaw[2] = aM[2] / cuentaM;
 8026b58:	edd7 6a05 	vldr	s13, [r7, #20]
 8026b5c:	7efb      	ldrb	r3, [r7, #27]
 8026b5e:	ee07 3a90 	vmov	s15, r3
 8026b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026b6a:	69fb      	ldr	r3, [r7, #28]
 8026b6c:	edc3 7a03 	vstr	s15, [r3, #12]

        calcularMagHoneywell(dMag);
 8026b70:	6878      	ldr	r0, [r7, #4]
 8026b72:	f000 f893 	bl	8026c9c <calcularMagHoneywell>
        dMag->nuevaMedida = true;
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	2201      	movs	r2, #1
 8026b7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8026b7e:	e000      	b.n	8026b82 <leerMagHoneywell+0xae>
        return;
 8026b80:	bf00      	nop
    }
}
 8026b82:	3720      	adds	r7, #32
 8026b84:	46bd      	mov	sp, r7
 8026b86:	bd80      	pop	{r7, pc}

08026b88 <actualizarMagHoneywell>:
**  Descripcion:    Actualiza las lecturas del magnetometro
**  Parametros:     Puntero al magnetometro
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMagHoneywell(mag_t *dMag)
{
 8026b88:	b580      	push	{r7, lr}
 8026b8a:	b088      	sub	sp, #32
 8026b8c:	af00      	add	r7, sp, #0
 8026b8e:	6078      	str	r0, [r7, #4]
    magHoneywell_t *driver = dMag->driver;
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	685b      	ldr	r3, [r3, #4]
 8026b94:	61fb      	str	r3, [r7, #28]
    int16_t adc[3];
    float mRaw[3];

    if (dMag->drdy == 0) {
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	7a1b      	ldrb	r3, [r3, #8]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d10a      	bne.n	8026bb4 <actualizarMagHoneywell+0x2c>
        if (!datoDisponibleMagHoneywell(&dMag->bus))
 8026b9e:	687b      	ldr	r3, [r7, #4]
 8026ba0:	3301      	adds	r3, #1
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	f000 f856 	bl	8026c54 <datoDisponibleMagHoneywell>
 8026ba8:	4603      	mov	r3, r0
 8026baa:	f083 0301 	eor.w	r3, r3, #1
 8026bae:	b2db      	uxtb	r3, r3
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d149      	bne.n	8026c48 <actualizarMagHoneywell+0xc0>
            return;
    }

    bool estado = leerAdcMagHoneywell(&dMag->bus, adc);
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	3301      	adds	r3, #1
 8026bb8:	f107 0214 	add.w	r2, r7, #20
 8026bbc:	4611      	mov	r1, r2
 8026bbe:	4618      	mov	r0, r3
 8026bc0:	f7ff ff38 	bl	8026a34 <leerAdcMagHoneywell>
 8026bc4:	4603      	mov	r3, r0
 8026bc6:	76fb      	strb	r3, [r7, #27]

    // Pedimos una muestra
    escribirRegistroBus(&dMag->bus, HONEYWELL_REG_MODO, HONEYWELL_MODO_SINGLE);
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	3301      	adds	r3, #1
 8026bcc:	2201      	movs	r2, #1
 8026bce:	2102      	movs	r1, #2
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	f7ee fbdf 	bl	8015394 <escribirRegistroBus>

    if (!estado)
 8026bd6:	7efb      	ldrb	r3, [r7, #27]
 8026bd8:	f083 0301 	eor.w	r3, r3, #1
 8026bdc:	b2db      	uxtb	r3, r3
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	d134      	bne.n	8026c4c <actualizarMagHoneywell+0xc4>
        return;

    // Se rotan las medidas para alinearlas con los ejes
    mRaw[0] = -(float)adc[1];
 8026be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8026be6:	ee07 3a90 	vmov	s15, r3
 8026bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026bee:	eef1 7a67 	vneg.f32	s15, s15
 8026bf2:	edc7 7a02 	vstr	s15, [r7, #8]
    mRaw[1] =  (float)adc[0];
 8026bf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8026bfa:	ee07 3a90 	vmov	s15, r3
 8026bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c02:	edc7 7a03 	vstr	s15, [r7, #12]
    mRaw[2] = -(float)adc[2];
 8026c06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8026c0a:	ee07 3a90 	vmov	s15, r3
 8026c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c12:	eef1 7a67 	vneg.f32	s15, s15
 8026c16:	edc7 7a04 	vstr	s15, [r7, #16]

    dMag->timing.ultimaActualizacion = micros();
 8026c1a:	f7f0 ff5d 	bl	8017ad8 <micros>
 8026c1e:	4602      	mov	r2, r0
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	631a      	str	r2, [r3, #48]	; 0x30

    if (campoMagOk(dMag, mRaw))
 8026c24:	f107 0308 	add.w	r3, r7, #8
 8026c28:	4619      	mov	r1, r3
 8026c2a:	6878      	ldr	r0, [r7, #4]
 8026c2c:	f000 fea8 	bl	8027980 <campoMagOk>
 8026c30:	4603      	mov	r3, r0
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	d00b      	beq.n	8026c4e <actualizarMagHoneywell+0xc6>
        acumularLecturas3(&driver->acumulador, mRaw, 100);
 8026c36:	69fb      	ldr	r3, [r7, #28]
 8026c38:	3310      	adds	r3, #16
 8026c3a:	f107 0108 	add.w	r1, r7, #8
 8026c3e:	2264      	movs	r2, #100	; 0x64
 8026c40:	4618      	mov	r0, r3
 8026c42:	f001 fbb9 	bl	80283b8 <acumularLecturas3>
 8026c46:	e002      	b.n	8026c4e <actualizarMagHoneywell+0xc6>
            return;
 8026c48:	bf00      	nop
 8026c4a:	e000      	b.n	8026c4e <actualizarMagHoneywell+0xc6>
        return;
 8026c4c:	bf00      	nop
}
 8026c4e:	3720      	adds	r7, #32
 8026c50:	46bd      	mov	sp, r7
 8026c52:	bd80      	pop	{r7, pc}

08026c54 <datoDisponibleMagHoneywell>:
**  Función:  Comprueba si hay datos disponibles para leer
**  Entradas: Puntero al bus
**  Salidas:  Dato disponible o no
***************************************************************************************/
bool datoDisponibleMagHoneywell(bus_t *bus)
{
 8026c54:	b580      	push	{r7, lr}
 8026c56:	b084      	sub	sp, #16
 8026c58:	af00      	add	r7, sp, #0
 8026c5a:	6078      	str	r0, [r7, #4]
    uint8_t regEstado = 0;
 8026c5c:	2300      	movs	r3, #0
 8026c5e:	73fb      	strb	r3, [r7, #15]

    if (!leerRegistroBus(bus, HONEYWELL_REG_ESTADO, &regEstado))
 8026c60:	f107 030f 	add.w	r3, r7, #15
 8026c64:	461a      	mov	r2, r3
 8026c66:	2109      	movs	r1, #9
 8026c68:	6878      	ldr	r0, [r7, #4]
 8026c6a:	f7ee fbd6 	bl	801541a <leerRegistroBus>
 8026c6e:	4603      	mov	r3, r0
 8026c70:	f083 0301 	eor.w	r3, r3, #1
 8026c74:	b2db      	uxtb	r3, r3
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d001      	beq.n	8026c7e <datoDisponibleMagHoneywell+0x2a>
        return false;
 8026c7a:	2300      	movs	r3, #0
 8026c7c:	e00a      	b.n	8026c94 <datoDisponibleMagHoneywell+0x40>

    regEstado = regEstado & 0x01;
 8026c7e:	7bfb      	ldrb	r3, [r7, #15]
 8026c80:	f003 0301 	and.w	r3, r3, #1
 8026c84:	b2db      	uxtb	r3, r3
 8026c86:	73fb      	strb	r3, [r7, #15]

    if (regEstado != 0)
 8026c88:	7bfb      	ldrb	r3, [r7, #15]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	d001      	beq.n	8026c92 <datoDisponibleMagHoneywell+0x3e>
        return true;
 8026c8e:	2301      	movs	r3, #1
 8026c90:	e000      	b.n	8026c94 <datoDisponibleMagHoneywell+0x40>
    else
        return false;
 8026c92:	2300      	movs	r3, #0
}
 8026c94:	4618      	mov	r0, r3
 8026c96:	3710      	adds	r7, #16
 8026c98:	46bd      	mov	sp, r7
 8026c9a:	bd80      	pop	{r7, pc}

08026c9c <calcularMagHoneywell>:
**  Descripcion:    Compensa las lecturas con los valores de calibracion
**  Parametros:     Driver Honeywell
**  Retorno:        Ninguno
****************************************************************************************/
void calcularMagHoneywell(mag_t *dMag)
{
 8026c9c:	b580      	push	{r7, lr}
 8026c9e:	b088      	sub	sp, #32
 8026ca0:	af00      	add	r7, sp, #0
 8026ca2:	6078      	str	r0, [r7, #4]
    magHoneywell_t *driver = dMag->driver;
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	685b      	ldr	r3, [r3, #4]
 8026ca8:	61fb      	str	r3, [r7, #28]
    float cMag[3];
    uint32_t tiempo = micros();
 8026caa:	f7f0 ff15 	bl	8017ad8 <micros>
 8026cae:	61b8      	str	r0, [r7, #24]

    cMag[0] = driver->campoMagRaw[0] * dMag->escalado[0] * driver->ganancia;
 8026cb0:	69fb      	ldr	r3, [r7, #28]
 8026cb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8026cb6:	687b      	ldr	r3, [r7, #4]
 8026cb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8026cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026cc0:	69fb      	ldr	r3, [r7, #28]
 8026cc2:	edd3 7a00 	vldr	s15, [r3]
 8026cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026cca:	edc7 7a03 	vstr	s15, [r7, #12]
    cMag[1] = driver->campoMagRaw[1] * dMag->escalado[1] * driver->ganancia;
 8026cce:	69fb      	ldr	r3, [r7, #28]
 8026cd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8026cd4:	687b      	ldr	r3, [r7, #4]
 8026cd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8026cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026cde:	69fb      	ldr	r3, [r7, #28]
 8026ce0:	edd3 7a00 	vldr	s15, [r3]
 8026ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026ce8:	edc7 7a04 	vstr	s15, [r7, #16]
    cMag[2] = driver->campoMagRaw[2] * dMag->escalado[2] * driver->ganancia;
 8026cec:	69fb      	ldr	r3, [r7, #28]
 8026cee:	ed93 7a03 	vldr	s14, [r3, #12]
 8026cf2:	687b      	ldr	r3, [r7, #4]
 8026cf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8026cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026cfc:	69fb      	ldr	r3, [r7, #28]
 8026cfe:	edd3 7a00 	vldr	s15, [r3]
 8026d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026d06:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dMag->campoMag[0] != cMag[0] || dMag->campoMag[1] != cMag[1] || dMag->campoMag[2] != cMag[2])
 8026d0a:	687b      	ldr	r3, [r7, #4]
 8026d0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8026d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8026d14:	eeb4 7a67 	vcmp.f32	s14, s15
 8026d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d1c:	d113      	bne.n	8026d46 <calcularMagHoneywell+0xaa>
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	ed93 7a04 	vldr	s14, [r3, #16]
 8026d24:	edd7 7a04 	vldr	s15, [r7, #16]
 8026d28:	eeb4 7a67 	vcmp.f32	s14, s15
 8026d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d30:	d109      	bne.n	8026d46 <calcularMagHoneywell+0xaa>
 8026d32:	687b      	ldr	r3, [r7, #4]
 8026d34:	ed93 7a05 	vldr	s14, [r3, #20]
 8026d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8026d3c:	eeb4 7a67 	vcmp.f32	s14, s15
 8026d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d44:	d002      	beq.n	8026d4c <calcularMagHoneywell+0xb0>
    	dMag->timing.ultimoCambio = tiempo;
 8026d46:	687b      	ldr	r3, [r7, #4]
 8026d48:	69ba      	ldr	r2, [r7, #24]
 8026d4a:	639a      	str	r2, [r3, #56]	; 0x38

    dMag->campoMag[0] = cMag[0];
 8026d4c:	68fa      	ldr	r2, [r7, #12]
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	60da      	str	r2, [r3, #12]
    dMag->campoMag[1] = cMag[1];
 8026d52:	693a      	ldr	r2, [r7, #16]
 8026d54:	687b      	ldr	r3, [r7, #4]
 8026d56:	611a      	str	r2, [r3, #16]
    dMag->campoMag[2] = cMag[2];
 8026d58:	697a      	ldr	r2, [r7, #20]
 8026d5a:	687b      	ldr	r3, [r7, #4]
 8026d5c:	615a      	str	r2, [r3, #20]
    dMag->timing.ultimaMedida = tiempo;
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	69ba      	ldr	r2, [r7, #24]
 8026d62:	635a      	str	r2, [r3, #52]	; 0x34
}
 8026d64:	bf00      	nop
 8026d66:	3720      	adds	r7, #32
 8026d68:	46bd      	mov	sp, r7
 8026d6a:	bd80      	pop	{r7, pc}

08026d6c <iniciarMagIsentek>:
**  Descripcion:    Inicia el sensor
**  Parametros:     Puntero al sensor
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarMagIsentek(mag_t *dMag)
{
 8026d6c:	b580      	push	{r7, lr}
 8026d6e:	b084      	sub	sp, #16
 8026d70:	af00      	add	r7, sp, #0
 8026d72:	6078      	str	r0, [r7, #4]
    // Asignamos la posicion en el array de datos del driver especifico
    magIsentek_t *driver = &magIsentek[dMag->numMag];
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	781b      	ldrb	r3, [r3, #0]
 8026d78:	461a      	mov	r2, r3
 8026d7a:	4613      	mov	r3, r2
 8026d7c:	00db      	lsls	r3, r3, #3
 8026d7e:	4413      	add	r3, r2
 8026d80:	009b      	lsls	r3, r3, #2
 8026d82:	4a23      	ldr	r2, [pc, #140]	; (8026e10 <iniciarMagIsentek+0xa4>)
 8026d84:	4413      	add	r3, r2
 8026d86:	60fb      	str	r3, [r7, #12]
    dMag->driver = driver;
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	68fa      	ldr	r2, [r7, #12]
 8026d8c:	605a      	str	r2, [r3, #4]

    // Iniciamos y configuramos el bus
    iniciarBusMagIsentek(&dMag->bus);
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	3301      	adds	r3, #1
 8026d92:	4618      	mov	r0, r3
 8026d94:	f000 f840 	bl	8026e18 <iniciarBusMagIsentek>

    // Reseteamos el driver
    memset(driver, 0, sizeof(*driver));
 8026d98:	2224      	movs	r2, #36	; 0x24
 8026d9a:	2100      	movs	r1, #0
 8026d9c:	68f8      	ldr	r0, [r7, #12]
 8026d9e:	f00e fa7f 	bl	80352a0 <memset>

    if (!chequearIdMagIsentek(&dMag->bus))
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	3301      	adds	r3, #1
 8026da6:	4618      	mov	r0, r3
 8026da8:	f000 f858 	bl	8026e5c <chequearIdMagIsentek>
 8026dac:	4603      	mov	r3, r0
 8026dae:	f083 0301 	eor.w	r3, r3, #1
 8026db2:	b2db      	uxtb	r3, r3
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d120      	bne.n	8026dfa <iniciarMagIsentek+0x8e>
        goto error;

    if (!resetearMagIsentek(&dMag->bus))
 8026db8:	687b      	ldr	r3, [r7, #4]
 8026dba:	3301      	adds	r3, #1
 8026dbc:	4618      	mov	r0, r3
 8026dbe:	f000 f86a 	bl	8026e96 <resetearMagIsentek>
 8026dc2:	4603      	mov	r3, r0
 8026dc4:	f083 0301 	eor.w	r3, r3, #1
 8026dc8:	b2db      	uxtb	r3, r3
 8026dca:	2b00      	cmp	r3, #0
 8026dcc:	d117      	bne.n	8026dfe <iniciarMagIsentek+0x92>
        goto error;

    if (!configurarMagIsentek(&dMag->bus))
 8026dce:	687b      	ldr	r3, [r7, #4]
 8026dd0:	3301      	adds	r3, #1
 8026dd2:	4618      	mov	r0, r3
 8026dd4:	f000 f89b 	bl	8026f0e <configurarMagIsentek>
 8026dd8:	4603      	mov	r3, r0
 8026dda:	f083 0301 	eor.w	r3, r3, #1
 8026dde:	b2db      	uxtb	r3, r3
 8026de0:	2b00      	cmp	r3, #0
 8026de2:	d10e      	bne.n	8026e02 <iniciarMagIsentek+0x96>
        goto error;

    driver->ganancia = 3.0;   // Resolucion: 0.3 µT/LSB y luego * 10 para pasar a mGa
 8026de4:	68fb      	ldr	r3, [r7, #12]
 8026de6:	4a0b      	ldr	r2, [pc, #44]	; (8026e14 <iniciarMagIsentek+0xa8>)
 8026de8:	601a      	str	r2, [r3, #0]

    // Pedimos una muestra
    iniciarConversionMagIsentek(&dMag->bus, driver);
 8026dea:	687b      	ldr	r3, [r7, #4]
 8026dec:	3301      	adds	r3, #1
 8026dee:	68f9      	ldr	r1, [r7, #12]
 8026df0:	4618      	mov	r0, r3
 8026df2:	f000 f8b8 	bl	8026f66 <iniciarConversionMagIsentek>
    return true;
 8026df6:	2301      	movs	r3, #1
 8026df8:	e005      	b.n	8026e06 <iniciarMagIsentek+0x9a>
        goto error;
 8026dfa:	bf00      	nop
 8026dfc:	e002      	b.n	8026e04 <iniciarMagIsentek+0x98>
        goto error;
 8026dfe:	bf00      	nop
 8026e00:	e000      	b.n	8026e04 <iniciarMagIsentek+0x98>
        goto error;
 8026e02:	bf00      	nop

  error:
    return false;
 8026e04:	2300      	movs	r3, #0
}
 8026e06:	4618      	mov	r0, r3
 8026e08:	3710      	adds	r7, #16
 8026e0a:	46bd      	mov	sp, r7
 8026e0c:	bd80      	pop	{r7, pc}
 8026e0e:	bf00      	nop
 8026e10:	2000c8c4 	.word	0x2000c8c4
 8026e14:	40400000 	.word	0x40400000

08026e18 <iniciarBusMagIsentek>:
**  Descripcion:    Configura los pines y la velocidad del bus SPI
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBusMagIsentek(bus_t *bus)
{
 8026e18:	b580      	push	{r7, lr}
 8026e1a:	b082      	sub	sp, #8
 8026e1c:	af00      	add	r7, sp, #0
 8026e1e:	6078      	str	r0, [r7, #4]
    if (bus->tipo == BUS_SPI) {
 8026e20:	687b      	ldr	r3, [r7, #4]
 8026e22:	f993 3000 	ldrsb.w	r3, [r3]
 8026e26:	2b01      	cmp	r3, #1
 8026e28:	d114      	bne.n	8026e54 <iniciarBusMagIsentek+0x3c>
        configurarIO(bus->bus_u.spi.pinCS, CONFIG_IO(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL), 0);
 8026e2a:	687b      	ldr	r3, [r7, #4]
 8026e2c:	789b      	ldrb	r3, [r3, #2]
 8026e2e:	2200      	movs	r2, #0
 8026e30:	f240 3101 	movw	r1, #769	; 0x301
 8026e34:	4618      	mov	r0, r3
 8026e36:	f7ef fabb 	bl	80163b0 <configurarIO>
        escribirIO(bus->bus_u.spi.pinCS, true);
 8026e3a:	687b      	ldr	r3, [r7, #4]
 8026e3c:	789b      	ldrb	r3, [r3, #2]
 8026e3e:	2101      	movs	r1, #1
 8026e40:	4618      	mov	r0, r3
 8026e42:	f7ef fb95 	bl	8016570 <escribirIO>
        ajustarRelojSPI(bus->bus_u.spi.numSPI, SPI_RELOJ_ESTANDAR);
 8026e46:	687b      	ldr	r3, [r7, #4]
 8026e48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8026e4c:	2110      	movs	r1, #16
 8026e4e:	4618      	mov	r0, r3
 8026e50:	f7f0 fbd1 	bl	80175f6 <ajustarRelojSPI>
    }
}
 8026e54:	bf00      	nop
 8026e56:	3708      	adds	r7, #8
 8026e58:	46bd      	mov	sp, r7
 8026e5a:	bd80      	pop	{r7, pc}

08026e5c <chequearIdMagIsentek>:
**  Descripcion:    Chequea si estamos conectados a un IST8310
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
bool chequearIdMagIsentek(bus_t *bus)
{
 8026e5c:	b580      	push	{r7, lr}
 8026e5e:	b084      	sub	sp, #16
 8026e60:	af00      	add	r7, sp, #0
 8026e62:	6078      	str	r0, [r7, #4]
    uint8_t id;

    if (!leerRegistroBus(bus, ISENTEK_REG_ID, &id))
 8026e64:	f107 030f 	add.w	r3, r7, #15
 8026e68:	461a      	mov	r2, r3
 8026e6a:	2100      	movs	r1, #0
 8026e6c:	6878      	ldr	r0, [r7, #4]
 8026e6e:	f7ee fad4 	bl	801541a <leerRegistroBus>
 8026e72:	4603      	mov	r3, r0
 8026e74:	f083 0301 	eor.w	r3, r3, #1
 8026e78:	b2db      	uxtb	r3, r3
 8026e7a:	2b00      	cmp	r3, #0
 8026e7c:	d001      	beq.n	8026e82 <chequearIdMagIsentek+0x26>
        return false;
 8026e7e:	2300      	movs	r3, #0
 8026e80:	e005      	b.n	8026e8e <chequearIdMagIsentek+0x32>

    if (id != DEVICE_ID_IST8310)
 8026e82:	7bfb      	ldrb	r3, [r7, #15]
 8026e84:	2b10      	cmp	r3, #16
 8026e86:	d001      	beq.n	8026e8c <chequearIdMagIsentek+0x30>
        return false;
 8026e88:	2300      	movs	r3, #0
 8026e8a:	e000      	b.n	8026e8e <chequearIdMagIsentek+0x32>

    return true;
 8026e8c:	2301      	movs	r3, #1
}
 8026e8e:	4618      	mov	r0, r3
 8026e90:	3710      	adds	r7, #16
 8026e92:	46bd      	mov	sp, r7
 8026e94:	bd80      	pop	{r7, pc}

08026e96 <resetearMagIsentek>:
**  Descripcion:    Resetea el sensor
**  Parametros:     Bus
**  Retorno:        Ninguno
****************************************************************************************/
bool resetearMagIsentek(bus_t *bus)
{
 8026e96:	b580      	push	{r7, lr}
 8026e98:	b084      	sub	sp, #16
 8026e9a:	af00      	add	r7, sp, #0
 8026e9c:	6078      	str	r0, [r7, #4]
    uint8_t cnt;
    for (cnt = 0; cnt < 5; cnt++) {
 8026e9e:	2300      	movs	r3, #0
 8026ea0:	73fb      	strb	r3, [r7, #15]
 8026ea2:	e025      	b.n	8026ef0 <resetearMagIsentek+0x5a>
        if (!escribirRegistroBus(bus, ISENTEK_REG_COTROL_B, ISENTEK_VAL_SRST)) {
 8026ea4:	2201      	movs	r2, #1
 8026ea6:	210b      	movs	r1, #11
 8026ea8:	6878      	ldr	r0, [r7, #4]
 8026eaa:	f7ee fa73 	bl	8015394 <escribirRegistroBus>
 8026eae:	4603      	mov	r3, r0
 8026eb0:	f083 0301 	eor.w	r3, r3, #1
 8026eb4:	b2db      	uxtb	r3, r3
 8026eb6:	2b00      	cmp	r3, #0
 8026eb8:	d003      	beq.n	8026ec2 <resetearMagIsentek+0x2c>
            delay(10);
 8026eba:	200a      	movs	r0, #10
 8026ebc:	f7f0 fe6b 	bl	8017b96 <delay>
 8026ec0:	e013      	b.n	8026eea <resetearMagIsentek+0x54>
            continue;
        }

        delay(10);
 8026ec2:	200a      	movs	r0, #10
 8026ec4:	f7f0 fe67 	bl	8017b96 <delay>

        uint8_t cntl2 = 0xFF;
 8026ec8:	23ff      	movs	r3, #255	; 0xff
 8026eca:	73bb      	strb	r3, [r7, #14]
        if (leerRegistroBus(bus, ISENTEK_REG_COTROL_B, &cntl2) && (cntl2 & 0x01) == 0)
 8026ecc:	f107 030e 	add.w	r3, r7, #14
 8026ed0:	461a      	mov	r2, r3
 8026ed2:	210b      	movs	r1, #11
 8026ed4:	6878      	ldr	r0, [r7, #4]
 8026ed6:	f7ee faa0 	bl	801541a <leerRegistroBus>
 8026eda:	4603      	mov	r3, r0
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	d004      	beq.n	8026eea <resetearMagIsentek+0x54>
 8026ee0:	7bbb      	ldrb	r3, [r7, #14]
 8026ee2:	f003 0301 	and.w	r3, r3, #1
 8026ee6:	2b00      	cmp	r3, #0
 8026ee8:	d006      	beq.n	8026ef8 <resetearMagIsentek+0x62>
    for (cnt = 0; cnt < 5; cnt++) {
 8026eea:	7bfb      	ldrb	r3, [r7, #15]
 8026eec:	3301      	adds	r3, #1
 8026eee:	73fb      	strb	r3, [r7, #15]
 8026ef0:	7bfb      	ldrb	r3, [r7, #15]
 8026ef2:	2b04      	cmp	r3, #4
 8026ef4:	d9d6      	bls.n	8026ea4 <resetearMagIsentek+0xe>
 8026ef6:	e000      	b.n	8026efa <resetearMagIsentek+0x64>
            break;
 8026ef8:	bf00      	nop
    }

    if (cnt == 5)
 8026efa:	7bfb      	ldrb	r3, [r7, #15]
 8026efc:	2b05      	cmp	r3, #5
 8026efe:	d101      	bne.n	8026f04 <resetearMagIsentek+0x6e>
        return false;
 8026f00:	2300      	movs	r3, #0
 8026f02:	e000      	b.n	8026f06 <resetearMagIsentek+0x70>

    return true;
 8026f04:	2301      	movs	r3, #1
}
 8026f06:	4618      	mov	r0, r3
 8026f08:	3710      	adds	r7, #16
 8026f0a:	46bd      	mov	sp, r7
 8026f0c:	bd80      	pop	{r7, pc}

08026f0e <configurarMagIsentek>:
**  Descripcion:    Configura el sensor
**  Parametros:     Puntero al bus, configuracion del sample average
**  Retorno:        True si ok
****************************************************************************************/
bool configurarMagIsentek(bus_t *bus)
{
 8026f0e:	b580      	push	{r7, lr}
 8026f10:	b082      	sub	sp, #8
 8026f12:	af00      	add	r7, sp, #0
 8026f14:	6078      	str	r0, [r7, #4]
    if (!escribirRegistroBus(bus, ISENTEK_AVGCNTL_REG, ISENTEK_AVGCNTL_VAL_Y_16 | ISENTEK_AVGCNTL_VAL_XZ_16) || !escribirRegistroBus(bus, ISENTEK_PDCNTL_REG, ISENTEK_PDCNTL_VAL_PULSE_DURATION_NORMAL))
 8026f16:	2224      	movs	r2, #36	; 0x24
 8026f18:	2141      	movs	r1, #65	; 0x41
 8026f1a:	6878      	ldr	r0, [r7, #4]
 8026f1c:	f7ee fa3a 	bl	8015394 <escribirRegistroBus>
 8026f20:	4603      	mov	r3, r0
 8026f22:	f083 0301 	eor.w	r3, r3, #1
 8026f26:	b2db      	uxtb	r3, r3
 8026f28:	2b00      	cmp	r3, #0
 8026f2a:	d10a      	bne.n	8026f42 <configurarMagIsentek+0x34>
 8026f2c:	22c0      	movs	r2, #192	; 0xc0
 8026f2e:	2142      	movs	r1, #66	; 0x42
 8026f30:	6878      	ldr	r0, [r7, #4]
 8026f32:	f7ee fa2f 	bl	8015394 <escribirRegistroBus>
 8026f36:	4603      	mov	r3, r0
 8026f38:	f083 0301 	eor.w	r3, r3, #1
 8026f3c:	b2db      	uxtb	r3, r3
 8026f3e:	2b00      	cmp	r3, #0
 8026f40:	d001      	beq.n	8026f46 <configurarMagIsentek+0x38>
        return false;
 8026f42:	2300      	movs	r3, #0
 8026f44:	e000      	b.n	8026f48 <configurarMagIsentek+0x3a>

    return true;
 8026f46:	2301      	movs	r3, #1
}
 8026f48:	4618      	mov	r0, r3
 8026f4a:	3708      	adds	r7, #8
 8026f4c:	46bd      	mov	sp, r7
 8026f4e:	bd80      	pop	{r7, pc}

08026f50 <calibrarMagIsentek>:
**  Descripcion:    Obtiene los valores del escalado
**  Parametros:     Puntero al magnetometro
**  Retorno:        True si ok
****************************************************************************************/
bool calibrarMagIsentek(mag_t *dMag)
{
 8026f50:	b480      	push	{r7}
 8026f52:	b083      	sub	sp, #12
 8026f54:	af00      	add	r7, sp, #0
 8026f56:	6078      	str	r0, [r7, #4]
    UNUSED(dMag);
    return true;
 8026f58:	2301      	movs	r3, #1
}
 8026f5a:	4618      	mov	r0, r3
 8026f5c:	370c      	adds	r7, #12
 8026f5e:	46bd      	mov	sp, r7
 8026f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f64:	4770      	bx	lr

08026f66 <iniciarConversionMagIsentek>:
**  Descripcion:    Inicia la conversion de las medidas
**  Parametros:     Puntero al bus, puntero al driver
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarConversionMagIsentek(bus_t *bus, magIsentek_t *dMag)
{
 8026f66:	b580      	push	{r7, lr}
 8026f68:	b082      	sub	sp, #8
 8026f6a:	af00      	add	r7, sp, #0
 8026f6c:	6078      	str	r0, [r7, #4]
 8026f6e:	6039      	str	r1, [r7, #0]
    if (!escribirRegistroBus(bus, ISENTEK_REG_COTROL_A, ISENTEK_SINGLE_MEASUREMENT_MODE))
 8026f70:	2201      	movs	r2, #1
 8026f72:	210a      	movs	r1, #10
 8026f74:	6878      	ldr	r0, [r7, #4]
 8026f76:	f7ee fa0d 	bl	8015394 <escribirRegistroBus>
 8026f7a:	4603      	mov	r3, r0
 8026f7c:	f083 0301 	eor.w	r3, r3, #1
 8026f80:	b2db      	uxtb	r3, r3
 8026f82:	2b00      	cmp	r3, #0
 8026f84:	d002      	beq.n	8026f8c <iniciarConversionMagIsentek+0x26>
        dMag->ignorarMuestra = true;
 8026f86:	683b      	ldr	r3, [r7, #0]
 8026f88:	2201      	movs	r2, #1
 8026f8a:	711a      	strb	r2, [r3, #4]
}
 8026f8c:	bf00      	nop
 8026f8e:	3708      	adds	r7, #8
 8026f90:	46bd      	mov	sp, r7
 8026f92:	bd80      	pop	{r7, pc}

08026f94 <leerAdcMagIsentek>:
**  Descripcion:    Obtiene los valores del adc
**  Parametros:     Puntero al bus, valores del adc
**  Retorno:        True si ok
****************************************************************************************/
bool leerAdcMagIsentek(bus_t *bus, int16_t *adc)
{
 8026f94:	b580      	push	{r7, lr}
 8026f96:	b086      	sub	sp, #24
 8026f98:	af00      	add	r7, sp, #0
 8026f9a:	6078      	str	r0, [r7, #4]
 8026f9c:	6039      	str	r1, [r7, #0]
    uint8_t val[6];
    int16_t aux[3];

    if (!leerBufferRegistroBus(bus, ISENTEK_OUTPUT_X_L_REG, (uint8_t *) &val, 6))
 8026f9e:	f107 0210 	add.w	r2, r7, #16
 8026fa2:	2306      	movs	r3, #6
 8026fa4:	2103      	movs	r1, #3
 8026fa6:	6878      	ldr	r0, [r7, #4]
 8026fa8:	f7ee fa49 	bl	801543e <leerBufferRegistroBus>
 8026fac:	4603      	mov	r3, r0
 8026fae:	f083 0301 	eor.w	r3, r3, #1
 8026fb2:	b2db      	uxtb	r3, r3
 8026fb4:	2b00      	cmp	r3, #0
 8026fb6:	d001      	beq.n	8026fbc <leerAdcMagIsentek+0x28>
        return false;
 8026fb8:	2300      	movs	r3, #0
 8026fba:	e049      	b.n	8027050 <leerAdcMagIsentek+0xbc>

    aux[0] = (int16_t)(val[1] << 8) | val[0];
 8026fbc:	7c7b      	ldrb	r3, [r7, #17]
 8026fbe:	021b      	lsls	r3, r3, #8
 8026fc0:	b21a      	sxth	r2, r3
 8026fc2:	7c3b      	ldrb	r3, [r7, #16]
 8026fc4:	b21b      	sxth	r3, r3
 8026fc6:	4313      	orrs	r3, r2
 8026fc8:	b21b      	sxth	r3, r3
 8026fca:	813b      	strh	r3, [r7, #8]
    aux[1] = (int16_t)(val[3] << 8) | val[2];
 8026fcc:	7cfb      	ldrb	r3, [r7, #19]
 8026fce:	021b      	lsls	r3, r3, #8
 8026fd0:	b21a      	sxth	r2, r3
 8026fd2:	7cbb      	ldrb	r3, [r7, #18]
 8026fd4:	b21b      	sxth	r3, r3
 8026fd6:	4313      	orrs	r3, r2
 8026fd8:	b21b      	sxth	r3, r3
 8026fda:	817b      	strh	r3, [r7, #10]
    aux[2] = (int16_t)(val[5] << 8) | val[4];
 8026fdc:	7d7b      	ldrb	r3, [r7, #21]
 8026fde:	021b      	lsls	r3, r3, #8
 8026fe0:	b21a      	sxth	r2, r3
 8026fe2:	7d3b      	ldrb	r3, [r7, #20]
 8026fe4:	b21b      	sxth	r3, r3
 8026fe6:	4313      	orrs	r3, r2
 8026fe8:	b21b      	sxth	r3, r3
 8026fea:	81bb      	strh	r3, [r7, #12]

    // Comprueba si el valor tiene sentido de acuerdo con la FSR y la resolución descartando valores atipicos
    if (aux[0] > IST8310_MAX_VAL_XY || aux[0] < IST8310_MIN_VAL_XY ||
 8026fec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8026ff0:	f241 42d6 	movw	r2, #5334	; 0x14d6
 8026ff4:	4293      	cmp	r3, r2
 8026ff6:	dc1a      	bgt.n	802702e <leerAdcMagIsentek+0x9a>
 8026ff8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8026ffc:	4a16      	ldr	r2, [pc, #88]	; (8027058 <leerAdcMagIsentek+0xc4>)
 8026ffe:	4293      	cmp	r3, r2
 8027000:	db15      	blt.n	802702e <leerAdcMagIsentek+0x9a>
        aux[1] > IST8310_MAX_VAL_XY || aux[1] < IST8310_MIN_VAL_XY ||
 8027002:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8027006:	f241 42d6 	movw	r2, #5334	; 0x14d6
    if (aux[0] > IST8310_MAX_VAL_XY || aux[0] < IST8310_MIN_VAL_XY ||
 802700a:	4293      	cmp	r3, r2
 802700c:	dc0f      	bgt.n	802702e <leerAdcMagIsentek+0x9a>
        aux[1] > IST8310_MAX_VAL_XY || aux[1] < IST8310_MIN_VAL_XY ||
 802700e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8027012:	4a11      	ldr	r2, [pc, #68]	; (8027058 <leerAdcMagIsentek+0xc4>)
 8027014:	4293      	cmp	r3, r2
 8027016:	db0a      	blt.n	802702e <leerAdcMagIsentek+0x9a>
        aux[2] > IST8310_MAX_VAL_Z  || aux[2] < IST8310_MIN_VAL_Z) {
 8027018:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802701c:	f242 028e 	movw	r2, #8334	; 0x208e
        aux[1] > IST8310_MAX_VAL_XY || aux[1] < IST8310_MIN_VAL_XY ||
 8027020:	4293      	cmp	r3, r2
 8027022:	dc04      	bgt.n	802702e <leerAdcMagIsentek+0x9a>
        aux[2] > IST8310_MAX_VAL_Z  || aux[2] < IST8310_MIN_VAL_Z) {
 8027024:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8027028:	4a0c      	ldr	r2, [pc, #48]	; (802705c <leerAdcMagIsentek+0xc8>)
 802702a:	4293      	cmp	r3, r2
 802702c:	da01      	bge.n	8027032 <leerAdcMagIsentek+0x9e>
        return false;
 802702e:	2300      	movs	r3, #0
 8027030:	e00e      	b.n	8027050 <leerAdcMagIsentek+0xbc>
    }

    adc[0] = aux[0];
 8027032:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8027036:	683b      	ldr	r3, [r7, #0]
 8027038:	801a      	strh	r2, [r3, #0]
    adc[1] = aux[1];
 802703a:	683b      	ldr	r3, [r7, #0]
 802703c:	3302      	adds	r3, #2
 802703e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8027042:	801a      	strh	r2, [r3, #0]
    adc[2] = aux[2];
 8027044:	683b      	ldr	r3, [r7, #0]
 8027046:	3304      	adds	r3, #4
 8027048:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802704c:	801a      	strh	r2, [r3, #0]
    return true;
 802704e:	2301      	movs	r3, #1
}
 8027050:	4618      	mov	r0, r3
 8027052:	3718      	adds	r7, #24
 8027054:	46bd      	mov	sp, r7
 8027056:	bd80      	pop	{r7, pc}
 8027058:	ffffeb2a 	.word	0xffffeb2a
 802705c:	ffffdf72 	.word	0xffffdf72

08027060 <leerMagIsentek>:
**  Descripcion:    Lee el campo magnetico
**  Parametros:     Puntero al magnetometro
**  Retorno:        Ninguno
****************************************************************************************/
void leerMagIsentek(mag_t *dMag)
{
 8027060:	b580      	push	{r7, lr}
 8027062:	b088      	sub	sp, #32
 8027064:	af00      	add	r7, sp, #0
 8027066:	6078      	str	r0, [r7, #4]
    float aM[4] = {0, 0, 0, 0};
 8027068:	f107 0308 	add.w	r3, r7, #8
 802706c:	2200      	movs	r2, #0
 802706e:	601a      	str	r2, [r3, #0]
 8027070:	605a      	str	r2, [r3, #4]
 8027072:	609a      	str	r2, [r3, #8]
 8027074:	60da      	str	r2, [r3, #12]
    uint8_t cuentaM;
    magIsentek_t *driver = dMag->driver;
 8027076:	687b      	ldr	r3, [r7, #4]
 8027078:	685b      	ldr	r3, [r3, #4]
 802707a:	61fb      	str	r3, [r7, #28]

    if (driver->acumulador.contador == 0)
 802707c:	69fb      	ldr	r3, [r7, #28]
 802707e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8027082:	2b00      	cmp	r3, #0
 8027084:	d042      	beq.n	802710c <leerMagIsentek+0xac>
        return;

    memcpy(aM, driver->acumulador.acumulado, sizeof(driver->acumulador.acumulado));
 8027086:	69fb      	ldr	r3, [r7, #28]
 8027088:	f103 0114 	add.w	r1, r3, #20
 802708c:	f107 0308 	add.w	r3, r7, #8
 8027090:	220c      	movs	r2, #12
 8027092:	4618      	mov	r0, r3
 8027094:	f00e f8dc 	bl	8035250 <memcpy>
    cuentaM = driver->acumulador.contador;
 8027098:	69fb      	ldr	r3, [r7, #28]
 802709a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802709e:	76fb      	strb	r3, [r7, #27]
    memset(&driver->acumulador, 0, sizeof(driver->acumulador));
 80270a0:	69fb      	ldr	r3, [r7, #28]
 80270a2:	3314      	adds	r3, #20
 80270a4:	2210      	movs	r2, #16
 80270a6:	2100      	movs	r1, #0
 80270a8:	4618      	mov	r0, r3
 80270aa:	f00e f8f9 	bl	80352a0 <memset>

    if (cuentaM != 0) {
 80270ae:	7efb      	ldrb	r3, [r7, #27]
 80270b0:	2b00      	cmp	r3, #0
 80270b2:	d02c      	beq.n	802710e <leerMagIsentek+0xae>
        driver->campoMagRaw[0] = aM[0] / cuentaM;
 80270b4:	edd7 6a02 	vldr	s13, [r7, #8]
 80270b8:	7efb      	ldrb	r3, [r7, #27]
 80270ba:	ee07 3a90 	vmov	s15, r3
 80270be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80270c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80270c6:	69fb      	ldr	r3, [r7, #28]
 80270c8:	edc3 7a02 	vstr	s15, [r3, #8]
        driver->campoMagRaw[1] = aM[1] / cuentaM;
 80270cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80270d0:	7efb      	ldrb	r3, [r7, #27]
 80270d2:	ee07 3a90 	vmov	s15, r3
 80270d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80270da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80270de:	69fb      	ldr	r3, [r7, #28]
 80270e0:	edc3 7a03 	vstr	s15, [r3, #12]
        driver->campoMagRaw[2] = aM[2] / cuentaM;
 80270e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80270e8:	7efb      	ldrb	r3, [r7, #27]
 80270ea:	ee07 3a90 	vmov	s15, r3
 80270ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80270f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80270f6:	69fb      	ldr	r3, [r7, #28]
 80270f8:	edc3 7a04 	vstr	s15, [r3, #16]

        calcularMagIsentek(dMag);
 80270fc:	6878      	ldr	r0, [r7, #4]
 80270fe:	f000 f86a 	bl	80271d6 <calcularMagIsentek>
        dMag->nuevaMedida = true;
 8027102:	687b      	ldr	r3, [r7, #4]
 8027104:	2201      	movs	r2, #1
 8027106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 802710a:	e000      	b.n	802710e <leerMagIsentek+0xae>
        return;
 802710c:	bf00      	nop
    }
}
 802710e:	3720      	adds	r7, #32
 8027110:	46bd      	mov	sp, r7
 8027112:	bd80      	pop	{r7, pc}

08027114 <actualizarMagIsentek>:
**  Descripcion:    Actualiza las lecturas del magnetometro
**  Parametros:     Puntero al magnetometro
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMagIsentek(mag_t *dMag)
{
 8027114:	b580      	push	{r7, lr}
 8027116:	b088      	sub	sp, #32
 8027118:	af00      	add	r7, sp, #0
 802711a:	6078      	str	r0, [r7, #4]
    magIsentek_t *driver = dMag->driver;
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	685b      	ldr	r3, [r3, #4]
 8027120:	61fb      	str	r3, [r7, #28]
    int16_t adc[3];
    float mRaw[3];

    if (driver->ignorarMuestra) {
 8027122:	69fb      	ldr	r3, [r7, #28]
 8027124:	791b      	ldrb	r3, [r3, #4]
 8027126:	2b00      	cmp	r3, #0
 8027128:	d008      	beq.n	802713c <actualizarMagIsentek+0x28>
        driver->ignorarMuestra = false;
 802712a:	69fb      	ldr	r3, [r7, #28]
 802712c:	2200      	movs	r2, #0
 802712e:	711a      	strb	r2, [r3, #4]
        iniciarConversionMagIsentek(&dMag->bus, driver);
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	3301      	adds	r3, #1
 8027134:	69f9      	ldr	r1, [r7, #28]
 8027136:	4618      	mov	r0, r3
 8027138:	f7ff ff15 	bl	8026f66 <iniciarConversionMagIsentek>
    }

    bool estado = leerAdcMagIsentek(&dMag->bus, adc);
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	3301      	adds	r3, #1
 8027140:	f107 0214 	add.w	r2, r7, #20
 8027144:	4611      	mov	r1, r2
 8027146:	4618      	mov	r0, r3
 8027148:	f7ff ff24 	bl	8026f94 <leerAdcMagIsentek>
 802714c:	4603      	mov	r3, r0
 802714e:	76fb      	strb	r3, [r7, #27]

    // Pedimos una muestra
    iniciarConversionMagIsentek(&dMag->bus, driver);
 8027150:	687b      	ldr	r3, [r7, #4]
 8027152:	3301      	adds	r3, #1
 8027154:	69f9      	ldr	r1, [r7, #28]
 8027156:	4618      	mov	r0, r3
 8027158:	f7ff ff05 	bl	8026f66 <iniciarConversionMagIsentek>

    if (!estado)
 802715c:	7efb      	ldrb	r3, [r7, #27]
 802715e:	f083 0301 	eor.w	r3, r3, #1
 8027162:	b2db      	uxtb	r3, r3
 8027164:	2b00      	cmp	r3, #0
 8027166:	d132      	bne.n	80271ce <actualizarMagIsentek+0xba>
        return;

    mRaw[0] = -(float)adc[1];
 8027168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802716c:	ee07 3a90 	vmov	s15, r3
 8027170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027174:	eef1 7a67 	vneg.f32	s15, s15
 8027178:	edc7 7a02 	vstr	s15, [r7, #8]
    mRaw[1] =  (float)adc[0];
 802717c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8027180:	ee07 3a90 	vmov	s15, r3
 8027184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027188:	edc7 7a03 	vstr	s15, [r7, #12]
    mRaw[2] = -(float)adc[2];
 802718c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8027190:	ee07 3a90 	vmov	s15, r3
 8027194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027198:	eef1 7a67 	vneg.f32	s15, s15
 802719c:	edc7 7a04 	vstr	s15, [r7, #16]

    dMag->timing.ultimaActualizacion = micros();
 80271a0:	f7f0 fc9a 	bl	8017ad8 <micros>
 80271a4:	4602      	mov	r2, r0
 80271a6:	687b      	ldr	r3, [r7, #4]
 80271a8:	631a      	str	r2, [r3, #48]	; 0x30

    if (campoMagOk(dMag, mRaw))
 80271aa:	f107 0308 	add.w	r3, r7, #8
 80271ae:	4619      	mov	r1, r3
 80271b0:	6878      	ldr	r0, [r7, #4]
 80271b2:	f000 fbe5 	bl	8027980 <campoMagOk>
 80271b6:	4603      	mov	r3, r0
 80271b8:	2b00      	cmp	r3, #0
 80271ba:	d009      	beq.n	80271d0 <actualizarMagIsentek+0xbc>
        acumularLecturas3(&driver->acumulador, mRaw, 100);
 80271bc:	69fb      	ldr	r3, [r7, #28]
 80271be:	3314      	adds	r3, #20
 80271c0:	f107 0108 	add.w	r1, r7, #8
 80271c4:	2264      	movs	r2, #100	; 0x64
 80271c6:	4618      	mov	r0, r3
 80271c8:	f001 f8f6 	bl	80283b8 <acumularLecturas3>
 80271cc:	e000      	b.n	80271d0 <actualizarMagIsentek+0xbc>
        return;
 80271ce:	bf00      	nop
}
 80271d0:	3720      	adds	r7, #32
 80271d2:	46bd      	mov	sp, r7
 80271d4:	bd80      	pop	{r7, pc}

080271d6 <calcularMagIsentek>:
**  Descripcion:    Convierte la medida de uT a Gauss
**  Parametros:     Driver Isentek
**  Retorno:        Ninguno
****************************************************************************************/
void calcularMagIsentek(mag_t *dMag)
{
 80271d6:	b580      	push	{r7, lr}
 80271d8:	b088      	sub	sp, #32
 80271da:	af00      	add	r7, sp, #0
 80271dc:	6078      	str	r0, [r7, #4]
    magIsentek_t *driver = dMag->driver;
 80271de:	687b      	ldr	r3, [r7, #4]
 80271e0:	685b      	ldr	r3, [r3, #4]
 80271e2:	61fb      	str	r3, [r7, #28]
    float cMag[3];
    uint32_t tiempo = micros();
 80271e4:	f7f0 fc78 	bl	8017ad8 <micros>
 80271e8:	61b8      	str	r0, [r7, #24]

    cMag[0] = driver->campoMagRaw[0] * driver->ganancia;
 80271ea:	69fb      	ldr	r3, [r7, #28]
 80271ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80271f0:	69fb      	ldr	r3, [r7, #28]
 80271f2:	edd3 7a00 	vldr	s15, [r3]
 80271f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80271fa:	edc7 7a03 	vstr	s15, [r7, #12]
    cMag[1] = driver->campoMagRaw[1] * driver->ganancia;
 80271fe:	69fb      	ldr	r3, [r7, #28]
 8027200:	ed93 7a03 	vldr	s14, [r3, #12]
 8027204:	69fb      	ldr	r3, [r7, #28]
 8027206:	edd3 7a00 	vldr	s15, [r3]
 802720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802720e:	edc7 7a04 	vstr	s15, [r7, #16]
    cMag[2] = driver->campoMagRaw[2] * driver->ganancia;
 8027212:	69fb      	ldr	r3, [r7, #28]
 8027214:	ed93 7a04 	vldr	s14, [r3, #16]
 8027218:	69fb      	ldr	r3, [r7, #28]
 802721a:	edd3 7a00 	vldr	s15, [r3]
 802721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027222:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dMag->campoMag[0] != cMag[0] || dMag->campoMag[1] != cMag[1] || dMag->campoMag[2] != cMag[2])
 8027226:	687b      	ldr	r3, [r7, #4]
 8027228:	ed93 7a03 	vldr	s14, [r3, #12]
 802722c:	edd7 7a03 	vldr	s15, [r7, #12]
 8027230:	eeb4 7a67 	vcmp.f32	s14, s15
 8027234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027238:	d113      	bne.n	8027262 <calcularMagIsentek+0x8c>
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	ed93 7a04 	vldr	s14, [r3, #16]
 8027240:	edd7 7a04 	vldr	s15, [r7, #16]
 8027244:	eeb4 7a67 	vcmp.f32	s14, s15
 8027248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802724c:	d109      	bne.n	8027262 <calcularMagIsentek+0x8c>
 802724e:	687b      	ldr	r3, [r7, #4]
 8027250:	ed93 7a05 	vldr	s14, [r3, #20]
 8027254:	edd7 7a05 	vldr	s15, [r7, #20]
 8027258:	eeb4 7a67 	vcmp.f32	s14, s15
 802725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027260:	d002      	beq.n	8027268 <calcularMagIsentek+0x92>
    	dMag->timing.ultimoCambio = tiempo;
 8027262:	687b      	ldr	r3, [r7, #4]
 8027264:	69ba      	ldr	r2, [r7, #24]
 8027266:	639a      	str	r2, [r3, #56]	; 0x38

    dMag->campoMag[0] = cMag[0];
 8027268:	68fa      	ldr	r2, [r7, #12]
 802726a:	687b      	ldr	r3, [r7, #4]
 802726c:	60da      	str	r2, [r3, #12]
    dMag->campoMag[1] = cMag[1];
 802726e:	693a      	ldr	r2, [r7, #16]
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	611a      	str	r2, [r3, #16]
    dMag->campoMag[2] = cMag[2];
 8027274:	697a      	ldr	r2, [r7, #20]
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	615a      	str	r2, [r3, #20]
    dMag->timing.ultimaMedida = tiempo;
 802727a:	687b      	ldr	r3, [r7, #4]
 802727c:	69ba      	ldr	r2, [r7, #24]
 802727e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8027280:	bf00      	nop
 8027282:	3720      	adds	r7, #32
 8027284:	46bd      	mov	sp, r7
 8027286:	bd80      	pop	{r7, pc}

08027288 <configMag>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configMag_t, NUM_MAX_MAG, configMag);
 8027288:	b480      	push	{r7}
 802728a:	b083      	sub	sp, #12
 802728c:	af00      	add	r7, sp, #0
 802728e:	6078      	str	r0, [r7, #4]
 8027290:	687b      	ldr	r3, [r7, #4]
 8027292:	011b      	lsls	r3, r3, #4
 8027294:	4a03      	ldr	r2, [pc, #12]	; (80272a4 <configMag+0x1c>)
 8027296:	4413      	add	r3, r2
 8027298:	4618      	mov	r0, r3
 802729a:	370c      	adds	r7, #12
 802729c:	46bd      	mov	sp, r7
 802729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272a2:	4770      	bx	lr
 80272a4:	2000a848 	.word	0x2000a848

080272a8 <iniciarMag>:
**  Descripcion:    Inicia los magnetometros
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarMag(void)
{
 80272a8:	b580      	push	{r7, lr}
 80272aa:	b082      	sub	sp, #8
 80272ac:	af00      	add	r7, sp, #0
    // Ajustamos las frecuencias del scheduler
    ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_MAG, PERIODO_TAREA_HZ_SCHEDULER(configMag(0)->frecActualizar));
 80272ae:	2000      	movs	r0, #0
 80272b0:	f7ff ffea 	bl	8027288 <configMag>
 80272b4:	4603      	mov	r3, r0
 80272b6:	899b      	ldrh	r3, [r3, #12]
 80272b8:	461a      	mov	r2, r3
 80272ba:	4b82      	ldr	r3, [pc, #520]	; (80274c4 <iniciarMag+0x21c>)
 80272bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80272c0:	4619      	mov	r1, r3
 80272c2:	2007      	movs	r0, #7
 80272c4:	f7f7 fe54 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#ifdef LEER_MAG_SCHEDULER
    ajustarFrecuenciaEjecucionTarea(TAREA_LEER_MAG, PERIODO_TAREA_HZ_SCHEDULER(configMag(0)->frecLeer));
 80272c8:	2000      	movs	r0, #0
 80272ca:	f7ff ffdd 	bl	8027288 <configMag>
 80272ce:	4603      	mov	r3, r0
 80272d0:	89db      	ldrh	r3, [r3, #14]
 80272d2:	461a      	mov	r2, r3
 80272d4:	4b7b      	ldr	r3, [pc, #492]	; (80274c4 <iniciarMag+0x21c>)
 80272d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80272da:	4619      	mov	r1, r3
 80272dc:	2008      	movs	r0, #8
 80272de:	f7f7 fe47 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
#endif

    // Reseteamos las variables del sensor
    memset(&magGen, 0, sizeof(magGen_t));
 80272e2:	2210      	movs	r2, #16
 80272e4:	2100      	movs	r1, #0
 80272e6:	4878      	ldr	r0, [pc, #480]	; (80274c8 <iniciarMag+0x220>)
 80272e8:	f00d ffda 	bl	80352a0 <memset>

    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80272ec:	2300      	movs	r3, #0
 80272ee:	71fb      	strb	r3, [r7, #7]
 80272f0:	e0d8      	b.n	80274a4 <iniciarMag+0x1fc>
        if (configMag(i)->tipoMag == MAG_NINGUNO)
 80272f2:	79fb      	ldrb	r3, [r7, #7]
 80272f4:	4618      	mov	r0, r3
 80272f6:	f7ff ffc7 	bl	8027288 <configMag>
 80272fa:	4603      	mov	r3, r0
 80272fc:	f993 3000 	ldrsb.w	r3, [r3]
 8027300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027304:	f000 80ca 	beq.w	802749c <iniciarMag+0x1f4>
            continue;

        mag_t *driver = &mag[i];
 8027308:	79fa      	ldrb	r2, [r7, #7]
 802730a:	4613      	mov	r3, r2
 802730c:	011b      	lsls	r3, r3, #4
 802730e:	1a9b      	subs	r3, r3, r2
 8027310:	009b      	lsls	r3, r3, #2
 8027312:	4a6e      	ldr	r2, [pc, #440]	; (80274cc <iniciarMag+0x224>)
 8027314:	4413      	add	r3, r2
 8027316:	603b      	str	r3, [r7, #0]

        // Reseteamos las variables del magnetometro
        memset(driver, 0, sizeof(mag_t));
 8027318:	223c      	movs	r2, #60	; 0x3c
 802731a:	2100      	movs	r1, #0
 802731c:	6838      	ldr	r0, [r7, #0]
 802731e:	f00d ffbf 	bl	80352a0 <memset>

        // Asignamos el numero del sensor
        driver->numMag = i;
 8027322:	683b      	ldr	r3, [r7, #0]
 8027324:	79fa      	ldrb	r2, [r7, #7]
 8027326:	701a      	strb	r2, [r3, #0]

        driver->escalado[0] = 1;
 8027328:	683b      	ldr	r3, [r7, #0]
 802732a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 802732e:	619a      	str	r2, [r3, #24]
        driver->escalado[1] = 1;
 8027330:	683b      	ldr	r3, [r7, #0]
 8027332:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8027336:	61da      	str	r2, [r3, #28]
        driver->escalado[2] = 1;
 8027338:	683b      	ldr	r3, [r7, #0]
 802733a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 802733e:	621a      	str	r2, [r3, #32]

        // Data ready del sensor
        driver->drdy = configMag(i)->drdy;
 8027340:	79fb      	ldrb	r3, [r7, #7]
 8027342:	4618      	mov	r0, r3
 8027344:	f7ff ffa0 	bl	8027288 <configMag>
 8027348:	4603      	mov	r3, r0
 802734a:	799a      	ldrb	r2, [r3, #6]
 802734c:	683b      	ldr	r3, [r7, #0]
 802734e:	721a      	strb	r2, [r3, #8]

        // Cargamos la configuracion del magnetometro
        switch (configMag(i)->bus) {
 8027350:	79fb      	ldrb	r3, [r7, #7]
 8027352:	4618      	mov	r0, r3
 8027354:	f7ff ff98 	bl	8027288 <configMag>
 8027358:	4603      	mov	r3, r0
 802735a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 802735e:	2b00      	cmp	r3, #0
 8027360:	d002      	beq.n	8027368 <iniciarMag+0xc0>
 8027362:	2b01      	cmp	r3, #1
 8027364:	d02d      	beq.n	80273c2 <iniciarMag+0x11a>
 8027366:	e059      	b.n	802741c <iniciarMag+0x174>
#ifdef USAR_I2C
            case BUS_I2C:
                driver->bus.tipo = BUS_I2C;
 8027368:	683b      	ldr	r3, [r7, #0]
 802736a:	2200      	movs	r2, #0
 802736c:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.i2c.numI2C = configMag(i)->dispBus;
 802736e:	79fb      	ldrb	r3, [r7, #7]
 8027370:	4618      	mov	r0, r3
 8027372:	f7ff ff89 	bl	8027288 <configMag>
 8027376:	4603      	mov	r3, r0
 8027378:	78db      	ldrb	r3, [r3, #3]
 802737a:	b25a      	sxtb	r2, r3
 802737c:	683b      	ldr	r3, [r7, #0]
 802737e:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.i2c.dir = configMag(i)->dirI2C;
 8027380:	79fb      	ldrb	r3, [r7, #7]
 8027382:	4618      	mov	r0, r3
 8027384:	f7ff ff80 	bl	8027288 <configMag>
 8027388:	4603      	mov	r3, r0
 802738a:	795a      	ldrb	r2, [r3, #5]
 802738c:	683b      	ldr	r3, [r7, #0]
 802738e:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!i2cIniciado(driver->bus.bus_u.i2c.numI2C) && !iniciarI2C(driver->bus.bus_u.i2c.numI2C))
 8027390:	683b      	ldr	r3, [r7, #0]
 8027392:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8027396:	4618      	mov	r0, r3
 8027398:	f7ee fd1a 	bl	8015dd0 <i2cIniciado>
 802739c:	4603      	mov	r3, r0
 802739e:	f083 0301 	eor.w	r3, r3, #1
 80273a2:	b2db      	uxtb	r3, r3
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	d040      	beq.n	802742a <iniciarMag+0x182>
 80273a8:	683b      	ldr	r3, [r7, #0]
 80273aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80273ae:	4618      	mov	r0, r3
 80273b0:	f7ee fcca 	bl	8015d48 <iniciarI2C>
 80273b4:	4603      	mov	r3, r0
 80273b6:	f083 0301 	eor.w	r3, r3, #1
 80273ba:	b2db      	uxtb	r3, r3
 80273bc:	2b00      	cmp	r3, #0
 80273be:	d034      	beq.n	802742a <iniciarMag+0x182>
                    continue;
 80273c0:	e06d      	b.n	802749e <iniciarMag+0x1f6>
                break;
#endif

#ifdef USAR_SPI
            case BUS_SPI:
                driver->bus.tipo = BUS_SPI;
 80273c2:	683b      	ldr	r3, [r7, #0]
 80273c4:	2201      	movs	r2, #1
 80273c6:	705a      	strb	r2, [r3, #1]
                driver->bus.bus_u.spi.numSPI = configMag(i)->dispBus;
 80273c8:	79fb      	ldrb	r3, [r7, #7]
 80273ca:	4618      	mov	r0, r3
 80273cc:	f7ff ff5c 	bl	8027288 <configMag>
 80273d0:	4603      	mov	r3, r0
 80273d2:	78db      	ldrb	r3, [r3, #3]
 80273d4:	b25a      	sxtb	r2, r3
 80273d6:	683b      	ldr	r3, [r7, #0]
 80273d8:	709a      	strb	r2, [r3, #2]
                driver->bus.bus_u.spi.pinCS = configMag(i)->csSPI;
 80273da:	79fb      	ldrb	r3, [r7, #7]
 80273dc:	4618      	mov	r0, r3
 80273de:	f7ff ff53 	bl	8027288 <configMag>
 80273e2:	4603      	mov	r3, r0
 80273e4:	791a      	ldrb	r2, [r3, #4]
 80273e6:	683b      	ldr	r3, [r7, #0]
 80273e8:	70da      	strb	r2, [r3, #3]

                // Iniciamos el bus si es necesario
                if (!spiIniciado(driver->bus.bus_u.spi.numSPI) && !iniciarSPI(driver->bus.bus_u.spi.numSPI))
 80273ea:	683b      	ldr	r3, [r7, #0]
 80273ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80273f0:	4618      	mov	r0, r3
 80273f2:	f7ef fea1 	bl	8017138 <spiIniciado>
 80273f6:	4603      	mov	r3, r0
 80273f8:	f083 0301 	eor.w	r3, r3, #1
 80273fc:	b2db      	uxtb	r3, r3
 80273fe:	2b00      	cmp	r3, #0
 8027400:	d015      	beq.n	802742e <iniciarMag+0x186>
 8027402:	683b      	ldr	r3, [r7, #0]
 8027404:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8027408:	4618      	mov	r0, r3
 802740a:	f7ef fe51 	bl	80170b0 <iniciarSPI>
 802740e:	4603      	mov	r3, r0
 8027410:	f083 0301 	eor.w	r3, r3, #1
 8027414:	b2db      	uxtb	r3, r3
 8027416:	2b00      	cmp	r3, #0
 8027418:	d009      	beq.n	802742e <iniciarMag+0x186>
                    continue;
 802741a:	e040      	b.n	802749e <iniciarMag+0x1f6>

                break;
#endif
            default:
#ifdef DEBUG
                printf("Fallo en la definicion del bus del Magnetometro %u\n", i + 1);
 802741c:	79fb      	ldrb	r3, [r7, #7]
 802741e:	3301      	adds	r3, #1
 8027420:	4619      	mov	r1, r3
 8027422:	482b      	ldr	r0, [pc, #172]	; (80274d0 <iniciarMag+0x228>)
 8027424:	f00e fc66 	bl	8035cf4 <iprintf>
#endif
                break;
 8027428:	e002      	b.n	8027430 <iniciarMag+0x188>
                break;
 802742a:	bf00      	nop
 802742c:	e000      	b.n	8027430 <iniciarMag+0x188>
                break;
 802742e:	bf00      	nop
        }

        // Asignamos la tabla de funcion
        switch (configMag(i)->tipoMag) {
 8027430:	79fb      	ldrb	r3, [r7, #7]
 8027432:	4618      	mov	r0, r3
 8027434:	f7ff ff28 	bl	8027288 <configMag>
 8027438:	4603      	mov	r3, r0
 802743a:	f993 3000 	ldrsb.w	r3, [r3]
 802743e:	2b01      	cmp	r3, #1
 8027440:	dc02      	bgt.n	8027448 <iniciarMag+0x1a0>
 8027442:	2b00      	cmp	r3, #0
 8027444:	da03      	bge.n	802744e <iniciarMag+0x1a6>
 8027446:	e00e      	b.n	8027466 <iniciarMag+0x1be>
 8027448:	2b02      	cmp	r3, #2
 802744a:	d006      	beq.n	802745a <iniciarMag+0x1b2>
 802744c:	e00b      	b.n	8027466 <iniciarMag+0x1be>
            case MAG_HMC5883:
            case MAG_HMC5983:
                tablaFnMag[i] = &tablaFnMagHoneywell;
 802744e:	79fb      	ldrb	r3, [r7, #7]
 8027450:	4a20      	ldr	r2, [pc, #128]	; (80274d4 <iniciarMag+0x22c>)
 8027452:	4921      	ldr	r1, [pc, #132]	; (80274d8 <iniciarMag+0x230>)
 8027454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8027458:	e00c      	b.n	8027474 <iniciarMag+0x1cc>

            case MAG_IST8310:
                tablaFnMag[i] = &tablaFnMagIsentek;
 802745a:	79fb      	ldrb	r3, [r7, #7]
 802745c:	4a1d      	ldr	r2, [pc, #116]	; (80274d4 <iniciarMag+0x22c>)
 802745e:	491f      	ldr	r1, [pc, #124]	; (80274dc <iniciarMag+0x234>)
 8027460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8027464:	e006      	b.n	8027474 <iniciarMag+0x1cc>

            default:
#ifdef DEBUG
                printf("Fallo en la definicion del Magnetometro %u\n", i + 1);
 8027466:	79fb      	ldrb	r3, [r7, #7]
 8027468:	3301      	adds	r3, #1
 802746a:	4619      	mov	r1, r3
 802746c:	481c      	ldr	r0, [pc, #112]	; (80274e0 <iniciarMag+0x238>)
 802746e:	f00e fc41 	bl	8035cf4 <iprintf>
#endif
                continue;
 8027472:	e014      	b.n	802749e <iniciarMag+0x1f6>
                break;
        }

        // Una vez cargada la configuracion iniciamos el magnetometro
        driver->iniciado = iniciarDriverMag(driver);
 8027474:	6838      	ldr	r0, [r7, #0]
 8027476:	f000 f837 	bl	80274e8 <iniciarDriverMag>
 802747a:	4603      	mov	r3, r0
 802747c:	461a      	mov	r2, r3
 802747e:	683b      	ldr	r3, [r7, #0]
 8027480:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

        if (driver->iniciado)
 8027484:	683b      	ldr	r3, [r7, #0]
 8027486:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 802748a:	2b00      	cmp	r3, #0
 802748c:	d007      	beq.n	802749e <iniciarMag+0x1f6>
        	cntMagsConectados++;
 802748e:	4b15      	ldr	r3, [pc, #84]	; (80274e4 <iniciarMag+0x23c>)
 8027490:	781b      	ldrb	r3, [r3, #0]
 8027492:	3301      	adds	r3, #1
 8027494:	b2da      	uxtb	r2, r3
 8027496:	4b13      	ldr	r3, [pc, #76]	; (80274e4 <iniciarMag+0x23c>)
 8027498:	701a      	strb	r2, [r3, #0]
 802749a:	e000      	b.n	802749e <iniciarMag+0x1f6>
            continue;
 802749c:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 802749e:	79fb      	ldrb	r3, [r7, #7]
 80274a0:	3301      	adds	r3, #1
 80274a2:	71fb      	strb	r3, [r7, #7]
 80274a4:	79fb      	ldrb	r3, [r7, #7]
 80274a6:	2b04      	cmp	r3, #4
 80274a8:	f67f af23 	bls.w	80272f2 <iniciarMag+0x4a>
    }

    if (cntMagsConectados > 0)
 80274ac:	4b0d      	ldr	r3, [pc, #52]	; (80274e4 <iniciarMag+0x23c>)
 80274ae:	781b      	ldrb	r3, [r3, #0]
 80274b0:	2b00      	cmp	r3, #0
 80274b2:	d001      	beq.n	80274b8 <iniciarMag+0x210>
        return true;
 80274b4:	2301      	movs	r3, #1
 80274b6:	e000      	b.n	80274ba <iniciarMag+0x212>
    else
        return false;
 80274b8:	2300      	movs	r3, #0
}
 80274ba:	4618      	mov	r0, r3
 80274bc:	3708      	adds	r7, #8
 80274be:	46bd      	mov	sp, r7
 80274c0:	bd80      	pop	{r7, pc}
 80274c2:	bf00      	nop
 80274c4:	000f4240 	.word	0x000f4240
 80274c8:	2000caa4 	.word	0x2000caa4
 80274cc:	2000c978 	.word	0x2000c978
 80274d0:	0803ac04 	.word	0x0803ac04
 80274d4:	2000cab8 	.word	0x2000cab8
 80274d8:	20002948 	.word	0x20002948
 80274dc:	20002958 	.word	0x20002958
 80274e0:	0803ac38 	.word	0x0803ac38
 80274e4:	2000cab4 	.word	0x2000cab4

080274e8 <iniciarDriverMag>:
**  Descripcion:    Inicia un magnetometro
**  Parametros:     Dispositivo a iniciar
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarDriverMag(mag_t *dMag)
{
 80274e8:	b580      	push	{r7, lr}
 80274ea:	b082      	sub	sp, #8
 80274ec:	af00      	add	r7, sp, #0
 80274ee:	6078      	str	r0, [r7, #4]
	if (tablaFnMag[dMag->numMag]->iniciarMag(dMag)) {
 80274f0:	687b      	ldr	r3, [r7, #4]
 80274f2:	781b      	ldrb	r3, [r3, #0]
 80274f4:	461a      	mov	r2, r3
 80274f6:	4b19      	ldr	r3, [pc, #100]	; (802755c <iniciarDriverMag+0x74>)
 80274f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80274fc:	681b      	ldr	r3, [r3, #0]
 80274fe:	6878      	ldr	r0, [r7, #4]
 8027500:	4798      	blx	r3
 8027502:	4603      	mov	r3, r0
 8027504:	2b00      	cmp	r3, #0
 8027506:	d01d      	beq.n	8027544 <iniciarDriverMag+0x5c>
        if (tablaFnMag[dMag->numMag]->calibrarMag(dMag))
 8027508:	687b      	ldr	r3, [r7, #4]
 802750a:	781b      	ldrb	r3, [r3, #0]
 802750c:	461a      	mov	r2, r3
 802750e:	4b13      	ldr	r3, [pc, #76]	; (802755c <iniciarDriverMag+0x74>)
 8027510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027514:	68db      	ldr	r3, [r3, #12]
 8027516:	6878      	ldr	r0, [r7, #4]
 8027518:	4798      	blx	r3
 802751a:	4603      	mov	r3, r0
 802751c:	2b00      	cmp	r3, #0
 802751e:	d004      	beq.n	802752a <iniciarDriverMag+0x42>
            dMag->calibrado = true;
 8027520:	687b      	ldr	r3, [r7, #4]
 8027522:	2201      	movs	r2, #1
 8027524:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8027528:	e00a      	b.n	8027540 <iniciarDriverMag+0x58>
        else {
            dMag->calibrado = false;
 802752a:	687b      	ldr	r3, [r7, #4]
 802752c:	2200      	movs	r2, #0
 802752e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#ifdef DEBUG
            printf("Fallo en la calibracion del Magnetometro %u\n", dMag->numMag + 1);
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	781b      	ldrb	r3, [r3, #0]
 8027536:	3301      	adds	r3, #1
 8027538:	4619      	mov	r1, r3
 802753a:	4809      	ldr	r0, [pc, #36]	; (8027560 <iniciarDriverMag+0x78>)
 802753c:	f00e fbda 	bl	8035cf4 <iprintf>
#endif
        }

        return true;
 8027540:	2301      	movs	r3, #1
 8027542:	e007      	b.n	8027554 <iniciarDriverMag+0x6c>
	}
	else {
#ifdef DEBUG
	    printf("Fallo en la inicializacion del Magnetometro %u\n", dMag->numMag + 1);
 8027544:	687b      	ldr	r3, [r7, #4]
 8027546:	781b      	ldrb	r3, [r3, #0]
 8027548:	3301      	adds	r3, #1
 802754a:	4619      	mov	r1, r3
 802754c:	4805      	ldr	r0, [pc, #20]	; (8027564 <iniciarDriverMag+0x7c>)
 802754e:	f00e fbd1 	bl	8035cf4 <iprintf>
#endif
	    return false;
 8027552:	2300      	movs	r3, #0
	}
}
 8027554:	4618      	mov	r0, r3
 8027556:	3708      	adds	r7, #8
 8027558:	46bd      	mov	sp, r7
 802755a:	bd80      	pop	{r7, pc}
 802755c:	2000cab8 	.word	0x2000cab8
 8027560:	0803ac64 	.word	0x0803ac64
 8027564:	0803ac94 	.word	0x0803ac94

08027568 <actualizarFailsafeMag>:
**  Descripcion:    Comprueba si no hay sensores principales operativos
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarFailsafeMag(void)
{
 8027568:	b580      	push	{r7, lr}
 802756a:	b082      	sub	sp, #8
 802756c:	af00      	add	r7, sp, #0
    bool failsafe = true;
 802756e:	2301      	movs	r3, #1
 8027570:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 8027572:	2300      	movs	r3, #0
 8027574:	71bb      	strb	r3, [r7, #6]
 8027576:	e021      	b.n	80275bc <actualizarFailsafeMag+0x54>
        mag_t *driver = &mag[i];
 8027578:	79ba      	ldrb	r2, [r7, #6]
 802757a:	4613      	mov	r3, r2
 802757c:	011b      	lsls	r3, r3, #4
 802757e:	1a9b      	subs	r3, r3, r2
 8027580:	009b      	lsls	r3, r3, #2
 8027582:	4a13      	ldr	r2, [pc, #76]	; (80275d0 <actualizarFailsafeMag+0x68>)
 8027584:	4413      	add	r3, r2
 8027586:	603b      	str	r3, [r7, #0]

        if (driver->iniciado && driver->operativo && !configMag(i)->auxiliar)
 8027588:	683b      	ldr	r3, [r7, #0]
 802758a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 802758e:	2b00      	cmp	r3, #0
 8027590:	d011      	beq.n	80275b6 <actualizarFailsafeMag+0x4e>
 8027592:	683b      	ldr	r3, [r7, #0]
 8027594:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8027598:	2b00      	cmp	r3, #0
 802759a:	d00c      	beq.n	80275b6 <actualizarFailsafeMag+0x4e>
 802759c:	79bb      	ldrb	r3, [r7, #6]
 802759e:	4618      	mov	r0, r3
 80275a0:	f7ff fe72 	bl	8027288 <configMag>
 80275a4:	4603      	mov	r3, r0
 80275a6:	785b      	ldrb	r3, [r3, #1]
 80275a8:	f083 0301 	eor.w	r3, r3, #1
 80275ac:	b2db      	uxtb	r3, r3
 80275ae:	2b00      	cmp	r3, #0
 80275b0:	d001      	beq.n	80275b6 <actualizarFailsafeMag+0x4e>
        	failsafe = false;
 80275b2:	2300      	movs	r3, #0
 80275b4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80275b6:	79bb      	ldrb	r3, [r7, #6]
 80275b8:	3301      	adds	r3, #1
 80275ba:	71bb      	strb	r3, [r7, #6]
 80275bc:	79bb      	ldrb	r3, [r7, #6]
 80275be:	2b04      	cmp	r3, #4
 80275c0:	d9da      	bls.n	8027578 <actualizarFailsafeMag+0x10>
    }

    failsafeMag = failsafe;
 80275c2:	4a04      	ldr	r2, [pc, #16]	; (80275d4 <actualizarFailsafeMag+0x6c>)
 80275c4:	79fb      	ldrb	r3, [r7, #7]
 80275c6:	7013      	strb	r3, [r2, #0]
}
 80275c8:	bf00      	nop
 80275ca:	3708      	adds	r7, #8
 80275cc:	46bd      	mov	sp, r7
 80275ce:	bd80      	pop	{r7, pc}
 80275d0:	2000c978 	.word	0x2000c978
 80275d4:	2000cacc 	.word	0x2000cacc

080275d8 <calcularMagGen>:
**  Descripcion:    Mezcla las medidas de los sensores en uno general
**  Parametros:     Habilitacion de la mezcla de varios sensores
**  Retorno:        Ninguno
****************************************************************************************/
void calcularMagGen(bool habMezcla)
{
 80275d8:	b580      	push	{r7, lr}
 80275da:	b088      	sub	sp, #32
 80275dc:	af00      	add	r7, sp, #0
 80275de:	4603      	mov	r3, r0
 80275e0:	71fb      	strb	r3, [r7, #7]
    float mAcum[3] = {0, 0, 0};
 80275e2:	f04f 0300 	mov.w	r3, #0
 80275e6:	60fb      	str	r3, [r7, #12]
 80275e8:	f04f 0300 	mov.w	r3, #0
 80275ec:	613b      	str	r3, [r7, #16]
 80275ee:	f04f 0300 	mov.w	r3, #0
 80275f2:	617b      	str	r3, [r7, #20]
    uint8_t numDriversOp = 0;
 80275f4:	2300      	movs	r3, #0
 80275f6:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80275f8:	2300      	movs	r3, #0
 80275fa:	77bb      	strb	r3, [r7, #30]
 80275fc:	e030      	b.n	8027660 <calcularMagGen+0x88>
        mag_t *driver = &mag[i];
 80275fe:	7fba      	ldrb	r2, [r7, #30]
 8027600:	4613      	mov	r3, r2
 8027602:	011b      	lsls	r3, r3, #4
 8027604:	1a9b      	subs	r3, r3, r2
 8027606:	009b      	lsls	r3, r3, #2
 8027608:	4a31      	ldr	r2, [pc, #196]	; (80276d0 <calcularMagGen+0xf8>)
 802760a:	4413      	add	r3, r2
 802760c:	61bb      	str	r3, [r7, #24]

        // Mezclado de las medidas
        if (driver->operativo && (!configMag(i)->auxiliar || failsafeMag)) {
 802760e:	69bb      	ldr	r3, [r7, #24]
 8027610:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8027614:	2b00      	cmp	r3, #0
 8027616:	d020      	beq.n	802765a <calcularMagGen+0x82>
 8027618:	7fbb      	ldrb	r3, [r7, #30]
 802761a:	4618      	mov	r0, r3
 802761c:	f7ff fe34 	bl	8027288 <configMag>
 8027620:	4603      	mov	r3, r0
 8027622:	785b      	ldrb	r3, [r3, #1]
 8027624:	f083 0301 	eor.w	r3, r3, #1
 8027628:	b2db      	uxtb	r3, r3
 802762a:	2b00      	cmp	r3, #0
 802762c:	d103      	bne.n	8027636 <calcularMagGen+0x5e>
 802762e:	4b29      	ldr	r3, [pc, #164]	; (80276d4 <calcularMagGen+0xfc>)
 8027630:	781b      	ldrb	r3, [r3, #0]
 8027632:	2b00      	cmp	r3, #0
 8027634:	d011      	beq.n	802765a <calcularMagGen+0x82>
            mAcum[0] = driver->campoMag[0];
 8027636:	69bb      	ldr	r3, [r7, #24]
 8027638:	68db      	ldr	r3, [r3, #12]
 802763a:	60fb      	str	r3, [r7, #12]
            mAcum[1] = driver->campoMag[1];
 802763c:	69bb      	ldr	r3, [r7, #24]
 802763e:	691b      	ldr	r3, [r3, #16]
 8027640:	613b      	str	r3, [r7, #16]
            mAcum[2] = driver->campoMag[2];
 8027642:	69bb      	ldr	r3, [r7, #24]
 8027644:	695b      	ldr	r3, [r3, #20]
 8027646:	617b      	str	r3, [r7, #20]
            numDriversOp++;
 8027648:	7ffb      	ldrb	r3, [r7, #31]
 802764a:	3301      	adds	r3, #1
 802764c:	77fb      	strb	r3, [r7, #31]

            if (!habMezcla)
 802764e:	79fb      	ldrb	r3, [r7, #7]
 8027650:	f083 0301 	eor.w	r3, r3, #1
 8027654:	b2db      	uxtb	r3, r3
 8027656:	2b00      	cmp	r3, #0
 8027658:	d106      	bne.n	8027668 <calcularMagGen+0x90>
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 802765a:	7fbb      	ldrb	r3, [r7, #30]
 802765c:	3301      	adds	r3, #1
 802765e:	77bb      	strb	r3, [r7, #30]
 8027660:	7fbb      	ldrb	r3, [r7, #30]
 8027662:	2b04      	cmp	r3, #4
 8027664:	d9cb      	bls.n	80275fe <calcularMagGen+0x26>
 8027666:	e000      	b.n	802766a <calcularMagGen+0x92>
                break;
 8027668:	bf00      	nop
        }
    }

    if (numDriversOp > 0) {
 802766a:	7ffb      	ldrb	r3, [r7, #31]
 802766c:	2b00      	cmp	r3, #0
 802766e:	d027      	beq.n	80276c0 <calcularMagGen+0xe8>
    	magGen.operativo = true;
 8027670:	4b19      	ldr	r3, [pc, #100]	; (80276d8 <calcularMagGen+0x100>)
 8027672:	2201      	movs	r2, #1
 8027674:	701a      	strb	r2, [r3, #0]
        magGen.campoMag[0] = mAcum[0] / numDriversOp;
 8027676:	edd7 6a03 	vldr	s13, [r7, #12]
 802767a:	7ffb      	ldrb	r3, [r7, #31]
 802767c:	ee07 3a90 	vmov	s15, r3
 8027680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027688:	4b13      	ldr	r3, [pc, #76]	; (80276d8 <calcularMagGen+0x100>)
 802768a:	edc3 7a01 	vstr	s15, [r3, #4]
        magGen.campoMag[1] = mAcum[1] / numDriversOp;
 802768e:	edd7 6a04 	vldr	s13, [r7, #16]
 8027692:	7ffb      	ldrb	r3, [r7, #31]
 8027694:	ee07 3a90 	vmov	s15, r3
 8027698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80276a0:	4b0d      	ldr	r3, [pc, #52]	; (80276d8 <calcularMagGen+0x100>)
 80276a2:	edc3 7a02 	vstr	s15, [r3, #8]
        magGen.campoMag[2] = mAcum[2] / numDriversOp;
 80276a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80276aa:	7ffb      	ldrb	r3, [r7, #31]
 80276ac:	ee07 3a90 	vmov	s15, r3
 80276b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80276b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80276b8:	4b07      	ldr	r3, [pc, #28]	; (80276d8 <calcularMagGen+0x100>)
 80276ba:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else
    	magGen.operativo = false;
}
 80276be:	e002      	b.n	80276c6 <calcularMagGen+0xee>
    	magGen.operativo = false;
 80276c0:	4b05      	ldr	r3, [pc, #20]	; (80276d8 <calcularMagGen+0x100>)
 80276c2:	2200      	movs	r2, #0
 80276c4:	701a      	strb	r2, [r3, #0]
}
 80276c6:	bf00      	nop
 80276c8:	3720      	adds	r7, #32
 80276ca:	46bd      	mov	sp, r7
 80276cc:	bd80      	pop	{r7, pc}
 80276ce:	bf00      	nop
 80276d0:	2000c978 	.word	0x2000c978
 80276d4:	2000cacc 	.word	0x2000cacc
 80276d8:	2000caa4 	.word	0x2000caa4

080276dc <leerMag>:
**  Descripcion:    Lee el campo magnetico de todos los sensores
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerMag(uint32_t tiempoActual)
{
 80276dc:	b580      	push	{r7, lr}
 80276de:	b084      	sub	sp, #16
 80276e0:	af00      	add	r7, sp, #0
 80276e2:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80276e4:	2300      	movs	r3, #0
 80276e6:	73fb      	strb	r3, [r7, #15]
 80276e8:	e012      	b.n	8027710 <leerMag+0x34>
        mag_t *driver = &mag[i];
 80276ea:	7bfa      	ldrb	r2, [r7, #15]
 80276ec:	4613      	mov	r3, r2
 80276ee:	011b      	lsls	r3, r3, #4
 80276f0:	1a9b      	subs	r3, r3, r2
 80276f2:	009b      	lsls	r3, r3, #2
 80276f4:	4a0e      	ldr	r2, [pc, #56]	; (8027730 <leerMag+0x54>)
 80276f6:	4413      	add	r3, r2
 80276f8:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado)
 80276fa:	68bb      	ldr	r3, [r7, #8]
 80276fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8027700:	2b00      	cmp	r3, #0
 8027702:	d002      	beq.n	802770a <leerMag+0x2e>
            leerDriverMag(driver);
 8027704:	68b8      	ldr	r0, [r7, #8]
 8027706:	f000 f817 	bl	8027738 <leerDriverMag>
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 802770a:	7bfb      	ldrb	r3, [r7, #15]
 802770c:	3301      	adds	r3, #1
 802770e:	73fb      	strb	r3, [r7, #15]
 8027710:	7bfb      	ldrb	r3, [r7, #15]
 8027712:	2b04      	cmp	r3, #4
 8027714:	d9e9      	bls.n	80276ea <leerMag+0xe>
    }

    actualizarFailsafeMag();
 8027716:	f7ff ff27 	bl	8027568 <actualizarFailsafeMag>

    if (cntMagsConectados > 0)
 802771a:	4b06      	ldr	r3, [pc, #24]	; (8027734 <leerMag+0x58>)
 802771c:	781b      	ldrb	r3, [r3, #0]
 802771e:	2b00      	cmp	r3, #0
 8027720:	d002      	beq.n	8027728 <leerMag+0x4c>
        calcularMagGen(MEZCLADO_MEDIDAS_MAG);
 8027722:	2001      	movs	r0, #1
 8027724:	f7ff ff58 	bl	80275d8 <calcularMagGen>



}
 8027728:	bf00      	nop
 802772a:	3710      	adds	r7, #16
 802772c:	46bd      	mov	sp, r7
 802772e:	bd80      	pop	{r7, pc}
 8027730:	2000c978 	.word	0x2000c978
 8027734:	2000cab4 	.word	0x2000cab4

08027738 <leerDriverMag>:
**  Descripcion:    Lee el campo magnetico de un sensor
**  Parametros:     Magnetometro a leer
**  Retorno:        Ninguno
****************************************************************************************/
void leerDriverMag(mag_t *dMag)
{
 8027738:	b580      	push	{r7, lr}
 802773a:	b082      	sub	sp, #8
 802773c:	af00      	add	r7, sp, #0
 802773e:	6078      	str	r0, [r7, #4]
	tablaFnMag[dMag->numMag]->leerMag(dMag);
 8027740:	687b      	ldr	r3, [r7, #4]
 8027742:	781b      	ldrb	r3, [r3, #0]
 8027744:	461a      	mov	r2, r3
 8027746:	4b17      	ldr	r3, [pc, #92]	; (80277a4 <leerDriverMag+0x6c>)
 8027748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802774c:	685b      	ldr	r3, [r3, #4]
 802774e:	6878      	ldr	r0, [r7, #4]
 8027750:	4798      	blx	r3

	if (dMag->nuevaMedida) {
 8027752:	687b      	ldr	r3, [r7, #4]
 8027754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027758:	2b00      	cmp	r3, #0
 802775a:	d017      	beq.n	802778c <leerDriverMag+0x54>
		if (configMag(dMag->numMag)->rotacion.rotacion != 0)
 802775c:	687b      	ldr	r3, [r7, #4]
 802775e:	781b      	ldrb	r3, [r3, #0]
 8027760:	4618      	mov	r0, r3
 8027762:	f7ff fd91 	bl	8027288 <configMag>
 8027766:	4603      	mov	r3, r0
 8027768:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802776c:	2b00      	cmp	r3, #0
 802776e:	d00d      	beq.n	802778c <leerDriverMag+0x54>
		    rotarMag(configMag(dMag->numMag)->rotacion, dMag->campoMag);
 8027770:	687b      	ldr	r3, [r7, #4]
 8027772:	781b      	ldrb	r3, [r3, #0]
 8027774:	4618      	mov	r0, r3
 8027776:	f7ff fd87 	bl	8027288 <configMag>
 802777a:	4602      	mov	r2, r0
 802777c:	687b      	ldr	r3, [r7, #4]
 802777e:	330c      	adds	r3, #12
 8027780:	6891      	ldr	r1, [r2, #8]
 8027782:	460a      	mov	r2, r1
 8027784:	4619      	mov	r1, r3
 8027786:	4610      	mov	r0, r2
 8027788:	f000 f88a 	bl	80278a0 <rotarMag>
	}

    actualizarMagOperativo(dMag);
 802778c:	6878      	ldr	r0, [r7, #4]
 802778e:	f000 f857 	bl	8027840 <actualizarMagOperativo>
    dMag->nuevaMedida = false;
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	2200      	movs	r2, #0
 8027796:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 802779a:	bf00      	nop
 802779c:	3708      	adds	r7, #8
 802779e:	46bd      	mov	sp, r7
 80277a0:	bd80      	pop	{r7, pc}
 80277a2:	bf00      	nop
 80277a4:	2000cab8 	.word	0x2000cab8

080277a8 <actualizarMag>:
**  Descripcion:    Actualiza las muestras de los magnetometros
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMag(uint32_t tiempoActual)
{
 80277a8:	b580      	push	{r7, lr}
 80277aa:	b084      	sub	sp, #16
 80277ac:	af00      	add	r7, sp, #0
 80277ae:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80277b0:	2300      	movs	r3, #0
 80277b2:	73fb      	strb	r3, [r7, #15]
 80277b4:	e026      	b.n	8027804 <actualizarMag+0x5c>
        mag_t *driver = &mag[i];
 80277b6:	7bfa      	ldrb	r2, [r7, #15]
 80277b8:	4613      	mov	r3, r2
 80277ba:	011b      	lsls	r3, r3, #4
 80277bc:	1a9b      	subs	r3, r3, r2
 80277be:	009b      	lsls	r3, r3, #2
 80277c0:	4a14      	ldr	r2, [pc, #80]	; (8027814 <actualizarMag+0x6c>)
 80277c2:	4413      	add	r3, r2
 80277c4:	60bb      	str	r3, [r7, #8]

        if (driver->iniciado && (configMag(i)->drdy == 0 || leerIO(configMag(i)->drdy)))
 80277c6:	68bb      	ldr	r3, [r7, #8]
 80277c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	d016      	beq.n	80277fe <actualizarMag+0x56>
 80277d0:	7bfb      	ldrb	r3, [r7, #15]
 80277d2:	4618      	mov	r0, r3
 80277d4:	f7ff fd58 	bl	8027288 <configMag>
 80277d8:	4603      	mov	r3, r0
 80277da:	799b      	ldrb	r3, [r3, #6]
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d00b      	beq.n	80277f8 <actualizarMag+0x50>
 80277e0:	7bfb      	ldrb	r3, [r7, #15]
 80277e2:	4618      	mov	r0, r3
 80277e4:	f7ff fd50 	bl	8027288 <configMag>
 80277e8:	4603      	mov	r3, r0
 80277ea:	799b      	ldrb	r3, [r3, #6]
 80277ec:	4618      	mov	r0, r3
 80277ee:	f7ee fee7 	bl	80165c0 <leerIO>
 80277f2:	4603      	mov	r3, r0
 80277f4:	2b00      	cmp	r3, #0
 80277f6:	d002      	beq.n	80277fe <actualizarMag+0x56>
            actualizarDriverMag(driver);
 80277f8:	68b8      	ldr	r0, [r7, #8]
 80277fa:	f000 f80d 	bl	8027818 <actualizarDriverMag>
    for (uint8_t i = 0; i < NUM_MAX_MAG; i++) {
 80277fe:	7bfb      	ldrb	r3, [r7, #15]
 8027800:	3301      	adds	r3, #1
 8027802:	73fb      	strb	r3, [r7, #15]
 8027804:	7bfb      	ldrb	r3, [r7, #15]
 8027806:	2b04      	cmp	r3, #4
 8027808:	d9d5      	bls.n	80277b6 <actualizarMag+0xe>
    }




}
 802780a:	bf00      	nop
 802780c:	bf00      	nop
 802780e:	3710      	adds	r7, #16
 8027810:	46bd      	mov	sp, r7
 8027812:	bd80      	pop	{r7, pc}
 8027814:	2000c978 	.word	0x2000c978

08027818 <actualizarDriverMag>:
**  Descripcion:    Actualiza las muestras de un magnetometro
**  Parametros:     Puntero al barometro a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarDriverMag(mag_t *dMag)
{
 8027818:	b580      	push	{r7, lr}
 802781a:	b082      	sub	sp, #8
 802781c:	af00      	add	r7, sp, #0
 802781e:	6078      	str	r0, [r7, #4]
    tablaFnMag[dMag->numMag]->actualizarMag(dMag);
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	781b      	ldrb	r3, [r3, #0]
 8027824:	461a      	mov	r2, r3
 8027826:	4b05      	ldr	r3, [pc, #20]	; (802783c <actualizarDriverMag+0x24>)
 8027828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802782c:	689b      	ldr	r3, [r3, #8]
 802782e:	6878      	ldr	r0, [r7, #4]
 8027830:	4798      	blx	r3
}
 8027832:	bf00      	nop
 8027834:	3708      	adds	r7, #8
 8027836:	46bd      	mov	sp, r7
 8027838:	bd80      	pop	{r7, pc}
 802783a:	bf00      	nop
 802783c:	2000cab8 	.word	0x2000cab8

08027840 <actualizarMagOperativo>:
**  Descripcion:    Actualiza la bandera del estado operativo
**  Parametros:     Puntero al magnetometro a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarMagOperativo(mag_t *dMag)
{
 8027840:	b580      	push	{r7, lr}
 8027842:	b084      	sub	sp, #16
 8027844:	af00      	add	r7, sp, #0
 8027846:	6078      	str	r0, [r7, #4]
    // Se considera que el sensor esta operativo si se ha actualizado en X tiempo,
    // tiene valores diferentes de 0 y las medidas han cambiado en los ultimos X microsegundos
    const uint32_t tiempo = micros();
 8027848:	f7f0 f946 	bl	8017ad8 <micros>
 802784c:	60f8      	str	r0, [r7, #12]
    dMag->operativo =
        ((tiempo - dMag->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_MAG) &&
 802784e:	687b      	ldr	r3, [r7, #4]
 8027850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027852:	68fa      	ldr	r2, [r7, #12]
 8027854:	1ad3      	subs	r3, r2, r3
        ((tiempo - dMag->timing.ultimaMedida) < TIMEOUT_MEDIDA_MAG) &&
 8027856:	f24c 324f 	movw	r2, #49999	; 0xc34f
 802785a:	4293      	cmp	r3, r2
 802785c:	d80f      	bhi.n	802787e <actualizarMagOperativo+0x3e>
 802785e:	687b      	ldr	r3, [r7, #4]
 8027860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027862:	68fa      	ldr	r2, [r7, #12]
 8027864:	1ad3      	subs	r3, r2, r3
        ((tiempo - dMag->timing.ultimaActualizacion) < TIMEOUT_ACTUALIZACION_MAG) &&
 8027866:	4a0b      	ldr	r2, [pc, #44]	; (8027894 <actualizarMagOperativo+0x54>)
 8027868:	4293      	cmp	r3, r2
 802786a:	d808      	bhi.n	802787e <actualizarMagOperativo+0x3e>
        ((tiempo - dMag->timing.ultimoCambio) < TIMEOUT_CAMBIO_MEDIDA_MAG);
 802786c:	687b      	ldr	r3, [r7, #4]
 802786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027870:	68fa      	ldr	r2, [r7, #12]
 8027872:	1ad3      	subs	r3, r2, r3
        ((tiempo - dMag->timing.ultimaMedida) < TIMEOUT_MEDIDA_MAG) &&
 8027874:	4a08      	ldr	r2, [pc, #32]	; (8027898 <actualizarMagOperativo+0x58>)
 8027876:	4293      	cmp	r3, r2
 8027878:	d801      	bhi.n	802787e <actualizarMagOperativo+0x3e>
 802787a:	2301      	movs	r3, #1
 802787c:	e000      	b.n	8027880 <actualizarMagOperativo+0x40>
 802787e:	2300      	movs	r3, #0
 8027880:	f003 0301 	and.w	r3, r3, #1
 8027884:	b2da      	uxtb	r2, r3
    dMag->operativo =
 8027886:	687b      	ldr	r3, [r7, #4]
 8027888:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 802788c:	bf00      	nop
 802788e:	3710      	adds	r7, #16
 8027890:	46bd      	mov	sp, r7
 8027892:	bd80      	pop	{r7, pc}
 8027894:	00030d3f 	.word	0x00030d3f
 8027898:	0007a11f 	.word	0x0007a11f
 802789c:	00000000 	.word	0x00000000

080278a0 <rotarMag>:
**  Descripcion:    Rota la medida del magnetometro
**  Parametros:     Rotacion, puntero al campo rotado
**  Retorno:        Ninguno
****************************************************************************************/
void rotarMag(rotacionSensor_t rotacion, float *campo)
{
 80278a0:	b580      	push	{r7, lr}
 80278a2:	b08a      	sub	sp, #40	; 0x28
 80278a4:	af00      	add	r7, sp, #0
 80278a6:	6078      	str	r0, [r7, #4]
 80278a8:	6039      	str	r1, [r7, #0]
    float matrizR[2][2];
    float campoR[2];
    float anguloR = radianes(rotacion.rotacion);
 80278aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80278ae:	ee07 3a90 	vmov	s15, r3
 80278b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80278b6:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8027978 <rotarMag+0xd8>
 80278ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80278be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80278c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    matrizR[0][0] = cosf(anguloR);
 80278c6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80278ca:	f010 fd29 	bl	8038320 <cosf>
 80278ce:	eef0 7a40 	vmov.f32	s15, s0
 80278d2:	edc7 7a05 	vstr	s15, [r7, #20]
    matrizR[0][1] = sinf(anguloR);
 80278d6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80278da:	f011 fbc1 	bl	8039060 <sinf>
 80278de:	eef0 7a40 	vmov.f32	s15, s0
 80278e2:	edc7 7a06 	vstr	s15, [r7, #24]
    matrizR[1][0] = -matrizR[0][1];
 80278e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80278ea:	eef1 7a67 	vneg.f32	s15, s15
 80278ee:	edc7 7a07 	vstr	s15, [r7, #28]
    matrizR[1][1] =  matrizR[0][0];
 80278f2:	697b      	ldr	r3, [r7, #20]
 80278f4:	623b      	str	r3, [r7, #32]

    if (rotacion.volteado)
 80278f6:	79bb      	ldrb	r3, [r7, #6]
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	d009      	beq.n	8027910 <rotarMag+0x70>
    	campo[2] = -campo[2];
 80278fc:	683b      	ldr	r3, [r7, #0]
 80278fe:	3308      	adds	r3, #8
 8027900:	edd3 7a00 	vldr	s15, [r3]
 8027904:	683b      	ldr	r3, [r7, #0]
 8027906:	3308      	adds	r3, #8
 8027908:	eef1 7a67 	vneg.f32	s15, s15
 802790c:	edc3 7a00 	vstr	s15, [r3]

    campoR[0] = matrizR[0][0] * campo[0] + matrizR[0][1] * campo[1];
 8027910:	ed97 7a05 	vldr	s14, [r7, #20]
 8027914:	683b      	ldr	r3, [r7, #0]
 8027916:	edd3 7a00 	vldr	s15, [r3]
 802791a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802791e:	edd7 6a06 	vldr	s13, [r7, #24]
 8027922:	683b      	ldr	r3, [r7, #0]
 8027924:	3304      	adds	r3, #4
 8027926:	edd3 7a00 	vldr	s15, [r3]
 802792a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802792e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027932:	edc7 7a03 	vstr	s15, [r7, #12]
    campoR[1] = matrizR[1][0] * campo[0] + matrizR[1][1] * campo[1];
 8027936:	ed97 7a07 	vldr	s14, [r7, #28]
 802793a:	683b      	ldr	r3, [r7, #0]
 802793c:	edd3 7a00 	vldr	s15, [r3]
 8027940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027944:	edd7 6a08 	vldr	s13, [r7, #32]
 8027948:	683b      	ldr	r3, [r7, #0]
 802794a:	3304      	adds	r3, #4
 802794c:	edd3 7a00 	vldr	s15, [r3]
 8027950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8027954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027958:	edc7 7a04 	vstr	s15, [r7, #16]

    campo[0] = campoR[0];
 802795c:	68fa      	ldr	r2, [r7, #12]
 802795e:	683b      	ldr	r3, [r7, #0]
 8027960:	601a      	str	r2, [r3, #0]
    campo[1] = campoR[1];
 8027962:	683b      	ldr	r3, [r7, #0]
 8027964:	3304      	adds	r3, #4
 8027966:	693a      	ldr	r2, [r7, #16]
 8027968:	601a      	str	r2, [r3, #0]
}
 802796a:	bf00      	nop
 802796c:	3728      	adds	r7, #40	; 0x28
 802796e:	46bd      	mov	sp, r7
 8027970:	bd80      	pop	{r7, pc}
 8027972:	bf00      	nop
 8027974:	f3af 8000 	nop.w
 8027978:	a2529d39 	.word	0xa2529d39
 802797c:	3f91df46 	.word	0x3f91df46

08027980 <campoMagOk>:
**  Descripcion:    Comprueba si la lectura del campo magnetico es correcta
**  Parametros:     Medida del campo magnetico
**  Retorno:        True si ok
****************************************************************************************/
bool campoMagOk(mag_t *dMag, float *m)
{
 8027980:	b580      	push	{r7, lr}
 8027982:	b088      	sub	sp, #32
 8027984:	af00      	add	r7, sp, #0
 8027986:	6078      	str	r0, [r7, #4]
 8027988:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 3; i++) {
 802798a:	2300      	movs	r3, #0
 802798c:	77fb      	strb	r3, [r7, #31]
 802798e:	e026      	b.n	80279de <campoMagOk+0x5e>
        if (isinf(m[i]) || isnan(m[i]))
 8027990:	7ffb      	ldrb	r3, [r7, #31]
 8027992:	009b      	lsls	r3, r3, #2
 8027994:	683a      	ldr	r2, [r7, #0]
 8027996:	4413      	add	r3, r2
 8027998:	edd3 7a00 	vldr	s15, [r3]
 802799c:	eef0 7ae7 	vabs.f32	s15, s15
 80279a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8027ad0 <campoMagOk+0x150>
 80279a4:	eef4 7a47 	vcmp.f32	s15, s14
 80279a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279ac:	bfd4      	ite	le
 80279ae:	2301      	movle	r3, #1
 80279b0:	2300      	movgt	r3, #0
 80279b2:	b2db      	uxtb	r3, r3
 80279b4:	f083 0301 	eor.w	r3, r3, #1
 80279b8:	b2db      	uxtb	r3, r3
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	d10a      	bne.n	80279d4 <campoMagOk+0x54>
 80279be:	7ffb      	ldrb	r3, [r7, #31]
 80279c0:	009b      	lsls	r3, r3, #2
 80279c2:	683a      	ldr	r2, [r7, #0]
 80279c4:	4413      	add	r3, r2
 80279c6:	edd3 7a00 	vldr	s15, [r3]
 80279ca:	eef4 7a67 	vcmp.f32	s15, s15
 80279ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279d2:	d701      	bvc.n	80279d8 <campoMagOk+0x58>
            return false;
 80279d4:	2300      	movs	r3, #0
 80279d6:	e076      	b.n	8027ac6 <campoMagOk+0x146>
    for (uint8_t i = 0; i < 3; i++) {
 80279d8:	7ffb      	ldrb	r3, [r7, #31]
 80279da:	3301      	adds	r3, #1
 80279dc:	77fb      	strb	r3, [r7, #31]
 80279de:	7ffb      	ldrb	r3, [r7, #31]
 80279e0:	2b02      	cmp	r3, #2
 80279e2:	d9d5      	bls.n	8027990 <campoMagOk+0x10>
    }

    uint8_t rango = configMag(dMag->numMag)->rangoFiltro;
 80279e4:	687b      	ldr	r3, [r7, #4]
 80279e6:	781b      	ldrb	r3, [r3, #0]
 80279e8:	4618      	mov	r0, r3
 80279ea:	f7ff fc4d 	bl	8027288 <configMag>
 80279ee:	4603      	mov	r3, r0
 80279f0:	79db      	ldrb	r3, [r3, #7]
 80279f2:	75fb      	strb	r3, [r7, #23]
    if (rango <= 0)
 80279f4:	7dfb      	ldrb	r3, [r7, #23]
 80279f6:	2b00      	cmp	r3, #0
 80279f8:	d101      	bne.n	80279fe <campoMagOk+0x7e>
        return true;
 80279fa:	2301      	movs	r3, #1
 80279fc:	e063      	b.n	8027ac6 <campoMagOk+0x146>

    float campo = moduloVector3(m);
 80279fe:	6838      	ldr	r0, [r7, #0]
 8027a00:	f7eb fe66 	bl	80136d0 <moduloVector3>
 8027a04:	ed87 0a04 	vstr	s0, [r7, #16]

    bool estado = true;
 8027a08:	2301      	movs	r3, #1
 8027a0a:	77bb      	strb	r3, [r7, #30]
    if (dMag->campoMagMedio == 0)
 8027a0c:	687b      	ldr	r3, [r7, #4]
 8027a0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8027a12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a1a:	d103      	bne.n	8027a24 <campoMagOk+0xa4>
    	dMag->campoMagMedio = campo;
 8027a1c:	687b      	ldr	r3, [r7, #4]
 8027a1e:	693a      	ldr	r2, [r7, #16]
 8027a20:	625a      	str	r2, [r3, #36]	; 0x24
 8027a22:	e04f      	b.n	8027ac4 <campoMagOk+0x144>
    else {
        const float d = fabsf(dMag->campoMagMedio - campo) / (dMag->campoMagMedio + campo);
 8027a24:	687b      	ldr	r3, [r7, #4]
 8027a26:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8027a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8027a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027a32:	eef0 6ae7 	vabs.f32	s13, s15
 8027a36:	687b      	ldr	r3, [r7, #4]
 8027a38:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8027a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8027a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8027a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027a48:	edc7 7a03 	vstr	s15, [r7, #12]
        float koeff = K_FILTRO_MAG;
 8027a4c:	4b21      	ldr	r3, [pc, #132]	; (8027ad4 <campoMagOk+0x154>)
 8027a4e:	61bb      	str	r3, [r7, #24]

        if (d * 200.0f > rango) {
 8027a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8027a54:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8027ad8 <campoMagOk+0x158>
 8027a58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8027a5c:	7dfb      	ldrb	r3, [r7, #23]
 8027a5e:	ee07 3a90 	vmov	s15, r3
 8027a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a6e:	dd13      	ble.n	8027a98 <campoMagOk+0x118>
        	estado = false;
 8027a70:	2300      	movs	r3, #0
 8027a72:	77bb      	strb	r3, [r7, #30]
            koeff /= (d * 10.0f);
 8027a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8027a78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8027a7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8027a80:	edd7 6a06 	vldr	s13, [r7, #24]
 8027a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027a88:	edc7 7a06 	vstr	s15, [r7, #24]
            dMag->cntErrorFiltro++;
 8027a8c:	687b      	ldr	r3, [r7, #4]
 8027a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8027a90:	3301      	adds	r3, #1
 8027a92:	b29a      	uxth	r2, r3
 8027a94:	687b      	ldr	r3, [r7, #4]
 8027a96:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        dMag->campoMagMedio = dMag->campoMagMedio * (1 - koeff) + campo * koeff; // Filtro complementario 1/k
 8027a98:	687b      	ldr	r3, [r7, #4]
 8027a9a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8027a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8027aa6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8027aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027aae:	edd7 6a04 	vldr	s13, [r7, #16]
 8027ab2:	edd7 7a06 	vldr	s15, [r7, #24]
 8027ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8027aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    }

    return estado;
 8027ac4:	7fbb      	ldrb	r3, [r7, #30]
}
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	3720      	adds	r7, #32
 8027aca:	46bd      	mov	sp, r7
 8027acc:	bd80      	pop	{r7, pc}
 8027ace:	bf00      	nop
 8027ad0:	7f7fffff 	.word	0x7f7fffff
 8027ad4:	3dcccccd 	.word	0x3dcccccd
 8027ad8:	43480000 	.word	0x43480000

08027adc <magGenOperativo>:
**  Descripcion:    Devuelve si el magnetometro general esta operativo
**  Parametros:     Ninguno
**  Retorno:        Magnetometro general operativo
****************************************************************************************/
bool magGenOperativo(void)
{
 8027adc:	b480      	push	{r7}
 8027ade:	af00      	add	r7, sp, #0
    return magGen.operativo;
 8027ae0:	4b03      	ldr	r3, [pc, #12]	; (8027af0 <magGenOperativo+0x14>)
 8027ae2:	781b      	ldrb	r3, [r3, #0]
}
 8027ae4:	4618      	mov	r0, r3
 8027ae6:	46bd      	mov	sp, r7
 8027ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aec:	4770      	bx	lr
 8027aee:	bf00      	nop
 8027af0:	2000caa4 	.word	0x2000caa4

08027af4 <campoMag>:
**  Descripcion:    Devuelve el campo magnetico del magnetometro general
**  Parametros:     Campo magnetico
**  Retorno:        Ninguno
****************************************************************************************/
void campoMag(float *m)
{
 8027af4:	b480      	push	{r7}
 8027af6:	b083      	sub	sp, #12
 8027af8:	af00      	add	r7, sp, #0
 8027afa:	6078      	str	r0, [r7, #4]
    m[0] = magGen.campoMag[0];
 8027afc:	4b09      	ldr	r3, [pc, #36]	; (8027b24 <campoMag+0x30>)
 8027afe:	685a      	ldr	r2, [r3, #4]
 8027b00:	687b      	ldr	r3, [r7, #4]
 8027b02:	601a      	str	r2, [r3, #0]
    m[1] = magGen.campoMag[1];
 8027b04:	687b      	ldr	r3, [r7, #4]
 8027b06:	3304      	adds	r3, #4
 8027b08:	4a06      	ldr	r2, [pc, #24]	; (8027b24 <campoMag+0x30>)
 8027b0a:	6892      	ldr	r2, [r2, #8]
 8027b0c:	601a      	str	r2, [r3, #0]
    m[2] = magGen.campoMag[2];
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	3308      	adds	r3, #8
 8027b12:	4a04      	ldr	r2, [pc, #16]	; (8027b24 <campoMag+0x30>)
 8027b14:	68d2      	ldr	r2, [r2, #12]
 8027b16:	601a      	str	r2, [r3, #0]
}
 8027b18:	bf00      	nop
 8027b1a:	370c      	adds	r7, #12
 8027b1c:	46bd      	mov	sp, r7
 8027b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b22:	4770      	bx	lr
 8027b24:	2000caa4 	.word	0x2000caa4

08027b28 <configPowerModule>:


/***************************************************************************************
** AREA DE DECLARACION DE VARIABLES                                                   **
****************************************************************************************/
DECLARAR_ARRAY_GP(configPowerModule_t, NUM_MAX_POWER_MODULE, configPowerModule);
 8027b28:	b480      	push	{r7}
 8027b2a:	b083      	sub	sp, #12
 8027b2c:	af00      	add	r7, sp, #0
 8027b2e:	6078      	str	r0, [r7, #4]
 8027b30:	687a      	ldr	r2, [r7, #4]
 8027b32:	4613      	mov	r3, r2
 8027b34:	009b      	lsls	r3, r3, #2
 8027b36:	4413      	add	r3, r2
 8027b38:	005b      	lsls	r3, r3, #1
 8027b3a:	4a04      	ldr	r2, [pc, #16]	; (8027b4c <configPowerModule+0x24>)
 8027b3c:	4413      	add	r3, r2
 8027b3e:	4618      	mov	r0, r3
 8027b40:	370c      	adds	r7, #12
 8027b42:	46bd      	mov	sp, r7
 8027b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b48:	4770      	bx	lr
 8027b4a:	bf00      	nop
 8027b4c:	2000a8cc 	.word	0x2000a8cc

08027b50 <iniciarPowerModule>:
**  Descripcion:    Realiza todas las inicializaciones de la placa
**  Parametros:     Ninguno
**  Retorno:        True si ok
****************************************************************************************/
bool iniciarPowerModule(void)
{
 8027b50:	b580      	push	{r7, lr}
 8027b52:	b082      	sub	sp, #8
 8027b54:	af00      	add	r7, sp, #0
    bool estado[NUM_MAX_POWER_MODULE];

	ajustarFrecuenciaEjecucionTarea(TAREA_LEER_POWER_MODULE, PERIODO_TAREA_HZ_SCHEDULER(configPowerModule(0)->frecLeer));
 8027b56:	2000      	movs	r0, #0
 8027b58:	f7ff ffe6 	bl	8027b28 <configPowerModule>
 8027b5c:	4603      	mov	r3, r0
 8027b5e:	88db      	ldrh	r3, [r3, #6]
 8027b60:	461a      	mov	r2, r3
 8027b62:	4b97      	ldr	r3, [pc, #604]	; (8027dc0 <iniciarPowerModule+0x270>)
 8027b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8027b68:	4619      	mov	r1, r3
 8027b6a:	2003      	movs	r0, #3
 8027b6c:	f7f7 fa00 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>
	ajustarFrecuenciaEjecucionTarea(TAREA_ACTUALIZAR_POWER_MODULE, PERIODO_TAREA_HZ_SCHEDULER(configPowerModule(0)->frecActualizar));
 8027b70:	2000      	movs	r0, #0
 8027b72:	f7ff ffd9 	bl	8027b28 <configPowerModule>
 8027b76:	4603      	mov	r3, r0
 8027b78:	891b      	ldrh	r3, [r3, #8]
 8027b7a:	461a      	mov	r2, r3
 8027b7c:	4b90      	ldr	r3, [pc, #576]	; (8027dc0 <iniciarPowerModule+0x270>)
 8027b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8027b82:	4619      	mov	r1, r3
 8027b84:	2004      	movs	r0, #4
 8027b86:	f7f7 f9f3 	bl	801ef70 <ajustarFrecuenciaEjecucionTarea>

	// Reset de las variables del driver
    memset(&powerModuleGen, 0, sizeof(powerModuleGen_t));
 8027b8a:	2210      	movs	r2, #16
 8027b8c:	2100      	movs	r1, #0
 8027b8e:	488d      	ldr	r0, [pc, #564]	; (8027dc4 <iniciarPowerModule+0x274>)
 8027b90:	f00d fb86 	bl	80352a0 <memset>

    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027b94:	2300      	movs	r3, #0
 8027b96:	71fb      	strb	r3, [r7, #7]
 8027b98:	e0d8      	b.n	8027d4c <iniciarPowerModule+0x1fc>
    	estado[i] = true;
 8027b9a:	79fb      	ldrb	r3, [r7, #7]
 8027b9c:	3308      	adds	r3, #8
 8027b9e:	443b      	add	r3, r7
 8027ba0:	2201      	movs	r2, #1
 8027ba2:	f803 2c04 	strb.w	r2, [r3, #-4]

        if (configPowerModule(i)->tipo == POWER_MODULE_NINGUNO)
 8027ba6:	79fb      	ldrb	r3, [r7, #7]
 8027ba8:	4618      	mov	r0, r3
 8027baa:	f7ff ffbd 	bl	8027b28 <configPowerModule>
 8027bae:	4603      	mov	r3, r0
 8027bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8027bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027bb8:	f000 80c4 	beq.w	8027d44 <iniciarPowerModule+0x1f4>
            continue;

    	// Reset de las variables del driver
        memset(&powerModule[i], 0, sizeof(powerModule[i]));
 8027bbc:	79fa      	ldrb	r2, [r7, #7]
 8027bbe:	4613      	mov	r3, r2
 8027bc0:	00db      	lsls	r3, r3, #3
 8027bc2:	1a9b      	subs	r3, r3, r2
 8027bc4:	009b      	lsls	r3, r3, #2
 8027bc6:	4a80      	ldr	r2, [pc, #512]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027bc8:	4413      	add	r3, r2
 8027bca:	221c      	movs	r2, #28
 8027bcc:	2100      	movs	r1, #0
 8027bce:	4618      	mov	r0, r3
 8027bd0:	f00d fb66 	bl	80352a0 <memset>

    	powerModule[i].numPM = i;
 8027bd4:	79fa      	ldrb	r2, [r7, #7]
 8027bd6:	497c      	ldr	r1, [pc, #496]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027bd8:	4613      	mov	r3, r2
 8027bda:	00db      	lsls	r3, r3, #3
 8027bdc:	1a9b      	subs	r3, r3, r2
 8027bde:	009b      	lsls	r3, r3, #2
 8027be0:	440b      	add	r3, r1
 8027be2:	79fa      	ldrb	r2, [r7, #7]
 8027be4:	701a      	strb	r2, [r3, #0]
        powerModule[i].tipo = configPowerModule(i)->tipo;
 8027be6:	79fb      	ldrb	r3, [r7, #7]
 8027be8:	4618      	mov	r0, r3
 8027bea:	f7ff ff9d 	bl	8027b28 <configPowerModule>
 8027bee:	4603      	mov	r3, r0
 8027bf0:	79fa      	ldrb	r2, [r7, #7]
 8027bf2:	f993 0000 	ldrsb.w	r0, [r3]
 8027bf6:	4974      	ldr	r1, [pc, #464]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027bf8:	4613      	mov	r3, r2
 8027bfa:	00db      	lsls	r3, r3, #3
 8027bfc:	1a9b      	subs	r3, r3, r2
 8027bfe:	009b      	lsls	r3, r3, #2
 8027c00:	440b      	add	r3, r1
 8027c02:	3301      	adds	r3, #1
 8027c04:	4602      	mov	r2, r0
 8027c06:	701a      	strb	r2, [r3, #0]

        switch (configPowerModule(i)->tipo) {
 8027c08:	79fb      	ldrb	r3, [r7, #7]
 8027c0a:	4618      	mov	r0, r3
 8027c0c:	f7ff ff8c 	bl	8027b28 <configPowerModule>
 8027c10:	4603      	mov	r3, r0
 8027c12:	f993 3000 	ldrsb.w	r3, [r3]
 8027c16:	2b00      	cmp	r3, #0
 8027c18:	d002      	beq.n	8027c20 <iniciarPowerModule+0xd0>
 8027c1a:	2b01      	cmp	r3, #1
 8027c1c:	d022      	beq.n	8027c64 <iniciarPowerModule+0x114>
 8027c1e:	e084      	b.n	8027d2a <iniciarPowerModule+0x1da>
            case POWER_MODULE_ANALOGICO:
                if (!iniciadoADC() && !iniciarADC())
 8027c20:	f7ec fe2a 	bl	8014878 <iniciadoADC>
 8027c24:	4603      	mov	r3, r0
 8027c26:	f083 0301 	eor.w	r3, r3, #1
 8027c2a:	b2db      	uxtb	r3, r3
 8027c2c:	2b00      	cmp	r3, #0
 8027c2e:	d00e      	beq.n	8027c4e <iniciarPowerModule+0xfe>
 8027c30:	f7ec fdb4 	bl	801479c <iniciarADC>
 8027c34:	4603      	mov	r3, r0
 8027c36:	f083 0301 	eor.w	r3, r3, #1
 8027c3a:	b2db      	uxtb	r3, r3
 8027c3c:	2b00      	cmp	r3, #0
 8027c3e:	d006      	beq.n	8027c4e <iniciarPowerModule+0xfe>
                    estado[i] = false;
 8027c40:	79fb      	ldrb	r3, [r7, #7]
 8027c42:	3308      	adds	r3, #8
 8027c44:	443b      	add	r3, r7
 8027c46:	2200      	movs	r2, #0
 8027c48:	f803 2c04 	strb.w	r2, [r3, #-4]
                else
                	powerModule[i].iniciado = true;

                break;
 8027c4c:	e07b      	b.n	8027d46 <iniciarPowerModule+0x1f6>
                	powerModule[i].iniciado = true;
 8027c4e:	79fa      	ldrb	r2, [r7, #7]
 8027c50:	495d      	ldr	r1, [pc, #372]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027c52:	4613      	mov	r3, r2
 8027c54:	00db      	lsls	r3, r3, #3
 8027c56:	1a9b      	subs	r3, r3, r2
 8027c58:	009b      	lsls	r3, r3, #2
 8027c5a:	440b      	add	r3, r1
 8027c5c:	3305      	adds	r3, #5
 8027c5e:	2201      	movs	r2, #1
 8027c60:	701a      	strb	r2, [r3, #0]
                break;
 8027c62:	e070      	b.n	8027d46 <iniciarPowerModule+0x1f6>

            case POWER_MODULE_I2C:
            	powerModule[i].bus.tipo = BUS_I2C;
 8027c64:	79fa      	ldrb	r2, [r7, #7]
 8027c66:	4958      	ldr	r1, [pc, #352]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027c68:	4613      	mov	r3, r2
 8027c6a:	00db      	lsls	r3, r3, #3
 8027c6c:	1a9b      	subs	r3, r3, r2
 8027c6e:	009b      	lsls	r3, r3, #2
 8027c70:	440b      	add	r3, r1
 8027c72:	3302      	adds	r3, #2
 8027c74:	2200      	movs	r2, #0
 8027c76:	701a      	strb	r2, [r3, #0]
            	powerModule[i].bus.bus_u.i2c.numI2C = configPowerModule(i)->dispBus;
 8027c78:	79fb      	ldrb	r3, [r7, #7]
 8027c7a:	4618      	mov	r0, r3
 8027c7c:	f7ff ff54 	bl	8027b28 <configPowerModule>
 8027c80:	4603      	mov	r3, r0
 8027c82:	78db      	ldrb	r3, [r3, #3]
 8027c84:	79fa      	ldrb	r2, [r7, #7]
 8027c86:	b258      	sxtb	r0, r3
 8027c88:	494f      	ldr	r1, [pc, #316]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027c8a:	4613      	mov	r3, r2
 8027c8c:	00db      	lsls	r3, r3, #3
 8027c8e:	1a9b      	subs	r3, r3, r2
 8027c90:	009b      	lsls	r3, r3, #2
 8027c92:	440b      	add	r3, r1
 8027c94:	3303      	adds	r3, #3
 8027c96:	4602      	mov	r2, r0
 8027c98:	701a      	strb	r2, [r3, #0]
            	powerModule[i].bus.bus_u.i2c.dir = configPowerModule(i)->dirI2C;
 8027c9a:	79fb      	ldrb	r3, [r7, #7]
 8027c9c:	4618      	mov	r0, r3
 8027c9e:	f7ff ff43 	bl	8027b28 <configPowerModule>
 8027ca2:	4603      	mov	r3, r0
 8027ca4:	79fa      	ldrb	r2, [r7, #7]
 8027ca6:	7918      	ldrb	r0, [r3, #4]
 8027ca8:	4947      	ldr	r1, [pc, #284]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027caa:	4613      	mov	r3, r2
 8027cac:	00db      	lsls	r3, r3, #3
 8027cae:	1a9b      	subs	r3, r3, r2
 8027cb0:	009b      	lsls	r3, r3, #2
 8027cb2:	440b      	add	r3, r1
 8027cb4:	3304      	adds	r3, #4
 8027cb6:	4602      	mov	r2, r0
 8027cb8:	701a      	strb	r2, [r3, #0]

                // Iniciamos el bus si es necesario
                if (!i2cIniciado(powerModule[i].bus.bus_u.i2c.numI2C) && !iniciarI2C(powerModule[i].bus.bus_u.i2c.numI2C))
 8027cba:	79fa      	ldrb	r2, [r7, #7]
 8027cbc:	4942      	ldr	r1, [pc, #264]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027cbe:	4613      	mov	r3, r2
 8027cc0:	00db      	lsls	r3, r3, #3
 8027cc2:	1a9b      	subs	r3, r3, r2
 8027cc4:	009b      	lsls	r3, r3, #2
 8027cc6:	440b      	add	r3, r1
 8027cc8:	3303      	adds	r3, #3
 8027cca:	f993 3000 	ldrsb.w	r3, [r3]
 8027cce:	4618      	mov	r0, r3
 8027cd0:	f7ee f87e 	bl	8015dd0 <i2cIniciado>
 8027cd4:	4603      	mov	r3, r0
 8027cd6:	f083 0301 	eor.w	r3, r3, #1
 8027cda:	b2db      	uxtb	r3, r3
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	d019      	beq.n	8027d14 <iniciarPowerModule+0x1c4>
 8027ce0:	79fa      	ldrb	r2, [r7, #7]
 8027ce2:	4939      	ldr	r1, [pc, #228]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027ce4:	4613      	mov	r3, r2
 8027ce6:	00db      	lsls	r3, r3, #3
 8027ce8:	1a9b      	subs	r3, r3, r2
 8027cea:	009b      	lsls	r3, r3, #2
 8027cec:	440b      	add	r3, r1
 8027cee:	3303      	adds	r3, #3
 8027cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8027cf4:	4618      	mov	r0, r3
 8027cf6:	f7ee f827 	bl	8015d48 <iniciarI2C>
 8027cfa:	4603      	mov	r3, r0
 8027cfc:	f083 0301 	eor.w	r3, r3, #1
 8027d00:	b2db      	uxtb	r3, r3
 8027d02:	2b00      	cmp	r3, #0
 8027d04:	d006      	beq.n	8027d14 <iniciarPowerModule+0x1c4>
                    estado[i] = false;
 8027d06:	79fb      	ldrb	r3, [r7, #7]
 8027d08:	3308      	adds	r3, #8
 8027d0a:	443b      	add	r3, r7
 8027d0c:	2200      	movs	r2, #0
 8027d0e:	f803 2c04 	strb.w	r2, [r3, #-4]
                else
                    powerModule[i].iniciado = true;

                break;
 8027d12:	e018      	b.n	8027d46 <iniciarPowerModule+0x1f6>
                    powerModule[i].iniciado = true;
 8027d14:	79fa      	ldrb	r2, [r7, #7]
 8027d16:	492c      	ldr	r1, [pc, #176]	; (8027dc8 <iniciarPowerModule+0x278>)
 8027d18:	4613      	mov	r3, r2
 8027d1a:	00db      	lsls	r3, r3, #3
 8027d1c:	1a9b      	subs	r3, r3, r2
 8027d1e:	009b      	lsls	r3, r3, #2
 8027d20:	440b      	add	r3, r1
 8027d22:	3305      	adds	r3, #5
 8027d24:	2201      	movs	r2, #1
 8027d26:	701a      	strb	r2, [r3, #0]
                break;
 8027d28:	e00d      	b.n	8027d46 <iniciarPowerModule+0x1f6>

            default:
                estado[i] = false;
 8027d2a:	79fb      	ldrb	r3, [r7, #7]
 8027d2c:	3308      	adds	r3, #8
 8027d2e:	443b      	add	r3, r7
 8027d30:	2200      	movs	r2, #0
 8027d32:	f803 2c04 	strb.w	r2, [r3, #-4]
#ifdef DEBUG
                printf("Fallo en la definicion del Power Module %u\n", i + 1);
 8027d36:	79fb      	ldrb	r3, [r7, #7]
 8027d38:	3301      	adds	r3, #1
 8027d3a:	4619      	mov	r1, r3
 8027d3c:	4823      	ldr	r0, [pc, #140]	; (8027dcc <iniciarPowerModule+0x27c>)
 8027d3e:	f00d ffd9 	bl	8035cf4 <iprintf>
#endif
                break;
 8027d42:	e000      	b.n	8027d46 <iniciarPowerModule+0x1f6>
            continue;
 8027d44:	bf00      	nop
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027d46:	79fb      	ldrb	r3, [r7, #7]
 8027d48:	3301      	adds	r3, #1
 8027d4a:	71fb      	strb	r3, [r7, #7]
 8027d4c:	79fb      	ldrb	r3, [r7, #7]
 8027d4e:	2b01      	cmp	r3, #1
 8027d50:	f67f af23 	bls.w	8027b9a <iniciarPowerModule+0x4a>
        }
    }

    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027d54:	2300      	movs	r3, #0
 8027d56:	71bb      	strb	r3, [r7, #6]
 8027d58:	e02a      	b.n	8027db0 <iniciarPowerModule+0x260>
        if (estado[i] == false) {
 8027d5a:	79bb      	ldrb	r3, [r7, #6]
 8027d5c:	3308      	adds	r3, #8
 8027d5e:	443b      	add	r3, r7
 8027d60:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8027d64:	f083 0301 	eor.w	r3, r3, #1
 8027d68:	b2db      	uxtb	r3, r3
 8027d6a:	2b00      	cmp	r3, #0
 8027d6c:	d007      	beq.n	8027d7e <iniciarPowerModule+0x22e>
#ifdef DEBUG
            printf("Fallo en la inicializacion del Power Module %u\n", i + 1);
 8027d6e:	79bb      	ldrb	r3, [r7, #6]
 8027d70:	3301      	adds	r3, #1
 8027d72:	4619      	mov	r1, r3
 8027d74:	4816      	ldr	r0, [pc, #88]	; (8027dd0 <iniciarPowerModule+0x280>)
 8027d76:	f00d ffbd 	bl	8035cf4 <iprintf>
#endif
            return false;
 8027d7a:	2300      	movs	r3, #0
 8027d7c:	e01c      	b.n	8027db8 <iniciarPowerModule+0x268>
        }
        else {
            // Ajuste de los filtros
            ajustarFiltroMediaMovil(&filtroTension[i], TAM_FILTRO_TENSION);
 8027d7e:	79ba      	ldrb	r2, [r7, #6]
 8027d80:	4613      	mov	r3, r2
 8027d82:	011b      	lsls	r3, r3, #4
 8027d84:	4413      	add	r3, r2
 8027d86:	009b      	lsls	r3, r3, #2
 8027d88:	4a12      	ldr	r2, [pc, #72]	; (8027dd4 <iniciarPowerModule+0x284>)
 8027d8a:	4413      	add	r3, r2
 8027d8c:	2108      	movs	r1, #8
 8027d8e:	4618      	mov	r0, r3
 8027d90:	f7f4 f98a 	bl	801c0a8 <ajustarFiltroMediaMovil>
            ajustarFiltroMediaMovil(&filtroCorriente[i], TAM_FILTRO_CORRIENTE);
 8027d94:	79ba      	ldrb	r2, [r7, #6]
 8027d96:	4613      	mov	r3, r2
 8027d98:	011b      	lsls	r3, r3, #4
 8027d9a:	4413      	add	r3, r2
 8027d9c:	009b      	lsls	r3, r3, #2
 8027d9e:	4a0e      	ldr	r2, [pc, #56]	; (8027dd8 <iniciarPowerModule+0x288>)
 8027da0:	4413      	add	r3, r2
 8027da2:	2108      	movs	r1, #8
 8027da4:	4618      	mov	r0, r3
 8027da6:	f7f4 f97f 	bl	801c0a8 <ajustarFiltroMediaMovil>
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027daa:	79bb      	ldrb	r3, [r7, #6]
 8027dac:	3301      	adds	r3, #1
 8027dae:	71bb      	strb	r3, [r7, #6]
 8027db0:	79bb      	ldrb	r3, [r7, #6]
 8027db2:	2b01      	cmp	r3, #1
 8027db4:	d9d1      	bls.n	8027d5a <iniciarPowerModule+0x20a>
        }
    }

    return true;
 8027db6:	2301      	movs	r3, #1
}
 8027db8:	4618      	mov	r0, r3
 8027dba:	3708      	adds	r7, #8
 8027dbc:	46bd      	mov	sp, r7
 8027dbe:	bd80      	pop	{r7, pc}
 8027dc0:	000f4240 	.word	0x000f4240
 8027dc4:	2000cb08 	.word	0x2000cb08
 8027dc8:	2000cad0 	.word	0x2000cad0
 8027dcc:	0803acc4 	.word	0x0803acc4
 8027dd0:	0803acf0 	.word	0x0803acf0
 8027dd4:	2000cb38 	.word	0x2000cb38
 8027dd8:	2000cbc0 	.word	0x2000cbc0

08027ddc <leerPowerModule>:
**  Descripcion:    Actualiza todos los Power Module
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void leerPowerModule(uint32_t tiempoActual)
{
 8027ddc:	b580      	push	{r7, lr}
 8027dde:	b086      	sub	sp, #24
 8027de0:	af00      	add	r7, sp, #0
 8027de2:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    float tensionAcum = 0, corrienteAcum = 0;
 8027de4:	f04f 0300 	mov.w	r3, #0
 8027de8:	617b      	str	r3, [r7, #20]
 8027dea:	f04f 0300 	mov.w	r3, #0
 8027dee:	613b      	str	r3, [r7, #16]
    uint8_t numDriversOp = 0;
 8027df0:	2300      	movs	r3, #0
 8027df2:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027df4:	2300      	movs	r3, #0
 8027df6:	73bb      	strb	r3, [r7, #14]
 8027df8:	e045      	b.n	8027e86 <leerPowerModule+0xaa>
        if (powerModule[i].iniciado) {
 8027dfa:	7bba      	ldrb	r2, [r7, #14]
 8027dfc:	4941      	ldr	r1, [pc, #260]	; (8027f04 <leerPowerModule+0x128>)
 8027dfe:	4613      	mov	r3, r2
 8027e00:	00db      	lsls	r3, r3, #3
 8027e02:	1a9b      	subs	r3, r3, r2
 8027e04:	009b      	lsls	r3, r3, #2
 8027e06:	440b      	add	r3, r1
 8027e08:	3305      	adds	r3, #5
 8027e0a:	781b      	ldrb	r3, [r3, #0]
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d037      	beq.n	8027e80 <leerPowerModule+0xa4>
            leerDriverPowerModule(&powerModule[i]);
 8027e10:	7bba      	ldrb	r2, [r7, #14]
 8027e12:	4613      	mov	r3, r2
 8027e14:	00db      	lsls	r3, r3, #3
 8027e16:	1a9b      	subs	r3, r3, r2
 8027e18:	009b      	lsls	r3, r3, #2
 8027e1a:	4a3a      	ldr	r2, [pc, #232]	; (8027f04 <leerPowerModule+0x128>)
 8027e1c:	4413      	add	r3, r2
 8027e1e:	4618      	mov	r0, r3
 8027e20:	f000 f878 	bl	8027f14 <leerDriverPowerModule>

            // Mezclado de las medidas
            if (powerModule[i].operativo) {
 8027e24:	7bba      	ldrb	r2, [r7, #14]
 8027e26:	4937      	ldr	r1, [pc, #220]	; (8027f04 <leerPowerModule+0x128>)
 8027e28:	4613      	mov	r3, r2
 8027e2a:	00db      	lsls	r3, r3, #3
 8027e2c:	1a9b      	subs	r3, r3, r2
 8027e2e:	009b      	lsls	r3, r3, #2
 8027e30:	440b      	add	r3, r1
 8027e32:	3307      	adds	r3, #7
 8027e34:	781b      	ldrb	r3, [r3, #0]
 8027e36:	2b00      	cmp	r3, #0
 8027e38:	d022      	beq.n	8027e80 <leerPowerModule+0xa4>
                tensionAcum = tensionAcum + powerModule[i].tension;
 8027e3a:	7bba      	ldrb	r2, [r7, #14]
 8027e3c:	4931      	ldr	r1, [pc, #196]	; (8027f04 <leerPowerModule+0x128>)
 8027e3e:	4613      	mov	r3, r2
 8027e40:	00db      	lsls	r3, r3, #3
 8027e42:	1a9b      	subs	r3, r3, r2
 8027e44:	009b      	lsls	r3, r3, #2
 8027e46:	440b      	add	r3, r1
 8027e48:	3314      	adds	r3, #20
 8027e4a:	edd3 7a00 	vldr	s15, [r3]
 8027e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8027e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027e56:	edc7 7a05 	vstr	s15, [r7, #20]
                corrienteAcum = corrienteAcum + powerModule[i].corriente;
 8027e5a:	7bba      	ldrb	r2, [r7, #14]
 8027e5c:	4929      	ldr	r1, [pc, #164]	; (8027f04 <leerPowerModule+0x128>)
 8027e5e:	4613      	mov	r3, r2
 8027e60:	00db      	lsls	r3, r3, #3
 8027e62:	1a9b      	subs	r3, r3, r2
 8027e64:	009b      	lsls	r3, r3, #2
 8027e66:	440b      	add	r3, r1
 8027e68:	3318      	adds	r3, #24
 8027e6a:	edd3 7a00 	vldr	s15, [r3]
 8027e6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8027e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027e76:	edc7 7a04 	vstr	s15, [r7, #16]
                numDriversOp++;
 8027e7a:	7bfb      	ldrb	r3, [r7, #15]
 8027e7c:	3301      	adds	r3, #1
 8027e7e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 8027e80:	7bbb      	ldrb	r3, [r7, #14]
 8027e82:	3301      	adds	r3, #1
 8027e84:	73bb      	strb	r3, [r7, #14]
 8027e86:	7bbb      	ldrb	r3, [r7, #14]
 8027e88:	2b01      	cmp	r3, #1
 8027e8a:	d9b6      	bls.n	8027dfa <leerPowerModule+0x1e>
            }
        }
    }

    powerModuleGen.tension = tensionAcum / numDriversOp;
 8027e8c:	7bfb      	ldrb	r3, [r7, #15]
 8027e8e:	ee07 3a90 	vmov	s15, r3
 8027e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027e96:	edd7 6a05 	vldr	s13, [r7, #20]
 8027e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027e9e:	4b1a      	ldr	r3, [pc, #104]	; (8027f08 <leerPowerModule+0x12c>)
 8027ea0:	edc3 7a00 	vstr	s15, [r3]
    powerModuleGen.corriente = corrienteAcum / numDriversOp;
 8027ea4:	7bfb      	ldrb	r3, [r7, #15]
 8027ea6:	ee07 3a90 	vmov	s15, r3
 8027eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027eae:	edd7 6a04 	vldr	s13, [r7, #16]
 8027eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027eb6:	4b14      	ldr	r3, [pc, #80]	; (8027f08 <leerPowerModule+0x12c>)
 8027eb8:	edc3 7a01 	vstr	s15, [r3, #4]
    powerModuleGen.potencia = powerModuleGen.tension * powerModuleGen.corriente;
 8027ebc:	4b12      	ldr	r3, [pc, #72]	; (8027f08 <leerPowerModule+0x12c>)
 8027ebe:	ed93 7a00 	vldr	s14, [r3]
 8027ec2:	4b11      	ldr	r3, [pc, #68]	; (8027f08 <leerPowerModule+0x12c>)
 8027ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8027ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027ecc:	4b0e      	ldr	r3, [pc, #56]	; (8027f08 <leerPowerModule+0x12c>)
 8027ece:	edc3 7a02 	vstr	s15, [r3, #8]
    powerModuleGen.energia = powerModuleGen.potencia * tiempoActual / 1000000 / 3600;  //Wh
 8027ed2:	4b0d      	ldr	r3, [pc, #52]	; (8027f08 <leerPowerModule+0x12c>)
 8027ed4:	ed93 7a02 	vldr	s14, [r3, #8]
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	ee07 3a90 	vmov	s15, r3
 8027ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8027ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027ee6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8027f0c <leerPowerModule+0x130>
 8027eea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8027eee:	eddf 6a08 	vldr	s13, [pc, #32]	; 8027f10 <leerPowerModule+0x134>
 8027ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8027ef6:	4b04      	ldr	r3, [pc, #16]	; (8027f08 <leerPowerModule+0x12c>)
 8027ef8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8027efc:	bf00      	nop
 8027efe:	3718      	adds	r7, #24
 8027f00:	46bd      	mov	sp, r7
 8027f02:	bd80      	pop	{r7, pc}
 8027f04:	2000cad0 	.word	0x2000cad0
 8027f08:	2000cb08 	.word	0x2000cb08
 8027f0c:	49742400 	.word	0x49742400
 8027f10:	45610000 	.word	0x45610000

08027f14 <leerDriverPowerModule>:
**  Descripcion:    Lee el power module
**  Parametros:     Power module a leer
**  Retorno:        Ninguno
****************************************************************************************/
void leerDriverPowerModule(powerModule_t *dPowerModule)
{
 8027f14:	b580      	push	{r7, lr}
 8027f16:	b08a      	sub	sp, #40	; 0x28
 8027f18:	af00      	add	r7, sp, #0
 8027f1a:	6078      	str	r0, [r7, #4]
    float tensionRaw = 0, corrienteRaw = 0;
 8027f1c:	f04f 0300 	mov.w	r3, #0
 8027f20:	627b      	str	r3, [r7, #36]	; 0x24
 8027f22:	f04f 0300 	mov.w	r3, #0
 8027f26:	623b      	str	r3, [r7, #32]
    float tensionFilt, corrienteFilt;
    float aV, aI;
    uint8_t cuentaV, cuentaI;

    // Se comprueba si el power module esta conectado
    if (!dPowerModule->conectado) {
 8027f28:	687b      	ldr	r3, [r7, #4]
 8027f2a:	799b      	ldrb	r3, [r3, #6]
 8027f2c:	f083 0301 	eor.w	r3, r3, #1
 8027f30:	b2db      	uxtb	r3, r3
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	d008      	beq.n	8027f48 <leerDriverPowerModule+0x34>
        dPowerModule->tension = 0;
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	f04f 0200 	mov.w	r2, #0
 8027f3c:	615a      	str	r2, [r3, #20]
        dPowerModule->corriente = 0;
 8027f3e:	687b      	ldr	r3, [r7, #4]
 8027f40:	f04f 0200 	mov.w	r2, #0
 8027f44:	619a      	str	r2, [r3, #24]
        return;
 8027f46:	e08b      	b.n	8028060 <leerDriverPowerModule+0x14c>
    }

    // Gestion de los acumuladores
    if (acumuladorV[dPowerModule->numPM].contador == 0)
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	781b      	ldrb	r3, [r3, #0]
 8027f4c:	4a46      	ldr	r2, [pc, #280]	; (8028068 <leerDriverPowerModule+0x154>)
 8027f4e:	00db      	lsls	r3, r3, #3
 8027f50:	4413      	add	r3, r2
 8027f52:	791b      	ldrb	r3, [r3, #4]
 8027f54:	2b00      	cmp	r3, #0
 8027f56:	f000 8082 	beq.w	802805e <leerDriverPowerModule+0x14a>
        return;

    aV = acumuladorV[dPowerModule->numPM].acumulado;
 8027f5a:	687b      	ldr	r3, [r7, #4]
 8027f5c:	781b      	ldrb	r3, [r3, #0]
 8027f5e:	4a42      	ldr	r2, [pc, #264]	; (8028068 <leerDriverPowerModule+0x154>)
 8027f60:	00db      	lsls	r3, r3, #3
 8027f62:	4413      	add	r3, r2
 8027f64:	681b      	ldr	r3, [r3, #0]
 8027f66:	61fb      	str	r3, [r7, #28]
    aI = acumuladorI[dPowerModule->numPM].acumulado;
 8027f68:	687b      	ldr	r3, [r7, #4]
 8027f6a:	781b      	ldrb	r3, [r3, #0]
 8027f6c:	4a3f      	ldr	r2, [pc, #252]	; (802806c <leerDriverPowerModule+0x158>)
 8027f6e:	00db      	lsls	r3, r3, #3
 8027f70:	4413      	add	r3, r2
 8027f72:	681b      	ldr	r3, [r3, #0]
 8027f74:	61bb      	str	r3, [r7, #24]
    cuentaV = acumuladorV[dPowerModule->numPM].contador;
 8027f76:	687b      	ldr	r3, [r7, #4]
 8027f78:	781b      	ldrb	r3, [r3, #0]
 8027f7a:	4a3b      	ldr	r2, [pc, #236]	; (8028068 <leerDriverPowerModule+0x154>)
 8027f7c:	00db      	lsls	r3, r3, #3
 8027f7e:	4413      	add	r3, r2
 8027f80:	791b      	ldrb	r3, [r3, #4]
 8027f82:	75fb      	strb	r3, [r7, #23]
    cuentaI = acumuladorI[dPowerModule->numPM].contador;
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	781b      	ldrb	r3, [r3, #0]
 8027f88:	4a38      	ldr	r2, [pc, #224]	; (802806c <leerDriverPowerModule+0x158>)
 8027f8a:	00db      	lsls	r3, r3, #3
 8027f8c:	4413      	add	r3, r2
 8027f8e:	791b      	ldrb	r3, [r3, #4]
 8027f90:	75bb      	strb	r3, [r7, #22]
    memset(&acumuladorV[dPowerModule->numPM], 0, sizeof(acumuladorV[dPowerModule->numPM]));
 8027f92:	687b      	ldr	r3, [r7, #4]
 8027f94:	781b      	ldrb	r3, [r3, #0]
 8027f96:	00db      	lsls	r3, r3, #3
 8027f98:	4a33      	ldr	r2, [pc, #204]	; (8028068 <leerDriverPowerModule+0x154>)
 8027f9a:	4413      	add	r3, r2
 8027f9c:	2208      	movs	r2, #8
 8027f9e:	2100      	movs	r1, #0
 8027fa0:	4618      	mov	r0, r3
 8027fa2:	f00d f97d 	bl	80352a0 <memset>
    memset(&acumuladorI[dPowerModule->numPM], 0, sizeof(acumuladorI[dPowerModule->numPM]));
 8027fa6:	687b      	ldr	r3, [r7, #4]
 8027fa8:	781b      	ldrb	r3, [r3, #0]
 8027faa:	00db      	lsls	r3, r3, #3
 8027fac:	4a2f      	ldr	r2, [pc, #188]	; (802806c <leerDriverPowerModule+0x158>)
 8027fae:	4413      	add	r3, r2
 8027fb0:	2208      	movs	r2, #8
 8027fb2:	2100      	movs	r1, #0
 8027fb4:	4618      	mov	r0, r3
 8027fb6:	f00d f973 	bl	80352a0 <memset>

    // Se obtiene la medida en raw
    if (cuentaV != 0)
 8027fba:	7dfb      	ldrb	r3, [r7, #23]
 8027fbc:	2b00      	cmp	r3, #0
 8027fbe:	d00a      	beq.n	8027fd6 <leerDriverPowerModule+0xc2>
    	tensionRaw = (aV) / cuentaV;
 8027fc0:	7dfb      	ldrb	r3, [r7, #23]
 8027fc2:	ee07 3a90 	vmov	s15, r3
 8027fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8027fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027fd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    if (cuentaI != 0)
 8027fd6:	7dbb      	ldrb	r3, [r7, #22]
 8027fd8:	2b00      	cmp	r3, #0
 8027fda:	d00a      	beq.n	8027ff2 <leerDriverPowerModule+0xde>
    	corrienteRaw = (aI) / cuentaI;
 8027fdc:	7dbb      	ldrb	r3, [r7, #22]
 8027fde:	ee07 3a90 	vmov	s15, r3
 8027fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027fe6:	edd7 6a06 	vldr	s13, [r7, #24]
 8027fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027fee:	edc7 7a08 	vstr	s15, [r7, #32]

    // Actualizacion de la estructura del power module
    tensionFilt = actualizarFiltroMediaMovil(filtroTension, tensionRaw);
 8027ff2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8027ff6:	481e      	ldr	r0, [pc, #120]	; (8028070 <leerDriverPowerModule+0x15c>)
 8027ff8:	f7f4 f891 	bl	801c11e <actualizarFiltroMediaMovil>
 8027ffc:	ed87 0a04 	vstr	s0, [r7, #16]
    corrienteFilt = actualizarFiltroMediaMovil(filtroTension, corrienteRaw);
 8028000:	ed97 0a08 	vldr	s0, [r7, #32]
 8028004:	481a      	ldr	r0, [pc, #104]	; (8028070 <leerDriverPowerModule+0x15c>)
 8028006:	f7f4 f88a 	bl	801c11e <actualizarFiltroMediaMovil>
 802800a:	ed87 0a03 	vstr	s0, [r7, #12]

    // Actualizacion del timming
    if (dPowerModule->tension != tensionFilt || dPowerModule->corriente != corrienteFilt)
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	edd3 7a05 	vldr	s15, [r3, #20]
 8028014:	ed97 7a04 	vldr	s14, [r7, #16]
 8028018:	eeb4 7a67 	vcmp.f32	s14, s15
 802801c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028020:	d109      	bne.n	8028036 <leerDriverPowerModule+0x122>
 8028022:	687b      	ldr	r3, [r7, #4]
 8028024:	edd3 7a06 	vldr	s15, [r3, #24]
 8028028:	ed97 7a03 	vldr	s14, [r7, #12]
 802802c:	eeb4 7a67 	vcmp.f32	s14, s15
 8028030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028034:	d004      	beq.n	8028040 <leerDriverPowerModule+0x12c>
        dPowerModule->timing.ultimoCambio = micros();
 8028036:	f7ef fd4f 	bl	8017ad8 <micros>
 802803a:	4602      	mov	r2, r0
 802803c:	687b      	ldr	r3, [r7, #4]
 802803e:	611a      	str	r2, [r3, #16]

    // Guardado de la medida
    dPowerModule->tension = tensionFilt;
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	693a      	ldr	r2, [r7, #16]
 8028044:	615a      	str	r2, [r3, #20]
    dPowerModule->corriente = corrienteFilt;
 8028046:	687b      	ldr	r3, [r7, #4]
 8028048:	68fa      	ldr	r2, [r7, #12]
 802804a:	619a      	str	r2, [r3, #24]
    dPowerModule->timing.ultimaMedida = micros();
 802804c:	f7ef fd44 	bl	8017ad8 <micros>
 8028050:	4602      	mov	r2, r0
 8028052:	687b      	ldr	r3, [r7, #4]
 8028054:	60da      	str	r2, [r3, #12]

    actualizarPowerModuleOperativo(dPowerModule);
 8028056:	6878      	ldr	r0, [r7, #4]
 8028058:	f000 f944 	bl	80282e4 <actualizarPowerModuleOperativo>
 802805c:	e000      	b.n	8028060 <leerDriverPowerModule+0x14c>
        return;
 802805e:	bf00      	nop
}
 8028060:	3728      	adds	r7, #40	; 0x28
 8028062:	46bd      	mov	sp, r7
 8028064:	bd80      	pop	{r7, pc}
 8028066:	bf00      	nop
 8028068:	2000cb18 	.word	0x2000cb18
 802806c:	2000cb28 	.word	0x2000cb28
 8028070:	2000cb38 	.word	0x2000cb38

08028074 <actualizarPowerModule>:
**  Descripcion:    Actualiza todos los Power Module
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarPowerModule(uint32_t tiempoActual)
{
 8028074:	b580      	push	{r7, lr}
 8028076:	b084      	sub	sp, #16
 8028078:	af00      	add	r7, sp, #0
 802807a:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);

    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 802807c:	2300      	movs	r3, #0
 802807e:	73fb      	strb	r3, [r7, #15]
 8028080:	e017      	b.n	80280b2 <actualizarPowerModule+0x3e>
        if (powerModule[i].iniciado)
 8028082:	7bfa      	ldrb	r2, [r7, #15]
 8028084:	490f      	ldr	r1, [pc, #60]	; (80280c4 <actualizarPowerModule+0x50>)
 8028086:	4613      	mov	r3, r2
 8028088:	00db      	lsls	r3, r3, #3
 802808a:	1a9b      	subs	r3, r3, r2
 802808c:	009b      	lsls	r3, r3, #2
 802808e:	440b      	add	r3, r1
 8028090:	3305      	adds	r3, #5
 8028092:	781b      	ldrb	r3, [r3, #0]
 8028094:	2b00      	cmp	r3, #0
 8028096:	d009      	beq.n	80280ac <actualizarPowerModule+0x38>
        	actualizarDriverPowerModule(&powerModule[i]);
 8028098:	7bfa      	ldrb	r2, [r7, #15]
 802809a:	4613      	mov	r3, r2
 802809c:	00db      	lsls	r3, r3, #3
 802809e:	1a9b      	subs	r3, r3, r2
 80280a0:	009b      	lsls	r3, r3, #2
 80280a2:	4a08      	ldr	r2, [pc, #32]	; (80280c4 <actualizarPowerModule+0x50>)
 80280a4:	4413      	add	r3, r2
 80280a6:	4618      	mov	r0, r3
 80280a8:	f000 f80e 	bl	80280c8 <actualizarDriverPowerModule>
    for (uint8_t i = 0; i < NUM_MAX_POWER_MODULE; i++) {
 80280ac:	7bfb      	ldrb	r3, [r7, #15]
 80280ae:	3301      	adds	r3, #1
 80280b0:	73fb      	strb	r3, [r7, #15]
 80280b2:	7bfb      	ldrb	r3, [r7, #15]
 80280b4:	2b01      	cmp	r3, #1
 80280b6:	d9e4      	bls.n	8028082 <actualizarPowerModule+0xe>
    }
}
 80280b8:	bf00      	nop
 80280ba:	bf00      	nop
 80280bc:	3710      	adds	r7, #16
 80280be:	46bd      	mov	sp, r7
 80280c0:	bd80      	pop	{r7, pc}
 80280c2:	bf00      	nop
 80280c4:	2000cad0 	.word	0x2000cad0

080280c8 <actualizarDriverPowerModule>:
**  Descripcion:    Actualiza el driver de un Power Module
**  Parametros:     Power module a actualizar
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarDriverPowerModule(powerModule_t *dPowerModule)
{
 80280c8:	b580      	push	{r7, lr}
 80280ca:	b084      	sub	sp, #16
 80280cc:	af00      	add	r7, sp, #0
 80280ce:	6078      	str	r0, [r7, #4]
    float tension = 0.0;
 80280d0:	f04f 0300 	mov.w	r3, #0
 80280d4:	60fb      	str	r3, [r7, #12]
    float corriente = 0.0;
 80280d6:	f04f 0300 	mov.w	r3, #0
 80280da:	60bb      	str	r3, [r7, #8]

    if (powerModule->tipo == POWER_MODULE_ANALOGICO)
 80280dc:	4b20      	ldr	r3, [pc, #128]	; (8028160 <actualizarDriverPowerModule+0x98>)
 80280de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d108      	bne.n	80280f8 <actualizarDriverPowerModule+0x30>
    	leerPowerModuleAnalogico(dPowerModule->numPM, &tension, &corriente);
 80280e6:	687b      	ldr	r3, [r7, #4]
 80280e8:	781b      	ldrb	r3, [r3, #0]
 80280ea:	f107 0208 	add.w	r2, r7, #8
 80280ee:	f107 010c 	add.w	r1, r7, #12
 80280f2:	4618      	mov	r0, r3
 80280f4:	f000 f83a 	bl	802816c <leerPowerModuleAnalogico>

    if (tension >= TENSION_MINIMA_PM_CONECTADO) {
 80280f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80280fc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8028100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8028104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028108:	db22      	blt.n	8028150 <actualizarDriverPowerModule+0x88>
        dPowerModule->conectado = true;
 802810a:	687b      	ldr	r3, [r7, #4]
 802810c:	2201      	movs	r2, #1
 802810e:	719a      	strb	r2, [r3, #6]
        dPowerModule->timing.ultimaActualizacion = micros();
 8028110:	f7ef fce2 	bl	8017ad8 <micros>
 8028114:	4602      	mov	r2, r0
 8028116:	687b      	ldr	r3, [r7, #4]
 8028118:	609a      	str	r2, [r3, #8]
        acumularLecturasPowerModule(&acumuladorV[dPowerModule->numPM], tension, 50);
 802811a:	687b      	ldr	r3, [r7, #4]
 802811c:	781b      	ldrb	r3, [r3, #0]
 802811e:	00db      	lsls	r3, r3, #3
 8028120:	4a10      	ldr	r2, [pc, #64]	; (8028164 <actualizarDriverPowerModule+0x9c>)
 8028122:	4413      	add	r3, r2
 8028124:	edd7 7a03 	vldr	s15, [r7, #12]
 8028128:	2132      	movs	r1, #50	; 0x32
 802812a:	eeb0 0a67 	vmov.f32	s0, s15
 802812e:	4618      	mov	r0, r3
 8028130:	f000 f8a6 	bl	8028280 <acumularLecturasPowerModule>
        acumularLecturasPowerModule(&acumuladorI[dPowerModule->numPM], corriente, 50);
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	781b      	ldrb	r3, [r3, #0]
 8028138:	00db      	lsls	r3, r3, #3
 802813a:	4a0b      	ldr	r2, [pc, #44]	; (8028168 <actualizarDriverPowerModule+0xa0>)
 802813c:	4413      	add	r3, r2
 802813e:	edd7 7a02 	vldr	s15, [r7, #8]
 8028142:	2132      	movs	r1, #50	; 0x32
 8028144:	eeb0 0a67 	vmov.f32	s0, s15
 8028148:	4618      	mov	r0, r3
 802814a:	f000 f899 	bl	8028280 <acumularLecturasPowerModule>
    }
    else
        dPowerModule->conectado = false;
}
 802814e:	e002      	b.n	8028156 <actualizarDriverPowerModule+0x8e>
        dPowerModule->conectado = false;
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	2200      	movs	r2, #0
 8028154:	719a      	strb	r2, [r3, #6]
}
 8028156:	bf00      	nop
 8028158:	3710      	adds	r7, #16
 802815a:	46bd      	mov	sp, r7
 802815c:	bd80      	pop	{r7, pc}
 802815e:	bf00      	nop
 8028160:	2000cad0 	.word	0x2000cad0
 8028164:	2000cb18 	.word	0x2000cb18
 8028168:	2000cb28 	.word	0x2000cb28

0802816c <leerPowerModuleAnalogico>:
**  Descripcion:    Lee los datos del Power Module analogico
**  Parametros:     Numero de power module a leer, puntero a la tension, puntero a la corriente
**  Retorno:        Ninguno
****************************************************************************************/
void leerPowerModuleAnalogico(numPowerModule_e numPM, float *tension, float *corriente)
{
 802816c:	b580      	push	{r7, lr}
 802816e:	ed2d 8b02 	vpush	{d8}
 8028172:	b086      	sub	sp, #24
 8028174:	af00      	add	r7, sp, #0
 8028176:	4603      	mov	r3, r0
 8028178:	60b9      	str	r1, [r7, #8]
 802817a:	607a      	str	r2, [r7, #4]
 802817c:	73fb      	strb	r3, [r7, #15]

    float multiplicadorV = tensionReferencia() / VALOR_LIMITE_ADC * configPowerModule(numPM)->multV;
 802817e:	f7ec fc53 	bl	8014a28 <tensionReferencia>
 8028182:	eef0 7a40 	vmov.f32	s15, s0
 8028186:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 802827c <leerPowerModuleAnalogico+0x110>
 802818a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 802818e:	7bfb      	ldrb	r3, [r7, #15]
 8028190:	4618      	mov	r0, r3
 8028192:	f7ff fcc9 	bl	8027b28 <configPowerModule>
 8028196:	4603      	mov	r3, r0
 8028198:	785b      	ldrb	r3, [r3, #1]
 802819a:	ee07 3a90 	vmov	s15, r3
 802819e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80281a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80281a6:	edc7 7a05 	vstr	s15, [r7, #20]
    float multiplicadorI = tensionReferencia() / VALOR_LIMITE_ADC * configPowerModule(numPM)->multI;
 80281aa:	f7ec fc3d 	bl	8014a28 <tensionReferencia>
 80281ae:	eef0 7a40 	vmov.f32	s15, s0
 80281b2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802827c <leerPowerModuleAnalogico+0x110>
 80281b6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80281ba:	7bfb      	ldrb	r3, [r7, #15]
 80281bc:	4618      	mov	r0, r3
 80281be:	f7ff fcb3 	bl	8027b28 <configPowerModule>
 80281c2:	4603      	mov	r3, r0
 80281c4:	789b      	ldrb	r3, [r3, #2]
 80281c6:	ee07 3a90 	vmov	s15, r3
 80281ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80281ce:	ee68 7a27 	vmul.f32	s15, s16, s15
 80281d2:	edc7 7a04 	vstr	s15, [r7, #16]

    switch (numPM) {
 80281d6:	7bfb      	ldrb	r3, [r7, #15]
 80281d8:	2b00      	cmp	r3, #0
 80281da:	d002      	beq.n	80281e2 <leerPowerModuleAnalogico+0x76>
 80281dc:	2b01      	cmp	r3, #1
 80281de:	d01f      	beq.n	8028220 <leerPowerModuleAnalogico+0xb4>
 80281e0:	e03d      	b.n	802825e <leerPowerModuleAnalogico+0xf2>
        case POWER_MODULE_1:
            // Se lee la informacion del power module
            *tension = (float)leerCanalADC(V_BAT_1_ADC) * multiplicadorV;
 80281e2:	2002      	movs	r0, #2
 80281e4:	f7ec fba0 	bl	8014928 <leerCanalADC>
 80281e8:	4603      	mov	r3, r0
 80281ea:	ee07 3a90 	vmov	s15, r3
 80281ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80281f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80281f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80281fa:	68bb      	ldr	r3, [r7, #8]
 80281fc:	edc3 7a00 	vstr	s15, [r3]
            *corriente = (float)leerCanalADC(I_BAT_1_ADC) * multiplicadorI;
 8028200:	2003      	movs	r0, #3
 8028202:	f7ec fb91 	bl	8014928 <leerCanalADC>
 8028206:	4603      	mov	r3, r0
 8028208:	ee07 3a90 	vmov	s15, r3
 802820c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8028210:	edd7 7a04 	vldr	s15, [r7, #16]
 8028214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	edc3 7a00 	vstr	s15, [r3]
            break;
 802821e:	e027      	b.n	8028270 <leerPowerModuleAnalogico+0x104>

        case POWER_MODULE_2:
#if defined(V_BAT_2_ADC)
            *tension = (float)leerCanalADC(V_BAT_2_ADC) * multiplicadorV;
 8028220:	2004      	movs	r0, #4
 8028222:	f7ec fb81 	bl	8014928 <leerCanalADC>
 8028226:	4603      	mov	r3, r0
 8028228:	ee07 3a90 	vmov	s15, r3
 802822c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8028230:	edd7 7a05 	vldr	s15, [r7, #20]
 8028234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028238:	68bb      	ldr	r3, [r7, #8]
 802823a:	edc3 7a00 	vstr	s15, [r3]
#else
            *tension = 0.0;
#endif
#if defined(I_BAT_2_ADC)
            *corriente = (float)leerCanalADC(I_BAT_2_ADC) * multiplicadorI;
 802823e:	2005      	movs	r0, #5
 8028240:	f7ec fb72 	bl	8014928 <leerCanalADC>
 8028244:	4603      	mov	r3, r0
 8028246:	ee07 3a90 	vmov	s15, r3
 802824a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802824e:	edd7 7a04 	vldr	s15, [r7, #16]
 8028252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028256:	687b      	ldr	r3, [r7, #4]
 8028258:	edc3 7a00 	vstr	s15, [r3]
#else
            *corriente = 0.0;
#endif
            break;
 802825c:	e008      	b.n	8028270 <leerPowerModuleAnalogico+0x104>

        default:
        	*tension = 0;
 802825e:	68bb      	ldr	r3, [r7, #8]
 8028260:	f04f 0200 	mov.w	r2, #0
 8028264:	601a      	str	r2, [r3, #0]
            *corriente = 0;
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	f04f 0200 	mov.w	r2, #0
 802826c:	601a      	str	r2, [r3, #0]
        	break;
 802826e:	bf00      	nop
    }
}
 8028270:	bf00      	nop
 8028272:	3718      	adds	r7, #24
 8028274:	46bd      	mov	sp, r7
 8028276:	ecbd 8b02 	vpop	{d8}
 802827a:	bd80      	pop	{r7, pc}
 802827c:	45800000 	.word	0x45800000

08028280 <acumularLecturasPowerModule>:
**  Descripcion:    Acumula las medidas
**  Parametros:     Acumulador, valor a acumular, numero maximo de acumulaciones
**  Retorno:        Ninguno
****************************************************************************************/
void acumularLecturasPowerModule(acumulador_t *acumulador, float muestra, uint8_t maxLecturas)
{
 8028280:	b480      	push	{r7}
 8028282:	b085      	sub	sp, #20
 8028284:	af00      	add	r7, sp, #0
 8028286:	60f8      	str	r0, [r7, #12]
 8028288:	ed87 0a02 	vstr	s0, [r7, #8]
 802828c:	460b      	mov	r3, r1
 802828e:	71fb      	strb	r3, [r7, #7]
    acumulador->acumulado = acumulador->acumulado + muestra;
 8028290:	68fb      	ldr	r3, [r7, #12]
 8028292:	ed93 7a00 	vldr	s14, [r3]
 8028296:	edd7 7a02 	vldr	s15, [r7, #8]
 802829a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802829e:	68fb      	ldr	r3, [r7, #12]
 80282a0:	edc3 7a00 	vstr	s15, [r3]
    acumulador->contador++;
 80282a4:	68fb      	ldr	r3, [r7, #12]
 80282a6:	791b      	ldrb	r3, [r3, #4]
 80282a8:	3301      	adds	r3, #1
 80282aa:	b2da      	uxtb	r2, r3
 80282ac:	68fb      	ldr	r3, [r7, #12]
 80282ae:	711a      	strb	r2, [r3, #4]

    if (acumulador->contador == maxLecturas) {
 80282b0:	68fb      	ldr	r3, [r7, #12]
 80282b2:	791b      	ldrb	r3, [r3, #4]
 80282b4:	79fa      	ldrb	r2, [r7, #7]
 80282b6:	429a      	cmp	r2, r3
 80282b8:	d10e      	bne.n	80282d8 <acumularLecturasPowerModule+0x58>
        acumulador->contador = maxLecturas / 2;
 80282ba:	79fb      	ldrb	r3, [r7, #7]
 80282bc:	085b      	lsrs	r3, r3, #1
 80282be:	b2da      	uxtb	r2, r3
 80282c0:	68fb      	ldr	r3, [r7, #12]
 80282c2:	711a      	strb	r2, [r3, #4]
        acumulador->acumulado = acumulador->acumulado / 2;
 80282c4:	68fb      	ldr	r3, [r7, #12]
 80282c6:	ed93 7a00 	vldr	s14, [r3]
 80282ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80282ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80282d2:	68fb      	ldr	r3, [r7, #12]
 80282d4:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80282d8:	bf00      	nop
 80282da:	3714      	adds	r7, #20
 80282dc:	46bd      	mov	sp, r7
 80282de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282e2:	4770      	bx	lr

080282e4 <actualizarPowerModuleOperativo>:
**  Descripcion:    Actualiza la bandera del estado operativo
**  Parametros:     Power module
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarPowerModuleOperativo(powerModule_t *dPowerModule)
{
 80282e4:	b580      	push	{r7, lr}
 80282e6:	b084      	sub	sp, #16
 80282e8:	af00      	add	r7, sp, #0
 80282ea:	6078      	str	r0, [r7, #4]
    // Se considera que el driver esta operativo si se ha actualizado en X tiempo,
    // tiene valores diferentes de 0 y las medidas han cambiado en los ultimos X microsegundos
	const uint32_t tiempo = micros();
 80282ec:	f7ef fbf4 	bl	8017ad8 <micros>
 80282f0:	60f8      	str	r0, [r7, #12]

    dPowerModule->operativo =
        (tiempo - dPowerModule->timing.ultimaActualizacion < TIMEOUT_ACTUALIZACION_PM) &&
 80282f2:	687b      	ldr	r3, [r7, #4]
 80282f4:	689b      	ldr	r3, [r3, #8]
 80282f6:	68fa      	ldr	r2, [r7, #12]
 80282f8:	1ad3      	subs	r3, r2, r3
        (tiempo - dPowerModule->timing.ultimaMedida < TIMEOUT_MEDIDA_PM) &&
        (tiempo - dPowerModule->timing.ultimoCambio < TIMEOUT_CAMBIO_MEDIDA_PM) &&
 80282fa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80282fe:	4293      	cmp	r3, r2
 8028300:	d819      	bhi.n	8028336 <actualizarPowerModuleOperativo+0x52>
        (tiempo - dPowerModule->timing.ultimaMedida < TIMEOUT_MEDIDA_PM) &&
 8028302:	687b      	ldr	r3, [r7, #4]
 8028304:	68db      	ldr	r3, [r3, #12]
 8028306:	68fa      	ldr	r2, [r7, #12]
 8028308:	1ad3      	subs	r3, r2, r3
        (tiempo - dPowerModule->timing.ultimaActualizacion < TIMEOUT_ACTUALIZACION_PM) &&
 802830a:	4a10      	ldr	r2, [pc, #64]	; (802834c <actualizarPowerModuleOperativo+0x68>)
 802830c:	4293      	cmp	r3, r2
 802830e:	d812      	bhi.n	8028336 <actualizarPowerModuleOperativo+0x52>
        (tiempo - dPowerModule->timing.ultimoCambio < TIMEOUT_CAMBIO_MEDIDA_PM) &&
 8028310:	687b      	ldr	r3, [r7, #4]
 8028312:	691b      	ldr	r3, [r3, #16]
 8028314:	68fa      	ldr	r2, [r7, #12]
 8028316:	1ad3      	subs	r3, r2, r3
        (tiempo - dPowerModule->timing.ultimaMedida < TIMEOUT_MEDIDA_PM) &&
 8028318:	4a0d      	ldr	r2, [pc, #52]	; (8028350 <actualizarPowerModuleOperativo+0x6c>)
 802831a:	4293      	cmp	r3, r2
 802831c:	d80b      	bhi.n	8028336 <actualizarPowerModuleOperativo+0x52>
        (dPowerModule->tension > TENSION_MINIMA_PM_CONECTADO);
 802831e:	687b      	ldr	r3, [r7, #4]
 8028320:	edd3 7a05 	vldr	s15, [r3, #20]
        (tiempo - dPowerModule->timing.ultimoCambio < TIMEOUT_CAMBIO_MEDIDA_PM) &&
 8028324:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8028328:	eef4 7ac7 	vcmpe.f32	s15, s14
 802832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028330:	dd01      	ble.n	8028336 <actualizarPowerModuleOperativo+0x52>
 8028332:	2301      	movs	r3, #1
 8028334:	e000      	b.n	8028338 <actualizarPowerModuleOperativo+0x54>
 8028336:	2300      	movs	r3, #0
 8028338:	f003 0301 	and.w	r3, r3, #1
 802833c:	b2da      	uxtb	r2, r3
    dPowerModule->operativo =
 802833e:	687b      	ldr	r3, [r7, #4]
 8028340:	71da      	strb	r2, [r3, #7]
}
 8028342:	bf00      	nop
 8028344:	3710      	adds	r7, #16
 8028346:	46bd      	mov	sp, r7
 8028348:	bd80      	pop	{r7, pc}
 802834a:	bf00      	nop
 802834c:	00030d3f 	.word	0x00030d3f
 8028350:	0007a11f 	.word	0x0007a11f

08028354 <acumularLectura>:
**  Descripcion:    Acumula las medidas
**  Parametros:     Acumulador, valor a acumular, numero maximo de acumulaciones
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void acumularLectura(acumulador_t *acumulador, float valor, uint8_t maxLecturas)
{
 8028354:	b480      	push	{r7}
 8028356:	b085      	sub	sp, #20
 8028358:	af00      	add	r7, sp, #0
 802835a:	60f8      	str	r0, [r7, #12]
 802835c:	ed87 0a02 	vstr	s0, [r7, #8]
 8028360:	460b      	mov	r3, r1
 8028362:	71fb      	strb	r3, [r7, #7]
    acumulador->acumulado = acumulador->acumulado + valor;
 8028364:	68fb      	ldr	r3, [r7, #12]
 8028366:	ed93 7a00 	vldr	s14, [r3]
 802836a:	edd7 7a02 	vldr	s15, [r7, #8]
 802836e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028372:	68fb      	ldr	r3, [r7, #12]
 8028374:	edc3 7a00 	vstr	s15, [r3]
    acumulador->contador++;
 8028378:	68fb      	ldr	r3, [r7, #12]
 802837a:	791b      	ldrb	r3, [r3, #4]
 802837c:	3301      	adds	r3, #1
 802837e:	b2da      	uxtb	r2, r3
 8028380:	68fb      	ldr	r3, [r7, #12]
 8028382:	711a      	strb	r2, [r3, #4]

    if (acumulador->contador == maxLecturas) {
 8028384:	68fb      	ldr	r3, [r7, #12]
 8028386:	791b      	ldrb	r3, [r3, #4]
 8028388:	79fa      	ldrb	r2, [r7, #7]
 802838a:	429a      	cmp	r2, r3
 802838c:	d10e      	bne.n	80283ac <acumularLectura+0x58>
        acumulador->contador = maxLecturas / 2;
 802838e:	79fb      	ldrb	r3, [r7, #7]
 8028390:	085b      	lsrs	r3, r3, #1
 8028392:	b2da      	uxtb	r2, r3
 8028394:	68fb      	ldr	r3, [r7, #12]
 8028396:	711a      	strb	r2, [r3, #4]
        acumulador->acumulado = acumulador->acumulado / 2;
 8028398:	68fb      	ldr	r3, [r7, #12]
 802839a:	ed93 7a00 	vldr	s14, [r3]
 802839e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80283a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80283a6:	68fb      	ldr	r3, [r7, #12]
 80283a8:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80283ac:	bf00      	nop
 80283ae:	3714      	adds	r7, #20
 80283b0:	46bd      	mov	sp, r7
 80283b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283b6:	4770      	bx	lr

080283b8 <acumularLecturas3>:
**  Descripcion:    Acumula las medidas
**  Parametros:     Acumulador, valor a acumular, numero maximo de acumulaciones
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void acumularLecturas3(acumulador3_t *acumulador, float *valor, uint8_t maxLecturas)
{
 80283b8:	b480      	push	{r7}
 80283ba:	b085      	sub	sp, #20
 80283bc:	af00      	add	r7, sp, #0
 80283be:	60f8      	str	r0, [r7, #12]
 80283c0:	60b9      	str	r1, [r7, #8]
 80283c2:	4613      	mov	r3, r2
 80283c4:	71fb      	strb	r3, [r7, #7]
    acumulador->acumulado[0] = acumulador->acumulado[0] + valor[0];
 80283c6:	68fb      	ldr	r3, [r7, #12]
 80283c8:	ed93 7a00 	vldr	s14, [r3]
 80283cc:	68bb      	ldr	r3, [r7, #8]
 80283ce:	edd3 7a00 	vldr	s15, [r3]
 80283d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80283d6:	68fb      	ldr	r3, [r7, #12]
 80283d8:	edc3 7a00 	vstr	s15, [r3]
    acumulador->acumulado[1] = acumulador->acumulado[1] + valor[1];
 80283dc:	68fb      	ldr	r3, [r7, #12]
 80283de:	ed93 7a01 	vldr	s14, [r3, #4]
 80283e2:	68bb      	ldr	r3, [r7, #8]
 80283e4:	3304      	adds	r3, #4
 80283e6:	edd3 7a00 	vldr	s15, [r3]
 80283ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80283ee:	68fb      	ldr	r3, [r7, #12]
 80283f0:	edc3 7a01 	vstr	s15, [r3, #4]
    acumulador->acumulado[2] = acumulador->acumulado[2] + valor[2];
 80283f4:	68fb      	ldr	r3, [r7, #12]
 80283f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80283fa:	68bb      	ldr	r3, [r7, #8]
 80283fc:	3308      	adds	r3, #8
 80283fe:	edd3 7a00 	vldr	s15, [r3]
 8028402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028406:	68fb      	ldr	r3, [r7, #12]
 8028408:	edc3 7a02 	vstr	s15, [r3, #8]
    acumulador->contador++;
 802840c:	68fb      	ldr	r3, [r7, #12]
 802840e:	7b1b      	ldrb	r3, [r3, #12]
 8028410:	3301      	adds	r3, #1
 8028412:	b2da      	uxtb	r2, r3
 8028414:	68fb      	ldr	r3, [r7, #12]
 8028416:	731a      	strb	r2, [r3, #12]

    if (acumulador->contador == maxLecturas) {
 8028418:	68fb      	ldr	r3, [r7, #12]
 802841a:	7b1b      	ldrb	r3, [r3, #12]
 802841c:	79fa      	ldrb	r2, [r7, #7]
 802841e:	429a      	cmp	r2, r3
 8028420:	d122      	bne.n	8028468 <acumularLecturas3+0xb0>
        acumulador->contador = maxLecturas / 2;
 8028422:	79fb      	ldrb	r3, [r7, #7]
 8028424:	085b      	lsrs	r3, r3, #1
 8028426:	b2da      	uxtb	r2, r3
 8028428:	68fb      	ldr	r3, [r7, #12]
 802842a:	731a      	strb	r2, [r3, #12]
        acumulador->acumulado[0] = acumulador->acumulado[0] / 2;
 802842c:	68fb      	ldr	r3, [r7, #12]
 802842e:	ed93 7a00 	vldr	s14, [r3]
 8028432:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8028436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802843a:	68fb      	ldr	r3, [r7, #12]
 802843c:	edc3 7a00 	vstr	s15, [r3]
        acumulador->acumulado[1] = acumulador->acumulado[1] / 2;
 8028440:	68fb      	ldr	r3, [r7, #12]
 8028442:	ed93 7a01 	vldr	s14, [r3, #4]
 8028446:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802844a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802844e:	68fb      	ldr	r3, [r7, #12]
 8028450:	edc3 7a01 	vstr	s15, [r3, #4]
        acumulador->acumulado[2] = acumulador->acumulado[2] / 2;
 8028454:	68fb      	ldr	r3, [r7, #12]
 8028456:	ed93 7a02 	vldr	s14, [r3, #8]
 802845a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802845e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8028462:	68fb      	ldr	r3, [r7, #12]
 8028464:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8028468:	bf00      	nop
 802846a:	3714      	adds	r7, #20
 802846c:	46bd      	mov	sp, r7
 802846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028472:	4770      	bx	lr

08028474 <acumularLecturas7>:
**  Descripcion:    Acumula las medidas
**  Parametros:     Acumulador, valor a acumular, numero maximo de acumulaciones
**  Retorno:        Ninguno
****************************************************************************************/
CODIGO_RAPIDO void acumularLecturas7(acumulador7_t *acumulador, float *valor, uint8_t maxLecturas)
{
 8028474:	b480      	push	{r7}
 8028476:	b085      	sub	sp, #20
 8028478:	af00      	add	r7, sp, #0
 802847a:	60f8      	str	r0, [r7, #12]
 802847c:	60b9      	str	r1, [r7, #8]
 802847e:	4613      	mov	r3, r2
 8028480:	71fb      	strb	r3, [r7, #7]
    acumulador->acumulado[0] = acumulador->acumulado[0] + valor[0];
 8028482:	68fb      	ldr	r3, [r7, #12]
 8028484:	ed93 7a00 	vldr	s14, [r3]
 8028488:	68bb      	ldr	r3, [r7, #8]
 802848a:	edd3 7a00 	vldr	s15, [r3]
 802848e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028492:	68fb      	ldr	r3, [r7, #12]
 8028494:	edc3 7a00 	vstr	s15, [r3]
    acumulador->acumulado[1] = acumulador->acumulado[1] + valor[1];
 8028498:	68fb      	ldr	r3, [r7, #12]
 802849a:	ed93 7a01 	vldr	s14, [r3, #4]
 802849e:	68bb      	ldr	r3, [r7, #8]
 80284a0:	3304      	adds	r3, #4
 80284a2:	edd3 7a00 	vldr	s15, [r3]
 80284a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80284aa:	68fb      	ldr	r3, [r7, #12]
 80284ac:	edc3 7a01 	vstr	s15, [r3, #4]
    acumulador->acumulado[2] = acumulador->acumulado[2] + valor[2];
 80284b0:	68fb      	ldr	r3, [r7, #12]
 80284b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80284b6:	68bb      	ldr	r3, [r7, #8]
 80284b8:	3308      	adds	r3, #8
 80284ba:	edd3 7a00 	vldr	s15, [r3]
 80284be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80284c2:	68fb      	ldr	r3, [r7, #12]
 80284c4:	edc3 7a02 	vstr	s15, [r3, #8]
    acumulador->acumulado[3] = acumulador->acumulado[3] + valor[3];
 80284c8:	68fb      	ldr	r3, [r7, #12]
 80284ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80284ce:	68bb      	ldr	r3, [r7, #8]
 80284d0:	330c      	adds	r3, #12
 80284d2:	edd3 7a00 	vldr	s15, [r3]
 80284d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80284da:	68fb      	ldr	r3, [r7, #12]
 80284dc:	edc3 7a03 	vstr	s15, [r3, #12]
    acumulador->acumulado[4] = acumulador->acumulado[4] + valor[4];
 80284e0:	68fb      	ldr	r3, [r7, #12]
 80284e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80284e6:	68bb      	ldr	r3, [r7, #8]
 80284e8:	3310      	adds	r3, #16
 80284ea:	edd3 7a00 	vldr	s15, [r3]
 80284ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80284f2:	68fb      	ldr	r3, [r7, #12]
 80284f4:	edc3 7a04 	vstr	s15, [r3, #16]
    acumulador->acumulado[5] = acumulador->acumulado[5] + valor[5];
 80284f8:	68fb      	ldr	r3, [r7, #12]
 80284fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80284fe:	68bb      	ldr	r3, [r7, #8]
 8028500:	3314      	adds	r3, #20
 8028502:	edd3 7a00 	vldr	s15, [r3]
 8028506:	ee77 7a27 	vadd.f32	s15, s14, s15
 802850a:	68fb      	ldr	r3, [r7, #12]
 802850c:	edc3 7a05 	vstr	s15, [r3, #20]
    acumulador->acumulado[6] = acumulador->acumulado[6] + valor[6];
 8028510:	68fb      	ldr	r3, [r7, #12]
 8028512:	ed93 7a06 	vldr	s14, [r3, #24]
 8028516:	68bb      	ldr	r3, [r7, #8]
 8028518:	3318      	adds	r3, #24
 802851a:	edd3 7a00 	vldr	s15, [r3]
 802851e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8028522:	68fb      	ldr	r3, [r7, #12]
 8028524:	edc3 7a06 	vstr	s15, [r3, #24]
    acumulador->contador++;
 8028528:	68fb      	ldr	r3, [r7, #12]
 802852a:	7f1b      	ldrb	r3, [r3, #28]
 802852c:	3301      	adds	r3, #1
 802852e:	b2da      	uxtb	r2, r3
 8028530:	68fb      	ldr	r3, [r7, #12]
 8028532:	771a      	strb	r2, [r3, #28]

    if (acumulador->contador == maxLecturas) {
 8028534:	68fb      	ldr	r3, [r7, #12]
 8028536:	7f1b      	ldrb	r3, [r3, #28]
 8028538:	79fa      	ldrb	r2, [r7, #7]
 802853a:	429a      	cmp	r2, r3
 802853c:	d14a      	bne.n	80285d4 <acumularLecturas7+0x160>
        acumulador->contador = maxLecturas / 2;
 802853e:	79fb      	ldrb	r3, [r7, #7]
 8028540:	085b      	lsrs	r3, r3, #1
 8028542:	b2da      	uxtb	r2, r3
 8028544:	68fb      	ldr	r3, [r7, #12]
 8028546:	771a      	strb	r2, [r3, #28]
        acumulador->acumulado[0] = acumulador->acumulado[0] / 2;
 8028548:	68fb      	ldr	r3, [r7, #12]
 802854a:	ed93 7a00 	vldr	s14, [r3]
 802854e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8028552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8028556:	68fb      	ldr	r3, [r7, #12]
 8028558:	edc3 7a00 	vstr	s15, [r3]
        acumulador->acumulado[1] = acumulador->acumulado[1] / 2;
 802855c:	68fb      	ldr	r3, [r7, #12]
 802855e:	ed93 7a01 	vldr	s14, [r3, #4]
 8028562:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8028566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802856a:	68fb      	ldr	r3, [r7, #12]
 802856c:	edc3 7a01 	vstr	s15, [r3, #4]
        acumulador->acumulado[2] = acumulador->acumulado[2] / 2;
 8028570:	68fb      	ldr	r3, [r7, #12]
 8028572:	ed93 7a02 	vldr	s14, [r3, #8]
 8028576:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802857a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802857e:	68fb      	ldr	r3, [r7, #12]
 8028580:	edc3 7a02 	vstr	s15, [r3, #8]
        acumulador->acumulado[3] = acumulador->acumulado[3] / 2;
 8028584:	68fb      	ldr	r3, [r7, #12]
 8028586:	ed93 7a03 	vldr	s14, [r3, #12]
 802858a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802858e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8028592:	68fb      	ldr	r3, [r7, #12]
 8028594:	edc3 7a03 	vstr	s15, [r3, #12]
        acumulador->acumulado[4] = acumulador->acumulado[4] / 2;
 8028598:	68fb      	ldr	r3, [r7, #12]
 802859a:	ed93 7a04 	vldr	s14, [r3, #16]
 802859e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80285a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80285a6:	68fb      	ldr	r3, [r7, #12]
 80285a8:	edc3 7a04 	vstr	s15, [r3, #16]
        acumulador->acumulado[5] = acumulador->acumulado[5] / 2;
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80285b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80285b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80285ba:	68fb      	ldr	r3, [r7, #12]
 80285bc:	edc3 7a05 	vstr	s15, [r3, #20]
        acumulador->acumulado[6] = acumulador->acumulado[6] / 2;
 80285c0:	68fb      	ldr	r3, [r7, #12]
 80285c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80285c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80285ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80285ce:	68fb      	ldr	r3, [r7, #12]
 80285d0:	edc3 7a06 	vstr	s15, [r3, #24]
    }
}
 80285d4:	bf00      	nop
 80285d6:	3714      	adds	r7, #20
 80285d8:	46bd      	mov	sp, r7
 80285da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285de:	4770      	bx	lr

080285e0 <SCB_EnableICache>:
{
 80285e0:	b480      	push	{r7}
 80285e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80285e4:	f3bf 8f4f 	dsb	sy
}
 80285e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80285ea:	f3bf 8f6f 	isb	sy
}
 80285ee:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80285f0:	4b0d      	ldr	r3, [pc, #52]	; (8028628 <SCB_EnableICache+0x48>)
 80285f2:	2200      	movs	r2, #0
 80285f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80285f8:	f3bf 8f4f 	dsb	sy
}
 80285fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80285fe:	f3bf 8f6f 	isb	sy
}
 8028602:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8028604:	4b08      	ldr	r3, [pc, #32]	; (8028628 <SCB_EnableICache+0x48>)
 8028606:	695b      	ldr	r3, [r3, #20]
 8028608:	4a07      	ldr	r2, [pc, #28]	; (8028628 <SCB_EnableICache+0x48>)
 802860a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802860e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8028610:	f3bf 8f4f 	dsb	sy
}
 8028614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8028616:	f3bf 8f6f 	isb	sy
}
 802861a:	bf00      	nop
}
 802861c:	bf00      	nop
 802861e:	46bd      	mov	sp, r7
 8028620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028624:	4770      	bx	lr
 8028626:	bf00      	nop
 8028628:	e000ed00 	.word	0xe000ed00

0802862c <SCB_EnableDCache>:
{
 802862c:	b480      	push	{r7}
 802862e:	b085      	sub	sp, #20
 8028630:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8028632:	4b1f      	ldr	r3, [pc, #124]	; (80286b0 <SCB_EnableDCache+0x84>)
 8028634:	2200      	movs	r2, #0
 8028636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 802863a:	f3bf 8f4f 	dsb	sy
}
 802863e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8028640:	4b1b      	ldr	r3, [pc, #108]	; (80286b0 <SCB_EnableDCache+0x84>)
 8028642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028646:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	0b5b      	lsrs	r3, r3, #13
 802864c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8028650:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8028652:	687b      	ldr	r3, [r7, #4]
 8028654:	08db      	lsrs	r3, r3, #3
 8028656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802865a:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 802865c:	68fb      	ldr	r3, [r7, #12]
 802865e:	015a      	lsls	r2, r3, #5
 8028660:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8028664:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8028666:	68ba      	ldr	r2, [r7, #8]
 8028668:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 802866a:	4911      	ldr	r1, [pc, #68]	; (80286b0 <SCB_EnableDCache+0x84>)
 802866c:	4313      	orrs	r3, r2
 802866e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8028672:	68bb      	ldr	r3, [r7, #8]
 8028674:	1e5a      	subs	r2, r3, #1
 8028676:	60ba      	str	r2, [r7, #8]
 8028678:	2b00      	cmp	r3, #0
 802867a:	d1ef      	bne.n	802865c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 802867c:	68fb      	ldr	r3, [r7, #12]
 802867e:	1e5a      	subs	r2, r3, #1
 8028680:	60fa      	str	r2, [r7, #12]
 8028682:	2b00      	cmp	r3, #0
 8028684:	d1e5      	bne.n	8028652 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8028686:	f3bf 8f4f 	dsb	sy
}
 802868a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 802868c:	4b08      	ldr	r3, [pc, #32]	; (80286b0 <SCB_EnableDCache+0x84>)
 802868e:	695b      	ldr	r3, [r3, #20]
 8028690:	4a07      	ldr	r2, [pc, #28]	; (80286b0 <SCB_EnableDCache+0x84>)
 8028692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028696:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8028698:	f3bf 8f4f 	dsb	sy
}
 802869c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802869e:	f3bf 8f6f 	isb	sy
}
 80286a2:	bf00      	nop
}
 80286a4:	bf00      	nop
 80286a6:	3714      	adds	r7, #20
 80286a8:	46bd      	mov	sp, r7
 80286aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286ae:	4770      	bx	lr
 80286b0:	e000ed00 	.word	0xe000ed00

080286b4 <iniciarITCMram>:
**  Descripcion:    Inicia y configura la ITCM RAM
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarITCMram(void)
{
 80286b4:	b580      	push	{r7, lr}
 80286b6:	b084      	sub	sp, #16
 80286b8:	af00      	add	r7, sp, #0
    // Carga las funciones en la ITCM RAM
    extern uint8_t _scodigoRapido;
    extern uint8_t _ecodigoRapido;
    extern uint8_t _sicodigoRapido;

    memcpy(&_scodigoRapido, &_sicodigoRapido, (size_t) (&_ecodigoRapido - &_scodigoRapido));
 80286ba:	4a14      	ldr	r2, [pc, #80]	; (802870c <iniciarITCMram+0x58>)
 80286bc:	4b14      	ldr	r3, [pc, #80]	; (8028710 <iniciarITCMram+0x5c>)
 80286be:	1ad3      	subs	r3, r2, r3
 80286c0:	461a      	mov	r2, r3
 80286c2:	4914      	ldr	r1, [pc, #80]	; (8028714 <iniciarITCMram+0x60>)
 80286c4:	4812      	ldr	r0, [pc, #72]	; (8028710 <iniciarITCMram+0x5c>)
 80286c6:	f00c fdc3 	bl	8035250 <memcpy>

    // Configuramos la ITCM-RAM como solo lectura
    MPU_Region_InitTypeDef iniRegion;

    iniRegion.Enable = MPU_REGION_ENABLE;
 80286ca:	2301      	movs	r3, #1
 80286cc:	703b      	strb	r3, [r7, #0]
    iniRegion.Number = MPU_REGION_NUMBER0;
 80286ce:	2300      	movs	r3, #0
 80286d0:	707b      	strb	r3, [r7, #1]
    iniRegion.BaseAddress = RAMITCM_BASE;
 80286d2:	2300      	movs	r3, #0
 80286d4:	607b      	str	r3, [r7, #4]
    iniRegion.Size = MPU_REGION_SIZE_16KB;
 80286d6:	230d      	movs	r3, #13
 80286d8:	723b      	strb	r3, [r7, #8]
    iniRegion.SubRegionDisable = 0;
 80286da:	2300      	movs	r3, #0
 80286dc:	727b      	strb	r3, [r7, #9]
    iniRegion.TypeExtField = MPU_TEX_LEVEL0;
 80286de:	2300      	movs	r3, #0
 80286e0:	72bb      	strb	r3, [r7, #10]
    iniRegion.AccessPermission = MPU_REGION_PRIV_RO_URO;
 80286e2:	2306      	movs	r3, #6
 80286e4:	72fb      	strb	r3, [r7, #11]
    iniRegion.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80286e6:	2300      	movs	r3, #0
 80286e8:	733b      	strb	r3, [r7, #12]
    iniRegion.IsShareable = MPU_ACCESS_SHAREABLE;
 80286ea:	2301      	movs	r3, #1
 80286ec:	737b      	strb	r3, [r7, #13]
    iniRegion.IsCacheable = MPU_ACCESS_CACHEABLE;
 80286ee:	2301      	movs	r3, #1
 80286f0:	73bb      	strb	r3, [r7, #14]
    iniRegion.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80286f2:	2301      	movs	r3, #1
 80286f4:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&iniRegion);
 80286f6:	463b      	mov	r3, r7
 80286f8:	4618      	mov	r0, r3
 80286fa:	f001 fc27 	bl	8029f4c <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80286fe:	2004      	movs	r0, #4
 8028700:	f001 fc04 	bl	8029f0c <HAL_MPU_Enable>
#endif
}
 8028704:	bf00      	nop
 8028706:	3710      	adds	r7, #16
 8028708:	46bd      	mov	sp, r7
 802870a:	bd80      	pop	{r7, pc}
	...
 8028714:	0803e6b8 	.word	0x0803e6b8

08028718 <iniciarSRAM2>:
**  Descripcion:    Carga los valores inicializados en la SRAM2
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarSRAM2(void)
{
 8028718:	b580      	push	{r7, lr}
 802871a:	af00      	add	r7, sp, #0
#ifdef USAR_SRAM2
    extern uint8_t _ssram2_data;
    extern uint8_t _esram2_data;
    extern uint8_t _sisram2_data;

    memcpy(&_ssram2_data, &_sisram2_data, (size_t) (&_esram2_data - &_ssram2_data));
 802871c:	4a04      	ldr	r2, [pc, #16]	; (8028730 <iniciarSRAM2+0x18>)
 802871e:	4b05      	ldr	r3, [pc, #20]	; (8028734 <iniciarSRAM2+0x1c>)
 8028720:	1ad3      	subs	r3, r2, r3
 8028722:	461a      	mov	r2, r3
 8028724:	4904      	ldr	r1, [pc, #16]	; (8028738 <iniciarSRAM2+0x20>)
 8028726:	4803      	ldr	r0, [pc, #12]	; (8028734 <iniciarSRAM2+0x1c>)
 8028728:	f00c fd92 	bl	8035250 <memcpy>
#endif
}
 802872c:	bf00      	nop
 802872e:	bd80      	pop	{r7, pc}
 8028730:	2007c000 	.word	0x2007c000
 8028734:	2007c000 	.word	0x2007c000
 8028738:	080415ca 	.word	0x080415ca

0802873c <iniciarDTCMram>:
**  Descripcion:    Carga los valores inicializados en la DTCM RAM
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarDTCMram(void)
{
 802873c:	b580      	push	{r7, lr}
 802873e:	b082      	sub	sp, #8
 8028740:	af00      	add	r7, sp, #0
#ifdef USAR_DTCM_RAM
    extern uint8_t _sramRapida_data;
    extern uint8_t _eramRapida_data;
    extern uint8_t _siramRapida_data;

    memcpy(&_sramRapida_data, &_siramRapida_data, (size_t) (&_eramRapida_data - &_sramRapida_data));
 8028742:	4a0c      	ldr	r2, [pc, #48]	; (8028774 <iniciarDTCMram+0x38>)
 8028744:	4b0c      	ldr	r3, [pc, #48]	; (8028778 <iniciarDTCMram+0x3c>)
 8028746:	1ad3      	subs	r3, r2, r3
 8028748:	461a      	mov	r2, r3
 802874a:	490c      	ldr	r1, [pc, #48]	; (802877c <iniciarDTCMram+0x40>)
 802874c:	480a      	ldr	r0, [pc, #40]	; (8028778 <iniciarDTCMram+0x3c>)
 802874e:	f00c fd7f 	bl	8035250 <memcpy>

    __HAL_RCC_DTCMRAMEN_CLK_ENABLE();     // Habilitacion del reloj
 8028752:	4b0b      	ldr	r3, [pc, #44]	; (8028780 <iniciarDTCMram+0x44>)
 8028754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028756:	4a0a      	ldr	r2, [pc, #40]	; (8028780 <iniciarDTCMram+0x44>)
 8028758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802875c:	6313      	str	r3, [r2, #48]	; 0x30
 802875e:	4b08      	ldr	r3, [pc, #32]	; (8028780 <iniciarDTCMram+0x44>)
 8028760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028766:	607b      	str	r3, [r7, #4]
 8028768:	687b      	ldr	r3, [r7, #4]
#endif
}
 802876a:	bf00      	nop
 802876c:	3708      	adds	r7, #8
 802876e:	46bd      	mov	sp, r7
 8028770:	bd80      	pop	{r7, pc}
 8028772:	bf00      	nop
 8028774:	2000cf98 	.word	0x2000cf98
 8028778:	2000cf30 	.word	0x2000cf30
 802877c:	080415ca 	.word	0x080415ca
 8028780:	40023800 	.word	0x40023800

08028784 <SystemInit>:
**  Descripcion:    Inicia la interface de flash embebida, el PLL y la variable de frecuencia
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void SystemInit(void)
{
 8028784:	b580      	push	{r7, lr}
 8028786:	b082      	sub	sp, #8
 8028788:	af00      	add	r7, sp, #0
    // Iniciar las memorias
	iniciarITCMram();
 802878a:	f7ff ff93 	bl	80286b4 <iniciarITCMram>
	iniciarSRAM2();
 802878e:	f7ff ffc3 	bl	8028718 <iniciarSRAM2>
	iniciarDTCMram();
 8028792:	f7ff ffd3 	bl	802873c <iniciarDTCMram>

    // Configuramos el overclock si hay solicitud
    iniciarSistemaOverclock();
 8028796:	f000 f871 	bl	802887c <iniciarSistemaOverclock>
    SystemCoreClock = pll_n * 1000000;
 802879a:	4b2f      	ldr	r3, [pc, #188]	; (8028858 <SystemInit+0xd4>)
 802879c:	681b      	ldr	r3, [r3, #0]
 802879e:	4a2f      	ldr	r2, [pc, #188]	; (802885c <SystemInit+0xd8>)
 80287a0:	fb02 f303 	mul.w	r3, r2, r3
 80287a4:	4a2e      	ldr	r2, [pc, #184]	; (8028860 <SystemInit+0xdc>)
 80287a6:	6013      	str	r3, [r2, #0]

    // Configuracion de la FPU
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));  // CP10 y CP11 Acceso total
 80287a8:	4b2e      	ldr	r3, [pc, #184]	; (8028864 <SystemInit+0xe0>)
 80287aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80287ae:	4a2d      	ldr	r2, [pc, #180]	; (8028864 <SystemInit+0xe0>)
 80287b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80287b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

    // Resetea la configuracion del reloj al estado de reset por defecto
    RCC->CR |= (uint32_t)0x00000001;     // Activa el bit HSION
 80287b8:	4b2b      	ldr	r3, [pc, #172]	; (8028868 <SystemInit+0xe4>)
 80287ba:	681b      	ldr	r3, [r3, #0]
 80287bc:	4a2a      	ldr	r2, [pc, #168]	; (8028868 <SystemInit+0xe4>)
 80287be:	f043 0301 	orr.w	r3, r3, #1
 80287c2:	6013      	str	r3, [r2, #0]
    RCC->CFGR = 0x00000000;              // Resetea el registro CFGR
 80287c4:	4b28      	ldr	r3, [pc, #160]	; (8028868 <SystemInit+0xe4>)
 80287c6:	2200      	movs	r2, #0
 80287c8:	609a      	str	r2, [r3, #8]
    RCC->CR &= (uint32_t)0xFEF6FFFF;     // Resetea los bits HSEON, CSSON y PLLON
 80287ca:	4b27      	ldr	r3, [pc, #156]	; (8028868 <SystemInit+0xe4>)
 80287cc:	681a      	ldr	r2, [r3, #0]
 80287ce:	4926      	ldr	r1, [pc, #152]	; (8028868 <SystemInit+0xe4>)
 80287d0:	4b26      	ldr	r3, [pc, #152]	; (802886c <SystemInit+0xe8>)
 80287d2:	4013      	ands	r3, r2
 80287d4:	600b      	str	r3, [r1, #0]
    RCC->PLLCFGR = 0x24003010;           // Resetea el  registro PLLCFGR
 80287d6:	4b24      	ldr	r3, [pc, #144]	; (8028868 <SystemInit+0xe4>)
 80287d8:	4a25      	ldr	r2, [pc, #148]	; (8028870 <SystemInit+0xec>)
 80287da:	605a      	str	r2, [r3, #4]
    RCC->CR &= (uint32_t)0xFFFBFFFF;     // Resetea el bit HSEBYP
 80287dc:	4b22      	ldr	r3, [pc, #136]	; (8028868 <SystemInit+0xe4>)
 80287de:	681b      	ldr	r3, [r3, #0]
 80287e0:	4a21      	ldr	r2, [pc, #132]	; (8028868 <SystemInit+0xe4>)
 80287e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80287e6:	6013      	str	r3, [r2, #0]
    RCC->CIR = 0x00000000;               // Deshabilita las interrupciones
 80287e8:	4b1f      	ldr	r3, [pc, #124]	; (8028868 <SystemInit+0xe4>)
 80287ea:	2200      	movs	r2, #0
 80287ec:	60da      	str	r2, [r3, #12]

    // Configura la localizacion de la tabla de vectores y el offset
    const uint32_t offsetTablaVectores = (uint32_t) &inicioTablaVectoresISR;
 80287ee:	4b21      	ldr	r3, [pc, #132]	; (8028874 <SystemInit+0xf0>)
 80287f0:	607b      	str	r3, [r7, #4]

    if (offsetTablaVectores % OFFSET_TABLA_VECTORES != 0)
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80287f8:	2b00      	cmp	r3, #0
 80287fa:	d000      	beq.n	80287fe <SystemInit+0x7a>
        while (1);                                // ISR vector table base is not 512 byte aligned
 80287fc:	e7fe      	b.n	80287fc <SystemInit+0x78>

    SCB->VTOR = offsetTablaVectores;
 80287fe:	4a19      	ldr	r2, [pc, #100]	; (8028864 <SystemInit+0xe0>)
 8028800:	687b      	ldr	r3, [r7, #4]
 8028802:	6093      	str	r3, [r2, #8]

    if (INSTRUCTION_CACHE_ENABLE)
        SCB_EnableICache();                       // Habilita I-Cache
 8028804:	f7ff feec 	bl	80285e0 <SCB_EnableICache>

    if (DATA_CACHE_ENABLE)
        SCB_EnableDCache();                       // Habilita D-Cache
 8028808:	f7ff ff10 	bl	802862c <SCB_EnableDCache>

    if (ART_ACCLERATOR_ENABLE)
        __HAL_FLASH_ART_ENABLE();                 // Habilita la cache de instrucciones a traves de ART acelerador
 802880c:	4b1a      	ldr	r3, [pc, #104]	; (8028878 <SystemInit+0xf4>)
 802880e:	681b      	ldr	r3, [r3, #0]
 8028810:	4a19      	ldr	r2, [pc, #100]	; (8028878 <SystemInit+0xf4>)
 8028812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028816:	6013      	str	r3, [r2, #0]

    if (PREFETCH_ENABLE)
        __HAL_FLASH_PREFETCH_BUFFER_ENABLE();     // Habilita el Flash prefetch
 8028818:	4b17      	ldr	r3, [pc, #92]	; (8028878 <SystemInit+0xf4>)
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	4a16      	ldr	r2, [pc, #88]	; (8028878 <SystemInit+0xf4>)
 802881e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028822:	6013      	str	r3, [r2, #0]

    // Configura el reloj del sistema a la frecuencia especificada y comprueba que se ha actualizado
    configurarRelojSistema();
 8028824:	f000 f880 	bl	8028928 <configurarRelojSistema>
    if (SystemCoreClock != pll_n * 1000000)
 8028828:	4b0b      	ldr	r3, [pc, #44]	; (8028858 <SystemInit+0xd4>)
 802882a:	681b      	ldr	r3, [r3, #0]
 802882c:	4a0b      	ldr	r2, [pc, #44]	; (802885c <SystemInit+0xd8>)
 802882e:	fb03 f202 	mul.w	r2, r3, r2
 8028832:	4b0b      	ldr	r3, [pc, #44]	; (8028860 <SystemInit+0xdc>)
 8028834:	681b      	ldr	r3, [r3, #0]
 8028836:	429a      	cmp	r2, r3
 8028838:	d000      	beq.n	802883c <SystemInit+0xb8>
        while (1);
 802883a:	e7fe      	b.n	802883a <SystemInit+0xb6>

    // Habilitamos el systick y los perifericos
    HAL_InitTick(TICK_INT_PRIORITY);              // Usamos systick como base de tiempo de 1ms
 802883c:	2000      	movs	r0, #0
 802883e:	f000 fafd 	bl	8028e3c <HAL_InitTick>
    rccCSR();                                     // Obtenemos RCC->CSR para ver si ha habido un reset por software
 8028842:	f7ed ffbf 	bl	80167c4 <rccCSR>
    iniciarContadorCiclos();                      // Inicia el contador para las funciones de tiempo
 8028846:	f7ef f8ed 	bl	8017a24 <iniciarContadorCiclos>

#ifdef DEBUG
    initialise_monitor_handles();                 // Habilita la transmision de mensajes en modo debug
 802884a:	f00f fc97 	bl	803817c <initialise_monitor_handles>
#endif
}
 802884e:	bf00      	nop
 8028850:	3708      	adds	r7, #8
 8028852:	46bd      	mov	sp, r7
 8028854:	bd80      	pop	{r7, pc}
 8028856:	bf00      	nop
 8028858:	2000296c 	.word	0x2000296c
 802885c:	000f4240 	.word	0x000f4240
 8028860:	2000cc48 	.word	0x2000cc48
 8028864:	e000ed00 	.word	0xe000ed00
 8028868:	40023800 	.word	0x40023800
 802886c:	fef6ffff 	.word	0xfef6ffff
 8028870:	24003010 	.word	0x24003010
 8028874:	08000000 	.word	0x08000000
 8028878:	40023c00 	.word	0x40023c00

0802887c <iniciarSistemaOverclock>:
**  Descripcion:    Comprueba si hay que activar el overclock y configura el PLL en ese caso
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarSistemaOverclock(void)
{
 802887c:	b580      	push	{r7, lr}
 802887e:	b084      	sub	sp, #16
 8028880:	af00      	add	r7, sp, #0
    __PWR_CLK_ENABLE();
 8028882:	4b20      	ldr	r3, [pc, #128]	; (8028904 <iniciarSistemaOverclock+0x88>)
 8028884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028886:	4a1f      	ldr	r2, [pc, #124]	; (8028904 <iniciarSistemaOverclock+0x88>)
 8028888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802888c:	6413      	str	r3, [r2, #64]	; 0x40
 802888e:	4b1d      	ldr	r3, [pc, #116]	; (8028904 <iniciarSistemaOverclock+0x88>)
 8028890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028896:	607b      	str	r3, [r7, #4]
 8028898:	687b      	ldr	r3, [r7, #4]
    __BKPSRAM_CLK_ENABLE();
 802889a:	4b1a      	ldr	r3, [pc, #104]	; (8028904 <iniciarSistemaOverclock+0x88>)
 802889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802889e:	4a19      	ldr	r2, [pc, #100]	; (8028904 <iniciarSistemaOverclock+0x88>)
 80288a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80288a4:	6313      	str	r3, [r2, #48]	; 0x30
 80288a6:	4b17      	ldr	r3, [pc, #92]	; (8028904 <iniciarSistemaOverclock+0x88>)
 80288a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80288ae:	603b      	str	r3, [r7, #0]
 80288b0:	683b      	ldr	r3, [r7, #0]
    HAL_PWR_EnableBkUpAccess();
 80288b2:	f004 fa65 	bl	802cd80 <HAL_PWR_EnableBkUpAccess>

    if (NUMERO_SOLICITUD_OVERCLOCK == SOLICITUD_OVERCLOCK) {
 80288b6:	4b14      	ldr	r3, [pc, #80]	; (8028908 <iniciarSistemaOverclock+0x8c>)
 80288b8:	681b      	ldr	r3, [r3, #0]
 80288ba:	4a14      	ldr	r2, [pc, #80]	; (802890c <iniciarSistemaOverclock+0x90>)
 80288bc:	4293      	cmp	r3, r2
 80288be:	d11d      	bne.n	80288fc <iniciarSistemaOverclock+0x80>
        const uint32_t nivelOverclock = NIVEL_ACTUAL_OVERCLOCK;
 80288c0:	4b13      	ldr	r3, [pc, #76]	; (8028910 <iniciarSistemaOverclock+0x94>)
 80288c2:	681b      	ldr	r3, [r3, #0]
 80288c4:	60fb      	str	r3, [r7, #12]

        // Configuramos el PLL para overclocking
        if (nivelOverclock < LONG_ARRAY(nivelesOverclock)) {
 80288c6:	68fb      	ldr	r3, [r7, #12]
 80288c8:	2b01      	cmp	r3, #1
 80288ca:	d814      	bhi.n	80288f6 <iniciarSistemaOverclock+0x7a>
            const pllConfig_t * const pll = nivelesOverclock + nivelOverclock;
 80288cc:	68fb      	ldr	r3, [r7, #12]
 80288ce:	011b      	lsls	r3, r3, #4
 80288d0:	4a10      	ldr	r2, [pc, #64]	; (8028914 <iniciarSistemaOverclock+0x98>)
 80288d2:	4413      	add	r3, r2
 80288d4:	60bb      	str	r3, [r7, #8]

            pll_n = pll->n;
 80288d6:	68bb      	ldr	r3, [r7, #8]
 80288d8:	681b      	ldr	r3, [r3, #0]
 80288da:	4a0f      	ldr	r2, [pc, #60]	; (8028918 <iniciarSistemaOverclock+0x9c>)
 80288dc:	6013      	str	r3, [r2, #0]
            pll_p = pll->p;
 80288de:	68bb      	ldr	r3, [r7, #8]
 80288e0:	685b      	ldr	r3, [r3, #4]
 80288e2:	4a0e      	ldr	r2, [pc, #56]	; (802891c <iniciarSistemaOverclock+0xa0>)
 80288e4:	6013      	str	r3, [r2, #0]
            pll_q = pll->q;
 80288e6:	68bb      	ldr	r3, [r7, #8]
 80288e8:	689b      	ldr	r3, [r3, #8]
 80288ea:	4a0d      	ldr	r2, [pc, #52]	; (8028920 <iniciarSistemaOverclock+0xa4>)
 80288ec:	6013      	str	r3, [r2, #0]
            pll_r = pll->r;
 80288ee:	68bb      	ldr	r3, [r7, #8]
 80288f0:	68db      	ldr	r3, [r3, #12]
 80288f2:	4a0c      	ldr	r2, [pc, #48]	; (8028924 <iniciarSistemaOverclock+0xa8>)
 80288f4:	6013      	str	r3, [r2, #0]
        }

        SOLICITUD_OVERCLOCK = 0;
 80288f6:	4b04      	ldr	r3, [pc, #16]	; (8028908 <iniciarSistemaOverclock+0x8c>)
 80288f8:	2200      	movs	r2, #0
 80288fa:	601a      	str	r2, [r3, #0]
    }
}
 80288fc:	bf00      	nop
 80288fe:	3710      	adds	r7, #16
 8028900:	46bd      	mov	sp, r7
 8028902:	bd80      	pop	{r7, pc}
 8028904:	40023800 	.word	0x40023800
 8028908:	40024008 	.word	0x40024008
 802890c:	babeface 	.word	0xbabeface
 8028910:	4002400c 	.word	0x4002400c
 8028914:	0803c0d4 	.word	0x0803c0d4
 8028918:	2000296c 	.word	0x2000296c
 802891c:	20002968 	.word	0x20002968
 8028920:	20002970 	.word	0x20002970
 8028924:	20002974 	.word	0x20002974

08028928 <configurarRelojSistema>:
**  Descripcion:    Comprueba si hay que activar el overclock y configura el PLL en ese caso
**  Parametros:     Ninguno
**  Retorno:        Ninguno
****************************************************************************************/
void configurarRelojSistema(void)
{
 8028928:	b580      	push	{r7, lr}
 802892a:	b0ba      	sub	sp, #232	; 0xe8
 802892c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef iniOsc;
    RCC_ClkInitTypeDef iniClk;
    RCC_PeriphCLKInitTypeDef iniPerifClk;

    // Configuramos el regulador interno
    __HAL_RCC_PWR_CLK_ENABLE();
 802892e:	4b6d      	ldr	r3, [pc, #436]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028932:	4a6c      	ldr	r2, [pc, #432]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028938:	6413      	str	r3, [r2, #64]	; 0x40
 802893a:	4b6a      	ldr	r3, [pc, #424]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 802893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802893e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028942:	60fb      	str	r3, [r7, #12]
 8028944:	68fb      	ldr	r3, [r7, #12]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8028946:	4b68      	ldr	r3, [pc, #416]	; (8028ae8 <configurarRelojSistema+0x1c0>)
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	4a67      	ldr	r2, [pc, #412]	; (8028ae8 <configurarRelojSistema+0x1c0>)
 802894c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8028950:	6013      	str	r3, [r2, #0]
 8028952:	4b65      	ldr	r3, [pc, #404]	; (8028ae8 <configurarRelojSistema+0x1c0>)
 8028954:	681b      	ldr	r3, [r3, #0]
 8028956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802895a:	60bb      	str	r3, [r7, #8]
 802895c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 802895e:	4b61      	ldr	r3, [pc, #388]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028962:	4a60      	ldr	r2, [pc, #384]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028964:	f023 0318 	bic.w	r3, r3, #24
 8028968:	6713      	str	r3, [r2, #112]	; 0x70

    // Configuramos el RCC
    iniOsc.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 802896a:	2305      	movs	r3, #5
 802896c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    iniOsc.HSEState = RCC_HSE_ON;
 8028970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8028974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    iniOsc.LSEState = RCC_LSE_ON;
 8028978:	2301      	movs	r3, #1
 802897a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    iniOsc.PLL.PLLState = RCC_PLL_ON;
 802897e:	2302      	movs	r3, #2
 8028980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    iniOsc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8028984:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8028988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    iniOsc.PLL.PLLM = PLL_M;
 802898c:	230c      	movs	r3, #12
 802898e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    iniOsc.PLL.PLLN = pll_n;
 8028992:	4b56      	ldr	r3, [pc, #344]	; (8028aec <configurarRelojSistema+0x1c4>)
 8028994:	681b      	ldr	r3, [r3, #0]
 8028996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    iniOsc.PLL.PLLP = pll_p;
 802899a:	4b55      	ldr	r3, [pc, #340]	; (8028af0 <configurarRelojSistema+0x1c8>)
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    iniOsc.PLL.PLLQ = pll_q;
 80289a2:	4b54      	ldr	r3, [pc, #336]	; (8028af4 <configurarRelojSistema+0x1cc>)
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
#ifndef STM32F722xx
    iniOsc.PLL.PLLR = pll_r;
 80289aa:	4b53      	ldr	r3, [pc, #332]	; (8028af8 <configurarRelojSistema+0x1d0>)
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
#endif

    if (HAL_RCC_OscConfig(&iniOsc) != HAL_OK)
 80289b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80289b6:	4618      	mov	r0, r3
 80289b8:	f004 fa42 	bl	802ce40 <HAL_RCC_OscConfig>
 80289bc:	4603      	mov	r3, r0
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d000      	beq.n	80289c4 <configurarRelojSistema+0x9c>
        while (1);
 80289c2:	e7fe      	b.n	80289c2 <configurarRelojSistema+0x9a>

    // Activamos el modo Over-Drive
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80289c4:	f004 f9ec 	bl	802cda0 <HAL_PWREx_EnableOverDrive>
 80289c8:	4603      	mov	r3, r0
 80289ca:	2b00      	cmp	r3, #0
 80289cc:	d000      	beq.n	80289d0 <configurarRelojSistema+0xa8>
        while (1);
 80289ce:	e7fe      	b.n	80289ce <configurarRelojSistema+0xa6>

    // Seleccionamos PLLSAI como fuente de reloj para el USB
    iniPerifClk.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80289d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80289d4:	613b      	str	r3, [r7, #16]
    iniPerifClk.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80289d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80289da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    iniPerifClk.PLLSAI.PLLSAIN = PLL_SAIN;
 80289de:	23c0      	movs	r3, #192	; 0xc0
 80289e0:	627b      	str	r3, [r7, #36]	; 0x24
    iniPerifClk.PLLSAI.PLLSAIQ = PLL_SAIQ;
 80289e2:	2302      	movs	r3, #2
 80289e4:	62bb      	str	r3, [r7, #40]	; 0x28
    iniPerifClk.PLLSAI.PLLSAIP = PLL_SAIP;
 80289e6:	2303      	movs	r3, #3
 80289e8:	633b      	str	r3, [r7, #48]	; 0x30
#ifndef STM32F722xx
    iniPerifClk.PLLSAI.PLLSAIR = PLL_SAIR;
 80289ea:	2302      	movs	r3, #2
 80289ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    if (HAL_RCCEx_PeriphCLKConfig(&iniPerifClk) != HAL_OK)
 80289ee:	f107 0310 	add.w	r3, r7, #16
 80289f2:	4618      	mov	r0, r3
 80289f4:	f004 fe78 	bl	802d6e8 <HAL_RCCEx_PeriphCLKConfig>
 80289f8:	4603      	mov	r3, r0
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	d000      	beq.n	8028a00 <configurarRelojSistema+0xd8>
       while (1);
 80289fe:	e7fe      	b.n	80289fe <configurarRelojSistema+0xd6>

    // Configuramos los buses del reloj
    iniClk.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8028a00:	230f      	movs	r3, #15
 8028a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    iniClk.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8028a06:	2302      	movs	r3, #2
 8028a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    iniClk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8028a0c:	2300      	movs	r3, #0
 8028a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    iniClk.APB1CLKDivider = RCC_HCLK_DIV4;
 8028a12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8028a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    iniClk.APB2CLKDivider = RCC_HCLK_DIV2;
 8028a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8028a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCC_ClockConfig(&iniClk, FLASH_LATENCY_7) != HAL_OK)
 8028a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8028a26:	2107      	movs	r1, #7
 8028a28:	4618      	mov	r0, r3
 8028a2a:	f004 fc7b 	bl	802d324 <HAL_RCC_ClockConfig>
 8028a2e:	4603      	mov	r3, r0
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d000      	beq.n	8028a36 <configurarRelojSistema+0x10e>
        while (1);
 8028a34:	e7fe      	b.n	8028a34 <configurarRelojSistema+0x10c>

    iniPerifClk.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3| RCC_PERIPHCLK_UART5
 8028a36:	4b31      	ldr	r3, [pc, #196]	; (8028afc <configurarRelojSistema+0x1d4>)
 8028a38:	613b      	str	r3, [r7, #16]
    		                         | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_UART8
                                     | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_I2C4
                                     | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_RTC;

    // Seleccion del reloj para las UART
    iniPerifClk.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8028a3a:	2300      	movs	r3, #0
 8028a3c:	657b      	str	r3, [r7, #84]	; 0x54
    iniPerifClk.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8028a3e:	2300      	movs	r3, #0
 8028a40:	65bb      	str	r3, [r7, #88]	; 0x58
    iniPerifClk.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8028a42:	2300      	movs	r3, #0
 8028a44:	65fb      	str	r3, [r7, #92]	; 0x5c
    iniPerifClk.Uart4ClockSelection  = RCC_UART4CLKSOURCE_PCLK1;
 8028a46:	2300      	movs	r3, #0
 8028a48:	663b      	str	r3, [r7, #96]	; 0x60
    iniPerifClk.Uart5ClockSelection  = RCC_UART5CLKSOURCE_PCLK1;
 8028a4a:	2300      	movs	r3, #0
 8028a4c:	667b      	str	r3, [r7, #100]	; 0x64
    iniPerifClk.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8028a4e:	2300      	movs	r3, #0
 8028a50:	66bb      	str	r3, [r7, #104]	; 0x68
    iniPerifClk.Uart7ClockSelection  = RCC_UART7CLKSOURCE_PCLK1;
 8028a52:	2300      	movs	r3, #0
 8028a54:	66fb      	str	r3, [r7, #108]	; 0x6c
    iniPerifClk.Uart8ClockSelection  = RCC_UART8CLKSOURCE_PCLK1;
 8028a56:	2300      	movs	r3, #0
 8028a58:	673b      	str	r3, [r7, #112]	; 0x70

    // Seleccion del reloj para los I2C
    iniPerifClk.I2c1ClockSelection   = RCC_I2C1CLKSOURCE_PCLK1;
 8028a5a:	2300      	movs	r3, #0
 8028a5c:	677b      	str	r3, [r7, #116]	; 0x74
    iniPerifClk.I2c2ClockSelection   = RCC_I2C2CLKSOURCE_PCLK1;
 8028a5e:	2300      	movs	r3, #0
 8028a60:	67bb      	str	r3, [r7, #120]	; 0x78
    iniPerifClk.I2c3ClockSelection   = RCC_I2C3CLKSOURCE_PCLK1;
 8028a62:	2300      	movs	r3, #0
 8028a64:	67fb      	str	r3, [r7, #124]	; 0x7c
    iniPerifClk.I2c4ClockSelection   = RCC_I2C4CLKSOURCE_PCLK1;
 8028a66:	2300      	movs	r3, #0
 8028a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // Seleccion del reloj para el RTC
    iniPerifClk.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8028a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028a70:	643b      	str	r3, [r7, #64]	; 0x40

    // Seleccion del reloj para la SD
    iniPerifClk.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8028a72:	2300      	movs	r3, #0
 8028a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // Configuracion del reloj
    if (HAL_RCCEx_PeriphCLKConfig(&iniPerifClk) != HAL_OK)
 8028a78:	f107 0310 	add.w	r3, r7, #16
 8028a7c:	4618      	mov	r0, r3
 8028a7e:	f004 fe33 	bl	802d6e8 <HAL_RCCEx_PeriphCLKConfig>
 8028a82:	4603      	mov	r3, r0
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d000      	beq.n	8028a8a <configurarRelojSistema+0x162>
      while (1);
 8028a88:	e7fe      	b.n	8028a88 <configurarRelojSistema+0x160>

    // Se activan los prescalers mientras los prescalers APBx son 1/2/4
    __HAL_RCC_TIMCLKPRESCALER(RCC_TIMPRES_ACTIVATED);
 8028a8a:	4b16      	ldr	r3, [pc, #88]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028a90:	4a14      	ldr	r2, [pc, #80]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8028a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8028a9a:	4b12      	ldr	r3, [pc, #72]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028aa0:	4a10      	ldr	r2, [pc, #64]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8028aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    // Se activa el reloj en los pines del cristal
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8028aaa:	4b0e      	ldr	r3, [pc, #56]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aae:	4a0d      	ldr	r2, [pc, #52]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8028ab6:	4b0b      	ldr	r3, [pc, #44]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028abe:	607b      	str	r3, [r7, #4]
 8028ac0:	687b      	ldr	r3, [r7, #4]

    // Se habilita el reloj en la Backup RAM
    __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8028ac2:	4b08      	ldr	r3, [pc, #32]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ac6:	4a07      	ldr	r2, [pc, #28]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028acc:	6313      	str	r3, [r2, #48]	; 0x30
 8028ace:	4b05      	ldr	r3, [pc, #20]	; (8028ae4 <configurarRelojSistema+0x1bc>)
 8028ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028ad6:	603b      	str	r3, [r7, #0]
 8028ad8:	683b      	ldr	r3, [r7, #0]
}
 8028ada:	bf00      	nop
 8028adc:	37e8      	adds	r7, #232	; 0xe8
 8028ade:	46bd      	mov	sp, r7
 8028ae0:	bd80      	pop	{r7, pc}
 8028ae2:	bf00      	nop
 8028ae4:	40023800 	.word	0x40023800
 8028ae8:	40007000 	.word	0x40007000
 8028aec:	2000296c 	.word	0x2000296c
 8028af0:	20002968 	.word	0x20002968
 8028af4:	20002970 	.word	0x20002970
 8028af8:	20002974 	.word	0x20002974
 8028afc:	0082f5e0 	.word	0x0082f5e0

08028b00 <Reset_Handler>:
 8028b00:	f8df d050 	ldr.w	sp, [pc, #80]	; 8028b54 <LoopFillZeroDTCM_RAM+0x10>
 8028b04:	2100      	movs	r1, #0
 8028b06:	e003      	b.n	8028b10 <LoopCopyDataInit>

08028b08 <CopyDataInit>:
 8028b08:	4b13      	ldr	r3, [pc, #76]	; (8028b58 <LoopFillZeroDTCM_RAM+0x14>)
 8028b0a:	585b      	ldr	r3, [r3, r1]
 8028b0c:	5043      	str	r3, [r0, r1]
 8028b0e:	3104      	adds	r1, #4

08028b10 <LoopCopyDataInit>:
 8028b10:	4812      	ldr	r0, [pc, #72]	; (8028b5c <LoopFillZeroDTCM_RAM+0x18>)
 8028b12:	4b13      	ldr	r3, [pc, #76]	; (8028b60 <LoopFillZeroDTCM_RAM+0x1c>)
 8028b14:	1842      	adds	r2, r0, r1
 8028b16:	429a      	cmp	r2, r3
 8028b18:	d3f6      	bcc.n	8028b08 <CopyDataInit>
 8028b1a:	4a12      	ldr	r2, [pc, #72]	; (8028b64 <LoopFillZeroDTCM_RAM+0x20>)
 8028b1c:	e002      	b.n	8028b24 <LoopFillZerobss>

08028b1e <FillZerobss>:
 8028b1e:	2300      	movs	r3, #0
 8028b20:	f842 3b04 	str.w	r3, [r2], #4

08028b24 <LoopFillZerobss>:
 8028b24:	4b10      	ldr	r3, [pc, #64]	; (8028b68 <LoopFillZeroDTCM_RAM+0x24>)
 8028b26:	429a      	cmp	r2, r3
 8028b28:	d3f9      	bcc.n	8028b1e <FillZerobss>
 8028b2a:	4a10      	ldr	r2, [pc, #64]	; (8028b6c <LoopFillZeroDTCM_RAM+0x28>)
 8028b2c:	e002      	b.n	8028b34 <LoopFillZerosram2>

08028b2e <FillZerosram2>:
 8028b2e:	2300      	movs	r3, #0
 8028b30:	f842 3b04 	str.w	r3, [r2], #4

08028b34 <LoopFillZerosram2>:
 8028b34:	4b0e      	ldr	r3, [pc, #56]	; (8028b70 <LoopFillZeroDTCM_RAM+0x2c>)
 8028b36:	429a      	cmp	r2, r3
 8028b38:	d3f9      	bcc.n	8028b2e <FillZerosram2>
 8028b3a:	4a0e      	ldr	r2, [pc, #56]	; (8028b74 <LoopFillZeroDTCM_RAM+0x30>)
 8028b3c:	e002      	b.n	8028b44 <LoopFillZeroDTCM_RAM>

08028b3e <FillZeroDTCM_RAM>:
 8028b3e:	2300      	movs	r3, #0
 8028b40:	f842 3b04 	str.w	r3, [r2], #4

08028b44 <LoopFillZeroDTCM_RAM>:
 8028b44:	4b0c      	ldr	r3, [pc, #48]	; (8028b78 <LoopFillZeroDTCM_RAM+0x34>)
 8028b46:	429a      	cmp	r2, r3
 8028b48:	d3f9      	bcc.n	8028b3e <FillZeroDTCM_RAM>
 8028b4a:	f7ff fe1b 	bl	8028784 <SystemInit>
 8028b4e:	f7eb fdd1 	bl	80146f4 <main>
 8028b52:	4770      	bx	lr
 8028b54:	20020000 	.word	0x20020000
 8028b58:	0803e9e2 	.word	0x0803e9e2
 8028b5c:	20000000 	.word	0x20000000
 8028b60:	20002be8 	.word	0x20002be8
 8028b64:	20002be8 	.word	0x20002be8
 8028b68:	2000cf30 	.word	0x2000cf30
 8028b6c:	2007c000 	.word	0x2007c000
 8028b70:	2007c000 	.word	0x2007c000
 8028b74:	2000cf30 	.word	0x2000cf30
 8028b78:	2000cf98 	.word	0x2000cf98

08028b7c <ADC_IRQHandler>:
 8028b7c:	e7fe      	b.n	8028b7c <ADC_IRQHandler>
	...

08028b80 <actualizarTelemetria>:
**  Descripcion:    Actualiza las muestras de las IMUs
**  Parametros:     Tiempo actual
**  Retorno:        Ninguno
****************************************************************************************/
void actualizarTelemetria(uint32_t tiempoActual)
{
 8028b80:	b580      	push	{r7, lr}
 8028b82:	b0a4      	sub	sp, #144	; 0x90
 8028b84:	af00      	add	r7, sp, #0
 8028b86:	6078      	str	r0, [r7, #4]
    UNUSED(tiempoActual);
    float ref[3], w1[3], w2[3], w3[3], wG[3], a1[3], a2[3], a3[3], aG[3], euler[3], u[3];

    refAngulosRC(ref);
 8028b88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8028b8c:	4618      	mov	r0, r3
 8028b8e:	f7f3 fa71 	bl	801c074 <refAngulosRC>

    giroNumIMU(IMU_1, w1);
 8028b92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028b96:	4619      	mov	r1, r3
 8028b98:	2000      	movs	r0, #0
 8028b9a:	f7fc ffdb 	bl	8025b54 <giroNumIMU>
    giroNumIMU(IMU_2, w2);
 8028b9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8028ba2:	4619      	mov	r1, r3
 8028ba4:	2001      	movs	r0, #1
 8028ba6:	f7fc ffd5 	bl	8025b54 <giroNumIMU>
    giroNumIMU(IMU_3, w3);
 8028baa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8028bae:	4619      	mov	r1, r3
 8028bb0:	2002      	movs	r0, #2
 8028bb2:	f7fc ffcf 	bl	8025b54 <giroNumIMU>
    giroIMU(wG);
 8028bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028bba:	4618      	mov	r0, r3
 8028bbc:	f7fc ff96 	bl	8025aec <giroIMU>

    acelNumIMU(IMU_1, a1);
 8028bc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8028bc4:	4619      	mov	r1, r3
 8028bc6:	2000      	movs	r0, #0
 8028bc8:	f7fc fff6 	bl	8025bb8 <acelNumIMU>
    acelNumIMU(IMU_2, a2);
 8028bcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8028bd0:	4619      	mov	r1, r3
 8028bd2:	2001      	movs	r0, #1
 8028bd4:	f7fc fff0 	bl	8025bb8 <acelNumIMU>
    acelNumIMU(IMU_3, a3);
 8028bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028bdc:	4619      	mov	r1, r3
 8028bde:	2002      	movs	r0, #2
 8028be0:	f7fc ffea 	bl	8025bb8 <acelNumIMU>
    acelIMU(aG);
 8028be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028be8:	4618      	mov	r0, r3
 8028bea:	f7fc ff99 	bl	8025b20 <acelIMU>

    actitudAHRS(euler);
 8028bee:	f107 0318 	add.w	r3, r7, #24
 8028bf2:	4618      	mov	r0, r3
 8028bf4:	f7e8 f9dc 	bl	8010fb0 <actitudAHRS>

    u[0] = uRollPID();
 8028bf8:	f7f2 f926 	bl	801ae48 <uRollPID>
 8028bfc:	eef0 7a40 	vmov.f32	s15, s0
 8028c00:	edc7 7a03 	vstr	s15, [r7, #12]
    u[1] = uPitchPID();
 8028c04:	f7f2 f92e 	bl	801ae64 <uPitchPID>
 8028c08:	eef0 7a40 	vmov.f32	s15, s0
 8028c0c:	edc7 7a04 	vstr	s15, [r7, #16]
    u[2] = uYawPID();
 8028c10:	f7f2 f936 	bl	801ae80 <uYawPID>
 8028c14:	eef0 7a40 	vmov.f32	s15, s0
 8028c18:	edc7 7a05 	vstr	s15, [r7, #20]


    iniciarBufferTelemetria();
 8028c1c:	f000 f830 	bl	8028c80 <iniciarBufferTelemetria>

    //insertarBufferTelemetria(ref, 3);
    insertarBufferTelemetria(euler, 3);
 8028c20:	f107 0318 	add.w	r3, r7, #24
 8028c24:	2103      	movs	r1, #3
 8028c26:	4618      	mov	r0, r3
 8028c28:	f000 f884 	bl	8028d34 <insertarBufferTelemetria>
    insertarBufferTelemetria(aG, 3);
    insertarBufferTelemetria(a1, 3);
    insertarBufferTelemetria(a2, 3);
    insertarBufferTelemetria(a3, 3);
    insertarBufferTelemetria(u, 3);*/
    terminarBufferTelemetria();
 8028c2c:	f000 f834 	bl	8028c98 <terminarBufferTelemetria>

    escribirBufferUSB(telBuffer.buffer, obtenerNumBytesBufferTelemetria());
 8028c30:	f000 f8a0 	bl	8028d74 <obtenerNumBytesBufferTelemetria>
 8028c34:	4603      	mov	r3, r0
 8028c36:	4619      	mov	r1, r3
 8028c38:	480e      	ldr	r0, [pc, #56]	; (8028c74 <actualizarTelemetria+0xf4>)
 8028c3a:	f7f1 fe0a 	bl	801a852 <escribirBufferUSB>

    sprintf(var, "%.02f,%.02f,%.02f", u[0], u[1], u[2]);
    escribirBufferUSB((uint8_t *)var, strlen(var));
    terminarBufferTelemetria();
*/
    numBytes = bytesRecibidosUSB();
 8028c3e:	f7f1 fe5e 	bl	801a8fe <bytesRecibidosUSB>
 8028c42:	4603      	mov	r3, r0
 8028c44:	461a      	mov	r2, r3
 8028c46:	4b0c      	ldr	r3, [pc, #48]	; (8028c78 <actualizarTelemetria+0xf8>)
 8028c48:	601a      	str	r2, [r3, #0]
    while (numBytes > 0) {
 8028c4a:	e00a      	b.n	8028c62 <actualizarTelemetria+0xe2>

        dato = leerUSB();
 8028c4c:	f7f1 fe1c 	bl	801a888 <leerUSB>
 8028c50:	4603      	mov	r3, r0
 8028c52:	b2da      	uxtb	r2, r3
 8028c54:	4b09      	ldr	r3, [pc, #36]	; (8028c7c <actualizarTelemetria+0xfc>)
 8028c56:	701a      	strb	r2, [r3, #0]
        numBytes = numBytes-1;
 8028c58:	4b07      	ldr	r3, [pc, #28]	; (8028c78 <actualizarTelemetria+0xf8>)
 8028c5a:	681b      	ldr	r3, [r3, #0]
 8028c5c:	3b01      	subs	r3, #1
 8028c5e:	4a06      	ldr	r2, [pc, #24]	; (8028c78 <actualizarTelemetria+0xf8>)
 8028c60:	6013      	str	r3, [r2, #0]
    while (numBytes > 0) {
 8028c62:	4b05      	ldr	r3, [pc, #20]	; (8028c78 <actualizarTelemetria+0xf8>)
 8028c64:	681b      	ldr	r3, [r3, #0]
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	dcf0      	bgt.n	8028c4c <actualizarTelemetria+0xcc>

    }

}
 8028c6a:	bf00      	nop
 8028c6c:	bf00      	nop
 8028c6e:	3790      	adds	r7, #144	; 0x90
 8028c70:	46bd      	mov	sp, r7
 8028c72:	bd80      	pop	{r7, pc}
 8028c74:	2000cc4e 	.word	0x2000cc4e
 8028c78:	2000ce44 	.word	0x2000ce44
 8028c7c:	2000ce48 	.word	0x2000ce48

08028c80 <iniciarBufferTelemetria>:
**  Descripcion:    Inicia el buffer de la telemetria
**  Parametros:     Dato a insertar
**  Retorno:        Ninguno
****************************************************************************************/
void iniciarBufferTelemetria(void)
{
 8028c80:	b480      	push	{r7}
 8028c82:	af00      	add	r7, sp, #0
    telBuffer.indice = 0;
 8028c84:	4b03      	ldr	r3, [pc, #12]	; (8028c94 <iniciarBufferTelemetria+0x14>)
 8028c86:	2200      	movs	r2, #0
 8028c88:	801a      	strh	r2, [r3, #0]
}
 8028c8a:	bf00      	nop
 8028c8c:	46bd      	mov	sp, r7
 8028c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c92:	4770      	bx	lr
 8028c94:	2000cc4c 	.word	0x2000cc4c

08028c98 <terminarBufferTelemetria>:
**  Descripcion:    Termina el buffer de la telemetria
**  Parametros:     Dato a insertar
**  Retorno:        Ninguno
****************************************************************************************/
void terminarBufferTelemetria(void)
{
 8028c98:	b480      	push	{r7}
 8028c9a:	af00      	add	r7, sp, #0
    telBuffer.buffer[telBuffer.indice] = '\r';
 8028c9c:	4b0f      	ldr	r3, [pc, #60]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028c9e:	881b      	ldrh	r3, [r3, #0]
 8028ca0:	461a      	mov	r2, r3
 8028ca2:	4b0e      	ldr	r3, [pc, #56]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028ca4:	4413      	add	r3, r2
 8028ca6:	220d      	movs	r2, #13
 8028ca8:	709a      	strb	r2, [r3, #2]
    telBuffer.indice++;
 8028caa:	4b0c      	ldr	r3, [pc, #48]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cac:	881b      	ldrh	r3, [r3, #0]
 8028cae:	3301      	adds	r3, #1
 8028cb0:	b29a      	uxth	r2, r3
 8028cb2:	4b0a      	ldr	r3, [pc, #40]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cb4:	801a      	strh	r2, [r3, #0]
    telBuffer.buffer[telBuffer.indice] = '\n';
 8028cb6:	4b09      	ldr	r3, [pc, #36]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cb8:	881b      	ldrh	r3, [r3, #0]
 8028cba:	461a      	mov	r2, r3
 8028cbc:	4b07      	ldr	r3, [pc, #28]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cbe:	4413      	add	r3, r2
 8028cc0:	220a      	movs	r2, #10
 8028cc2:	709a      	strb	r2, [r3, #2]
    telBuffer.indice++;
 8028cc4:	4b05      	ldr	r3, [pc, #20]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cc6:	881b      	ldrh	r3, [r3, #0]
 8028cc8:	3301      	adds	r3, #1
 8028cca:	b29a      	uxth	r2, r3
 8028ccc:	4b03      	ldr	r3, [pc, #12]	; (8028cdc <terminarBufferTelemetria+0x44>)
 8028cce:	801a      	strh	r2, [r3, #0]
}
 8028cd0:	bf00      	nop
 8028cd2:	46bd      	mov	sp, r7
 8028cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cd8:	4770      	bx	lr
 8028cda:	bf00      	nop
 8028cdc:	2000cc4c 	.word	0x2000cc4c

08028ce0 <insertarDatoTelemetria>:
**  Descripcion:    Inserta un float en el buffer de telemetria
**  Parametros:     Dato a insertar
**  Retorno:        Ninguno
****************************************************************************************/
void insertarDatoTelemetria(float dato)
{
 8028ce0:	b480      	push	{r7}
 8028ce2:	b085      	sub	sp, #20
 8028ce4:	af00      	add	r7, sp, #0
 8028ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	datoTelemetria_t datoTel;

	datoTel.valor = dato;
 8028cea:	687b      	ldr	r3, [r7, #4]
 8028cec:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8028cee:	2300      	movs	r3, #0
 8028cf0:	73fb      	strb	r3, [r7, #15]
 8028cf2:	e013      	b.n	8028d1c <insertarDatoTelemetria+0x3c>
    	telBuffer.buffer[telBuffer.indice] = datoTel.byte[i];
 8028cf4:	7bfb      	ldrb	r3, [r7, #15]
 8028cf6:	4a0e      	ldr	r2, [pc, #56]	; (8028d30 <insertarDatoTelemetria+0x50>)
 8028cf8:	8812      	ldrh	r2, [r2, #0]
 8028cfa:	4611      	mov	r1, r2
 8028cfc:	3310      	adds	r3, #16
 8028cfe:	443b      	add	r3, r7
 8028d00:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8028d04:	4b0a      	ldr	r3, [pc, #40]	; (8028d30 <insertarDatoTelemetria+0x50>)
 8028d06:	440b      	add	r3, r1
 8028d08:	709a      	strb	r2, [r3, #2]
    	telBuffer.indice++;
 8028d0a:	4b09      	ldr	r3, [pc, #36]	; (8028d30 <insertarDatoTelemetria+0x50>)
 8028d0c:	881b      	ldrh	r3, [r3, #0]
 8028d0e:	3301      	adds	r3, #1
 8028d10:	b29a      	uxth	r2, r3
 8028d12:	4b07      	ldr	r3, [pc, #28]	; (8028d30 <insertarDatoTelemetria+0x50>)
 8028d14:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8028d16:	7bfb      	ldrb	r3, [r7, #15]
 8028d18:	3301      	adds	r3, #1
 8028d1a:	73fb      	strb	r3, [r7, #15]
 8028d1c:	7bfb      	ldrb	r3, [r7, #15]
 8028d1e:	2b03      	cmp	r3, #3
 8028d20:	d9e8      	bls.n	8028cf4 <insertarDatoTelemetria+0x14>
    }
}
 8028d22:	bf00      	nop
 8028d24:	bf00      	nop
 8028d26:	3714      	adds	r7, #20
 8028d28:	46bd      	mov	sp, r7
 8028d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d2e:	4770      	bx	lr
 8028d30:	2000cc4c 	.word	0x2000cc4c

08028d34 <insertarBufferTelemetria>:
**  Descripcion:    Inserta un buffer de float en el buffer de telemetria
**  Parametros:     Buffer a insertar, longitud del buffer
**  Retorno:        Ninguno
****************************************************************************************/
void insertarBufferTelemetria(float *dato, uint16_t longitud)
{
 8028d34:	b580      	push	{r7, lr}
 8028d36:	b084      	sub	sp, #16
 8028d38:	af00      	add	r7, sp, #0
 8028d3a:	6078      	str	r0, [r7, #4]
 8028d3c:	460b      	mov	r3, r1
 8028d3e:	807b      	strh	r3, [r7, #2]
    for (uint8_t i = 0; i < longitud; i++)
 8028d40:	2300      	movs	r3, #0
 8028d42:	73fb      	strb	r3, [r7, #15]
 8028d44:	e00c      	b.n	8028d60 <insertarBufferTelemetria+0x2c>
    	insertarDatoTelemetria(dato[i]);
 8028d46:	7bfb      	ldrb	r3, [r7, #15]
 8028d48:	009b      	lsls	r3, r3, #2
 8028d4a:	687a      	ldr	r2, [r7, #4]
 8028d4c:	4413      	add	r3, r2
 8028d4e:	edd3 7a00 	vldr	s15, [r3]
 8028d52:	eeb0 0a67 	vmov.f32	s0, s15
 8028d56:	f7ff ffc3 	bl	8028ce0 <insertarDatoTelemetria>
    for (uint8_t i = 0; i < longitud; i++)
 8028d5a:	7bfb      	ldrb	r3, [r7, #15]
 8028d5c:	3301      	adds	r3, #1
 8028d5e:	73fb      	strb	r3, [r7, #15]
 8028d60:	7bfb      	ldrb	r3, [r7, #15]
 8028d62:	b29b      	uxth	r3, r3
 8028d64:	887a      	ldrh	r2, [r7, #2]
 8028d66:	429a      	cmp	r2, r3
 8028d68:	d8ed      	bhi.n	8028d46 <insertarBufferTelemetria+0x12>
}
 8028d6a:	bf00      	nop
 8028d6c:	bf00      	nop
 8028d6e:	3710      	adds	r7, #16
 8028d70:	46bd      	mov	sp, r7
 8028d72:	bd80      	pop	{r7, pc}

08028d74 <obtenerNumBytesBufferTelemetria>:
**  Descripcion:    Devuelve el numero de bytes cargados en el buffer
**  Parametros:     Ninguno
**  Retorno:        Numero de bytes
****************************************************************************************/
uint16_t obtenerNumBytesBufferTelemetria(void)
{
 8028d74:	b480      	push	{r7}
 8028d76:	af00      	add	r7, sp, #0
	return telBuffer.indice;
 8028d78:	4b03      	ldr	r3, [pc, #12]	; (8028d88 <obtenerNumBytesBufferTelemetria+0x14>)
 8028d7a:	881b      	ldrh	r3, [r3, #0]
}
 8028d7c:	4618      	mov	r0, r3
 8028d7e:	46bd      	mov	sp, r7
 8028d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d84:	4770      	bx	lr
 8028d86:	bf00      	nop
 8028d88:	2000cc4c 	.word	0x2000cc4c

08028d8c <iniciarVersion>:
**  Descripcion:    Calcula la version de la placa
**  Parametros:     Ninguno
**  Retorno:        True si OK
****************************************************************************************/
bool iniciarVersion(void)
{
 8028d8c:	b580      	push	{r7, lr}
 8028d8e:	af00      	add	r7, sp, #0
#ifdef USAR_VERSION_HW_ADC
    if (!iniciadoADC()) {
 8028d90:	f7eb fd72 	bl	8014878 <iniciadoADC>
 8028d94:	4603      	mov	r3, r0
 8028d96:	f083 0301 	eor.w	r3, r3, #1
 8028d9a:	b2db      	uxtb	r3, r3
 8028d9c:	2b00      	cmp	r3, #0
 8028d9e:	d00c      	beq.n	8028dba <iniciarVersion+0x2e>
        if (!iniciarADC()) {
 8028da0:	f7eb fcfc 	bl	801479c <iniciarADC>
 8028da4:	4603      	mov	r3, r0
 8028da6:	f083 0301 	eor.w	r3, r3, #1
 8028daa:	b2db      	uxtb	r3, r3
 8028dac:	2b00      	cmp	r3, #0
 8028dae:	d004      	beq.n	8028dba <iniciarVersion+0x2e>
#ifdef DEBUG
            printf("Fallo al calcular la version HW\n");
 8028db0:	4809      	ldr	r0, [pc, #36]	; (8028dd8 <iniciarVersion+0x4c>)
 8028db2:	f00d f825 	bl	8035e00 <puts>
#endif
	        return false;
 8028db6:	2300      	movs	r3, #0
 8028db8:	e00c      	b.n	8028dd4 <iniciarVersion+0x48>
        }
    }

    version = calcularVersionPlaca();
 8028dba:	f000 f813 	bl	8028de4 <calcularVersionPlaca>
 8028dbe:	4603      	mov	r3, r0
 8028dc0:	461a      	mov	r2, r3
 8028dc2:	4b06      	ldr	r3, [pc, #24]	; (8028ddc <iniciarVersion+0x50>)
 8028dc4:	701a      	strb	r2, [r3, #0]
    revision = calcularRevisionPlaca();
 8028dc6:	f000 f823 	bl	8028e10 <calcularRevisionPlaca>
 8028dca:	4603      	mov	r3, r0
 8028dcc:	461a      	mov	r2, r3
 8028dce:	4b04      	ldr	r3, [pc, #16]	; (8028de0 <iniciarVersion+0x54>)
 8028dd0:	701a      	strb	r2, [r3, #0]

#else
    version = 0;
    revision = 0;
#endif
    return true;
 8028dd2:	2301      	movs	r3, #1
}
 8028dd4:	4618      	mov	r0, r3
 8028dd6:	bd80      	pop	{r7, pc}
 8028dd8:	0803ad40 	.word	0x0803ad40
 8028ddc:	2000ce49 	.word	0x2000ce49
 8028de0:	2000ce4a 	.word	0x2000ce4a

08028de4 <calcularVersionPlaca>:
**  Descripcion:    Calcula la version de la placa
**  Parametros:     Ninguno
**  Retorno:        Version
****************************************************************************************/
uint8_t calcularVersionPlaca(void)
{
 8028de4:	b580      	push	{r7, lr}
 8028de6:	b082      	sub	sp, #8
 8028de8:	af00      	add	r7, sp, #0
#ifdef USAR_VERSION_HW_ADC
	uint16_t rango = VALOR_LIMITE_ADC / NUM_RANGOS_VERSION;
 8028dea:	f240 1399 	movw	r3, #409	; 0x199
 8028dee:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)leerCanalADC(HW_VER_ADC) / rango + 1;
 8028df0:	2000      	movs	r0, #0
 8028df2:	f7eb fd99 	bl	8014928 <leerCanalADC>
 8028df6:	4603      	mov	r3, r0
 8028df8:	b2db      	uxtb	r3, r3
 8028dfa:	461a      	mov	r2, r3
 8028dfc:	88fb      	ldrh	r3, [r7, #6]
 8028dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e02:	b2db      	uxtb	r3, r3
 8028e04:	3301      	adds	r3, #1
 8028e06:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif
}
 8028e08:	4618      	mov	r0, r3
 8028e0a:	3708      	adds	r7, #8
 8028e0c:	46bd      	mov	sp, r7
 8028e0e:	bd80      	pop	{r7, pc}

08028e10 <calcularRevisionPlaca>:
**  Descripcion:    Calcula la revision de la placa
**  Parametros:     Ninguno
**  Retorno:        Revision
****************************************************************************************/
uint8_t calcularRevisionPlaca(void)
{
 8028e10:	b580      	push	{r7, lr}
 8028e12:	b082      	sub	sp, #8
 8028e14:	af00      	add	r7, sp, #0
#ifdef USAR_VERSION_HW_ADC
    uint16_t rango = VALOR_LIMITE_ADC / NUM_RANGOS_VERSION;
 8028e16:	f240 1399 	movw	r3, #409	; 0x199
 8028e1a:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)leerCanalADC(HW_REV_ADC) / rango + 1;
 8028e1c:	2001      	movs	r0, #1
 8028e1e:	f7eb fd83 	bl	8014928 <leerCanalADC>
 8028e22:	4603      	mov	r3, r0
 8028e24:	b2db      	uxtb	r3, r3
 8028e26:	461a      	mov	r2, r3
 8028e28:	88fb      	ldrh	r3, [r7, #6]
 8028e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e2e:	b2db      	uxtb	r3, r3
 8028e30:	3301      	adds	r3, #1
 8028e32:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif
}
 8028e34:	4618      	mov	r0, r3
 8028e36:	3708      	adds	r7, #8
 8028e38:	46bd      	mov	sp, r7
 8028e3a:	bd80      	pop	{r7, pc}

08028e3c <HAL_InitTick>:
 8028e3c:	b580      	push	{r7, lr}
 8028e3e:	b082      	sub	sp, #8
 8028e40:	af00      	add	r7, sp, #0
 8028e42:	6078      	str	r0, [r7, #4]
 8028e44:	4b12      	ldr	r3, [pc, #72]	; (8028e90 <HAL_InitTick+0x54>)
 8028e46:	681a      	ldr	r2, [r3, #0]
 8028e48:	4b12      	ldr	r3, [pc, #72]	; (8028e94 <HAL_InitTick+0x58>)
 8028e4a:	781b      	ldrb	r3, [r3, #0]
 8028e4c:	4619      	mov	r1, r3
 8028e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8028e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8028e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8028e5a:	4618      	mov	r0, r3
 8028e5c:	f001 f84a 	bl	8029ef4 <HAL_SYSTICK_Config>
 8028e60:	4603      	mov	r3, r0
 8028e62:	2b00      	cmp	r3, #0
 8028e64:	d001      	beq.n	8028e6a <HAL_InitTick+0x2e>
 8028e66:	2301      	movs	r3, #1
 8028e68:	e00e      	b.n	8028e88 <HAL_InitTick+0x4c>
 8028e6a:	687b      	ldr	r3, [r7, #4]
 8028e6c:	2b0f      	cmp	r3, #15
 8028e6e:	d80a      	bhi.n	8028e86 <HAL_InitTick+0x4a>
 8028e70:	2200      	movs	r2, #0
 8028e72:	6879      	ldr	r1, [r7, #4]
 8028e74:	f04f 30ff 	mov.w	r0, #4294967295
 8028e78:	f001 f804 	bl	8029e84 <HAL_NVIC_SetPriority>
 8028e7c:	4a06      	ldr	r2, [pc, #24]	; (8028e98 <HAL_InitTick+0x5c>)
 8028e7e:	687b      	ldr	r3, [r7, #4]
 8028e80:	6013      	str	r3, [r2, #0]
 8028e82:	2300      	movs	r3, #0
 8028e84:	e000      	b.n	8028e88 <HAL_InitTick+0x4c>
 8028e86:	2301      	movs	r3, #1
 8028e88:	4618      	mov	r0, r3
 8028e8a:	3708      	adds	r7, #8
 8028e8c:	46bd      	mov	sp, r7
 8028e8e:	bd80      	pop	{r7, pc}
 8028e90:	2000cc48 	.word	0x2000cc48
 8028e94:	2000297c 	.word	0x2000297c
 8028e98:	20002978 	.word	0x20002978

08028e9c <HAL_IncTick>:
 8028e9c:	b480      	push	{r7}
 8028e9e:	af00      	add	r7, sp, #0
 8028ea0:	4b06      	ldr	r3, [pc, #24]	; (8028ebc <HAL_IncTick+0x20>)
 8028ea2:	781b      	ldrb	r3, [r3, #0]
 8028ea4:	461a      	mov	r2, r3
 8028ea6:	4b06      	ldr	r3, [pc, #24]	; (8028ec0 <HAL_IncTick+0x24>)
 8028ea8:	681b      	ldr	r3, [r3, #0]
 8028eaa:	4413      	add	r3, r2
 8028eac:	4a04      	ldr	r2, [pc, #16]	; (8028ec0 <HAL_IncTick+0x24>)
 8028eae:	6013      	str	r3, [r2, #0]
 8028eb0:	bf00      	nop
 8028eb2:	46bd      	mov	sp, r7
 8028eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eb8:	4770      	bx	lr
 8028eba:	bf00      	nop
 8028ebc:	2000297c 	.word	0x2000297c
 8028ec0:	2000ce4c 	.word	0x2000ce4c

08028ec4 <HAL_GetTick>:
 8028ec4:	b480      	push	{r7}
 8028ec6:	af00      	add	r7, sp, #0
 8028ec8:	4b03      	ldr	r3, [pc, #12]	; (8028ed8 <HAL_GetTick+0x14>)
 8028eca:	681b      	ldr	r3, [r3, #0]
 8028ecc:	4618      	mov	r0, r3
 8028ece:	46bd      	mov	sp, r7
 8028ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ed4:	4770      	bx	lr
 8028ed6:	bf00      	nop
 8028ed8:	2000ce4c 	.word	0x2000ce4c

08028edc <HAL_ADC_Init>:
 8028edc:	b580      	push	{r7, lr}
 8028ede:	b084      	sub	sp, #16
 8028ee0:	af00      	add	r7, sp, #0
 8028ee2:	6078      	str	r0, [r7, #4]
 8028ee4:	2300      	movs	r3, #0
 8028ee6:	73fb      	strb	r3, [r7, #15]
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	d101      	bne.n	8028ef2 <HAL_ADC_Init+0x16>
 8028eee:	2301      	movs	r3, #1
 8028ef0:	e031      	b.n	8028f56 <HAL_ADC_Init+0x7a>
 8028ef2:	687b      	ldr	r3, [r7, #4]
 8028ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028ef6:	2b00      	cmp	r3, #0
 8028ef8:	d109      	bne.n	8028f0e <HAL_ADC_Init+0x32>
 8028efa:	6878      	ldr	r0, [r7, #4]
 8028efc:	f000 f832 	bl	8028f64 <HAL_ADC_MspInit>
 8028f00:	687b      	ldr	r3, [r7, #4]
 8028f02:	2200      	movs	r2, #0
 8028f04:	645a      	str	r2, [r3, #68]	; 0x44
 8028f06:	687b      	ldr	r3, [r7, #4]
 8028f08:	2200      	movs	r2, #0
 8028f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028f0e:	687b      	ldr	r3, [r7, #4]
 8028f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f12:	f003 0310 	and.w	r3, r3, #16
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d116      	bne.n	8028f48 <HAL_ADC_Init+0x6c>
 8028f1a:	687b      	ldr	r3, [r7, #4]
 8028f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8028f1e:	4b10      	ldr	r3, [pc, #64]	; (8028f60 <HAL_ADC_Init+0x84>)
 8028f20:	4013      	ands	r3, r2
 8028f22:	f043 0202 	orr.w	r2, r3, #2
 8028f26:	687b      	ldr	r3, [r7, #4]
 8028f28:	641a      	str	r2, [r3, #64]	; 0x40
 8028f2a:	6878      	ldr	r0, [r7, #4]
 8028f2c:	f000 fa64 	bl	80293f8 <ADC_Init>
 8028f30:	687b      	ldr	r3, [r7, #4]
 8028f32:	2200      	movs	r2, #0
 8028f34:	645a      	str	r2, [r3, #68]	; 0x44
 8028f36:	687b      	ldr	r3, [r7, #4]
 8028f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f3a:	f023 0303 	bic.w	r3, r3, #3
 8028f3e:	f043 0201 	orr.w	r2, r3, #1
 8028f42:	687b      	ldr	r3, [r7, #4]
 8028f44:	641a      	str	r2, [r3, #64]	; 0x40
 8028f46:	e001      	b.n	8028f4c <HAL_ADC_Init+0x70>
 8028f48:	2301      	movs	r3, #1
 8028f4a:	73fb      	strb	r3, [r7, #15]
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	2200      	movs	r2, #0
 8028f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028f54:	7bfb      	ldrb	r3, [r7, #15]
 8028f56:	4618      	mov	r0, r3
 8028f58:	3710      	adds	r7, #16
 8028f5a:	46bd      	mov	sp, r7
 8028f5c:	bd80      	pop	{r7, pc}
 8028f5e:	bf00      	nop
 8028f60:	ffffeefd 	.word	0xffffeefd

08028f64 <HAL_ADC_MspInit>:
 8028f64:	b480      	push	{r7}
 8028f66:	b083      	sub	sp, #12
 8028f68:	af00      	add	r7, sp, #0
 8028f6a:	6078      	str	r0, [r7, #4]
 8028f6c:	bf00      	nop
 8028f6e:	370c      	adds	r7, #12
 8028f70:	46bd      	mov	sp, r7
 8028f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f76:	4770      	bx	lr

08028f78 <HAL_ADC_Start_DMA>:
 8028f78:	b580      	push	{r7, lr}
 8028f7a:	b086      	sub	sp, #24
 8028f7c:	af00      	add	r7, sp, #0
 8028f7e:	60f8      	str	r0, [r7, #12]
 8028f80:	60b9      	str	r1, [r7, #8]
 8028f82:	607a      	str	r2, [r7, #4]
 8028f84:	2300      	movs	r3, #0
 8028f86:	617b      	str	r3, [r7, #20]
 8028f88:	68fb      	ldr	r3, [r7, #12]
 8028f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028f8e:	2b01      	cmp	r3, #1
 8028f90:	d101      	bne.n	8028f96 <HAL_ADC_Start_DMA+0x1e>
 8028f92:	2302      	movs	r3, #2
 8028f94:	e0c7      	b.n	8029126 <HAL_ADC_Start_DMA+0x1ae>
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	2201      	movs	r2, #1
 8028f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028f9e:	68fb      	ldr	r3, [r7, #12]
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	689b      	ldr	r3, [r3, #8]
 8028fa4:	f003 0301 	and.w	r3, r3, #1
 8028fa8:	2b01      	cmp	r3, #1
 8028faa:	d018      	beq.n	8028fde <HAL_ADC_Start_DMA+0x66>
 8028fac:	68fb      	ldr	r3, [r7, #12]
 8028fae:	681b      	ldr	r3, [r3, #0]
 8028fb0:	689a      	ldr	r2, [r3, #8]
 8028fb2:	68fb      	ldr	r3, [r7, #12]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	f042 0201 	orr.w	r2, r2, #1
 8028fba:	609a      	str	r2, [r3, #8]
 8028fbc:	4b5c      	ldr	r3, [pc, #368]	; (8029130 <HAL_ADC_Start_DMA+0x1b8>)
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	4a5c      	ldr	r2, [pc, #368]	; (8029134 <HAL_ADC_Start_DMA+0x1bc>)
 8028fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8028fc6:	0c9a      	lsrs	r2, r3, #18
 8028fc8:	4613      	mov	r3, r2
 8028fca:	005b      	lsls	r3, r3, #1
 8028fcc:	4413      	add	r3, r2
 8028fce:	617b      	str	r3, [r7, #20]
 8028fd0:	e002      	b.n	8028fd8 <HAL_ADC_Start_DMA+0x60>
 8028fd2:	697b      	ldr	r3, [r7, #20]
 8028fd4:	3b01      	subs	r3, #1
 8028fd6:	617b      	str	r3, [r7, #20]
 8028fd8:	697b      	ldr	r3, [r7, #20]
 8028fda:	2b00      	cmp	r3, #0
 8028fdc:	d1f9      	bne.n	8028fd2 <HAL_ADC_Start_DMA+0x5a>
 8028fde:	68fb      	ldr	r3, [r7, #12]
 8028fe0:	681b      	ldr	r3, [r3, #0]
 8028fe2:	689b      	ldr	r3, [r3, #8]
 8028fe4:	f003 0301 	and.w	r3, r3, #1
 8028fe8:	2b01      	cmp	r3, #1
 8028fea:	f040 809b 	bne.w	8029124 <HAL_ADC_Start_DMA+0x1ac>
 8028fee:	68fb      	ldr	r3, [r7, #12]
 8028ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8028ff2:	4b51      	ldr	r3, [pc, #324]	; (8029138 <HAL_ADC_Start_DMA+0x1c0>)
 8028ff4:	4013      	ands	r3, r2
 8028ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8028ffa:	68fb      	ldr	r3, [r7, #12]
 8028ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8028ffe:	68fb      	ldr	r3, [r7, #12]
 8029000:	681b      	ldr	r3, [r3, #0]
 8029002:	685b      	ldr	r3, [r3, #4]
 8029004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029008:	2b00      	cmp	r3, #0
 802900a:	d007      	beq.n	802901c <HAL_ADC_Start_DMA+0xa4>
 802900c:	68fb      	ldr	r3, [r7, #12]
 802900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8029014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8029018:	68fb      	ldr	r3, [r7, #12]
 802901a:	641a      	str	r2, [r3, #64]	; 0x40
 802901c:	68fb      	ldr	r3, [r7, #12]
 802901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029028:	d106      	bne.n	8029038 <HAL_ADC_Start_DMA+0xc0>
 802902a:	68fb      	ldr	r3, [r7, #12]
 802902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802902e:	f023 0206 	bic.w	r2, r3, #6
 8029032:	68fb      	ldr	r3, [r7, #12]
 8029034:	645a      	str	r2, [r3, #68]	; 0x44
 8029036:	e002      	b.n	802903e <HAL_ADC_Start_DMA+0xc6>
 8029038:	68fb      	ldr	r3, [r7, #12]
 802903a:	2200      	movs	r2, #0
 802903c:	645a      	str	r2, [r3, #68]	; 0x44
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	2200      	movs	r2, #0
 8029042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8029046:	68fb      	ldr	r3, [r7, #12]
 8029048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802904a:	4a3c      	ldr	r2, [pc, #240]	; (802913c <HAL_ADC_Start_DMA+0x1c4>)
 802904c:	63da      	str	r2, [r3, #60]	; 0x3c
 802904e:	68fb      	ldr	r3, [r7, #12]
 8029050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029052:	4a3b      	ldr	r2, [pc, #236]	; (8029140 <HAL_ADC_Start_DMA+0x1c8>)
 8029054:	641a      	str	r2, [r3, #64]	; 0x40
 8029056:	68fb      	ldr	r3, [r7, #12]
 8029058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802905a:	4a3a      	ldr	r2, [pc, #232]	; (8029144 <HAL_ADC_Start_DMA+0x1cc>)
 802905c:	64da      	str	r2, [r3, #76]	; 0x4c
 802905e:	68fb      	ldr	r3, [r7, #12]
 8029060:	681b      	ldr	r3, [r3, #0]
 8029062:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8029066:	601a      	str	r2, [r3, #0]
 8029068:	68fb      	ldr	r3, [r7, #12]
 802906a:	681b      	ldr	r3, [r3, #0]
 802906c:	685a      	ldr	r2, [r3, #4]
 802906e:	68fb      	ldr	r3, [r7, #12]
 8029070:	681b      	ldr	r3, [r3, #0]
 8029072:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8029076:	605a      	str	r2, [r3, #4]
 8029078:	68fb      	ldr	r3, [r7, #12]
 802907a:	681b      	ldr	r3, [r3, #0]
 802907c:	689a      	ldr	r2, [r3, #8]
 802907e:	68fb      	ldr	r3, [r7, #12]
 8029080:	681b      	ldr	r3, [r3, #0]
 8029082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029086:	609a      	str	r2, [r3, #8]
 8029088:	68fb      	ldr	r3, [r7, #12]
 802908a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	334c      	adds	r3, #76	; 0x4c
 8029092:	4619      	mov	r1, r3
 8029094:	68ba      	ldr	r2, [r7, #8]
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	f001 f84a 	bl	802a130 <HAL_DMA_Start_IT>
 802909c:	4b2a      	ldr	r3, [pc, #168]	; (8029148 <HAL_ADC_Start_DMA+0x1d0>)
 802909e:	685b      	ldr	r3, [r3, #4]
 80290a0:	f003 031f 	and.w	r3, r3, #31
 80290a4:	2b00      	cmp	r3, #0
 80290a6:	d10f      	bne.n	80290c8 <HAL_ADC_Start_DMA+0x150>
 80290a8:	68fb      	ldr	r3, [r7, #12]
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	689b      	ldr	r3, [r3, #8]
 80290ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	d136      	bne.n	8029124 <HAL_ADC_Start_DMA+0x1ac>
 80290b6:	68fb      	ldr	r3, [r7, #12]
 80290b8:	681b      	ldr	r3, [r3, #0]
 80290ba:	689a      	ldr	r2, [r3, #8]
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	681b      	ldr	r3, [r3, #0]
 80290c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80290c4:	609a      	str	r2, [r3, #8]
 80290c6:	e02d      	b.n	8029124 <HAL_ADC_Start_DMA+0x1ac>
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	681b      	ldr	r3, [r3, #0]
 80290cc:	4a1f      	ldr	r2, [pc, #124]	; (802914c <HAL_ADC_Start_DMA+0x1d4>)
 80290ce:	4293      	cmp	r3, r2
 80290d0:	d10e      	bne.n	80290f0 <HAL_ADC_Start_DMA+0x178>
 80290d2:	68fb      	ldr	r3, [r7, #12]
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	689b      	ldr	r3, [r3, #8]
 80290d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80290dc:	2b00      	cmp	r3, #0
 80290de:	d107      	bne.n	80290f0 <HAL_ADC_Start_DMA+0x178>
 80290e0:	68fb      	ldr	r3, [r7, #12]
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	689a      	ldr	r2, [r3, #8]
 80290e6:	68fb      	ldr	r3, [r7, #12]
 80290e8:	681b      	ldr	r3, [r3, #0]
 80290ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80290ee:	609a      	str	r2, [r3, #8]
 80290f0:	4b15      	ldr	r3, [pc, #84]	; (8029148 <HAL_ADC_Start_DMA+0x1d0>)
 80290f2:	685b      	ldr	r3, [r3, #4]
 80290f4:	f003 0310 	and.w	r3, r3, #16
 80290f8:	2b00      	cmp	r3, #0
 80290fa:	d113      	bne.n	8029124 <HAL_ADC_Start_DMA+0x1ac>
 80290fc:	68fb      	ldr	r3, [r7, #12]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	4a13      	ldr	r2, [pc, #76]	; (8029150 <HAL_ADC_Start_DMA+0x1d8>)
 8029102:	4293      	cmp	r3, r2
 8029104:	d10e      	bne.n	8029124 <HAL_ADC_Start_DMA+0x1ac>
 8029106:	68fb      	ldr	r3, [r7, #12]
 8029108:	681b      	ldr	r3, [r3, #0]
 802910a:	689b      	ldr	r3, [r3, #8]
 802910c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8029110:	2b00      	cmp	r3, #0
 8029112:	d107      	bne.n	8029124 <HAL_ADC_Start_DMA+0x1ac>
 8029114:	68fb      	ldr	r3, [r7, #12]
 8029116:	681b      	ldr	r3, [r3, #0]
 8029118:	689a      	ldr	r2, [r3, #8]
 802911a:	68fb      	ldr	r3, [r7, #12]
 802911c:	681b      	ldr	r3, [r3, #0]
 802911e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8029122:	609a      	str	r2, [r3, #8]
 8029124:	2300      	movs	r3, #0
 8029126:	4618      	mov	r0, r3
 8029128:	3718      	adds	r7, #24
 802912a:	46bd      	mov	sp, r7
 802912c:	bd80      	pop	{r7, pc}
 802912e:	bf00      	nop
 8029130:	2000cc48 	.word	0x2000cc48
 8029134:	431bde83 	.word	0x431bde83
 8029138:	fffff8fe 	.word	0xfffff8fe
 802913c:	080295ed 	.word	0x080295ed
 8029140:	080296a7 	.word	0x080296a7
 8029144:	080296c3 	.word	0x080296c3
 8029148:	40012300 	.word	0x40012300
 802914c:	40012000 	.word	0x40012000
 8029150:	40012200 	.word	0x40012200

08029154 <HAL_ADC_ConvCpltCallback>:
 8029154:	b480      	push	{r7}
 8029156:	b083      	sub	sp, #12
 8029158:	af00      	add	r7, sp, #0
 802915a:	6078      	str	r0, [r7, #4]
 802915c:	bf00      	nop
 802915e:	370c      	adds	r7, #12
 8029160:	46bd      	mov	sp, r7
 8029162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029166:	4770      	bx	lr

08029168 <HAL_ADC_ConvHalfCpltCallback>:
 8029168:	b480      	push	{r7}
 802916a:	b083      	sub	sp, #12
 802916c:	af00      	add	r7, sp, #0
 802916e:	6078      	str	r0, [r7, #4]
 8029170:	bf00      	nop
 8029172:	370c      	adds	r7, #12
 8029174:	46bd      	mov	sp, r7
 8029176:	f85d 7b04 	ldr.w	r7, [sp], #4
 802917a:	4770      	bx	lr

0802917c <HAL_ADC_ErrorCallback>:
 802917c:	b480      	push	{r7}
 802917e:	b083      	sub	sp, #12
 8029180:	af00      	add	r7, sp, #0
 8029182:	6078      	str	r0, [r7, #4]
 8029184:	bf00      	nop
 8029186:	370c      	adds	r7, #12
 8029188:	46bd      	mov	sp, r7
 802918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802918e:	4770      	bx	lr

08029190 <HAL_ADC_ConfigChannel>:
 8029190:	b480      	push	{r7}
 8029192:	b085      	sub	sp, #20
 8029194:	af00      	add	r7, sp, #0
 8029196:	6078      	str	r0, [r7, #4]
 8029198:	6039      	str	r1, [r7, #0]
 802919a:	2300      	movs	r3, #0
 802919c:	60fb      	str	r3, [r7, #12]
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80291a4:	2b01      	cmp	r3, #1
 80291a6:	d101      	bne.n	80291ac <HAL_ADC_ConfigChannel+0x1c>
 80291a8:	2302      	movs	r3, #2
 80291aa:	e115      	b.n	80293d8 <HAL_ADC_ConfigChannel+0x248>
 80291ac:	687b      	ldr	r3, [r7, #4]
 80291ae:	2201      	movs	r2, #1
 80291b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80291b4:	683b      	ldr	r3, [r7, #0]
 80291b6:	681b      	ldr	r3, [r3, #0]
 80291b8:	2b09      	cmp	r3, #9
 80291ba:	d935      	bls.n	8029228 <HAL_ADC_ConfigChannel+0x98>
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	681b      	ldr	r3, [r3, #0]
 80291c0:	68d9      	ldr	r1, [r3, #12]
 80291c2:	683b      	ldr	r3, [r7, #0]
 80291c4:	681b      	ldr	r3, [r3, #0]
 80291c6:	b29b      	uxth	r3, r3
 80291c8:	461a      	mov	r2, r3
 80291ca:	4613      	mov	r3, r2
 80291cc:	005b      	lsls	r3, r3, #1
 80291ce:	4413      	add	r3, r2
 80291d0:	3b1e      	subs	r3, #30
 80291d2:	2207      	movs	r2, #7
 80291d4:	fa02 f303 	lsl.w	r3, r2, r3
 80291d8:	43da      	mvns	r2, r3
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	400a      	ands	r2, r1
 80291e0:	60da      	str	r2, [r3, #12]
 80291e2:	683b      	ldr	r3, [r7, #0]
 80291e4:	681b      	ldr	r3, [r3, #0]
 80291e6:	4a7f      	ldr	r2, [pc, #508]	; (80293e4 <HAL_ADC_ConfigChannel+0x254>)
 80291e8:	4293      	cmp	r3, r2
 80291ea:	d10a      	bne.n	8029202 <HAL_ADC_ConfigChannel+0x72>
 80291ec:	687b      	ldr	r3, [r7, #4]
 80291ee:	681b      	ldr	r3, [r3, #0]
 80291f0:	68d9      	ldr	r1, [r3, #12]
 80291f2:	683b      	ldr	r3, [r7, #0]
 80291f4:	689b      	ldr	r3, [r3, #8]
 80291f6:	061a      	lsls	r2, r3, #24
 80291f8:	687b      	ldr	r3, [r7, #4]
 80291fa:	681b      	ldr	r3, [r3, #0]
 80291fc:	430a      	orrs	r2, r1
 80291fe:	60da      	str	r2, [r3, #12]
 8029200:	e035      	b.n	802926e <HAL_ADC_ConfigChannel+0xde>
 8029202:	687b      	ldr	r3, [r7, #4]
 8029204:	681b      	ldr	r3, [r3, #0]
 8029206:	68d9      	ldr	r1, [r3, #12]
 8029208:	683b      	ldr	r3, [r7, #0]
 802920a:	689a      	ldr	r2, [r3, #8]
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	b29b      	uxth	r3, r3
 8029212:	4618      	mov	r0, r3
 8029214:	4603      	mov	r3, r0
 8029216:	005b      	lsls	r3, r3, #1
 8029218:	4403      	add	r3, r0
 802921a:	3b1e      	subs	r3, #30
 802921c:	409a      	lsls	r2, r3
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	430a      	orrs	r2, r1
 8029224:	60da      	str	r2, [r3, #12]
 8029226:	e022      	b.n	802926e <HAL_ADC_ConfigChannel+0xde>
 8029228:	687b      	ldr	r3, [r7, #4]
 802922a:	681b      	ldr	r3, [r3, #0]
 802922c:	6919      	ldr	r1, [r3, #16]
 802922e:	683b      	ldr	r3, [r7, #0]
 8029230:	681b      	ldr	r3, [r3, #0]
 8029232:	b29b      	uxth	r3, r3
 8029234:	461a      	mov	r2, r3
 8029236:	4613      	mov	r3, r2
 8029238:	005b      	lsls	r3, r3, #1
 802923a:	4413      	add	r3, r2
 802923c:	2207      	movs	r2, #7
 802923e:	fa02 f303 	lsl.w	r3, r2, r3
 8029242:	43da      	mvns	r2, r3
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	681b      	ldr	r3, [r3, #0]
 8029248:	400a      	ands	r2, r1
 802924a:	611a      	str	r2, [r3, #16]
 802924c:	687b      	ldr	r3, [r7, #4]
 802924e:	681b      	ldr	r3, [r3, #0]
 8029250:	6919      	ldr	r1, [r3, #16]
 8029252:	683b      	ldr	r3, [r7, #0]
 8029254:	689a      	ldr	r2, [r3, #8]
 8029256:	683b      	ldr	r3, [r7, #0]
 8029258:	681b      	ldr	r3, [r3, #0]
 802925a:	b29b      	uxth	r3, r3
 802925c:	4618      	mov	r0, r3
 802925e:	4603      	mov	r3, r0
 8029260:	005b      	lsls	r3, r3, #1
 8029262:	4403      	add	r3, r0
 8029264:	409a      	lsls	r2, r3
 8029266:	687b      	ldr	r3, [r7, #4]
 8029268:	681b      	ldr	r3, [r3, #0]
 802926a:	430a      	orrs	r2, r1
 802926c:	611a      	str	r2, [r3, #16]
 802926e:	683b      	ldr	r3, [r7, #0]
 8029270:	685b      	ldr	r3, [r3, #4]
 8029272:	2b06      	cmp	r3, #6
 8029274:	d824      	bhi.n	80292c0 <HAL_ADC_ConfigChannel+0x130>
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	681b      	ldr	r3, [r3, #0]
 802927a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802927c:	683b      	ldr	r3, [r7, #0]
 802927e:	685a      	ldr	r2, [r3, #4]
 8029280:	4613      	mov	r3, r2
 8029282:	009b      	lsls	r3, r3, #2
 8029284:	4413      	add	r3, r2
 8029286:	3b05      	subs	r3, #5
 8029288:	221f      	movs	r2, #31
 802928a:	fa02 f303 	lsl.w	r3, r2, r3
 802928e:	43da      	mvns	r2, r3
 8029290:	687b      	ldr	r3, [r7, #4]
 8029292:	681b      	ldr	r3, [r3, #0]
 8029294:	400a      	ands	r2, r1
 8029296:	635a      	str	r2, [r3, #52]	; 0x34
 8029298:	687b      	ldr	r3, [r7, #4]
 802929a:	681b      	ldr	r3, [r3, #0]
 802929c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802929e:	683b      	ldr	r3, [r7, #0]
 80292a0:	681b      	ldr	r3, [r3, #0]
 80292a2:	b29b      	uxth	r3, r3
 80292a4:	4618      	mov	r0, r3
 80292a6:	683b      	ldr	r3, [r7, #0]
 80292a8:	685a      	ldr	r2, [r3, #4]
 80292aa:	4613      	mov	r3, r2
 80292ac:	009b      	lsls	r3, r3, #2
 80292ae:	4413      	add	r3, r2
 80292b0:	3b05      	subs	r3, #5
 80292b2:	fa00 f203 	lsl.w	r2, r0, r3
 80292b6:	687b      	ldr	r3, [r7, #4]
 80292b8:	681b      	ldr	r3, [r3, #0]
 80292ba:	430a      	orrs	r2, r1
 80292bc:	635a      	str	r2, [r3, #52]	; 0x34
 80292be:	e04c      	b.n	802935a <HAL_ADC_ConfigChannel+0x1ca>
 80292c0:	683b      	ldr	r3, [r7, #0]
 80292c2:	685b      	ldr	r3, [r3, #4]
 80292c4:	2b0c      	cmp	r3, #12
 80292c6:	d824      	bhi.n	8029312 <HAL_ADC_ConfigChannel+0x182>
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	681b      	ldr	r3, [r3, #0]
 80292cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80292ce:	683b      	ldr	r3, [r7, #0]
 80292d0:	685a      	ldr	r2, [r3, #4]
 80292d2:	4613      	mov	r3, r2
 80292d4:	009b      	lsls	r3, r3, #2
 80292d6:	4413      	add	r3, r2
 80292d8:	3b23      	subs	r3, #35	; 0x23
 80292da:	221f      	movs	r2, #31
 80292dc:	fa02 f303 	lsl.w	r3, r2, r3
 80292e0:	43da      	mvns	r2, r3
 80292e2:	687b      	ldr	r3, [r7, #4]
 80292e4:	681b      	ldr	r3, [r3, #0]
 80292e6:	400a      	ands	r2, r1
 80292e8:	631a      	str	r2, [r3, #48]	; 0x30
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	681b      	ldr	r3, [r3, #0]
 80292ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80292f0:	683b      	ldr	r3, [r7, #0]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	b29b      	uxth	r3, r3
 80292f6:	4618      	mov	r0, r3
 80292f8:	683b      	ldr	r3, [r7, #0]
 80292fa:	685a      	ldr	r2, [r3, #4]
 80292fc:	4613      	mov	r3, r2
 80292fe:	009b      	lsls	r3, r3, #2
 8029300:	4413      	add	r3, r2
 8029302:	3b23      	subs	r3, #35	; 0x23
 8029304:	fa00 f203 	lsl.w	r2, r0, r3
 8029308:	687b      	ldr	r3, [r7, #4]
 802930a:	681b      	ldr	r3, [r3, #0]
 802930c:	430a      	orrs	r2, r1
 802930e:	631a      	str	r2, [r3, #48]	; 0x30
 8029310:	e023      	b.n	802935a <HAL_ADC_ConfigChannel+0x1ca>
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	681b      	ldr	r3, [r3, #0]
 8029316:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8029318:	683b      	ldr	r3, [r7, #0]
 802931a:	685a      	ldr	r2, [r3, #4]
 802931c:	4613      	mov	r3, r2
 802931e:	009b      	lsls	r3, r3, #2
 8029320:	4413      	add	r3, r2
 8029322:	3b41      	subs	r3, #65	; 0x41
 8029324:	221f      	movs	r2, #31
 8029326:	fa02 f303 	lsl.w	r3, r2, r3
 802932a:	43da      	mvns	r2, r3
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	681b      	ldr	r3, [r3, #0]
 8029330:	400a      	ands	r2, r1
 8029332:	62da      	str	r2, [r3, #44]	; 0x2c
 8029334:	687b      	ldr	r3, [r7, #4]
 8029336:	681b      	ldr	r3, [r3, #0]
 8029338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802933a:	683b      	ldr	r3, [r7, #0]
 802933c:	681b      	ldr	r3, [r3, #0]
 802933e:	b29b      	uxth	r3, r3
 8029340:	4618      	mov	r0, r3
 8029342:	683b      	ldr	r3, [r7, #0]
 8029344:	685a      	ldr	r2, [r3, #4]
 8029346:	4613      	mov	r3, r2
 8029348:	009b      	lsls	r3, r3, #2
 802934a:	4413      	add	r3, r2
 802934c:	3b41      	subs	r3, #65	; 0x41
 802934e:	fa00 f203 	lsl.w	r2, r0, r3
 8029352:	687b      	ldr	r3, [r7, #4]
 8029354:	681b      	ldr	r3, [r3, #0]
 8029356:	430a      	orrs	r2, r1
 8029358:	62da      	str	r2, [r3, #44]	; 0x2c
 802935a:	687b      	ldr	r3, [r7, #4]
 802935c:	681b      	ldr	r3, [r3, #0]
 802935e:	4a22      	ldr	r2, [pc, #136]	; (80293e8 <HAL_ADC_ConfigChannel+0x258>)
 8029360:	4293      	cmp	r3, r2
 8029362:	d109      	bne.n	8029378 <HAL_ADC_ConfigChannel+0x1e8>
 8029364:	683b      	ldr	r3, [r7, #0]
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	2b12      	cmp	r3, #18
 802936a:	d105      	bne.n	8029378 <HAL_ADC_ConfigChannel+0x1e8>
 802936c:	4b1f      	ldr	r3, [pc, #124]	; (80293ec <HAL_ADC_ConfigChannel+0x25c>)
 802936e:	685b      	ldr	r3, [r3, #4]
 8029370:	4a1e      	ldr	r2, [pc, #120]	; (80293ec <HAL_ADC_ConfigChannel+0x25c>)
 8029372:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8029376:	6053      	str	r3, [r2, #4]
 8029378:	687b      	ldr	r3, [r7, #4]
 802937a:	681b      	ldr	r3, [r3, #0]
 802937c:	4a1a      	ldr	r2, [pc, #104]	; (80293e8 <HAL_ADC_ConfigChannel+0x258>)
 802937e:	4293      	cmp	r3, r2
 8029380:	d125      	bne.n	80293ce <HAL_ADC_ConfigChannel+0x23e>
 8029382:	683b      	ldr	r3, [r7, #0]
 8029384:	681b      	ldr	r3, [r3, #0]
 8029386:	4a17      	ldr	r2, [pc, #92]	; (80293e4 <HAL_ADC_ConfigChannel+0x254>)
 8029388:	4293      	cmp	r3, r2
 802938a:	d003      	beq.n	8029394 <HAL_ADC_ConfigChannel+0x204>
 802938c:	683b      	ldr	r3, [r7, #0]
 802938e:	681b      	ldr	r3, [r3, #0]
 8029390:	2b11      	cmp	r3, #17
 8029392:	d11c      	bne.n	80293ce <HAL_ADC_ConfigChannel+0x23e>
 8029394:	4b15      	ldr	r3, [pc, #84]	; (80293ec <HAL_ADC_ConfigChannel+0x25c>)
 8029396:	685b      	ldr	r3, [r3, #4]
 8029398:	4a14      	ldr	r2, [pc, #80]	; (80293ec <HAL_ADC_ConfigChannel+0x25c>)
 802939a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802939e:	6053      	str	r3, [r2, #4]
 80293a0:	683b      	ldr	r3, [r7, #0]
 80293a2:	681b      	ldr	r3, [r3, #0]
 80293a4:	4a0f      	ldr	r2, [pc, #60]	; (80293e4 <HAL_ADC_ConfigChannel+0x254>)
 80293a6:	4293      	cmp	r3, r2
 80293a8:	d111      	bne.n	80293ce <HAL_ADC_ConfigChannel+0x23e>
 80293aa:	4b11      	ldr	r3, [pc, #68]	; (80293f0 <HAL_ADC_ConfigChannel+0x260>)
 80293ac:	681b      	ldr	r3, [r3, #0]
 80293ae:	4a11      	ldr	r2, [pc, #68]	; (80293f4 <HAL_ADC_ConfigChannel+0x264>)
 80293b0:	fba2 2303 	umull	r2, r3, r2, r3
 80293b4:	0c9a      	lsrs	r2, r3, #18
 80293b6:	4613      	mov	r3, r2
 80293b8:	009b      	lsls	r3, r3, #2
 80293ba:	4413      	add	r3, r2
 80293bc:	005b      	lsls	r3, r3, #1
 80293be:	60fb      	str	r3, [r7, #12]
 80293c0:	e002      	b.n	80293c8 <HAL_ADC_ConfigChannel+0x238>
 80293c2:	68fb      	ldr	r3, [r7, #12]
 80293c4:	3b01      	subs	r3, #1
 80293c6:	60fb      	str	r3, [r7, #12]
 80293c8:	68fb      	ldr	r3, [r7, #12]
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	d1f9      	bne.n	80293c2 <HAL_ADC_ConfigChannel+0x232>
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	2200      	movs	r2, #0
 80293d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80293d6:	2300      	movs	r3, #0
 80293d8:	4618      	mov	r0, r3
 80293da:	3714      	adds	r7, #20
 80293dc:	46bd      	mov	sp, r7
 80293de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293e2:	4770      	bx	lr
 80293e4:	10000012 	.word	0x10000012
 80293e8:	40012000 	.word	0x40012000
 80293ec:	40012300 	.word	0x40012300
 80293f0:	2000cc48 	.word	0x2000cc48
 80293f4:	431bde83 	.word	0x431bde83

080293f8 <ADC_Init>:
 80293f8:	b480      	push	{r7}
 80293fa:	b083      	sub	sp, #12
 80293fc:	af00      	add	r7, sp, #0
 80293fe:	6078      	str	r0, [r7, #4]
 8029400:	4b78      	ldr	r3, [pc, #480]	; (80295e4 <ADC_Init+0x1ec>)
 8029402:	685b      	ldr	r3, [r3, #4]
 8029404:	4a77      	ldr	r2, [pc, #476]	; (80295e4 <ADC_Init+0x1ec>)
 8029406:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 802940a:	6053      	str	r3, [r2, #4]
 802940c:	4b75      	ldr	r3, [pc, #468]	; (80295e4 <ADC_Init+0x1ec>)
 802940e:	685a      	ldr	r2, [r3, #4]
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	685b      	ldr	r3, [r3, #4]
 8029414:	4973      	ldr	r1, [pc, #460]	; (80295e4 <ADC_Init+0x1ec>)
 8029416:	4313      	orrs	r3, r2
 8029418:	604b      	str	r3, [r1, #4]
 802941a:	687b      	ldr	r3, [r7, #4]
 802941c:	681b      	ldr	r3, [r3, #0]
 802941e:	685a      	ldr	r2, [r3, #4]
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	681b      	ldr	r3, [r3, #0]
 8029424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8029428:	605a      	str	r2, [r3, #4]
 802942a:	687b      	ldr	r3, [r7, #4]
 802942c:	681b      	ldr	r3, [r3, #0]
 802942e:	6859      	ldr	r1, [r3, #4]
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	691b      	ldr	r3, [r3, #16]
 8029434:	021a      	lsls	r2, r3, #8
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	681b      	ldr	r3, [r3, #0]
 802943a:	430a      	orrs	r2, r1
 802943c:	605a      	str	r2, [r3, #4]
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	681b      	ldr	r3, [r3, #0]
 8029442:	685a      	ldr	r2, [r3, #4]
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	681b      	ldr	r3, [r3, #0]
 8029448:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802944c:	605a      	str	r2, [r3, #4]
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	681b      	ldr	r3, [r3, #0]
 8029452:	6859      	ldr	r1, [r3, #4]
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	689a      	ldr	r2, [r3, #8]
 8029458:	687b      	ldr	r3, [r7, #4]
 802945a:	681b      	ldr	r3, [r3, #0]
 802945c:	430a      	orrs	r2, r1
 802945e:	605a      	str	r2, [r3, #4]
 8029460:	687b      	ldr	r3, [r7, #4]
 8029462:	681b      	ldr	r3, [r3, #0]
 8029464:	689a      	ldr	r2, [r3, #8]
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	681b      	ldr	r3, [r3, #0]
 802946a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802946e:	609a      	str	r2, [r3, #8]
 8029470:	687b      	ldr	r3, [r7, #4]
 8029472:	681b      	ldr	r3, [r3, #0]
 8029474:	6899      	ldr	r1, [r3, #8]
 8029476:	687b      	ldr	r3, [r7, #4]
 8029478:	68da      	ldr	r2, [r3, #12]
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	681b      	ldr	r3, [r3, #0]
 802947e:	430a      	orrs	r2, r1
 8029480:	609a      	str	r2, [r3, #8]
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029486:	4a58      	ldr	r2, [pc, #352]	; (80295e8 <ADC_Init+0x1f0>)
 8029488:	4293      	cmp	r3, r2
 802948a:	d022      	beq.n	80294d2 <ADC_Init+0xda>
 802948c:	687b      	ldr	r3, [r7, #4]
 802948e:	681b      	ldr	r3, [r3, #0]
 8029490:	689a      	ldr	r2, [r3, #8]
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	681b      	ldr	r3, [r3, #0]
 8029496:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802949a:	609a      	str	r2, [r3, #8]
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	681b      	ldr	r3, [r3, #0]
 80294a0:	6899      	ldr	r1, [r3, #8]
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80294a6:	687b      	ldr	r3, [r7, #4]
 80294a8:	681b      	ldr	r3, [r3, #0]
 80294aa:	430a      	orrs	r2, r1
 80294ac:	609a      	str	r2, [r3, #8]
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	689a      	ldr	r2, [r3, #8]
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	681b      	ldr	r3, [r3, #0]
 80294b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80294bc:	609a      	str	r2, [r3, #8]
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	6899      	ldr	r1, [r3, #8]
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80294c8:	687b      	ldr	r3, [r7, #4]
 80294ca:	681b      	ldr	r3, [r3, #0]
 80294cc:	430a      	orrs	r2, r1
 80294ce:	609a      	str	r2, [r3, #8]
 80294d0:	e00f      	b.n	80294f2 <ADC_Init+0xfa>
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	681b      	ldr	r3, [r3, #0]
 80294d6:	689a      	ldr	r2, [r3, #8]
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	681b      	ldr	r3, [r3, #0]
 80294dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80294e0:	609a      	str	r2, [r3, #8]
 80294e2:	687b      	ldr	r3, [r7, #4]
 80294e4:	681b      	ldr	r3, [r3, #0]
 80294e6:	689a      	ldr	r2, [r3, #8]
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80294f0:	609a      	str	r2, [r3, #8]
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	681b      	ldr	r3, [r3, #0]
 80294f6:	689a      	ldr	r2, [r3, #8]
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	681b      	ldr	r3, [r3, #0]
 80294fc:	f022 0202 	bic.w	r2, r2, #2
 8029500:	609a      	str	r2, [r3, #8]
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	681b      	ldr	r3, [r3, #0]
 8029506:	6899      	ldr	r1, [r3, #8]
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	699b      	ldr	r3, [r3, #24]
 802950c:	005a      	lsls	r2, r3, #1
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	681b      	ldr	r3, [r3, #0]
 8029512:	430a      	orrs	r2, r1
 8029514:	609a      	str	r2, [r3, #8]
 8029516:	687b      	ldr	r3, [r7, #4]
 8029518:	f893 3020 	ldrb.w	r3, [r3, #32]
 802951c:	2b00      	cmp	r3, #0
 802951e:	d01b      	beq.n	8029558 <ADC_Init+0x160>
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	685a      	ldr	r2, [r3, #4]
 8029526:	687b      	ldr	r3, [r7, #4]
 8029528:	681b      	ldr	r3, [r3, #0]
 802952a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802952e:	605a      	str	r2, [r3, #4]
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	681b      	ldr	r3, [r3, #0]
 8029534:	685a      	ldr	r2, [r3, #4]
 8029536:	687b      	ldr	r3, [r7, #4]
 8029538:	681b      	ldr	r3, [r3, #0]
 802953a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802953e:	605a      	str	r2, [r3, #4]
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	681b      	ldr	r3, [r3, #0]
 8029544:	6859      	ldr	r1, [r3, #4]
 8029546:	687b      	ldr	r3, [r7, #4]
 8029548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802954a:	3b01      	subs	r3, #1
 802954c:	035a      	lsls	r2, r3, #13
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	430a      	orrs	r2, r1
 8029554:	605a      	str	r2, [r3, #4]
 8029556:	e007      	b.n	8029568 <ADC_Init+0x170>
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	681b      	ldr	r3, [r3, #0]
 802955c:	685a      	ldr	r2, [r3, #4]
 802955e:	687b      	ldr	r3, [r7, #4]
 8029560:	681b      	ldr	r3, [r3, #0]
 8029562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8029566:	605a      	str	r2, [r3, #4]
 8029568:	687b      	ldr	r3, [r7, #4]
 802956a:	681b      	ldr	r3, [r3, #0]
 802956c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802956e:	687b      	ldr	r3, [r7, #4]
 8029570:	681b      	ldr	r3, [r3, #0]
 8029572:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8029576:	62da      	str	r2, [r3, #44]	; 0x2c
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	681b      	ldr	r3, [r3, #0]
 802957c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802957e:	687b      	ldr	r3, [r7, #4]
 8029580:	69db      	ldr	r3, [r3, #28]
 8029582:	3b01      	subs	r3, #1
 8029584:	051a      	lsls	r2, r3, #20
 8029586:	687b      	ldr	r3, [r7, #4]
 8029588:	681b      	ldr	r3, [r3, #0]
 802958a:	430a      	orrs	r2, r1
 802958c:	62da      	str	r2, [r3, #44]	; 0x2c
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	681b      	ldr	r3, [r3, #0]
 8029592:	689a      	ldr	r2, [r3, #8]
 8029594:	687b      	ldr	r3, [r7, #4]
 8029596:	681b      	ldr	r3, [r3, #0]
 8029598:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802959c:	609a      	str	r2, [r3, #8]
 802959e:	687b      	ldr	r3, [r7, #4]
 80295a0:	681b      	ldr	r3, [r3, #0]
 80295a2:	6899      	ldr	r1, [r3, #8]
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80295aa:	025a      	lsls	r2, r3, #9
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	681b      	ldr	r3, [r3, #0]
 80295b0:	430a      	orrs	r2, r1
 80295b2:	609a      	str	r2, [r3, #8]
 80295b4:	687b      	ldr	r3, [r7, #4]
 80295b6:	681b      	ldr	r3, [r3, #0]
 80295b8:	689a      	ldr	r2, [r3, #8]
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	681b      	ldr	r3, [r3, #0]
 80295be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80295c2:	609a      	str	r2, [r3, #8]
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	681b      	ldr	r3, [r3, #0]
 80295c8:	6899      	ldr	r1, [r3, #8]
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	695b      	ldr	r3, [r3, #20]
 80295ce:	029a      	lsls	r2, r3, #10
 80295d0:	687b      	ldr	r3, [r7, #4]
 80295d2:	681b      	ldr	r3, [r3, #0]
 80295d4:	430a      	orrs	r2, r1
 80295d6:	609a      	str	r2, [r3, #8]
 80295d8:	bf00      	nop
 80295da:	370c      	adds	r7, #12
 80295dc:	46bd      	mov	sp, r7
 80295de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295e2:	4770      	bx	lr
 80295e4:	40012300 	.word	0x40012300
 80295e8:	0f000001 	.word	0x0f000001

080295ec <ADC_DMAConvCplt>:
 80295ec:	b580      	push	{r7, lr}
 80295ee:	b084      	sub	sp, #16
 80295f0:	af00      	add	r7, sp, #0
 80295f2:	6078      	str	r0, [r7, #4]
 80295f4:	687b      	ldr	r3, [r7, #4]
 80295f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295f8:	60fb      	str	r3, [r7, #12]
 80295fa:	68fb      	ldr	r3, [r7, #12]
 80295fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80295fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8029602:	2b00      	cmp	r3, #0
 8029604:	d13c      	bne.n	8029680 <ADC_DMAConvCplt+0x94>
 8029606:	68fb      	ldr	r3, [r7, #12]
 8029608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802960a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 802960e:	68fb      	ldr	r3, [r7, #12]
 8029610:	641a      	str	r2, [r3, #64]	; 0x40
 8029612:	68fb      	ldr	r3, [r7, #12]
 8029614:	681b      	ldr	r3, [r3, #0]
 8029616:	689b      	ldr	r3, [r3, #8]
 8029618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802961c:	2b00      	cmp	r3, #0
 802961e:	d12b      	bne.n	8029678 <ADC_DMAConvCplt+0x8c>
 8029620:	68fb      	ldr	r3, [r7, #12]
 8029622:	699b      	ldr	r3, [r3, #24]
 8029624:	2b00      	cmp	r3, #0
 8029626:	d127      	bne.n	8029678 <ADC_DMAConvCplt+0x8c>
 8029628:	68fb      	ldr	r3, [r7, #12]
 802962a:	681b      	ldr	r3, [r3, #0]
 802962c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802962e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8029632:	2b00      	cmp	r3, #0
 8029634:	d006      	beq.n	8029644 <ADC_DMAConvCplt+0x58>
 8029636:	68fb      	ldr	r3, [r7, #12]
 8029638:	681b      	ldr	r3, [r3, #0]
 802963a:	689b      	ldr	r3, [r3, #8]
 802963c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029640:	2b00      	cmp	r3, #0
 8029642:	d119      	bne.n	8029678 <ADC_DMAConvCplt+0x8c>
 8029644:	68fb      	ldr	r3, [r7, #12]
 8029646:	681b      	ldr	r3, [r3, #0]
 8029648:	685a      	ldr	r2, [r3, #4]
 802964a:	68fb      	ldr	r3, [r7, #12]
 802964c:	681b      	ldr	r3, [r3, #0]
 802964e:	f022 0220 	bic.w	r2, r2, #32
 8029652:	605a      	str	r2, [r3, #4]
 8029654:	68fb      	ldr	r3, [r7, #12]
 8029656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802965c:	68fb      	ldr	r3, [r7, #12]
 802965e:	641a      	str	r2, [r3, #64]	; 0x40
 8029660:	68fb      	ldr	r3, [r7, #12]
 8029662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029668:	2b00      	cmp	r3, #0
 802966a:	d105      	bne.n	8029678 <ADC_DMAConvCplt+0x8c>
 802966c:	68fb      	ldr	r3, [r7, #12]
 802966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029670:	f043 0201 	orr.w	r2, r3, #1
 8029674:	68fb      	ldr	r3, [r7, #12]
 8029676:	641a      	str	r2, [r3, #64]	; 0x40
 8029678:	68f8      	ldr	r0, [r7, #12]
 802967a:	f7ff fd6b 	bl	8029154 <HAL_ADC_ConvCpltCallback>
 802967e:	e00e      	b.n	802969e <ADC_DMAConvCplt+0xb2>
 8029680:	68fb      	ldr	r3, [r7, #12]
 8029682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029684:	f003 0310 	and.w	r3, r3, #16
 8029688:	2b00      	cmp	r3, #0
 802968a:	d003      	beq.n	8029694 <ADC_DMAConvCplt+0xa8>
 802968c:	68f8      	ldr	r0, [r7, #12]
 802968e:	f7ff fd75 	bl	802917c <HAL_ADC_ErrorCallback>
 8029692:	e004      	b.n	802969e <ADC_DMAConvCplt+0xb2>
 8029694:	68fb      	ldr	r3, [r7, #12]
 8029696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802969a:	6878      	ldr	r0, [r7, #4]
 802969c:	4798      	blx	r3
 802969e:	bf00      	nop
 80296a0:	3710      	adds	r7, #16
 80296a2:	46bd      	mov	sp, r7
 80296a4:	bd80      	pop	{r7, pc}

080296a6 <ADC_DMAHalfConvCplt>:
 80296a6:	b580      	push	{r7, lr}
 80296a8:	b084      	sub	sp, #16
 80296aa:	af00      	add	r7, sp, #0
 80296ac:	6078      	str	r0, [r7, #4]
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296b2:	60fb      	str	r3, [r7, #12]
 80296b4:	68f8      	ldr	r0, [r7, #12]
 80296b6:	f7ff fd57 	bl	8029168 <HAL_ADC_ConvHalfCpltCallback>
 80296ba:	bf00      	nop
 80296bc:	3710      	adds	r7, #16
 80296be:	46bd      	mov	sp, r7
 80296c0:	bd80      	pop	{r7, pc}

080296c2 <ADC_DMAError>:
 80296c2:	b580      	push	{r7, lr}
 80296c4:	b084      	sub	sp, #16
 80296c6:	af00      	add	r7, sp, #0
 80296c8:	6078      	str	r0, [r7, #4]
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296ce:	60fb      	str	r3, [r7, #12]
 80296d0:	68fb      	ldr	r3, [r7, #12]
 80296d2:	2240      	movs	r2, #64	; 0x40
 80296d4:	641a      	str	r2, [r3, #64]	; 0x40
 80296d6:	68fb      	ldr	r3, [r7, #12]
 80296d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80296da:	f043 0204 	orr.w	r2, r3, #4
 80296de:	68fb      	ldr	r3, [r7, #12]
 80296e0:	645a      	str	r2, [r3, #68]	; 0x44
 80296e2:	68f8      	ldr	r0, [r7, #12]
 80296e4:	f7ff fd4a 	bl	802917c <HAL_ADC_ErrorCallback>
 80296e8:	bf00      	nop
 80296ea:	3710      	adds	r7, #16
 80296ec:	46bd      	mov	sp, r7
 80296ee:	bd80      	pop	{r7, pc}

080296f0 <HAL_ADCEx_InjectedStart>:
 80296f0:	b480      	push	{r7}
 80296f2:	b087      	sub	sp, #28
 80296f4:	af00      	add	r7, sp, #0
 80296f6:	6078      	str	r0, [r7, #4]
 80296f8:	2300      	movs	r3, #0
 80296fa:	60fb      	str	r3, [r7, #12]
 80296fc:	2300      	movs	r3, #0
 80296fe:	617b      	str	r3, [r7, #20]
 8029700:	2300      	movs	r3, #0
 8029702:	613b      	str	r3, [r7, #16]
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802970a:	2b01      	cmp	r3, #1
 802970c:	d101      	bne.n	8029712 <HAL_ADCEx_InjectedStart+0x22>
 802970e:	2302      	movs	r3, #2
 8029710:	e099      	b.n	8029846 <HAL_ADCEx_InjectedStart+0x156>
 8029712:	687b      	ldr	r3, [r7, #4]
 8029714:	2201      	movs	r2, #1
 8029716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	689b      	ldr	r3, [r3, #8]
 8029720:	f003 0301 	and.w	r3, r3, #1
 8029724:	2b01      	cmp	r3, #1
 8029726:	d018      	beq.n	802975a <HAL_ADCEx_InjectedStart+0x6a>
 8029728:	687b      	ldr	r3, [r7, #4]
 802972a:	681b      	ldr	r3, [r3, #0]
 802972c:	689a      	ldr	r2, [r3, #8]
 802972e:	687b      	ldr	r3, [r7, #4]
 8029730:	681b      	ldr	r3, [r3, #0]
 8029732:	f042 0201 	orr.w	r2, r2, #1
 8029736:	609a      	str	r2, [r3, #8]
 8029738:	4b46      	ldr	r3, [pc, #280]	; (8029854 <HAL_ADCEx_InjectedStart+0x164>)
 802973a:	681b      	ldr	r3, [r3, #0]
 802973c:	4a46      	ldr	r2, [pc, #280]	; (8029858 <HAL_ADCEx_InjectedStart+0x168>)
 802973e:	fba2 2303 	umull	r2, r3, r2, r3
 8029742:	0c9a      	lsrs	r2, r3, #18
 8029744:	4613      	mov	r3, r2
 8029746:	005b      	lsls	r3, r3, #1
 8029748:	4413      	add	r3, r2
 802974a:	60fb      	str	r3, [r7, #12]
 802974c:	e002      	b.n	8029754 <HAL_ADCEx_InjectedStart+0x64>
 802974e:	68fb      	ldr	r3, [r7, #12]
 8029750:	3b01      	subs	r3, #1
 8029752:	60fb      	str	r3, [r7, #12]
 8029754:	68fb      	ldr	r3, [r7, #12]
 8029756:	2b00      	cmp	r3, #0
 8029758:	d1f9      	bne.n	802974e <HAL_ADCEx_InjectedStart+0x5e>
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	681b      	ldr	r3, [r3, #0]
 802975e:	689b      	ldr	r3, [r3, #8]
 8029760:	f003 0301 	and.w	r3, r3, #1
 8029764:	2b01      	cmp	r3, #1
 8029766:	d16d      	bne.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802976c:	4b3b      	ldr	r3, [pc, #236]	; (802985c <HAL_ADCEx_InjectedStart+0x16c>)
 802976e:	4013      	ands	r3, r2
 8029770:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	641a      	str	r2, [r3, #64]	; 0x40
 8029778:	687b      	ldr	r3, [r7, #4]
 802977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802977c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029780:	2b00      	cmp	r3, #0
 8029782:	d102      	bne.n	802978a <HAL_ADCEx_InjectedStart+0x9a>
 8029784:	687b      	ldr	r3, [r7, #4]
 8029786:	2200      	movs	r2, #0
 8029788:	645a      	str	r2, [r3, #68]	; 0x44
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	2200      	movs	r2, #0
 802978e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8029792:	687b      	ldr	r3, [r7, #4]
 8029794:	681b      	ldr	r3, [r3, #0]
 8029796:	f06f 0204 	mvn.w	r2, #4
 802979a:	601a      	str	r2, [r3, #0]
 802979c:	4b30      	ldr	r3, [pc, #192]	; (8029860 <HAL_ADCEx_InjectedStart+0x170>)
 802979e:	685b      	ldr	r3, [r3, #4]
 80297a0:	f003 031f 	and.w	r3, r3, #31
 80297a4:	2b00      	cmp	r3, #0
 80297a6:	d124      	bne.n	80297f2 <HAL_ADCEx_InjectedStart+0x102>
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	681b      	ldr	r3, [r3, #0]
 80297ac:	689b      	ldr	r3, [r3, #8]
 80297ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80297b2:	2b00      	cmp	r3, #0
 80297b4:	bf0c      	ite	eq
 80297b6:	2301      	moveq	r3, #1
 80297b8:	2300      	movne	r3, #0
 80297ba:	b2db      	uxtb	r3, r3
 80297bc:	617b      	str	r3, [r7, #20]
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	681b      	ldr	r3, [r3, #0]
 80297c2:	685b      	ldr	r3, [r3, #4]
 80297c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	bf0c      	ite	eq
 80297cc:	2301      	moveq	r3, #1
 80297ce:	2300      	movne	r3, #0
 80297d0:	b2db      	uxtb	r3, r3
 80297d2:	613b      	str	r3, [r7, #16]
 80297d4:	697b      	ldr	r3, [r7, #20]
 80297d6:	2b00      	cmp	r3, #0
 80297d8:	d034      	beq.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 80297da:	693b      	ldr	r3, [r7, #16]
 80297dc:	2b00      	cmp	r3, #0
 80297de:	d031      	beq.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 80297e0:	687b      	ldr	r3, [r7, #4]
 80297e2:	681b      	ldr	r3, [r3, #0]
 80297e4:	689a      	ldr	r2, [r3, #8]
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	681b      	ldr	r3, [r3, #0]
 80297ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80297ee:	609a      	str	r2, [r3, #8]
 80297f0:	e028      	b.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	681b      	ldr	r3, [r3, #0]
 80297f6:	689b      	ldr	r3, [r3, #8]
 80297f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80297fc:	2b00      	cmp	r3, #0
 80297fe:	bf0c      	ite	eq
 8029800:	2301      	moveq	r3, #1
 8029802:	2300      	movne	r3, #0
 8029804:	b2db      	uxtb	r3, r3
 8029806:	617b      	str	r3, [r7, #20]
 8029808:	687b      	ldr	r3, [r7, #4]
 802980a:	681b      	ldr	r3, [r3, #0]
 802980c:	685b      	ldr	r3, [r3, #4]
 802980e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029812:	2b00      	cmp	r3, #0
 8029814:	bf0c      	ite	eq
 8029816:	2301      	moveq	r3, #1
 8029818:	2300      	movne	r3, #0
 802981a:	b2db      	uxtb	r3, r3
 802981c:	613b      	str	r3, [r7, #16]
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	681b      	ldr	r3, [r3, #0]
 8029822:	4a10      	ldr	r2, [pc, #64]	; (8029864 <HAL_ADCEx_InjectedStart+0x174>)
 8029824:	4293      	cmp	r3, r2
 8029826:	d10d      	bne.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 8029828:	697b      	ldr	r3, [r7, #20]
 802982a:	2b00      	cmp	r3, #0
 802982c:	d00a      	beq.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 802982e:	693b      	ldr	r3, [r7, #16]
 8029830:	2b00      	cmp	r3, #0
 8029832:	d007      	beq.n	8029844 <HAL_ADCEx_InjectedStart+0x154>
 8029834:	687b      	ldr	r3, [r7, #4]
 8029836:	681b      	ldr	r3, [r3, #0]
 8029838:	689a      	ldr	r2, [r3, #8]
 802983a:	687b      	ldr	r3, [r7, #4]
 802983c:	681b      	ldr	r3, [r3, #0]
 802983e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8029842:	609a      	str	r2, [r3, #8]
 8029844:	2300      	movs	r3, #0
 8029846:	4618      	mov	r0, r3
 8029848:	371c      	adds	r7, #28
 802984a:	46bd      	mov	sp, r7
 802984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029850:	4770      	bx	lr
 8029852:	bf00      	nop
 8029854:	2000cc48 	.word	0x2000cc48
 8029858:	431bde83 	.word	0x431bde83
 802985c:	ffffcffe 	.word	0xffffcffe
 8029860:	40012300 	.word	0x40012300
 8029864:	40012000 	.word	0x40012000

08029868 <HAL_ADCEx_InjectedPollForConversion>:
 8029868:	b580      	push	{r7, lr}
 802986a:	b084      	sub	sp, #16
 802986c:	af00      	add	r7, sp, #0
 802986e:	6078      	str	r0, [r7, #4]
 8029870:	6039      	str	r1, [r7, #0]
 8029872:	2300      	movs	r3, #0
 8029874:	60fb      	str	r3, [r7, #12]
 8029876:	f7ff fb25 	bl	8028ec4 <HAL_GetTick>
 802987a:	60f8      	str	r0, [r7, #12]
 802987c:	e017      	b.n	80298ae <HAL_ADCEx_InjectedPollForConversion+0x46>
 802987e:	683b      	ldr	r3, [r7, #0]
 8029880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029884:	d013      	beq.n	80298ae <HAL_ADCEx_InjectedPollForConversion+0x46>
 8029886:	683b      	ldr	r3, [r7, #0]
 8029888:	2b00      	cmp	r3, #0
 802988a:	d007      	beq.n	802989c <HAL_ADCEx_InjectedPollForConversion+0x34>
 802988c:	f7ff fb1a 	bl	8028ec4 <HAL_GetTick>
 8029890:	4602      	mov	r2, r0
 8029892:	68fb      	ldr	r3, [r7, #12]
 8029894:	1ad3      	subs	r3, r2, r3
 8029896:	683a      	ldr	r2, [r7, #0]
 8029898:	429a      	cmp	r2, r3
 802989a:	d208      	bcs.n	80298ae <HAL_ADCEx_InjectedPollForConversion+0x46>
 802989c:	687b      	ldr	r3, [r7, #4]
 802989e:	2204      	movs	r2, #4
 80298a0:	641a      	str	r2, [r3, #64]	; 0x40
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	2200      	movs	r2, #0
 80298a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80298aa:	2303      	movs	r3, #3
 80298ac:	e04b      	b.n	8029946 <HAL_ADCEx_InjectedPollForConversion+0xde>
 80298ae:	687b      	ldr	r3, [r7, #4]
 80298b0:	681b      	ldr	r3, [r3, #0]
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	f003 0304 	and.w	r3, r3, #4
 80298b8:	2b04      	cmp	r3, #4
 80298ba:	d1e0      	bne.n	802987e <HAL_ADCEx_InjectedPollForConversion+0x16>
 80298bc:	687b      	ldr	r3, [r7, #4]
 80298be:	681b      	ldr	r3, [r3, #0]
 80298c0:	f06f 020c 	mvn.w	r2, #12
 80298c4:	601a      	str	r2, [r3, #0]
 80298c6:	687b      	ldr	r3, [r7, #4]
 80298c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80298ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80298ce:	687b      	ldr	r3, [r7, #4]
 80298d0:	641a      	str	r2, [r3, #64]	; 0x40
 80298d2:	687b      	ldr	r3, [r7, #4]
 80298d4:	681b      	ldr	r3, [r3, #0]
 80298d6:	689b      	ldr	r3, [r3, #8]
 80298d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80298dc:	2b00      	cmp	r3, #0
 80298de:	d131      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 80298e0:	687b      	ldr	r3, [r7, #4]
 80298e2:	681b      	ldr	r3, [r3, #0]
 80298e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80298e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80298ea:	2b00      	cmp	r3, #0
 80298ec:	d006      	beq.n	80298fc <HAL_ADCEx_InjectedPollForConversion+0x94>
 80298ee:	687b      	ldr	r3, [r7, #4]
 80298f0:	681b      	ldr	r3, [r3, #0]
 80298f2:	689b      	ldr	r3, [r3, #8]
 80298f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80298f8:	2b00      	cmp	r3, #0
 80298fa:	d123      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 80298fc:	687b      	ldr	r3, [r7, #4]
 80298fe:	681b      	ldr	r3, [r3, #0]
 8029900:	685b      	ldr	r3, [r3, #4]
 8029902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029906:	2b00      	cmp	r3, #0
 8029908:	d11c      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 802990a:	687b      	ldr	r3, [r7, #4]
 802990c:	681b      	ldr	r3, [r3, #0]
 802990e:	689b      	ldr	r3, [r3, #8]
 8029910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8029914:	2b00      	cmp	r3, #0
 8029916:	d115      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 8029918:	687b      	ldr	r3, [r7, #4]
 802991a:	699b      	ldr	r3, [r3, #24]
 802991c:	2b00      	cmp	r3, #0
 802991e:	d111      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 8029920:	687b      	ldr	r3, [r7, #4]
 8029922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029928:	687b      	ldr	r3, [r7, #4]
 802992a:	641a      	str	r2, [r3, #64]	; 0x40
 802992c:	687b      	ldr	r3, [r7, #4]
 802992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029934:	2b00      	cmp	r3, #0
 8029936:	d105      	bne.n	8029944 <HAL_ADCEx_InjectedPollForConversion+0xdc>
 8029938:	687b      	ldr	r3, [r7, #4]
 802993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802993c:	f043 0201 	orr.w	r2, r3, #1
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	641a      	str	r2, [r3, #64]	; 0x40
 8029944:	2300      	movs	r3, #0
 8029946:	4618      	mov	r0, r3
 8029948:	3710      	adds	r7, #16
 802994a:	46bd      	mov	sp, r7
 802994c:	bd80      	pop	{r7, pc}
	...

08029950 <HAL_ADCEx_InjectedGetValue>:
 8029950:	b480      	push	{r7}
 8029952:	b085      	sub	sp, #20
 8029954:	af00      	add	r7, sp, #0
 8029956:	6078      	str	r0, [r7, #4]
 8029958:	6039      	str	r1, [r7, #0]
 802995a:	2300      	movs	r3, #0
 802995c:	60fb      	str	r3, [r7, #12]
 802995e:	687b      	ldr	r3, [r7, #4]
 8029960:	681b      	ldr	r3, [r3, #0]
 8029962:	f06f 0204 	mvn.w	r2, #4
 8029966:	601a      	str	r2, [r3, #0]
 8029968:	683b      	ldr	r3, [r7, #0]
 802996a:	3b01      	subs	r3, #1
 802996c:	2b03      	cmp	r3, #3
 802996e:	d81f      	bhi.n	80299b0 <HAL_ADCEx_InjectedGetValue+0x60>
 8029970:	a201      	add	r2, pc, #4	; (adr r2, 8029978 <HAL_ADCEx_InjectedGetValue+0x28>)
 8029972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029976:	bf00      	nop
 8029978:	080299a7 	.word	0x080299a7
 802997c:	0802999d 	.word	0x0802999d
 8029980:	08029993 	.word	0x08029993
 8029984:	08029989 	.word	0x08029989
 8029988:	687b      	ldr	r3, [r7, #4]
 802998a:	681b      	ldr	r3, [r3, #0]
 802998c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802998e:	60fb      	str	r3, [r7, #12]
 8029990:	e00f      	b.n	80299b2 <HAL_ADCEx_InjectedGetValue+0x62>
 8029992:	687b      	ldr	r3, [r7, #4]
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029998:	60fb      	str	r3, [r7, #12]
 802999a:	e00a      	b.n	80299b2 <HAL_ADCEx_InjectedGetValue+0x62>
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299a2:	60fb      	str	r3, [r7, #12]
 80299a4:	e005      	b.n	80299b2 <HAL_ADCEx_InjectedGetValue+0x62>
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	681b      	ldr	r3, [r3, #0]
 80299aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80299ac:	60fb      	str	r3, [r7, #12]
 80299ae:	e000      	b.n	80299b2 <HAL_ADCEx_InjectedGetValue+0x62>
 80299b0:	bf00      	nop
 80299b2:	68fb      	ldr	r3, [r7, #12]
 80299b4:	4618      	mov	r0, r3
 80299b6:	3714      	adds	r7, #20
 80299b8:	46bd      	mov	sp, r7
 80299ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299be:	4770      	bx	lr

080299c0 <HAL_ADCEx_InjectedConfigChannel>:
 80299c0:	b480      	push	{r7}
 80299c2:	b083      	sub	sp, #12
 80299c4:	af00      	add	r7, sp, #0
 80299c6:	6078      	str	r0, [r7, #4]
 80299c8:	6039      	str	r1, [r7, #0]
 80299ca:	687b      	ldr	r3, [r7, #4]
 80299cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80299d0:	2b01      	cmp	r3, #1
 80299d2:	d101      	bne.n	80299d8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80299d4:	2302      	movs	r3, #2
 80299d6:	e174      	b.n	8029cc2 <HAL_ADCEx_InjectedConfigChannel+0x302>
 80299d8:	687b      	ldr	r3, [r7, #4]
 80299da:	2201      	movs	r2, #1
 80299dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80299e0:	683b      	ldr	r3, [r7, #0]
 80299e2:	681b      	ldr	r3, [r3, #0]
 80299e4:	2b09      	cmp	r3, #9
 80299e6:	d925      	bls.n	8029a34 <HAL_ADCEx_InjectedConfigChannel+0x74>
 80299e8:	687b      	ldr	r3, [r7, #4]
 80299ea:	681b      	ldr	r3, [r3, #0]
 80299ec:	68d9      	ldr	r1, [r3, #12]
 80299ee:	683b      	ldr	r3, [r7, #0]
 80299f0:	681b      	ldr	r3, [r3, #0]
 80299f2:	b29b      	uxth	r3, r3
 80299f4:	461a      	mov	r2, r3
 80299f6:	4613      	mov	r3, r2
 80299f8:	005b      	lsls	r3, r3, #1
 80299fa:	4413      	add	r3, r2
 80299fc:	3b1e      	subs	r3, #30
 80299fe:	2207      	movs	r2, #7
 8029a00:	fa02 f303 	lsl.w	r3, r2, r3
 8029a04:	43da      	mvns	r2, r3
 8029a06:	687b      	ldr	r3, [r7, #4]
 8029a08:	681b      	ldr	r3, [r3, #0]
 8029a0a:	400a      	ands	r2, r1
 8029a0c:	60da      	str	r2, [r3, #12]
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	68d9      	ldr	r1, [r3, #12]
 8029a14:	683b      	ldr	r3, [r7, #0]
 8029a16:	689a      	ldr	r2, [r3, #8]
 8029a18:	683b      	ldr	r3, [r7, #0]
 8029a1a:	681b      	ldr	r3, [r3, #0]
 8029a1c:	b29b      	uxth	r3, r3
 8029a1e:	4618      	mov	r0, r3
 8029a20:	4603      	mov	r3, r0
 8029a22:	005b      	lsls	r3, r3, #1
 8029a24:	4403      	add	r3, r0
 8029a26:	3b1e      	subs	r3, #30
 8029a28:	409a      	lsls	r2, r3
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	681b      	ldr	r3, [r3, #0]
 8029a2e:	430a      	orrs	r2, r1
 8029a30:	60da      	str	r2, [r3, #12]
 8029a32:	e022      	b.n	8029a7a <HAL_ADCEx_InjectedConfigChannel+0xba>
 8029a34:	687b      	ldr	r3, [r7, #4]
 8029a36:	681b      	ldr	r3, [r3, #0]
 8029a38:	6919      	ldr	r1, [r3, #16]
 8029a3a:	683b      	ldr	r3, [r7, #0]
 8029a3c:	681b      	ldr	r3, [r3, #0]
 8029a3e:	b29b      	uxth	r3, r3
 8029a40:	461a      	mov	r2, r3
 8029a42:	4613      	mov	r3, r2
 8029a44:	005b      	lsls	r3, r3, #1
 8029a46:	4413      	add	r3, r2
 8029a48:	2207      	movs	r2, #7
 8029a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8029a4e:	43da      	mvns	r2, r3
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	681b      	ldr	r3, [r3, #0]
 8029a54:	400a      	ands	r2, r1
 8029a56:	611a      	str	r2, [r3, #16]
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	681b      	ldr	r3, [r3, #0]
 8029a5c:	6919      	ldr	r1, [r3, #16]
 8029a5e:	683b      	ldr	r3, [r7, #0]
 8029a60:	689a      	ldr	r2, [r3, #8]
 8029a62:	683b      	ldr	r3, [r7, #0]
 8029a64:	681b      	ldr	r3, [r3, #0]
 8029a66:	b29b      	uxth	r3, r3
 8029a68:	4618      	mov	r0, r3
 8029a6a:	4603      	mov	r3, r0
 8029a6c:	005b      	lsls	r3, r3, #1
 8029a6e:	4403      	add	r3, r0
 8029a70:	409a      	lsls	r2, r3
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	681b      	ldr	r3, [r3, #0]
 8029a76:	430a      	orrs	r2, r1
 8029a78:	611a      	str	r2, [r3, #16]
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	681b      	ldr	r3, [r3, #0]
 8029a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029a80:	687b      	ldr	r3, [r7, #4]
 8029a82:	681b      	ldr	r3, [r3, #0]
 8029a84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8029a88:	639a      	str	r2, [r3, #56]	; 0x38
 8029a8a:	687b      	ldr	r3, [r7, #4]
 8029a8c:	681b      	ldr	r3, [r3, #0]
 8029a8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8029a90:	683b      	ldr	r3, [r7, #0]
 8029a92:	691b      	ldr	r3, [r3, #16]
 8029a94:	3b01      	subs	r3, #1
 8029a96:	051a      	lsls	r2, r3, #20
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	681b      	ldr	r3, [r3, #0]
 8029a9c:	430a      	orrs	r2, r1
 8029a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	681b      	ldr	r3, [r3, #0]
 8029aa4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8029aa6:	683b      	ldr	r3, [r7, #0]
 8029aa8:	685b      	ldr	r3, [r3, #4]
 8029aaa:	b2da      	uxtb	r2, r3
 8029aac:	683b      	ldr	r3, [r7, #0]
 8029aae:	691b      	ldr	r3, [r3, #16]
 8029ab0:	b2db      	uxtb	r3, r3
 8029ab2:	1ad3      	subs	r3, r2, r3
 8029ab4:	b2db      	uxtb	r3, r3
 8029ab6:	3303      	adds	r3, #3
 8029ab8:	b2db      	uxtb	r3, r3
 8029aba:	461a      	mov	r2, r3
 8029abc:	4613      	mov	r3, r2
 8029abe:	009b      	lsls	r3, r3, #2
 8029ac0:	4413      	add	r3, r2
 8029ac2:	221f      	movs	r2, #31
 8029ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8029ac8:	43da      	mvns	r2, r3
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	681b      	ldr	r3, [r3, #0]
 8029ace:	400a      	ands	r2, r1
 8029ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	681b      	ldr	r3, [r3, #0]
 8029ad6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8029ad8:	683b      	ldr	r3, [r7, #0]
 8029ada:	681b      	ldr	r3, [r3, #0]
 8029adc:	b29b      	uxth	r3, r3
 8029ade:	4618      	mov	r0, r3
 8029ae0:	683b      	ldr	r3, [r7, #0]
 8029ae2:	685b      	ldr	r3, [r3, #4]
 8029ae4:	b2da      	uxtb	r2, r3
 8029ae6:	683b      	ldr	r3, [r7, #0]
 8029ae8:	691b      	ldr	r3, [r3, #16]
 8029aea:	b2db      	uxtb	r3, r3
 8029aec:	1ad3      	subs	r3, r2, r3
 8029aee:	b2db      	uxtb	r3, r3
 8029af0:	3303      	adds	r3, #3
 8029af2:	b2db      	uxtb	r3, r3
 8029af4:	461a      	mov	r2, r3
 8029af6:	4613      	mov	r3, r2
 8029af8:	009b      	lsls	r3, r3, #2
 8029afa:	4413      	add	r3, r2
 8029afc:	fa00 f203 	lsl.w	r2, r0, r3
 8029b00:	687b      	ldr	r3, [r7, #4]
 8029b02:	681b      	ldr	r3, [r3, #0]
 8029b04:	430a      	orrs	r2, r1
 8029b06:	639a      	str	r2, [r3, #56]	; 0x38
 8029b08:	683b      	ldr	r3, [r7, #0]
 8029b0a:	699b      	ldr	r3, [r3, #24]
 8029b0c:	4a70      	ldr	r2, [pc, #448]	; (8029cd0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8029b0e:	4293      	cmp	r3, r2
 8029b10:	d022      	beq.n	8029b58 <HAL_ADCEx_InjectedConfigChannel+0x198>
 8029b12:	687b      	ldr	r3, [r7, #4]
 8029b14:	681b      	ldr	r3, [r3, #0]
 8029b16:	689a      	ldr	r2, [r3, #8]
 8029b18:	687b      	ldr	r3, [r7, #4]
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8029b20:	609a      	str	r2, [r3, #8]
 8029b22:	687b      	ldr	r3, [r7, #4]
 8029b24:	681b      	ldr	r3, [r3, #0]
 8029b26:	6899      	ldr	r1, [r3, #8]
 8029b28:	683b      	ldr	r3, [r7, #0]
 8029b2a:	699a      	ldr	r2, [r3, #24]
 8029b2c:	687b      	ldr	r3, [r7, #4]
 8029b2e:	681b      	ldr	r3, [r3, #0]
 8029b30:	430a      	orrs	r2, r1
 8029b32:	609a      	str	r2, [r3, #8]
 8029b34:	687b      	ldr	r3, [r7, #4]
 8029b36:	681b      	ldr	r3, [r3, #0]
 8029b38:	689a      	ldr	r2, [r3, #8]
 8029b3a:	687b      	ldr	r3, [r7, #4]
 8029b3c:	681b      	ldr	r3, [r3, #0]
 8029b3e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8029b42:	609a      	str	r2, [r3, #8]
 8029b44:	687b      	ldr	r3, [r7, #4]
 8029b46:	681b      	ldr	r3, [r3, #0]
 8029b48:	6899      	ldr	r1, [r3, #8]
 8029b4a:	683b      	ldr	r3, [r7, #0]
 8029b4c:	69da      	ldr	r2, [r3, #28]
 8029b4e:	687b      	ldr	r3, [r7, #4]
 8029b50:	681b      	ldr	r3, [r3, #0]
 8029b52:	430a      	orrs	r2, r1
 8029b54:	609a      	str	r2, [r3, #8]
 8029b56:	e00f      	b.n	8029b78 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
 8029b58:	687b      	ldr	r3, [r7, #4]
 8029b5a:	681b      	ldr	r3, [r3, #0]
 8029b5c:	689a      	ldr	r2, [r3, #8]
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8029b66:	609a      	str	r2, [r3, #8]
 8029b68:	687b      	ldr	r3, [r7, #4]
 8029b6a:	681b      	ldr	r3, [r3, #0]
 8029b6c:	689a      	ldr	r2, [r3, #8]
 8029b6e:	687b      	ldr	r3, [r7, #4]
 8029b70:	681b      	ldr	r3, [r3, #0]
 8029b72:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8029b76:	609a      	str	r2, [r3, #8]
 8029b78:	683b      	ldr	r3, [r7, #0]
 8029b7a:	7d5b      	ldrb	r3, [r3, #21]
 8029b7c:	2b00      	cmp	r3, #0
 8029b7e:	d008      	beq.n	8029b92 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	681b      	ldr	r3, [r3, #0]
 8029b84:	685a      	ldr	r2, [r3, #4]
 8029b86:	687b      	ldr	r3, [r7, #4]
 8029b88:	681b      	ldr	r3, [r3, #0]
 8029b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8029b8e:	605a      	str	r2, [r3, #4]
 8029b90:	e007      	b.n	8029ba2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	681b      	ldr	r3, [r3, #0]
 8029b96:	685a      	ldr	r2, [r3, #4]
 8029b98:	687b      	ldr	r3, [r7, #4]
 8029b9a:	681b      	ldr	r3, [r3, #0]
 8029b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029ba0:	605a      	str	r2, [r3, #4]
 8029ba2:	683b      	ldr	r3, [r7, #0]
 8029ba4:	7d1b      	ldrb	r3, [r3, #20]
 8029ba6:	2b00      	cmp	r3, #0
 8029ba8:	d008      	beq.n	8029bbc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	681b      	ldr	r3, [r3, #0]
 8029bae:	685a      	ldr	r2, [r3, #4]
 8029bb0:	687b      	ldr	r3, [r7, #4]
 8029bb2:	681b      	ldr	r3, [r3, #0]
 8029bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8029bb8:	605a      	str	r2, [r3, #4]
 8029bba:	e007      	b.n	8029bcc <HAL_ADCEx_InjectedConfigChannel+0x20c>
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	681b      	ldr	r3, [r3, #0]
 8029bc0:	685a      	ldr	r2, [r3, #4]
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	681b      	ldr	r3, [r3, #0]
 8029bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8029bca:	605a      	str	r2, [r3, #4]
 8029bcc:	683b      	ldr	r3, [r7, #0]
 8029bce:	685b      	ldr	r3, [r3, #4]
 8029bd0:	2b03      	cmp	r3, #3
 8029bd2:	d02a      	beq.n	8029c2a <HAL_ADCEx_InjectedConfigChannel+0x26a>
 8029bd4:	2b03      	cmp	r3, #3
 8029bd6:	d83a      	bhi.n	8029c4e <HAL_ADCEx_InjectedConfigChannel+0x28e>
 8029bd8:	2b01      	cmp	r3, #1
 8029bda:	d002      	beq.n	8029be2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8029bdc:	2b02      	cmp	r3, #2
 8029bde:	d012      	beq.n	8029c06 <HAL_ADCEx_InjectedConfigChannel+0x246>
 8029be0:	e035      	b.n	8029c4e <HAL_ADCEx_InjectedConfigChannel+0x28e>
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	681b      	ldr	r3, [r3, #0]
 8029be6:	6959      	ldr	r1, [r3, #20]
 8029be8:	687b      	ldr	r3, [r7, #4]
 8029bea:	681a      	ldr	r2, [r3, #0]
 8029bec:	4b39      	ldr	r3, [pc, #228]	; (8029cd4 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8029bee:	400b      	ands	r3, r1
 8029bf0:	6153      	str	r3, [r2, #20]
 8029bf2:	687b      	ldr	r3, [r7, #4]
 8029bf4:	681b      	ldr	r3, [r3, #0]
 8029bf6:	6959      	ldr	r1, [r3, #20]
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	68da      	ldr	r2, [r3, #12]
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	430a      	orrs	r2, r1
 8029c02:	615a      	str	r2, [r3, #20]
 8029c04:	e035      	b.n	8029c72 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8029c06:	687b      	ldr	r3, [r7, #4]
 8029c08:	681b      	ldr	r3, [r3, #0]
 8029c0a:	6999      	ldr	r1, [r3, #24]
 8029c0c:	687b      	ldr	r3, [r7, #4]
 8029c0e:	681a      	ldr	r2, [r3, #0]
 8029c10:	4b30      	ldr	r3, [pc, #192]	; (8029cd4 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8029c12:	400b      	ands	r3, r1
 8029c14:	6193      	str	r3, [r2, #24]
 8029c16:	687b      	ldr	r3, [r7, #4]
 8029c18:	681b      	ldr	r3, [r3, #0]
 8029c1a:	6999      	ldr	r1, [r3, #24]
 8029c1c:	683b      	ldr	r3, [r7, #0]
 8029c1e:	68da      	ldr	r2, [r3, #12]
 8029c20:	687b      	ldr	r3, [r7, #4]
 8029c22:	681b      	ldr	r3, [r3, #0]
 8029c24:	430a      	orrs	r2, r1
 8029c26:	619a      	str	r2, [r3, #24]
 8029c28:	e023      	b.n	8029c72 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	681b      	ldr	r3, [r3, #0]
 8029c2e:	69d9      	ldr	r1, [r3, #28]
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	681a      	ldr	r2, [r3, #0]
 8029c34:	4b27      	ldr	r3, [pc, #156]	; (8029cd4 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8029c36:	400b      	ands	r3, r1
 8029c38:	61d3      	str	r3, [r2, #28]
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	681b      	ldr	r3, [r3, #0]
 8029c3e:	69d9      	ldr	r1, [r3, #28]
 8029c40:	683b      	ldr	r3, [r7, #0]
 8029c42:	68da      	ldr	r2, [r3, #12]
 8029c44:	687b      	ldr	r3, [r7, #4]
 8029c46:	681b      	ldr	r3, [r3, #0]
 8029c48:	430a      	orrs	r2, r1
 8029c4a:	61da      	str	r2, [r3, #28]
 8029c4c:	e011      	b.n	8029c72 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	681b      	ldr	r3, [r3, #0]
 8029c52:	6a19      	ldr	r1, [r3, #32]
 8029c54:	687b      	ldr	r3, [r7, #4]
 8029c56:	681a      	ldr	r2, [r3, #0]
 8029c58:	4b1e      	ldr	r3, [pc, #120]	; (8029cd4 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8029c5a:	400b      	ands	r3, r1
 8029c5c:	6213      	str	r3, [r2, #32]
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	6a19      	ldr	r1, [r3, #32]
 8029c64:	683b      	ldr	r3, [r7, #0]
 8029c66:	68da      	ldr	r2, [r3, #12]
 8029c68:	687b      	ldr	r3, [r7, #4]
 8029c6a:	681b      	ldr	r3, [r3, #0]
 8029c6c:	430a      	orrs	r2, r1
 8029c6e:	621a      	str	r2, [r3, #32]
 8029c70:	bf00      	nop
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	681b      	ldr	r3, [r3, #0]
 8029c76:	4a18      	ldr	r2, [pc, #96]	; (8029cd8 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8029c78:	4293      	cmp	r3, r2
 8029c7a:	d109      	bne.n	8029c90 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8029c7c:	683b      	ldr	r3, [r7, #0]
 8029c7e:	681b      	ldr	r3, [r3, #0]
 8029c80:	2b12      	cmp	r3, #18
 8029c82:	d105      	bne.n	8029c90 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8029c84:	4b15      	ldr	r3, [pc, #84]	; (8029cdc <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8029c86:	685b      	ldr	r3, [r3, #4]
 8029c88:	4a14      	ldr	r2, [pc, #80]	; (8029cdc <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8029c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8029c8e:	6053      	str	r3, [r2, #4]
 8029c90:	687b      	ldr	r3, [r7, #4]
 8029c92:	681b      	ldr	r3, [r3, #0]
 8029c94:	4a10      	ldr	r2, [pc, #64]	; (8029cd8 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8029c96:	4293      	cmp	r3, r2
 8029c98:	d10e      	bne.n	8029cb8 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8029c9a:	683b      	ldr	r3, [r7, #0]
 8029c9c:	681b      	ldr	r3, [r3, #0]
 8029c9e:	4a10      	ldr	r2, [pc, #64]	; (8029ce0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8029ca0:	4293      	cmp	r3, r2
 8029ca2:	d003      	beq.n	8029cac <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 8029ca4:	683b      	ldr	r3, [r7, #0]
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	2b11      	cmp	r3, #17
 8029caa:	d105      	bne.n	8029cb8 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8029cac:	4b0b      	ldr	r3, [pc, #44]	; (8029cdc <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8029cae:	685b      	ldr	r3, [r3, #4]
 8029cb0:	4a0a      	ldr	r2, [pc, #40]	; (8029cdc <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8029cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8029cb6:	6053      	str	r3, [r2, #4]
 8029cb8:	687b      	ldr	r3, [r7, #4]
 8029cba:	2200      	movs	r2, #0
 8029cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8029cc0:	2300      	movs	r3, #0
 8029cc2:	4618      	mov	r0, r3
 8029cc4:	370c      	adds	r7, #12
 8029cc6:	46bd      	mov	sp, r7
 8029cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ccc:	4770      	bx	lr
 8029cce:	bf00      	nop
 8029cd0:	000f0001 	.word	0x000f0001
 8029cd4:	fffff000 	.word	0xfffff000
 8029cd8:	40012000 	.word	0x40012000
 8029cdc:	40012300 	.word	0x40012300
 8029ce0:	10000012 	.word	0x10000012

08029ce4 <__NVIC_GetPriorityGrouping>:
 8029ce4:	b480      	push	{r7}
 8029ce6:	af00      	add	r7, sp, #0
 8029ce8:	4b04      	ldr	r3, [pc, #16]	; (8029cfc <__NVIC_GetPriorityGrouping+0x18>)
 8029cea:	68db      	ldr	r3, [r3, #12]
 8029cec:	0a1b      	lsrs	r3, r3, #8
 8029cee:	f003 0307 	and.w	r3, r3, #7
 8029cf2:	4618      	mov	r0, r3
 8029cf4:	46bd      	mov	sp, r7
 8029cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cfa:	4770      	bx	lr
 8029cfc:	e000ed00 	.word	0xe000ed00

08029d00 <__NVIC_EnableIRQ>:
 8029d00:	b480      	push	{r7}
 8029d02:	b083      	sub	sp, #12
 8029d04:	af00      	add	r7, sp, #0
 8029d06:	4603      	mov	r3, r0
 8029d08:	71fb      	strb	r3, [r7, #7]
 8029d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d0e:	2b00      	cmp	r3, #0
 8029d10:	db0b      	blt.n	8029d2a <__NVIC_EnableIRQ+0x2a>
 8029d12:	79fb      	ldrb	r3, [r7, #7]
 8029d14:	f003 021f 	and.w	r2, r3, #31
 8029d18:	4907      	ldr	r1, [pc, #28]	; (8029d38 <__NVIC_EnableIRQ+0x38>)
 8029d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d1e:	095b      	lsrs	r3, r3, #5
 8029d20:	2001      	movs	r0, #1
 8029d22:	fa00 f202 	lsl.w	r2, r0, r2
 8029d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8029d2a:	bf00      	nop
 8029d2c:	370c      	adds	r7, #12
 8029d2e:	46bd      	mov	sp, r7
 8029d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d34:	4770      	bx	lr
 8029d36:	bf00      	nop
 8029d38:	e000e100 	.word	0xe000e100

08029d3c <__NVIC_DisableIRQ>:
 8029d3c:	b480      	push	{r7}
 8029d3e:	b083      	sub	sp, #12
 8029d40:	af00      	add	r7, sp, #0
 8029d42:	4603      	mov	r3, r0
 8029d44:	71fb      	strb	r3, [r7, #7]
 8029d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d4a:	2b00      	cmp	r3, #0
 8029d4c:	db12      	blt.n	8029d74 <__NVIC_DisableIRQ+0x38>
 8029d4e:	79fb      	ldrb	r3, [r7, #7]
 8029d50:	f003 021f 	and.w	r2, r3, #31
 8029d54:	490a      	ldr	r1, [pc, #40]	; (8029d80 <__NVIC_DisableIRQ+0x44>)
 8029d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d5a:	095b      	lsrs	r3, r3, #5
 8029d5c:	2001      	movs	r0, #1
 8029d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8029d62:	3320      	adds	r3, #32
 8029d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8029d68:	f3bf 8f4f 	dsb	sy
 8029d6c:	bf00      	nop
 8029d6e:	f3bf 8f6f 	isb	sy
 8029d72:	bf00      	nop
 8029d74:	bf00      	nop
 8029d76:	370c      	adds	r7, #12
 8029d78:	46bd      	mov	sp, r7
 8029d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d7e:	4770      	bx	lr
 8029d80:	e000e100 	.word	0xe000e100

08029d84 <__NVIC_SetPriority>:
 8029d84:	b480      	push	{r7}
 8029d86:	b083      	sub	sp, #12
 8029d88:	af00      	add	r7, sp, #0
 8029d8a:	4603      	mov	r3, r0
 8029d8c:	6039      	str	r1, [r7, #0]
 8029d8e:	71fb      	strb	r3, [r7, #7]
 8029d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d94:	2b00      	cmp	r3, #0
 8029d96:	db0a      	blt.n	8029dae <__NVIC_SetPriority+0x2a>
 8029d98:	683b      	ldr	r3, [r7, #0]
 8029d9a:	b2da      	uxtb	r2, r3
 8029d9c:	490c      	ldr	r1, [pc, #48]	; (8029dd0 <__NVIC_SetPriority+0x4c>)
 8029d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029da2:	0112      	lsls	r2, r2, #4
 8029da4:	b2d2      	uxtb	r2, r2
 8029da6:	440b      	add	r3, r1
 8029da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8029dac:	e00a      	b.n	8029dc4 <__NVIC_SetPriority+0x40>
 8029dae:	683b      	ldr	r3, [r7, #0]
 8029db0:	b2da      	uxtb	r2, r3
 8029db2:	4908      	ldr	r1, [pc, #32]	; (8029dd4 <__NVIC_SetPriority+0x50>)
 8029db4:	79fb      	ldrb	r3, [r7, #7]
 8029db6:	f003 030f 	and.w	r3, r3, #15
 8029dba:	3b04      	subs	r3, #4
 8029dbc:	0112      	lsls	r2, r2, #4
 8029dbe:	b2d2      	uxtb	r2, r2
 8029dc0:	440b      	add	r3, r1
 8029dc2:	761a      	strb	r2, [r3, #24]
 8029dc4:	bf00      	nop
 8029dc6:	370c      	adds	r7, #12
 8029dc8:	46bd      	mov	sp, r7
 8029dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dce:	4770      	bx	lr
 8029dd0:	e000e100 	.word	0xe000e100
 8029dd4:	e000ed00 	.word	0xe000ed00

08029dd8 <NVIC_EncodePriority>:
 8029dd8:	b480      	push	{r7}
 8029dda:	b089      	sub	sp, #36	; 0x24
 8029ddc:	af00      	add	r7, sp, #0
 8029dde:	60f8      	str	r0, [r7, #12]
 8029de0:	60b9      	str	r1, [r7, #8]
 8029de2:	607a      	str	r2, [r7, #4]
 8029de4:	68fb      	ldr	r3, [r7, #12]
 8029de6:	f003 0307 	and.w	r3, r3, #7
 8029dea:	61fb      	str	r3, [r7, #28]
 8029dec:	69fb      	ldr	r3, [r7, #28]
 8029dee:	f1c3 0307 	rsb	r3, r3, #7
 8029df2:	2b04      	cmp	r3, #4
 8029df4:	bf28      	it	cs
 8029df6:	2304      	movcs	r3, #4
 8029df8:	61bb      	str	r3, [r7, #24]
 8029dfa:	69fb      	ldr	r3, [r7, #28]
 8029dfc:	3304      	adds	r3, #4
 8029dfe:	2b06      	cmp	r3, #6
 8029e00:	d902      	bls.n	8029e08 <NVIC_EncodePriority+0x30>
 8029e02:	69fb      	ldr	r3, [r7, #28]
 8029e04:	3b03      	subs	r3, #3
 8029e06:	e000      	b.n	8029e0a <NVIC_EncodePriority+0x32>
 8029e08:	2300      	movs	r3, #0
 8029e0a:	617b      	str	r3, [r7, #20]
 8029e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8029e10:	69bb      	ldr	r3, [r7, #24]
 8029e12:	fa02 f303 	lsl.w	r3, r2, r3
 8029e16:	43da      	mvns	r2, r3
 8029e18:	68bb      	ldr	r3, [r7, #8]
 8029e1a:	401a      	ands	r2, r3
 8029e1c:	697b      	ldr	r3, [r7, #20]
 8029e1e:	409a      	lsls	r2, r3
 8029e20:	f04f 31ff 	mov.w	r1, #4294967295
 8029e24:	697b      	ldr	r3, [r7, #20]
 8029e26:	fa01 f303 	lsl.w	r3, r1, r3
 8029e2a:	43d9      	mvns	r1, r3
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	400b      	ands	r3, r1
 8029e30:	4313      	orrs	r3, r2
 8029e32:	4618      	mov	r0, r3
 8029e34:	3724      	adds	r7, #36	; 0x24
 8029e36:	46bd      	mov	sp, r7
 8029e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e3c:	4770      	bx	lr
	...

08029e40 <SysTick_Config>:
 8029e40:	b580      	push	{r7, lr}
 8029e42:	b082      	sub	sp, #8
 8029e44:	af00      	add	r7, sp, #0
 8029e46:	6078      	str	r0, [r7, #4]
 8029e48:	687b      	ldr	r3, [r7, #4]
 8029e4a:	3b01      	subs	r3, #1
 8029e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8029e50:	d301      	bcc.n	8029e56 <SysTick_Config+0x16>
 8029e52:	2301      	movs	r3, #1
 8029e54:	e00f      	b.n	8029e76 <SysTick_Config+0x36>
 8029e56:	4a0a      	ldr	r2, [pc, #40]	; (8029e80 <SysTick_Config+0x40>)
 8029e58:	687b      	ldr	r3, [r7, #4]
 8029e5a:	3b01      	subs	r3, #1
 8029e5c:	6053      	str	r3, [r2, #4]
 8029e5e:	210f      	movs	r1, #15
 8029e60:	f04f 30ff 	mov.w	r0, #4294967295
 8029e64:	f7ff ff8e 	bl	8029d84 <__NVIC_SetPriority>
 8029e68:	4b05      	ldr	r3, [pc, #20]	; (8029e80 <SysTick_Config+0x40>)
 8029e6a:	2200      	movs	r2, #0
 8029e6c:	609a      	str	r2, [r3, #8]
 8029e6e:	4b04      	ldr	r3, [pc, #16]	; (8029e80 <SysTick_Config+0x40>)
 8029e70:	2207      	movs	r2, #7
 8029e72:	601a      	str	r2, [r3, #0]
 8029e74:	2300      	movs	r3, #0
 8029e76:	4618      	mov	r0, r3
 8029e78:	3708      	adds	r7, #8
 8029e7a:	46bd      	mov	sp, r7
 8029e7c:	bd80      	pop	{r7, pc}
 8029e7e:	bf00      	nop
 8029e80:	e000e010 	.word	0xe000e010

08029e84 <HAL_NVIC_SetPriority>:
 8029e84:	b580      	push	{r7, lr}
 8029e86:	b086      	sub	sp, #24
 8029e88:	af00      	add	r7, sp, #0
 8029e8a:	4603      	mov	r3, r0
 8029e8c:	60b9      	str	r1, [r7, #8]
 8029e8e:	607a      	str	r2, [r7, #4]
 8029e90:	73fb      	strb	r3, [r7, #15]
 8029e92:	2300      	movs	r3, #0
 8029e94:	617b      	str	r3, [r7, #20]
 8029e96:	f7ff ff25 	bl	8029ce4 <__NVIC_GetPriorityGrouping>
 8029e9a:	6178      	str	r0, [r7, #20]
 8029e9c:	687a      	ldr	r2, [r7, #4]
 8029e9e:	68b9      	ldr	r1, [r7, #8]
 8029ea0:	6978      	ldr	r0, [r7, #20]
 8029ea2:	f7ff ff99 	bl	8029dd8 <NVIC_EncodePriority>
 8029ea6:	4602      	mov	r2, r0
 8029ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029eac:	4611      	mov	r1, r2
 8029eae:	4618      	mov	r0, r3
 8029eb0:	f7ff ff68 	bl	8029d84 <__NVIC_SetPriority>
 8029eb4:	bf00      	nop
 8029eb6:	3718      	adds	r7, #24
 8029eb8:	46bd      	mov	sp, r7
 8029eba:	bd80      	pop	{r7, pc}

08029ebc <HAL_NVIC_EnableIRQ>:
 8029ebc:	b580      	push	{r7, lr}
 8029ebe:	b082      	sub	sp, #8
 8029ec0:	af00      	add	r7, sp, #0
 8029ec2:	4603      	mov	r3, r0
 8029ec4:	71fb      	strb	r3, [r7, #7]
 8029ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029eca:	4618      	mov	r0, r3
 8029ecc:	f7ff ff18 	bl	8029d00 <__NVIC_EnableIRQ>
 8029ed0:	bf00      	nop
 8029ed2:	3708      	adds	r7, #8
 8029ed4:	46bd      	mov	sp, r7
 8029ed6:	bd80      	pop	{r7, pc}

08029ed8 <HAL_NVIC_DisableIRQ>:
 8029ed8:	b580      	push	{r7, lr}
 8029eda:	b082      	sub	sp, #8
 8029edc:	af00      	add	r7, sp, #0
 8029ede:	4603      	mov	r3, r0
 8029ee0:	71fb      	strb	r3, [r7, #7]
 8029ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029ee6:	4618      	mov	r0, r3
 8029ee8:	f7ff ff28 	bl	8029d3c <__NVIC_DisableIRQ>
 8029eec:	bf00      	nop
 8029eee:	3708      	adds	r7, #8
 8029ef0:	46bd      	mov	sp, r7
 8029ef2:	bd80      	pop	{r7, pc}

08029ef4 <HAL_SYSTICK_Config>:
 8029ef4:	b580      	push	{r7, lr}
 8029ef6:	b082      	sub	sp, #8
 8029ef8:	af00      	add	r7, sp, #0
 8029efa:	6078      	str	r0, [r7, #4]
 8029efc:	6878      	ldr	r0, [r7, #4]
 8029efe:	f7ff ff9f 	bl	8029e40 <SysTick_Config>
 8029f02:	4603      	mov	r3, r0
 8029f04:	4618      	mov	r0, r3
 8029f06:	3708      	adds	r7, #8
 8029f08:	46bd      	mov	sp, r7
 8029f0a:	bd80      	pop	{r7, pc}

08029f0c <HAL_MPU_Enable>:
 8029f0c:	b480      	push	{r7}
 8029f0e:	b083      	sub	sp, #12
 8029f10:	af00      	add	r7, sp, #0
 8029f12:	6078      	str	r0, [r7, #4]
 8029f14:	4a0b      	ldr	r2, [pc, #44]	; (8029f44 <HAL_MPU_Enable+0x38>)
 8029f16:	687b      	ldr	r3, [r7, #4]
 8029f18:	f043 0301 	orr.w	r3, r3, #1
 8029f1c:	6053      	str	r3, [r2, #4]
 8029f1e:	4b0a      	ldr	r3, [pc, #40]	; (8029f48 <HAL_MPU_Enable+0x3c>)
 8029f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029f22:	4a09      	ldr	r2, [pc, #36]	; (8029f48 <HAL_MPU_Enable+0x3c>)
 8029f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029f28:	6253      	str	r3, [r2, #36]	; 0x24
 8029f2a:	f3bf 8f4f 	dsb	sy
 8029f2e:	bf00      	nop
 8029f30:	f3bf 8f6f 	isb	sy
 8029f34:	bf00      	nop
 8029f36:	bf00      	nop
 8029f38:	370c      	adds	r7, #12
 8029f3a:	46bd      	mov	sp, r7
 8029f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f40:	4770      	bx	lr
 8029f42:	bf00      	nop
 8029f44:	e000ed90 	.word	0xe000ed90
 8029f48:	e000ed00 	.word	0xe000ed00

08029f4c <HAL_MPU_ConfigRegion>:
 8029f4c:	b480      	push	{r7}
 8029f4e:	b083      	sub	sp, #12
 8029f50:	af00      	add	r7, sp, #0
 8029f52:	6078      	str	r0, [r7, #4]
 8029f54:	687b      	ldr	r3, [r7, #4]
 8029f56:	785a      	ldrb	r2, [r3, #1]
 8029f58:	4b1d      	ldr	r3, [pc, #116]	; (8029fd0 <HAL_MPU_ConfigRegion+0x84>)
 8029f5a:	609a      	str	r2, [r3, #8]
 8029f5c:	687b      	ldr	r3, [r7, #4]
 8029f5e:	781b      	ldrb	r3, [r3, #0]
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	d029      	beq.n	8029fb8 <HAL_MPU_ConfigRegion+0x6c>
 8029f64:	4a1a      	ldr	r2, [pc, #104]	; (8029fd0 <HAL_MPU_ConfigRegion+0x84>)
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	685b      	ldr	r3, [r3, #4]
 8029f6a:	60d3      	str	r3, [r2, #12]
 8029f6c:	687b      	ldr	r3, [r7, #4]
 8029f6e:	7b1b      	ldrb	r3, [r3, #12]
 8029f70:	071a      	lsls	r2, r3, #28
 8029f72:	687b      	ldr	r3, [r7, #4]
 8029f74:	7adb      	ldrb	r3, [r3, #11]
 8029f76:	061b      	lsls	r3, r3, #24
 8029f78:	431a      	orrs	r2, r3
 8029f7a:	687b      	ldr	r3, [r7, #4]
 8029f7c:	7a9b      	ldrb	r3, [r3, #10]
 8029f7e:	04db      	lsls	r3, r3, #19
 8029f80:	431a      	orrs	r2, r3
 8029f82:	687b      	ldr	r3, [r7, #4]
 8029f84:	7b5b      	ldrb	r3, [r3, #13]
 8029f86:	049b      	lsls	r3, r3, #18
 8029f88:	431a      	orrs	r2, r3
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	7b9b      	ldrb	r3, [r3, #14]
 8029f8e:	045b      	lsls	r3, r3, #17
 8029f90:	431a      	orrs	r2, r3
 8029f92:	687b      	ldr	r3, [r7, #4]
 8029f94:	7bdb      	ldrb	r3, [r3, #15]
 8029f96:	041b      	lsls	r3, r3, #16
 8029f98:	431a      	orrs	r2, r3
 8029f9a:	687b      	ldr	r3, [r7, #4]
 8029f9c:	7a5b      	ldrb	r3, [r3, #9]
 8029f9e:	021b      	lsls	r3, r3, #8
 8029fa0:	431a      	orrs	r2, r3
 8029fa2:	687b      	ldr	r3, [r7, #4]
 8029fa4:	7a1b      	ldrb	r3, [r3, #8]
 8029fa6:	005b      	lsls	r3, r3, #1
 8029fa8:	4313      	orrs	r3, r2
 8029faa:	687a      	ldr	r2, [r7, #4]
 8029fac:	7812      	ldrb	r2, [r2, #0]
 8029fae:	4611      	mov	r1, r2
 8029fb0:	4a07      	ldr	r2, [pc, #28]	; (8029fd0 <HAL_MPU_ConfigRegion+0x84>)
 8029fb2:	430b      	orrs	r3, r1
 8029fb4:	6113      	str	r3, [r2, #16]
 8029fb6:	e005      	b.n	8029fc4 <HAL_MPU_ConfigRegion+0x78>
 8029fb8:	4b05      	ldr	r3, [pc, #20]	; (8029fd0 <HAL_MPU_ConfigRegion+0x84>)
 8029fba:	2200      	movs	r2, #0
 8029fbc:	60da      	str	r2, [r3, #12]
 8029fbe:	4b04      	ldr	r3, [pc, #16]	; (8029fd0 <HAL_MPU_ConfigRegion+0x84>)
 8029fc0:	2200      	movs	r2, #0
 8029fc2:	611a      	str	r2, [r3, #16]
 8029fc4:	bf00      	nop
 8029fc6:	370c      	adds	r7, #12
 8029fc8:	46bd      	mov	sp, r7
 8029fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fce:	4770      	bx	lr
 8029fd0:	e000ed90 	.word	0xe000ed90

08029fd4 <HAL_DMA_Init>:
 8029fd4:	b580      	push	{r7, lr}
 8029fd6:	b086      	sub	sp, #24
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	6078      	str	r0, [r7, #4]
 8029fdc:	2300      	movs	r3, #0
 8029fde:	617b      	str	r3, [r7, #20]
 8029fe0:	f7fe ff70 	bl	8028ec4 <HAL_GetTick>
 8029fe4:	6138      	str	r0, [r7, #16]
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	2b00      	cmp	r3, #0
 8029fea:	d101      	bne.n	8029ff0 <HAL_DMA_Init+0x1c>
 8029fec:	2301      	movs	r3, #1
 8029fee:	e099      	b.n	802a124 <HAL_DMA_Init+0x150>
 8029ff0:	687b      	ldr	r3, [r7, #4]
 8029ff2:	2200      	movs	r2, #0
 8029ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8029ff8:	687b      	ldr	r3, [r7, #4]
 8029ffa:	2202      	movs	r2, #2
 8029ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a000:	687b      	ldr	r3, [r7, #4]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	681a      	ldr	r2, [r3, #0]
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	681b      	ldr	r3, [r3, #0]
 802a00a:	f022 0201 	bic.w	r2, r2, #1
 802a00e:	601a      	str	r2, [r3, #0]
 802a010:	e00f      	b.n	802a032 <HAL_DMA_Init+0x5e>
 802a012:	f7fe ff57 	bl	8028ec4 <HAL_GetTick>
 802a016:	4602      	mov	r2, r0
 802a018:	693b      	ldr	r3, [r7, #16]
 802a01a:	1ad3      	subs	r3, r2, r3
 802a01c:	2b05      	cmp	r3, #5
 802a01e:	d908      	bls.n	802a032 <HAL_DMA_Init+0x5e>
 802a020:	687b      	ldr	r3, [r7, #4]
 802a022:	2220      	movs	r2, #32
 802a024:	655a      	str	r2, [r3, #84]	; 0x54
 802a026:	687b      	ldr	r3, [r7, #4]
 802a028:	2203      	movs	r2, #3
 802a02a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a02e:	2303      	movs	r3, #3
 802a030:	e078      	b.n	802a124 <HAL_DMA_Init+0x150>
 802a032:	687b      	ldr	r3, [r7, #4]
 802a034:	681b      	ldr	r3, [r3, #0]
 802a036:	681b      	ldr	r3, [r3, #0]
 802a038:	f003 0301 	and.w	r3, r3, #1
 802a03c:	2b00      	cmp	r3, #0
 802a03e:	d1e8      	bne.n	802a012 <HAL_DMA_Init+0x3e>
 802a040:	687b      	ldr	r3, [r7, #4]
 802a042:	681b      	ldr	r3, [r3, #0]
 802a044:	681b      	ldr	r3, [r3, #0]
 802a046:	617b      	str	r3, [r7, #20]
 802a048:	697a      	ldr	r2, [r7, #20]
 802a04a:	4b38      	ldr	r3, [pc, #224]	; (802a12c <HAL_DMA_Init+0x158>)
 802a04c:	4013      	ands	r3, r2
 802a04e:	617b      	str	r3, [r7, #20]
 802a050:	687b      	ldr	r3, [r7, #4]
 802a052:	685a      	ldr	r2, [r3, #4]
 802a054:	687b      	ldr	r3, [r7, #4]
 802a056:	689b      	ldr	r3, [r3, #8]
 802a058:	431a      	orrs	r2, r3
 802a05a:	687b      	ldr	r3, [r7, #4]
 802a05c:	68db      	ldr	r3, [r3, #12]
 802a05e:	431a      	orrs	r2, r3
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	691b      	ldr	r3, [r3, #16]
 802a064:	431a      	orrs	r2, r3
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	695b      	ldr	r3, [r3, #20]
 802a06a:	431a      	orrs	r2, r3
 802a06c:	687b      	ldr	r3, [r7, #4]
 802a06e:	699b      	ldr	r3, [r3, #24]
 802a070:	431a      	orrs	r2, r3
 802a072:	687b      	ldr	r3, [r7, #4]
 802a074:	69db      	ldr	r3, [r3, #28]
 802a076:	431a      	orrs	r2, r3
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	6a1b      	ldr	r3, [r3, #32]
 802a07c:	4313      	orrs	r3, r2
 802a07e:	697a      	ldr	r2, [r7, #20]
 802a080:	4313      	orrs	r3, r2
 802a082:	617b      	str	r3, [r7, #20]
 802a084:	687b      	ldr	r3, [r7, #4]
 802a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a088:	2b04      	cmp	r3, #4
 802a08a:	d107      	bne.n	802a09c <HAL_DMA_Init+0xc8>
 802a08c:	687b      	ldr	r3, [r7, #4]
 802a08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a090:	687b      	ldr	r3, [r7, #4]
 802a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a094:	4313      	orrs	r3, r2
 802a096:	697a      	ldr	r2, [r7, #20]
 802a098:	4313      	orrs	r3, r2
 802a09a:	617b      	str	r3, [r7, #20]
 802a09c:	687b      	ldr	r3, [r7, #4]
 802a09e:	681b      	ldr	r3, [r3, #0]
 802a0a0:	697a      	ldr	r2, [r7, #20]
 802a0a2:	601a      	str	r2, [r3, #0]
 802a0a4:	687b      	ldr	r3, [r7, #4]
 802a0a6:	681b      	ldr	r3, [r3, #0]
 802a0a8:	695b      	ldr	r3, [r3, #20]
 802a0aa:	617b      	str	r3, [r7, #20]
 802a0ac:	697b      	ldr	r3, [r7, #20]
 802a0ae:	f023 0307 	bic.w	r3, r3, #7
 802a0b2:	617b      	str	r3, [r7, #20]
 802a0b4:	687b      	ldr	r3, [r7, #4]
 802a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a0b8:	697a      	ldr	r2, [r7, #20]
 802a0ba:	4313      	orrs	r3, r2
 802a0bc:	617b      	str	r3, [r7, #20]
 802a0be:	687b      	ldr	r3, [r7, #4]
 802a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a0c2:	2b04      	cmp	r3, #4
 802a0c4:	d117      	bne.n	802a0f6 <HAL_DMA_Init+0x122>
 802a0c6:	687b      	ldr	r3, [r7, #4]
 802a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a0ca:	697a      	ldr	r2, [r7, #20]
 802a0cc:	4313      	orrs	r3, r2
 802a0ce:	617b      	str	r3, [r7, #20]
 802a0d0:	687b      	ldr	r3, [r7, #4]
 802a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0d4:	2b00      	cmp	r3, #0
 802a0d6:	d00e      	beq.n	802a0f6 <HAL_DMA_Init+0x122>
 802a0d8:	6878      	ldr	r0, [r7, #4]
 802a0da:	f000 f90f 	bl	802a2fc <DMA_CheckFifoParam>
 802a0de:	4603      	mov	r3, r0
 802a0e0:	2b00      	cmp	r3, #0
 802a0e2:	d008      	beq.n	802a0f6 <HAL_DMA_Init+0x122>
 802a0e4:	687b      	ldr	r3, [r7, #4]
 802a0e6:	2240      	movs	r2, #64	; 0x40
 802a0e8:	655a      	str	r2, [r3, #84]	; 0x54
 802a0ea:	687b      	ldr	r3, [r7, #4]
 802a0ec:	2201      	movs	r2, #1
 802a0ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a0f2:	2301      	movs	r3, #1
 802a0f4:	e016      	b.n	802a124 <HAL_DMA_Init+0x150>
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	681b      	ldr	r3, [r3, #0]
 802a0fa:	697a      	ldr	r2, [r7, #20]
 802a0fc:	615a      	str	r2, [r3, #20]
 802a0fe:	6878      	ldr	r0, [r7, #4]
 802a100:	f000 f8c6 	bl	802a290 <DMA_CalcBaseAndBitshift>
 802a104:	4603      	mov	r3, r0
 802a106:	60fb      	str	r3, [r7, #12]
 802a108:	687b      	ldr	r3, [r7, #4]
 802a10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a10c:	223f      	movs	r2, #63	; 0x3f
 802a10e:	409a      	lsls	r2, r3
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	609a      	str	r2, [r3, #8]
 802a114:	687b      	ldr	r3, [r7, #4]
 802a116:	2200      	movs	r2, #0
 802a118:	655a      	str	r2, [r3, #84]	; 0x54
 802a11a:	687b      	ldr	r3, [r7, #4]
 802a11c:	2201      	movs	r2, #1
 802a11e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a122:	2300      	movs	r3, #0
 802a124:	4618      	mov	r0, r3
 802a126:	3718      	adds	r7, #24
 802a128:	46bd      	mov	sp, r7
 802a12a:	bd80      	pop	{r7, pc}
 802a12c:	e010803f 	.word	0xe010803f

0802a130 <HAL_DMA_Start_IT>:
 802a130:	b580      	push	{r7, lr}
 802a132:	b086      	sub	sp, #24
 802a134:	af00      	add	r7, sp, #0
 802a136:	60f8      	str	r0, [r7, #12]
 802a138:	60b9      	str	r1, [r7, #8]
 802a13a:	607a      	str	r2, [r7, #4]
 802a13c:	603b      	str	r3, [r7, #0]
 802a13e:	2300      	movs	r3, #0
 802a140:	75fb      	strb	r3, [r7, #23]
 802a142:	68fb      	ldr	r3, [r7, #12]
 802a144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a146:	613b      	str	r3, [r7, #16]
 802a148:	68fb      	ldr	r3, [r7, #12]
 802a14a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802a14e:	2b01      	cmp	r3, #1
 802a150:	d101      	bne.n	802a156 <HAL_DMA_Start_IT+0x26>
 802a152:	2302      	movs	r3, #2
 802a154:	e048      	b.n	802a1e8 <HAL_DMA_Start_IT+0xb8>
 802a156:	68fb      	ldr	r3, [r7, #12]
 802a158:	2201      	movs	r2, #1
 802a15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802a15e:	68fb      	ldr	r3, [r7, #12]
 802a160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802a164:	b2db      	uxtb	r3, r3
 802a166:	2b01      	cmp	r3, #1
 802a168:	d137      	bne.n	802a1da <HAL_DMA_Start_IT+0xaa>
 802a16a:	68fb      	ldr	r3, [r7, #12]
 802a16c:	2202      	movs	r2, #2
 802a16e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a172:	68fb      	ldr	r3, [r7, #12]
 802a174:	2200      	movs	r2, #0
 802a176:	655a      	str	r2, [r3, #84]	; 0x54
 802a178:	683b      	ldr	r3, [r7, #0]
 802a17a:	687a      	ldr	r2, [r7, #4]
 802a17c:	68b9      	ldr	r1, [r7, #8]
 802a17e:	68f8      	ldr	r0, [r7, #12]
 802a180:	f000 f858 	bl	802a234 <DMA_SetConfig>
 802a184:	68fb      	ldr	r3, [r7, #12]
 802a186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a188:	223f      	movs	r2, #63	; 0x3f
 802a18a:	409a      	lsls	r2, r3
 802a18c:	693b      	ldr	r3, [r7, #16]
 802a18e:	609a      	str	r2, [r3, #8]
 802a190:	68fb      	ldr	r3, [r7, #12]
 802a192:	681b      	ldr	r3, [r3, #0]
 802a194:	681a      	ldr	r2, [r3, #0]
 802a196:	68fb      	ldr	r3, [r7, #12]
 802a198:	681b      	ldr	r3, [r3, #0]
 802a19a:	f042 0216 	orr.w	r2, r2, #22
 802a19e:	601a      	str	r2, [r3, #0]
 802a1a0:	68fb      	ldr	r3, [r7, #12]
 802a1a2:	681b      	ldr	r3, [r3, #0]
 802a1a4:	695a      	ldr	r2, [r3, #20]
 802a1a6:	68fb      	ldr	r3, [r7, #12]
 802a1a8:	681b      	ldr	r3, [r3, #0]
 802a1aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802a1ae:	615a      	str	r2, [r3, #20]
 802a1b0:	68fb      	ldr	r3, [r7, #12]
 802a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a1b4:	2b00      	cmp	r3, #0
 802a1b6:	d007      	beq.n	802a1c8 <HAL_DMA_Start_IT+0x98>
 802a1b8:	68fb      	ldr	r3, [r7, #12]
 802a1ba:	681b      	ldr	r3, [r3, #0]
 802a1bc:	681a      	ldr	r2, [r3, #0]
 802a1be:	68fb      	ldr	r3, [r7, #12]
 802a1c0:	681b      	ldr	r3, [r3, #0]
 802a1c2:	f042 0208 	orr.w	r2, r2, #8
 802a1c6:	601a      	str	r2, [r3, #0]
 802a1c8:	68fb      	ldr	r3, [r7, #12]
 802a1ca:	681b      	ldr	r3, [r3, #0]
 802a1cc:	681a      	ldr	r2, [r3, #0]
 802a1ce:	68fb      	ldr	r3, [r7, #12]
 802a1d0:	681b      	ldr	r3, [r3, #0]
 802a1d2:	f042 0201 	orr.w	r2, r2, #1
 802a1d6:	601a      	str	r2, [r3, #0]
 802a1d8:	e005      	b.n	802a1e6 <HAL_DMA_Start_IT+0xb6>
 802a1da:	68fb      	ldr	r3, [r7, #12]
 802a1dc:	2200      	movs	r2, #0
 802a1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802a1e2:	2302      	movs	r3, #2
 802a1e4:	75fb      	strb	r3, [r7, #23]
 802a1e6:	7dfb      	ldrb	r3, [r7, #23]
 802a1e8:	4618      	mov	r0, r3
 802a1ea:	3718      	adds	r7, #24
 802a1ec:	46bd      	mov	sp, r7
 802a1ee:	bd80      	pop	{r7, pc}

0802a1f0 <HAL_DMA_Abort_IT>:
 802a1f0:	b480      	push	{r7}
 802a1f2:	b083      	sub	sp, #12
 802a1f4:	af00      	add	r7, sp, #0
 802a1f6:	6078      	str	r0, [r7, #4]
 802a1f8:	687b      	ldr	r3, [r7, #4]
 802a1fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802a1fe:	b2db      	uxtb	r3, r3
 802a200:	2b02      	cmp	r3, #2
 802a202:	d004      	beq.n	802a20e <HAL_DMA_Abort_IT+0x1e>
 802a204:	687b      	ldr	r3, [r7, #4]
 802a206:	2280      	movs	r2, #128	; 0x80
 802a208:	655a      	str	r2, [r3, #84]	; 0x54
 802a20a:	2301      	movs	r3, #1
 802a20c:	e00c      	b.n	802a228 <HAL_DMA_Abort_IT+0x38>
 802a20e:	687b      	ldr	r3, [r7, #4]
 802a210:	2205      	movs	r2, #5
 802a212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802a216:	687b      	ldr	r3, [r7, #4]
 802a218:	681b      	ldr	r3, [r3, #0]
 802a21a:	681a      	ldr	r2, [r3, #0]
 802a21c:	687b      	ldr	r3, [r7, #4]
 802a21e:	681b      	ldr	r3, [r3, #0]
 802a220:	f022 0201 	bic.w	r2, r2, #1
 802a224:	601a      	str	r2, [r3, #0]
 802a226:	2300      	movs	r3, #0
 802a228:	4618      	mov	r0, r3
 802a22a:	370c      	adds	r7, #12
 802a22c:	46bd      	mov	sp, r7
 802a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a232:	4770      	bx	lr

0802a234 <DMA_SetConfig>:
 802a234:	b480      	push	{r7}
 802a236:	b085      	sub	sp, #20
 802a238:	af00      	add	r7, sp, #0
 802a23a:	60f8      	str	r0, [r7, #12]
 802a23c:	60b9      	str	r1, [r7, #8]
 802a23e:	607a      	str	r2, [r7, #4]
 802a240:	603b      	str	r3, [r7, #0]
 802a242:	68fb      	ldr	r3, [r7, #12]
 802a244:	681b      	ldr	r3, [r3, #0]
 802a246:	681a      	ldr	r2, [r3, #0]
 802a248:	68fb      	ldr	r3, [r7, #12]
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802a250:	601a      	str	r2, [r3, #0]
 802a252:	68fb      	ldr	r3, [r7, #12]
 802a254:	681b      	ldr	r3, [r3, #0]
 802a256:	683a      	ldr	r2, [r7, #0]
 802a258:	605a      	str	r2, [r3, #4]
 802a25a:	68fb      	ldr	r3, [r7, #12]
 802a25c:	689b      	ldr	r3, [r3, #8]
 802a25e:	2b40      	cmp	r3, #64	; 0x40
 802a260:	d108      	bne.n	802a274 <DMA_SetConfig+0x40>
 802a262:	68fb      	ldr	r3, [r7, #12]
 802a264:	681b      	ldr	r3, [r3, #0]
 802a266:	687a      	ldr	r2, [r7, #4]
 802a268:	609a      	str	r2, [r3, #8]
 802a26a:	68fb      	ldr	r3, [r7, #12]
 802a26c:	681b      	ldr	r3, [r3, #0]
 802a26e:	68ba      	ldr	r2, [r7, #8]
 802a270:	60da      	str	r2, [r3, #12]
 802a272:	e007      	b.n	802a284 <DMA_SetConfig+0x50>
 802a274:	68fb      	ldr	r3, [r7, #12]
 802a276:	681b      	ldr	r3, [r3, #0]
 802a278:	68ba      	ldr	r2, [r7, #8]
 802a27a:	609a      	str	r2, [r3, #8]
 802a27c:	68fb      	ldr	r3, [r7, #12]
 802a27e:	681b      	ldr	r3, [r3, #0]
 802a280:	687a      	ldr	r2, [r7, #4]
 802a282:	60da      	str	r2, [r3, #12]
 802a284:	bf00      	nop
 802a286:	3714      	adds	r7, #20
 802a288:	46bd      	mov	sp, r7
 802a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a28e:	4770      	bx	lr

0802a290 <DMA_CalcBaseAndBitshift>:
 802a290:	b480      	push	{r7}
 802a292:	b085      	sub	sp, #20
 802a294:	af00      	add	r7, sp, #0
 802a296:	6078      	str	r0, [r7, #4]
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	681b      	ldr	r3, [r3, #0]
 802a29c:	b2db      	uxtb	r3, r3
 802a29e:	3b10      	subs	r3, #16
 802a2a0:	4a13      	ldr	r2, [pc, #76]	; (802a2f0 <DMA_CalcBaseAndBitshift+0x60>)
 802a2a2:	fba2 2303 	umull	r2, r3, r2, r3
 802a2a6:	091b      	lsrs	r3, r3, #4
 802a2a8:	60fb      	str	r3, [r7, #12]
 802a2aa:	4a12      	ldr	r2, [pc, #72]	; (802a2f4 <DMA_CalcBaseAndBitshift+0x64>)
 802a2ac:	68fb      	ldr	r3, [r7, #12]
 802a2ae:	4413      	add	r3, r2
 802a2b0:	781b      	ldrb	r3, [r3, #0]
 802a2b2:	461a      	mov	r2, r3
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	65da      	str	r2, [r3, #92]	; 0x5c
 802a2b8:	68fb      	ldr	r3, [r7, #12]
 802a2ba:	2b03      	cmp	r3, #3
 802a2bc:	d908      	bls.n	802a2d0 <DMA_CalcBaseAndBitshift+0x40>
 802a2be:	687b      	ldr	r3, [r7, #4]
 802a2c0:	681b      	ldr	r3, [r3, #0]
 802a2c2:	461a      	mov	r2, r3
 802a2c4:	4b0c      	ldr	r3, [pc, #48]	; (802a2f8 <DMA_CalcBaseAndBitshift+0x68>)
 802a2c6:	4013      	ands	r3, r2
 802a2c8:	1d1a      	adds	r2, r3, #4
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	659a      	str	r2, [r3, #88]	; 0x58
 802a2ce:	e006      	b.n	802a2de <DMA_CalcBaseAndBitshift+0x4e>
 802a2d0:	687b      	ldr	r3, [r7, #4]
 802a2d2:	681b      	ldr	r3, [r3, #0]
 802a2d4:	461a      	mov	r2, r3
 802a2d6:	4b08      	ldr	r3, [pc, #32]	; (802a2f8 <DMA_CalcBaseAndBitshift+0x68>)
 802a2d8:	4013      	ands	r3, r2
 802a2da:	687a      	ldr	r2, [r7, #4]
 802a2dc:	6593      	str	r3, [r2, #88]	; 0x58
 802a2de:	687b      	ldr	r3, [r7, #4]
 802a2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a2e2:	4618      	mov	r0, r3
 802a2e4:	3714      	adds	r7, #20
 802a2e6:	46bd      	mov	sp, r7
 802a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2ec:	4770      	bx	lr
 802a2ee:	bf00      	nop
 802a2f0:	aaaaaaab 	.word	0xaaaaaaab
 802a2f4:	0803c0f4 	.word	0x0803c0f4
 802a2f8:	fffffc00 	.word	0xfffffc00

0802a2fc <DMA_CheckFifoParam>:
 802a2fc:	b480      	push	{r7}
 802a2fe:	b085      	sub	sp, #20
 802a300:	af00      	add	r7, sp, #0
 802a302:	6078      	str	r0, [r7, #4]
 802a304:	2300      	movs	r3, #0
 802a306:	73fb      	strb	r3, [r7, #15]
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a30c:	60bb      	str	r3, [r7, #8]
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	699b      	ldr	r3, [r3, #24]
 802a312:	2b00      	cmp	r3, #0
 802a314:	d11f      	bne.n	802a356 <DMA_CheckFifoParam+0x5a>
 802a316:	68bb      	ldr	r3, [r7, #8]
 802a318:	2b03      	cmp	r3, #3
 802a31a:	d856      	bhi.n	802a3ca <DMA_CheckFifoParam+0xce>
 802a31c:	a201      	add	r2, pc, #4	; (adr r2, 802a324 <DMA_CheckFifoParam+0x28>)
 802a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a322:	bf00      	nop
 802a324:	0802a335 	.word	0x0802a335
 802a328:	0802a347 	.word	0x0802a347
 802a32c:	0802a335 	.word	0x0802a335
 802a330:	0802a3cb 	.word	0x0802a3cb
 802a334:	687b      	ldr	r3, [r7, #4]
 802a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802a33c:	2b00      	cmp	r3, #0
 802a33e:	d046      	beq.n	802a3ce <DMA_CheckFifoParam+0xd2>
 802a340:	2301      	movs	r3, #1
 802a342:	73fb      	strb	r3, [r7, #15]
 802a344:	e043      	b.n	802a3ce <DMA_CheckFifoParam+0xd2>
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a34a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802a34e:	d140      	bne.n	802a3d2 <DMA_CheckFifoParam+0xd6>
 802a350:	2301      	movs	r3, #1
 802a352:	73fb      	strb	r3, [r7, #15]
 802a354:	e03d      	b.n	802a3d2 <DMA_CheckFifoParam+0xd6>
 802a356:	687b      	ldr	r3, [r7, #4]
 802a358:	699b      	ldr	r3, [r3, #24]
 802a35a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a35e:	d121      	bne.n	802a3a4 <DMA_CheckFifoParam+0xa8>
 802a360:	68bb      	ldr	r3, [r7, #8]
 802a362:	2b03      	cmp	r3, #3
 802a364:	d837      	bhi.n	802a3d6 <DMA_CheckFifoParam+0xda>
 802a366:	a201      	add	r2, pc, #4	; (adr r2, 802a36c <DMA_CheckFifoParam+0x70>)
 802a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a36c:	0802a37d 	.word	0x0802a37d
 802a370:	0802a383 	.word	0x0802a383
 802a374:	0802a37d 	.word	0x0802a37d
 802a378:	0802a395 	.word	0x0802a395
 802a37c:	2301      	movs	r3, #1
 802a37e:	73fb      	strb	r3, [r7, #15]
 802a380:	e030      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a382:	687b      	ldr	r3, [r7, #4]
 802a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802a38a:	2b00      	cmp	r3, #0
 802a38c:	d025      	beq.n	802a3da <DMA_CheckFifoParam+0xde>
 802a38e:	2301      	movs	r3, #1
 802a390:	73fb      	strb	r3, [r7, #15]
 802a392:	e022      	b.n	802a3da <DMA_CheckFifoParam+0xde>
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802a39c:	d11f      	bne.n	802a3de <DMA_CheckFifoParam+0xe2>
 802a39e:	2301      	movs	r3, #1
 802a3a0:	73fb      	strb	r3, [r7, #15]
 802a3a2:	e01c      	b.n	802a3de <DMA_CheckFifoParam+0xe2>
 802a3a4:	68bb      	ldr	r3, [r7, #8]
 802a3a6:	2b02      	cmp	r3, #2
 802a3a8:	d903      	bls.n	802a3b2 <DMA_CheckFifoParam+0xb6>
 802a3aa:	68bb      	ldr	r3, [r7, #8]
 802a3ac:	2b03      	cmp	r3, #3
 802a3ae:	d003      	beq.n	802a3b8 <DMA_CheckFifoParam+0xbc>
 802a3b0:	e018      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3b2:	2301      	movs	r3, #1
 802a3b4:	73fb      	strb	r3, [r7, #15]
 802a3b6:	e015      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3b8:	687b      	ldr	r3, [r7, #4]
 802a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a3bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802a3c0:	2b00      	cmp	r3, #0
 802a3c2:	d00e      	beq.n	802a3e2 <DMA_CheckFifoParam+0xe6>
 802a3c4:	2301      	movs	r3, #1
 802a3c6:	73fb      	strb	r3, [r7, #15]
 802a3c8:	e00b      	b.n	802a3e2 <DMA_CheckFifoParam+0xe6>
 802a3ca:	bf00      	nop
 802a3cc:	e00a      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3ce:	bf00      	nop
 802a3d0:	e008      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3d2:	bf00      	nop
 802a3d4:	e006      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3d6:	bf00      	nop
 802a3d8:	e004      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3da:	bf00      	nop
 802a3dc:	e002      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3de:	bf00      	nop
 802a3e0:	e000      	b.n	802a3e4 <DMA_CheckFifoParam+0xe8>
 802a3e2:	bf00      	nop
 802a3e4:	7bfb      	ldrb	r3, [r7, #15]
 802a3e6:	4618      	mov	r0, r3
 802a3e8:	3714      	adds	r7, #20
 802a3ea:	46bd      	mov	sp, r7
 802a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3f0:	4770      	bx	lr
 802a3f2:	bf00      	nop

0802a3f4 <HAL_FLASH_Program>:
 802a3f4:	b580      	push	{r7, lr}
 802a3f6:	b086      	sub	sp, #24
 802a3f8:	af00      	add	r7, sp, #0
 802a3fa:	60f8      	str	r0, [r7, #12]
 802a3fc:	60b9      	str	r1, [r7, #8]
 802a3fe:	e9c7 2300 	strd	r2, r3, [r7]
 802a402:	2301      	movs	r3, #1
 802a404:	75fb      	strb	r3, [r7, #23]
 802a406:	4b27      	ldr	r3, [pc, #156]	; (802a4a4 <HAL_FLASH_Program+0xb0>)
 802a408:	7d1b      	ldrb	r3, [r3, #20]
 802a40a:	2b01      	cmp	r3, #1
 802a40c:	d101      	bne.n	802a412 <HAL_FLASH_Program+0x1e>
 802a40e:	2302      	movs	r3, #2
 802a410:	e043      	b.n	802a49a <HAL_FLASH_Program+0xa6>
 802a412:	4b24      	ldr	r3, [pc, #144]	; (802a4a4 <HAL_FLASH_Program+0xb0>)
 802a414:	2201      	movs	r2, #1
 802a416:	751a      	strb	r2, [r3, #20]
 802a418:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a41c:	f000 f878 	bl	802a510 <FLASH_WaitForLastOperation>
 802a420:	4603      	mov	r3, r0
 802a422:	75fb      	strb	r3, [r7, #23]
 802a424:	7dfb      	ldrb	r3, [r7, #23]
 802a426:	2b00      	cmp	r3, #0
 802a428:	d133      	bne.n	802a492 <HAL_FLASH_Program+0x9e>
 802a42a:	68fb      	ldr	r3, [r7, #12]
 802a42c:	2b03      	cmp	r3, #3
 802a42e:	d823      	bhi.n	802a478 <HAL_FLASH_Program+0x84>
 802a430:	a201      	add	r2, pc, #4	; (adr r2, 802a438 <HAL_FLASH_Program+0x44>)
 802a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a436:	bf00      	nop
 802a438:	0802a449 	.word	0x0802a449
 802a43c:	0802a455 	.word	0x0802a455
 802a440:	0802a461 	.word	0x0802a461
 802a444:	0802a46d 	.word	0x0802a46d
 802a448:	783b      	ldrb	r3, [r7, #0]
 802a44a:	4619      	mov	r1, r3
 802a44c:	68b8      	ldr	r0, [r7, #8]
 802a44e:	f000 f91d 	bl	802a68c <FLASH_Program_Byte>
 802a452:	e012      	b.n	802a47a <HAL_FLASH_Program+0x86>
 802a454:	883b      	ldrh	r3, [r7, #0]
 802a456:	4619      	mov	r1, r3
 802a458:	68b8      	ldr	r0, [r7, #8]
 802a45a:	f000 f8f1 	bl	802a640 <FLASH_Program_HalfWord>
 802a45e:	e00c      	b.n	802a47a <HAL_FLASH_Program+0x86>
 802a460:	683b      	ldr	r3, [r7, #0]
 802a462:	4619      	mov	r1, r3
 802a464:	68b8      	ldr	r0, [r7, #8]
 802a466:	f000 f8c5 	bl	802a5f4 <FLASH_Program_Word>
 802a46a:	e006      	b.n	802a47a <HAL_FLASH_Program+0x86>
 802a46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a470:	68b8      	ldr	r0, [r7, #8]
 802a472:	f000 f88d 	bl	802a590 <FLASH_Program_DoubleWord>
 802a476:	e000      	b.n	802a47a <HAL_FLASH_Program+0x86>
 802a478:	bf00      	nop
 802a47a:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a47e:	f000 f847 	bl	802a510 <FLASH_WaitForLastOperation>
 802a482:	4603      	mov	r3, r0
 802a484:	75fb      	strb	r3, [r7, #23]
 802a486:	4b08      	ldr	r3, [pc, #32]	; (802a4a8 <HAL_FLASH_Program+0xb4>)
 802a488:	691b      	ldr	r3, [r3, #16]
 802a48a:	4a07      	ldr	r2, [pc, #28]	; (802a4a8 <HAL_FLASH_Program+0xb4>)
 802a48c:	f023 0301 	bic.w	r3, r3, #1
 802a490:	6113      	str	r3, [r2, #16]
 802a492:	4b04      	ldr	r3, [pc, #16]	; (802a4a4 <HAL_FLASH_Program+0xb0>)
 802a494:	2200      	movs	r2, #0
 802a496:	751a      	strb	r2, [r3, #20]
 802a498:	7dfb      	ldrb	r3, [r7, #23]
 802a49a:	4618      	mov	r0, r3
 802a49c:	3718      	adds	r7, #24
 802a49e:	46bd      	mov	sp, r7
 802a4a0:	bd80      	pop	{r7, pc}
 802a4a2:	bf00      	nop
 802a4a4:	2000ce50 	.word	0x2000ce50
 802a4a8:	40023c00 	.word	0x40023c00

0802a4ac <HAL_FLASH_Unlock>:
 802a4ac:	b480      	push	{r7}
 802a4ae:	b083      	sub	sp, #12
 802a4b0:	af00      	add	r7, sp, #0
 802a4b2:	2300      	movs	r3, #0
 802a4b4:	71fb      	strb	r3, [r7, #7]
 802a4b6:	4b0b      	ldr	r3, [pc, #44]	; (802a4e4 <HAL_FLASH_Unlock+0x38>)
 802a4b8:	691b      	ldr	r3, [r3, #16]
 802a4ba:	2b00      	cmp	r3, #0
 802a4bc:	da0b      	bge.n	802a4d6 <HAL_FLASH_Unlock+0x2a>
 802a4be:	4b09      	ldr	r3, [pc, #36]	; (802a4e4 <HAL_FLASH_Unlock+0x38>)
 802a4c0:	4a09      	ldr	r2, [pc, #36]	; (802a4e8 <HAL_FLASH_Unlock+0x3c>)
 802a4c2:	605a      	str	r2, [r3, #4]
 802a4c4:	4b07      	ldr	r3, [pc, #28]	; (802a4e4 <HAL_FLASH_Unlock+0x38>)
 802a4c6:	4a09      	ldr	r2, [pc, #36]	; (802a4ec <HAL_FLASH_Unlock+0x40>)
 802a4c8:	605a      	str	r2, [r3, #4]
 802a4ca:	4b06      	ldr	r3, [pc, #24]	; (802a4e4 <HAL_FLASH_Unlock+0x38>)
 802a4cc:	691b      	ldr	r3, [r3, #16]
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	da01      	bge.n	802a4d6 <HAL_FLASH_Unlock+0x2a>
 802a4d2:	2301      	movs	r3, #1
 802a4d4:	71fb      	strb	r3, [r7, #7]
 802a4d6:	79fb      	ldrb	r3, [r7, #7]
 802a4d8:	4618      	mov	r0, r3
 802a4da:	370c      	adds	r7, #12
 802a4dc:	46bd      	mov	sp, r7
 802a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4e2:	4770      	bx	lr
 802a4e4:	40023c00 	.word	0x40023c00
 802a4e8:	45670123 	.word	0x45670123
 802a4ec:	cdef89ab 	.word	0xcdef89ab

0802a4f0 <HAL_FLASH_Lock>:
 802a4f0:	b480      	push	{r7}
 802a4f2:	af00      	add	r7, sp, #0
 802a4f4:	4b05      	ldr	r3, [pc, #20]	; (802a50c <HAL_FLASH_Lock+0x1c>)
 802a4f6:	691b      	ldr	r3, [r3, #16]
 802a4f8:	4a04      	ldr	r2, [pc, #16]	; (802a50c <HAL_FLASH_Lock+0x1c>)
 802a4fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a4fe:	6113      	str	r3, [r2, #16]
 802a500:	2300      	movs	r3, #0
 802a502:	4618      	mov	r0, r3
 802a504:	46bd      	mov	sp, r7
 802a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a50a:	4770      	bx	lr
 802a50c:	40023c00 	.word	0x40023c00

0802a510 <FLASH_WaitForLastOperation>:
 802a510:	b580      	push	{r7, lr}
 802a512:	b084      	sub	sp, #16
 802a514:	af00      	add	r7, sp, #0
 802a516:	6078      	str	r0, [r7, #4]
 802a518:	2300      	movs	r3, #0
 802a51a:	60fb      	str	r3, [r7, #12]
 802a51c:	4b1a      	ldr	r3, [pc, #104]	; (802a588 <FLASH_WaitForLastOperation+0x78>)
 802a51e:	2200      	movs	r2, #0
 802a520:	619a      	str	r2, [r3, #24]
 802a522:	f7fe fccf 	bl	8028ec4 <HAL_GetTick>
 802a526:	60f8      	str	r0, [r7, #12]
 802a528:	e010      	b.n	802a54c <FLASH_WaitForLastOperation+0x3c>
 802a52a:	687b      	ldr	r3, [r7, #4]
 802a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a530:	d00c      	beq.n	802a54c <FLASH_WaitForLastOperation+0x3c>
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	2b00      	cmp	r3, #0
 802a536:	d007      	beq.n	802a548 <FLASH_WaitForLastOperation+0x38>
 802a538:	f7fe fcc4 	bl	8028ec4 <HAL_GetTick>
 802a53c:	4602      	mov	r2, r0
 802a53e:	68fb      	ldr	r3, [r7, #12]
 802a540:	1ad3      	subs	r3, r2, r3
 802a542:	687a      	ldr	r2, [r7, #4]
 802a544:	429a      	cmp	r2, r3
 802a546:	d201      	bcs.n	802a54c <FLASH_WaitForLastOperation+0x3c>
 802a548:	2303      	movs	r3, #3
 802a54a:	e019      	b.n	802a580 <FLASH_WaitForLastOperation+0x70>
 802a54c:	4b0f      	ldr	r3, [pc, #60]	; (802a58c <FLASH_WaitForLastOperation+0x7c>)
 802a54e:	68db      	ldr	r3, [r3, #12]
 802a550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a554:	2b00      	cmp	r3, #0
 802a556:	d1e8      	bne.n	802a52a <FLASH_WaitForLastOperation+0x1a>
 802a558:	4b0c      	ldr	r3, [pc, #48]	; (802a58c <FLASH_WaitForLastOperation+0x7c>)
 802a55a:	68db      	ldr	r3, [r3, #12]
 802a55c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802a560:	2b00      	cmp	r3, #0
 802a562:	d003      	beq.n	802a56c <FLASH_WaitForLastOperation+0x5c>
 802a564:	f000 f8b6 	bl	802a6d4 <FLASH_SetErrorCode>
 802a568:	2301      	movs	r3, #1
 802a56a:	e009      	b.n	802a580 <FLASH_WaitForLastOperation+0x70>
 802a56c:	4b07      	ldr	r3, [pc, #28]	; (802a58c <FLASH_WaitForLastOperation+0x7c>)
 802a56e:	68db      	ldr	r3, [r3, #12]
 802a570:	f003 0301 	and.w	r3, r3, #1
 802a574:	2b00      	cmp	r3, #0
 802a576:	d002      	beq.n	802a57e <FLASH_WaitForLastOperation+0x6e>
 802a578:	4b04      	ldr	r3, [pc, #16]	; (802a58c <FLASH_WaitForLastOperation+0x7c>)
 802a57a:	2201      	movs	r2, #1
 802a57c:	60da      	str	r2, [r3, #12]
 802a57e:	2300      	movs	r3, #0
 802a580:	4618      	mov	r0, r3
 802a582:	3710      	adds	r7, #16
 802a584:	46bd      	mov	sp, r7
 802a586:	bd80      	pop	{r7, pc}
 802a588:	2000ce50 	.word	0x2000ce50
 802a58c:	40023c00 	.word	0x40023c00

0802a590 <FLASH_Program_DoubleWord>:
 802a590:	b480      	push	{r7}
 802a592:	b085      	sub	sp, #20
 802a594:	af00      	add	r7, sp, #0
 802a596:	60f8      	str	r0, [r7, #12]
 802a598:	e9c7 2300 	strd	r2, r3, [r7]
 802a59c:	4b14      	ldr	r3, [pc, #80]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a59e:	691b      	ldr	r3, [r3, #16]
 802a5a0:	4a13      	ldr	r2, [pc, #76]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a5a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a5a6:	6113      	str	r3, [r2, #16]
 802a5a8:	4b11      	ldr	r3, [pc, #68]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a5aa:	691b      	ldr	r3, [r3, #16]
 802a5ac:	4a10      	ldr	r2, [pc, #64]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a5ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802a5b2:	6113      	str	r3, [r2, #16]
 802a5b4:	4b0e      	ldr	r3, [pc, #56]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a5b6:	691b      	ldr	r3, [r3, #16]
 802a5b8:	4a0d      	ldr	r2, [pc, #52]	; (802a5f0 <FLASH_Program_DoubleWord+0x60>)
 802a5ba:	f043 0301 	orr.w	r3, r3, #1
 802a5be:	6113      	str	r3, [r2, #16]
 802a5c0:	68fb      	ldr	r3, [r7, #12]
 802a5c2:	683a      	ldr	r2, [r7, #0]
 802a5c4:	601a      	str	r2, [r3, #0]
 802a5c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 802a5ca:	f04f 0200 	mov.w	r2, #0
 802a5ce:	f04f 0300 	mov.w	r3, #0
 802a5d2:	000a      	movs	r2, r1
 802a5d4:	2300      	movs	r3, #0
 802a5d6:	68f9      	ldr	r1, [r7, #12]
 802a5d8:	3104      	adds	r1, #4
 802a5da:	4613      	mov	r3, r2
 802a5dc:	600b      	str	r3, [r1, #0]
 802a5de:	f3bf 8f4f 	dsb	sy
 802a5e2:	bf00      	nop
 802a5e4:	bf00      	nop
 802a5e6:	3714      	adds	r7, #20
 802a5e8:	46bd      	mov	sp, r7
 802a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5ee:	4770      	bx	lr
 802a5f0:	40023c00 	.word	0x40023c00

0802a5f4 <FLASH_Program_Word>:
 802a5f4:	b480      	push	{r7}
 802a5f6:	b083      	sub	sp, #12
 802a5f8:	af00      	add	r7, sp, #0
 802a5fa:	6078      	str	r0, [r7, #4]
 802a5fc:	6039      	str	r1, [r7, #0]
 802a5fe:	4b0f      	ldr	r3, [pc, #60]	; (802a63c <FLASH_Program_Word+0x48>)
 802a600:	691b      	ldr	r3, [r3, #16]
 802a602:	4a0e      	ldr	r2, [pc, #56]	; (802a63c <FLASH_Program_Word+0x48>)
 802a604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a608:	6113      	str	r3, [r2, #16]
 802a60a:	4b0c      	ldr	r3, [pc, #48]	; (802a63c <FLASH_Program_Word+0x48>)
 802a60c:	691b      	ldr	r3, [r3, #16]
 802a60e:	4a0b      	ldr	r2, [pc, #44]	; (802a63c <FLASH_Program_Word+0x48>)
 802a610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802a614:	6113      	str	r3, [r2, #16]
 802a616:	4b09      	ldr	r3, [pc, #36]	; (802a63c <FLASH_Program_Word+0x48>)
 802a618:	691b      	ldr	r3, [r3, #16]
 802a61a:	4a08      	ldr	r2, [pc, #32]	; (802a63c <FLASH_Program_Word+0x48>)
 802a61c:	f043 0301 	orr.w	r3, r3, #1
 802a620:	6113      	str	r3, [r2, #16]
 802a622:	687b      	ldr	r3, [r7, #4]
 802a624:	683a      	ldr	r2, [r7, #0]
 802a626:	601a      	str	r2, [r3, #0]
 802a628:	f3bf 8f4f 	dsb	sy
 802a62c:	bf00      	nop
 802a62e:	bf00      	nop
 802a630:	370c      	adds	r7, #12
 802a632:	46bd      	mov	sp, r7
 802a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a638:	4770      	bx	lr
 802a63a:	bf00      	nop
 802a63c:	40023c00 	.word	0x40023c00

0802a640 <FLASH_Program_HalfWord>:
 802a640:	b480      	push	{r7}
 802a642:	b083      	sub	sp, #12
 802a644:	af00      	add	r7, sp, #0
 802a646:	6078      	str	r0, [r7, #4]
 802a648:	460b      	mov	r3, r1
 802a64a:	807b      	strh	r3, [r7, #2]
 802a64c:	4b0e      	ldr	r3, [pc, #56]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a64e:	691b      	ldr	r3, [r3, #16]
 802a650:	4a0d      	ldr	r2, [pc, #52]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a656:	6113      	str	r3, [r2, #16]
 802a658:	4b0b      	ldr	r3, [pc, #44]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a65a:	691b      	ldr	r3, [r3, #16]
 802a65c:	4a0a      	ldr	r2, [pc, #40]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a65e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a662:	6113      	str	r3, [r2, #16]
 802a664:	4b08      	ldr	r3, [pc, #32]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a666:	691b      	ldr	r3, [r3, #16]
 802a668:	4a07      	ldr	r2, [pc, #28]	; (802a688 <FLASH_Program_HalfWord+0x48>)
 802a66a:	f043 0301 	orr.w	r3, r3, #1
 802a66e:	6113      	str	r3, [r2, #16]
 802a670:	687b      	ldr	r3, [r7, #4]
 802a672:	887a      	ldrh	r2, [r7, #2]
 802a674:	801a      	strh	r2, [r3, #0]
 802a676:	f3bf 8f4f 	dsb	sy
 802a67a:	bf00      	nop
 802a67c:	bf00      	nop
 802a67e:	370c      	adds	r7, #12
 802a680:	46bd      	mov	sp, r7
 802a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a686:	4770      	bx	lr
 802a688:	40023c00 	.word	0x40023c00

0802a68c <FLASH_Program_Byte>:
 802a68c:	b480      	push	{r7}
 802a68e:	b083      	sub	sp, #12
 802a690:	af00      	add	r7, sp, #0
 802a692:	6078      	str	r0, [r7, #4]
 802a694:	460b      	mov	r3, r1
 802a696:	70fb      	strb	r3, [r7, #3]
 802a698:	4b0d      	ldr	r3, [pc, #52]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a69a:	691b      	ldr	r3, [r3, #16]
 802a69c:	4a0c      	ldr	r2, [pc, #48]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a6a2:	6113      	str	r3, [r2, #16]
 802a6a4:	4b0a      	ldr	r3, [pc, #40]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a6a6:	4a0a      	ldr	r2, [pc, #40]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a6a8:	691b      	ldr	r3, [r3, #16]
 802a6aa:	6113      	str	r3, [r2, #16]
 802a6ac:	4b08      	ldr	r3, [pc, #32]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a6ae:	691b      	ldr	r3, [r3, #16]
 802a6b0:	4a07      	ldr	r2, [pc, #28]	; (802a6d0 <FLASH_Program_Byte+0x44>)
 802a6b2:	f043 0301 	orr.w	r3, r3, #1
 802a6b6:	6113      	str	r3, [r2, #16]
 802a6b8:	687b      	ldr	r3, [r7, #4]
 802a6ba:	78fa      	ldrb	r2, [r7, #3]
 802a6bc:	701a      	strb	r2, [r3, #0]
 802a6be:	f3bf 8f4f 	dsb	sy
 802a6c2:	bf00      	nop
 802a6c4:	bf00      	nop
 802a6c6:	370c      	adds	r7, #12
 802a6c8:	46bd      	mov	sp, r7
 802a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6ce:	4770      	bx	lr
 802a6d0:	40023c00 	.word	0x40023c00

0802a6d4 <FLASH_SetErrorCode>:
 802a6d4:	b480      	push	{r7}
 802a6d6:	af00      	add	r7, sp, #0
 802a6d8:	4b21      	ldr	r3, [pc, #132]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a6da:	68db      	ldr	r3, [r3, #12]
 802a6dc:	f003 0302 	and.w	r3, r3, #2
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d005      	beq.n	802a6f0 <FLASH_SetErrorCode+0x1c>
 802a6e4:	4b1f      	ldr	r3, [pc, #124]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a6e6:	699b      	ldr	r3, [r3, #24]
 802a6e8:	f043 0320 	orr.w	r3, r3, #32
 802a6ec:	4a1d      	ldr	r2, [pc, #116]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a6ee:	6193      	str	r3, [r2, #24]
 802a6f0:	4b1b      	ldr	r3, [pc, #108]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a6f2:	68db      	ldr	r3, [r3, #12]
 802a6f4:	f003 0310 	and.w	r3, r3, #16
 802a6f8:	2b00      	cmp	r3, #0
 802a6fa:	d005      	beq.n	802a708 <FLASH_SetErrorCode+0x34>
 802a6fc:	4b19      	ldr	r3, [pc, #100]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a6fe:	699b      	ldr	r3, [r3, #24]
 802a700:	f043 0310 	orr.w	r3, r3, #16
 802a704:	4a17      	ldr	r2, [pc, #92]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a706:	6193      	str	r3, [r2, #24]
 802a708:	4b15      	ldr	r3, [pc, #84]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a70a:	68db      	ldr	r3, [r3, #12]
 802a70c:	f003 0320 	and.w	r3, r3, #32
 802a710:	2b00      	cmp	r3, #0
 802a712:	d005      	beq.n	802a720 <FLASH_SetErrorCode+0x4c>
 802a714:	4b13      	ldr	r3, [pc, #76]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a716:	699b      	ldr	r3, [r3, #24]
 802a718:	f043 0308 	orr.w	r3, r3, #8
 802a71c:	4a11      	ldr	r2, [pc, #68]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a71e:	6193      	str	r3, [r2, #24]
 802a720:	4b0f      	ldr	r3, [pc, #60]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a722:	68db      	ldr	r3, [r3, #12]
 802a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a728:	2b00      	cmp	r3, #0
 802a72a:	d005      	beq.n	802a738 <FLASH_SetErrorCode+0x64>
 802a72c:	4b0d      	ldr	r3, [pc, #52]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a72e:	699b      	ldr	r3, [r3, #24]
 802a730:	f043 0304 	orr.w	r3, r3, #4
 802a734:	4a0b      	ldr	r2, [pc, #44]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a736:	6193      	str	r3, [r2, #24]
 802a738:	4b09      	ldr	r3, [pc, #36]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a73a:	68db      	ldr	r3, [r3, #12]
 802a73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a740:	2b00      	cmp	r3, #0
 802a742:	d005      	beq.n	802a750 <FLASH_SetErrorCode+0x7c>
 802a744:	4b07      	ldr	r3, [pc, #28]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a746:	699b      	ldr	r3, [r3, #24]
 802a748:	f043 0302 	orr.w	r3, r3, #2
 802a74c:	4a05      	ldr	r2, [pc, #20]	; (802a764 <FLASH_SetErrorCode+0x90>)
 802a74e:	6193      	str	r3, [r2, #24]
 802a750:	4b03      	ldr	r3, [pc, #12]	; (802a760 <FLASH_SetErrorCode+0x8c>)
 802a752:	22f2      	movs	r2, #242	; 0xf2
 802a754:	60da      	str	r2, [r3, #12]
 802a756:	bf00      	nop
 802a758:	46bd      	mov	sp, r7
 802a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a75e:	4770      	bx	lr
 802a760:	40023c00 	.word	0x40023c00
 802a764:	2000ce50 	.word	0x2000ce50

0802a768 <HAL_FLASHEx_Erase>:
 802a768:	b580      	push	{r7, lr}
 802a76a:	b084      	sub	sp, #16
 802a76c:	af00      	add	r7, sp, #0
 802a76e:	6078      	str	r0, [r7, #4]
 802a770:	6039      	str	r1, [r7, #0]
 802a772:	2301      	movs	r3, #1
 802a774:	73fb      	strb	r3, [r7, #15]
 802a776:	2300      	movs	r3, #0
 802a778:	60bb      	str	r3, [r7, #8]
 802a77a:	4b30      	ldr	r3, [pc, #192]	; (802a83c <HAL_FLASHEx_Erase+0xd4>)
 802a77c:	7d1b      	ldrb	r3, [r3, #20]
 802a77e:	2b01      	cmp	r3, #1
 802a780:	d101      	bne.n	802a786 <HAL_FLASHEx_Erase+0x1e>
 802a782:	2302      	movs	r3, #2
 802a784:	e056      	b.n	802a834 <HAL_FLASHEx_Erase+0xcc>
 802a786:	4b2d      	ldr	r3, [pc, #180]	; (802a83c <HAL_FLASHEx_Erase+0xd4>)
 802a788:	2201      	movs	r2, #1
 802a78a:	751a      	strb	r2, [r3, #20]
 802a78c:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a790:	f7ff febe 	bl	802a510 <FLASH_WaitForLastOperation>
 802a794:	4603      	mov	r3, r0
 802a796:	73fb      	strb	r3, [r7, #15]
 802a798:	7bfb      	ldrb	r3, [r7, #15]
 802a79a:	2b00      	cmp	r3, #0
 802a79c:	d146      	bne.n	802a82c <HAL_FLASHEx_Erase+0xc4>
 802a79e:	683b      	ldr	r3, [r7, #0]
 802a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 802a7a4:	601a      	str	r2, [r3, #0]
 802a7a6:	687b      	ldr	r3, [r7, #4]
 802a7a8:	681b      	ldr	r3, [r3, #0]
 802a7aa:	2b01      	cmp	r3, #1
 802a7ac:	d115      	bne.n	802a7da <HAL_FLASHEx_Erase+0x72>
 802a7ae:	687b      	ldr	r3, [r7, #4]
 802a7b0:	691b      	ldr	r3, [r3, #16]
 802a7b2:	b2da      	uxtb	r2, r3
 802a7b4:	687b      	ldr	r3, [r7, #4]
 802a7b6:	685b      	ldr	r3, [r3, #4]
 802a7b8:	4619      	mov	r1, r3
 802a7ba:	4610      	mov	r0, r2
 802a7bc:	f000 f844 	bl	802a848 <FLASH_MassErase>
 802a7c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a7c4:	f7ff fea4 	bl	802a510 <FLASH_WaitForLastOperation>
 802a7c8:	4603      	mov	r3, r0
 802a7ca:	73fb      	strb	r3, [r7, #15]
 802a7cc:	4b1c      	ldr	r3, [pc, #112]	; (802a840 <HAL_FLASHEx_Erase+0xd8>)
 802a7ce:	691a      	ldr	r2, [r3, #16]
 802a7d0:	491b      	ldr	r1, [pc, #108]	; (802a840 <HAL_FLASHEx_Erase+0xd8>)
 802a7d2:	4b1c      	ldr	r3, [pc, #112]	; (802a844 <HAL_FLASHEx_Erase+0xdc>)
 802a7d4:	4013      	ands	r3, r2
 802a7d6:	610b      	str	r3, [r1, #16]
 802a7d8:	e028      	b.n	802a82c <HAL_FLASHEx_Erase+0xc4>
 802a7da:	687b      	ldr	r3, [r7, #4]
 802a7dc:	689b      	ldr	r3, [r3, #8]
 802a7de:	60bb      	str	r3, [r7, #8]
 802a7e0:	e01c      	b.n	802a81c <HAL_FLASHEx_Erase+0xb4>
 802a7e2:	687b      	ldr	r3, [r7, #4]
 802a7e4:	691b      	ldr	r3, [r3, #16]
 802a7e6:	b2db      	uxtb	r3, r3
 802a7e8:	4619      	mov	r1, r3
 802a7ea:	68b8      	ldr	r0, [r7, #8]
 802a7ec:	f000 f868 	bl	802a8c0 <FLASH_Erase_Sector>
 802a7f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a7f4:	f7ff fe8c 	bl	802a510 <FLASH_WaitForLastOperation>
 802a7f8:	4603      	mov	r3, r0
 802a7fa:	73fb      	strb	r3, [r7, #15]
 802a7fc:	4b10      	ldr	r3, [pc, #64]	; (802a840 <HAL_FLASHEx_Erase+0xd8>)
 802a7fe:	691b      	ldr	r3, [r3, #16]
 802a800:	4a0f      	ldr	r2, [pc, #60]	; (802a840 <HAL_FLASHEx_Erase+0xd8>)
 802a802:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802a806:	6113      	str	r3, [r2, #16]
 802a808:	7bfb      	ldrb	r3, [r7, #15]
 802a80a:	2b00      	cmp	r3, #0
 802a80c:	d003      	beq.n	802a816 <HAL_FLASHEx_Erase+0xae>
 802a80e:	683b      	ldr	r3, [r7, #0]
 802a810:	68ba      	ldr	r2, [r7, #8]
 802a812:	601a      	str	r2, [r3, #0]
 802a814:	e00a      	b.n	802a82c <HAL_FLASHEx_Erase+0xc4>
 802a816:	68bb      	ldr	r3, [r7, #8]
 802a818:	3301      	adds	r3, #1
 802a81a:	60bb      	str	r3, [r7, #8]
 802a81c:	687b      	ldr	r3, [r7, #4]
 802a81e:	68da      	ldr	r2, [r3, #12]
 802a820:	687b      	ldr	r3, [r7, #4]
 802a822:	689b      	ldr	r3, [r3, #8]
 802a824:	4413      	add	r3, r2
 802a826:	68ba      	ldr	r2, [r7, #8]
 802a828:	429a      	cmp	r2, r3
 802a82a:	d3da      	bcc.n	802a7e2 <HAL_FLASHEx_Erase+0x7a>
 802a82c:	4b03      	ldr	r3, [pc, #12]	; (802a83c <HAL_FLASHEx_Erase+0xd4>)
 802a82e:	2200      	movs	r2, #0
 802a830:	751a      	strb	r2, [r3, #20]
 802a832:	7bfb      	ldrb	r3, [r7, #15]
 802a834:	4618      	mov	r0, r3
 802a836:	3710      	adds	r7, #16
 802a838:	46bd      	mov	sp, r7
 802a83a:	bd80      	pop	{r7, pc}
 802a83c:	2000ce50 	.word	0x2000ce50
 802a840:	40023c00 	.word	0x40023c00
 802a844:	ffff7ffb 	.word	0xffff7ffb

0802a848 <FLASH_MassErase>:
 802a848:	b480      	push	{r7}
 802a84a:	b083      	sub	sp, #12
 802a84c:	af00      	add	r7, sp, #0
 802a84e:	4603      	mov	r3, r0
 802a850:	6039      	str	r1, [r7, #0]
 802a852:	71fb      	strb	r3, [r7, #7]
 802a854:	4b19      	ldr	r3, [pc, #100]	; (802a8bc <FLASH_MassErase+0x74>)
 802a856:	691b      	ldr	r3, [r3, #16]
 802a858:	4a18      	ldr	r2, [pc, #96]	; (802a8bc <FLASH_MassErase+0x74>)
 802a85a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a85e:	6113      	str	r3, [r2, #16]
 802a860:	683b      	ldr	r3, [r7, #0]
 802a862:	2b03      	cmp	r3, #3
 802a864:	d107      	bne.n	802a876 <FLASH_MassErase+0x2e>
 802a866:	4b15      	ldr	r3, [pc, #84]	; (802a8bc <FLASH_MassErase+0x74>)
 802a868:	691a      	ldr	r2, [r3, #16]
 802a86a:	4914      	ldr	r1, [pc, #80]	; (802a8bc <FLASH_MassErase+0x74>)
 802a86c:	f248 0304 	movw	r3, #32772	; 0x8004
 802a870:	4313      	orrs	r3, r2
 802a872:	610b      	str	r3, [r1, #16]
 802a874:	e00f      	b.n	802a896 <FLASH_MassErase+0x4e>
 802a876:	683b      	ldr	r3, [r7, #0]
 802a878:	2b02      	cmp	r3, #2
 802a87a:	d106      	bne.n	802a88a <FLASH_MassErase+0x42>
 802a87c:	4b0f      	ldr	r3, [pc, #60]	; (802a8bc <FLASH_MassErase+0x74>)
 802a87e:	691b      	ldr	r3, [r3, #16]
 802a880:	4a0e      	ldr	r2, [pc, #56]	; (802a8bc <FLASH_MassErase+0x74>)
 802a882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a886:	6113      	str	r3, [r2, #16]
 802a888:	e005      	b.n	802a896 <FLASH_MassErase+0x4e>
 802a88a:	4b0c      	ldr	r3, [pc, #48]	; (802a8bc <FLASH_MassErase+0x74>)
 802a88c:	691b      	ldr	r3, [r3, #16]
 802a88e:	4a0b      	ldr	r2, [pc, #44]	; (802a8bc <FLASH_MassErase+0x74>)
 802a890:	f043 0304 	orr.w	r3, r3, #4
 802a894:	6113      	str	r3, [r2, #16]
 802a896:	4b09      	ldr	r3, [pc, #36]	; (802a8bc <FLASH_MassErase+0x74>)
 802a898:	691a      	ldr	r2, [r3, #16]
 802a89a:	79fb      	ldrb	r3, [r7, #7]
 802a89c:	021b      	lsls	r3, r3, #8
 802a89e:	4313      	orrs	r3, r2
 802a8a0:	4a06      	ldr	r2, [pc, #24]	; (802a8bc <FLASH_MassErase+0x74>)
 802a8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a8a6:	6113      	str	r3, [r2, #16]
 802a8a8:	f3bf 8f4f 	dsb	sy
 802a8ac:	bf00      	nop
 802a8ae:	bf00      	nop
 802a8b0:	370c      	adds	r7, #12
 802a8b2:	46bd      	mov	sp, r7
 802a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8b8:	4770      	bx	lr
 802a8ba:	bf00      	nop
 802a8bc:	40023c00 	.word	0x40023c00

0802a8c0 <FLASH_Erase_Sector>:
 802a8c0:	b480      	push	{r7}
 802a8c2:	b085      	sub	sp, #20
 802a8c4:	af00      	add	r7, sp, #0
 802a8c6:	6078      	str	r0, [r7, #4]
 802a8c8:	460b      	mov	r3, r1
 802a8ca:	70fb      	strb	r3, [r7, #3]
 802a8cc:	2300      	movs	r3, #0
 802a8ce:	60fb      	str	r3, [r7, #12]
 802a8d0:	78fb      	ldrb	r3, [r7, #3]
 802a8d2:	2b00      	cmp	r3, #0
 802a8d4:	d102      	bne.n	802a8dc <FLASH_Erase_Sector+0x1c>
 802a8d6:	2300      	movs	r3, #0
 802a8d8:	60fb      	str	r3, [r7, #12]
 802a8da:	e010      	b.n	802a8fe <FLASH_Erase_Sector+0x3e>
 802a8dc:	78fb      	ldrb	r3, [r7, #3]
 802a8de:	2b01      	cmp	r3, #1
 802a8e0:	d103      	bne.n	802a8ea <FLASH_Erase_Sector+0x2a>
 802a8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a8e6:	60fb      	str	r3, [r7, #12]
 802a8e8:	e009      	b.n	802a8fe <FLASH_Erase_Sector+0x3e>
 802a8ea:	78fb      	ldrb	r3, [r7, #3]
 802a8ec:	2b02      	cmp	r3, #2
 802a8ee:	d103      	bne.n	802a8f8 <FLASH_Erase_Sector+0x38>
 802a8f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a8f4:	60fb      	str	r3, [r7, #12]
 802a8f6:	e002      	b.n	802a8fe <FLASH_Erase_Sector+0x3e>
 802a8f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 802a8fc:	60fb      	str	r3, [r7, #12]
 802a8fe:	687b      	ldr	r3, [r7, #4]
 802a900:	2b0b      	cmp	r3, #11
 802a902:	d902      	bls.n	802a90a <FLASH_Erase_Sector+0x4a>
 802a904:	687b      	ldr	r3, [r7, #4]
 802a906:	3304      	adds	r3, #4
 802a908:	607b      	str	r3, [r7, #4]
 802a90a:	4b15      	ldr	r3, [pc, #84]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a90c:	691b      	ldr	r3, [r3, #16]
 802a90e:	4a14      	ldr	r2, [pc, #80]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a914:	6113      	str	r3, [r2, #16]
 802a916:	4b12      	ldr	r3, [pc, #72]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a918:	691a      	ldr	r2, [r3, #16]
 802a91a:	4911      	ldr	r1, [pc, #68]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a91c:	68fb      	ldr	r3, [r7, #12]
 802a91e:	4313      	orrs	r3, r2
 802a920:	610b      	str	r3, [r1, #16]
 802a922:	4b0f      	ldr	r3, [pc, #60]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a924:	691b      	ldr	r3, [r3, #16]
 802a926:	4a0e      	ldr	r2, [pc, #56]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a928:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802a92c:	6113      	str	r3, [r2, #16]
 802a92e:	4b0c      	ldr	r3, [pc, #48]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a930:	691a      	ldr	r2, [r3, #16]
 802a932:	687b      	ldr	r3, [r7, #4]
 802a934:	00db      	lsls	r3, r3, #3
 802a936:	4313      	orrs	r3, r2
 802a938:	4a09      	ldr	r2, [pc, #36]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a93a:	f043 0302 	orr.w	r3, r3, #2
 802a93e:	6113      	str	r3, [r2, #16]
 802a940:	4b07      	ldr	r3, [pc, #28]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a942:	691b      	ldr	r3, [r3, #16]
 802a944:	4a06      	ldr	r2, [pc, #24]	; (802a960 <FLASH_Erase_Sector+0xa0>)
 802a946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a94a:	6113      	str	r3, [r2, #16]
 802a94c:	f3bf 8f4f 	dsb	sy
 802a950:	bf00      	nop
 802a952:	bf00      	nop
 802a954:	3714      	adds	r7, #20
 802a956:	46bd      	mov	sp, r7
 802a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a95c:	4770      	bx	lr
 802a95e:	bf00      	nop
 802a960:	40023c00 	.word	0x40023c00

0802a964 <HAL_GPIO_Init>:
 802a964:	b480      	push	{r7}
 802a966:	b089      	sub	sp, #36	; 0x24
 802a968:	af00      	add	r7, sp, #0
 802a96a:	6078      	str	r0, [r7, #4]
 802a96c:	6039      	str	r1, [r7, #0]
 802a96e:	2300      	movs	r3, #0
 802a970:	61fb      	str	r3, [r7, #28]
 802a972:	2300      	movs	r3, #0
 802a974:	617b      	str	r3, [r7, #20]
 802a976:	2300      	movs	r3, #0
 802a978:	613b      	str	r3, [r7, #16]
 802a97a:	2300      	movs	r3, #0
 802a97c:	61bb      	str	r3, [r7, #24]
 802a97e:	2300      	movs	r3, #0
 802a980:	61fb      	str	r3, [r7, #28]
 802a982:	e175      	b.n	802ac70 <HAL_GPIO_Init+0x30c>
 802a984:	2201      	movs	r2, #1
 802a986:	69fb      	ldr	r3, [r7, #28]
 802a988:	fa02 f303 	lsl.w	r3, r2, r3
 802a98c:	617b      	str	r3, [r7, #20]
 802a98e:	683b      	ldr	r3, [r7, #0]
 802a990:	681b      	ldr	r3, [r3, #0]
 802a992:	697a      	ldr	r2, [r7, #20]
 802a994:	4013      	ands	r3, r2
 802a996:	613b      	str	r3, [r7, #16]
 802a998:	693a      	ldr	r2, [r7, #16]
 802a99a:	697b      	ldr	r3, [r7, #20]
 802a99c:	429a      	cmp	r2, r3
 802a99e:	f040 8164 	bne.w	802ac6a <HAL_GPIO_Init+0x306>
 802a9a2:	683b      	ldr	r3, [r7, #0]
 802a9a4:	685b      	ldr	r3, [r3, #4]
 802a9a6:	2b02      	cmp	r3, #2
 802a9a8:	d003      	beq.n	802a9b2 <HAL_GPIO_Init+0x4e>
 802a9aa:	683b      	ldr	r3, [r7, #0]
 802a9ac:	685b      	ldr	r3, [r3, #4]
 802a9ae:	2b12      	cmp	r3, #18
 802a9b0:	d123      	bne.n	802a9fa <HAL_GPIO_Init+0x96>
 802a9b2:	69fb      	ldr	r3, [r7, #28]
 802a9b4:	08da      	lsrs	r2, r3, #3
 802a9b6:	687b      	ldr	r3, [r7, #4]
 802a9b8:	3208      	adds	r2, #8
 802a9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a9be:	61bb      	str	r3, [r7, #24]
 802a9c0:	69fb      	ldr	r3, [r7, #28]
 802a9c2:	f003 0307 	and.w	r3, r3, #7
 802a9c6:	009b      	lsls	r3, r3, #2
 802a9c8:	220f      	movs	r2, #15
 802a9ca:	fa02 f303 	lsl.w	r3, r2, r3
 802a9ce:	43db      	mvns	r3, r3
 802a9d0:	69ba      	ldr	r2, [r7, #24]
 802a9d2:	4013      	ands	r3, r2
 802a9d4:	61bb      	str	r3, [r7, #24]
 802a9d6:	683b      	ldr	r3, [r7, #0]
 802a9d8:	691a      	ldr	r2, [r3, #16]
 802a9da:	69fb      	ldr	r3, [r7, #28]
 802a9dc:	f003 0307 	and.w	r3, r3, #7
 802a9e0:	009b      	lsls	r3, r3, #2
 802a9e2:	fa02 f303 	lsl.w	r3, r2, r3
 802a9e6:	69ba      	ldr	r2, [r7, #24]
 802a9e8:	4313      	orrs	r3, r2
 802a9ea:	61bb      	str	r3, [r7, #24]
 802a9ec:	69fb      	ldr	r3, [r7, #28]
 802a9ee:	08da      	lsrs	r2, r3, #3
 802a9f0:	687b      	ldr	r3, [r7, #4]
 802a9f2:	3208      	adds	r2, #8
 802a9f4:	69b9      	ldr	r1, [r7, #24]
 802a9f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802a9fa:	687b      	ldr	r3, [r7, #4]
 802a9fc:	681b      	ldr	r3, [r3, #0]
 802a9fe:	61bb      	str	r3, [r7, #24]
 802aa00:	69fb      	ldr	r3, [r7, #28]
 802aa02:	005b      	lsls	r3, r3, #1
 802aa04:	2203      	movs	r2, #3
 802aa06:	fa02 f303 	lsl.w	r3, r2, r3
 802aa0a:	43db      	mvns	r3, r3
 802aa0c:	69ba      	ldr	r2, [r7, #24]
 802aa0e:	4013      	ands	r3, r2
 802aa10:	61bb      	str	r3, [r7, #24]
 802aa12:	683b      	ldr	r3, [r7, #0]
 802aa14:	685b      	ldr	r3, [r3, #4]
 802aa16:	f003 0203 	and.w	r2, r3, #3
 802aa1a:	69fb      	ldr	r3, [r7, #28]
 802aa1c:	005b      	lsls	r3, r3, #1
 802aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 802aa22:	69ba      	ldr	r2, [r7, #24]
 802aa24:	4313      	orrs	r3, r2
 802aa26:	61bb      	str	r3, [r7, #24]
 802aa28:	687b      	ldr	r3, [r7, #4]
 802aa2a:	69ba      	ldr	r2, [r7, #24]
 802aa2c:	601a      	str	r2, [r3, #0]
 802aa2e:	683b      	ldr	r3, [r7, #0]
 802aa30:	685b      	ldr	r3, [r3, #4]
 802aa32:	2b01      	cmp	r3, #1
 802aa34:	d00b      	beq.n	802aa4e <HAL_GPIO_Init+0xea>
 802aa36:	683b      	ldr	r3, [r7, #0]
 802aa38:	685b      	ldr	r3, [r3, #4]
 802aa3a:	2b02      	cmp	r3, #2
 802aa3c:	d007      	beq.n	802aa4e <HAL_GPIO_Init+0xea>
 802aa3e:	683b      	ldr	r3, [r7, #0]
 802aa40:	685b      	ldr	r3, [r3, #4]
 802aa42:	2b11      	cmp	r3, #17
 802aa44:	d003      	beq.n	802aa4e <HAL_GPIO_Init+0xea>
 802aa46:	683b      	ldr	r3, [r7, #0]
 802aa48:	685b      	ldr	r3, [r3, #4]
 802aa4a:	2b12      	cmp	r3, #18
 802aa4c:	d130      	bne.n	802aab0 <HAL_GPIO_Init+0x14c>
 802aa4e:	687b      	ldr	r3, [r7, #4]
 802aa50:	689b      	ldr	r3, [r3, #8]
 802aa52:	61bb      	str	r3, [r7, #24]
 802aa54:	69fb      	ldr	r3, [r7, #28]
 802aa56:	005b      	lsls	r3, r3, #1
 802aa58:	2203      	movs	r2, #3
 802aa5a:	fa02 f303 	lsl.w	r3, r2, r3
 802aa5e:	43db      	mvns	r3, r3
 802aa60:	69ba      	ldr	r2, [r7, #24]
 802aa62:	4013      	ands	r3, r2
 802aa64:	61bb      	str	r3, [r7, #24]
 802aa66:	683b      	ldr	r3, [r7, #0]
 802aa68:	68da      	ldr	r2, [r3, #12]
 802aa6a:	69fb      	ldr	r3, [r7, #28]
 802aa6c:	005b      	lsls	r3, r3, #1
 802aa6e:	fa02 f303 	lsl.w	r3, r2, r3
 802aa72:	69ba      	ldr	r2, [r7, #24]
 802aa74:	4313      	orrs	r3, r2
 802aa76:	61bb      	str	r3, [r7, #24]
 802aa78:	687b      	ldr	r3, [r7, #4]
 802aa7a:	69ba      	ldr	r2, [r7, #24]
 802aa7c:	609a      	str	r2, [r3, #8]
 802aa7e:	687b      	ldr	r3, [r7, #4]
 802aa80:	685b      	ldr	r3, [r3, #4]
 802aa82:	61bb      	str	r3, [r7, #24]
 802aa84:	2201      	movs	r2, #1
 802aa86:	69fb      	ldr	r3, [r7, #28]
 802aa88:	fa02 f303 	lsl.w	r3, r2, r3
 802aa8c:	43db      	mvns	r3, r3
 802aa8e:	69ba      	ldr	r2, [r7, #24]
 802aa90:	4013      	ands	r3, r2
 802aa92:	61bb      	str	r3, [r7, #24]
 802aa94:	683b      	ldr	r3, [r7, #0]
 802aa96:	685b      	ldr	r3, [r3, #4]
 802aa98:	091b      	lsrs	r3, r3, #4
 802aa9a:	f003 0201 	and.w	r2, r3, #1
 802aa9e:	69fb      	ldr	r3, [r7, #28]
 802aaa0:	fa02 f303 	lsl.w	r3, r2, r3
 802aaa4:	69ba      	ldr	r2, [r7, #24]
 802aaa6:	4313      	orrs	r3, r2
 802aaa8:	61bb      	str	r3, [r7, #24]
 802aaaa:	687b      	ldr	r3, [r7, #4]
 802aaac:	69ba      	ldr	r2, [r7, #24]
 802aaae:	605a      	str	r2, [r3, #4]
 802aab0:	687b      	ldr	r3, [r7, #4]
 802aab2:	68db      	ldr	r3, [r3, #12]
 802aab4:	61bb      	str	r3, [r7, #24]
 802aab6:	69fb      	ldr	r3, [r7, #28]
 802aab8:	005b      	lsls	r3, r3, #1
 802aaba:	2203      	movs	r2, #3
 802aabc:	fa02 f303 	lsl.w	r3, r2, r3
 802aac0:	43db      	mvns	r3, r3
 802aac2:	69ba      	ldr	r2, [r7, #24]
 802aac4:	4013      	ands	r3, r2
 802aac6:	61bb      	str	r3, [r7, #24]
 802aac8:	683b      	ldr	r3, [r7, #0]
 802aaca:	689a      	ldr	r2, [r3, #8]
 802aacc:	69fb      	ldr	r3, [r7, #28]
 802aace:	005b      	lsls	r3, r3, #1
 802aad0:	fa02 f303 	lsl.w	r3, r2, r3
 802aad4:	69ba      	ldr	r2, [r7, #24]
 802aad6:	4313      	orrs	r3, r2
 802aad8:	61bb      	str	r3, [r7, #24]
 802aada:	687b      	ldr	r3, [r7, #4]
 802aadc:	69ba      	ldr	r2, [r7, #24]
 802aade:	60da      	str	r2, [r3, #12]
 802aae0:	683b      	ldr	r3, [r7, #0]
 802aae2:	685b      	ldr	r3, [r3, #4]
 802aae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802aae8:	2b00      	cmp	r3, #0
 802aaea:	f000 80be 	beq.w	802ac6a <HAL_GPIO_Init+0x306>
 802aaee:	4b66      	ldr	r3, [pc, #408]	; (802ac88 <HAL_GPIO_Init+0x324>)
 802aaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802aaf2:	4a65      	ldr	r2, [pc, #404]	; (802ac88 <HAL_GPIO_Init+0x324>)
 802aaf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802aaf8:	6453      	str	r3, [r2, #68]	; 0x44
 802aafa:	4b63      	ldr	r3, [pc, #396]	; (802ac88 <HAL_GPIO_Init+0x324>)
 802aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802aafe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802ab02:	60fb      	str	r3, [r7, #12]
 802ab04:	68fb      	ldr	r3, [r7, #12]
 802ab06:	4a61      	ldr	r2, [pc, #388]	; (802ac8c <HAL_GPIO_Init+0x328>)
 802ab08:	69fb      	ldr	r3, [r7, #28]
 802ab0a:	089b      	lsrs	r3, r3, #2
 802ab0c:	3302      	adds	r3, #2
 802ab0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802ab12:	61bb      	str	r3, [r7, #24]
 802ab14:	69fb      	ldr	r3, [r7, #28]
 802ab16:	f003 0303 	and.w	r3, r3, #3
 802ab1a:	009b      	lsls	r3, r3, #2
 802ab1c:	220f      	movs	r2, #15
 802ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 802ab22:	43db      	mvns	r3, r3
 802ab24:	69ba      	ldr	r2, [r7, #24]
 802ab26:	4013      	ands	r3, r2
 802ab28:	61bb      	str	r3, [r7, #24]
 802ab2a:	687b      	ldr	r3, [r7, #4]
 802ab2c:	4a58      	ldr	r2, [pc, #352]	; (802ac90 <HAL_GPIO_Init+0x32c>)
 802ab2e:	4293      	cmp	r3, r2
 802ab30:	d037      	beq.n	802aba2 <HAL_GPIO_Init+0x23e>
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	4a57      	ldr	r2, [pc, #348]	; (802ac94 <HAL_GPIO_Init+0x330>)
 802ab36:	4293      	cmp	r3, r2
 802ab38:	d031      	beq.n	802ab9e <HAL_GPIO_Init+0x23a>
 802ab3a:	687b      	ldr	r3, [r7, #4]
 802ab3c:	4a56      	ldr	r2, [pc, #344]	; (802ac98 <HAL_GPIO_Init+0x334>)
 802ab3e:	4293      	cmp	r3, r2
 802ab40:	d02b      	beq.n	802ab9a <HAL_GPIO_Init+0x236>
 802ab42:	687b      	ldr	r3, [r7, #4]
 802ab44:	4a55      	ldr	r2, [pc, #340]	; (802ac9c <HAL_GPIO_Init+0x338>)
 802ab46:	4293      	cmp	r3, r2
 802ab48:	d025      	beq.n	802ab96 <HAL_GPIO_Init+0x232>
 802ab4a:	687b      	ldr	r3, [r7, #4]
 802ab4c:	4a54      	ldr	r2, [pc, #336]	; (802aca0 <HAL_GPIO_Init+0x33c>)
 802ab4e:	4293      	cmp	r3, r2
 802ab50:	d01f      	beq.n	802ab92 <HAL_GPIO_Init+0x22e>
 802ab52:	687b      	ldr	r3, [r7, #4]
 802ab54:	4a53      	ldr	r2, [pc, #332]	; (802aca4 <HAL_GPIO_Init+0x340>)
 802ab56:	4293      	cmp	r3, r2
 802ab58:	d019      	beq.n	802ab8e <HAL_GPIO_Init+0x22a>
 802ab5a:	687b      	ldr	r3, [r7, #4]
 802ab5c:	4a52      	ldr	r2, [pc, #328]	; (802aca8 <HAL_GPIO_Init+0x344>)
 802ab5e:	4293      	cmp	r3, r2
 802ab60:	d013      	beq.n	802ab8a <HAL_GPIO_Init+0x226>
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	4a51      	ldr	r2, [pc, #324]	; (802acac <HAL_GPIO_Init+0x348>)
 802ab66:	4293      	cmp	r3, r2
 802ab68:	d00d      	beq.n	802ab86 <HAL_GPIO_Init+0x222>
 802ab6a:	687b      	ldr	r3, [r7, #4]
 802ab6c:	4a50      	ldr	r2, [pc, #320]	; (802acb0 <HAL_GPIO_Init+0x34c>)
 802ab6e:	4293      	cmp	r3, r2
 802ab70:	d007      	beq.n	802ab82 <HAL_GPIO_Init+0x21e>
 802ab72:	687b      	ldr	r3, [r7, #4]
 802ab74:	4a4f      	ldr	r2, [pc, #316]	; (802acb4 <HAL_GPIO_Init+0x350>)
 802ab76:	4293      	cmp	r3, r2
 802ab78:	d101      	bne.n	802ab7e <HAL_GPIO_Init+0x21a>
 802ab7a:	2309      	movs	r3, #9
 802ab7c:	e012      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab7e:	230a      	movs	r3, #10
 802ab80:	e010      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab82:	2308      	movs	r3, #8
 802ab84:	e00e      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab86:	2307      	movs	r3, #7
 802ab88:	e00c      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab8a:	2306      	movs	r3, #6
 802ab8c:	e00a      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab8e:	2305      	movs	r3, #5
 802ab90:	e008      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab92:	2304      	movs	r3, #4
 802ab94:	e006      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab96:	2303      	movs	r3, #3
 802ab98:	e004      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab9a:	2302      	movs	r3, #2
 802ab9c:	e002      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802ab9e:	2301      	movs	r3, #1
 802aba0:	e000      	b.n	802aba4 <HAL_GPIO_Init+0x240>
 802aba2:	2300      	movs	r3, #0
 802aba4:	69fa      	ldr	r2, [r7, #28]
 802aba6:	f002 0203 	and.w	r2, r2, #3
 802abaa:	0092      	lsls	r2, r2, #2
 802abac:	4093      	lsls	r3, r2
 802abae:	69ba      	ldr	r2, [r7, #24]
 802abb0:	4313      	orrs	r3, r2
 802abb2:	61bb      	str	r3, [r7, #24]
 802abb4:	4935      	ldr	r1, [pc, #212]	; (802ac8c <HAL_GPIO_Init+0x328>)
 802abb6:	69fb      	ldr	r3, [r7, #28]
 802abb8:	089b      	lsrs	r3, r3, #2
 802abba:	3302      	adds	r3, #2
 802abbc:	69ba      	ldr	r2, [r7, #24]
 802abbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802abc2:	4b3d      	ldr	r3, [pc, #244]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802abc4:	681b      	ldr	r3, [r3, #0]
 802abc6:	61bb      	str	r3, [r7, #24]
 802abc8:	693b      	ldr	r3, [r7, #16]
 802abca:	43db      	mvns	r3, r3
 802abcc:	69ba      	ldr	r2, [r7, #24]
 802abce:	4013      	ands	r3, r2
 802abd0:	61bb      	str	r3, [r7, #24]
 802abd2:	683b      	ldr	r3, [r7, #0]
 802abd4:	685b      	ldr	r3, [r3, #4]
 802abd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802abda:	2b00      	cmp	r3, #0
 802abdc:	d003      	beq.n	802abe6 <HAL_GPIO_Init+0x282>
 802abde:	69ba      	ldr	r2, [r7, #24]
 802abe0:	693b      	ldr	r3, [r7, #16]
 802abe2:	4313      	orrs	r3, r2
 802abe4:	61bb      	str	r3, [r7, #24]
 802abe6:	4a34      	ldr	r2, [pc, #208]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802abe8:	69bb      	ldr	r3, [r7, #24]
 802abea:	6013      	str	r3, [r2, #0]
 802abec:	4b32      	ldr	r3, [pc, #200]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802abee:	685b      	ldr	r3, [r3, #4]
 802abf0:	61bb      	str	r3, [r7, #24]
 802abf2:	693b      	ldr	r3, [r7, #16]
 802abf4:	43db      	mvns	r3, r3
 802abf6:	69ba      	ldr	r2, [r7, #24]
 802abf8:	4013      	ands	r3, r2
 802abfa:	61bb      	str	r3, [r7, #24]
 802abfc:	683b      	ldr	r3, [r7, #0]
 802abfe:	685b      	ldr	r3, [r3, #4]
 802ac00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ac04:	2b00      	cmp	r3, #0
 802ac06:	d003      	beq.n	802ac10 <HAL_GPIO_Init+0x2ac>
 802ac08:	69ba      	ldr	r2, [r7, #24]
 802ac0a:	693b      	ldr	r3, [r7, #16]
 802ac0c:	4313      	orrs	r3, r2
 802ac0e:	61bb      	str	r3, [r7, #24]
 802ac10:	4a29      	ldr	r2, [pc, #164]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802ac12:	69bb      	ldr	r3, [r7, #24]
 802ac14:	6053      	str	r3, [r2, #4]
 802ac16:	4b28      	ldr	r3, [pc, #160]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802ac18:	689b      	ldr	r3, [r3, #8]
 802ac1a:	61bb      	str	r3, [r7, #24]
 802ac1c:	693b      	ldr	r3, [r7, #16]
 802ac1e:	43db      	mvns	r3, r3
 802ac20:	69ba      	ldr	r2, [r7, #24]
 802ac22:	4013      	ands	r3, r2
 802ac24:	61bb      	str	r3, [r7, #24]
 802ac26:	683b      	ldr	r3, [r7, #0]
 802ac28:	685b      	ldr	r3, [r3, #4]
 802ac2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802ac2e:	2b00      	cmp	r3, #0
 802ac30:	d003      	beq.n	802ac3a <HAL_GPIO_Init+0x2d6>
 802ac32:	69ba      	ldr	r2, [r7, #24]
 802ac34:	693b      	ldr	r3, [r7, #16]
 802ac36:	4313      	orrs	r3, r2
 802ac38:	61bb      	str	r3, [r7, #24]
 802ac3a:	4a1f      	ldr	r2, [pc, #124]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802ac3c:	69bb      	ldr	r3, [r7, #24]
 802ac3e:	6093      	str	r3, [r2, #8]
 802ac40:	4b1d      	ldr	r3, [pc, #116]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802ac42:	68db      	ldr	r3, [r3, #12]
 802ac44:	61bb      	str	r3, [r7, #24]
 802ac46:	693b      	ldr	r3, [r7, #16]
 802ac48:	43db      	mvns	r3, r3
 802ac4a:	69ba      	ldr	r2, [r7, #24]
 802ac4c:	4013      	ands	r3, r2
 802ac4e:	61bb      	str	r3, [r7, #24]
 802ac50:	683b      	ldr	r3, [r7, #0]
 802ac52:	685b      	ldr	r3, [r3, #4]
 802ac54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802ac58:	2b00      	cmp	r3, #0
 802ac5a:	d003      	beq.n	802ac64 <HAL_GPIO_Init+0x300>
 802ac5c:	69ba      	ldr	r2, [r7, #24]
 802ac5e:	693b      	ldr	r3, [r7, #16]
 802ac60:	4313      	orrs	r3, r2
 802ac62:	61bb      	str	r3, [r7, #24]
 802ac64:	4a14      	ldr	r2, [pc, #80]	; (802acb8 <HAL_GPIO_Init+0x354>)
 802ac66:	69bb      	ldr	r3, [r7, #24]
 802ac68:	60d3      	str	r3, [r2, #12]
 802ac6a:	69fb      	ldr	r3, [r7, #28]
 802ac6c:	3301      	adds	r3, #1
 802ac6e:	61fb      	str	r3, [r7, #28]
 802ac70:	69fb      	ldr	r3, [r7, #28]
 802ac72:	2b0f      	cmp	r3, #15
 802ac74:	f67f ae86 	bls.w	802a984 <HAL_GPIO_Init+0x20>
 802ac78:	bf00      	nop
 802ac7a:	bf00      	nop
 802ac7c:	3724      	adds	r7, #36	; 0x24
 802ac7e:	46bd      	mov	sp, r7
 802ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac84:	4770      	bx	lr
 802ac86:	bf00      	nop
 802ac88:	40023800 	.word	0x40023800
 802ac8c:	40013800 	.word	0x40013800
 802ac90:	40020000 	.word	0x40020000
 802ac94:	40020400 	.word	0x40020400
 802ac98:	40020800 	.word	0x40020800
 802ac9c:	40020c00 	.word	0x40020c00
 802aca0:	40021000 	.word	0x40021000
 802aca4:	40021400 	.word	0x40021400
 802aca8:	40021800 	.word	0x40021800
 802acac:	40021c00 	.word	0x40021c00
 802acb0:	40022000 	.word	0x40022000
 802acb4:	40022400 	.word	0x40022400
 802acb8:	40013c00 	.word	0x40013c00

0802acbc <HAL_GPIO_ReadPin>:
 802acbc:	b480      	push	{r7}
 802acbe:	b085      	sub	sp, #20
 802acc0:	af00      	add	r7, sp, #0
 802acc2:	6078      	str	r0, [r7, #4]
 802acc4:	460b      	mov	r3, r1
 802acc6:	807b      	strh	r3, [r7, #2]
 802acc8:	687b      	ldr	r3, [r7, #4]
 802acca:	691a      	ldr	r2, [r3, #16]
 802accc:	887b      	ldrh	r3, [r7, #2]
 802acce:	4013      	ands	r3, r2
 802acd0:	2b00      	cmp	r3, #0
 802acd2:	d002      	beq.n	802acda <HAL_GPIO_ReadPin+0x1e>
 802acd4:	2301      	movs	r3, #1
 802acd6:	73fb      	strb	r3, [r7, #15]
 802acd8:	e001      	b.n	802acde <HAL_GPIO_ReadPin+0x22>
 802acda:	2300      	movs	r3, #0
 802acdc:	73fb      	strb	r3, [r7, #15]
 802acde:	7bfb      	ldrb	r3, [r7, #15]
 802ace0:	4618      	mov	r0, r3
 802ace2:	3714      	adds	r7, #20
 802ace4:	46bd      	mov	sp, r7
 802ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acea:	4770      	bx	lr

0802acec <HAL_GPIO_WritePin>:
 802acec:	b480      	push	{r7}
 802acee:	b083      	sub	sp, #12
 802acf0:	af00      	add	r7, sp, #0
 802acf2:	6078      	str	r0, [r7, #4]
 802acf4:	460b      	mov	r3, r1
 802acf6:	807b      	strh	r3, [r7, #2]
 802acf8:	4613      	mov	r3, r2
 802acfa:	707b      	strb	r3, [r7, #1]
 802acfc:	787b      	ldrb	r3, [r7, #1]
 802acfe:	2b00      	cmp	r3, #0
 802ad00:	d003      	beq.n	802ad0a <HAL_GPIO_WritePin+0x1e>
 802ad02:	887a      	ldrh	r2, [r7, #2]
 802ad04:	687b      	ldr	r3, [r7, #4]
 802ad06:	619a      	str	r2, [r3, #24]
 802ad08:	e003      	b.n	802ad12 <HAL_GPIO_WritePin+0x26>
 802ad0a:	887b      	ldrh	r3, [r7, #2]
 802ad0c:	041a      	lsls	r2, r3, #16
 802ad0e:	687b      	ldr	r3, [r7, #4]
 802ad10:	619a      	str	r2, [r3, #24]
 802ad12:	bf00      	nop
 802ad14:	370c      	adds	r7, #12
 802ad16:	46bd      	mov	sp, r7
 802ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad1c:	4770      	bx	lr
	...

0802ad20 <HAL_I2C_Init>:
 802ad20:	b580      	push	{r7, lr}
 802ad22:	b082      	sub	sp, #8
 802ad24:	af00      	add	r7, sp, #0
 802ad26:	6078      	str	r0, [r7, #4]
 802ad28:	687b      	ldr	r3, [r7, #4]
 802ad2a:	2b00      	cmp	r3, #0
 802ad2c:	d101      	bne.n	802ad32 <HAL_I2C_Init+0x12>
 802ad2e:	2301      	movs	r3, #1
 802ad30:	e07f      	b.n	802ae32 <HAL_I2C_Init+0x112>
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ad38:	b2db      	uxtb	r3, r3
 802ad3a:	2b00      	cmp	r3, #0
 802ad3c:	d106      	bne.n	802ad4c <HAL_I2C_Init+0x2c>
 802ad3e:	687b      	ldr	r3, [r7, #4]
 802ad40:	2200      	movs	r2, #0
 802ad42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802ad46:	6878      	ldr	r0, [r7, #4]
 802ad48:	f000 f8a9 	bl	802ae9e <HAL_I2C_MspInit>
 802ad4c:	687b      	ldr	r3, [r7, #4]
 802ad4e:	2224      	movs	r2, #36	; 0x24
 802ad50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802ad54:	687b      	ldr	r3, [r7, #4]
 802ad56:	681b      	ldr	r3, [r3, #0]
 802ad58:	681a      	ldr	r2, [r3, #0]
 802ad5a:	687b      	ldr	r3, [r7, #4]
 802ad5c:	681b      	ldr	r3, [r3, #0]
 802ad5e:	f022 0201 	bic.w	r2, r2, #1
 802ad62:	601a      	str	r2, [r3, #0]
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	685a      	ldr	r2, [r3, #4]
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	681b      	ldr	r3, [r3, #0]
 802ad6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802ad70:	611a      	str	r2, [r3, #16]
 802ad72:	687b      	ldr	r3, [r7, #4]
 802ad74:	681b      	ldr	r3, [r3, #0]
 802ad76:	689a      	ldr	r2, [r3, #8]
 802ad78:	687b      	ldr	r3, [r7, #4]
 802ad7a:	681b      	ldr	r3, [r3, #0]
 802ad7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ad80:	609a      	str	r2, [r3, #8]
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	68db      	ldr	r3, [r3, #12]
 802ad86:	2b01      	cmp	r3, #1
 802ad88:	d107      	bne.n	802ad9a <HAL_I2C_Init+0x7a>
 802ad8a:	687b      	ldr	r3, [r7, #4]
 802ad8c:	689a      	ldr	r2, [r3, #8]
 802ad8e:	687b      	ldr	r3, [r7, #4]
 802ad90:	681b      	ldr	r3, [r3, #0]
 802ad92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ad96:	609a      	str	r2, [r3, #8]
 802ad98:	e006      	b.n	802ada8 <HAL_I2C_Init+0x88>
 802ad9a:	687b      	ldr	r3, [r7, #4]
 802ad9c:	689a      	ldr	r2, [r3, #8]
 802ad9e:	687b      	ldr	r3, [r7, #4]
 802ada0:	681b      	ldr	r3, [r3, #0]
 802ada2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802ada6:	609a      	str	r2, [r3, #8]
 802ada8:	687b      	ldr	r3, [r7, #4]
 802adaa:	68db      	ldr	r3, [r3, #12]
 802adac:	2b02      	cmp	r3, #2
 802adae:	d104      	bne.n	802adba <HAL_I2C_Init+0x9a>
 802adb0:	687b      	ldr	r3, [r7, #4]
 802adb2:	681b      	ldr	r3, [r3, #0]
 802adb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802adb8:	605a      	str	r2, [r3, #4]
 802adba:	687b      	ldr	r3, [r7, #4]
 802adbc:	681b      	ldr	r3, [r3, #0]
 802adbe:	6859      	ldr	r1, [r3, #4]
 802adc0:	687b      	ldr	r3, [r7, #4]
 802adc2:	681a      	ldr	r2, [r3, #0]
 802adc4:	4b1d      	ldr	r3, [pc, #116]	; (802ae3c <HAL_I2C_Init+0x11c>)
 802adc6:	430b      	orrs	r3, r1
 802adc8:	6053      	str	r3, [r2, #4]
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	681b      	ldr	r3, [r3, #0]
 802adce:	68da      	ldr	r2, [r3, #12]
 802add0:	687b      	ldr	r3, [r7, #4]
 802add2:	681b      	ldr	r3, [r3, #0]
 802add4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802add8:	60da      	str	r2, [r3, #12]
 802adda:	687b      	ldr	r3, [r7, #4]
 802addc:	691a      	ldr	r2, [r3, #16]
 802adde:	687b      	ldr	r3, [r7, #4]
 802ade0:	695b      	ldr	r3, [r3, #20]
 802ade2:	ea42 0103 	orr.w	r1, r2, r3
 802ade6:	687b      	ldr	r3, [r7, #4]
 802ade8:	699b      	ldr	r3, [r3, #24]
 802adea:	021a      	lsls	r2, r3, #8
 802adec:	687b      	ldr	r3, [r7, #4]
 802adee:	681b      	ldr	r3, [r3, #0]
 802adf0:	430a      	orrs	r2, r1
 802adf2:	60da      	str	r2, [r3, #12]
 802adf4:	687b      	ldr	r3, [r7, #4]
 802adf6:	69d9      	ldr	r1, [r3, #28]
 802adf8:	687b      	ldr	r3, [r7, #4]
 802adfa:	6a1a      	ldr	r2, [r3, #32]
 802adfc:	687b      	ldr	r3, [r7, #4]
 802adfe:	681b      	ldr	r3, [r3, #0]
 802ae00:	430a      	orrs	r2, r1
 802ae02:	601a      	str	r2, [r3, #0]
 802ae04:	687b      	ldr	r3, [r7, #4]
 802ae06:	681b      	ldr	r3, [r3, #0]
 802ae08:	681a      	ldr	r2, [r3, #0]
 802ae0a:	687b      	ldr	r3, [r7, #4]
 802ae0c:	681b      	ldr	r3, [r3, #0]
 802ae0e:	f042 0201 	orr.w	r2, r2, #1
 802ae12:	601a      	str	r2, [r3, #0]
 802ae14:	687b      	ldr	r3, [r7, #4]
 802ae16:	2200      	movs	r2, #0
 802ae18:	645a      	str	r2, [r3, #68]	; 0x44
 802ae1a:	687b      	ldr	r3, [r7, #4]
 802ae1c:	2220      	movs	r2, #32
 802ae1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	2200      	movs	r2, #0
 802ae26:	631a      	str	r2, [r3, #48]	; 0x30
 802ae28:	687b      	ldr	r3, [r7, #4]
 802ae2a:	2200      	movs	r2, #0
 802ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802ae30:	2300      	movs	r3, #0
 802ae32:	4618      	mov	r0, r3
 802ae34:	3708      	adds	r7, #8
 802ae36:	46bd      	mov	sp, r7
 802ae38:	bd80      	pop	{r7, pc}
 802ae3a:	bf00      	nop
 802ae3c:	02008000 	.word	0x02008000

0802ae40 <HAL_I2C_DeInit>:
 802ae40:	b580      	push	{r7, lr}
 802ae42:	b082      	sub	sp, #8
 802ae44:	af00      	add	r7, sp, #0
 802ae46:	6078      	str	r0, [r7, #4]
 802ae48:	687b      	ldr	r3, [r7, #4]
 802ae4a:	2b00      	cmp	r3, #0
 802ae4c:	d101      	bne.n	802ae52 <HAL_I2C_DeInit+0x12>
 802ae4e:	2301      	movs	r3, #1
 802ae50:	e021      	b.n	802ae96 <HAL_I2C_DeInit+0x56>
 802ae52:	687b      	ldr	r3, [r7, #4]
 802ae54:	2224      	movs	r2, #36	; 0x24
 802ae56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802ae5a:	687b      	ldr	r3, [r7, #4]
 802ae5c:	681b      	ldr	r3, [r3, #0]
 802ae5e:	681a      	ldr	r2, [r3, #0]
 802ae60:	687b      	ldr	r3, [r7, #4]
 802ae62:	681b      	ldr	r3, [r3, #0]
 802ae64:	f022 0201 	bic.w	r2, r2, #1
 802ae68:	601a      	str	r2, [r3, #0]
 802ae6a:	6878      	ldr	r0, [r7, #4]
 802ae6c:	f000 f821 	bl	802aeb2 <HAL_I2C_MspDeInit>
 802ae70:	687b      	ldr	r3, [r7, #4]
 802ae72:	2200      	movs	r2, #0
 802ae74:	645a      	str	r2, [r3, #68]	; 0x44
 802ae76:	687b      	ldr	r3, [r7, #4]
 802ae78:	2200      	movs	r2, #0
 802ae7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802ae7e:	687b      	ldr	r3, [r7, #4]
 802ae80:	2200      	movs	r2, #0
 802ae82:	631a      	str	r2, [r3, #48]	; 0x30
 802ae84:	687b      	ldr	r3, [r7, #4]
 802ae86:	2200      	movs	r2, #0
 802ae88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802ae8c:	687b      	ldr	r3, [r7, #4]
 802ae8e:	2200      	movs	r2, #0
 802ae90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802ae94:	2300      	movs	r3, #0
 802ae96:	4618      	mov	r0, r3
 802ae98:	3708      	adds	r7, #8
 802ae9a:	46bd      	mov	sp, r7
 802ae9c:	bd80      	pop	{r7, pc}

0802ae9e <HAL_I2C_MspInit>:
 802ae9e:	b480      	push	{r7}
 802aea0:	b083      	sub	sp, #12
 802aea2:	af00      	add	r7, sp, #0
 802aea4:	6078      	str	r0, [r7, #4]
 802aea6:	bf00      	nop
 802aea8:	370c      	adds	r7, #12
 802aeaa:	46bd      	mov	sp, r7
 802aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeb0:	4770      	bx	lr

0802aeb2 <HAL_I2C_MspDeInit>:
 802aeb2:	b480      	push	{r7}
 802aeb4:	b083      	sub	sp, #12
 802aeb6:	af00      	add	r7, sp, #0
 802aeb8:	6078      	str	r0, [r7, #4]
 802aeba:	bf00      	nop
 802aebc:	370c      	adds	r7, #12
 802aebe:	46bd      	mov	sp, r7
 802aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aec4:	4770      	bx	lr
	...

0802aec8 <HAL_I2C_Mem_Write>:
 802aec8:	b580      	push	{r7, lr}
 802aeca:	b088      	sub	sp, #32
 802aecc:	af02      	add	r7, sp, #8
 802aece:	60f8      	str	r0, [r7, #12]
 802aed0:	4608      	mov	r0, r1
 802aed2:	4611      	mov	r1, r2
 802aed4:	461a      	mov	r2, r3
 802aed6:	4603      	mov	r3, r0
 802aed8:	817b      	strh	r3, [r7, #10]
 802aeda:	460b      	mov	r3, r1
 802aedc:	813b      	strh	r3, [r7, #8]
 802aede:	4613      	mov	r3, r2
 802aee0:	80fb      	strh	r3, [r7, #6]
 802aee2:	68fb      	ldr	r3, [r7, #12]
 802aee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802aee8:	b2db      	uxtb	r3, r3
 802aeea:	2b20      	cmp	r3, #32
 802aeec:	f040 80f9 	bne.w	802b0e2 <HAL_I2C_Mem_Write+0x21a>
 802aef0:	6a3b      	ldr	r3, [r7, #32]
 802aef2:	2b00      	cmp	r3, #0
 802aef4:	d002      	beq.n	802aefc <HAL_I2C_Mem_Write+0x34>
 802aef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802aef8:	2b00      	cmp	r3, #0
 802aefa:	d105      	bne.n	802af08 <HAL_I2C_Mem_Write+0x40>
 802aefc:	68fb      	ldr	r3, [r7, #12]
 802aefe:	f44f 7200 	mov.w	r2, #512	; 0x200
 802af02:	645a      	str	r2, [r3, #68]	; 0x44
 802af04:	2301      	movs	r3, #1
 802af06:	e0ed      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802af08:	68fb      	ldr	r3, [r7, #12]
 802af0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802af0e:	2b01      	cmp	r3, #1
 802af10:	d101      	bne.n	802af16 <HAL_I2C_Mem_Write+0x4e>
 802af12:	2302      	movs	r3, #2
 802af14:	e0e6      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802af16:	68fb      	ldr	r3, [r7, #12]
 802af18:	2201      	movs	r2, #1
 802af1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802af1e:	f7fd ffd1 	bl	8028ec4 <HAL_GetTick>
 802af22:	6178      	str	r0, [r7, #20]
 802af24:	697b      	ldr	r3, [r7, #20]
 802af26:	9300      	str	r3, [sp, #0]
 802af28:	2319      	movs	r3, #25
 802af2a:	2201      	movs	r2, #1
 802af2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802af30:	68f8      	ldr	r0, [r7, #12]
 802af32:	f000 fad1 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802af36:	4603      	mov	r3, r0
 802af38:	2b00      	cmp	r3, #0
 802af3a:	d001      	beq.n	802af40 <HAL_I2C_Mem_Write+0x78>
 802af3c:	2301      	movs	r3, #1
 802af3e:	e0d1      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802af40:	68fb      	ldr	r3, [r7, #12]
 802af42:	2221      	movs	r2, #33	; 0x21
 802af44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802af48:	68fb      	ldr	r3, [r7, #12]
 802af4a:	2240      	movs	r2, #64	; 0x40
 802af4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802af50:	68fb      	ldr	r3, [r7, #12]
 802af52:	2200      	movs	r2, #0
 802af54:	645a      	str	r2, [r3, #68]	; 0x44
 802af56:	68fb      	ldr	r3, [r7, #12]
 802af58:	6a3a      	ldr	r2, [r7, #32]
 802af5a:	625a      	str	r2, [r3, #36]	; 0x24
 802af5c:	68fb      	ldr	r3, [r7, #12]
 802af5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802af60:	855a      	strh	r2, [r3, #42]	; 0x2a
 802af62:	68fb      	ldr	r3, [r7, #12]
 802af64:	2200      	movs	r2, #0
 802af66:	635a      	str	r2, [r3, #52]	; 0x34
 802af68:	88f8      	ldrh	r0, [r7, #6]
 802af6a:	893a      	ldrh	r2, [r7, #8]
 802af6c:	8979      	ldrh	r1, [r7, #10]
 802af6e:	697b      	ldr	r3, [r7, #20]
 802af70:	9301      	str	r3, [sp, #4]
 802af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af74:	9300      	str	r3, [sp, #0]
 802af76:	4603      	mov	r3, r0
 802af78:	68f8      	ldr	r0, [r7, #12]
 802af7a:	f000 f9e1 	bl	802b340 <I2C_RequestMemoryWrite>
 802af7e:	4603      	mov	r3, r0
 802af80:	2b00      	cmp	r3, #0
 802af82:	d005      	beq.n	802af90 <HAL_I2C_Mem_Write+0xc8>
 802af84:	68fb      	ldr	r3, [r7, #12]
 802af86:	2200      	movs	r2, #0
 802af88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802af8c:	2301      	movs	r3, #1
 802af8e:	e0a9      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802af90:	68fb      	ldr	r3, [r7, #12]
 802af92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802af94:	b29b      	uxth	r3, r3
 802af96:	2bff      	cmp	r3, #255	; 0xff
 802af98:	d90e      	bls.n	802afb8 <HAL_I2C_Mem_Write+0xf0>
 802af9a:	68fb      	ldr	r3, [r7, #12]
 802af9c:	22ff      	movs	r2, #255	; 0xff
 802af9e:	851a      	strh	r2, [r3, #40]	; 0x28
 802afa0:	68fb      	ldr	r3, [r7, #12]
 802afa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802afa4:	b2da      	uxtb	r2, r3
 802afa6:	8979      	ldrh	r1, [r7, #10]
 802afa8:	2300      	movs	r3, #0
 802afaa:	9300      	str	r3, [sp, #0]
 802afac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802afb0:	68f8      	ldr	r0, [r7, #12]
 802afb2:	f000 fbb3 	bl	802b71c <I2C_TransferConfig>
 802afb6:	e00f      	b.n	802afd8 <HAL_I2C_Mem_Write+0x110>
 802afb8:	68fb      	ldr	r3, [r7, #12]
 802afba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802afbc:	b29a      	uxth	r2, r3
 802afbe:	68fb      	ldr	r3, [r7, #12]
 802afc0:	851a      	strh	r2, [r3, #40]	; 0x28
 802afc2:	68fb      	ldr	r3, [r7, #12]
 802afc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802afc6:	b2da      	uxtb	r2, r3
 802afc8:	8979      	ldrh	r1, [r7, #10]
 802afca:	2300      	movs	r3, #0
 802afcc:	9300      	str	r3, [sp, #0]
 802afce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802afd2:	68f8      	ldr	r0, [r7, #12]
 802afd4:	f000 fba2 	bl	802b71c <I2C_TransferConfig>
 802afd8:	697a      	ldr	r2, [r7, #20]
 802afda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802afdc:	68f8      	ldr	r0, [r7, #12]
 802afde:	f000 fabb 	bl	802b558 <I2C_WaitOnTXISFlagUntilTimeout>
 802afe2:	4603      	mov	r3, r0
 802afe4:	2b00      	cmp	r3, #0
 802afe6:	d001      	beq.n	802afec <HAL_I2C_Mem_Write+0x124>
 802afe8:	2301      	movs	r3, #1
 802afea:	e07b      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802afec:	68fb      	ldr	r3, [r7, #12]
 802afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aff0:	781a      	ldrb	r2, [r3, #0]
 802aff2:	68fb      	ldr	r3, [r7, #12]
 802aff4:	681b      	ldr	r3, [r3, #0]
 802aff6:	629a      	str	r2, [r3, #40]	; 0x28
 802aff8:	68fb      	ldr	r3, [r7, #12]
 802affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802affc:	1c5a      	adds	r2, r3, #1
 802affe:	68fb      	ldr	r3, [r7, #12]
 802b000:	625a      	str	r2, [r3, #36]	; 0x24
 802b002:	68fb      	ldr	r3, [r7, #12]
 802b004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b006:	b29b      	uxth	r3, r3
 802b008:	3b01      	subs	r3, #1
 802b00a:	b29a      	uxth	r2, r3
 802b00c:	68fb      	ldr	r3, [r7, #12]
 802b00e:	855a      	strh	r2, [r3, #42]	; 0x2a
 802b010:	68fb      	ldr	r3, [r7, #12]
 802b012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b014:	3b01      	subs	r3, #1
 802b016:	b29a      	uxth	r2, r3
 802b018:	68fb      	ldr	r3, [r7, #12]
 802b01a:	851a      	strh	r2, [r3, #40]	; 0x28
 802b01c:	68fb      	ldr	r3, [r7, #12]
 802b01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b020:	b29b      	uxth	r3, r3
 802b022:	2b00      	cmp	r3, #0
 802b024:	d034      	beq.n	802b090 <HAL_I2C_Mem_Write+0x1c8>
 802b026:	68fb      	ldr	r3, [r7, #12]
 802b028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b02a:	2b00      	cmp	r3, #0
 802b02c:	d130      	bne.n	802b090 <HAL_I2C_Mem_Write+0x1c8>
 802b02e:	697b      	ldr	r3, [r7, #20]
 802b030:	9300      	str	r3, [sp, #0]
 802b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b034:	2200      	movs	r2, #0
 802b036:	2180      	movs	r1, #128	; 0x80
 802b038:	68f8      	ldr	r0, [r7, #12]
 802b03a:	f000 fa4d 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b03e:	4603      	mov	r3, r0
 802b040:	2b00      	cmp	r3, #0
 802b042:	d001      	beq.n	802b048 <HAL_I2C_Mem_Write+0x180>
 802b044:	2301      	movs	r3, #1
 802b046:	e04d      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802b048:	68fb      	ldr	r3, [r7, #12]
 802b04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b04c:	b29b      	uxth	r3, r3
 802b04e:	2bff      	cmp	r3, #255	; 0xff
 802b050:	d90e      	bls.n	802b070 <HAL_I2C_Mem_Write+0x1a8>
 802b052:	68fb      	ldr	r3, [r7, #12]
 802b054:	22ff      	movs	r2, #255	; 0xff
 802b056:	851a      	strh	r2, [r3, #40]	; 0x28
 802b058:	68fb      	ldr	r3, [r7, #12]
 802b05a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b05c:	b2da      	uxtb	r2, r3
 802b05e:	8979      	ldrh	r1, [r7, #10]
 802b060:	2300      	movs	r3, #0
 802b062:	9300      	str	r3, [sp, #0]
 802b064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802b068:	68f8      	ldr	r0, [r7, #12]
 802b06a:	f000 fb57 	bl	802b71c <I2C_TransferConfig>
 802b06e:	e00f      	b.n	802b090 <HAL_I2C_Mem_Write+0x1c8>
 802b070:	68fb      	ldr	r3, [r7, #12]
 802b072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b074:	b29a      	uxth	r2, r3
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	851a      	strh	r2, [r3, #40]	; 0x28
 802b07a:	68fb      	ldr	r3, [r7, #12]
 802b07c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b07e:	b2da      	uxtb	r2, r3
 802b080:	8979      	ldrh	r1, [r7, #10]
 802b082:	2300      	movs	r3, #0
 802b084:	9300      	str	r3, [sp, #0]
 802b086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802b08a:	68f8      	ldr	r0, [r7, #12]
 802b08c:	f000 fb46 	bl	802b71c <I2C_TransferConfig>
 802b090:	68fb      	ldr	r3, [r7, #12]
 802b092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b094:	b29b      	uxth	r3, r3
 802b096:	2b00      	cmp	r3, #0
 802b098:	d19e      	bne.n	802afd8 <HAL_I2C_Mem_Write+0x110>
 802b09a:	697a      	ldr	r2, [r7, #20]
 802b09c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b09e:	68f8      	ldr	r0, [r7, #12]
 802b0a0:	f000 fa9a 	bl	802b5d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 802b0a4:	4603      	mov	r3, r0
 802b0a6:	2b00      	cmp	r3, #0
 802b0a8:	d001      	beq.n	802b0ae <HAL_I2C_Mem_Write+0x1e6>
 802b0aa:	2301      	movs	r3, #1
 802b0ac:	e01a      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802b0ae:	68fb      	ldr	r3, [r7, #12]
 802b0b0:	681b      	ldr	r3, [r3, #0]
 802b0b2:	2220      	movs	r2, #32
 802b0b4:	61da      	str	r2, [r3, #28]
 802b0b6:	68fb      	ldr	r3, [r7, #12]
 802b0b8:	681b      	ldr	r3, [r3, #0]
 802b0ba:	6859      	ldr	r1, [r3, #4]
 802b0bc:	68fb      	ldr	r3, [r7, #12]
 802b0be:	681a      	ldr	r2, [r3, #0]
 802b0c0:	4b0a      	ldr	r3, [pc, #40]	; (802b0ec <HAL_I2C_Mem_Write+0x224>)
 802b0c2:	400b      	ands	r3, r1
 802b0c4:	6053      	str	r3, [r2, #4]
 802b0c6:	68fb      	ldr	r3, [r7, #12]
 802b0c8:	2220      	movs	r2, #32
 802b0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b0ce:	68fb      	ldr	r3, [r7, #12]
 802b0d0:	2200      	movs	r2, #0
 802b0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b0d6:	68fb      	ldr	r3, [r7, #12]
 802b0d8:	2200      	movs	r2, #0
 802b0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b0de:	2300      	movs	r3, #0
 802b0e0:	e000      	b.n	802b0e4 <HAL_I2C_Mem_Write+0x21c>
 802b0e2:	2302      	movs	r3, #2
 802b0e4:	4618      	mov	r0, r3
 802b0e6:	3718      	adds	r7, #24
 802b0e8:	46bd      	mov	sp, r7
 802b0ea:	bd80      	pop	{r7, pc}
 802b0ec:	fe00e800 	.word	0xfe00e800

0802b0f0 <HAL_I2C_Mem_Read>:
 802b0f0:	b580      	push	{r7, lr}
 802b0f2:	b088      	sub	sp, #32
 802b0f4:	af02      	add	r7, sp, #8
 802b0f6:	60f8      	str	r0, [r7, #12]
 802b0f8:	4608      	mov	r0, r1
 802b0fa:	4611      	mov	r1, r2
 802b0fc:	461a      	mov	r2, r3
 802b0fe:	4603      	mov	r3, r0
 802b100:	817b      	strh	r3, [r7, #10]
 802b102:	460b      	mov	r3, r1
 802b104:	813b      	strh	r3, [r7, #8]
 802b106:	4613      	mov	r3, r2
 802b108:	80fb      	strh	r3, [r7, #6]
 802b10a:	68fb      	ldr	r3, [r7, #12]
 802b10c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802b110:	b2db      	uxtb	r3, r3
 802b112:	2b20      	cmp	r3, #32
 802b114:	f040 80fd 	bne.w	802b312 <HAL_I2C_Mem_Read+0x222>
 802b118:	6a3b      	ldr	r3, [r7, #32]
 802b11a:	2b00      	cmp	r3, #0
 802b11c:	d002      	beq.n	802b124 <HAL_I2C_Mem_Read+0x34>
 802b11e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b120:	2b00      	cmp	r3, #0
 802b122:	d105      	bne.n	802b130 <HAL_I2C_Mem_Read+0x40>
 802b124:	68fb      	ldr	r3, [r7, #12]
 802b126:	f44f 7200 	mov.w	r2, #512	; 0x200
 802b12a:	645a      	str	r2, [r3, #68]	; 0x44
 802b12c:	2301      	movs	r3, #1
 802b12e:	e0f1      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b130:	68fb      	ldr	r3, [r7, #12]
 802b132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802b136:	2b01      	cmp	r3, #1
 802b138:	d101      	bne.n	802b13e <HAL_I2C_Mem_Read+0x4e>
 802b13a:	2302      	movs	r3, #2
 802b13c:	e0ea      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b13e:	68fb      	ldr	r3, [r7, #12]
 802b140:	2201      	movs	r2, #1
 802b142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b146:	f7fd febd 	bl	8028ec4 <HAL_GetTick>
 802b14a:	6178      	str	r0, [r7, #20]
 802b14c:	697b      	ldr	r3, [r7, #20]
 802b14e:	9300      	str	r3, [sp, #0]
 802b150:	2319      	movs	r3, #25
 802b152:	2201      	movs	r2, #1
 802b154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802b158:	68f8      	ldr	r0, [r7, #12]
 802b15a:	f000 f9bd 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b15e:	4603      	mov	r3, r0
 802b160:	2b00      	cmp	r3, #0
 802b162:	d001      	beq.n	802b168 <HAL_I2C_Mem_Read+0x78>
 802b164:	2301      	movs	r3, #1
 802b166:	e0d5      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b168:	68fb      	ldr	r3, [r7, #12]
 802b16a:	2222      	movs	r2, #34	; 0x22
 802b16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b170:	68fb      	ldr	r3, [r7, #12]
 802b172:	2240      	movs	r2, #64	; 0x40
 802b174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b178:	68fb      	ldr	r3, [r7, #12]
 802b17a:	2200      	movs	r2, #0
 802b17c:	645a      	str	r2, [r3, #68]	; 0x44
 802b17e:	68fb      	ldr	r3, [r7, #12]
 802b180:	6a3a      	ldr	r2, [r7, #32]
 802b182:	625a      	str	r2, [r3, #36]	; 0x24
 802b184:	68fb      	ldr	r3, [r7, #12]
 802b186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802b188:	855a      	strh	r2, [r3, #42]	; 0x2a
 802b18a:	68fb      	ldr	r3, [r7, #12]
 802b18c:	2200      	movs	r2, #0
 802b18e:	635a      	str	r2, [r3, #52]	; 0x34
 802b190:	88f8      	ldrh	r0, [r7, #6]
 802b192:	893a      	ldrh	r2, [r7, #8]
 802b194:	8979      	ldrh	r1, [r7, #10]
 802b196:	697b      	ldr	r3, [r7, #20]
 802b198:	9301      	str	r3, [sp, #4]
 802b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b19c:	9300      	str	r3, [sp, #0]
 802b19e:	4603      	mov	r3, r0
 802b1a0:	68f8      	ldr	r0, [r7, #12]
 802b1a2:	f000 f921 	bl	802b3e8 <I2C_RequestMemoryRead>
 802b1a6:	4603      	mov	r3, r0
 802b1a8:	2b00      	cmp	r3, #0
 802b1aa:	d005      	beq.n	802b1b8 <HAL_I2C_Mem_Read+0xc8>
 802b1ac:	68fb      	ldr	r3, [r7, #12]
 802b1ae:	2200      	movs	r2, #0
 802b1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b1b4:	2301      	movs	r3, #1
 802b1b6:	e0ad      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b1b8:	68fb      	ldr	r3, [r7, #12]
 802b1ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b1bc:	b29b      	uxth	r3, r3
 802b1be:	2bff      	cmp	r3, #255	; 0xff
 802b1c0:	d90e      	bls.n	802b1e0 <HAL_I2C_Mem_Read+0xf0>
 802b1c2:	68fb      	ldr	r3, [r7, #12]
 802b1c4:	22ff      	movs	r2, #255	; 0xff
 802b1c6:	851a      	strh	r2, [r3, #40]	; 0x28
 802b1c8:	68fb      	ldr	r3, [r7, #12]
 802b1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b1cc:	b2da      	uxtb	r2, r3
 802b1ce:	8979      	ldrh	r1, [r7, #10]
 802b1d0:	4b52      	ldr	r3, [pc, #328]	; (802b31c <HAL_I2C_Mem_Read+0x22c>)
 802b1d2:	9300      	str	r3, [sp, #0]
 802b1d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802b1d8:	68f8      	ldr	r0, [r7, #12]
 802b1da:	f000 fa9f 	bl	802b71c <I2C_TransferConfig>
 802b1de:	e00f      	b.n	802b200 <HAL_I2C_Mem_Read+0x110>
 802b1e0:	68fb      	ldr	r3, [r7, #12]
 802b1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b1e4:	b29a      	uxth	r2, r3
 802b1e6:	68fb      	ldr	r3, [r7, #12]
 802b1e8:	851a      	strh	r2, [r3, #40]	; 0x28
 802b1ea:	68fb      	ldr	r3, [r7, #12]
 802b1ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b1ee:	b2da      	uxtb	r2, r3
 802b1f0:	8979      	ldrh	r1, [r7, #10]
 802b1f2:	4b4a      	ldr	r3, [pc, #296]	; (802b31c <HAL_I2C_Mem_Read+0x22c>)
 802b1f4:	9300      	str	r3, [sp, #0]
 802b1f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802b1fa:	68f8      	ldr	r0, [r7, #12]
 802b1fc:	f000 fa8e 	bl	802b71c <I2C_TransferConfig>
 802b200:	697b      	ldr	r3, [r7, #20]
 802b202:	9300      	str	r3, [sp, #0]
 802b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b206:	2200      	movs	r2, #0
 802b208:	2104      	movs	r1, #4
 802b20a:	68f8      	ldr	r0, [r7, #12]
 802b20c:	f000 f964 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b210:	4603      	mov	r3, r0
 802b212:	2b00      	cmp	r3, #0
 802b214:	d001      	beq.n	802b21a <HAL_I2C_Mem_Read+0x12a>
 802b216:	2301      	movs	r3, #1
 802b218:	e07c      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b21a:	68fb      	ldr	r3, [r7, #12]
 802b21c:	681b      	ldr	r3, [r3, #0]
 802b21e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b220:	68fb      	ldr	r3, [r7, #12]
 802b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b224:	b2d2      	uxtb	r2, r2
 802b226:	701a      	strb	r2, [r3, #0]
 802b228:	68fb      	ldr	r3, [r7, #12]
 802b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b22c:	1c5a      	adds	r2, r3, #1
 802b22e:	68fb      	ldr	r3, [r7, #12]
 802b230:	625a      	str	r2, [r3, #36]	; 0x24
 802b232:	68fb      	ldr	r3, [r7, #12]
 802b234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b236:	3b01      	subs	r3, #1
 802b238:	b29a      	uxth	r2, r3
 802b23a:	68fb      	ldr	r3, [r7, #12]
 802b23c:	851a      	strh	r2, [r3, #40]	; 0x28
 802b23e:	68fb      	ldr	r3, [r7, #12]
 802b240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b242:	b29b      	uxth	r3, r3
 802b244:	3b01      	subs	r3, #1
 802b246:	b29a      	uxth	r2, r3
 802b248:	68fb      	ldr	r3, [r7, #12]
 802b24a:	855a      	strh	r2, [r3, #42]	; 0x2a
 802b24c:	68fb      	ldr	r3, [r7, #12]
 802b24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b250:	b29b      	uxth	r3, r3
 802b252:	2b00      	cmp	r3, #0
 802b254:	d034      	beq.n	802b2c0 <HAL_I2C_Mem_Read+0x1d0>
 802b256:	68fb      	ldr	r3, [r7, #12]
 802b258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b25a:	2b00      	cmp	r3, #0
 802b25c:	d130      	bne.n	802b2c0 <HAL_I2C_Mem_Read+0x1d0>
 802b25e:	697b      	ldr	r3, [r7, #20]
 802b260:	9300      	str	r3, [sp, #0]
 802b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b264:	2200      	movs	r2, #0
 802b266:	2180      	movs	r1, #128	; 0x80
 802b268:	68f8      	ldr	r0, [r7, #12]
 802b26a:	f000 f935 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b26e:	4603      	mov	r3, r0
 802b270:	2b00      	cmp	r3, #0
 802b272:	d001      	beq.n	802b278 <HAL_I2C_Mem_Read+0x188>
 802b274:	2301      	movs	r3, #1
 802b276:	e04d      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b278:	68fb      	ldr	r3, [r7, #12]
 802b27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b27c:	b29b      	uxth	r3, r3
 802b27e:	2bff      	cmp	r3, #255	; 0xff
 802b280:	d90e      	bls.n	802b2a0 <HAL_I2C_Mem_Read+0x1b0>
 802b282:	68fb      	ldr	r3, [r7, #12]
 802b284:	22ff      	movs	r2, #255	; 0xff
 802b286:	851a      	strh	r2, [r3, #40]	; 0x28
 802b288:	68fb      	ldr	r3, [r7, #12]
 802b28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b28c:	b2da      	uxtb	r2, r3
 802b28e:	8979      	ldrh	r1, [r7, #10]
 802b290:	2300      	movs	r3, #0
 802b292:	9300      	str	r3, [sp, #0]
 802b294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802b298:	68f8      	ldr	r0, [r7, #12]
 802b29a:	f000 fa3f 	bl	802b71c <I2C_TransferConfig>
 802b29e:	e00f      	b.n	802b2c0 <HAL_I2C_Mem_Read+0x1d0>
 802b2a0:	68fb      	ldr	r3, [r7, #12]
 802b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b2a4:	b29a      	uxth	r2, r3
 802b2a6:	68fb      	ldr	r3, [r7, #12]
 802b2a8:	851a      	strh	r2, [r3, #40]	; 0x28
 802b2aa:	68fb      	ldr	r3, [r7, #12]
 802b2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b2ae:	b2da      	uxtb	r2, r3
 802b2b0:	8979      	ldrh	r1, [r7, #10]
 802b2b2:	2300      	movs	r3, #0
 802b2b4:	9300      	str	r3, [sp, #0]
 802b2b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802b2ba:	68f8      	ldr	r0, [r7, #12]
 802b2bc:	f000 fa2e 	bl	802b71c <I2C_TransferConfig>
 802b2c0:	68fb      	ldr	r3, [r7, #12]
 802b2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b2c4:	b29b      	uxth	r3, r3
 802b2c6:	2b00      	cmp	r3, #0
 802b2c8:	d19a      	bne.n	802b200 <HAL_I2C_Mem_Read+0x110>
 802b2ca:	697a      	ldr	r2, [r7, #20]
 802b2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b2ce:	68f8      	ldr	r0, [r7, #12]
 802b2d0:	f000 f982 	bl	802b5d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 802b2d4:	4603      	mov	r3, r0
 802b2d6:	2b00      	cmp	r3, #0
 802b2d8:	d001      	beq.n	802b2de <HAL_I2C_Mem_Read+0x1ee>
 802b2da:	2301      	movs	r3, #1
 802b2dc:	e01a      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b2de:	68fb      	ldr	r3, [r7, #12]
 802b2e0:	681b      	ldr	r3, [r3, #0]
 802b2e2:	2220      	movs	r2, #32
 802b2e4:	61da      	str	r2, [r3, #28]
 802b2e6:	68fb      	ldr	r3, [r7, #12]
 802b2e8:	681b      	ldr	r3, [r3, #0]
 802b2ea:	6859      	ldr	r1, [r3, #4]
 802b2ec:	68fb      	ldr	r3, [r7, #12]
 802b2ee:	681a      	ldr	r2, [r3, #0]
 802b2f0:	4b0b      	ldr	r3, [pc, #44]	; (802b320 <HAL_I2C_Mem_Read+0x230>)
 802b2f2:	400b      	ands	r3, r1
 802b2f4:	6053      	str	r3, [r2, #4]
 802b2f6:	68fb      	ldr	r3, [r7, #12]
 802b2f8:	2220      	movs	r2, #32
 802b2fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b2fe:	68fb      	ldr	r3, [r7, #12]
 802b300:	2200      	movs	r2, #0
 802b302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b306:	68fb      	ldr	r3, [r7, #12]
 802b308:	2200      	movs	r2, #0
 802b30a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b30e:	2300      	movs	r3, #0
 802b310:	e000      	b.n	802b314 <HAL_I2C_Mem_Read+0x224>
 802b312:	2302      	movs	r3, #2
 802b314:	4618      	mov	r0, r3
 802b316:	3718      	adds	r7, #24
 802b318:	46bd      	mov	sp, r7
 802b31a:	bd80      	pop	{r7, pc}
 802b31c:	80002400 	.word	0x80002400
 802b320:	fe00e800 	.word	0xfe00e800

0802b324 <HAL_I2C_GetState>:
 802b324:	b480      	push	{r7}
 802b326:	b083      	sub	sp, #12
 802b328:	af00      	add	r7, sp, #0
 802b32a:	6078      	str	r0, [r7, #4]
 802b32c:	687b      	ldr	r3, [r7, #4]
 802b32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802b332:	b2db      	uxtb	r3, r3
 802b334:	4618      	mov	r0, r3
 802b336:	370c      	adds	r7, #12
 802b338:	46bd      	mov	sp, r7
 802b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b33e:	4770      	bx	lr

0802b340 <I2C_RequestMemoryWrite>:
 802b340:	b580      	push	{r7, lr}
 802b342:	b086      	sub	sp, #24
 802b344:	af02      	add	r7, sp, #8
 802b346:	60f8      	str	r0, [r7, #12]
 802b348:	4608      	mov	r0, r1
 802b34a:	4611      	mov	r1, r2
 802b34c:	461a      	mov	r2, r3
 802b34e:	4603      	mov	r3, r0
 802b350:	817b      	strh	r3, [r7, #10]
 802b352:	460b      	mov	r3, r1
 802b354:	813b      	strh	r3, [r7, #8]
 802b356:	4613      	mov	r3, r2
 802b358:	80fb      	strh	r3, [r7, #6]
 802b35a:	88fb      	ldrh	r3, [r7, #6]
 802b35c:	b2da      	uxtb	r2, r3
 802b35e:	8979      	ldrh	r1, [r7, #10]
 802b360:	4b20      	ldr	r3, [pc, #128]	; (802b3e4 <I2C_RequestMemoryWrite+0xa4>)
 802b362:	9300      	str	r3, [sp, #0]
 802b364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802b368:	68f8      	ldr	r0, [r7, #12]
 802b36a:	f000 f9d7 	bl	802b71c <I2C_TransferConfig>
 802b36e:	69fa      	ldr	r2, [r7, #28]
 802b370:	69b9      	ldr	r1, [r7, #24]
 802b372:	68f8      	ldr	r0, [r7, #12]
 802b374:	f000 f8f0 	bl	802b558 <I2C_WaitOnTXISFlagUntilTimeout>
 802b378:	4603      	mov	r3, r0
 802b37a:	2b00      	cmp	r3, #0
 802b37c:	d001      	beq.n	802b382 <I2C_RequestMemoryWrite+0x42>
 802b37e:	2301      	movs	r3, #1
 802b380:	e02c      	b.n	802b3dc <I2C_RequestMemoryWrite+0x9c>
 802b382:	88fb      	ldrh	r3, [r7, #6]
 802b384:	2b01      	cmp	r3, #1
 802b386:	d105      	bne.n	802b394 <I2C_RequestMemoryWrite+0x54>
 802b388:	893b      	ldrh	r3, [r7, #8]
 802b38a:	b2da      	uxtb	r2, r3
 802b38c:	68fb      	ldr	r3, [r7, #12]
 802b38e:	681b      	ldr	r3, [r3, #0]
 802b390:	629a      	str	r2, [r3, #40]	; 0x28
 802b392:	e015      	b.n	802b3c0 <I2C_RequestMemoryWrite+0x80>
 802b394:	893b      	ldrh	r3, [r7, #8]
 802b396:	0a1b      	lsrs	r3, r3, #8
 802b398:	b29b      	uxth	r3, r3
 802b39a:	b2da      	uxtb	r2, r3
 802b39c:	68fb      	ldr	r3, [r7, #12]
 802b39e:	681b      	ldr	r3, [r3, #0]
 802b3a0:	629a      	str	r2, [r3, #40]	; 0x28
 802b3a2:	69fa      	ldr	r2, [r7, #28]
 802b3a4:	69b9      	ldr	r1, [r7, #24]
 802b3a6:	68f8      	ldr	r0, [r7, #12]
 802b3a8:	f000 f8d6 	bl	802b558 <I2C_WaitOnTXISFlagUntilTimeout>
 802b3ac:	4603      	mov	r3, r0
 802b3ae:	2b00      	cmp	r3, #0
 802b3b0:	d001      	beq.n	802b3b6 <I2C_RequestMemoryWrite+0x76>
 802b3b2:	2301      	movs	r3, #1
 802b3b4:	e012      	b.n	802b3dc <I2C_RequestMemoryWrite+0x9c>
 802b3b6:	893b      	ldrh	r3, [r7, #8]
 802b3b8:	b2da      	uxtb	r2, r3
 802b3ba:	68fb      	ldr	r3, [r7, #12]
 802b3bc:	681b      	ldr	r3, [r3, #0]
 802b3be:	629a      	str	r2, [r3, #40]	; 0x28
 802b3c0:	69fb      	ldr	r3, [r7, #28]
 802b3c2:	9300      	str	r3, [sp, #0]
 802b3c4:	69bb      	ldr	r3, [r7, #24]
 802b3c6:	2200      	movs	r2, #0
 802b3c8:	2180      	movs	r1, #128	; 0x80
 802b3ca:	68f8      	ldr	r0, [r7, #12]
 802b3cc:	f000 f884 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b3d0:	4603      	mov	r3, r0
 802b3d2:	2b00      	cmp	r3, #0
 802b3d4:	d001      	beq.n	802b3da <I2C_RequestMemoryWrite+0x9a>
 802b3d6:	2301      	movs	r3, #1
 802b3d8:	e000      	b.n	802b3dc <I2C_RequestMemoryWrite+0x9c>
 802b3da:	2300      	movs	r3, #0
 802b3dc:	4618      	mov	r0, r3
 802b3de:	3710      	adds	r7, #16
 802b3e0:	46bd      	mov	sp, r7
 802b3e2:	bd80      	pop	{r7, pc}
 802b3e4:	80002000 	.word	0x80002000

0802b3e8 <I2C_RequestMemoryRead>:
 802b3e8:	b580      	push	{r7, lr}
 802b3ea:	b086      	sub	sp, #24
 802b3ec:	af02      	add	r7, sp, #8
 802b3ee:	60f8      	str	r0, [r7, #12]
 802b3f0:	4608      	mov	r0, r1
 802b3f2:	4611      	mov	r1, r2
 802b3f4:	461a      	mov	r2, r3
 802b3f6:	4603      	mov	r3, r0
 802b3f8:	817b      	strh	r3, [r7, #10]
 802b3fa:	460b      	mov	r3, r1
 802b3fc:	813b      	strh	r3, [r7, #8]
 802b3fe:	4613      	mov	r3, r2
 802b400:	80fb      	strh	r3, [r7, #6]
 802b402:	88fb      	ldrh	r3, [r7, #6]
 802b404:	b2da      	uxtb	r2, r3
 802b406:	8979      	ldrh	r1, [r7, #10]
 802b408:	4b20      	ldr	r3, [pc, #128]	; (802b48c <I2C_RequestMemoryRead+0xa4>)
 802b40a:	9300      	str	r3, [sp, #0]
 802b40c:	2300      	movs	r3, #0
 802b40e:	68f8      	ldr	r0, [r7, #12]
 802b410:	f000 f984 	bl	802b71c <I2C_TransferConfig>
 802b414:	69fa      	ldr	r2, [r7, #28]
 802b416:	69b9      	ldr	r1, [r7, #24]
 802b418:	68f8      	ldr	r0, [r7, #12]
 802b41a:	f000 f89d 	bl	802b558 <I2C_WaitOnTXISFlagUntilTimeout>
 802b41e:	4603      	mov	r3, r0
 802b420:	2b00      	cmp	r3, #0
 802b422:	d001      	beq.n	802b428 <I2C_RequestMemoryRead+0x40>
 802b424:	2301      	movs	r3, #1
 802b426:	e02c      	b.n	802b482 <I2C_RequestMemoryRead+0x9a>
 802b428:	88fb      	ldrh	r3, [r7, #6]
 802b42a:	2b01      	cmp	r3, #1
 802b42c:	d105      	bne.n	802b43a <I2C_RequestMemoryRead+0x52>
 802b42e:	893b      	ldrh	r3, [r7, #8]
 802b430:	b2da      	uxtb	r2, r3
 802b432:	68fb      	ldr	r3, [r7, #12]
 802b434:	681b      	ldr	r3, [r3, #0]
 802b436:	629a      	str	r2, [r3, #40]	; 0x28
 802b438:	e015      	b.n	802b466 <I2C_RequestMemoryRead+0x7e>
 802b43a:	893b      	ldrh	r3, [r7, #8]
 802b43c:	0a1b      	lsrs	r3, r3, #8
 802b43e:	b29b      	uxth	r3, r3
 802b440:	b2da      	uxtb	r2, r3
 802b442:	68fb      	ldr	r3, [r7, #12]
 802b444:	681b      	ldr	r3, [r3, #0]
 802b446:	629a      	str	r2, [r3, #40]	; 0x28
 802b448:	69fa      	ldr	r2, [r7, #28]
 802b44a:	69b9      	ldr	r1, [r7, #24]
 802b44c:	68f8      	ldr	r0, [r7, #12]
 802b44e:	f000 f883 	bl	802b558 <I2C_WaitOnTXISFlagUntilTimeout>
 802b452:	4603      	mov	r3, r0
 802b454:	2b00      	cmp	r3, #0
 802b456:	d001      	beq.n	802b45c <I2C_RequestMemoryRead+0x74>
 802b458:	2301      	movs	r3, #1
 802b45a:	e012      	b.n	802b482 <I2C_RequestMemoryRead+0x9a>
 802b45c:	893b      	ldrh	r3, [r7, #8]
 802b45e:	b2da      	uxtb	r2, r3
 802b460:	68fb      	ldr	r3, [r7, #12]
 802b462:	681b      	ldr	r3, [r3, #0]
 802b464:	629a      	str	r2, [r3, #40]	; 0x28
 802b466:	69fb      	ldr	r3, [r7, #28]
 802b468:	9300      	str	r3, [sp, #0]
 802b46a:	69bb      	ldr	r3, [r7, #24]
 802b46c:	2200      	movs	r2, #0
 802b46e:	2140      	movs	r1, #64	; 0x40
 802b470:	68f8      	ldr	r0, [r7, #12]
 802b472:	f000 f831 	bl	802b4d8 <I2C_WaitOnFlagUntilTimeout>
 802b476:	4603      	mov	r3, r0
 802b478:	2b00      	cmp	r3, #0
 802b47a:	d001      	beq.n	802b480 <I2C_RequestMemoryRead+0x98>
 802b47c:	2301      	movs	r3, #1
 802b47e:	e000      	b.n	802b482 <I2C_RequestMemoryRead+0x9a>
 802b480:	2300      	movs	r3, #0
 802b482:	4618      	mov	r0, r3
 802b484:	3710      	adds	r7, #16
 802b486:	46bd      	mov	sp, r7
 802b488:	bd80      	pop	{r7, pc}
 802b48a:	bf00      	nop
 802b48c:	80002000 	.word	0x80002000

0802b490 <I2C_Flush_TXDR>:
 802b490:	b480      	push	{r7}
 802b492:	b083      	sub	sp, #12
 802b494:	af00      	add	r7, sp, #0
 802b496:	6078      	str	r0, [r7, #4]
 802b498:	687b      	ldr	r3, [r7, #4]
 802b49a:	681b      	ldr	r3, [r3, #0]
 802b49c:	699b      	ldr	r3, [r3, #24]
 802b49e:	f003 0302 	and.w	r3, r3, #2
 802b4a2:	2b02      	cmp	r3, #2
 802b4a4:	d103      	bne.n	802b4ae <I2C_Flush_TXDR+0x1e>
 802b4a6:	687b      	ldr	r3, [r7, #4]
 802b4a8:	681b      	ldr	r3, [r3, #0]
 802b4aa:	2200      	movs	r2, #0
 802b4ac:	629a      	str	r2, [r3, #40]	; 0x28
 802b4ae:	687b      	ldr	r3, [r7, #4]
 802b4b0:	681b      	ldr	r3, [r3, #0]
 802b4b2:	699b      	ldr	r3, [r3, #24]
 802b4b4:	f003 0301 	and.w	r3, r3, #1
 802b4b8:	2b01      	cmp	r3, #1
 802b4ba:	d007      	beq.n	802b4cc <I2C_Flush_TXDR+0x3c>
 802b4bc:	687b      	ldr	r3, [r7, #4]
 802b4be:	681b      	ldr	r3, [r3, #0]
 802b4c0:	699a      	ldr	r2, [r3, #24]
 802b4c2:	687b      	ldr	r3, [r7, #4]
 802b4c4:	681b      	ldr	r3, [r3, #0]
 802b4c6:	f042 0201 	orr.w	r2, r2, #1
 802b4ca:	619a      	str	r2, [r3, #24]
 802b4cc:	bf00      	nop
 802b4ce:	370c      	adds	r7, #12
 802b4d0:	46bd      	mov	sp, r7
 802b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4d6:	4770      	bx	lr

0802b4d8 <I2C_WaitOnFlagUntilTimeout>:
 802b4d8:	b580      	push	{r7, lr}
 802b4da:	b084      	sub	sp, #16
 802b4dc:	af00      	add	r7, sp, #0
 802b4de:	60f8      	str	r0, [r7, #12]
 802b4e0:	60b9      	str	r1, [r7, #8]
 802b4e2:	603b      	str	r3, [r7, #0]
 802b4e4:	4613      	mov	r3, r2
 802b4e6:	71fb      	strb	r3, [r7, #7]
 802b4e8:	e022      	b.n	802b530 <I2C_WaitOnFlagUntilTimeout+0x58>
 802b4ea:	683b      	ldr	r3, [r7, #0]
 802b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b4f0:	d01e      	beq.n	802b530 <I2C_WaitOnFlagUntilTimeout+0x58>
 802b4f2:	f7fd fce7 	bl	8028ec4 <HAL_GetTick>
 802b4f6:	4602      	mov	r2, r0
 802b4f8:	69bb      	ldr	r3, [r7, #24]
 802b4fa:	1ad3      	subs	r3, r2, r3
 802b4fc:	683a      	ldr	r2, [r7, #0]
 802b4fe:	429a      	cmp	r2, r3
 802b500:	d302      	bcc.n	802b508 <I2C_WaitOnFlagUntilTimeout+0x30>
 802b502:	683b      	ldr	r3, [r7, #0]
 802b504:	2b00      	cmp	r3, #0
 802b506:	d113      	bne.n	802b530 <I2C_WaitOnFlagUntilTimeout+0x58>
 802b508:	68fb      	ldr	r3, [r7, #12]
 802b50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b50c:	f043 0220 	orr.w	r2, r3, #32
 802b510:	68fb      	ldr	r3, [r7, #12]
 802b512:	645a      	str	r2, [r3, #68]	; 0x44
 802b514:	68fb      	ldr	r3, [r7, #12]
 802b516:	2220      	movs	r2, #32
 802b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b51c:	68fb      	ldr	r3, [r7, #12]
 802b51e:	2200      	movs	r2, #0
 802b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b524:	68fb      	ldr	r3, [r7, #12]
 802b526:	2200      	movs	r2, #0
 802b528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b52c:	2301      	movs	r3, #1
 802b52e:	e00f      	b.n	802b550 <I2C_WaitOnFlagUntilTimeout+0x78>
 802b530:	68fb      	ldr	r3, [r7, #12]
 802b532:	681b      	ldr	r3, [r3, #0]
 802b534:	699a      	ldr	r2, [r3, #24]
 802b536:	68bb      	ldr	r3, [r7, #8]
 802b538:	4013      	ands	r3, r2
 802b53a:	68ba      	ldr	r2, [r7, #8]
 802b53c:	429a      	cmp	r2, r3
 802b53e:	bf0c      	ite	eq
 802b540:	2301      	moveq	r3, #1
 802b542:	2300      	movne	r3, #0
 802b544:	b2db      	uxtb	r3, r3
 802b546:	461a      	mov	r2, r3
 802b548:	79fb      	ldrb	r3, [r7, #7]
 802b54a:	429a      	cmp	r2, r3
 802b54c:	d0cd      	beq.n	802b4ea <I2C_WaitOnFlagUntilTimeout+0x12>
 802b54e:	2300      	movs	r3, #0
 802b550:	4618      	mov	r0, r3
 802b552:	3710      	adds	r7, #16
 802b554:	46bd      	mov	sp, r7
 802b556:	bd80      	pop	{r7, pc}

0802b558 <I2C_WaitOnTXISFlagUntilTimeout>:
 802b558:	b580      	push	{r7, lr}
 802b55a:	b084      	sub	sp, #16
 802b55c:	af00      	add	r7, sp, #0
 802b55e:	60f8      	str	r0, [r7, #12]
 802b560:	60b9      	str	r1, [r7, #8]
 802b562:	607a      	str	r2, [r7, #4]
 802b564:	e02c      	b.n	802b5c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 802b566:	687a      	ldr	r2, [r7, #4]
 802b568:	68b9      	ldr	r1, [r7, #8]
 802b56a:	68f8      	ldr	r0, [r7, #12]
 802b56c:	f000 f870 	bl	802b650 <I2C_IsAcknowledgeFailed>
 802b570:	4603      	mov	r3, r0
 802b572:	2b00      	cmp	r3, #0
 802b574:	d001      	beq.n	802b57a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 802b576:	2301      	movs	r3, #1
 802b578:	e02a      	b.n	802b5d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 802b57a:	68bb      	ldr	r3, [r7, #8]
 802b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b580:	d01e      	beq.n	802b5c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 802b582:	f7fd fc9f 	bl	8028ec4 <HAL_GetTick>
 802b586:	4602      	mov	r2, r0
 802b588:	687b      	ldr	r3, [r7, #4]
 802b58a:	1ad3      	subs	r3, r2, r3
 802b58c:	68ba      	ldr	r2, [r7, #8]
 802b58e:	429a      	cmp	r2, r3
 802b590:	d302      	bcc.n	802b598 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 802b592:	68bb      	ldr	r3, [r7, #8]
 802b594:	2b00      	cmp	r3, #0
 802b596:	d113      	bne.n	802b5c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 802b598:	68fb      	ldr	r3, [r7, #12]
 802b59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b59c:	f043 0220 	orr.w	r2, r3, #32
 802b5a0:	68fb      	ldr	r3, [r7, #12]
 802b5a2:	645a      	str	r2, [r3, #68]	; 0x44
 802b5a4:	68fb      	ldr	r3, [r7, #12]
 802b5a6:	2220      	movs	r2, #32
 802b5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b5ac:	68fb      	ldr	r3, [r7, #12]
 802b5ae:	2200      	movs	r2, #0
 802b5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b5b4:	68fb      	ldr	r3, [r7, #12]
 802b5b6:	2200      	movs	r2, #0
 802b5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b5bc:	2301      	movs	r3, #1
 802b5be:	e007      	b.n	802b5d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 802b5c0:	68fb      	ldr	r3, [r7, #12]
 802b5c2:	681b      	ldr	r3, [r3, #0]
 802b5c4:	699b      	ldr	r3, [r3, #24]
 802b5c6:	f003 0302 	and.w	r3, r3, #2
 802b5ca:	2b02      	cmp	r3, #2
 802b5cc:	d1cb      	bne.n	802b566 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 802b5ce:	2300      	movs	r3, #0
 802b5d0:	4618      	mov	r0, r3
 802b5d2:	3710      	adds	r7, #16
 802b5d4:	46bd      	mov	sp, r7
 802b5d6:	bd80      	pop	{r7, pc}

0802b5d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
 802b5d8:	b580      	push	{r7, lr}
 802b5da:	b084      	sub	sp, #16
 802b5dc:	af00      	add	r7, sp, #0
 802b5de:	60f8      	str	r0, [r7, #12]
 802b5e0:	60b9      	str	r1, [r7, #8]
 802b5e2:	607a      	str	r2, [r7, #4]
 802b5e4:	e028      	b.n	802b638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 802b5e6:	687a      	ldr	r2, [r7, #4]
 802b5e8:	68b9      	ldr	r1, [r7, #8]
 802b5ea:	68f8      	ldr	r0, [r7, #12]
 802b5ec:	f000 f830 	bl	802b650 <I2C_IsAcknowledgeFailed>
 802b5f0:	4603      	mov	r3, r0
 802b5f2:	2b00      	cmp	r3, #0
 802b5f4:	d001      	beq.n	802b5fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 802b5f6:	2301      	movs	r3, #1
 802b5f8:	e026      	b.n	802b648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 802b5fa:	f7fd fc63 	bl	8028ec4 <HAL_GetTick>
 802b5fe:	4602      	mov	r2, r0
 802b600:	687b      	ldr	r3, [r7, #4]
 802b602:	1ad3      	subs	r3, r2, r3
 802b604:	68ba      	ldr	r2, [r7, #8]
 802b606:	429a      	cmp	r2, r3
 802b608:	d302      	bcc.n	802b610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 802b60a:	68bb      	ldr	r3, [r7, #8]
 802b60c:	2b00      	cmp	r3, #0
 802b60e:	d113      	bne.n	802b638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 802b610:	68fb      	ldr	r3, [r7, #12]
 802b612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b614:	f043 0220 	orr.w	r2, r3, #32
 802b618:	68fb      	ldr	r3, [r7, #12]
 802b61a:	645a      	str	r2, [r3, #68]	; 0x44
 802b61c:	68fb      	ldr	r3, [r7, #12]
 802b61e:	2220      	movs	r2, #32
 802b620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b624:	68fb      	ldr	r3, [r7, #12]
 802b626:	2200      	movs	r2, #0
 802b628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b62c:	68fb      	ldr	r3, [r7, #12]
 802b62e:	2200      	movs	r2, #0
 802b630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b634:	2301      	movs	r3, #1
 802b636:	e007      	b.n	802b648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 802b638:	68fb      	ldr	r3, [r7, #12]
 802b63a:	681b      	ldr	r3, [r3, #0]
 802b63c:	699b      	ldr	r3, [r3, #24]
 802b63e:	f003 0320 	and.w	r3, r3, #32
 802b642:	2b20      	cmp	r3, #32
 802b644:	d1cf      	bne.n	802b5e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 802b646:	2300      	movs	r3, #0
 802b648:	4618      	mov	r0, r3
 802b64a:	3710      	adds	r7, #16
 802b64c:	46bd      	mov	sp, r7
 802b64e:	bd80      	pop	{r7, pc}

0802b650 <I2C_IsAcknowledgeFailed>:
 802b650:	b580      	push	{r7, lr}
 802b652:	b084      	sub	sp, #16
 802b654:	af00      	add	r7, sp, #0
 802b656:	60f8      	str	r0, [r7, #12]
 802b658:	60b9      	str	r1, [r7, #8]
 802b65a:	607a      	str	r2, [r7, #4]
 802b65c:	68fb      	ldr	r3, [r7, #12]
 802b65e:	681b      	ldr	r3, [r3, #0]
 802b660:	699b      	ldr	r3, [r3, #24]
 802b662:	f003 0310 	and.w	r3, r3, #16
 802b666:	2b10      	cmp	r3, #16
 802b668:	d151      	bne.n	802b70e <I2C_IsAcknowledgeFailed+0xbe>
 802b66a:	e022      	b.n	802b6b2 <I2C_IsAcknowledgeFailed+0x62>
 802b66c:	68bb      	ldr	r3, [r7, #8]
 802b66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b672:	d01e      	beq.n	802b6b2 <I2C_IsAcknowledgeFailed+0x62>
 802b674:	f7fd fc26 	bl	8028ec4 <HAL_GetTick>
 802b678:	4602      	mov	r2, r0
 802b67a:	687b      	ldr	r3, [r7, #4]
 802b67c:	1ad3      	subs	r3, r2, r3
 802b67e:	68ba      	ldr	r2, [r7, #8]
 802b680:	429a      	cmp	r2, r3
 802b682:	d302      	bcc.n	802b68a <I2C_IsAcknowledgeFailed+0x3a>
 802b684:	68bb      	ldr	r3, [r7, #8]
 802b686:	2b00      	cmp	r3, #0
 802b688:	d113      	bne.n	802b6b2 <I2C_IsAcknowledgeFailed+0x62>
 802b68a:	68fb      	ldr	r3, [r7, #12]
 802b68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b68e:	f043 0220 	orr.w	r2, r3, #32
 802b692:	68fb      	ldr	r3, [r7, #12]
 802b694:	645a      	str	r2, [r3, #68]	; 0x44
 802b696:	68fb      	ldr	r3, [r7, #12]
 802b698:	2220      	movs	r2, #32
 802b69a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b69e:	68fb      	ldr	r3, [r7, #12]
 802b6a0:	2200      	movs	r2, #0
 802b6a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b6a6:	68fb      	ldr	r3, [r7, #12]
 802b6a8:	2200      	movs	r2, #0
 802b6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b6ae:	2301      	movs	r3, #1
 802b6b0:	e02e      	b.n	802b710 <I2C_IsAcknowledgeFailed+0xc0>
 802b6b2:	68fb      	ldr	r3, [r7, #12]
 802b6b4:	681b      	ldr	r3, [r3, #0]
 802b6b6:	699b      	ldr	r3, [r3, #24]
 802b6b8:	f003 0320 	and.w	r3, r3, #32
 802b6bc:	2b20      	cmp	r3, #32
 802b6be:	d1d5      	bne.n	802b66c <I2C_IsAcknowledgeFailed+0x1c>
 802b6c0:	68fb      	ldr	r3, [r7, #12]
 802b6c2:	681b      	ldr	r3, [r3, #0]
 802b6c4:	2210      	movs	r2, #16
 802b6c6:	61da      	str	r2, [r3, #28]
 802b6c8:	68fb      	ldr	r3, [r7, #12]
 802b6ca:	681b      	ldr	r3, [r3, #0]
 802b6cc:	2220      	movs	r2, #32
 802b6ce:	61da      	str	r2, [r3, #28]
 802b6d0:	68f8      	ldr	r0, [r7, #12]
 802b6d2:	f7ff fedd 	bl	802b490 <I2C_Flush_TXDR>
 802b6d6:	68fb      	ldr	r3, [r7, #12]
 802b6d8:	681b      	ldr	r3, [r3, #0]
 802b6da:	6859      	ldr	r1, [r3, #4]
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	681a      	ldr	r2, [r3, #0]
 802b6e0:	4b0d      	ldr	r3, [pc, #52]	; (802b718 <I2C_IsAcknowledgeFailed+0xc8>)
 802b6e2:	400b      	ands	r3, r1
 802b6e4:	6053      	str	r3, [r2, #4]
 802b6e6:	68fb      	ldr	r3, [r7, #12]
 802b6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b6ea:	f043 0204 	orr.w	r2, r3, #4
 802b6ee:	68fb      	ldr	r3, [r7, #12]
 802b6f0:	645a      	str	r2, [r3, #68]	; 0x44
 802b6f2:	68fb      	ldr	r3, [r7, #12]
 802b6f4:	2220      	movs	r2, #32
 802b6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b6fa:	68fb      	ldr	r3, [r7, #12]
 802b6fc:	2200      	movs	r2, #0
 802b6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b702:	68fb      	ldr	r3, [r7, #12]
 802b704:	2200      	movs	r2, #0
 802b706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b70a:	2301      	movs	r3, #1
 802b70c:	e000      	b.n	802b710 <I2C_IsAcknowledgeFailed+0xc0>
 802b70e:	2300      	movs	r3, #0
 802b710:	4618      	mov	r0, r3
 802b712:	3710      	adds	r7, #16
 802b714:	46bd      	mov	sp, r7
 802b716:	bd80      	pop	{r7, pc}
 802b718:	fe00e800 	.word	0xfe00e800

0802b71c <I2C_TransferConfig>:
 802b71c:	b480      	push	{r7}
 802b71e:	b085      	sub	sp, #20
 802b720:	af00      	add	r7, sp, #0
 802b722:	60f8      	str	r0, [r7, #12]
 802b724:	607b      	str	r3, [r7, #4]
 802b726:	460b      	mov	r3, r1
 802b728:	817b      	strh	r3, [r7, #10]
 802b72a:	4613      	mov	r3, r2
 802b72c:	727b      	strb	r3, [r7, #9]
 802b72e:	68fb      	ldr	r3, [r7, #12]
 802b730:	681b      	ldr	r3, [r3, #0]
 802b732:	685a      	ldr	r2, [r3, #4]
 802b734:	69bb      	ldr	r3, [r7, #24]
 802b736:	0d5b      	lsrs	r3, r3, #21
 802b738:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 802b73c:	4b0d      	ldr	r3, [pc, #52]	; (802b774 <I2C_TransferConfig+0x58>)
 802b73e:	430b      	orrs	r3, r1
 802b740:	43db      	mvns	r3, r3
 802b742:	ea02 0103 	and.w	r1, r2, r3
 802b746:	897b      	ldrh	r3, [r7, #10]
 802b748:	f3c3 0209 	ubfx	r2, r3, #0, #10
 802b74c:	7a7b      	ldrb	r3, [r7, #9]
 802b74e:	041b      	lsls	r3, r3, #16
 802b750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b754:	431a      	orrs	r2, r3
 802b756:	687b      	ldr	r3, [r7, #4]
 802b758:	431a      	orrs	r2, r3
 802b75a:	69bb      	ldr	r3, [r7, #24]
 802b75c:	431a      	orrs	r2, r3
 802b75e:	68fb      	ldr	r3, [r7, #12]
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	430a      	orrs	r2, r1
 802b764:	605a      	str	r2, [r3, #4]
 802b766:	bf00      	nop
 802b768:	3714      	adds	r7, #20
 802b76a:	46bd      	mov	sp, r7
 802b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b770:	4770      	bx	lr
 802b772:	bf00      	nop
 802b774:	03ff63ff 	.word	0x03ff63ff

0802b778 <HAL_I2CEx_ConfigAnalogFilter>:
 802b778:	b480      	push	{r7}
 802b77a:	b083      	sub	sp, #12
 802b77c:	af00      	add	r7, sp, #0
 802b77e:	6078      	str	r0, [r7, #4]
 802b780:	6039      	str	r1, [r7, #0]
 802b782:	687b      	ldr	r3, [r7, #4]
 802b784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802b788:	b2db      	uxtb	r3, r3
 802b78a:	2b20      	cmp	r3, #32
 802b78c:	d138      	bne.n	802b800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 802b78e:	687b      	ldr	r3, [r7, #4]
 802b790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802b794:	2b01      	cmp	r3, #1
 802b796:	d101      	bne.n	802b79c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802b798:	2302      	movs	r3, #2
 802b79a:	e032      	b.n	802b802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802b79c:	687b      	ldr	r3, [r7, #4]
 802b79e:	2201      	movs	r2, #1
 802b7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b7a4:	687b      	ldr	r3, [r7, #4]
 802b7a6:	2224      	movs	r2, #36	; 0x24
 802b7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b7ac:	687b      	ldr	r3, [r7, #4]
 802b7ae:	681b      	ldr	r3, [r3, #0]
 802b7b0:	681a      	ldr	r2, [r3, #0]
 802b7b2:	687b      	ldr	r3, [r7, #4]
 802b7b4:	681b      	ldr	r3, [r3, #0]
 802b7b6:	f022 0201 	bic.w	r2, r2, #1
 802b7ba:	601a      	str	r2, [r3, #0]
 802b7bc:	687b      	ldr	r3, [r7, #4]
 802b7be:	681b      	ldr	r3, [r3, #0]
 802b7c0:	681a      	ldr	r2, [r3, #0]
 802b7c2:	687b      	ldr	r3, [r7, #4]
 802b7c4:	681b      	ldr	r3, [r3, #0]
 802b7c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802b7ca:	601a      	str	r2, [r3, #0]
 802b7cc:	687b      	ldr	r3, [r7, #4]
 802b7ce:	681b      	ldr	r3, [r3, #0]
 802b7d0:	6819      	ldr	r1, [r3, #0]
 802b7d2:	687b      	ldr	r3, [r7, #4]
 802b7d4:	681b      	ldr	r3, [r3, #0]
 802b7d6:	683a      	ldr	r2, [r7, #0]
 802b7d8:	430a      	orrs	r2, r1
 802b7da:	601a      	str	r2, [r3, #0]
 802b7dc:	687b      	ldr	r3, [r7, #4]
 802b7de:	681b      	ldr	r3, [r3, #0]
 802b7e0:	681a      	ldr	r2, [r3, #0]
 802b7e2:	687b      	ldr	r3, [r7, #4]
 802b7e4:	681b      	ldr	r3, [r3, #0]
 802b7e6:	f042 0201 	orr.w	r2, r2, #1
 802b7ea:	601a      	str	r2, [r3, #0]
 802b7ec:	687b      	ldr	r3, [r7, #4]
 802b7ee:	2220      	movs	r2, #32
 802b7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b7f4:	687b      	ldr	r3, [r7, #4]
 802b7f6:	2200      	movs	r2, #0
 802b7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b7fc:	2300      	movs	r3, #0
 802b7fe:	e000      	b.n	802b802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802b800:	2302      	movs	r3, #2
 802b802:	4618      	mov	r0, r3
 802b804:	370c      	adds	r7, #12
 802b806:	46bd      	mov	sp, r7
 802b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b80c:	4770      	bx	lr

0802b80e <HAL_PCD_Init>:
 802b80e:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b810:	b08f      	sub	sp, #60	; 0x3c
 802b812:	af0a      	add	r7, sp, #40	; 0x28
 802b814:	6078      	str	r0, [r7, #4]
 802b816:	687b      	ldr	r3, [r7, #4]
 802b818:	2b00      	cmp	r3, #0
 802b81a:	d101      	bne.n	802b820 <HAL_PCD_Init+0x12>
 802b81c:	2301      	movs	r3, #1
 802b81e:	e116      	b.n	802ba4e <HAL_PCD_Init+0x240>
 802b820:	687b      	ldr	r3, [r7, #4]
 802b822:	681b      	ldr	r3, [r3, #0]
 802b824:	60bb      	str	r3, [r7, #8]
 802b826:	687b      	ldr	r3, [r7, #4]
 802b828:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802b82c:	b2db      	uxtb	r3, r3
 802b82e:	2b00      	cmp	r3, #0
 802b830:	d106      	bne.n	802b840 <HAL_PCD_Init+0x32>
 802b832:	687b      	ldr	r3, [r7, #4]
 802b834:	2200      	movs	r2, #0
 802b836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802b83a:	6878      	ldr	r0, [r7, #4]
 802b83c:	f7ee fac8 	bl	8019dd0 <HAL_PCD_MspInit>
 802b840:	687b      	ldr	r3, [r7, #4]
 802b842:	2203      	movs	r2, #3
 802b844:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 802b848:	68bb      	ldr	r3, [r7, #8]
 802b84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b850:	2b00      	cmp	r3, #0
 802b852:	d102      	bne.n	802b85a <HAL_PCD_Init+0x4c>
 802b854:	687b      	ldr	r3, [r7, #4]
 802b856:	2200      	movs	r2, #0
 802b858:	611a      	str	r2, [r3, #16]
 802b85a:	687b      	ldr	r3, [r7, #4]
 802b85c:	681b      	ldr	r3, [r3, #0]
 802b85e:	4618      	mov	r0, r3
 802b860:	f006 f99f 	bl	8031ba2 <USB_DisableGlobalInt>
 802b864:	687b      	ldr	r3, [r7, #4]
 802b866:	681b      	ldr	r3, [r3, #0]
 802b868:	603b      	str	r3, [r7, #0]
 802b86a:	687e      	ldr	r6, [r7, #4]
 802b86c:	466d      	mov	r5, sp
 802b86e:	f106 0410 	add.w	r4, r6, #16
 802b872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802b874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802b876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802b878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802b87a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802b87e:	e885 0003 	stmia.w	r5, {r0, r1}
 802b882:	1d33      	adds	r3, r6, #4
 802b884:	cb0e      	ldmia	r3, {r1, r2, r3}
 802b886:	6838      	ldr	r0, [r7, #0]
 802b888:	f006 f880 	bl	803198c <USB_CoreInit>
 802b88c:	4603      	mov	r3, r0
 802b88e:	2b00      	cmp	r3, #0
 802b890:	d005      	beq.n	802b89e <HAL_PCD_Init+0x90>
 802b892:	687b      	ldr	r3, [r7, #4]
 802b894:	2202      	movs	r2, #2
 802b896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 802b89a:	2301      	movs	r3, #1
 802b89c:	e0d7      	b.n	802ba4e <HAL_PCD_Init+0x240>
 802b89e:	687b      	ldr	r3, [r7, #4]
 802b8a0:	681b      	ldr	r3, [r3, #0]
 802b8a2:	2100      	movs	r1, #0
 802b8a4:	4618      	mov	r0, r3
 802b8a6:	f006 f98d 	bl	8031bc4 <USB_SetCurrentMode>
 802b8aa:	2300      	movs	r3, #0
 802b8ac:	73fb      	strb	r3, [r7, #15]
 802b8ae:	e04a      	b.n	802b946 <HAL_PCD_Init+0x138>
 802b8b0:	7bfa      	ldrb	r2, [r7, #15]
 802b8b2:	6879      	ldr	r1, [r7, #4]
 802b8b4:	4613      	mov	r3, r2
 802b8b6:	00db      	lsls	r3, r3, #3
 802b8b8:	4413      	add	r3, r2
 802b8ba:	009b      	lsls	r3, r3, #2
 802b8bc:	440b      	add	r3, r1
 802b8be:	333d      	adds	r3, #61	; 0x3d
 802b8c0:	2201      	movs	r2, #1
 802b8c2:	701a      	strb	r2, [r3, #0]
 802b8c4:	7bfa      	ldrb	r2, [r7, #15]
 802b8c6:	6879      	ldr	r1, [r7, #4]
 802b8c8:	4613      	mov	r3, r2
 802b8ca:	00db      	lsls	r3, r3, #3
 802b8cc:	4413      	add	r3, r2
 802b8ce:	009b      	lsls	r3, r3, #2
 802b8d0:	440b      	add	r3, r1
 802b8d2:	333c      	adds	r3, #60	; 0x3c
 802b8d4:	7bfa      	ldrb	r2, [r7, #15]
 802b8d6:	701a      	strb	r2, [r3, #0]
 802b8d8:	7bfa      	ldrb	r2, [r7, #15]
 802b8da:	7bfb      	ldrb	r3, [r7, #15]
 802b8dc:	b298      	uxth	r0, r3
 802b8de:	6879      	ldr	r1, [r7, #4]
 802b8e0:	4613      	mov	r3, r2
 802b8e2:	00db      	lsls	r3, r3, #3
 802b8e4:	4413      	add	r3, r2
 802b8e6:	009b      	lsls	r3, r3, #2
 802b8e8:	440b      	add	r3, r1
 802b8ea:	3344      	adds	r3, #68	; 0x44
 802b8ec:	4602      	mov	r2, r0
 802b8ee:	801a      	strh	r2, [r3, #0]
 802b8f0:	7bfa      	ldrb	r2, [r7, #15]
 802b8f2:	6879      	ldr	r1, [r7, #4]
 802b8f4:	4613      	mov	r3, r2
 802b8f6:	00db      	lsls	r3, r3, #3
 802b8f8:	4413      	add	r3, r2
 802b8fa:	009b      	lsls	r3, r3, #2
 802b8fc:	440b      	add	r3, r1
 802b8fe:	3340      	adds	r3, #64	; 0x40
 802b900:	2200      	movs	r2, #0
 802b902:	701a      	strb	r2, [r3, #0]
 802b904:	7bfa      	ldrb	r2, [r7, #15]
 802b906:	6879      	ldr	r1, [r7, #4]
 802b908:	4613      	mov	r3, r2
 802b90a:	00db      	lsls	r3, r3, #3
 802b90c:	4413      	add	r3, r2
 802b90e:	009b      	lsls	r3, r3, #2
 802b910:	440b      	add	r3, r1
 802b912:	3348      	adds	r3, #72	; 0x48
 802b914:	2200      	movs	r2, #0
 802b916:	601a      	str	r2, [r3, #0]
 802b918:	7bfa      	ldrb	r2, [r7, #15]
 802b91a:	6879      	ldr	r1, [r7, #4]
 802b91c:	4613      	mov	r3, r2
 802b91e:	00db      	lsls	r3, r3, #3
 802b920:	4413      	add	r3, r2
 802b922:	009b      	lsls	r3, r3, #2
 802b924:	440b      	add	r3, r1
 802b926:	334c      	adds	r3, #76	; 0x4c
 802b928:	2200      	movs	r2, #0
 802b92a:	601a      	str	r2, [r3, #0]
 802b92c:	7bfa      	ldrb	r2, [r7, #15]
 802b92e:	6879      	ldr	r1, [r7, #4]
 802b930:	4613      	mov	r3, r2
 802b932:	00db      	lsls	r3, r3, #3
 802b934:	4413      	add	r3, r2
 802b936:	009b      	lsls	r3, r3, #2
 802b938:	440b      	add	r3, r1
 802b93a:	3354      	adds	r3, #84	; 0x54
 802b93c:	2200      	movs	r2, #0
 802b93e:	601a      	str	r2, [r3, #0]
 802b940:	7bfb      	ldrb	r3, [r7, #15]
 802b942:	3301      	adds	r3, #1
 802b944:	73fb      	strb	r3, [r7, #15]
 802b946:	7bfa      	ldrb	r2, [r7, #15]
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	685b      	ldr	r3, [r3, #4]
 802b94c:	429a      	cmp	r2, r3
 802b94e:	d3af      	bcc.n	802b8b0 <HAL_PCD_Init+0xa2>
 802b950:	2300      	movs	r3, #0
 802b952:	73fb      	strb	r3, [r7, #15]
 802b954:	e044      	b.n	802b9e0 <HAL_PCD_Init+0x1d2>
 802b956:	7bfa      	ldrb	r2, [r7, #15]
 802b958:	6879      	ldr	r1, [r7, #4]
 802b95a:	4613      	mov	r3, r2
 802b95c:	00db      	lsls	r3, r3, #3
 802b95e:	4413      	add	r3, r2
 802b960:	009b      	lsls	r3, r3, #2
 802b962:	440b      	add	r3, r1
 802b964:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802b968:	2200      	movs	r2, #0
 802b96a:	701a      	strb	r2, [r3, #0]
 802b96c:	7bfa      	ldrb	r2, [r7, #15]
 802b96e:	6879      	ldr	r1, [r7, #4]
 802b970:	4613      	mov	r3, r2
 802b972:	00db      	lsls	r3, r3, #3
 802b974:	4413      	add	r3, r2
 802b976:	009b      	lsls	r3, r3, #2
 802b978:	440b      	add	r3, r1
 802b97a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802b97e:	7bfa      	ldrb	r2, [r7, #15]
 802b980:	701a      	strb	r2, [r3, #0]
 802b982:	7bfa      	ldrb	r2, [r7, #15]
 802b984:	6879      	ldr	r1, [r7, #4]
 802b986:	4613      	mov	r3, r2
 802b988:	00db      	lsls	r3, r3, #3
 802b98a:	4413      	add	r3, r2
 802b98c:	009b      	lsls	r3, r3, #2
 802b98e:	440b      	add	r3, r1
 802b990:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802b994:	2200      	movs	r2, #0
 802b996:	701a      	strb	r2, [r3, #0]
 802b998:	7bfa      	ldrb	r2, [r7, #15]
 802b99a:	6879      	ldr	r1, [r7, #4]
 802b99c:	4613      	mov	r3, r2
 802b99e:	00db      	lsls	r3, r3, #3
 802b9a0:	4413      	add	r3, r2
 802b9a2:	009b      	lsls	r3, r3, #2
 802b9a4:	440b      	add	r3, r1
 802b9a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802b9aa:	2200      	movs	r2, #0
 802b9ac:	601a      	str	r2, [r3, #0]
 802b9ae:	7bfa      	ldrb	r2, [r7, #15]
 802b9b0:	6879      	ldr	r1, [r7, #4]
 802b9b2:	4613      	mov	r3, r2
 802b9b4:	00db      	lsls	r3, r3, #3
 802b9b6:	4413      	add	r3, r2
 802b9b8:	009b      	lsls	r3, r3, #2
 802b9ba:	440b      	add	r3, r1
 802b9bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802b9c0:	2200      	movs	r2, #0
 802b9c2:	601a      	str	r2, [r3, #0]
 802b9c4:	7bfa      	ldrb	r2, [r7, #15]
 802b9c6:	6879      	ldr	r1, [r7, #4]
 802b9c8:	4613      	mov	r3, r2
 802b9ca:	00db      	lsls	r3, r3, #3
 802b9cc:	4413      	add	r3, r2
 802b9ce:	009b      	lsls	r3, r3, #2
 802b9d0:	440b      	add	r3, r1
 802b9d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802b9d6:	2200      	movs	r2, #0
 802b9d8:	601a      	str	r2, [r3, #0]
 802b9da:	7bfb      	ldrb	r3, [r7, #15]
 802b9dc:	3301      	adds	r3, #1
 802b9de:	73fb      	strb	r3, [r7, #15]
 802b9e0:	7bfa      	ldrb	r2, [r7, #15]
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	685b      	ldr	r3, [r3, #4]
 802b9e6:	429a      	cmp	r2, r3
 802b9e8:	d3b5      	bcc.n	802b956 <HAL_PCD_Init+0x148>
 802b9ea:	687b      	ldr	r3, [r7, #4]
 802b9ec:	681b      	ldr	r3, [r3, #0]
 802b9ee:	603b      	str	r3, [r7, #0]
 802b9f0:	687e      	ldr	r6, [r7, #4]
 802b9f2:	466d      	mov	r5, sp
 802b9f4:	f106 0410 	add.w	r4, r6, #16
 802b9f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802b9fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802b9fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802b9fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802ba00:	e894 0003 	ldmia.w	r4, {r0, r1}
 802ba04:	e885 0003 	stmia.w	r5, {r0, r1}
 802ba08:	1d33      	adds	r3, r6, #4
 802ba0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802ba0c:	6838      	ldr	r0, [r7, #0]
 802ba0e:	f006 f925 	bl	8031c5c <USB_DevInit>
 802ba12:	4603      	mov	r3, r0
 802ba14:	2b00      	cmp	r3, #0
 802ba16:	d005      	beq.n	802ba24 <HAL_PCD_Init+0x216>
 802ba18:	687b      	ldr	r3, [r7, #4]
 802ba1a:	2202      	movs	r2, #2
 802ba1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 802ba20:	2301      	movs	r3, #1
 802ba22:	e014      	b.n	802ba4e <HAL_PCD_Init+0x240>
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	2200      	movs	r2, #0
 802ba28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 802ba2c:	687b      	ldr	r3, [r7, #4]
 802ba2e:	2201      	movs	r2, #1
 802ba30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ba38:	2b01      	cmp	r3, #1
 802ba3a:	d102      	bne.n	802ba42 <HAL_PCD_Init+0x234>
 802ba3c:	6878      	ldr	r0, [r7, #4]
 802ba3e:	f001 f97b 	bl	802cd38 <HAL_PCDEx_ActivateLPM>
 802ba42:	687b      	ldr	r3, [r7, #4]
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	4618      	mov	r0, r3
 802ba48:	f007 fa73 	bl	8032f32 <USB_DevDisconnect>
 802ba4c:	2300      	movs	r3, #0
 802ba4e:	4618      	mov	r0, r3
 802ba50:	3714      	adds	r7, #20
 802ba52:	46bd      	mov	sp, r7
 802ba54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802ba56 <HAL_PCD_Start>:
 802ba56:	b580      	push	{r7, lr}
 802ba58:	b082      	sub	sp, #8
 802ba5a:	af00      	add	r7, sp, #0
 802ba5c:	6078      	str	r0, [r7, #4]
 802ba5e:	687b      	ldr	r3, [r7, #4]
 802ba60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802ba64:	2b01      	cmp	r3, #1
 802ba66:	d101      	bne.n	802ba6c <HAL_PCD_Start+0x16>
 802ba68:	2302      	movs	r3, #2
 802ba6a:	e012      	b.n	802ba92 <HAL_PCD_Start+0x3c>
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	2201      	movs	r2, #1
 802ba70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802ba74:	687b      	ldr	r3, [r7, #4]
 802ba76:	681b      	ldr	r3, [r3, #0]
 802ba78:	4618      	mov	r0, r3
 802ba7a:	f006 f881 	bl	8031b80 <USB_EnableGlobalInt>
 802ba7e:	687b      	ldr	r3, [r7, #4]
 802ba80:	681b      	ldr	r3, [r3, #0]
 802ba82:	4618      	mov	r0, r3
 802ba84:	f007 fa34 	bl	8032ef0 <USB_DevConnect>
 802ba88:	687b      	ldr	r3, [r7, #4]
 802ba8a:	2200      	movs	r2, #0
 802ba8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802ba90:	2300      	movs	r3, #0
 802ba92:	4618      	mov	r0, r3
 802ba94:	3708      	adds	r7, #8
 802ba96:	46bd      	mov	sp, r7
 802ba98:	bd80      	pop	{r7, pc}

0802ba9a <HAL_PCD_IRQHandler>:
 802ba9a:	b590      	push	{r4, r7, lr}
 802ba9c:	b08d      	sub	sp, #52	; 0x34
 802ba9e:	af00      	add	r7, sp, #0
 802baa0:	6078      	str	r0, [r7, #4]
 802baa2:	687b      	ldr	r3, [r7, #4]
 802baa4:	681b      	ldr	r3, [r3, #0]
 802baa6:	623b      	str	r3, [r7, #32]
 802baa8:	6a3b      	ldr	r3, [r7, #32]
 802baaa:	61fb      	str	r3, [r7, #28]
 802baac:	687b      	ldr	r3, [r7, #4]
 802baae:	681b      	ldr	r3, [r3, #0]
 802bab0:	4618      	mov	r0, r3
 802bab2:	f007 faf2 	bl	803309a <USB_GetMode>
 802bab6:	4603      	mov	r3, r0
 802bab8:	2b00      	cmp	r3, #0
 802baba:	f040 84b7 	bne.w	802c42c <HAL_PCD_IRQHandler+0x992>
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	681b      	ldr	r3, [r3, #0]
 802bac2:	4618      	mov	r0, r3
 802bac4:	f007 fa56 	bl	8032f74 <USB_ReadInterrupts>
 802bac8:	4603      	mov	r3, r0
 802baca:	2b00      	cmp	r3, #0
 802bacc:	f000 84ad 	beq.w	802c42a <HAL_PCD_IRQHandler+0x990>
 802bad0:	69fb      	ldr	r3, [r7, #28]
 802bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802bad6:	689b      	ldr	r3, [r3, #8]
 802bad8:	0a1b      	lsrs	r3, r3, #8
 802bada:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802bade:	687b      	ldr	r3, [r7, #4]
 802bae0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 802bae4:	687b      	ldr	r3, [r7, #4]
 802bae6:	681b      	ldr	r3, [r3, #0]
 802bae8:	4618      	mov	r0, r3
 802baea:	f007 fa43 	bl	8032f74 <USB_ReadInterrupts>
 802baee:	4603      	mov	r3, r0
 802baf0:	f003 0302 	and.w	r3, r3, #2
 802baf4:	2b02      	cmp	r3, #2
 802baf6:	d107      	bne.n	802bb08 <HAL_PCD_IRQHandler+0x6e>
 802baf8:	687b      	ldr	r3, [r7, #4]
 802bafa:	681b      	ldr	r3, [r3, #0]
 802bafc:	695a      	ldr	r2, [r3, #20]
 802bafe:	687b      	ldr	r3, [r7, #4]
 802bb00:	681b      	ldr	r3, [r3, #0]
 802bb02:	f002 0202 	and.w	r2, r2, #2
 802bb06:	615a      	str	r2, [r3, #20]
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	681b      	ldr	r3, [r3, #0]
 802bb0c:	4618      	mov	r0, r3
 802bb0e:	f007 fa31 	bl	8032f74 <USB_ReadInterrupts>
 802bb12:	4603      	mov	r3, r0
 802bb14:	f003 0310 	and.w	r3, r3, #16
 802bb18:	2b10      	cmp	r3, #16
 802bb1a:	d161      	bne.n	802bbe0 <HAL_PCD_IRQHandler+0x146>
 802bb1c:	687b      	ldr	r3, [r7, #4]
 802bb1e:	681b      	ldr	r3, [r3, #0]
 802bb20:	699a      	ldr	r2, [r3, #24]
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	681b      	ldr	r3, [r3, #0]
 802bb26:	f022 0210 	bic.w	r2, r2, #16
 802bb2a:	619a      	str	r2, [r3, #24]
 802bb2c:	6a3b      	ldr	r3, [r7, #32]
 802bb2e:	6a1b      	ldr	r3, [r3, #32]
 802bb30:	61bb      	str	r3, [r7, #24]
 802bb32:	69bb      	ldr	r3, [r7, #24]
 802bb34:	f003 020f 	and.w	r2, r3, #15
 802bb38:	4613      	mov	r3, r2
 802bb3a:	00db      	lsls	r3, r3, #3
 802bb3c:	4413      	add	r3, r2
 802bb3e:	009b      	lsls	r3, r3, #2
 802bb40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802bb44:	687a      	ldr	r2, [r7, #4]
 802bb46:	4413      	add	r3, r2
 802bb48:	3304      	adds	r3, #4
 802bb4a:	617b      	str	r3, [r7, #20]
 802bb4c:	69bb      	ldr	r3, [r7, #24]
 802bb4e:	0c5b      	lsrs	r3, r3, #17
 802bb50:	f003 030f 	and.w	r3, r3, #15
 802bb54:	2b02      	cmp	r3, #2
 802bb56:	d124      	bne.n	802bba2 <HAL_PCD_IRQHandler+0x108>
 802bb58:	69ba      	ldr	r2, [r7, #24]
 802bb5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802bb5e:	4013      	ands	r3, r2
 802bb60:	2b00      	cmp	r3, #0
 802bb62:	d035      	beq.n	802bbd0 <HAL_PCD_IRQHandler+0x136>
 802bb64:	697b      	ldr	r3, [r7, #20]
 802bb66:	6919      	ldr	r1, [r3, #16]
 802bb68:	69bb      	ldr	r3, [r7, #24]
 802bb6a:	091b      	lsrs	r3, r3, #4
 802bb6c:	b29b      	uxth	r3, r3
 802bb6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802bb72:	b29b      	uxth	r3, r3
 802bb74:	461a      	mov	r2, r3
 802bb76:	6a38      	ldr	r0, [r7, #32]
 802bb78:	f007 f868 	bl	8032c4c <USB_ReadPacket>
 802bb7c:	697b      	ldr	r3, [r7, #20]
 802bb7e:	691a      	ldr	r2, [r3, #16]
 802bb80:	69bb      	ldr	r3, [r7, #24]
 802bb82:	091b      	lsrs	r3, r3, #4
 802bb84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802bb88:	441a      	add	r2, r3
 802bb8a:	697b      	ldr	r3, [r7, #20]
 802bb8c:	611a      	str	r2, [r3, #16]
 802bb8e:	697b      	ldr	r3, [r7, #20]
 802bb90:	6a1a      	ldr	r2, [r3, #32]
 802bb92:	69bb      	ldr	r3, [r7, #24]
 802bb94:	091b      	lsrs	r3, r3, #4
 802bb96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802bb9a:	441a      	add	r2, r3
 802bb9c:	697b      	ldr	r3, [r7, #20]
 802bb9e:	621a      	str	r2, [r3, #32]
 802bba0:	e016      	b.n	802bbd0 <HAL_PCD_IRQHandler+0x136>
 802bba2:	69bb      	ldr	r3, [r7, #24]
 802bba4:	0c5b      	lsrs	r3, r3, #17
 802bba6:	f003 030f 	and.w	r3, r3, #15
 802bbaa:	2b06      	cmp	r3, #6
 802bbac:	d110      	bne.n	802bbd0 <HAL_PCD_IRQHandler+0x136>
 802bbae:	687b      	ldr	r3, [r7, #4]
 802bbb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802bbb4:	2208      	movs	r2, #8
 802bbb6:	4619      	mov	r1, r3
 802bbb8:	6a38      	ldr	r0, [r7, #32]
 802bbba:	f007 f847 	bl	8032c4c <USB_ReadPacket>
 802bbbe:	697b      	ldr	r3, [r7, #20]
 802bbc0:	6a1a      	ldr	r2, [r3, #32]
 802bbc2:	69bb      	ldr	r3, [r7, #24]
 802bbc4:	091b      	lsrs	r3, r3, #4
 802bbc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802bbca:	441a      	add	r2, r3
 802bbcc:	697b      	ldr	r3, [r7, #20]
 802bbce:	621a      	str	r2, [r3, #32]
 802bbd0:	687b      	ldr	r3, [r7, #4]
 802bbd2:	681b      	ldr	r3, [r3, #0]
 802bbd4:	699a      	ldr	r2, [r3, #24]
 802bbd6:	687b      	ldr	r3, [r7, #4]
 802bbd8:	681b      	ldr	r3, [r3, #0]
 802bbda:	f042 0210 	orr.w	r2, r2, #16
 802bbde:	619a      	str	r2, [r3, #24]
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	681b      	ldr	r3, [r3, #0]
 802bbe4:	4618      	mov	r0, r3
 802bbe6:	f007 f9c5 	bl	8032f74 <USB_ReadInterrupts>
 802bbea:	4603      	mov	r3, r0
 802bbec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802bbf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802bbf4:	f040 80a7 	bne.w	802bd46 <HAL_PCD_IRQHandler+0x2ac>
 802bbf8:	2300      	movs	r3, #0
 802bbfa:	627b      	str	r3, [r7, #36]	; 0x24
 802bbfc:	687b      	ldr	r3, [r7, #4]
 802bbfe:	681b      	ldr	r3, [r3, #0]
 802bc00:	4618      	mov	r0, r3
 802bc02:	f007 f9ca 	bl	8032f9a <USB_ReadDevAllOutEpInterrupt>
 802bc06:	62b8      	str	r0, [r7, #40]	; 0x28
 802bc08:	e099      	b.n	802bd3e <HAL_PCD_IRQHandler+0x2a4>
 802bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bc0c:	f003 0301 	and.w	r3, r3, #1
 802bc10:	2b00      	cmp	r3, #0
 802bc12:	f000 808e 	beq.w	802bd32 <HAL_PCD_IRQHandler+0x298>
 802bc16:	687b      	ldr	r3, [r7, #4]
 802bc18:	681b      	ldr	r3, [r3, #0]
 802bc1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bc1c:	b2d2      	uxtb	r2, r2
 802bc1e:	4611      	mov	r1, r2
 802bc20:	4618      	mov	r0, r3
 802bc22:	f007 f9ee 	bl	8033002 <USB_ReadDevOutEPInterrupt>
 802bc26:	6138      	str	r0, [r7, #16]
 802bc28:	693b      	ldr	r3, [r7, #16]
 802bc2a:	f003 0301 	and.w	r3, r3, #1
 802bc2e:	2b00      	cmp	r3, #0
 802bc30:	d00c      	beq.n	802bc4c <HAL_PCD_IRQHandler+0x1b2>
 802bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc34:	015a      	lsls	r2, r3, #5
 802bc36:	69fb      	ldr	r3, [r7, #28]
 802bc38:	4413      	add	r3, r2
 802bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bc3e:	461a      	mov	r2, r3
 802bc40:	2301      	movs	r3, #1
 802bc42:	6093      	str	r3, [r2, #8]
 802bc44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802bc46:	6878      	ldr	r0, [r7, #4]
 802bc48:	f000 fef0 	bl	802ca2c <PCD_EP_OutXfrComplete_int>
 802bc4c:	693b      	ldr	r3, [r7, #16]
 802bc4e:	f003 0308 	and.w	r3, r3, #8
 802bc52:	2b00      	cmp	r3, #0
 802bc54:	d00c      	beq.n	802bc70 <HAL_PCD_IRQHandler+0x1d6>
 802bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc58:	015a      	lsls	r2, r3, #5
 802bc5a:	69fb      	ldr	r3, [r7, #28]
 802bc5c:	4413      	add	r3, r2
 802bc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bc62:	461a      	mov	r2, r3
 802bc64:	2308      	movs	r3, #8
 802bc66:	6093      	str	r3, [r2, #8]
 802bc68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802bc6a:	6878      	ldr	r0, [r7, #4]
 802bc6c:	f000 ffc6 	bl	802cbfc <PCD_EP_OutSetupPacket_int>
 802bc70:	693b      	ldr	r3, [r7, #16]
 802bc72:	f003 0310 	and.w	r3, r3, #16
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	d008      	beq.n	802bc8c <HAL_PCD_IRQHandler+0x1f2>
 802bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc7c:	015a      	lsls	r2, r3, #5
 802bc7e:	69fb      	ldr	r3, [r7, #28]
 802bc80:	4413      	add	r3, r2
 802bc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bc86:	461a      	mov	r2, r3
 802bc88:	2310      	movs	r3, #16
 802bc8a:	6093      	str	r3, [r2, #8]
 802bc8c:	693b      	ldr	r3, [r7, #16]
 802bc8e:	f003 0302 	and.w	r3, r3, #2
 802bc92:	2b00      	cmp	r3, #0
 802bc94:	d030      	beq.n	802bcf8 <HAL_PCD_IRQHandler+0x25e>
 802bc96:	6a3b      	ldr	r3, [r7, #32]
 802bc98:	695b      	ldr	r3, [r3, #20]
 802bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc9e:	2b80      	cmp	r3, #128	; 0x80
 802bca0:	d109      	bne.n	802bcb6 <HAL_PCD_IRQHandler+0x21c>
 802bca2:	69fb      	ldr	r3, [r7, #28]
 802bca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802bca8:	685b      	ldr	r3, [r3, #4]
 802bcaa:	69fa      	ldr	r2, [r7, #28]
 802bcac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802bcb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802bcb4:	6053      	str	r3, [r2, #4]
 802bcb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bcb8:	4613      	mov	r3, r2
 802bcba:	00db      	lsls	r3, r3, #3
 802bcbc:	4413      	add	r3, r2
 802bcbe:	009b      	lsls	r3, r3, #2
 802bcc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802bcc4:	687a      	ldr	r2, [r7, #4]
 802bcc6:	4413      	add	r3, r2
 802bcc8:	3304      	adds	r3, #4
 802bcca:	617b      	str	r3, [r7, #20]
 802bccc:	697b      	ldr	r3, [r7, #20]
 802bcce:	78db      	ldrb	r3, [r3, #3]
 802bcd0:	2b01      	cmp	r3, #1
 802bcd2:	d108      	bne.n	802bce6 <HAL_PCD_IRQHandler+0x24c>
 802bcd4:	697b      	ldr	r3, [r7, #20]
 802bcd6:	2200      	movs	r2, #0
 802bcd8:	70da      	strb	r2, [r3, #3]
 802bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bcdc:	b2db      	uxtb	r3, r3
 802bcde:	4619      	mov	r1, r3
 802bce0:	6878      	ldr	r0, [r7, #4]
 802bce2:	f7ee f97b 	bl	8019fdc <HAL_PCD_ISOOUTIncompleteCallback>
 802bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bce8:	015a      	lsls	r2, r3, #5
 802bcea:	69fb      	ldr	r3, [r7, #28]
 802bcec:	4413      	add	r3, r2
 802bcee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bcf2:	461a      	mov	r2, r3
 802bcf4:	2302      	movs	r3, #2
 802bcf6:	6093      	str	r3, [r2, #8]
 802bcf8:	693b      	ldr	r3, [r7, #16]
 802bcfa:	f003 0320 	and.w	r3, r3, #32
 802bcfe:	2b00      	cmp	r3, #0
 802bd00:	d008      	beq.n	802bd14 <HAL_PCD_IRQHandler+0x27a>
 802bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd04:	015a      	lsls	r2, r3, #5
 802bd06:	69fb      	ldr	r3, [r7, #28]
 802bd08:	4413      	add	r3, r2
 802bd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bd0e:	461a      	mov	r2, r3
 802bd10:	2320      	movs	r3, #32
 802bd12:	6093      	str	r3, [r2, #8]
 802bd14:	693b      	ldr	r3, [r7, #16]
 802bd16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802bd1a:	2b00      	cmp	r3, #0
 802bd1c:	d009      	beq.n	802bd32 <HAL_PCD_IRQHandler+0x298>
 802bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd20:	015a      	lsls	r2, r3, #5
 802bd22:	69fb      	ldr	r3, [r7, #28]
 802bd24:	4413      	add	r3, r2
 802bd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802bd2a:	461a      	mov	r2, r3
 802bd2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802bd30:	6093      	str	r3, [r2, #8]
 802bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd34:	3301      	adds	r3, #1
 802bd36:	627b      	str	r3, [r7, #36]	; 0x24
 802bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd3a:	085b      	lsrs	r3, r3, #1
 802bd3c:	62bb      	str	r3, [r7, #40]	; 0x28
 802bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	f47f af62 	bne.w	802bc0a <HAL_PCD_IRQHandler+0x170>
 802bd46:	687b      	ldr	r3, [r7, #4]
 802bd48:	681b      	ldr	r3, [r3, #0]
 802bd4a:	4618      	mov	r0, r3
 802bd4c:	f007 f912 	bl	8032f74 <USB_ReadInterrupts>
 802bd50:	4603      	mov	r3, r0
 802bd52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802bd56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802bd5a:	f040 80db 	bne.w	802bf14 <HAL_PCD_IRQHandler+0x47a>
 802bd5e:	687b      	ldr	r3, [r7, #4]
 802bd60:	681b      	ldr	r3, [r3, #0]
 802bd62:	4618      	mov	r0, r3
 802bd64:	f007 f933 	bl	8032fce <USB_ReadDevAllInEpInterrupt>
 802bd68:	62b8      	str	r0, [r7, #40]	; 0x28
 802bd6a:	2300      	movs	r3, #0
 802bd6c:	627b      	str	r3, [r7, #36]	; 0x24
 802bd6e:	e0cd      	b.n	802bf0c <HAL_PCD_IRQHandler+0x472>
 802bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd72:	f003 0301 	and.w	r3, r3, #1
 802bd76:	2b00      	cmp	r3, #0
 802bd78:	f000 80c2 	beq.w	802bf00 <HAL_PCD_IRQHandler+0x466>
 802bd7c:	687b      	ldr	r3, [r7, #4]
 802bd7e:	681b      	ldr	r3, [r3, #0]
 802bd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bd82:	b2d2      	uxtb	r2, r2
 802bd84:	4611      	mov	r1, r2
 802bd86:	4618      	mov	r0, r3
 802bd88:	f007 f959 	bl	803303e <USB_ReadDevInEPInterrupt>
 802bd8c:	6138      	str	r0, [r7, #16]
 802bd8e:	693b      	ldr	r3, [r7, #16]
 802bd90:	f003 0301 	and.w	r3, r3, #1
 802bd94:	2b00      	cmp	r3, #0
 802bd96:	d057      	beq.n	802be48 <HAL_PCD_IRQHandler+0x3ae>
 802bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd9a:	f003 030f 	and.w	r3, r3, #15
 802bd9e:	2201      	movs	r2, #1
 802bda0:	fa02 f303 	lsl.w	r3, r2, r3
 802bda4:	60fb      	str	r3, [r7, #12]
 802bda6:	69fb      	ldr	r3, [r7, #28]
 802bda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802bdac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802bdae:	68fb      	ldr	r3, [r7, #12]
 802bdb0:	43db      	mvns	r3, r3
 802bdb2:	69f9      	ldr	r1, [r7, #28]
 802bdb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802bdb8:	4013      	ands	r3, r2
 802bdba:	634b      	str	r3, [r1, #52]	; 0x34
 802bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bdbe:	015a      	lsls	r2, r3, #5
 802bdc0:	69fb      	ldr	r3, [r7, #28]
 802bdc2:	4413      	add	r3, r2
 802bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802bdc8:	461a      	mov	r2, r3
 802bdca:	2301      	movs	r3, #1
 802bdcc:	6093      	str	r3, [r2, #8]
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	691b      	ldr	r3, [r3, #16]
 802bdd2:	2b01      	cmp	r3, #1
 802bdd4:	d132      	bne.n	802be3c <HAL_PCD_IRQHandler+0x3a2>
 802bdd6:	6879      	ldr	r1, [r7, #4]
 802bdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bdda:	4613      	mov	r3, r2
 802bddc:	00db      	lsls	r3, r3, #3
 802bdde:	4413      	add	r3, r2
 802bde0:	009b      	lsls	r3, r3, #2
 802bde2:	440b      	add	r3, r1
 802bde4:	334c      	adds	r3, #76	; 0x4c
 802bde6:	6819      	ldr	r1, [r3, #0]
 802bde8:	6878      	ldr	r0, [r7, #4]
 802bdea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bdec:	4613      	mov	r3, r2
 802bdee:	00db      	lsls	r3, r3, #3
 802bdf0:	4413      	add	r3, r2
 802bdf2:	009b      	lsls	r3, r3, #2
 802bdf4:	4403      	add	r3, r0
 802bdf6:	3348      	adds	r3, #72	; 0x48
 802bdf8:	681b      	ldr	r3, [r3, #0]
 802bdfa:	4419      	add	r1, r3
 802bdfc:	6878      	ldr	r0, [r7, #4]
 802bdfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802be00:	4613      	mov	r3, r2
 802be02:	00db      	lsls	r3, r3, #3
 802be04:	4413      	add	r3, r2
 802be06:	009b      	lsls	r3, r3, #2
 802be08:	4403      	add	r3, r0
 802be0a:	334c      	adds	r3, #76	; 0x4c
 802be0c:	6019      	str	r1, [r3, #0]
 802be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be10:	2b00      	cmp	r3, #0
 802be12:	d113      	bne.n	802be3c <HAL_PCD_IRQHandler+0x3a2>
 802be14:	6879      	ldr	r1, [r7, #4]
 802be16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802be18:	4613      	mov	r3, r2
 802be1a:	00db      	lsls	r3, r3, #3
 802be1c:	4413      	add	r3, r2
 802be1e:	009b      	lsls	r3, r3, #2
 802be20:	440b      	add	r3, r1
 802be22:	3354      	adds	r3, #84	; 0x54
 802be24:	681b      	ldr	r3, [r3, #0]
 802be26:	2b00      	cmp	r3, #0
 802be28:	d108      	bne.n	802be3c <HAL_PCD_IRQHandler+0x3a2>
 802be2a:	687b      	ldr	r3, [r7, #4]
 802be2c:	6818      	ldr	r0, [r3, #0]
 802be2e:	687b      	ldr	r3, [r7, #4]
 802be30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802be34:	461a      	mov	r2, r3
 802be36:	2101      	movs	r1, #1
 802be38:	f007 f962 	bl	8033100 <USB_EP0_OutStart>
 802be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be3e:	b2db      	uxtb	r3, r3
 802be40:	4619      	mov	r1, r3
 802be42:	6878      	ldr	r0, [r7, #4]
 802be44:	f7ee f845 	bl	8019ed2 <HAL_PCD_DataInStageCallback>
 802be48:	693b      	ldr	r3, [r7, #16]
 802be4a:	f003 0308 	and.w	r3, r3, #8
 802be4e:	2b00      	cmp	r3, #0
 802be50:	d008      	beq.n	802be64 <HAL_PCD_IRQHandler+0x3ca>
 802be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be54:	015a      	lsls	r2, r3, #5
 802be56:	69fb      	ldr	r3, [r7, #28]
 802be58:	4413      	add	r3, r2
 802be5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802be5e:	461a      	mov	r2, r3
 802be60:	2308      	movs	r3, #8
 802be62:	6093      	str	r3, [r2, #8]
 802be64:	693b      	ldr	r3, [r7, #16]
 802be66:	f003 0310 	and.w	r3, r3, #16
 802be6a:	2b00      	cmp	r3, #0
 802be6c:	d008      	beq.n	802be80 <HAL_PCD_IRQHandler+0x3e6>
 802be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be70:	015a      	lsls	r2, r3, #5
 802be72:	69fb      	ldr	r3, [r7, #28]
 802be74:	4413      	add	r3, r2
 802be76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802be7a:	461a      	mov	r2, r3
 802be7c:	2310      	movs	r3, #16
 802be7e:	6093      	str	r3, [r2, #8]
 802be80:	693b      	ldr	r3, [r7, #16]
 802be82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802be86:	2b00      	cmp	r3, #0
 802be88:	d008      	beq.n	802be9c <HAL_PCD_IRQHandler+0x402>
 802be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be8c:	015a      	lsls	r2, r3, #5
 802be8e:	69fb      	ldr	r3, [r7, #28]
 802be90:	4413      	add	r3, r2
 802be92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802be96:	461a      	mov	r2, r3
 802be98:	2340      	movs	r3, #64	; 0x40
 802be9a:	6093      	str	r3, [r2, #8]
 802be9c:	693b      	ldr	r3, [r7, #16]
 802be9e:	f003 0302 	and.w	r3, r3, #2
 802bea2:	2b00      	cmp	r3, #0
 802bea4:	d023      	beq.n	802beee <HAL_PCD_IRQHandler+0x454>
 802bea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802bea8:	6a38      	ldr	r0, [r7, #32]
 802beaa:	f006 f835 	bl	8031f18 <USB_FlushTxFifo>
 802beae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802beb0:	4613      	mov	r3, r2
 802beb2:	00db      	lsls	r3, r3, #3
 802beb4:	4413      	add	r3, r2
 802beb6:	009b      	lsls	r3, r3, #2
 802beb8:	3338      	adds	r3, #56	; 0x38
 802beba:	687a      	ldr	r2, [r7, #4]
 802bebc:	4413      	add	r3, r2
 802bebe:	3304      	adds	r3, #4
 802bec0:	617b      	str	r3, [r7, #20]
 802bec2:	697b      	ldr	r3, [r7, #20]
 802bec4:	78db      	ldrb	r3, [r3, #3]
 802bec6:	2b01      	cmp	r3, #1
 802bec8:	d108      	bne.n	802bedc <HAL_PCD_IRQHandler+0x442>
 802beca:	697b      	ldr	r3, [r7, #20]
 802becc:	2200      	movs	r2, #0
 802bece:	70da      	strb	r2, [r3, #3]
 802bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bed2:	b2db      	uxtb	r3, r3
 802bed4:	4619      	mov	r1, r3
 802bed6:	6878      	ldr	r0, [r7, #4]
 802bed8:	f7ee f892 	bl	801a000 <HAL_PCD_ISOINIncompleteCallback>
 802bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bede:	015a      	lsls	r2, r3, #5
 802bee0:	69fb      	ldr	r3, [r7, #28]
 802bee2:	4413      	add	r3, r2
 802bee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802bee8:	461a      	mov	r2, r3
 802beea:	2302      	movs	r3, #2
 802beec:	6093      	str	r3, [r2, #8]
 802beee:	693b      	ldr	r3, [r7, #16]
 802bef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bef4:	2b00      	cmp	r3, #0
 802bef6:	d003      	beq.n	802bf00 <HAL_PCD_IRQHandler+0x466>
 802bef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802befa:	6878      	ldr	r0, [r7, #4]
 802befc:	f000 fd08 	bl	802c910 <PCD_WriteEmptyTxFifo>
 802bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bf02:	3301      	adds	r3, #1
 802bf04:	627b      	str	r3, [r7, #36]	; 0x24
 802bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bf08:	085b      	lsrs	r3, r3, #1
 802bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
 802bf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bf0e:	2b00      	cmp	r3, #0
 802bf10:	f47f af2e 	bne.w	802bd70 <HAL_PCD_IRQHandler+0x2d6>
 802bf14:	687b      	ldr	r3, [r7, #4]
 802bf16:	681b      	ldr	r3, [r3, #0]
 802bf18:	4618      	mov	r0, r3
 802bf1a:	f007 f82b 	bl	8032f74 <USB_ReadInterrupts>
 802bf1e:	4603      	mov	r3, r0
 802bf20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802bf24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802bf28:	d122      	bne.n	802bf70 <HAL_PCD_IRQHandler+0x4d6>
 802bf2a:	69fb      	ldr	r3, [r7, #28]
 802bf2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802bf30:	685b      	ldr	r3, [r3, #4]
 802bf32:	69fa      	ldr	r2, [r7, #28]
 802bf34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802bf38:	f023 0301 	bic.w	r3, r3, #1
 802bf3c:	6053      	str	r3, [r2, #4]
 802bf3e:	687b      	ldr	r3, [r7, #4]
 802bf40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802bf44:	2b01      	cmp	r3, #1
 802bf46:	d108      	bne.n	802bf5a <HAL_PCD_IRQHandler+0x4c0>
 802bf48:	687b      	ldr	r3, [r7, #4]
 802bf4a:	2200      	movs	r2, #0
 802bf4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 802bf50:	2100      	movs	r1, #0
 802bf52:	6878      	ldr	r0, [r7, #4]
 802bf54:	f7ee fa10 	bl	801a378 <HAL_PCDEx_LPM_Callback>
 802bf58:	e002      	b.n	802bf60 <HAL_PCD_IRQHandler+0x4c6>
 802bf5a:	6878      	ldr	r0, [r7, #4]
 802bf5c:	f7ee f830 	bl	8019fc0 <HAL_PCD_ResumeCallback>
 802bf60:	687b      	ldr	r3, [r7, #4]
 802bf62:	681b      	ldr	r3, [r3, #0]
 802bf64:	695a      	ldr	r2, [r3, #20]
 802bf66:	687b      	ldr	r3, [r7, #4]
 802bf68:	681b      	ldr	r3, [r3, #0]
 802bf6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802bf6e:	615a      	str	r2, [r3, #20]
 802bf70:	687b      	ldr	r3, [r7, #4]
 802bf72:	681b      	ldr	r3, [r3, #0]
 802bf74:	4618      	mov	r0, r3
 802bf76:	f006 fffd 	bl	8032f74 <USB_ReadInterrupts>
 802bf7a:	4603      	mov	r3, r0
 802bf7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802bf80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802bf84:	d112      	bne.n	802bfac <HAL_PCD_IRQHandler+0x512>
 802bf86:	69fb      	ldr	r3, [r7, #28]
 802bf88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802bf8c:	689b      	ldr	r3, [r3, #8]
 802bf8e:	f003 0301 	and.w	r3, r3, #1
 802bf92:	2b01      	cmp	r3, #1
 802bf94:	d102      	bne.n	802bf9c <HAL_PCD_IRQHandler+0x502>
 802bf96:	6878      	ldr	r0, [r7, #4]
 802bf98:	f7ed ffec 	bl	8019f74 <HAL_PCD_SuspendCallback>
 802bf9c:	687b      	ldr	r3, [r7, #4]
 802bf9e:	681b      	ldr	r3, [r3, #0]
 802bfa0:	695a      	ldr	r2, [r3, #20]
 802bfa2:	687b      	ldr	r3, [r7, #4]
 802bfa4:	681b      	ldr	r3, [r3, #0]
 802bfa6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802bfaa:	615a      	str	r2, [r3, #20]
 802bfac:	687b      	ldr	r3, [r7, #4]
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	4618      	mov	r0, r3
 802bfb2:	f006 ffdf 	bl	8032f74 <USB_ReadInterrupts>
 802bfb6:	4603      	mov	r3, r0
 802bfb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802bfbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802bfc0:	d121      	bne.n	802c006 <HAL_PCD_IRQHandler+0x56c>
 802bfc2:	687b      	ldr	r3, [r7, #4]
 802bfc4:	681b      	ldr	r3, [r3, #0]
 802bfc6:	695a      	ldr	r2, [r3, #20]
 802bfc8:	687b      	ldr	r3, [r7, #4]
 802bfca:	681b      	ldr	r3, [r3, #0]
 802bfcc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802bfd0:	615a      	str	r2, [r3, #20]
 802bfd2:	687b      	ldr	r3, [r7, #4]
 802bfd4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802bfd8:	2b00      	cmp	r3, #0
 802bfda:	d111      	bne.n	802c000 <HAL_PCD_IRQHandler+0x566>
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	2201      	movs	r2, #1
 802bfe0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 802bfe4:	687b      	ldr	r3, [r7, #4]
 802bfe6:	681b      	ldr	r3, [r3, #0]
 802bfe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bfea:	089b      	lsrs	r3, r3, #2
 802bfec:	f003 020f 	and.w	r2, r3, #15
 802bff0:	687b      	ldr	r3, [r7, #4]
 802bff2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 802bff6:	2101      	movs	r1, #1
 802bff8:	6878      	ldr	r0, [r7, #4]
 802bffa:	f7ee f9bd 	bl	801a378 <HAL_PCDEx_LPM_Callback>
 802bffe:	e002      	b.n	802c006 <HAL_PCD_IRQHandler+0x56c>
 802c000:	6878      	ldr	r0, [r7, #4]
 802c002:	f7ed ffb7 	bl	8019f74 <HAL_PCD_SuspendCallback>
 802c006:	687b      	ldr	r3, [r7, #4]
 802c008:	681b      	ldr	r3, [r3, #0]
 802c00a:	4618      	mov	r0, r3
 802c00c:	f006 ffb2 	bl	8032f74 <USB_ReadInterrupts>
 802c010:	4603      	mov	r3, r0
 802c012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802c016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c01a:	f040 80b7 	bne.w	802c18c <HAL_PCD_IRQHandler+0x6f2>
 802c01e:	69fb      	ldr	r3, [r7, #28]
 802c020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c024:	685b      	ldr	r3, [r3, #4]
 802c026:	69fa      	ldr	r2, [r7, #28]
 802c028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c02c:	f023 0301 	bic.w	r3, r3, #1
 802c030:	6053      	str	r3, [r2, #4]
 802c032:	687b      	ldr	r3, [r7, #4]
 802c034:	681b      	ldr	r3, [r3, #0]
 802c036:	2110      	movs	r1, #16
 802c038:	4618      	mov	r0, r3
 802c03a:	f005 ff6d 	bl	8031f18 <USB_FlushTxFifo>
 802c03e:	2300      	movs	r3, #0
 802c040:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c042:	e046      	b.n	802c0d2 <HAL_PCD_IRQHandler+0x638>
 802c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c046:	015a      	lsls	r2, r3, #5
 802c048:	69fb      	ldr	r3, [r7, #28]
 802c04a:	4413      	add	r3, r2
 802c04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c050:	461a      	mov	r2, r3
 802c052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802c056:	6093      	str	r3, [r2, #8]
 802c058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c05a:	015a      	lsls	r2, r3, #5
 802c05c:	69fb      	ldr	r3, [r7, #28]
 802c05e:	4413      	add	r3, r2
 802c060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c064:	681b      	ldr	r3, [r3, #0]
 802c066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c068:	0151      	lsls	r1, r2, #5
 802c06a:	69fa      	ldr	r2, [r7, #28]
 802c06c:	440a      	add	r2, r1
 802c06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802c072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802c076:	6013      	str	r3, [r2, #0]
 802c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c07a:	015a      	lsls	r2, r3, #5
 802c07c:	69fb      	ldr	r3, [r7, #28]
 802c07e:	4413      	add	r3, r2
 802c080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c084:	461a      	mov	r2, r3
 802c086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802c08a:	6093      	str	r3, [r2, #8]
 802c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c08e:	015a      	lsls	r2, r3, #5
 802c090:	69fb      	ldr	r3, [r7, #28]
 802c092:	4413      	add	r3, r2
 802c094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c098:	681b      	ldr	r3, [r3, #0]
 802c09a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c09c:	0151      	lsls	r1, r2, #5
 802c09e:	69fa      	ldr	r2, [r7, #28]
 802c0a0:	440a      	add	r2, r1
 802c0a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802c0a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802c0aa:	6013      	str	r3, [r2, #0]
 802c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c0ae:	015a      	lsls	r2, r3, #5
 802c0b0:	69fb      	ldr	r3, [r7, #28]
 802c0b2:	4413      	add	r3, r2
 802c0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c0b8:	681b      	ldr	r3, [r3, #0]
 802c0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c0bc:	0151      	lsls	r1, r2, #5
 802c0be:	69fa      	ldr	r2, [r7, #28]
 802c0c0:	440a      	add	r2, r1
 802c0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802c0c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802c0ca:	6013      	str	r3, [r2, #0]
 802c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c0ce:	3301      	adds	r3, #1
 802c0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c0d2:	687b      	ldr	r3, [r7, #4]
 802c0d4:	685b      	ldr	r3, [r3, #4]
 802c0d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c0d8:	429a      	cmp	r2, r3
 802c0da:	d3b3      	bcc.n	802c044 <HAL_PCD_IRQHandler+0x5aa>
 802c0dc:	69fb      	ldr	r3, [r7, #28]
 802c0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c0e2:	69db      	ldr	r3, [r3, #28]
 802c0e4:	69fa      	ldr	r2, [r7, #28]
 802c0e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c0ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802c0ee:	61d3      	str	r3, [r2, #28]
 802c0f0:	687b      	ldr	r3, [r7, #4]
 802c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c0f4:	2b00      	cmp	r3, #0
 802c0f6:	d016      	beq.n	802c126 <HAL_PCD_IRQHandler+0x68c>
 802c0f8:	69fb      	ldr	r3, [r7, #28]
 802c0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802c102:	69fa      	ldr	r2, [r7, #28]
 802c104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c108:	f043 030b 	orr.w	r3, r3, #11
 802c10c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 802c110:	69fb      	ldr	r3, [r7, #28]
 802c112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c118:	69fa      	ldr	r2, [r7, #28]
 802c11a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c11e:	f043 030b 	orr.w	r3, r3, #11
 802c122:	6453      	str	r3, [r2, #68]	; 0x44
 802c124:	e015      	b.n	802c152 <HAL_PCD_IRQHandler+0x6b8>
 802c126:	69fb      	ldr	r3, [r7, #28]
 802c128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c12c:	695a      	ldr	r2, [r3, #20]
 802c12e:	69fb      	ldr	r3, [r7, #28]
 802c130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c134:	4619      	mov	r1, r3
 802c136:	f242 032b 	movw	r3, #8235	; 0x202b
 802c13a:	4313      	orrs	r3, r2
 802c13c:	614b      	str	r3, [r1, #20]
 802c13e:	69fb      	ldr	r3, [r7, #28]
 802c140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c144:	691b      	ldr	r3, [r3, #16]
 802c146:	69fa      	ldr	r2, [r7, #28]
 802c148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c14c:	f043 030b 	orr.w	r3, r3, #11
 802c150:	6113      	str	r3, [r2, #16]
 802c152:	69fb      	ldr	r3, [r7, #28]
 802c154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c158:	681b      	ldr	r3, [r3, #0]
 802c15a:	69fa      	ldr	r2, [r7, #28]
 802c15c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c160:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802c164:	6013      	str	r3, [r2, #0]
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	6818      	ldr	r0, [r3, #0]
 802c16a:	687b      	ldr	r3, [r7, #4]
 802c16c:	691b      	ldr	r3, [r3, #16]
 802c16e:	b2d9      	uxtb	r1, r3
 802c170:	687b      	ldr	r3, [r7, #4]
 802c172:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802c176:	461a      	mov	r2, r3
 802c178:	f006 ffc2 	bl	8033100 <USB_EP0_OutStart>
 802c17c:	687b      	ldr	r3, [r7, #4]
 802c17e:	681b      	ldr	r3, [r3, #0]
 802c180:	695a      	ldr	r2, [r3, #20]
 802c182:	687b      	ldr	r3, [r7, #4]
 802c184:	681b      	ldr	r3, [r3, #0]
 802c186:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802c18a:	615a      	str	r2, [r3, #20]
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	681b      	ldr	r3, [r3, #0]
 802c190:	4618      	mov	r0, r3
 802c192:	f006 feef 	bl	8032f74 <USB_ReadInterrupts>
 802c196:	4603      	mov	r3, r0
 802c198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802c19c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802c1a0:	d124      	bne.n	802c1ec <HAL_PCD_IRQHandler+0x752>
 802c1a2:	687b      	ldr	r3, [r7, #4]
 802c1a4:	681b      	ldr	r3, [r3, #0]
 802c1a6:	4618      	mov	r0, r3
 802c1a8:	f006 ff86 	bl	80330b8 <USB_ActivateSetup>
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	681b      	ldr	r3, [r3, #0]
 802c1b0:	4618      	mov	r0, r3
 802c1b2:	f005 ff2e 	bl	8032012 <USB_GetDevSpeed>
 802c1b6:	4603      	mov	r3, r0
 802c1b8:	461a      	mov	r2, r3
 802c1ba:	687b      	ldr	r3, [r7, #4]
 802c1bc:	60da      	str	r2, [r3, #12]
 802c1be:	687b      	ldr	r3, [r7, #4]
 802c1c0:	681c      	ldr	r4, [r3, #0]
 802c1c2:	f001 fa5d 	bl	802d680 <HAL_RCC_GetHCLKFreq>
 802c1c6:	4601      	mov	r1, r0
 802c1c8:	687b      	ldr	r3, [r7, #4]
 802c1ca:	68db      	ldr	r3, [r3, #12]
 802c1cc:	b2db      	uxtb	r3, r3
 802c1ce:	461a      	mov	r2, r3
 802c1d0:	4620      	mov	r0, r4
 802c1d2:	f005 fc33 	bl	8031a3c <USB_SetTurnaroundTime>
 802c1d6:	6878      	ldr	r0, [r7, #4]
 802c1d8:	f7ed fea3 	bl	8019f22 <HAL_PCD_ResetCallback>
 802c1dc:	687b      	ldr	r3, [r7, #4]
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	695a      	ldr	r2, [r3, #20]
 802c1e2:	687b      	ldr	r3, [r7, #4]
 802c1e4:	681b      	ldr	r3, [r3, #0]
 802c1e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802c1ea:	615a      	str	r2, [r3, #20]
 802c1ec:	687b      	ldr	r3, [r7, #4]
 802c1ee:	681b      	ldr	r3, [r3, #0]
 802c1f0:	4618      	mov	r0, r3
 802c1f2:	f006 febf 	bl	8032f74 <USB_ReadInterrupts>
 802c1f6:	4603      	mov	r3, r0
 802c1f8:	f003 0308 	and.w	r3, r3, #8
 802c1fc:	2b08      	cmp	r3, #8
 802c1fe:	d10a      	bne.n	802c216 <HAL_PCD_IRQHandler+0x77c>
 802c200:	6878      	ldr	r0, [r7, #4]
 802c202:	f7ed fe80 	bl	8019f06 <HAL_PCD_SOFCallback>
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	681b      	ldr	r3, [r3, #0]
 802c20a:	695a      	ldr	r2, [r3, #20]
 802c20c:	687b      	ldr	r3, [r7, #4]
 802c20e:	681b      	ldr	r3, [r3, #0]
 802c210:	f002 0208 	and.w	r2, r2, #8
 802c214:	615a      	str	r2, [r3, #20]
 802c216:	687b      	ldr	r3, [r7, #4]
 802c218:	681b      	ldr	r3, [r3, #0]
 802c21a:	4618      	mov	r0, r3
 802c21c:	f006 feaa 	bl	8032f74 <USB_ReadInterrupts>
 802c220:	4603      	mov	r3, r0
 802c222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c226:	2b80      	cmp	r3, #128	; 0x80
 802c228:	d122      	bne.n	802c270 <HAL_PCD_IRQHandler+0x7d6>
 802c22a:	6a3b      	ldr	r3, [r7, #32]
 802c22c:	699b      	ldr	r3, [r3, #24]
 802c22e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802c232:	6a3b      	ldr	r3, [r7, #32]
 802c234:	619a      	str	r2, [r3, #24]
 802c236:	2301      	movs	r3, #1
 802c238:	627b      	str	r3, [r7, #36]	; 0x24
 802c23a:	e014      	b.n	802c266 <HAL_PCD_IRQHandler+0x7cc>
 802c23c:	6879      	ldr	r1, [r7, #4]
 802c23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c240:	4613      	mov	r3, r2
 802c242:	00db      	lsls	r3, r3, #3
 802c244:	4413      	add	r3, r2
 802c246:	009b      	lsls	r3, r3, #2
 802c248:	440b      	add	r3, r1
 802c24a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802c24e:	781b      	ldrb	r3, [r3, #0]
 802c250:	2b01      	cmp	r3, #1
 802c252:	d105      	bne.n	802c260 <HAL_PCD_IRQHandler+0x7c6>
 802c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c256:	b2db      	uxtb	r3, r3
 802c258:	4619      	mov	r1, r3
 802c25a:	6878      	ldr	r0, [r7, #4]
 802c25c:	f000 fb27 	bl	802c8ae <HAL_PCD_EP_Abort>
 802c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c262:	3301      	adds	r3, #1
 802c264:	627b      	str	r3, [r7, #36]	; 0x24
 802c266:	687b      	ldr	r3, [r7, #4]
 802c268:	685b      	ldr	r3, [r3, #4]
 802c26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c26c:	429a      	cmp	r2, r3
 802c26e:	d3e5      	bcc.n	802c23c <HAL_PCD_IRQHandler+0x7a2>
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	681b      	ldr	r3, [r3, #0]
 802c274:	4618      	mov	r0, r3
 802c276:	f006 fe7d 	bl	8032f74 <USB_ReadInterrupts>
 802c27a:	4603      	mov	r3, r0
 802c27c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802c280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802c284:	d13b      	bne.n	802c2fe <HAL_PCD_IRQHandler+0x864>
 802c286:	2301      	movs	r3, #1
 802c288:	627b      	str	r3, [r7, #36]	; 0x24
 802c28a:	e02b      	b.n	802c2e4 <HAL_PCD_IRQHandler+0x84a>
 802c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c28e:	015a      	lsls	r2, r3, #5
 802c290:	69fb      	ldr	r3, [r7, #28]
 802c292:	4413      	add	r3, r2
 802c294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c298:	681b      	ldr	r3, [r3, #0]
 802c29a:	61bb      	str	r3, [r7, #24]
 802c29c:	6879      	ldr	r1, [r7, #4]
 802c29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c2a0:	4613      	mov	r3, r2
 802c2a2:	00db      	lsls	r3, r3, #3
 802c2a4:	4413      	add	r3, r2
 802c2a6:	009b      	lsls	r3, r3, #2
 802c2a8:	440b      	add	r3, r1
 802c2aa:	3340      	adds	r3, #64	; 0x40
 802c2ac:	781b      	ldrb	r3, [r3, #0]
 802c2ae:	2b01      	cmp	r3, #1
 802c2b0:	d115      	bne.n	802c2de <HAL_PCD_IRQHandler+0x844>
 802c2b2:	69bb      	ldr	r3, [r7, #24]
 802c2b4:	2b00      	cmp	r3, #0
 802c2b6:	da12      	bge.n	802c2de <HAL_PCD_IRQHandler+0x844>
 802c2b8:	6879      	ldr	r1, [r7, #4]
 802c2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c2bc:	4613      	mov	r3, r2
 802c2be:	00db      	lsls	r3, r3, #3
 802c2c0:	4413      	add	r3, r2
 802c2c2:	009b      	lsls	r3, r3, #2
 802c2c4:	440b      	add	r3, r1
 802c2c6:	333f      	adds	r3, #63	; 0x3f
 802c2c8:	2201      	movs	r2, #1
 802c2ca:	701a      	strb	r2, [r3, #0]
 802c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c2ce:	b2db      	uxtb	r3, r3
 802c2d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c2d4:	b2db      	uxtb	r3, r3
 802c2d6:	4619      	mov	r1, r3
 802c2d8:	6878      	ldr	r0, [r7, #4]
 802c2da:	f000 fae8 	bl	802c8ae <HAL_PCD_EP_Abort>
 802c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c2e0:	3301      	adds	r3, #1
 802c2e2:	627b      	str	r3, [r7, #36]	; 0x24
 802c2e4:	687b      	ldr	r3, [r7, #4]
 802c2e6:	685b      	ldr	r3, [r3, #4]
 802c2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c2ea:	429a      	cmp	r2, r3
 802c2ec:	d3ce      	bcc.n	802c28c <HAL_PCD_IRQHandler+0x7f2>
 802c2ee:	687b      	ldr	r3, [r7, #4]
 802c2f0:	681b      	ldr	r3, [r3, #0]
 802c2f2:	695a      	ldr	r2, [r3, #20]
 802c2f4:	687b      	ldr	r3, [r7, #4]
 802c2f6:	681b      	ldr	r3, [r3, #0]
 802c2f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802c2fc:	615a      	str	r2, [r3, #20]
 802c2fe:	687b      	ldr	r3, [r7, #4]
 802c300:	681b      	ldr	r3, [r3, #0]
 802c302:	4618      	mov	r0, r3
 802c304:	f006 fe36 	bl	8032f74 <USB_ReadInterrupts>
 802c308:	4603      	mov	r3, r0
 802c30a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802c30e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c312:	d155      	bne.n	802c3c0 <HAL_PCD_IRQHandler+0x926>
 802c314:	2301      	movs	r3, #1
 802c316:	627b      	str	r3, [r7, #36]	; 0x24
 802c318:	e045      	b.n	802c3a6 <HAL_PCD_IRQHandler+0x90c>
 802c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c31c:	015a      	lsls	r2, r3, #5
 802c31e:	69fb      	ldr	r3, [r7, #28]
 802c320:	4413      	add	r3, r2
 802c322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802c326:	681b      	ldr	r3, [r3, #0]
 802c328:	61bb      	str	r3, [r7, #24]
 802c32a:	6879      	ldr	r1, [r7, #4]
 802c32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c32e:	4613      	mov	r3, r2
 802c330:	00db      	lsls	r3, r3, #3
 802c332:	4413      	add	r3, r2
 802c334:	009b      	lsls	r3, r3, #2
 802c336:	440b      	add	r3, r1
 802c338:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802c33c:	781b      	ldrb	r3, [r3, #0]
 802c33e:	2b01      	cmp	r3, #1
 802c340:	d12e      	bne.n	802c3a0 <HAL_PCD_IRQHandler+0x906>
 802c342:	69bb      	ldr	r3, [r7, #24]
 802c344:	2b00      	cmp	r3, #0
 802c346:	da2b      	bge.n	802c3a0 <HAL_PCD_IRQHandler+0x906>
 802c348:	69bb      	ldr	r3, [r7, #24]
 802c34a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 802c34e:	687b      	ldr	r3, [r7, #4]
 802c350:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 802c354:	f003 0301 	and.w	r3, r3, #1
 802c358:	429a      	cmp	r2, r3
 802c35a:	d121      	bne.n	802c3a0 <HAL_PCD_IRQHandler+0x906>
 802c35c:	6879      	ldr	r1, [r7, #4]
 802c35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c360:	4613      	mov	r3, r2
 802c362:	00db      	lsls	r3, r3, #3
 802c364:	4413      	add	r3, r2
 802c366:	009b      	lsls	r3, r3, #2
 802c368:	440b      	add	r3, r1
 802c36a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802c36e:	2201      	movs	r2, #1
 802c370:	701a      	strb	r2, [r3, #0]
 802c372:	6a3b      	ldr	r3, [r7, #32]
 802c374:	699b      	ldr	r3, [r3, #24]
 802c376:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802c37a:	6a3b      	ldr	r3, [r7, #32]
 802c37c:	619a      	str	r2, [r3, #24]
 802c37e:	6a3b      	ldr	r3, [r7, #32]
 802c380:	695b      	ldr	r3, [r3, #20]
 802c382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c386:	2b00      	cmp	r3, #0
 802c388:	d10a      	bne.n	802c3a0 <HAL_PCD_IRQHandler+0x906>
 802c38a:	69fb      	ldr	r3, [r7, #28]
 802c38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802c390:	685b      	ldr	r3, [r3, #4]
 802c392:	69fa      	ldr	r2, [r7, #28]
 802c394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802c398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802c39c:	6053      	str	r3, [r2, #4]
 802c39e:	e007      	b.n	802c3b0 <HAL_PCD_IRQHandler+0x916>
 802c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c3a2:	3301      	adds	r3, #1
 802c3a4:	627b      	str	r3, [r7, #36]	; 0x24
 802c3a6:	687b      	ldr	r3, [r7, #4]
 802c3a8:	685b      	ldr	r3, [r3, #4]
 802c3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c3ac:	429a      	cmp	r2, r3
 802c3ae:	d3b4      	bcc.n	802c31a <HAL_PCD_IRQHandler+0x880>
 802c3b0:	687b      	ldr	r3, [r7, #4]
 802c3b2:	681b      	ldr	r3, [r3, #0]
 802c3b4:	695a      	ldr	r2, [r3, #20]
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 802c3be:	615a      	str	r2, [r3, #20]
 802c3c0:	687b      	ldr	r3, [r7, #4]
 802c3c2:	681b      	ldr	r3, [r3, #0]
 802c3c4:	4618      	mov	r0, r3
 802c3c6:	f006 fdd5 	bl	8032f74 <USB_ReadInterrupts>
 802c3ca:	4603      	mov	r3, r0
 802c3cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802c3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c3d4:	d10a      	bne.n	802c3ec <HAL_PCD_IRQHandler+0x952>
 802c3d6:	6878      	ldr	r0, [r7, #4]
 802c3d8:	f7ed fe24 	bl	801a024 <HAL_PCD_ConnectCallback>
 802c3dc:	687b      	ldr	r3, [r7, #4]
 802c3de:	681b      	ldr	r3, [r3, #0]
 802c3e0:	695a      	ldr	r2, [r3, #20]
 802c3e2:	687b      	ldr	r3, [r7, #4]
 802c3e4:	681b      	ldr	r3, [r3, #0]
 802c3e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 802c3ea:	615a      	str	r2, [r3, #20]
 802c3ec:	687b      	ldr	r3, [r7, #4]
 802c3ee:	681b      	ldr	r3, [r3, #0]
 802c3f0:	4618      	mov	r0, r3
 802c3f2:	f006 fdbf 	bl	8032f74 <USB_ReadInterrupts>
 802c3f6:	4603      	mov	r3, r0
 802c3f8:	f003 0304 	and.w	r3, r3, #4
 802c3fc:	2b04      	cmp	r3, #4
 802c3fe:	d115      	bne.n	802c42c <HAL_PCD_IRQHandler+0x992>
 802c400:	687b      	ldr	r3, [r7, #4]
 802c402:	681b      	ldr	r3, [r3, #0]
 802c404:	685b      	ldr	r3, [r3, #4]
 802c406:	61bb      	str	r3, [r7, #24]
 802c408:	69bb      	ldr	r3, [r7, #24]
 802c40a:	f003 0304 	and.w	r3, r3, #4
 802c40e:	2b00      	cmp	r3, #0
 802c410:	d002      	beq.n	802c418 <HAL_PCD_IRQHandler+0x97e>
 802c412:	6878      	ldr	r0, [r7, #4]
 802c414:	f7ed fe14 	bl	801a040 <HAL_PCD_DisconnectCallback>
 802c418:	687b      	ldr	r3, [r7, #4]
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	6859      	ldr	r1, [r3, #4]
 802c41e:	687b      	ldr	r3, [r7, #4]
 802c420:	681b      	ldr	r3, [r3, #0]
 802c422:	69ba      	ldr	r2, [r7, #24]
 802c424:	430a      	orrs	r2, r1
 802c426:	605a      	str	r2, [r3, #4]
 802c428:	e000      	b.n	802c42c <HAL_PCD_IRQHandler+0x992>
 802c42a:	bf00      	nop
 802c42c:	3734      	adds	r7, #52	; 0x34
 802c42e:	46bd      	mov	sp, r7
 802c430:	bd90      	pop	{r4, r7, pc}

0802c432 <HAL_PCD_SetAddress>:
 802c432:	b580      	push	{r7, lr}
 802c434:	b082      	sub	sp, #8
 802c436:	af00      	add	r7, sp, #0
 802c438:	6078      	str	r0, [r7, #4]
 802c43a:	460b      	mov	r3, r1
 802c43c:	70fb      	strb	r3, [r7, #3]
 802c43e:	687b      	ldr	r3, [r7, #4]
 802c440:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802c444:	2b01      	cmp	r3, #1
 802c446:	d101      	bne.n	802c44c <HAL_PCD_SetAddress+0x1a>
 802c448:	2302      	movs	r3, #2
 802c44a:	e013      	b.n	802c474 <HAL_PCD_SetAddress+0x42>
 802c44c:	687b      	ldr	r3, [r7, #4]
 802c44e:	2201      	movs	r2, #1
 802c450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c454:	687b      	ldr	r3, [r7, #4]
 802c456:	78fa      	ldrb	r2, [r7, #3]
 802c458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 802c45c:	687b      	ldr	r3, [r7, #4]
 802c45e:	681b      	ldr	r3, [r3, #0]
 802c460:	78fa      	ldrb	r2, [r7, #3]
 802c462:	4611      	mov	r1, r2
 802c464:	4618      	mov	r0, r3
 802c466:	f006 fd1d 	bl	8032ea4 <USB_SetDevAddress>
 802c46a:	687b      	ldr	r3, [r7, #4]
 802c46c:	2200      	movs	r2, #0
 802c46e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c472:	2300      	movs	r3, #0
 802c474:	4618      	mov	r0, r3
 802c476:	3708      	adds	r7, #8
 802c478:	46bd      	mov	sp, r7
 802c47a:	bd80      	pop	{r7, pc}

0802c47c <HAL_PCD_EP_Open>:
 802c47c:	b580      	push	{r7, lr}
 802c47e:	b084      	sub	sp, #16
 802c480:	af00      	add	r7, sp, #0
 802c482:	6078      	str	r0, [r7, #4]
 802c484:	4608      	mov	r0, r1
 802c486:	4611      	mov	r1, r2
 802c488:	461a      	mov	r2, r3
 802c48a:	4603      	mov	r3, r0
 802c48c:	70fb      	strb	r3, [r7, #3]
 802c48e:	460b      	mov	r3, r1
 802c490:	803b      	strh	r3, [r7, #0]
 802c492:	4613      	mov	r3, r2
 802c494:	70bb      	strb	r3, [r7, #2]
 802c496:	2300      	movs	r3, #0
 802c498:	72fb      	strb	r3, [r7, #11]
 802c49a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802c49e:	2b00      	cmp	r3, #0
 802c4a0:	da0f      	bge.n	802c4c2 <HAL_PCD_EP_Open+0x46>
 802c4a2:	78fb      	ldrb	r3, [r7, #3]
 802c4a4:	f003 020f 	and.w	r2, r3, #15
 802c4a8:	4613      	mov	r3, r2
 802c4aa:	00db      	lsls	r3, r3, #3
 802c4ac:	4413      	add	r3, r2
 802c4ae:	009b      	lsls	r3, r3, #2
 802c4b0:	3338      	adds	r3, #56	; 0x38
 802c4b2:	687a      	ldr	r2, [r7, #4]
 802c4b4:	4413      	add	r3, r2
 802c4b6:	3304      	adds	r3, #4
 802c4b8:	60fb      	str	r3, [r7, #12]
 802c4ba:	68fb      	ldr	r3, [r7, #12]
 802c4bc:	2201      	movs	r2, #1
 802c4be:	705a      	strb	r2, [r3, #1]
 802c4c0:	e00f      	b.n	802c4e2 <HAL_PCD_EP_Open+0x66>
 802c4c2:	78fb      	ldrb	r3, [r7, #3]
 802c4c4:	f003 020f 	and.w	r2, r3, #15
 802c4c8:	4613      	mov	r3, r2
 802c4ca:	00db      	lsls	r3, r3, #3
 802c4cc:	4413      	add	r3, r2
 802c4ce:	009b      	lsls	r3, r3, #2
 802c4d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c4d4:	687a      	ldr	r2, [r7, #4]
 802c4d6:	4413      	add	r3, r2
 802c4d8:	3304      	adds	r3, #4
 802c4da:	60fb      	str	r3, [r7, #12]
 802c4dc:	68fb      	ldr	r3, [r7, #12]
 802c4de:	2200      	movs	r2, #0
 802c4e0:	705a      	strb	r2, [r3, #1]
 802c4e2:	78fb      	ldrb	r3, [r7, #3]
 802c4e4:	f003 030f 	and.w	r3, r3, #15
 802c4e8:	b2da      	uxtb	r2, r3
 802c4ea:	68fb      	ldr	r3, [r7, #12]
 802c4ec:	701a      	strb	r2, [r3, #0]
 802c4ee:	883a      	ldrh	r2, [r7, #0]
 802c4f0:	68fb      	ldr	r3, [r7, #12]
 802c4f2:	60da      	str	r2, [r3, #12]
 802c4f4:	68fb      	ldr	r3, [r7, #12]
 802c4f6:	78ba      	ldrb	r2, [r7, #2]
 802c4f8:	711a      	strb	r2, [r3, #4]
 802c4fa:	68fb      	ldr	r3, [r7, #12]
 802c4fc:	785b      	ldrb	r3, [r3, #1]
 802c4fe:	2b00      	cmp	r3, #0
 802c500:	d004      	beq.n	802c50c <HAL_PCD_EP_Open+0x90>
 802c502:	68fb      	ldr	r3, [r7, #12]
 802c504:	781b      	ldrb	r3, [r3, #0]
 802c506:	b29a      	uxth	r2, r3
 802c508:	68fb      	ldr	r3, [r7, #12]
 802c50a:	811a      	strh	r2, [r3, #8]
 802c50c:	78bb      	ldrb	r3, [r7, #2]
 802c50e:	2b02      	cmp	r3, #2
 802c510:	d102      	bne.n	802c518 <HAL_PCD_EP_Open+0x9c>
 802c512:	68fb      	ldr	r3, [r7, #12]
 802c514:	2200      	movs	r2, #0
 802c516:	715a      	strb	r2, [r3, #5]
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802c51e:	2b01      	cmp	r3, #1
 802c520:	d101      	bne.n	802c526 <HAL_PCD_EP_Open+0xaa>
 802c522:	2302      	movs	r3, #2
 802c524:	e00e      	b.n	802c544 <HAL_PCD_EP_Open+0xc8>
 802c526:	687b      	ldr	r3, [r7, #4]
 802c528:	2201      	movs	r2, #1
 802c52a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c52e:	687b      	ldr	r3, [r7, #4]
 802c530:	681b      	ldr	r3, [r3, #0]
 802c532:	68f9      	ldr	r1, [r7, #12]
 802c534:	4618      	mov	r0, r3
 802c536:	f005 fd91 	bl	803205c <USB_ActivateEndpoint>
 802c53a:	687b      	ldr	r3, [r7, #4]
 802c53c:	2200      	movs	r2, #0
 802c53e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c542:	7afb      	ldrb	r3, [r7, #11]
 802c544:	4618      	mov	r0, r3
 802c546:	3710      	adds	r7, #16
 802c548:	46bd      	mov	sp, r7
 802c54a:	bd80      	pop	{r7, pc}

0802c54c <HAL_PCD_EP_Close>:
 802c54c:	b580      	push	{r7, lr}
 802c54e:	b084      	sub	sp, #16
 802c550:	af00      	add	r7, sp, #0
 802c552:	6078      	str	r0, [r7, #4]
 802c554:	460b      	mov	r3, r1
 802c556:	70fb      	strb	r3, [r7, #3]
 802c558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802c55c:	2b00      	cmp	r3, #0
 802c55e:	da0f      	bge.n	802c580 <HAL_PCD_EP_Close+0x34>
 802c560:	78fb      	ldrb	r3, [r7, #3]
 802c562:	f003 020f 	and.w	r2, r3, #15
 802c566:	4613      	mov	r3, r2
 802c568:	00db      	lsls	r3, r3, #3
 802c56a:	4413      	add	r3, r2
 802c56c:	009b      	lsls	r3, r3, #2
 802c56e:	3338      	adds	r3, #56	; 0x38
 802c570:	687a      	ldr	r2, [r7, #4]
 802c572:	4413      	add	r3, r2
 802c574:	3304      	adds	r3, #4
 802c576:	60fb      	str	r3, [r7, #12]
 802c578:	68fb      	ldr	r3, [r7, #12]
 802c57a:	2201      	movs	r2, #1
 802c57c:	705a      	strb	r2, [r3, #1]
 802c57e:	e00f      	b.n	802c5a0 <HAL_PCD_EP_Close+0x54>
 802c580:	78fb      	ldrb	r3, [r7, #3]
 802c582:	f003 020f 	and.w	r2, r3, #15
 802c586:	4613      	mov	r3, r2
 802c588:	00db      	lsls	r3, r3, #3
 802c58a:	4413      	add	r3, r2
 802c58c:	009b      	lsls	r3, r3, #2
 802c58e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c592:	687a      	ldr	r2, [r7, #4]
 802c594:	4413      	add	r3, r2
 802c596:	3304      	adds	r3, #4
 802c598:	60fb      	str	r3, [r7, #12]
 802c59a:	68fb      	ldr	r3, [r7, #12]
 802c59c:	2200      	movs	r2, #0
 802c59e:	705a      	strb	r2, [r3, #1]
 802c5a0:	78fb      	ldrb	r3, [r7, #3]
 802c5a2:	f003 030f 	and.w	r3, r3, #15
 802c5a6:	b2da      	uxtb	r2, r3
 802c5a8:	68fb      	ldr	r3, [r7, #12]
 802c5aa:	701a      	strb	r2, [r3, #0]
 802c5ac:	687b      	ldr	r3, [r7, #4]
 802c5ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802c5b2:	2b01      	cmp	r3, #1
 802c5b4:	d101      	bne.n	802c5ba <HAL_PCD_EP_Close+0x6e>
 802c5b6:	2302      	movs	r3, #2
 802c5b8:	e00e      	b.n	802c5d8 <HAL_PCD_EP_Close+0x8c>
 802c5ba:	687b      	ldr	r3, [r7, #4]
 802c5bc:	2201      	movs	r2, #1
 802c5be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c5c2:	687b      	ldr	r3, [r7, #4]
 802c5c4:	681b      	ldr	r3, [r3, #0]
 802c5c6:	68f9      	ldr	r1, [r7, #12]
 802c5c8:	4618      	mov	r0, r3
 802c5ca:	f005 fdcf 	bl	803216c <USB_DeactivateEndpoint>
 802c5ce:	687b      	ldr	r3, [r7, #4]
 802c5d0:	2200      	movs	r2, #0
 802c5d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c5d6:	2300      	movs	r3, #0
 802c5d8:	4618      	mov	r0, r3
 802c5da:	3710      	adds	r7, #16
 802c5dc:	46bd      	mov	sp, r7
 802c5de:	bd80      	pop	{r7, pc}

0802c5e0 <HAL_PCD_EP_Receive>:
 802c5e0:	b580      	push	{r7, lr}
 802c5e2:	b086      	sub	sp, #24
 802c5e4:	af00      	add	r7, sp, #0
 802c5e6:	60f8      	str	r0, [r7, #12]
 802c5e8:	607a      	str	r2, [r7, #4]
 802c5ea:	603b      	str	r3, [r7, #0]
 802c5ec:	460b      	mov	r3, r1
 802c5ee:	72fb      	strb	r3, [r7, #11]
 802c5f0:	7afb      	ldrb	r3, [r7, #11]
 802c5f2:	f003 020f 	and.w	r2, r3, #15
 802c5f6:	4613      	mov	r3, r2
 802c5f8:	00db      	lsls	r3, r3, #3
 802c5fa:	4413      	add	r3, r2
 802c5fc:	009b      	lsls	r3, r3, #2
 802c5fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c602:	68fa      	ldr	r2, [r7, #12]
 802c604:	4413      	add	r3, r2
 802c606:	3304      	adds	r3, #4
 802c608:	617b      	str	r3, [r7, #20]
 802c60a:	697b      	ldr	r3, [r7, #20]
 802c60c:	687a      	ldr	r2, [r7, #4]
 802c60e:	611a      	str	r2, [r3, #16]
 802c610:	697b      	ldr	r3, [r7, #20]
 802c612:	683a      	ldr	r2, [r7, #0]
 802c614:	619a      	str	r2, [r3, #24]
 802c616:	697b      	ldr	r3, [r7, #20]
 802c618:	2200      	movs	r2, #0
 802c61a:	621a      	str	r2, [r3, #32]
 802c61c:	697b      	ldr	r3, [r7, #20]
 802c61e:	2200      	movs	r2, #0
 802c620:	705a      	strb	r2, [r3, #1]
 802c622:	7afb      	ldrb	r3, [r7, #11]
 802c624:	f003 030f 	and.w	r3, r3, #15
 802c628:	b2da      	uxtb	r2, r3
 802c62a:	697b      	ldr	r3, [r7, #20]
 802c62c:	701a      	strb	r2, [r3, #0]
 802c62e:	68fb      	ldr	r3, [r7, #12]
 802c630:	691b      	ldr	r3, [r3, #16]
 802c632:	2b01      	cmp	r3, #1
 802c634:	d102      	bne.n	802c63c <HAL_PCD_EP_Receive+0x5c>
 802c636:	687a      	ldr	r2, [r7, #4]
 802c638:	697b      	ldr	r3, [r7, #20]
 802c63a:	615a      	str	r2, [r3, #20]
 802c63c:	7afb      	ldrb	r3, [r7, #11]
 802c63e:	f003 030f 	and.w	r3, r3, #15
 802c642:	2b00      	cmp	r3, #0
 802c644:	d109      	bne.n	802c65a <HAL_PCD_EP_Receive+0x7a>
 802c646:	68fb      	ldr	r3, [r7, #12]
 802c648:	6818      	ldr	r0, [r3, #0]
 802c64a:	68fb      	ldr	r3, [r7, #12]
 802c64c:	691b      	ldr	r3, [r3, #16]
 802c64e:	b2db      	uxtb	r3, r3
 802c650:	461a      	mov	r2, r3
 802c652:	6979      	ldr	r1, [r7, #20]
 802c654:	f006 f8b6 	bl	80327c4 <USB_EP0StartXfer>
 802c658:	e008      	b.n	802c66c <HAL_PCD_EP_Receive+0x8c>
 802c65a:	68fb      	ldr	r3, [r7, #12]
 802c65c:	6818      	ldr	r0, [r3, #0]
 802c65e:	68fb      	ldr	r3, [r7, #12]
 802c660:	691b      	ldr	r3, [r3, #16]
 802c662:	b2db      	uxtb	r3, r3
 802c664:	461a      	mov	r2, r3
 802c666:	6979      	ldr	r1, [r7, #20]
 802c668:	f005 fe5c 	bl	8032324 <USB_EPStartXfer>
 802c66c:	2300      	movs	r3, #0
 802c66e:	4618      	mov	r0, r3
 802c670:	3718      	adds	r7, #24
 802c672:	46bd      	mov	sp, r7
 802c674:	bd80      	pop	{r7, pc}

0802c676 <HAL_PCD_EP_GetRxCount>:
 802c676:	b480      	push	{r7}
 802c678:	b083      	sub	sp, #12
 802c67a:	af00      	add	r7, sp, #0
 802c67c:	6078      	str	r0, [r7, #4]
 802c67e:	460b      	mov	r3, r1
 802c680:	70fb      	strb	r3, [r7, #3]
 802c682:	78fb      	ldrb	r3, [r7, #3]
 802c684:	f003 020f 	and.w	r2, r3, #15
 802c688:	6879      	ldr	r1, [r7, #4]
 802c68a:	4613      	mov	r3, r2
 802c68c:	00db      	lsls	r3, r3, #3
 802c68e:	4413      	add	r3, r2
 802c690:	009b      	lsls	r3, r3, #2
 802c692:	440b      	add	r3, r1
 802c694:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 802c698:	681b      	ldr	r3, [r3, #0]
 802c69a:	4618      	mov	r0, r3
 802c69c:	370c      	adds	r7, #12
 802c69e:	46bd      	mov	sp, r7
 802c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6a4:	4770      	bx	lr

0802c6a6 <HAL_PCD_EP_Transmit>:
 802c6a6:	b580      	push	{r7, lr}
 802c6a8:	b086      	sub	sp, #24
 802c6aa:	af00      	add	r7, sp, #0
 802c6ac:	60f8      	str	r0, [r7, #12]
 802c6ae:	607a      	str	r2, [r7, #4]
 802c6b0:	603b      	str	r3, [r7, #0]
 802c6b2:	460b      	mov	r3, r1
 802c6b4:	72fb      	strb	r3, [r7, #11]
 802c6b6:	7afb      	ldrb	r3, [r7, #11]
 802c6b8:	f003 020f 	and.w	r2, r3, #15
 802c6bc:	4613      	mov	r3, r2
 802c6be:	00db      	lsls	r3, r3, #3
 802c6c0:	4413      	add	r3, r2
 802c6c2:	009b      	lsls	r3, r3, #2
 802c6c4:	3338      	adds	r3, #56	; 0x38
 802c6c6:	68fa      	ldr	r2, [r7, #12]
 802c6c8:	4413      	add	r3, r2
 802c6ca:	3304      	adds	r3, #4
 802c6cc:	617b      	str	r3, [r7, #20]
 802c6ce:	697b      	ldr	r3, [r7, #20]
 802c6d0:	687a      	ldr	r2, [r7, #4]
 802c6d2:	611a      	str	r2, [r3, #16]
 802c6d4:	697b      	ldr	r3, [r7, #20]
 802c6d6:	683a      	ldr	r2, [r7, #0]
 802c6d8:	619a      	str	r2, [r3, #24]
 802c6da:	697b      	ldr	r3, [r7, #20]
 802c6dc:	2200      	movs	r2, #0
 802c6de:	621a      	str	r2, [r3, #32]
 802c6e0:	697b      	ldr	r3, [r7, #20]
 802c6e2:	2201      	movs	r2, #1
 802c6e4:	705a      	strb	r2, [r3, #1]
 802c6e6:	7afb      	ldrb	r3, [r7, #11]
 802c6e8:	f003 030f 	and.w	r3, r3, #15
 802c6ec:	b2da      	uxtb	r2, r3
 802c6ee:	697b      	ldr	r3, [r7, #20]
 802c6f0:	701a      	strb	r2, [r3, #0]
 802c6f2:	68fb      	ldr	r3, [r7, #12]
 802c6f4:	691b      	ldr	r3, [r3, #16]
 802c6f6:	2b01      	cmp	r3, #1
 802c6f8:	d102      	bne.n	802c700 <HAL_PCD_EP_Transmit+0x5a>
 802c6fa:	687a      	ldr	r2, [r7, #4]
 802c6fc:	697b      	ldr	r3, [r7, #20]
 802c6fe:	615a      	str	r2, [r3, #20]
 802c700:	7afb      	ldrb	r3, [r7, #11]
 802c702:	f003 030f 	and.w	r3, r3, #15
 802c706:	2b00      	cmp	r3, #0
 802c708:	d109      	bne.n	802c71e <HAL_PCD_EP_Transmit+0x78>
 802c70a:	68fb      	ldr	r3, [r7, #12]
 802c70c:	6818      	ldr	r0, [r3, #0]
 802c70e:	68fb      	ldr	r3, [r7, #12]
 802c710:	691b      	ldr	r3, [r3, #16]
 802c712:	b2db      	uxtb	r3, r3
 802c714:	461a      	mov	r2, r3
 802c716:	6979      	ldr	r1, [r7, #20]
 802c718:	f006 f854 	bl	80327c4 <USB_EP0StartXfer>
 802c71c:	e008      	b.n	802c730 <HAL_PCD_EP_Transmit+0x8a>
 802c71e:	68fb      	ldr	r3, [r7, #12]
 802c720:	6818      	ldr	r0, [r3, #0]
 802c722:	68fb      	ldr	r3, [r7, #12]
 802c724:	691b      	ldr	r3, [r3, #16]
 802c726:	b2db      	uxtb	r3, r3
 802c728:	461a      	mov	r2, r3
 802c72a:	6979      	ldr	r1, [r7, #20]
 802c72c:	f005 fdfa 	bl	8032324 <USB_EPStartXfer>
 802c730:	2300      	movs	r3, #0
 802c732:	4618      	mov	r0, r3
 802c734:	3718      	adds	r7, #24
 802c736:	46bd      	mov	sp, r7
 802c738:	bd80      	pop	{r7, pc}

0802c73a <HAL_PCD_EP_SetStall>:
 802c73a:	b580      	push	{r7, lr}
 802c73c:	b084      	sub	sp, #16
 802c73e:	af00      	add	r7, sp, #0
 802c740:	6078      	str	r0, [r7, #4]
 802c742:	460b      	mov	r3, r1
 802c744:	70fb      	strb	r3, [r7, #3]
 802c746:	78fb      	ldrb	r3, [r7, #3]
 802c748:	f003 020f 	and.w	r2, r3, #15
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	685b      	ldr	r3, [r3, #4]
 802c750:	429a      	cmp	r2, r3
 802c752:	d901      	bls.n	802c758 <HAL_PCD_EP_SetStall+0x1e>
 802c754:	2301      	movs	r3, #1
 802c756:	e050      	b.n	802c7fa <HAL_PCD_EP_SetStall+0xc0>
 802c758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802c75c:	2b00      	cmp	r3, #0
 802c75e:	da0f      	bge.n	802c780 <HAL_PCD_EP_SetStall+0x46>
 802c760:	78fb      	ldrb	r3, [r7, #3]
 802c762:	f003 020f 	and.w	r2, r3, #15
 802c766:	4613      	mov	r3, r2
 802c768:	00db      	lsls	r3, r3, #3
 802c76a:	4413      	add	r3, r2
 802c76c:	009b      	lsls	r3, r3, #2
 802c76e:	3338      	adds	r3, #56	; 0x38
 802c770:	687a      	ldr	r2, [r7, #4]
 802c772:	4413      	add	r3, r2
 802c774:	3304      	adds	r3, #4
 802c776:	60fb      	str	r3, [r7, #12]
 802c778:	68fb      	ldr	r3, [r7, #12]
 802c77a:	2201      	movs	r2, #1
 802c77c:	705a      	strb	r2, [r3, #1]
 802c77e:	e00d      	b.n	802c79c <HAL_PCD_EP_SetStall+0x62>
 802c780:	78fa      	ldrb	r2, [r7, #3]
 802c782:	4613      	mov	r3, r2
 802c784:	00db      	lsls	r3, r3, #3
 802c786:	4413      	add	r3, r2
 802c788:	009b      	lsls	r3, r3, #2
 802c78a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c78e:	687a      	ldr	r2, [r7, #4]
 802c790:	4413      	add	r3, r2
 802c792:	3304      	adds	r3, #4
 802c794:	60fb      	str	r3, [r7, #12]
 802c796:	68fb      	ldr	r3, [r7, #12]
 802c798:	2200      	movs	r2, #0
 802c79a:	705a      	strb	r2, [r3, #1]
 802c79c:	68fb      	ldr	r3, [r7, #12]
 802c79e:	2201      	movs	r2, #1
 802c7a0:	709a      	strb	r2, [r3, #2]
 802c7a2:	78fb      	ldrb	r3, [r7, #3]
 802c7a4:	f003 030f 	and.w	r3, r3, #15
 802c7a8:	b2da      	uxtb	r2, r3
 802c7aa:	68fb      	ldr	r3, [r7, #12]
 802c7ac:	701a      	strb	r2, [r3, #0]
 802c7ae:	687b      	ldr	r3, [r7, #4]
 802c7b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802c7b4:	2b01      	cmp	r3, #1
 802c7b6:	d101      	bne.n	802c7bc <HAL_PCD_EP_SetStall+0x82>
 802c7b8:	2302      	movs	r3, #2
 802c7ba:	e01e      	b.n	802c7fa <HAL_PCD_EP_SetStall+0xc0>
 802c7bc:	687b      	ldr	r3, [r7, #4]
 802c7be:	2201      	movs	r2, #1
 802c7c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	681b      	ldr	r3, [r3, #0]
 802c7c8:	68f9      	ldr	r1, [r7, #12]
 802c7ca:	4618      	mov	r0, r3
 802c7cc:	f006 fa96 	bl	8032cfc <USB_EPSetStall>
 802c7d0:	78fb      	ldrb	r3, [r7, #3]
 802c7d2:	f003 030f 	and.w	r3, r3, #15
 802c7d6:	2b00      	cmp	r3, #0
 802c7d8:	d10a      	bne.n	802c7f0 <HAL_PCD_EP_SetStall+0xb6>
 802c7da:	687b      	ldr	r3, [r7, #4]
 802c7dc:	6818      	ldr	r0, [r3, #0]
 802c7de:	687b      	ldr	r3, [r7, #4]
 802c7e0:	691b      	ldr	r3, [r3, #16]
 802c7e2:	b2d9      	uxtb	r1, r3
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802c7ea:	461a      	mov	r2, r3
 802c7ec:	f006 fc88 	bl	8033100 <USB_EP0_OutStart>
 802c7f0:	687b      	ldr	r3, [r7, #4]
 802c7f2:	2200      	movs	r2, #0
 802c7f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c7f8:	2300      	movs	r3, #0
 802c7fa:	4618      	mov	r0, r3
 802c7fc:	3710      	adds	r7, #16
 802c7fe:	46bd      	mov	sp, r7
 802c800:	bd80      	pop	{r7, pc}

0802c802 <HAL_PCD_EP_ClrStall>:
 802c802:	b580      	push	{r7, lr}
 802c804:	b084      	sub	sp, #16
 802c806:	af00      	add	r7, sp, #0
 802c808:	6078      	str	r0, [r7, #4]
 802c80a:	460b      	mov	r3, r1
 802c80c:	70fb      	strb	r3, [r7, #3]
 802c80e:	78fb      	ldrb	r3, [r7, #3]
 802c810:	f003 020f 	and.w	r2, r3, #15
 802c814:	687b      	ldr	r3, [r7, #4]
 802c816:	685b      	ldr	r3, [r3, #4]
 802c818:	429a      	cmp	r2, r3
 802c81a:	d901      	bls.n	802c820 <HAL_PCD_EP_ClrStall+0x1e>
 802c81c:	2301      	movs	r3, #1
 802c81e:	e042      	b.n	802c8a6 <HAL_PCD_EP_ClrStall+0xa4>
 802c820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802c824:	2b00      	cmp	r3, #0
 802c826:	da0f      	bge.n	802c848 <HAL_PCD_EP_ClrStall+0x46>
 802c828:	78fb      	ldrb	r3, [r7, #3]
 802c82a:	f003 020f 	and.w	r2, r3, #15
 802c82e:	4613      	mov	r3, r2
 802c830:	00db      	lsls	r3, r3, #3
 802c832:	4413      	add	r3, r2
 802c834:	009b      	lsls	r3, r3, #2
 802c836:	3338      	adds	r3, #56	; 0x38
 802c838:	687a      	ldr	r2, [r7, #4]
 802c83a:	4413      	add	r3, r2
 802c83c:	3304      	adds	r3, #4
 802c83e:	60fb      	str	r3, [r7, #12]
 802c840:	68fb      	ldr	r3, [r7, #12]
 802c842:	2201      	movs	r2, #1
 802c844:	705a      	strb	r2, [r3, #1]
 802c846:	e00f      	b.n	802c868 <HAL_PCD_EP_ClrStall+0x66>
 802c848:	78fb      	ldrb	r3, [r7, #3]
 802c84a:	f003 020f 	and.w	r2, r3, #15
 802c84e:	4613      	mov	r3, r2
 802c850:	00db      	lsls	r3, r3, #3
 802c852:	4413      	add	r3, r2
 802c854:	009b      	lsls	r3, r3, #2
 802c856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c85a:	687a      	ldr	r2, [r7, #4]
 802c85c:	4413      	add	r3, r2
 802c85e:	3304      	adds	r3, #4
 802c860:	60fb      	str	r3, [r7, #12]
 802c862:	68fb      	ldr	r3, [r7, #12]
 802c864:	2200      	movs	r2, #0
 802c866:	705a      	strb	r2, [r3, #1]
 802c868:	68fb      	ldr	r3, [r7, #12]
 802c86a:	2200      	movs	r2, #0
 802c86c:	709a      	strb	r2, [r3, #2]
 802c86e:	78fb      	ldrb	r3, [r7, #3]
 802c870:	f003 030f 	and.w	r3, r3, #15
 802c874:	b2da      	uxtb	r2, r3
 802c876:	68fb      	ldr	r3, [r7, #12]
 802c878:	701a      	strb	r2, [r3, #0]
 802c87a:	687b      	ldr	r3, [r7, #4]
 802c87c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802c880:	2b01      	cmp	r3, #1
 802c882:	d101      	bne.n	802c888 <HAL_PCD_EP_ClrStall+0x86>
 802c884:	2302      	movs	r3, #2
 802c886:	e00e      	b.n	802c8a6 <HAL_PCD_EP_ClrStall+0xa4>
 802c888:	687b      	ldr	r3, [r7, #4]
 802c88a:	2201      	movs	r2, #1
 802c88c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c890:	687b      	ldr	r3, [r7, #4]
 802c892:	681b      	ldr	r3, [r3, #0]
 802c894:	68f9      	ldr	r1, [r7, #12]
 802c896:	4618      	mov	r0, r3
 802c898:	f006 fa9e 	bl	8032dd8 <USB_EPClearStall>
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	2200      	movs	r2, #0
 802c8a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 802c8a4:	2300      	movs	r3, #0
 802c8a6:	4618      	mov	r0, r3
 802c8a8:	3710      	adds	r7, #16
 802c8aa:	46bd      	mov	sp, r7
 802c8ac:	bd80      	pop	{r7, pc}

0802c8ae <HAL_PCD_EP_Abort>:
 802c8ae:	b580      	push	{r7, lr}
 802c8b0:	b084      	sub	sp, #16
 802c8b2:	af00      	add	r7, sp, #0
 802c8b4:	6078      	str	r0, [r7, #4]
 802c8b6:	460b      	mov	r3, r1
 802c8b8:	70fb      	strb	r3, [r7, #3]
 802c8ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802c8be:	2b00      	cmp	r3, #0
 802c8c0:	da0c      	bge.n	802c8dc <HAL_PCD_EP_Abort+0x2e>
 802c8c2:	78fb      	ldrb	r3, [r7, #3]
 802c8c4:	f003 020f 	and.w	r2, r3, #15
 802c8c8:	4613      	mov	r3, r2
 802c8ca:	00db      	lsls	r3, r3, #3
 802c8cc:	4413      	add	r3, r2
 802c8ce:	009b      	lsls	r3, r3, #2
 802c8d0:	3338      	adds	r3, #56	; 0x38
 802c8d2:	687a      	ldr	r2, [r7, #4]
 802c8d4:	4413      	add	r3, r2
 802c8d6:	3304      	adds	r3, #4
 802c8d8:	60fb      	str	r3, [r7, #12]
 802c8da:	e00c      	b.n	802c8f6 <HAL_PCD_EP_Abort+0x48>
 802c8dc:	78fb      	ldrb	r3, [r7, #3]
 802c8de:	f003 020f 	and.w	r2, r3, #15
 802c8e2:	4613      	mov	r3, r2
 802c8e4:	00db      	lsls	r3, r3, #3
 802c8e6:	4413      	add	r3, r2
 802c8e8:	009b      	lsls	r3, r3, #2
 802c8ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802c8ee:	687a      	ldr	r2, [r7, #4]
 802c8f0:	4413      	add	r3, r2
 802c8f2:	3304      	adds	r3, #4
 802c8f4:	60fb      	str	r3, [r7, #12]
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	681b      	ldr	r3, [r3, #0]
 802c8fa:	68f9      	ldr	r1, [r7, #12]
 802c8fc:	4618      	mov	r0, r3
 802c8fe:	f006 f8bd 	bl	8032a7c <USB_EPStopXfer>
 802c902:	4603      	mov	r3, r0
 802c904:	72fb      	strb	r3, [r7, #11]
 802c906:	7afb      	ldrb	r3, [r7, #11]
 802c908:	4618      	mov	r0, r3
 802c90a:	3710      	adds	r7, #16
 802c90c:	46bd      	mov	sp, r7
 802c90e:	bd80      	pop	{r7, pc}

0802c910 <PCD_WriteEmptyTxFifo>:
 802c910:	b580      	push	{r7, lr}
 802c912:	b08a      	sub	sp, #40	; 0x28
 802c914:	af02      	add	r7, sp, #8
 802c916:	6078      	str	r0, [r7, #4]
 802c918:	6039      	str	r1, [r7, #0]
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	681b      	ldr	r3, [r3, #0]
 802c91e:	617b      	str	r3, [r7, #20]
 802c920:	697b      	ldr	r3, [r7, #20]
 802c922:	613b      	str	r3, [r7, #16]
 802c924:	683a      	ldr	r2, [r7, #0]
 802c926:	4613      	mov	r3, r2
 802c928:	00db      	lsls	r3, r3, #3
 802c92a:	4413      	add	r3, r2
 802c92c:	009b      	lsls	r3, r3, #2
 802c92e:	3338      	adds	r3, #56	; 0x38
 802c930:	687a      	ldr	r2, [r7, #4]
 802c932:	4413      	add	r3, r2
 802c934:	3304      	adds	r3, #4
 802c936:	60fb      	str	r3, [r7, #12]
 802c938:	68fb      	ldr	r3, [r7, #12]
 802c93a:	6a1a      	ldr	r2, [r3, #32]
 802c93c:	68fb      	ldr	r3, [r7, #12]
 802c93e:	699b      	ldr	r3, [r3, #24]
 802c940:	429a      	cmp	r2, r3
 802c942:	d901      	bls.n	802c948 <PCD_WriteEmptyTxFifo+0x38>
 802c944:	2301      	movs	r3, #1
 802c946:	e06c      	b.n	802ca22 <PCD_WriteEmptyTxFifo+0x112>
 802c948:	68fb      	ldr	r3, [r7, #12]
 802c94a:	699a      	ldr	r2, [r3, #24]
 802c94c:	68fb      	ldr	r3, [r7, #12]
 802c94e:	6a1b      	ldr	r3, [r3, #32]
 802c950:	1ad3      	subs	r3, r2, r3
 802c952:	61fb      	str	r3, [r7, #28]
 802c954:	68fb      	ldr	r3, [r7, #12]
 802c956:	68db      	ldr	r3, [r3, #12]
 802c958:	69fa      	ldr	r2, [r7, #28]
 802c95a:	429a      	cmp	r2, r3
 802c95c:	d902      	bls.n	802c964 <PCD_WriteEmptyTxFifo+0x54>
 802c95e:	68fb      	ldr	r3, [r7, #12]
 802c960:	68db      	ldr	r3, [r3, #12]
 802c962:	61fb      	str	r3, [r7, #28]
 802c964:	69fb      	ldr	r3, [r7, #28]
 802c966:	3303      	adds	r3, #3
 802c968:	089b      	lsrs	r3, r3, #2
 802c96a:	61bb      	str	r3, [r7, #24]
 802c96c:	e02b      	b.n	802c9c6 <PCD_WriteEmptyTxFifo+0xb6>
 802c96e:	68fb      	ldr	r3, [r7, #12]
 802c970:	699a      	ldr	r2, [r3, #24]
 802c972:	68fb      	ldr	r3, [r7, #12]
 802c974:	6a1b      	ldr	r3, [r3, #32]
 802c976:	1ad3      	subs	r3, r2, r3
 802c978:	61fb      	str	r3, [r7, #28]
 802c97a:	68fb      	ldr	r3, [r7, #12]
 802c97c:	68db      	ldr	r3, [r3, #12]
 802c97e:	69fa      	ldr	r2, [r7, #28]
 802c980:	429a      	cmp	r2, r3
 802c982:	d902      	bls.n	802c98a <PCD_WriteEmptyTxFifo+0x7a>
 802c984:	68fb      	ldr	r3, [r7, #12]
 802c986:	68db      	ldr	r3, [r3, #12]
 802c988:	61fb      	str	r3, [r7, #28]
 802c98a:	69fb      	ldr	r3, [r7, #28]
 802c98c:	3303      	adds	r3, #3
 802c98e:	089b      	lsrs	r3, r3, #2
 802c990:	61bb      	str	r3, [r7, #24]
 802c992:	68fb      	ldr	r3, [r7, #12]
 802c994:	6919      	ldr	r1, [r3, #16]
 802c996:	683b      	ldr	r3, [r7, #0]
 802c998:	b2da      	uxtb	r2, r3
 802c99a:	69fb      	ldr	r3, [r7, #28]
 802c99c:	b298      	uxth	r0, r3
 802c99e:	687b      	ldr	r3, [r7, #4]
 802c9a0:	691b      	ldr	r3, [r3, #16]
 802c9a2:	b2db      	uxtb	r3, r3
 802c9a4:	9300      	str	r3, [sp, #0]
 802c9a6:	4603      	mov	r3, r0
 802c9a8:	6978      	ldr	r0, [r7, #20]
 802c9aa:	f006 f911 	bl	8032bd0 <USB_WritePacket>
 802c9ae:	68fb      	ldr	r3, [r7, #12]
 802c9b0:	691a      	ldr	r2, [r3, #16]
 802c9b2:	69fb      	ldr	r3, [r7, #28]
 802c9b4:	441a      	add	r2, r3
 802c9b6:	68fb      	ldr	r3, [r7, #12]
 802c9b8:	611a      	str	r2, [r3, #16]
 802c9ba:	68fb      	ldr	r3, [r7, #12]
 802c9bc:	6a1a      	ldr	r2, [r3, #32]
 802c9be:	69fb      	ldr	r3, [r7, #28]
 802c9c0:	441a      	add	r2, r3
 802c9c2:	68fb      	ldr	r3, [r7, #12]
 802c9c4:	621a      	str	r2, [r3, #32]
 802c9c6:	683b      	ldr	r3, [r7, #0]
 802c9c8:	015a      	lsls	r2, r3, #5
 802c9ca:	693b      	ldr	r3, [r7, #16]
 802c9cc:	4413      	add	r3, r2
 802c9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802c9d2:	699b      	ldr	r3, [r3, #24]
 802c9d4:	b29b      	uxth	r3, r3
 802c9d6:	69ba      	ldr	r2, [r7, #24]
 802c9d8:	429a      	cmp	r2, r3
 802c9da:	d809      	bhi.n	802c9f0 <PCD_WriteEmptyTxFifo+0xe0>
 802c9dc:	68fb      	ldr	r3, [r7, #12]
 802c9de:	6a1a      	ldr	r2, [r3, #32]
 802c9e0:	68fb      	ldr	r3, [r7, #12]
 802c9e2:	699b      	ldr	r3, [r3, #24]
 802c9e4:	429a      	cmp	r2, r3
 802c9e6:	d203      	bcs.n	802c9f0 <PCD_WriteEmptyTxFifo+0xe0>
 802c9e8:	68fb      	ldr	r3, [r7, #12]
 802c9ea:	699b      	ldr	r3, [r3, #24]
 802c9ec:	2b00      	cmp	r3, #0
 802c9ee:	d1be      	bne.n	802c96e <PCD_WriteEmptyTxFifo+0x5e>
 802c9f0:	68fb      	ldr	r3, [r7, #12]
 802c9f2:	699a      	ldr	r2, [r3, #24]
 802c9f4:	68fb      	ldr	r3, [r7, #12]
 802c9f6:	6a1b      	ldr	r3, [r3, #32]
 802c9f8:	429a      	cmp	r2, r3
 802c9fa:	d811      	bhi.n	802ca20 <PCD_WriteEmptyTxFifo+0x110>
 802c9fc:	683b      	ldr	r3, [r7, #0]
 802c9fe:	f003 030f 	and.w	r3, r3, #15
 802ca02:	2201      	movs	r2, #1
 802ca04:	fa02 f303 	lsl.w	r3, r2, r3
 802ca08:	60bb      	str	r3, [r7, #8]
 802ca0a:	693b      	ldr	r3, [r7, #16]
 802ca0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ca10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ca12:	68bb      	ldr	r3, [r7, #8]
 802ca14:	43db      	mvns	r3, r3
 802ca16:	6939      	ldr	r1, [r7, #16]
 802ca18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ca1c:	4013      	ands	r3, r2
 802ca1e:	634b      	str	r3, [r1, #52]	; 0x34
 802ca20:	2300      	movs	r3, #0
 802ca22:	4618      	mov	r0, r3
 802ca24:	3720      	adds	r7, #32
 802ca26:	46bd      	mov	sp, r7
 802ca28:	bd80      	pop	{r7, pc}
	...

0802ca2c <PCD_EP_OutXfrComplete_int>:
 802ca2c:	b580      	push	{r7, lr}
 802ca2e:	b088      	sub	sp, #32
 802ca30:	af00      	add	r7, sp, #0
 802ca32:	6078      	str	r0, [r7, #4]
 802ca34:	6039      	str	r1, [r7, #0]
 802ca36:	687b      	ldr	r3, [r7, #4]
 802ca38:	681b      	ldr	r3, [r3, #0]
 802ca3a:	61fb      	str	r3, [r7, #28]
 802ca3c:	69fb      	ldr	r3, [r7, #28]
 802ca3e:	61bb      	str	r3, [r7, #24]
 802ca40:	69fb      	ldr	r3, [r7, #28]
 802ca42:	333c      	adds	r3, #60	; 0x3c
 802ca44:	3304      	adds	r3, #4
 802ca46:	681b      	ldr	r3, [r3, #0]
 802ca48:	617b      	str	r3, [r7, #20]
 802ca4a:	683b      	ldr	r3, [r7, #0]
 802ca4c:	015a      	lsls	r2, r3, #5
 802ca4e:	69bb      	ldr	r3, [r7, #24]
 802ca50:	4413      	add	r3, r2
 802ca52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ca56:	689b      	ldr	r3, [r3, #8]
 802ca58:	613b      	str	r3, [r7, #16]
 802ca5a:	687b      	ldr	r3, [r7, #4]
 802ca5c:	691b      	ldr	r3, [r3, #16]
 802ca5e:	2b01      	cmp	r3, #1
 802ca60:	d17b      	bne.n	802cb5a <PCD_EP_OutXfrComplete_int+0x12e>
 802ca62:	693b      	ldr	r3, [r7, #16]
 802ca64:	f003 0308 	and.w	r3, r3, #8
 802ca68:	2b00      	cmp	r3, #0
 802ca6a:	d015      	beq.n	802ca98 <PCD_EP_OutXfrComplete_int+0x6c>
 802ca6c:	697b      	ldr	r3, [r7, #20]
 802ca6e:	4a61      	ldr	r2, [pc, #388]	; (802cbf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802ca70:	4293      	cmp	r3, r2
 802ca72:	f240 80b9 	bls.w	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802ca76:	693b      	ldr	r3, [r7, #16]
 802ca78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ca7c:	2b00      	cmp	r3, #0
 802ca7e:	f000 80b3 	beq.w	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802ca82:	683b      	ldr	r3, [r7, #0]
 802ca84:	015a      	lsls	r2, r3, #5
 802ca86:	69bb      	ldr	r3, [r7, #24]
 802ca88:	4413      	add	r3, r2
 802ca8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ca8e:	461a      	mov	r2, r3
 802ca90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ca94:	6093      	str	r3, [r2, #8]
 802ca96:	e0a7      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802ca98:	693b      	ldr	r3, [r7, #16]
 802ca9a:	f003 0320 	and.w	r3, r3, #32
 802ca9e:	2b00      	cmp	r3, #0
 802caa0:	d009      	beq.n	802cab6 <PCD_EP_OutXfrComplete_int+0x8a>
 802caa2:	683b      	ldr	r3, [r7, #0]
 802caa4:	015a      	lsls	r2, r3, #5
 802caa6:	69bb      	ldr	r3, [r7, #24]
 802caa8:	4413      	add	r3, r2
 802caaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802caae:	461a      	mov	r2, r3
 802cab0:	2320      	movs	r3, #32
 802cab2:	6093      	str	r3, [r2, #8]
 802cab4:	e098      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802cab6:	693b      	ldr	r3, [r7, #16]
 802cab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802cabc:	2b00      	cmp	r3, #0
 802cabe:	f040 8093 	bne.w	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802cac2:	697b      	ldr	r3, [r7, #20]
 802cac4:	4a4b      	ldr	r2, [pc, #300]	; (802cbf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802cac6:	4293      	cmp	r3, r2
 802cac8:	d90f      	bls.n	802caea <PCD_EP_OutXfrComplete_int+0xbe>
 802caca:	693b      	ldr	r3, [r7, #16]
 802cacc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cad0:	2b00      	cmp	r3, #0
 802cad2:	d00a      	beq.n	802caea <PCD_EP_OutXfrComplete_int+0xbe>
 802cad4:	683b      	ldr	r3, [r7, #0]
 802cad6:	015a      	lsls	r2, r3, #5
 802cad8:	69bb      	ldr	r3, [r7, #24]
 802cada:	4413      	add	r3, r2
 802cadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cae0:	461a      	mov	r2, r3
 802cae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802cae6:	6093      	str	r3, [r2, #8]
 802cae8:	e07e      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802caea:	683a      	ldr	r2, [r7, #0]
 802caec:	4613      	mov	r3, r2
 802caee:	00db      	lsls	r3, r3, #3
 802caf0:	4413      	add	r3, r2
 802caf2:	009b      	lsls	r3, r3, #2
 802caf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802caf8:	687a      	ldr	r2, [r7, #4]
 802cafa:	4413      	add	r3, r2
 802cafc:	3304      	adds	r3, #4
 802cafe:	60fb      	str	r3, [r7, #12]
 802cb00:	68fb      	ldr	r3, [r7, #12]
 802cb02:	69da      	ldr	r2, [r3, #28]
 802cb04:	683b      	ldr	r3, [r7, #0]
 802cb06:	0159      	lsls	r1, r3, #5
 802cb08:	69bb      	ldr	r3, [r7, #24]
 802cb0a:	440b      	add	r3, r1
 802cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cb10:	691b      	ldr	r3, [r3, #16]
 802cb12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802cb16:	1ad2      	subs	r2, r2, r3
 802cb18:	68fb      	ldr	r3, [r7, #12]
 802cb1a:	621a      	str	r2, [r3, #32]
 802cb1c:	683b      	ldr	r3, [r7, #0]
 802cb1e:	2b00      	cmp	r3, #0
 802cb20:	d114      	bne.n	802cb4c <PCD_EP_OutXfrComplete_int+0x120>
 802cb22:	68fb      	ldr	r3, [r7, #12]
 802cb24:	699b      	ldr	r3, [r3, #24]
 802cb26:	2b00      	cmp	r3, #0
 802cb28:	d109      	bne.n	802cb3e <PCD_EP_OutXfrComplete_int+0x112>
 802cb2a:	687b      	ldr	r3, [r7, #4]
 802cb2c:	6818      	ldr	r0, [r3, #0]
 802cb2e:	687b      	ldr	r3, [r7, #4]
 802cb30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802cb34:	461a      	mov	r2, r3
 802cb36:	2101      	movs	r1, #1
 802cb38:	f006 fae2 	bl	8033100 <USB_EP0_OutStart>
 802cb3c:	e006      	b.n	802cb4c <PCD_EP_OutXfrComplete_int+0x120>
 802cb3e:	68fb      	ldr	r3, [r7, #12]
 802cb40:	691a      	ldr	r2, [r3, #16]
 802cb42:	68fb      	ldr	r3, [r7, #12]
 802cb44:	6a1b      	ldr	r3, [r3, #32]
 802cb46:	441a      	add	r2, r3
 802cb48:	68fb      	ldr	r3, [r7, #12]
 802cb4a:	611a      	str	r2, [r3, #16]
 802cb4c:	683b      	ldr	r3, [r7, #0]
 802cb4e:	b2db      	uxtb	r3, r3
 802cb50:	4619      	mov	r1, r3
 802cb52:	6878      	ldr	r0, [r7, #4]
 802cb54:	f7ed f9a2 	bl	8019e9c <HAL_PCD_DataOutStageCallback>
 802cb58:	e046      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802cb5a:	697b      	ldr	r3, [r7, #20]
 802cb5c:	4a26      	ldr	r2, [pc, #152]	; (802cbf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 802cb5e:	4293      	cmp	r3, r2
 802cb60:	d124      	bne.n	802cbac <PCD_EP_OutXfrComplete_int+0x180>
 802cb62:	693b      	ldr	r3, [r7, #16]
 802cb64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cb68:	2b00      	cmp	r3, #0
 802cb6a:	d00a      	beq.n	802cb82 <PCD_EP_OutXfrComplete_int+0x156>
 802cb6c:	683b      	ldr	r3, [r7, #0]
 802cb6e:	015a      	lsls	r2, r3, #5
 802cb70:	69bb      	ldr	r3, [r7, #24]
 802cb72:	4413      	add	r3, r2
 802cb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cb78:	461a      	mov	r2, r3
 802cb7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802cb7e:	6093      	str	r3, [r2, #8]
 802cb80:	e032      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802cb82:	693b      	ldr	r3, [r7, #16]
 802cb84:	f003 0320 	and.w	r3, r3, #32
 802cb88:	2b00      	cmp	r3, #0
 802cb8a:	d008      	beq.n	802cb9e <PCD_EP_OutXfrComplete_int+0x172>
 802cb8c:	683b      	ldr	r3, [r7, #0]
 802cb8e:	015a      	lsls	r2, r3, #5
 802cb90:	69bb      	ldr	r3, [r7, #24]
 802cb92:	4413      	add	r3, r2
 802cb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cb98:	461a      	mov	r2, r3
 802cb9a:	2320      	movs	r3, #32
 802cb9c:	6093      	str	r3, [r2, #8]
 802cb9e:	683b      	ldr	r3, [r7, #0]
 802cba0:	b2db      	uxtb	r3, r3
 802cba2:	4619      	mov	r1, r3
 802cba4:	6878      	ldr	r0, [r7, #4]
 802cba6:	f7ed f979 	bl	8019e9c <HAL_PCD_DataOutStageCallback>
 802cbaa:	e01d      	b.n	802cbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
 802cbac:	683b      	ldr	r3, [r7, #0]
 802cbae:	2b00      	cmp	r3, #0
 802cbb0:	d114      	bne.n	802cbdc <PCD_EP_OutXfrComplete_int+0x1b0>
 802cbb2:	6879      	ldr	r1, [r7, #4]
 802cbb4:	683a      	ldr	r2, [r7, #0]
 802cbb6:	4613      	mov	r3, r2
 802cbb8:	00db      	lsls	r3, r3, #3
 802cbba:	4413      	add	r3, r2
 802cbbc:	009b      	lsls	r3, r3, #2
 802cbbe:	440b      	add	r3, r1
 802cbc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802cbc4:	681b      	ldr	r3, [r3, #0]
 802cbc6:	2b00      	cmp	r3, #0
 802cbc8:	d108      	bne.n	802cbdc <PCD_EP_OutXfrComplete_int+0x1b0>
 802cbca:	687b      	ldr	r3, [r7, #4]
 802cbcc:	6818      	ldr	r0, [r3, #0]
 802cbce:	687b      	ldr	r3, [r7, #4]
 802cbd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802cbd4:	461a      	mov	r2, r3
 802cbd6:	2100      	movs	r1, #0
 802cbd8:	f006 fa92 	bl	8033100 <USB_EP0_OutStart>
 802cbdc:	683b      	ldr	r3, [r7, #0]
 802cbde:	b2db      	uxtb	r3, r3
 802cbe0:	4619      	mov	r1, r3
 802cbe2:	6878      	ldr	r0, [r7, #4]
 802cbe4:	f7ed f95a 	bl	8019e9c <HAL_PCD_DataOutStageCallback>
 802cbe8:	2300      	movs	r3, #0
 802cbea:	4618      	mov	r0, r3
 802cbec:	3720      	adds	r7, #32
 802cbee:	46bd      	mov	sp, r7
 802cbf0:	bd80      	pop	{r7, pc}
 802cbf2:	bf00      	nop
 802cbf4:	4f54300a 	.word	0x4f54300a
 802cbf8:	4f54310a 	.word	0x4f54310a

0802cbfc <PCD_EP_OutSetupPacket_int>:
 802cbfc:	b580      	push	{r7, lr}
 802cbfe:	b086      	sub	sp, #24
 802cc00:	af00      	add	r7, sp, #0
 802cc02:	6078      	str	r0, [r7, #4]
 802cc04:	6039      	str	r1, [r7, #0]
 802cc06:	687b      	ldr	r3, [r7, #4]
 802cc08:	681b      	ldr	r3, [r3, #0]
 802cc0a:	617b      	str	r3, [r7, #20]
 802cc0c:	697b      	ldr	r3, [r7, #20]
 802cc0e:	613b      	str	r3, [r7, #16]
 802cc10:	697b      	ldr	r3, [r7, #20]
 802cc12:	333c      	adds	r3, #60	; 0x3c
 802cc14:	3304      	adds	r3, #4
 802cc16:	681b      	ldr	r3, [r3, #0]
 802cc18:	60fb      	str	r3, [r7, #12]
 802cc1a:	683b      	ldr	r3, [r7, #0]
 802cc1c:	015a      	lsls	r2, r3, #5
 802cc1e:	693b      	ldr	r3, [r7, #16]
 802cc20:	4413      	add	r3, r2
 802cc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc26:	689b      	ldr	r3, [r3, #8]
 802cc28:	60bb      	str	r3, [r7, #8]
 802cc2a:	68fb      	ldr	r3, [r7, #12]
 802cc2c:	4a15      	ldr	r2, [pc, #84]	; (802cc84 <PCD_EP_OutSetupPacket_int+0x88>)
 802cc2e:	4293      	cmp	r3, r2
 802cc30:	d90e      	bls.n	802cc50 <PCD_EP_OutSetupPacket_int+0x54>
 802cc32:	68bb      	ldr	r3, [r7, #8]
 802cc34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cc38:	2b00      	cmp	r3, #0
 802cc3a:	d009      	beq.n	802cc50 <PCD_EP_OutSetupPacket_int+0x54>
 802cc3c:	683b      	ldr	r3, [r7, #0]
 802cc3e:	015a      	lsls	r2, r3, #5
 802cc40:	693b      	ldr	r3, [r7, #16]
 802cc42:	4413      	add	r3, r2
 802cc44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc48:	461a      	mov	r2, r3
 802cc4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802cc4e:	6093      	str	r3, [r2, #8]
 802cc50:	6878      	ldr	r0, [r7, #4]
 802cc52:	f7ed f911 	bl	8019e78 <HAL_PCD_SetupStageCallback>
 802cc56:	68fb      	ldr	r3, [r7, #12]
 802cc58:	4a0a      	ldr	r2, [pc, #40]	; (802cc84 <PCD_EP_OutSetupPacket_int+0x88>)
 802cc5a:	4293      	cmp	r3, r2
 802cc5c:	d90c      	bls.n	802cc78 <PCD_EP_OutSetupPacket_int+0x7c>
 802cc5e:	687b      	ldr	r3, [r7, #4]
 802cc60:	691b      	ldr	r3, [r3, #16]
 802cc62:	2b01      	cmp	r3, #1
 802cc64:	d108      	bne.n	802cc78 <PCD_EP_OutSetupPacket_int+0x7c>
 802cc66:	687b      	ldr	r3, [r7, #4]
 802cc68:	6818      	ldr	r0, [r3, #0]
 802cc6a:	687b      	ldr	r3, [r7, #4]
 802cc6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802cc70:	461a      	mov	r2, r3
 802cc72:	2101      	movs	r1, #1
 802cc74:	f006 fa44 	bl	8033100 <USB_EP0_OutStart>
 802cc78:	2300      	movs	r3, #0
 802cc7a:	4618      	mov	r0, r3
 802cc7c:	3718      	adds	r7, #24
 802cc7e:	46bd      	mov	sp, r7
 802cc80:	bd80      	pop	{r7, pc}
 802cc82:	bf00      	nop
 802cc84:	4f54300a 	.word	0x4f54300a

0802cc88 <HAL_PCDEx_SetTxFiFo>:
 802cc88:	b480      	push	{r7}
 802cc8a:	b085      	sub	sp, #20
 802cc8c:	af00      	add	r7, sp, #0
 802cc8e:	6078      	str	r0, [r7, #4]
 802cc90:	460b      	mov	r3, r1
 802cc92:	70fb      	strb	r3, [r7, #3]
 802cc94:	4613      	mov	r3, r2
 802cc96:	803b      	strh	r3, [r7, #0]
 802cc98:	687b      	ldr	r3, [r7, #4]
 802cc9a:	681b      	ldr	r3, [r3, #0]
 802cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cc9e:	60bb      	str	r3, [r7, #8]
 802cca0:	78fb      	ldrb	r3, [r7, #3]
 802cca2:	2b00      	cmp	r3, #0
 802cca4:	d107      	bne.n	802ccb6 <HAL_PCDEx_SetTxFiFo+0x2e>
 802cca6:	883b      	ldrh	r3, [r7, #0]
 802cca8:	0419      	lsls	r1, r3, #16
 802ccaa:	687b      	ldr	r3, [r7, #4]
 802ccac:	681b      	ldr	r3, [r3, #0]
 802ccae:	68ba      	ldr	r2, [r7, #8]
 802ccb0:	430a      	orrs	r2, r1
 802ccb2:	629a      	str	r2, [r3, #40]	; 0x28
 802ccb4:	e028      	b.n	802cd08 <HAL_PCDEx_SetTxFiFo+0x80>
 802ccb6:	687b      	ldr	r3, [r7, #4]
 802ccb8:	681b      	ldr	r3, [r3, #0]
 802ccba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ccbc:	0c1b      	lsrs	r3, r3, #16
 802ccbe:	68ba      	ldr	r2, [r7, #8]
 802ccc0:	4413      	add	r3, r2
 802ccc2:	60bb      	str	r3, [r7, #8]
 802ccc4:	2300      	movs	r3, #0
 802ccc6:	73fb      	strb	r3, [r7, #15]
 802ccc8:	e00d      	b.n	802cce6 <HAL_PCDEx_SetTxFiFo+0x5e>
 802ccca:	687b      	ldr	r3, [r7, #4]
 802cccc:	681a      	ldr	r2, [r3, #0]
 802ccce:	7bfb      	ldrb	r3, [r7, #15]
 802ccd0:	3340      	adds	r3, #64	; 0x40
 802ccd2:	009b      	lsls	r3, r3, #2
 802ccd4:	4413      	add	r3, r2
 802ccd6:	685b      	ldr	r3, [r3, #4]
 802ccd8:	0c1b      	lsrs	r3, r3, #16
 802ccda:	68ba      	ldr	r2, [r7, #8]
 802ccdc:	4413      	add	r3, r2
 802ccde:	60bb      	str	r3, [r7, #8]
 802cce0:	7bfb      	ldrb	r3, [r7, #15]
 802cce2:	3301      	adds	r3, #1
 802cce4:	73fb      	strb	r3, [r7, #15]
 802cce6:	7bfa      	ldrb	r2, [r7, #15]
 802cce8:	78fb      	ldrb	r3, [r7, #3]
 802ccea:	3b01      	subs	r3, #1
 802ccec:	429a      	cmp	r2, r3
 802ccee:	d3ec      	bcc.n	802ccca <HAL_PCDEx_SetTxFiFo+0x42>
 802ccf0:	883b      	ldrh	r3, [r7, #0]
 802ccf2:	0418      	lsls	r0, r3, #16
 802ccf4:	687b      	ldr	r3, [r7, #4]
 802ccf6:	6819      	ldr	r1, [r3, #0]
 802ccf8:	78fb      	ldrb	r3, [r7, #3]
 802ccfa:	3b01      	subs	r3, #1
 802ccfc:	68ba      	ldr	r2, [r7, #8]
 802ccfe:	4302      	orrs	r2, r0
 802cd00:	3340      	adds	r3, #64	; 0x40
 802cd02:	009b      	lsls	r3, r3, #2
 802cd04:	440b      	add	r3, r1
 802cd06:	605a      	str	r2, [r3, #4]
 802cd08:	2300      	movs	r3, #0
 802cd0a:	4618      	mov	r0, r3
 802cd0c:	3714      	adds	r7, #20
 802cd0e:	46bd      	mov	sp, r7
 802cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd14:	4770      	bx	lr

0802cd16 <HAL_PCDEx_SetRxFiFo>:
 802cd16:	b480      	push	{r7}
 802cd18:	b083      	sub	sp, #12
 802cd1a:	af00      	add	r7, sp, #0
 802cd1c:	6078      	str	r0, [r7, #4]
 802cd1e:	460b      	mov	r3, r1
 802cd20:	807b      	strh	r3, [r7, #2]
 802cd22:	687b      	ldr	r3, [r7, #4]
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	887a      	ldrh	r2, [r7, #2]
 802cd28:	625a      	str	r2, [r3, #36]	; 0x24
 802cd2a:	2300      	movs	r3, #0
 802cd2c:	4618      	mov	r0, r3
 802cd2e:	370c      	adds	r7, #12
 802cd30:	46bd      	mov	sp, r7
 802cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd36:	4770      	bx	lr

0802cd38 <HAL_PCDEx_ActivateLPM>:
 802cd38:	b480      	push	{r7}
 802cd3a:	b085      	sub	sp, #20
 802cd3c:	af00      	add	r7, sp, #0
 802cd3e:	6078      	str	r0, [r7, #4]
 802cd40:	687b      	ldr	r3, [r7, #4]
 802cd42:	681b      	ldr	r3, [r3, #0]
 802cd44:	60fb      	str	r3, [r7, #12]
 802cd46:	687b      	ldr	r3, [r7, #4]
 802cd48:	2201      	movs	r2, #1
 802cd4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 802cd4e:	687b      	ldr	r3, [r7, #4]
 802cd50:	2200      	movs	r2, #0
 802cd52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 802cd56:	68fb      	ldr	r3, [r7, #12]
 802cd58:	699b      	ldr	r3, [r3, #24]
 802cd5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 802cd5e:	68fb      	ldr	r3, [r7, #12]
 802cd60:	619a      	str	r2, [r3, #24]
 802cd62:	68fb      	ldr	r3, [r7, #12]
 802cd64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802cd66:	4b05      	ldr	r3, [pc, #20]	; (802cd7c <HAL_PCDEx_ActivateLPM+0x44>)
 802cd68:	4313      	orrs	r3, r2
 802cd6a:	68fa      	ldr	r2, [r7, #12]
 802cd6c:	6553      	str	r3, [r2, #84]	; 0x54
 802cd6e:	2300      	movs	r3, #0
 802cd70:	4618      	mov	r0, r3
 802cd72:	3714      	adds	r7, #20
 802cd74:	46bd      	mov	sp, r7
 802cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd7a:	4770      	bx	lr
 802cd7c:	10000003 	.word	0x10000003

0802cd80 <HAL_PWR_EnableBkUpAccess>:
 802cd80:	b480      	push	{r7}
 802cd82:	af00      	add	r7, sp, #0
 802cd84:	4b05      	ldr	r3, [pc, #20]	; (802cd9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 802cd86:	681b      	ldr	r3, [r3, #0]
 802cd88:	4a04      	ldr	r2, [pc, #16]	; (802cd9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 802cd8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802cd8e:	6013      	str	r3, [r2, #0]
 802cd90:	bf00      	nop
 802cd92:	46bd      	mov	sp, r7
 802cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd98:	4770      	bx	lr
 802cd9a:	bf00      	nop
 802cd9c:	40007000 	.word	0x40007000

0802cda0 <HAL_PWREx_EnableOverDrive>:
 802cda0:	b580      	push	{r7, lr}
 802cda2:	b082      	sub	sp, #8
 802cda4:	af00      	add	r7, sp, #0
 802cda6:	2300      	movs	r3, #0
 802cda8:	607b      	str	r3, [r7, #4]
 802cdaa:	4b23      	ldr	r3, [pc, #140]	; (802ce38 <HAL_PWREx_EnableOverDrive+0x98>)
 802cdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cdae:	4a22      	ldr	r2, [pc, #136]	; (802ce38 <HAL_PWREx_EnableOverDrive+0x98>)
 802cdb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cdb4:	6413      	str	r3, [r2, #64]	; 0x40
 802cdb6:	4b20      	ldr	r3, [pc, #128]	; (802ce38 <HAL_PWREx_EnableOverDrive+0x98>)
 802cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cdba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802cdbe:	603b      	str	r3, [r7, #0]
 802cdc0:	683b      	ldr	r3, [r7, #0]
 802cdc2:	4b1e      	ldr	r3, [pc, #120]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802cdc4:	681b      	ldr	r3, [r3, #0]
 802cdc6:	4a1d      	ldr	r2, [pc, #116]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802cdc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802cdcc:	6013      	str	r3, [r2, #0]
 802cdce:	f7fc f879 	bl	8028ec4 <HAL_GetTick>
 802cdd2:	6078      	str	r0, [r7, #4]
 802cdd4:	e009      	b.n	802cdea <HAL_PWREx_EnableOverDrive+0x4a>
 802cdd6:	f7fc f875 	bl	8028ec4 <HAL_GetTick>
 802cdda:	4602      	mov	r2, r0
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	1ad3      	subs	r3, r2, r3
 802cde0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802cde4:	d901      	bls.n	802cdea <HAL_PWREx_EnableOverDrive+0x4a>
 802cde6:	2303      	movs	r3, #3
 802cde8:	e022      	b.n	802ce30 <HAL_PWREx_EnableOverDrive+0x90>
 802cdea:	4b14      	ldr	r3, [pc, #80]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802cdec:	685b      	ldr	r3, [r3, #4]
 802cdee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802cdf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802cdf6:	d1ee      	bne.n	802cdd6 <HAL_PWREx_EnableOverDrive+0x36>
 802cdf8:	4b10      	ldr	r3, [pc, #64]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802cdfa:	681b      	ldr	r3, [r3, #0]
 802cdfc:	4a0f      	ldr	r2, [pc, #60]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802cdfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802ce02:	6013      	str	r3, [r2, #0]
 802ce04:	f7fc f85e 	bl	8028ec4 <HAL_GetTick>
 802ce08:	6078      	str	r0, [r7, #4]
 802ce0a:	e009      	b.n	802ce20 <HAL_PWREx_EnableOverDrive+0x80>
 802ce0c:	f7fc f85a 	bl	8028ec4 <HAL_GetTick>
 802ce10:	4602      	mov	r2, r0
 802ce12:	687b      	ldr	r3, [r7, #4]
 802ce14:	1ad3      	subs	r3, r2, r3
 802ce16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ce1a:	d901      	bls.n	802ce20 <HAL_PWREx_EnableOverDrive+0x80>
 802ce1c:	2303      	movs	r3, #3
 802ce1e:	e007      	b.n	802ce30 <HAL_PWREx_EnableOverDrive+0x90>
 802ce20:	4b06      	ldr	r3, [pc, #24]	; (802ce3c <HAL_PWREx_EnableOverDrive+0x9c>)
 802ce22:	685b      	ldr	r3, [r3, #4]
 802ce24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ce28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ce2c:	d1ee      	bne.n	802ce0c <HAL_PWREx_EnableOverDrive+0x6c>
 802ce2e:	2300      	movs	r3, #0
 802ce30:	4618      	mov	r0, r3
 802ce32:	3708      	adds	r7, #8
 802ce34:	46bd      	mov	sp, r7
 802ce36:	bd80      	pop	{r7, pc}
 802ce38:	40023800 	.word	0x40023800
 802ce3c:	40007000 	.word	0x40007000

0802ce40 <HAL_RCC_OscConfig>:
 802ce40:	b580      	push	{r7, lr}
 802ce42:	b086      	sub	sp, #24
 802ce44:	af00      	add	r7, sp, #0
 802ce46:	6078      	str	r0, [r7, #4]
 802ce48:	2300      	movs	r3, #0
 802ce4a:	75fb      	strb	r3, [r7, #23]
 802ce4c:	687b      	ldr	r3, [r7, #4]
 802ce4e:	2b00      	cmp	r3, #0
 802ce50:	d101      	bne.n	802ce56 <HAL_RCC_OscConfig+0x16>
 802ce52:	2301      	movs	r3, #1
 802ce54:	e25e      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802ce56:	687b      	ldr	r3, [r7, #4]
 802ce58:	681b      	ldr	r3, [r3, #0]
 802ce5a:	f003 0301 	and.w	r3, r3, #1
 802ce5e:	2b00      	cmp	r3, #0
 802ce60:	f000 8087 	beq.w	802cf72 <HAL_RCC_OscConfig+0x132>
 802ce64:	4b96      	ldr	r3, [pc, #600]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ce66:	689b      	ldr	r3, [r3, #8]
 802ce68:	f003 030c 	and.w	r3, r3, #12
 802ce6c:	2b04      	cmp	r3, #4
 802ce6e:	d00c      	beq.n	802ce8a <HAL_RCC_OscConfig+0x4a>
 802ce70:	4b93      	ldr	r3, [pc, #588]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ce72:	689b      	ldr	r3, [r3, #8]
 802ce74:	f003 030c 	and.w	r3, r3, #12
 802ce78:	2b08      	cmp	r3, #8
 802ce7a:	d112      	bne.n	802cea2 <HAL_RCC_OscConfig+0x62>
 802ce7c:	4b90      	ldr	r3, [pc, #576]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ce7e:	685b      	ldr	r3, [r3, #4]
 802ce80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ce84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802ce88:	d10b      	bne.n	802cea2 <HAL_RCC_OscConfig+0x62>
 802ce8a:	4b8d      	ldr	r3, [pc, #564]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ce8c:	681b      	ldr	r3, [r3, #0]
 802ce8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ce92:	2b00      	cmp	r3, #0
 802ce94:	d06c      	beq.n	802cf70 <HAL_RCC_OscConfig+0x130>
 802ce96:	687b      	ldr	r3, [r7, #4]
 802ce98:	685b      	ldr	r3, [r3, #4]
 802ce9a:	2b00      	cmp	r3, #0
 802ce9c:	d168      	bne.n	802cf70 <HAL_RCC_OscConfig+0x130>
 802ce9e:	2301      	movs	r3, #1
 802cea0:	e238      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	685b      	ldr	r3, [r3, #4]
 802cea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ceaa:	d106      	bne.n	802ceba <HAL_RCC_OscConfig+0x7a>
 802ceac:	4b84      	ldr	r3, [pc, #528]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ceae:	681b      	ldr	r3, [r3, #0]
 802ceb0:	4a83      	ldr	r2, [pc, #524]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ceb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802ceb6:	6013      	str	r3, [r2, #0]
 802ceb8:	e02e      	b.n	802cf18 <HAL_RCC_OscConfig+0xd8>
 802ceba:	687b      	ldr	r3, [r7, #4]
 802cebc:	685b      	ldr	r3, [r3, #4]
 802cebe:	2b00      	cmp	r3, #0
 802cec0:	d10c      	bne.n	802cedc <HAL_RCC_OscConfig+0x9c>
 802cec2:	4b7f      	ldr	r3, [pc, #508]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cec4:	681b      	ldr	r3, [r3, #0]
 802cec6:	4a7e      	ldr	r2, [pc, #504]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cecc:	6013      	str	r3, [r2, #0]
 802cece:	4b7c      	ldr	r3, [pc, #496]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ced0:	681b      	ldr	r3, [r3, #0]
 802ced2:	4a7b      	ldr	r2, [pc, #492]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ced4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802ced8:	6013      	str	r3, [r2, #0]
 802ceda:	e01d      	b.n	802cf18 <HAL_RCC_OscConfig+0xd8>
 802cedc:	687b      	ldr	r3, [r7, #4]
 802cede:	685b      	ldr	r3, [r3, #4]
 802cee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802cee4:	d10c      	bne.n	802cf00 <HAL_RCC_OscConfig+0xc0>
 802cee6:	4b76      	ldr	r3, [pc, #472]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cee8:	681b      	ldr	r3, [r3, #0]
 802ceea:	4a75      	ldr	r2, [pc, #468]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802ceec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802cef0:	6013      	str	r3, [r2, #0]
 802cef2:	4b73      	ldr	r3, [pc, #460]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cef4:	681b      	ldr	r3, [r3, #0]
 802cef6:	4a72      	ldr	r2, [pc, #456]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802cefc:	6013      	str	r3, [r2, #0]
 802cefe:	e00b      	b.n	802cf18 <HAL_RCC_OscConfig+0xd8>
 802cf00:	4b6f      	ldr	r3, [pc, #444]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf02:	681b      	ldr	r3, [r3, #0]
 802cf04:	4a6e      	ldr	r2, [pc, #440]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cf0a:	6013      	str	r3, [r2, #0]
 802cf0c:	4b6c      	ldr	r3, [pc, #432]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf0e:	681b      	ldr	r3, [r3, #0]
 802cf10:	4a6b      	ldr	r2, [pc, #428]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802cf16:	6013      	str	r3, [r2, #0]
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	685b      	ldr	r3, [r3, #4]
 802cf1c:	2b00      	cmp	r3, #0
 802cf1e:	d013      	beq.n	802cf48 <HAL_RCC_OscConfig+0x108>
 802cf20:	f7fb ffd0 	bl	8028ec4 <HAL_GetTick>
 802cf24:	6138      	str	r0, [r7, #16]
 802cf26:	e008      	b.n	802cf3a <HAL_RCC_OscConfig+0xfa>
 802cf28:	f7fb ffcc 	bl	8028ec4 <HAL_GetTick>
 802cf2c:	4602      	mov	r2, r0
 802cf2e:	693b      	ldr	r3, [r7, #16]
 802cf30:	1ad3      	subs	r3, r2, r3
 802cf32:	2b64      	cmp	r3, #100	; 0x64
 802cf34:	d901      	bls.n	802cf3a <HAL_RCC_OscConfig+0xfa>
 802cf36:	2303      	movs	r3, #3
 802cf38:	e1ec      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802cf3a:	4b61      	ldr	r3, [pc, #388]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf3c:	681b      	ldr	r3, [r3, #0]
 802cf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802cf42:	2b00      	cmp	r3, #0
 802cf44:	d0f0      	beq.n	802cf28 <HAL_RCC_OscConfig+0xe8>
 802cf46:	e014      	b.n	802cf72 <HAL_RCC_OscConfig+0x132>
 802cf48:	f7fb ffbc 	bl	8028ec4 <HAL_GetTick>
 802cf4c:	6138      	str	r0, [r7, #16]
 802cf4e:	e008      	b.n	802cf62 <HAL_RCC_OscConfig+0x122>
 802cf50:	f7fb ffb8 	bl	8028ec4 <HAL_GetTick>
 802cf54:	4602      	mov	r2, r0
 802cf56:	693b      	ldr	r3, [r7, #16]
 802cf58:	1ad3      	subs	r3, r2, r3
 802cf5a:	2b64      	cmp	r3, #100	; 0x64
 802cf5c:	d901      	bls.n	802cf62 <HAL_RCC_OscConfig+0x122>
 802cf5e:	2303      	movs	r3, #3
 802cf60:	e1d8      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802cf62:	4b57      	ldr	r3, [pc, #348]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf64:	681b      	ldr	r3, [r3, #0]
 802cf66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802cf6a:	2b00      	cmp	r3, #0
 802cf6c:	d1f0      	bne.n	802cf50 <HAL_RCC_OscConfig+0x110>
 802cf6e:	e000      	b.n	802cf72 <HAL_RCC_OscConfig+0x132>
 802cf70:	bf00      	nop
 802cf72:	687b      	ldr	r3, [r7, #4]
 802cf74:	681b      	ldr	r3, [r3, #0]
 802cf76:	f003 0302 	and.w	r3, r3, #2
 802cf7a:	2b00      	cmp	r3, #0
 802cf7c:	d069      	beq.n	802d052 <HAL_RCC_OscConfig+0x212>
 802cf7e:	4b50      	ldr	r3, [pc, #320]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf80:	689b      	ldr	r3, [r3, #8]
 802cf82:	f003 030c 	and.w	r3, r3, #12
 802cf86:	2b00      	cmp	r3, #0
 802cf88:	d00b      	beq.n	802cfa2 <HAL_RCC_OscConfig+0x162>
 802cf8a:	4b4d      	ldr	r3, [pc, #308]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf8c:	689b      	ldr	r3, [r3, #8]
 802cf8e:	f003 030c 	and.w	r3, r3, #12
 802cf92:	2b08      	cmp	r3, #8
 802cf94:	d11c      	bne.n	802cfd0 <HAL_RCC_OscConfig+0x190>
 802cf96:	4b4a      	ldr	r3, [pc, #296]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cf98:	685b      	ldr	r3, [r3, #4]
 802cf9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802cf9e:	2b00      	cmp	r3, #0
 802cfa0:	d116      	bne.n	802cfd0 <HAL_RCC_OscConfig+0x190>
 802cfa2:	4b47      	ldr	r3, [pc, #284]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cfa4:	681b      	ldr	r3, [r3, #0]
 802cfa6:	f003 0302 	and.w	r3, r3, #2
 802cfaa:	2b00      	cmp	r3, #0
 802cfac:	d005      	beq.n	802cfba <HAL_RCC_OscConfig+0x17a>
 802cfae:	687b      	ldr	r3, [r7, #4]
 802cfb0:	68db      	ldr	r3, [r3, #12]
 802cfb2:	2b01      	cmp	r3, #1
 802cfb4:	d001      	beq.n	802cfba <HAL_RCC_OscConfig+0x17a>
 802cfb6:	2301      	movs	r3, #1
 802cfb8:	e1ac      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802cfba:	4b41      	ldr	r3, [pc, #260]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cfbc:	681b      	ldr	r3, [r3, #0]
 802cfbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802cfc2:	687b      	ldr	r3, [r7, #4]
 802cfc4:	691b      	ldr	r3, [r3, #16]
 802cfc6:	00db      	lsls	r3, r3, #3
 802cfc8:	493d      	ldr	r1, [pc, #244]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cfca:	4313      	orrs	r3, r2
 802cfcc:	600b      	str	r3, [r1, #0]
 802cfce:	e040      	b.n	802d052 <HAL_RCC_OscConfig+0x212>
 802cfd0:	687b      	ldr	r3, [r7, #4]
 802cfd2:	68db      	ldr	r3, [r3, #12]
 802cfd4:	2b00      	cmp	r3, #0
 802cfd6:	d023      	beq.n	802d020 <HAL_RCC_OscConfig+0x1e0>
 802cfd8:	4b39      	ldr	r3, [pc, #228]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cfda:	681b      	ldr	r3, [r3, #0]
 802cfdc:	4a38      	ldr	r2, [pc, #224]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802cfde:	f043 0301 	orr.w	r3, r3, #1
 802cfe2:	6013      	str	r3, [r2, #0]
 802cfe4:	f7fb ff6e 	bl	8028ec4 <HAL_GetTick>
 802cfe8:	6138      	str	r0, [r7, #16]
 802cfea:	e008      	b.n	802cffe <HAL_RCC_OscConfig+0x1be>
 802cfec:	f7fb ff6a 	bl	8028ec4 <HAL_GetTick>
 802cff0:	4602      	mov	r2, r0
 802cff2:	693b      	ldr	r3, [r7, #16]
 802cff4:	1ad3      	subs	r3, r2, r3
 802cff6:	2b02      	cmp	r3, #2
 802cff8:	d901      	bls.n	802cffe <HAL_RCC_OscConfig+0x1be>
 802cffa:	2303      	movs	r3, #3
 802cffc:	e18a      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802cffe:	4b30      	ldr	r3, [pc, #192]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d000:	681b      	ldr	r3, [r3, #0]
 802d002:	f003 0302 	and.w	r3, r3, #2
 802d006:	2b00      	cmp	r3, #0
 802d008:	d0f0      	beq.n	802cfec <HAL_RCC_OscConfig+0x1ac>
 802d00a:	4b2d      	ldr	r3, [pc, #180]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d00c:	681b      	ldr	r3, [r3, #0]
 802d00e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802d012:	687b      	ldr	r3, [r7, #4]
 802d014:	691b      	ldr	r3, [r3, #16]
 802d016:	00db      	lsls	r3, r3, #3
 802d018:	4929      	ldr	r1, [pc, #164]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d01a:	4313      	orrs	r3, r2
 802d01c:	600b      	str	r3, [r1, #0]
 802d01e:	e018      	b.n	802d052 <HAL_RCC_OscConfig+0x212>
 802d020:	4b27      	ldr	r3, [pc, #156]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d022:	681b      	ldr	r3, [r3, #0]
 802d024:	4a26      	ldr	r2, [pc, #152]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d026:	f023 0301 	bic.w	r3, r3, #1
 802d02a:	6013      	str	r3, [r2, #0]
 802d02c:	f7fb ff4a 	bl	8028ec4 <HAL_GetTick>
 802d030:	6138      	str	r0, [r7, #16]
 802d032:	e008      	b.n	802d046 <HAL_RCC_OscConfig+0x206>
 802d034:	f7fb ff46 	bl	8028ec4 <HAL_GetTick>
 802d038:	4602      	mov	r2, r0
 802d03a:	693b      	ldr	r3, [r7, #16]
 802d03c:	1ad3      	subs	r3, r2, r3
 802d03e:	2b02      	cmp	r3, #2
 802d040:	d901      	bls.n	802d046 <HAL_RCC_OscConfig+0x206>
 802d042:	2303      	movs	r3, #3
 802d044:	e166      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d046:	4b1e      	ldr	r3, [pc, #120]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d048:	681b      	ldr	r3, [r3, #0]
 802d04a:	f003 0302 	and.w	r3, r3, #2
 802d04e:	2b00      	cmp	r3, #0
 802d050:	d1f0      	bne.n	802d034 <HAL_RCC_OscConfig+0x1f4>
 802d052:	687b      	ldr	r3, [r7, #4]
 802d054:	681b      	ldr	r3, [r3, #0]
 802d056:	f003 0308 	and.w	r3, r3, #8
 802d05a:	2b00      	cmp	r3, #0
 802d05c:	d038      	beq.n	802d0d0 <HAL_RCC_OscConfig+0x290>
 802d05e:	687b      	ldr	r3, [r7, #4]
 802d060:	695b      	ldr	r3, [r3, #20]
 802d062:	2b00      	cmp	r3, #0
 802d064:	d019      	beq.n	802d09a <HAL_RCC_OscConfig+0x25a>
 802d066:	4b16      	ldr	r3, [pc, #88]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d06a:	4a15      	ldr	r2, [pc, #84]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d06c:	f043 0301 	orr.w	r3, r3, #1
 802d070:	6753      	str	r3, [r2, #116]	; 0x74
 802d072:	f7fb ff27 	bl	8028ec4 <HAL_GetTick>
 802d076:	6138      	str	r0, [r7, #16]
 802d078:	e008      	b.n	802d08c <HAL_RCC_OscConfig+0x24c>
 802d07a:	f7fb ff23 	bl	8028ec4 <HAL_GetTick>
 802d07e:	4602      	mov	r2, r0
 802d080:	693b      	ldr	r3, [r7, #16]
 802d082:	1ad3      	subs	r3, r2, r3
 802d084:	2b02      	cmp	r3, #2
 802d086:	d901      	bls.n	802d08c <HAL_RCC_OscConfig+0x24c>
 802d088:	2303      	movs	r3, #3
 802d08a:	e143      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d08c:	4b0c      	ldr	r3, [pc, #48]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d08e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d090:	f003 0302 	and.w	r3, r3, #2
 802d094:	2b00      	cmp	r3, #0
 802d096:	d0f0      	beq.n	802d07a <HAL_RCC_OscConfig+0x23a>
 802d098:	e01a      	b.n	802d0d0 <HAL_RCC_OscConfig+0x290>
 802d09a:	4b09      	ldr	r3, [pc, #36]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d09e:	4a08      	ldr	r2, [pc, #32]	; (802d0c0 <HAL_RCC_OscConfig+0x280>)
 802d0a0:	f023 0301 	bic.w	r3, r3, #1
 802d0a4:	6753      	str	r3, [r2, #116]	; 0x74
 802d0a6:	f7fb ff0d 	bl	8028ec4 <HAL_GetTick>
 802d0aa:	6138      	str	r0, [r7, #16]
 802d0ac:	e00a      	b.n	802d0c4 <HAL_RCC_OscConfig+0x284>
 802d0ae:	f7fb ff09 	bl	8028ec4 <HAL_GetTick>
 802d0b2:	4602      	mov	r2, r0
 802d0b4:	693b      	ldr	r3, [r7, #16]
 802d0b6:	1ad3      	subs	r3, r2, r3
 802d0b8:	2b02      	cmp	r3, #2
 802d0ba:	d903      	bls.n	802d0c4 <HAL_RCC_OscConfig+0x284>
 802d0bc:	2303      	movs	r3, #3
 802d0be:	e129      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d0c0:	40023800 	.word	0x40023800
 802d0c4:	4b95      	ldr	r3, [pc, #596]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d0c8:	f003 0302 	and.w	r3, r3, #2
 802d0cc:	2b00      	cmp	r3, #0
 802d0ce:	d1ee      	bne.n	802d0ae <HAL_RCC_OscConfig+0x26e>
 802d0d0:	687b      	ldr	r3, [r7, #4]
 802d0d2:	681b      	ldr	r3, [r3, #0]
 802d0d4:	f003 0304 	and.w	r3, r3, #4
 802d0d8:	2b00      	cmp	r3, #0
 802d0da:	f000 80a4 	beq.w	802d226 <HAL_RCC_OscConfig+0x3e6>
 802d0de:	4b8f      	ldr	r3, [pc, #572]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802d0e6:	2b00      	cmp	r3, #0
 802d0e8:	d10d      	bne.n	802d106 <HAL_RCC_OscConfig+0x2c6>
 802d0ea:	4b8c      	ldr	r3, [pc, #560]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d0ee:	4a8b      	ldr	r2, [pc, #556]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d0f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d0f4:	6413      	str	r3, [r2, #64]	; 0x40
 802d0f6:	4b89      	ldr	r3, [pc, #548]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802d0fe:	60fb      	str	r3, [r7, #12]
 802d100:	68fb      	ldr	r3, [r7, #12]
 802d102:	2301      	movs	r3, #1
 802d104:	75fb      	strb	r3, [r7, #23]
 802d106:	4b86      	ldr	r3, [pc, #536]	; (802d320 <HAL_RCC_OscConfig+0x4e0>)
 802d108:	681b      	ldr	r3, [r3, #0]
 802d10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d10e:	2b00      	cmp	r3, #0
 802d110:	d118      	bne.n	802d144 <HAL_RCC_OscConfig+0x304>
 802d112:	4b83      	ldr	r3, [pc, #524]	; (802d320 <HAL_RCC_OscConfig+0x4e0>)
 802d114:	681b      	ldr	r3, [r3, #0]
 802d116:	4a82      	ldr	r2, [pc, #520]	; (802d320 <HAL_RCC_OscConfig+0x4e0>)
 802d118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d11c:	6013      	str	r3, [r2, #0]
 802d11e:	f7fb fed1 	bl	8028ec4 <HAL_GetTick>
 802d122:	6138      	str	r0, [r7, #16]
 802d124:	e008      	b.n	802d138 <HAL_RCC_OscConfig+0x2f8>
 802d126:	f7fb fecd 	bl	8028ec4 <HAL_GetTick>
 802d12a:	4602      	mov	r2, r0
 802d12c:	693b      	ldr	r3, [r7, #16]
 802d12e:	1ad3      	subs	r3, r2, r3
 802d130:	2b64      	cmp	r3, #100	; 0x64
 802d132:	d901      	bls.n	802d138 <HAL_RCC_OscConfig+0x2f8>
 802d134:	2303      	movs	r3, #3
 802d136:	e0ed      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d138:	4b79      	ldr	r3, [pc, #484]	; (802d320 <HAL_RCC_OscConfig+0x4e0>)
 802d13a:	681b      	ldr	r3, [r3, #0]
 802d13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d140:	2b00      	cmp	r3, #0
 802d142:	d0f0      	beq.n	802d126 <HAL_RCC_OscConfig+0x2e6>
 802d144:	687b      	ldr	r3, [r7, #4]
 802d146:	689b      	ldr	r3, [r3, #8]
 802d148:	2b01      	cmp	r3, #1
 802d14a:	d106      	bne.n	802d15a <HAL_RCC_OscConfig+0x31a>
 802d14c:	4b73      	ldr	r3, [pc, #460]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d150:	4a72      	ldr	r2, [pc, #456]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d152:	f043 0301 	orr.w	r3, r3, #1
 802d156:	6713      	str	r3, [r2, #112]	; 0x70
 802d158:	e02d      	b.n	802d1b6 <HAL_RCC_OscConfig+0x376>
 802d15a:	687b      	ldr	r3, [r7, #4]
 802d15c:	689b      	ldr	r3, [r3, #8]
 802d15e:	2b00      	cmp	r3, #0
 802d160:	d10c      	bne.n	802d17c <HAL_RCC_OscConfig+0x33c>
 802d162:	4b6e      	ldr	r3, [pc, #440]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d166:	4a6d      	ldr	r2, [pc, #436]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d168:	f023 0301 	bic.w	r3, r3, #1
 802d16c:	6713      	str	r3, [r2, #112]	; 0x70
 802d16e:	4b6b      	ldr	r3, [pc, #428]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d172:	4a6a      	ldr	r2, [pc, #424]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d174:	f023 0304 	bic.w	r3, r3, #4
 802d178:	6713      	str	r3, [r2, #112]	; 0x70
 802d17a:	e01c      	b.n	802d1b6 <HAL_RCC_OscConfig+0x376>
 802d17c:	687b      	ldr	r3, [r7, #4]
 802d17e:	689b      	ldr	r3, [r3, #8]
 802d180:	2b05      	cmp	r3, #5
 802d182:	d10c      	bne.n	802d19e <HAL_RCC_OscConfig+0x35e>
 802d184:	4b65      	ldr	r3, [pc, #404]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d188:	4a64      	ldr	r2, [pc, #400]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d18a:	f043 0304 	orr.w	r3, r3, #4
 802d18e:	6713      	str	r3, [r2, #112]	; 0x70
 802d190:	4b62      	ldr	r3, [pc, #392]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d194:	4a61      	ldr	r2, [pc, #388]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d196:	f043 0301 	orr.w	r3, r3, #1
 802d19a:	6713      	str	r3, [r2, #112]	; 0x70
 802d19c:	e00b      	b.n	802d1b6 <HAL_RCC_OscConfig+0x376>
 802d19e:	4b5f      	ldr	r3, [pc, #380]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d1a2:	4a5e      	ldr	r2, [pc, #376]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d1a4:	f023 0301 	bic.w	r3, r3, #1
 802d1a8:	6713      	str	r3, [r2, #112]	; 0x70
 802d1aa:	4b5c      	ldr	r3, [pc, #368]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d1ae:	4a5b      	ldr	r2, [pc, #364]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d1b0:	f023 0304 	bic.w	r3, r3, #4
 802d1b4:	6713      	str	r3, [r2, #112]	; 0x70
 802d1b6:	687b      	ldr	r3, [r7, #4]
 802d1b8:	689b      	ldr	r3, [r3, #8]
 802d1ba:	2b00      	cmp	r3, #0
 802d1bc:	d015      	beq.n	802d1ea <HAL_RCC_OscConfig+0x3aa>
 802d1be:	f7fb fe81 	bl	8028ec4 <HAL_GetTick>
 802d1c2:	6138      	str	r0, [r7, #16]
 802d1c4:	e00a      	b.n	802d1dc <HAL_RCC_OscConfig+0x39c>
 802d1c6:	f7fb fe7d 	bl	8028ec4 <HAL_GetTick>
 802d1ca:	4602      	mov	r2, r0
 802d1cc:	693b      	ldr	r3, [r7, #16]
 802d1ce:	1ad3      	subs	r3, r2, r3
 802d1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 802d1d4:	4293      	cmp	r3, r2
 802d1d6:	d901      	bls.n	802d1dc <HAL_RCC_OscConfig+0x39c>
 802d1d8:	2303      	movs	r3, #3
 802d1da:	e09b      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d1dc:	4b4f      	ldr	r3, [pc, #316]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d1e0:	f003 0302 	and.w	r3, r3, #2
 802d1e4:	2b00      	cmp	r3, #0
 802d1e6:	d0ee      	beq.n	802d1c6 <HAL_RCC_OscConfig+0x386>
 802d1e8:	e014      	b.n	802d214 <HAL_RCC_OscConfig+0x3d4>
 802d1ea:	f7fb fe6b 	bl	8028ec4 <HAL_GetTick>
 802d1ee:	6138      	str	r0, [r7, #16]
 802d1f0:	e00a      	b.n	802d208 <HAL_RCC_OscConfig+0x3c8>
 802d1f2:	f7fb fe67 	bl	8028ec4 <HAL_GetTick>
 802d1f6:	4602      	mov	r2, r0
 802d1f8:	693b      	ldr	r3, [r7, #16]
 802d1fa:	1ad3      	subs	r3, r2, r3
 802d1fc:	f241 3288 	movw	r2, #5000	; 0x1388
 802d200:	4293      	cmp	r3, r2
 802d202:	d901      	bls.n	802d208 <HAL_RCC_OscConfig+0x3c8>
 802d204:	2303      	movs	r3, #3
 802d206:	e085      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d208:	4b44      	ldr	r3, [pc, #272]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d20c:	f003 0302 	and.w	r3, r3, #2
 802d210:	2b00      	cmp	r3, #0
 802d212:	d1ee      	bne.n	802d1f2 <HAL_RCC_OscConfig+0x3b2>
 802d214:	7dfb      	ldrb	r3, [r7, #23]
 802d216:	2b01      	cmp	r3, #1
 802d218:	d105      	bne.n	802d226 <HAL_RCC_OscConfig+0x3e6>
 802d21a:	4b40      	ldr	r3, [pc, #256]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d21e:	4a3f      	ldr	r2, [pc, #252]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802d224:	6413      	str	r3, [r2, #64]	; 0x40
 802d226:	687b      	ldr	r3, [r7, #4]
 802d228:	699b      	ldr	r3, [r3, #24]
 802d22a:	2b00      	cmp	r3, #0
 802d22c:	d071      	beq.n	802d312 <HAL_RCC_OscConfig+0x4d2>
 802d22e:	4b3b      	ldr	r3, [pc, #236]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d230:	689b      	ldr	r3, [r3, #8]
 802d232:	f003 030c 	and.w	r3, r3, #12
 802d236:	2b08      	cmp	r3, #8
 802d238:	d069      	beq.n	802d30e <HAL_RCC_OscConfig+0x4ce>
 802d23a:	687b      	ldr	r3, [r7, #4]
 802d23c:	699b      	ldr	r3, [r3, #24]
 802d23e:	2b02      	cmp	r3, #2
 802d240:	d14b      	bne.n	802d2da <HAL_RCC_OscConfig+0x49a>
 802d242:	4b36      	ldr	r3, [pc, #216]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d244:	681b      	ldr	r3, [r3, #0]
 802d246:	4a35      	ldr	r2, [pc, #212]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802d24c:	6013      	str	r3, [r2, #0]
 802d24e:	f7fb fe39 	bl	8028ec4 <HAL_GetTick>
 802d252:	6138      	str	r0, [r7, #16]
 802d254:	e008      	b.n	802d268 <HAL_RCC_OscConfig+0x428>
 802d256:	f7fb fe35 	bl	8028ec4 <HAL_GetTick>
 802d25a:	4602      	mov	r2, r0
 802d25c:	693b      	ldr	r3, [r7, #16]
 802d25e:	1ad3      	subs	r3, r2, r3
 802d260:	2b02      	cmp	r3, #2
 802d262:	d901      	bls.n	802d268 <HAL_RCC_OscConfig+0x428>
 802d264:	2303      	movs	r3, #3
 802d266:	e055      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d268:	4b2c      	ldr	r3, [pc, #176]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d26a:	681b      	ldr	r3, [r3, #0]
 802d26c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802d270:	2b00      	cmp	r3, #0
 802d272:	d1f0      	bne.n	802d256 <HAL_RCC_OscConfig+0x416>
 802d274:	687b      	ldr	r3, [r7, #4]
 802d276:	69da      	ldr	r2, [r3, #28]
 802d278:	687b      	ldr	r3, [r7, #4]
 802d27a:	6a1b      	ldr	r3, [r3, #32]
 802d27c:	431a      	orrs	r2, r3
 802d27e:	687b      	ldr	r3, [r7, #4]
 802d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d282:	019b      	lsls	r3, r3, #6
 802d284:	431a      	orrs	r2, r3
 802d286:	687b      	ldr	r3, [r7, #4]
 802d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d28a:	085b      	lsrs	r3, r3, #1
 802d28c:	3b01      	subs	r3, #1
 802d28e:	041b      	lsls	r3, r3, #16
 802d290:	431a      	orrs	r2, r3
 802d292:	687b      	ldr	r3, [r7, #4]
 802d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d296:	061b      	lsls	r3, r3, #24
 802d298:	431a      	orrs	r2, r3
 802d29a:	687b      	ldr	r3, [r7, #4]
 802d29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d29e:	071b      	lsls	r3, r3, #28
 802d2a0:	491e      	ldr	r1, [pc, #120]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2a2:	4313      	orrs	r3, r2
 802d2a4:	604b      	str	r3, [r1, #4]
 802d2a6:	4b1d      	ldr	r3, [pc, #116]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2a8:	681b      	ldr	r3, [r3, #0]
 802d2aa:	4a1c      	ldr	r2, [pc, #112]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802d2b0:	6013      	str	r3, [r2, #0]
 802d2b2:	f7fb fe07 	bl	8028ec4 <HAL_GetTick>
 802d2b6:	6138      	str	r0, [r7, #16]
 802d2b8:	e008      	b.n	802d2cc <HAL_RCC_OscConfig+0x48c>
 802d2ba:	f7fb fe03 	bl	8028ec4 <HAL_GetTick>
 802d2be:	4602      	mov	r2, r0
 802d2c0:	693b      	ldr	r3, [r7, #16]
 802d2c2:	1ad3      	subs	r3, r2, r3
 802d2c4:	2b02      	cmp	r3, #2
 802d2c6:	d901      	bls.n	802d2cc <HAL_RCC_OscConfig+0x48c>
 802d2c8:	2303      	movs	r3, #3
 802d2ca:	e023      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d2cc:	4b13      	ldr	r3, [pc, #76]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2ce:	681b      	ldr	r3, [r3, #0]
 802d2d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802d2d4:	2b00      	cmp	r3, #0
 802d2d6:	d0f0      	beq.n	802d2ba <HAL_RCC_OscConfig+0x47a>
 802d2d8:	e01b      	b.n	802d312 <HAL_RCC_OscConfig+0x4d2>
 802d2da:	4b10      	ldr	r3, [pc, #64]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2dc:	681b      	ldr	r3, [r3, #0]
 802d2de:	4a0f      	ldr	r2, [pc, #60]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d2e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802d2e4:	6013      	str	r3, [r2, #0]
 802d2e6:	f7fb fded 	bl	8028ec4 <HAL_GetTick>
 802d2ea:	6138      	str	r0, [r7, #16]
 802d2ec:	e008      	b.n	802d300 <HAL_RCC_OscConfig+0x4c0>
 802d2ee:	f7fb fde9 	bl	8028ec4 <HAL_GetTick>
 802d2f2:	4602      	mov	r2, r0
 802d2f4:	693b      	ldr	r3, [r7, #16]
 802d2f6:	1ad3      	subs	r3, r2, r3
 802d2f8:	2b02      	cmp	r3, #2
 802d2fa:	d901      	bls.n	802d300 <HAL_RCC_OscConfig+0x4c0>
 802d2fc:	2303      	movs	r3, #3
 802d2fe:	e009      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d300:	4b06      	ldr	r3, [pc, #24]	; (802d31c <HAL_RCC_OscConfig+0x4dc>)
 802d302:	681b      	ldr	r3, [r3, #0]
 802d304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802d308:	2b00      	cmp	r3, #0
 802d30a:	d1f0      	bne.n	802d2ee <HAL_RCC_OscConfig+0x4ae>
 802d30c:	e001      	b.n	802d312 <HAL_RCC_OscConfig+0x4d2>
 802d30e:	2301      	movs	r3, #1
 802d310:	e000      	b.n	802d314 <HAL_RCC_OscConfig+0x4d4>
 802d312:	2300      	movs	r3, #0
 802d314:	4618      	mov	r0, r3
 802d316:	3718      	adds	r7, #24
 802d318:	46bd      	mov	sp, r7
 802d31a:	bd80      	pop	{r7, pc}
 802d31c:	40023800 	.word	0x40023800
 802d320:	40007000 	.word	0x40007000

0802d324 <HAL_RCC_ClockConfig>:
 802d324:	b580      	push	{r7, lr}
 802d326:	b084      	sub	sp, #16
 802d328:	af00      	add	r7, sp, #0
 802d32a:	6078      	str	r0, [r7, #4]
 802d32c:	6039      	str	r1, [r7, #0]
 802d32e:	2300      	movs	r3, #0
 802d330:	60fb      	str	r3, [r7, #12]
 802d332:	687b      	ldr	r3, [r7, #4]
 802d334:	2b00      	cmp	r3, #0
 802d336:	d101      	bne.n	802d33c <HAL_RCC_ClockConfig+0x18>
 802d338:	2301      	movs	r3, #1
 802d33a:	e0ce      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d33c:	4b69      	ldr	r3, [pc, #420]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d33e:	681b      	ldr	r3, [r3, #0]
 802d340:	f003 030f 	and.w	r3, r3, #15
 802d344:	683a      	ldr	r2, [r7, #0]
 802d346:	429a      	cmp	r2, r3
 802d348:	d910      	bls.n	802d36c <HAL_RCC_ClockConfig+0x48>
 802d34a:	4b66      	ldr	r3, [pc, #408]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d34c:	681b      	ldr	r3, [r3, #0]
 802d34e:	f023 020f 	bic.w	r2, r3, #15
 802d352:	4964      	ldr	r1, [pc, #400]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d354:	683b      	ldr	r3, [r7, #0]
 802d356:	4313      	orrs	r3, r2
 802d358:	600b      	str	r3, [r1, #0]
 802d35a:	4b62      	ldr	r3, [pc, #392]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d35c:	681b      	ldr	r3, [r3, #0]
 802d35e:	f003 030f 	and.w	r3, r3, #15
 802d362:	683a      	ldr	r2, [r7, #0]
 802d364:	429a      	cmp	r2, r3
 802d366:	d001      	beq.n	802d36c <HAL_RCC_ClockConfig+0x48>
 802d368:	2301      	movs	r3, #1
 802d36a:	e0b6      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d36c:	687b      	ldr	r3, [r7, #4]
 802d36e:	681b      	ldr	r3, [r3, #0]
 802d370:	f003 0302 	and.w	r3, r3, #2
 802d374:	2b00      	cmp	r3, #0
 802d376:	d020      	beq.n	802d3ba <HAL_RCC_ClockConfig+0x96>
 802d378:	687b      	ldr	r3, [r7, #4]
 802d37a:	681b      	ldr	r3, [r3, #0]
 802d37c:	f003 0304 	and.w	r3, r3, #4
 802d380:	2b00      	cmp	r3, #0
 802d382:	d005      	beq.n	802d390 <HAL_RCC_ClockConfig+0x6c>
 802d384:	4b58      	ldr	r3, [pc, #352]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d386:	689b      	ldr	r3, [r3, #8]
 802d388:	4a57      	ldr	r2, [pc, #348]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d38a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802d38e:	6093      	str	r3, [r2, #8]
 802d390:	687b      	ldr	r3, [r7, #4]
 802d392:	681b      	ldr	r3, [r3, #0]
 802d394:	f003 0308 	and.w	r3, r3, #8
 802d398:	2b00      	cmp	r3, #0
 802d39a:	d005      	beq.n	802d3a8 <HAL_RCC_ClockConfig+0x84>
 802d39c:	4b52      	ldr	r3, [pc, #328]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d39e:	689b      	ldr	r3, [r3, #8]
 802d3a0:	4a51      	ldr	r2, [pc, #324]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802d3a6:	6093      	str	r3, [r2, #8]
 802d3a8:	4b4f      	ldr	r3, [pc, #316]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3aa:	689b      	ldr	r3, [r3, #8]
 802d3ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802d3b0:	687b      	ldr	r3, [r7, #4]
 802d3b2:	689b      	ldr	r3, [r3, #8]
 802d3b4:	494c      	ldr	r1, [pc, #304]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3b6:	4313      	orrs	r3, r2
 802d3b8:	608b      	str	r3, [r1, #8]
 802d3ba:	687b      	ldr	r3, [r7, #4]
 802d3bc:	681b      	ldr	r3, [r3, #0]
 802d3be:	f003 0301 	and.w	r3, r3, #1
 802d3c2:	2b00      	cmp	r3, #0
 802d3c4:	d040      	beq.n	802d448 <HAL_RCC_ClockConfig+0x124>
 802d3c6:	687b      	ldr	r3, [r7, #4]
 802d3c8:	685b      	ldr	r3, [r3, #4]
 802d3ca:	2b01      	cmp	r3, #1
 802d3cc:	d107      	bne.n	802d3de <HAL_RCC_ClockConfig+0xba>
 802d3ce:	4b46      	ldr	r3, [pc, #280]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3d0:	681b      	ldr	r3, [r3, #0]
 802d3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d3d6:	2b00      	cmp	r3, #0
 802d3d8:	d115      	bne.n	802d406 <HAL_RCC_ClockConfig+0xe2>
 802d3da:	2301      	movs	r3, #1
 802d3dc:	e07d      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d3de:	687b      	ldr	r3, [r7, #4]
 802d3e0:	685b      	ldr	r3, [r3, #4]
 802d3e2:	2b02      	cmp	r3, #2
 802d3e4:	d107      	bne.n	802d3f6 <HAL_RCC_ClockConfig+0xd2>
 802d3e6:	4b40      	ldr	r3, [pc, #256]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3e8:	681b      	ldr	r3, [r3, #0]
 802d3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802d3ee:	2b00      	cmp	r3, #0
 802d3f0:	d109      	bne.n	802d406 <HAL_RCC_ClockConfig+0xe2>
 802d3f2:	2301      	movs	r3, #1
 802d3f4:	e071      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d3f6:	4b3c      	ldr	r3, [pc, #240]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d3f8:	681b      	ldr	r3, [r3, #0]
 802d3fa:	f003 0302 	and.w	r3, r3, #2
 802d3fe:	2b00      	cmp	r3, #0
 802d400:	d101      	bne.n	802d406 <HAL_RCC_ClockConfig+0xe2>
 802d402:	2301      	movs	r3, #1
 802d404:	e069      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d406:	4b38      	ldr	r3, [pc, #224]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d408:	689b      	ldr	r3, [r3, #8]
 802d40a:	f023 0203 	bic.w	r2, r3, #3
 802d40e:	687b      	ldr	r3, [r7, #4]
 802d410:	685b      	ldr	r3, [r3, #4]
 802d412:	4935      	ldr	r1, [pc, #212]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d414:	4313      	orrs	r3, r2
 802d416:	608b      	str	r3, [r1, #8]
 802d418:	f7fb fd54 	bl	8028ec4 <HAL_GetTick>
 802d41c:	60f8      	str	r0, [r7, #12]
 802d41e:	e00a      	b.n	802d436 <HAL_RCC_ClockConfig+0x112>
 802d420:	f7fb fd50 	bl	8028ec4 <HAL_GetTick>
 802d424:	4602      	mov	r2, r0
 802d426:	68fb      	ldr	r3, [r7, #12]
 802d428:	1ad3      	subs	r3, r2, r3
 802d42a:	f241 3288 	movw	r2, #5000	; 0x1388
 802d42e:	4293      	cmp	r3, r2
 802d430:	d901      	bls.n	802d436 <HAL_RCC_ClockConfig+0x112>
 802d432:	2303      	movs	r3, #3
 802d434:	e051      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d436:	4b2c      	ldr	r3, [pc, #176]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d438:	689b      	ldr	r3, [r3, #8]
 802d43a:	f003 020c 	and.w	r2, r3, #12
 802d43e:	687b      	ldr	r3, [r7, #4]
 802d440:	685b      	ldr	r3, [r3, #4]
 802d442:	009b      	lsls	r3, r3, #2
 802d444:	429a      	cmp	r2, r3
 802d446:	d1eb      	bne.n	802d420 <HAL_RCC_ClockConfig+0xfc>
 802d448:	4b26      	ldr	r3, [pc, #152]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d44a:	681b      	ldr	r3, [r3, #0]
 802d44c:	f003 030f 	and.w	r3, r3, #15
 802d450:	683a      	ldr	r2, [r7, #0]
 802d452:	429a      	cmp	r2, r3
 802d454:	d210      	bcs.n	802d478 <HAL_RCC_ClockConfig+0x154>
 802d456:	4b23      	ldr	r3, [pc, #140]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d458:	681b      	ldr	r3, [r3, #0]
 802d45a:	f023 020f 	bic.w	r2, r3, #15
 802d45e:	4921      	ldr	r1, [pc, #132]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d460:	683b      	ldr	r3, [r7, #0]
 802d462:	4313      	orrs	r3, r2
 802d464:	600b      	str	r3, [r1, #0]
 802d466:	4b1f      	ldr	r3, [pc, #124]	; (802d4e4 <HAL_RCC_ClockConfig+0x1c0>)
 802d468:	681b      	ldr	r3, [r3, #0]
 802d46a:	f003 030f 	and.w	r3, r3, #15
 802d46e:	683a      	ldr	r2, [r7, #0]
 802d470:	429a      	cmp	r2, r3
 802d472:	d001      	beq.n	802d478 <HAL_RCC_ClockConfig+0x154>
 802d474:	2301      	movs	r3, #1
 802d476:	e030      	b.n	802d4da <HAL_RCC_ClockConfig+0x1b6>
 802d478:	687b      	ldr	r3, [r7, #4]
 802d47a:	681b      	ldr	r3, [r3, #0]
 802d47c:	f003 0304 	and.w	r3, r3, #4
 802d480:	2b00      	cmp	r3, #0
 802d482:	d008      	beq.n	802d496 <HAL_RCC_ClockConfig+0x172>
 802d484:	4b18      	ldr	r3, [pc, #96]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d486:	689b      	ldr	r3, [r3, #8]
 802d488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802d48c:	687b      	ldr	r3, [r7, #4]
 802d48e:	68db      	ldr	r3, [r3, #12]
 802d490:	4915      	ldr	r1, [pc, #84]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d492:	4313      	orrs	r3, r2
 802d494:	608b      	str	r3, [r1, #8]
 802d496:	687b      	ldr	r3, [r7, #4]
 802d498:	681b      	ldr	r3, [r3, #0]
 802d49a:	f003 0308 	and.w	r3, r3, #8
 802d49e:	2b00      	cmp	r3, #0
 802d4a0:	d009      	beq.n	802d4b6 <HAL_RCC_ClockConfig+0x192>
 802d4a2:	4b11      	ldr	r3, [pc, #68]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d4a4:	689b      	ldr	r3, [r3, #8]
 802d4a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802d4aa:	687b      	ldr	r3, [r7, #4]
 802d4ac:	691b      	ldr	r3, [r3, #16]
 802d4ae:	00db      	lsls	r3, r3, #3
 802d4b0:	490d      	ldr	r1, [pc, #52]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d4b2:	4313      	orrs	r3, r2
 802d4b4:	608b      	str	r3, [r1, #8]
 802d4b6:	f000 f81d 	bl	802d4f4 <HAL_RCC_GetSysClockFreq>
 802d4ba:	4602      	mov	r2, r0
 802d4bc:	4b0a      	ldr	r3, [pc, #40]	; (802d4e8 <HAL_RCC_ClockConfig+0x1c4>)
 802d4be:	689b      	ldr	r3, [r3, #8]
 802d4c0:	091b      	lsrs	r3, r3, #4
 802d4c2:	f003 030f 	and.w	r3, r3, #15
 802d4c6:	4909      	ldr	r1, [pc, #36]	; (802d4ec <HAL_RCC_ClockConfig+0x1c8>)
 802d4c8:	5ccb      	ldrb	r3, [r1, r3]
 802d4ca:	fa22 f303 	lsr.w	r3, r2, r3
 802d4ce:	4a08      	ldr	r2, [pc, #32]	; (802d4f0 <HAL_RCC_ClockConfig+0x1cc>)
 802d4d0:	6013      	str	r3, [r2, #0]
 802d4d2:	2000      	movs	r0, #0
 802d4d4:	f7fb fcb2 	bl	8028e3c <HAL_InitTick>
 802d4d8:	2300      	movs	r3, #0
 802d4da:	4618      	mov	r0, r3
 802d4dc:	3710      	adds	r7, #16
 802d4de:	46bd      	mov	sp, r7
 802d4e0:	bd80      	pop	{r7, pc}
 802d4e2:	bf00      	nop
 802d4e4:	40023c00 	.word	0x40023c00
 802d4e8:	40023800 	.word	0x40023800
 802d4ec:	0803c0bc 	.word	0x0803c0bc
 802d4f0:	2000cc48 	.word	0x2000cc48

0802d4f4 <HAL_RCC_GetSysClockFreq>:
 802d4f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802d4f8:	b090      	sub	sp, #64	; 0x40
 802d4fa:	af00      	add	r7, sp, #0
 802d4fc:	2300      	movs	r3, #0
 802d4fe:	637b      	str	r3, [r7, #52]	; 0x34
 802d500:	2300      	movs	r3, #0
 802d502:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d504:	2300      	movs	r3, #0
 802d506:	633b      	str	r3, [r7, #48]	; 0x30
 802d508:	2300      	movs	r3, #0
 802d50a:	63bb      	str	r3, [r7, #56]	; 0x38
 802d50c:	4b59      	ldr	r3, [pc, #356]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d50e:	689b      	ldr	r3, [r3, #8]
 802d510:	f003 030c 	and.w	r3, r3, #12
 802d514:	2b08      	cmp	r3, #8
 802d516:	d00d      	beq.n	802d534 <HAL_RCC_GetSysClockFreq+0x40>
 802d518:	2b08      	cmp	r3, #8
 802d51a:	f200 80a1 	bhi.w	802d660 <HAL_RCC_GetSysClockFreq+0x16c>
 802d51e:	2b00      	cmp	r3, #0
 802d520:	d002      	beq.n	802d528 <HAL_RCC_GetSysClockFreq+0x34>
 802d522:	2b04      	cmp	r3, #4
 802d524:	d003      	beq.n	802d52e <HAL_RCC_GetSysClockFreq+0x3a>
 802d526:	e09b      	b.n	802d660 <HAL_RCC_GetSysClockFreq+0x16c>
 802d528:	4b53      	ldr	r3, [pc, #332]	; (802d678 <HAL_RCC_GetSysClockFreq+0x184>)
 802d52a:	63bb      	str	r3, [r7, #56]	; 0x38
 802d52c:	e09b      	b.n	802d666 <HAL_RCC_GetSysClockFreq+0x172>
 802d52e:	4b53      	ldr	r3, [pc, #332]	; (802d67c <HAL_RCC_GetSysClockFreq+0x188>)
 802d530:	63bb      	str	r3, [r7, #56]	; 0x38
 802d532:	e098      	b.n	802d666 <HAL_RCC_GetSysClockFreq+0x172>
 802d534:	4b4f      	ldr	r3, [pc, #316]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d536:	685b      	ldr	r3, [r3, #4]
 802d538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d53c:	637b      	str	r3, [r7, #52]	; 0x34
 802d53e:	4b4d      	ldr	r3, [pc, #308]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d540:	685b      	ldr	r3, [r3, #4]
 802d542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802d546:	2b00      	cmp	r3, #0
 802d548:	d028      	beq.n	802d59c <HAL_RCC_GetSysClockFreq+0xa8>
 802d54a:	4b4a      	ldr	r3, [pc, #296]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d54c:	685b      	ldr	r3, [r3, #4]
 802d54e:	099b      	lsrs	r3, r3, #6
 802d550:	2200      	movs	r2, #0
 802d552:	623b      	str	r3, [r7, #32]
 802d554:	627a      	str	r2, [r7, #36]	; 0x24
 802d556:	6a3b      	ldr	r3, [r7, #32]
 802d558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802d55c:	2100      	movs	r1, #0
 802d55e:	4b47      	ldr	r3, [pc, #284]	; (802d67c <HAL_RCC_GetSysClockFreq+0x188>)
 802d560:	fb03 f201 	mul.w	r2, r3, r1
 802d564:	2300      	movs	r3, #0
 802d566:	fb00 f303 	mul.w	r3, r0, r3
 802d56a:	4413      	add	r3, r2
 802d56c:	4a43      	ldr	r2, [pc, #268]	; (802d67c <HAL_RCC_GetSysClockFreq+0x188>)
 802d56e:	fba0 1202 	umull	r1, r2, r0, r2
 802d572:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d574:	460a      	mov	r2, r1
 802d576:	62ba      	str	r2, [r7, #40]	; 0x28
 802d578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d57a:	4413      	add	r3, r2
 802d57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d580:	2200      	movs	r2, #0
 802d582:	61bb      	str	r3, [r7, #24]
 802d584:	61fa      	str	r2, [r7, #28]
 802d586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802d58a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802d58e:	f7e2 ffbb 	bl	8010508 <__aeabi_uldivmod>
 802d592:	4602      	mov	r2, r0
 802d594:	460b      	mov	r3, r1
 802d596:	4613      	mov	r3, r2
 802d598:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d59a:	e053      	b.n	802d644 <HAL_RCC_GetSysClockFreq+0x150>
 802d59c:	4b35      	ldr	r3, [pc, #212]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d59e:	685b      	ldr	r3, [r3, #4]
 802d5a0:	099b      	lsrs	r3, r3, #6
 802d5a2:	2200      	movs	r2, #0
 802d5a4:	613b      	str	r3, [r7, #16]
 802d5a6:	617a      	str	r2, [r7, #20]
 802d5a8:	693b      	ldr	r3, [r7, #16]
 802d5aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802d5ae:	f04f 0b00 	mov.w	fp, #0
 802d5b2:	4652      	mov	r2, sl
 802d5b4:	465b      	mov	r3, fp
 802d5b6:	f04f 0000 	mov.w	r0, #0
 802d5ba:	f04f 0100 	mov.w	r1, #0
 802d5be:	0159      	lsls	r1, r3, #5
 802d5c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802d5c4:	0150      	lsls	r0, r2, #5
 802d5c6:	4602      	mov	r2, r0
 802d5c8:	460b      	mov	r3, r1
 802d5ca:	ebb2 080a 	subs.w	r8, r2, sl
 802d5ce:	eb63 090b 	sbc.w	r9, r3, fp
 802d5d2:	f04f 0200 	mov.w	r2, #0
 802d5d6:	f04f 0300 	mov.w	r3, #0
 802d5da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802d5de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802d5e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802d5e6:	ebb2 0408 	subs.w	r4, r2, r8
 802d5ea:	eb63 0509 	sbc.w	r5, r3, r9
 802d5ee:	f04f 0200 	mov.w	r2, #0
 802d5f2:	f04f 0300 	mov.w	r3, #0
 802d5f6:	00eb      	lsls	r3, r5, #3
 802d5f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802d5fc:	00e2      	lsls	r2, r4, #3
 802d5fe:	4614      	mov	r4, r2
 802d600:	461d      	mov	r5, r3
 802d602:	eb14 030a 	adds.w	r3, r4, sl
 802d606:	603b      	str	r3, [r7, #0]
 802d608:	eb45 030b 	adc.w	r3, r5, fp
 802d60c:	607b      	str	r3, [r7, #4]
 802d60e:	f04f 0200 	mov.w	r2, #0
 802d612:	f04f 0300 	mov.w	r3, #0
 802d616:	e9d7 4500 	ldrd	r4, r5, [r7]
 802d61a:	4629      	mov	r1, r5
 802d61c:	028b      	lsls	r3, r1, #10
 802d61e:	4621      	mov	r1, r4
 802d620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802d624:	4621      	mov	r1, r4
 802d626:	028a      	lsls	r2, r1, #10
 802d628:	4610      	mov	r0, r2
 802d62a:	4619      	mov	r1, r3
 802d62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d62e:	2200      	movs	r2, #0
 802d630:	60bb      	str	r3, [r7, #8]
 802d632:	60fa      	str	r2, [r7, #12]
 802d634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802d638:	f7e2 ff66 	bl	8010508 <__aeabi_uldivmod>
 802d63c:	4602      	mov	r2, r0
 802d63e:	460b      	mov	r3, r1
 802d640:	4613      	mov	r3, r2
 802d642:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d644:	4b0b      	ldr	r3, [pc, #44]	; (802d674 <HAL_RCC_GetSysClockFreq+0x180>)
 802d646:	685b      	ldr	r3, [r3, #4]
 802d648:	0c1b      	lsrs	r3, r3, #16
 802d64a:	f003 0303 	and.w	r3, r3, #3
 802d64e:	3301      	adds	r3, #1
 802d650:	005b      	lsls	r3, r3, #1
 802d652:	633b      	str	r3, [r7, #48]	; 0x30
 802d654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d658:	fbb2 f3f3 	udiv	r3, r2, r3
 802d65c:	63bb      	str	r3, [r7, #56]	; 0x38
 802d65e:	e002      	b.n	802d666 <HAL_RCC_GetSysClockFreq+0x172>
 802d660:	4b05      	ldr	r3, [pc, #20]	; (802d678 <HAL_RCC_GetSysClockFreq+0x184>)
 802d662:	63bb      	str	r3, [r7, #56]	; 0x38
 802d664:	bf00      	nop
 802d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d668:	4618      	mov	r0, r3
 802d66a:	3740      	adds	r7, #64	; 0x40
 802d66c:	46bd      	mov	sp, r7
 802d66e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d672:	bf00      	nop
 802d674:	40023800 	.word	0x40023800
 802d678:	00f42400 	.word	0x00f42400
 802d67c:	016e3600 	.word	0x016e3600

0802d680 <HAL_RCC_GetHCLKFreq>:
 802d680:	b480      	push	{r7}
 802d682:	af00      	add	r7, sp, #0
 802d684:	4b03      	ldr	r3, [pc, #12]	; (802d694 <HAL_RCC_GetHCLKFreq+0x14>)
 802d686:	681b      	ldr	r3, [r3, #0]
 802d688:	4618      	mov	r0, r3
 802d68a:	46bd      	mov	sp, r7
 802d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d690:	4770      	bx	lr
 802d692:	bf00      	nop
 802d694:	2000cc48 	.word	0x2000cc48

0802d698 <HAL_RCC_GetPCLK1Freq>:
 802d698:	b580      	push	{r7, lr}
 802d69a:	af00      	add	r7, sp, #0
 802d69c:	f7ff fff0 	bl	802d680 <HAL_RCC_GetHCLKFreq>
 802d6a0:	4602      	mov	r2, r0
 802d6a2:	4b05      	ldr	r3, [pc, #20]	; (802d6b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 802d6a4:	689b      	ldr	r3, [r3, #8]
 802d6a6:	0a9b      	lsrs	r3, r3, #10
 802d6a8:	f003 0307 	and.w	r3, r3, #7
 802d6ac:	4903      	ldr	r1, [pc, #12]	; (802d6bc <HAL_RCC_GetPCLK1Freq+0x24>)
 802d6ae:	5ccb      	ldrb	r3, [r1, r3]
 802d6b0:	fa22 f303 	lsr.w	r3, r2, r3
 802d6b4:	4618      	mov	r0, r3
 802d6b6:	bd80      	pop	{r7, pc}
 802d6b8:	40023800 	.word	0x40023800
 802d6bc:	0803c0cc 	.word	0x0803c0cc

0802d6c0 <HAL_RCC_GetPCLK2Freq>:
 802d6c0:	b580      	push	{r7, lr}
 802d6c2:	af00      	add	r7, sp, #0
 802d6c4:	f7ff ffdc 	bl	802d680 <HAL_RCC_GetHCLKFreq>
 802d6c8:	4602      	mov	r2, r0
 802d6ca:	4b05      	ldr	r3, [pc, #20]	; (802d6e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 802d6cc:	689b      	ldr	r3, [r3, #8]
 802d6ce:	0b5b      	lsrs	r3, r3, #13
 802d6d0:	f003 0307 	and.w	r3, r3, #7
 802d6d4:	4903      	ldr	r1, [pc, #12]	; (802d6e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 802d6d6:	5ccb      	ldrb	r3, [r1, r3]
 802d6d8:	fa22 f303 	lsr.w	r3, r2, r3
 802d6dc:	4618      	mov	r0, r3
 802d6de:	bd80      	pop	{r7, pc}
 802d6e0:	40023800 	.word	0x40023800
 802d6e4:	0803c0cc 	.word	0x0803c0cc

0802d6e8 <HAL_RCCEx_PeriphCLKConfig>:
 802d6e8:	b580      	push	{r7, lr}
 802d6ea:	b088      	sub	sp, #32
 802d6ec:	af00      	add	r7, sp, #0
 802d6ee:	6078      	str	r0, [r7, #4]
 802d6f0:	2300      	movs	r3, #0
 802d6f2:	617b      	str	r3, [r7, #20]
 802d6f4:	2300      	movs	r3, #0
 802d6f6:	613b      	str	r3, [r7, #16]
 802d6f8:	2300      	movs	r3, #0
 802d6fa:	60fb      	str	r3, [r7, #12]
 802d6fc:	2300      	movs	r3, #0
 802d6fe:	61fb      	str	r3, [r7, #28]
 802d700:	2300      	movs	r3, #0
 802d702:	61bb      	str	r3, [r7, #24]
 802d704:	687b      	ldr	r3, [r7, #4]
 802d706:	681b      	ldr	r3, [r3, #0]
 802d708:	f003 0301 	and.w	r3, r3, #1
 802d70c:	2b00      	cmp	r3, #0
 802d70e:	d012      	beq.n	802d736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 802d710:	4b69      	ldr	r3, [pc, #420]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d712:	689b      	ldr	r3, [r3, #8]
 802d714:	4a68      	ldr	r2, [pc, #416]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802d71a:	6093      	str	r3, [r2, #8]
 802d71c:	4b66      	ldr	r3, [pc, #408]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d71e:	689a      	ldr	r2, [r3, #8]
 802d720:	687b      	ldr	r3, [r7, #4]
 802d722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802d724:	4964      	ldr	r1, [pc, #400]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d726:	4313      	orrs	r3, r2
 802d728:	608b      	str	r3, [r1, #8]
 802d72a:	687b      	ldr	r3, [r7, #4]
 802d72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802d72e:	2b00      	cmp	r3, #0
 802d730:	d101      	bne.n	802d736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 802d732:	2301      	movs	r3, #1
 802d734:	61fb      	str	r3, [r7, #28]
 802d736:	687b      	ldr	r3, [r7, #4]
 802d738:	681b      	ldr	r3, [r3, #0]
 802d73a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d73e:	2b00      	cmp	r3, #0
 802d740:	d017      	beq.n	802d772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 802d742:	4b5d      	ldr	r3, [pc, #372]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802d74c:	687b      	ldr	r3, [r7, #4]
 802d74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d750:	4959      	ldr	r1, [pc, #356]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d752:	4313      	orrs	r3, r2
 802d754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d75c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802d760:	d101      	bne.n	802d766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 802d762:	2301      	movs	r3, #1
 802d764:	61fb      	str	r3, [r7, #28]
 802d766:	687b      	ldr	r3, [r7, #4]
 802d768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d76a:	2b00      	cmp	r3, #0
 802d76c:	d101      	bne.n	802d772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 802d76e:	2301      	movs	r3, #1
 802d770:	61bb      	str	r3, [r7, #24]
 802d772:	687b      	ldr	r3, [r7, #4]
 802d774:	681b      	ldr	r3, [r3, #0]
 802d776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802d77a:	2b00      	cmp	r3, #0
 802d77c:	d017      	beq.n	802d7ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 802d77e:	4b4e      	ldr	r3, [pc, #312]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 802d788:	687b      	ldr	r3, [r7, #4]
 802d78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d78c:	494a      	ldr	r1, [pc, #296]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d78e:	4313      	orrs	r3, r2
 802d790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802d794:	687b      	ldr	r3, [r7, #4]
 802d796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802d79c:	d101      	bne.n	802d7a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 802d79e:	2301      	movs	r3, #1
 802d7a0:	61fb      	str	r3, [r7, #28]
 802d7a2:	687b      	ldr	r3, [r7, #4]
 802d7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7a6:	2b00      	cmp	r3, #0
 802d7a8:	d101      	bne.n	802d7ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 802d7aa:	2301      	movs	r3, #1
 802d7ac:	61bb      	str	r3, [r7, #24]
 802d7ae:	687b      	ldr	r3, [r7, #4]
 802d7b0:	681b      	ldr	r3, [r3, #0]
 802d7b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802d7b6:	2b00      	cmp	r3, #0
 802d7b8:	d001      	beq.n	802d7be <HAL_RCCEx_PeriphCLKConfig+0xd6>
 802d7ba:	2301      	movs	r3, #1
 802d7bc:	61fb      	str	r3, [r7, #28]
 802d7be:	687b      	ldr	r3, [r7, #4]
 802d7c0:	681b      	ldr	r3, [r3, #0]
 802d7c2:	f003 0320 	and.w	r3, r3, #32
 802d7c6:	2b00      	cmp	r3, #0
 802d7c8:	f000 808b 	beq.w	802d8e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 802d7cc:	4b3a      	ldr	r3, [pc, #232]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7d0:	4a39      	ldr	r2, [pc, #228]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d7d6:	6413      	str	r3, [r2, #64]	; 0x40
 802d7d8:	4b37      	ldr	r3, [pc, #220]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802d7e0:	60bb      	str	r3, [r7, #8]
 802d7e2:	68bb      	ldr	r3, [r7, #8]
 802d7e4:	4b35      	ldr	r3, [pc, #212]	; (802d8bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802d7e6:	681b      	ldr	r3, [r3, #0]
 802d7e8:	4a34      	ldr	r2, [pc, #208]	; (802d8bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802d7ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d7ee:	6013      	str	r3, [r2, #0]
 802d7f0:	f7fb fb68 	bl	8028ec4 <HAL_GetTick>
 802d7f4:	6178      	str	r0, [r7, #20]
 802d7f6:	e008      	b.n	802d80a <HAL_RCCEx_PeriphCLKConfig+0x122>
 802d7f8:	f7fb fb64 	bl	8028ec4 <HAL_GetTick>
 802d7fc:	4602      	mov	r2, r0
 802d7fe:	697b      	ldr	r3, [r7, #20]
 802d800:	1ad3      	subs	r3, r2, r3
 802d802:	2b64      	cmp	r3, #100	; 0x64
 802d804:	d901      	bls.n	802d80a <HAL_RCCEx_PeriphCLKConfig+0x122>
 802d806:	2303      	movs	r3, #3
 802d808:	e38d      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802d80a:	4b2c      	ldr	r3, [pc, #176]	; (802d8bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802d80c:	681b      	ldr	r3, [r3, #0]
 802d80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d812:	2b00      	cmp	r3, #0
 802d814:	d0f0      	beq.n	802d7f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 802d816:	4b28      	ldr	r3, [pc, #160]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d81a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802d81e:	613b      	str	r3, [r7, #16]
 802d820:	693b      	ldr	r3, [r7, #16]
 802d822:	2b00      	cmp	r3, #0
 802d824:	d035      	beq.n	802d892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 802d826:	687b      	ldr	r3, [r7, #4]
 802d828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d82a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802d82e:	693a      	ldr	r2, [r7, #16]
 802d830:	429a      	cmp	r2, r3
 802d832:	d02e      	beq.n	802d892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 802d834:	4b20      	ldr	r3, [pc, #128]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802d83c:	613b      	str	r3, [r7, #16]
 802d83e:	4b1e      	ldr	r3, [pc, #120]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d842:	4a1d      	ldr	r2, [pc, #116]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d848:	6713      	str	r3, [r2, #112]	; 0x70
 802d84a:	4b1b      	ldr	r3, [pc, #108]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d84e:	4a1a      	ldr	r2, [pc, #104]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802d854:	6713      	str	r3, [r2, #112]	; 0x70
 802d856:	4a18      	ldr	r2, [pc, #96]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d858:	693b      	ldr	r3, [r7, #16]
 802d85a:	6713      	str	r3, [r2, #112]	; 0x70
 802d85c:	4b16      	ldr	r3, [pc, #88]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d860:	f003 0301 	and.w	r3, r3, #1
 802d864:	2b01      	cmp	r3, #1
 802d866:	d114      	bne.n	802d892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 802d868:	f7fb fb2c 	bl	8028ec4 <HAL_GetTick>
 802d86c:	6178      	str	r0, [r7, #20]
 802d86e:	e00a      	b.n	802d886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 802d870:	f7fb fb28 	bl	8028ec4 <HAL_GetTick>
 802d874:	4602      	mov	r2, r0
 802d876:	697b      	ldr	r3, [r7, #20]
 802d878:	1ad3      	subs	r3, r2, r3
 802d87a:	f241 3288 	movw	r2, #5000	; 0x1388
 802d87e:	4293      	cmp	r3, r2
 802d880:	d901      	bls.n	802d886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 802d882:	2303      	movs	r3, #3
 802d884:	e34f      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802d886:	4b0c      	ldr	r3, [pc, #48]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d88a:	f003 0302 	and.w	r3, r3, #2
 802d88e:	2b00      	cmp	r3, #0
 802d890:	d0ee      	beq.n	802d870 <HAL_RCCEx_PeriphCLKConfig+0x188>
 802d892:	687b      	ldr	r3, [r7, #4]
 802d894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802d89a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d89e:	d111      	bne.n	802d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 802d8a0:	4b05      	ldr	r3, [pc, #20]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d8a2:	689b      	ldr	r3, [r3, #8]
 802d8a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802d8a8:	687b      	ldr	r3, [r7, #4]
 802d8aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802d8ac:	4b04      	ldr	r3, [pc, #16]	; (802d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 802d8ae:	400b      	ands	r3, r1
 802d8b0:	4901      	ldr	r1, [pc, #4]	; (802d8b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802d8b2:	4313      	orrs	r3, r2
 802d8b4:	608b      	str	r3, [r1, #8]
 802d8b6:	e00b      	b.n	802d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 802d8b8:	40023800 	.word	0x40023800
 802d8bc:	40007000 	.word	0x40007000
 802d8c0:	0ffffcff 	.word	0x0ffffcff
 802d8c4:	4bac      	ldr	r3, [pc, #688]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8c6:	689b      	ldr	r3, [r3, #8]
 802d8c8:	4aab      	ldr	r2, [pc, #684]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802d8ce:	6093      	str	r3, [r2, #8]
 802d8d0:	4ba9      	ldr	r3, [pc, #676]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802d8d4:	687b      	ldr	r3, [r7, #4]
 802d8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d8d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802d8dc:	49a6      	ldr	r1, [pc, #664]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8de:	4313      	orrs	r3, r2
 802d8e0:	670b      	str	r3, [r1, #112]	; 0x70
 802d8e2:	687b      	ldr	r3, [r7, #4]
 802d8e4:	681b      	ldr	r3, [r3, #0]
 802d8e6:	f003 0310 	and.w	r3, r3, #16
 802d8ea:	2b00      	cmp	r3, #0
 802d8ec:	d010      	beq.n	802d910 <HAL_RCCEx_PeriphCLKConfig+0x228>
 802d8ee:	4ba2      	ldr	r3, [pc, #648]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d8f4:	4aa0      	ldr	r2, [pc, #640]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d8f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802d8fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 802d8fe:	4b9e      	ldr	r3, [pc, #632]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802d904:	687b      	ldr	r3, [r7, #4]
 802d906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d908:	499b      	ldr	r1, [pc, #620]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d90a:	4313      	orrs	r3, r2
 802d90c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802d910:	687b      	ldr	r3, [r7, #4]
 802d912:	681b      	ldr	r3, [r3, #0]
 802d914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802d918:	2b00      	cmp	r3, #0
 802d91a:	d00a      	beq.n	802d932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 802d91c:	4b96      	ldr	r3, [pc, #600]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802d926:	687b      	ldr	r3, [r7, #4]
 802d928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802d92a:	4993      	ldr	r1, [pc, #588]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d92c:	4313      	orrs	r3, r2
 802d92e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d932:	687b      	ldr	r3, [r7, #4]
 802d934:	681b      	ldr	r3, [r3, #0]
 802d936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d93a:	2b00      	cmp	r3, #0
 802d93c:	d00a      	beq.n	802d954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 802d93e:	4b8e      	ldr	r3, [pc, #568]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 802d948:	687b      	ldr	r3, [r7, #4]
 802d94a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d94c:	498a      	ldr	r1, [pc, #552]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d94e:	4313      	orrs	r3, r2
 802d950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d954:	687b      	ldr	r3, [r7, #4]
 802d956:	681b      	ldr	r3, [r3, #0]
 802d958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d95c:	2b00      	cmp	r3, #0
 802d95e:	d00a      	beq.n	802d976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 802d960:	4b85      	ldr	r3, [pc, #532]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802d96a:	687b      	ldr	r3, [r7, #4]
 802d96c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d96e:	4982      	ldr	r1, [pc, #520]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d970:	4313      	orrs	r3, r2
 802d972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d976:	687b      	ldr	r3, [r7, #4]
 802d978:	681b      	ldr	r3, [r3, #0]
 802d97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d97e:	2b00      	cmp	r3, #0
 802d980:	d00a      	beq.n	802d998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 802d982:	4b7d      	ldr	r3, [pc, #500]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 802d98c:	687b      	ldr	r3, [r7, #4]
 802d98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d990:	4979      	ldr	r1, [pc, #484]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d992:	4313      	orrs	r3, r2
 802d994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d998:	687b      	ldr	r3, [r7, #4]
 802d99a:	681b      	ldr	r3, [r3, #0]
 802d99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d9a0:	2b00      	cmp	r3, #0
 802d9a2:	d00a      	beq.n	802d9ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 802d9a4:	4b74      	ldr	r3, [pc, #464]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d9aa:	f023 0203 	bic.w	r2, r3, #3
 802d9ae:	687b      	ldr	r3, [r7, #4]
 802d9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d9b2:	4971      	ldr	r1, [pc, #452]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9b4:	4313      	orrs	r3, r2
 802d9b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d9ba:	687b      	ldr	r3, [r7, #4]
 802d9bc:	681b      	ldr	r3, [r3, #0]
 802d9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802d9c2:	2b00      	cmp	r3, #0
 802d9c4:	d00a      	beq.n	802d9dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 802d9c6:	4b6c      	ldr	r3, [pc, #432]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d9cc:	f023 020c 	bic.w	r2, r3, #12
 802d9d0:	687b      	ldr	r3, [r7, #4]
 802d9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d9d4:	4968      	ldr	r1, [pc, #416]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9d6:	4313      	orrs	r3, r2
 802d9d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d9dc:	687b      	ldr	r3, [r7, #4]
 802d9de:	681b      	ldr	r3, [r3, #0]
 802d9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d9e4:	2b00      	cmp	r3, #0
 802d9e6:	d00a      	beq.n	802d9fe <HAL_RCCEx_PeriphCLKConfig+0x316>
 802d9e8:	4b63      	ldr	r3, [pc, #396]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d9ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 802d9f2:	687b      	ldr	r3, [r7, #4]
 802d9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d9f6:	4960      	ldr	r1, [pc, #384]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802d9f8:	4313      	orrs	r3, r2
 802d9fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	681b      	ldr	r3, [r3, #0]
 802da02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802da06:	2b00      	cmp	r3, #0
 802da08:	d00a      	beq.n	802da20 <HAL_RCCEx_PeriphCLKConfig+0x338>
 802da0a:	4b5b      	ldr	r3, [pc, #364]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802da10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802da14:	687b      	ldr	r3, [r7, #4]
 802da16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802da18:	4957      	ldr	r1, [pc, #348]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da1a:	4313      	orrs	r3, r2
 802da1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802da20:	687b      	ldr	r3, [r7, #4]
 802da22:	681b      	ldr	r3, [r3, #0]
 802da24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802da28:	2b00      	cmp	r3, #0
 802da2a:	d00a      	beq.n	802da42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 802da2c:	4b52      	ldr	r3, [pc, #328]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802da32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802da36:	687b      	ldr	r3, [r7, #4]
 802da38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802da3a:	494f      	ldr	r1, [pc, #316]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da3c:	4313      	orrs	r3, r2
 802da3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802da42:	687b      	ldr	r3, [r7, #4]
 802da44:	681b      	ldr	r3, [r3, #0]
 802da46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802da4a:	2b00      	cmp	r3, #0
 802da4c:	d00a      	beq.n	802da64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 802da4e:	4b4a      	ldr	r3, [pc, #296]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802da54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802da58:	687b      	ldr	r3, [r7, #4]
 802da5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802da5c:	4946      	ldr	r1, [pc, #280]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da5e:	4313      	orrs	r3, r2
 802da60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802da64:	687b      	ldr	r3, [r7, #4]
 802da66:	681b      	ldr	r3, [r3, #0]
 802da68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802da6c:	2b00      	cmp	r3, #0
 802da6e:	d00a      	beq.n	802da86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 802da70:	4b41      	ldr	r3, [pc, #260]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802da76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 802da7a:	687b      	ldr	r3, [r7, #4]
 802da7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802da7e:	493e      	ldr	r1, [pc, #248]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da80:	4313      	orrs	r3, r2
 802da82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802da86:	687b      	ldr	r3, [r7, #4]
 802da88:	681b      	ldr	r3, [r3, #0]
 802da8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802da8e:	2b00      	cmp	r3, #0
 802da90:	d00a      	beq.n	802daa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 802da92:	4b39      	ldr	r3, [pc, #228]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802da94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802da98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 802da9c:	687b      	ldr	r3, [r7, #4]
 802da9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802daa0:	4935      	ldr	r1, [pc, #212]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802daa2:	4313      	orrs	r3, r2
 802daa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802daa8:	687b      	ldr	r3, [r7, #4]
 802daaa:	681b      	ldr	r3, [r3, #0]
 802daac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802dab0:	2b00      	cmp	r3, #0
 802dab2:	d00a      	beq.n	802daca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 802dab4:	4b30      	ldr	r3, [pc, #192]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802dab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802daba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 802dabe:	687b      	ldr	r3, [r7, #4]
 802dac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802dac2:	492d      	ldr	r1, [pc, #180]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802dac4:	4313      	orrs	r3, r2
 802dac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802daca:	687b      	ldr	r3, [r7, #4]
 802dacc:	681b      	ldr	r3, [r3, #0]
 802dace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802dad2:	2b00      	cmp	r3, #0
 802dad4:	d011      	beq.n	802dafa <HAL_RCCEx_PeriphCLKConfig+0x412>
 802dad6:	4b28      	ldr	r3, [pc, #160]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802dad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802dadc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 802dae0:	687b      	ldr	r3, [r7, #4]
 802dae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802dae4:	4924      	ldr	r1, [pc, #144]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802dae6:	4313      	orrs	r3, r2
 802dae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802daec:	687b      	ldr	r3, [r7, #4]
 802daee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802daf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802daf4:	d101      	bne.n	802dafa <HAL_RCCEx_PeriphCLKConfig+0x412>
 802daf6:	2301      	movs	r3, #1
 802daf8:	61bb      	str	r3, [r7, #24]
 802dafa:	687b      	ldr	r3, [r7, #4]
 802dafc:	681b      	ldr	r3, [r3, #0]
 802dafe:	f003 0308 	and.w	r3, r3, #8
 802db02:	2b00      	cmp	r3, #0
 802db04:	d001      	beq.n	802db0a <HAL_RCCEx_PeriphCLKConfig+0x422>
 802db06:	2301      	movs	r3, #1
 802db08:	61bb      	str	r3, [r7, #24]
 802db0a:	687b      	ldr	r3, [r7, #4]
 802db0c:	681b      	ldr	r3, [r3, #0]
 802db0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802db12:	2b00      	cmp	r3, #0
 802db14:	d00a      	beq.n	802db2c <HAL_RCCEx_PeriphCLKConfig+0x444>
 802db16:	4b18      	ldr	r3, [pc, #96]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802db1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 802db20:	687b      	ldr	r3, [r7, #4]
 802db22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802db24:	4914      	ldr	r1, [pc, #80]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db26:	4313      	orrs	r3, r2
 802db28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802db2c:	687b      	ldr	r3, [r7, #4]
 802db2e:	681b      	ldr	r3, [r3, #0]
 802db30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802db34:	2b00      	cmp	r3, #0
 802db36:	d00b      	beq.n	802db50 <HAL_RCCEx_PeriphCLKConfig+0x468>
 802db38:	4b0f      	ldr	r3, [pc, #60]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802db3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 802db42:	687b      	ldr	r3, [r7, #4]
 802db44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802db48:	490b      	ldr	r1, [pc, #44]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db4a:	4313      	orrs	r3, r2
 802db4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802db50:	687b      	ldr	r3, [r7, #4]
 802db52:	681b      	ldr	r3, [r3, #0]
 802db54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802db58:	2b00      	cmp	r3, #0
 802db5a:	d00f      	beq.n	802db7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 802db5c:	4b06      	ldr	r3, [pc, #24]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802db62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 802db66:	687b      	ldr	r3, [r7, #4]
 802db68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802db6c:	4902      	ldr	r1, [pc, #8]	; (802db78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802db6e:	4313      	orrs	r3, r2
 802db70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802db74:	e002      	b.n	802db7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 802db76:	bf00      	nop
 802db78:	40023800 	.word	0x40023800
 802db7c:	687b      	ldr	r3, [r7, #4]
 802db7e:	681b      	ldr	r3, [r3, #0]
 802db80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802db84:	2b00      	cmp	r3, #0
 802db86:	d00b      	beq.n	802dba0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 802db88:	4b89      	ldr	r3, [pc, #548]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802db8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802db8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 802db92:	687b      	ldr	r3, [r7, #4]
 802db94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802db98:	4985      	ldr	r1, [pc, #532]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802db9a:	4313      	orrs	r3, r2
 802db9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802dba0:	687b      	ldr	r3, [r7, #4]
 802dba2:	681b      	ldr	r3, [r3, #0]
 802dba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802dba8:	2b00      	cmp	r3, #0
 802dbaa:	d00b      	beq.n	802dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 802dbac:	4b80      	ldr	r3, [pc, #512]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dbae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dbb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 802dbb6:	687b      	ldr	r3, [r7, #4]
 802dbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dbbc:	497c      	ldr	r1, [pc, #496]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dbbe:	4313      	orrs	r3, r2
 802dbc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802dbc4:	69fb      	ldr	r3, [r7, #28]
 802dbc6:	2b01      	cmp	r3, #1
 802dbc8:	d005      	beq.n	802dbd6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 802dbca:	687b      	ldr	r3, [r7, #4]
 802dbcc:	681b      	ldr	r3, [r3, #0]
 802dbce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802dbd2:	f040 80d6 	bne.w	802dd82 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 802dbd6:	4b76      	ldr	r3, [pc, #472]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dbd8:	681b      	ldr	r3, [r3, #0]
 802dbda:	4a75      	ldr	r2, [pc, #468]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dbdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802dbe0:	6013      	str	r3, [r2, #0]
 802dbe2:	f7fb f96f 	bl	8028ec4 <HAL_GetTick>
 802dbe6:	6178      	str	r0, [r7, #20]
 802dbe8:	e008      	b.n	802dbfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 802dbea:	f7fb f96b 	bl	8028ec4 <HAL_GetTick>
 802dbee:	4602      	mov	r2, r0
 802dbf0:	697b      	ldr	r3, [r7, #20]
 802dbf2:	1ad3      	subs	r3, r2, r3
 802dbf4:	2b64      	cmp	r3, #100	; 0x64
 802dbf6:	d901      	bls.n	802dbfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 802dbf8:	2303      	movs	r3, #3
 802dbfa:	e194      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802dbfc:	4b6c      	ldr	r3, [pc, #432]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dbfe:	681b      	ldr	r3, [r3, #0]
 802dc00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802dc04:	2b00      	cmp	r3, #0
 802dc06:	d1f0      	bne.n	802dbea <HAL_RCCEx_PeriphCLKConfig+0x502>
 802dc08:	687b      	ldr	r3, [r7, #4]
 802dc0a:	681b      	ldr	r3, [r3, #0]
 802dc0c:	f003 0301 	and.w	r3, r3, #1
 802dc10:	2b00      	cmp	r3, #0
 802dc12:	d021      	beq.n	802dc58 <HAL_RCCEx_PeriphCLKConfig+0x570>
 802dc14:	687b      	ldr	r3, [r7, #4]
 802dc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802dc18:	2b00      	cmp	r3, #0
 802dc1a:	d11d      	bne.n	802dc58 <HAL_RCCEx_PeriphCLKConfig+0x570>
 802dc1c:	4b64      	ldr	r3, [pc, #400]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dc1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dc22:	0c1b      	lsrs	r3, r3, #16
 802dc24:	f003 0303 	and.w	r3, r3, #3
 802dc28:	613b      	str	r3, [r7, #16]
 802dc2a:	4b61      	ldr	r3, [pc, #388]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dc2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dc30:	0e1b      	lsrs	r3, r3, #24
 802dc32:	f003 030f 	and.w	r3, r3, #15
 802dc36:	60fb      	str	r3, [r7, #12]
 802dc38:	687b      	ldr	r3, [r7, #4]
 802dc3a:	685b      	ldr	r3, [r3, #4]
 802dc3c:	019a      	lsls	r2, r3, #6
 802dc3e:	693b      	ldr	r3, [r7, #16]
 802dc40:	041b      	lsls	r3, r3, #16
 802dc42:	431a      	orrs	r2, r3
 802dc44:	68fb      	ldr	r3, [r7, #12]
 802dc46:	061b      	lsls	r3, r3, #24
 802dc48:	431a      	orrs	r2, r3
 802dc4a:	687b      	ldr	r3, [r7, #4]
 802dc4c:	689b      	ldr	r3, [r3, #8]
 802dc4e:	071b      	lsls	r3, r3, #28
 802dc50:	4957      	ldr	r1, [pc, #348]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dc52:	4313      	orrs	r3, r2
 802dc54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802dc58:	687b      	ldr	r3, [r7, #4]
 802dc5a:	681b      	ldr	r3, [r3, #0]
 802dc5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802dc60:	2b00      	cmp	r3, #0
 802dc62:	d004      	beq.n	802dc6e <HAL_RCCEx_PeriphCLKConfig+0x586>
 802dc64:	687b      	ldr	r3, [r7, #4]
 802dc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802dc68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802dc6c:	d00a      	beq.n	802dc84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 802dc6e:	687b      	ldr	r3, [r7, #4]
 802dc70:	681b      	ldr	r3, [r3, #0]
 802dc72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802dc76:	2b00      	cmp	r3, #0
 802dc78:	d02e      	beq.n	802dcd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 802dc7a:	687b      	ldr	r3, [r7, #4]
 802dc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dc7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802dc82:	d129      	bne.n	802dcd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 802dc84:	4b4a      	ldr	r3, [pc, #296]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dc8a:	0c1b      	lsrs	r3, r3, #16
 802dc8c:	f003 0303 	and.w	r3, r3, #3
 802dc90:	613b      	str	r3, [r7, #16]
 802dc92:	4b47      	ldr	r3, [pc, #284]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dc94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dc98:	0f1b      	lsrs	r3, r3, #28
 802dc9a:	f003 0307 	and.w	r3, r3, #7
 802dc9e:	60fb      	str	r3, [r7, #12]
 802dca0:	687b      	ldr	r3, [r7, #4]
 802dca2:	685b      	ldr	r3, [r3, #4]
 802dca4:	019a      	lsls	r2, r3, #6
 802dca6:	693b      	ldr	r3, [r7, #16]
 802dca8:	041b      	lsls	r3, r3, #16
 802dcaa:	431a      	orrs	r2, r3
 802dcac:	687b      	ldr	r3, [r7, #4]
 802dcae:	68db      	ldr	r3, [r3, #12]
 802dcb0:	061b      	lsls	r3, r3, #24
 802dcb2:	431a      	orrs	r2, r3
 802dcb4:	68fb      	ldr	r3, [r7, #12]
 802dcb6:	071b      	lsls	r3, r3, #28
 802dcb8:	493d      	ldr	r1, [pc, #244]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dcba:	4313      	orrs	r3, r2
 802dcbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802dcc0:	4b3b      	ldr	r3, [pc, #236]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dcc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dcc6:	f023 021f 	bic.w	r2, r3, #31
 802dcca:	687b      	ldr	r3, [r7, #4]
 802dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dcce:	3b01      	subs	r3, #1
 802dcd0:	4937      	ldr	r1, [pc, #220]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dcd2:	4313      	orrs	r3, r2
 802dcd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802dcd8:	687b      	ldr	r3, [r7, #4]
 802dcda:	681b      	ldr	r3, [r3, #0]
 802dcdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802dce0:	2b00      	cmp	r3, #0
 802dce2:	d01d      	beq.n	802dd20 <HAL_RCCEx_PeriphCLKConfig+0x638>
 802dce4:	4b32      	ldr	r3, [pc, #200]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dcea:	0e1b      	lsrs	r3, r3, #24
 802dcec:	f003 030f 	and.w	r3, r3, #15
 802dcf0:	613b      	str	r3, [r7, #16]
 802dcf2:	4b2f      	ldr	r3, [pc, #188]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802dcf8:	0f1b      	lsrs	r3, r3, #28
 802dcfa:	f003 0307 	and.w	r3, r3, #7
 802dcfe:	60fb      	str	r3, [r7, #12]
 802dd00:	687b      	ldr	r3, [r7, #4]
 802dd02:	685b      	ldr	r3, [r3, #4]
 802dd04:	019a      	lsls	r2, r3, #6
 802dd06:	687b      	ldr	r3, [r7, #4]
 802dd08:	691b      	ldr	r3, [r3, #16]
 802dd0a:	041b      	lsls	r3, r3, #16
 802dd0c:	431a      	orrs	r2, r3
 802dd0e:	693b      	ldr	r3, [r7, #16]
 802dd10:	061b      	lsls	r3, r3, #24
 802dd12:	431a      	orrs	r2, r3
 802dd14:	68fb      	ldr	r3, [r7, #12]
 802dd16:	071b      	lsls	r3, r3, #28
 802dd18:	4925      	ldr	r1, [pc, #148]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd1a:	4313      	orrs	r3, r2
 802dd1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802dd20:	687b      	ldr	r3, [r7, #4]
 802dd22:	681b      	ldr	r3, [r3, #0]
 802dd24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802dd28:	2b00      	cmp	r3, #0
 802dd2a:	d011      	beq.n	802dd50 <HAL_RCCEx_PeriphCLKConfig+0x668>
 802dd2c:	687b      	ldr	r3, [r7, #4]
 802dd2e:	685b      	ldr	r3, [r3, #4]
 802dd30:	019a      	lsls	r2, r3, #6
 802dd32:	687b      	ldr	r3, [r7, #4]
 802dd34:	691b      	ldr	r3, [r3, #16]
 802dd36:	041b      	lsls	r3, r3, #16
 802dd38:	431a      	orrs	r2, r3
 802dd3a:	687b      	ldr	r3, [r7, #4]
 802dd3c:	68db      	ldr	r3, [r3, #12]
 802dd3e:	061b      	lsls	r3, r3, #24
 802dd40:	431a      	orrs	r2, r3
 802dd42:	687b      	ldr	r3, [r7, #4]
 802dd44:	689b      	ldr	r3, [r3, #8]
 802dd46:	071b      	lsls	r3, r3, #28
 802dd48:	4919      	ldr	r1, [pc, #100]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd4a:	4313      	orrs	r3, r2
 802dd4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802dd50:	4b17      	ldr	r3, [pc, #92]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd52:	681b      	ldr	r3, [r3, #0]
 802dd54:	4a16      	ldr	r2, [pc, #88]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802dd5a:	6013      	str	r3, [r2, #0]
 802dd5c:	f7fb f8b2 	bl	8028ec4 <HAL_GetTick>
 802dd60:	6178      	str	r0, [r7, #20]
 802dd62:	e008      	b.n	802dd76 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 802dd64:	f7fb f8ae 	bl	8028ec4 <HAL_GetTick>
 802dd68:	4602      	mov	r2, r0
 802dd6a:	697b      	ldr	r3, [r7, #20]
 802dd6c:	1ad3      	subs	r3, r2, r3
 802dd6e:	2b64      	cmp	r3, #100	; 0x64
 802dd70:	d901      	bls.n	802dd76 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 802dd72:	2303      	movs	r3, #3
 802dd74:	e0d7      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802dd76:	4b0e      	ldr	r3, [pc, #56]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd78:	681b      	ldr	r3, [r3, #0]
 802dd7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802dd7e:	2b00      	cmp	r3, #0
 802dd80:	d0f0      	beq.n	802dd64 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 802dd82:	69bb      	ldr	r3, [r7, #24]
 802dd84:	2b01      	cmp	r3, #1
 802dd86:	f040 80cd 	bne.w	802df24 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 802dd8a:	4b09      	ldr	r3, [pc, #36]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd8c:	681b      	ldr	r3, [r3, #0]
 802dd8e:	4a08      	ldr	r2, [pc, #32]	; (802ddb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 802dd90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802dd94:	6013      	str	r3, [r2, #0]
 802dd96:	f7fb f895 	bl	8028ec4 <HAL_GetTick>
 802dd9a:	6178      	str	r0, [r7, #20]
 802dd9c:	e00a      	b.n	802ddb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 802dd9e:	f7fb f891 	bl	8028ec4 <HAL_GetTick>
 802dda2:	4602      	mov	r2, r0
 802dda4:	697b      	ldr	r3, [r7, #20]
 802dda6:	1ad3      	subs	r3, r2, r3
 802dda8:	2b64      	cmp	r3, #100	; 0x64
 802ddaa:	d903      	bls.n	802ddb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 802ddac:	2303      	movs	r3, #3
 802ddae:	e0ba      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802ddb0:	40023800 	.word	0x40023800
 802ddb4:	4b5e      	ldr	r3, [pc, #376]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802ddb6:	681b      	ldr	r3, [r3, #0]
 802ddb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802ddbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802ddc0:	d0ed      	beq.n	802dd9e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 802ddc2:	687b      	ldr	r3, [r7, #4]
 802ddc4:	681b      	ldr	r3, [r3, #0]
 802ddc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802ddca:	2b00      	cmp	r3, #0
 802ddcc:	d003      	beq.n	802ddd6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 802ddce:	687b      	ldr	r3, [r7, #4]
 802ddd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ddd2:	2b00      	cmp	r3, #0
 802ddd4:	d009      	beq.n	802ddea <HAL_RCCEx_PeriphCLKConfig+0x702>
 802ddd6:	687b      	ldr	r3, [r7, #4]
 802ddd8:	681b      	ldr	r3, [r3, #0]
 802ddda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802ddde:	2b00      	cmp	r3, #0
 802dde0:	d02e      	beq.n	802de40 <HAL_RCCEx_PeriphCLKConfig+0x758>
 802dde2:	687b      	ldr	r3, [r7, #4]
 802dde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dde6:	2b00      	cmp	r3, #0
 802dde8:	d12a      	bne.n	802de40 <HAL_RCCEx_PeriphCLKConfig+0x758>
 802ddea:	4b51      	ldr	r3, [pc, #324]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802ddec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802ddf0:	0c1b      	lsrs	r3, r3, #16
 802ddf2:	f003 0303 	and.w	r3, r3, #3
 802ddf6:	613b      	str	r3, [r7, #16]
 802ddf8:	4b4d      	ldr	r3, [pc, #308]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802ddfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802ddfe:	0f1b      	lsrs	r3, r3, #28
 802de00:	f003 0307 	and.w	r3, r3, #7
 802de04:	60fb      	str	r3, [r7, #12]
 802de06:	687b      	ldr	r3, [r7, #4]
 802de08:	695b      	ldr	r3, [r3, #20]
 802de0a:	019a      	lsls	r2, r3, #6
 802de0c:	693b      	ldr	r3, [r7, #16]
 802de0e:	041b      	lsls	r3, r3, #16
 802de10:	431a      	orrs	r2, r3
 802de12:	687b      	ldr	r3, [r7, #4]
 802de14:	699b      	ldr	r3, [r3, #24]
 802de16:	061b      	lsls	r3, r3, #24
 802de18:	431a      	orrs	r2, r3
 802de1a:	68fb      	ldr	r3, [r7, #12]
 802de1c:	071b      	lsls	r3, r3, #28
 802de1e:	4944      	ldr	r1, [pc, #272]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de20:	4313      	orrs	r3, r2
 802de22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802de26:	4b42      	ldr	r3, [pc, #264]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802de2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 802de30:	687b      	ldr	r3, [r7, #4]
 802de32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802de34:	3b01      	subs	r3, #1
 802de36:	021b      	lsls	r3, r3, #8
 802de38:	493d      	ldr	r1, [pc, #244]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de3a:	4313      	orrs	r3, r2
 802de3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802de40:	687b      	ldr	r3, [r7, #4]
 802de42:	681b      	ldr	r3, [r3, #0]
 802de44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802de48:	2b00      	cmp	r3, #0
 802de4a:	d022      	beq.n	802de92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 802de4c:	687b      	ldr	r3, [r7, #4]
 802de4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802de50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802de54:	d11d      	bne.n	802de92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 802de56:	4b36      	ldr	r3, [pc, #216]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802de5c:	0e1b      	lsrs	r3, r3, #24
 802de5e:	f003 030f 	and.w	r3, r3, #15
 802de62:	613b      	str	r3, [r7, #16]
 802de64:	4b32      	ldr	r3, [pc, #200]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802de6a:	0f1b      	lsrs	r3, r3, #28
 802de6c:	f003 0307 	and.w	r3, r3, #7
 802de70:	60fb      	str	r3, [r7, #12]
 802de72:	687b      	ldr	r3, [r7, #4]
 802de74:	695b      	ldr	r3, [r3, #20]
 802de76:	019a      	lsls	r2, r3, #6
 802de78:	687b      	ldr	r3, [r7, #4]
 802de7a:	6a1b      	ldr	r3, [r3, #32]
 802de7c:	041b      	lsls	r3, r3, #16
 802de7e:	431a      	orrs	r2, r3
 802de80:	693b      	ldr	r3, [r7, #16]
 802de82:	061b      	lsls	r3, r3, #24
 802de84:	431a      	orrs	r2, r3
 802de86:	68fb      	ldr	r3, [r7, #12]
 802de88:	071b      	lsls	r3, r3, #28
 802de8a:	4929      	ldr	r1, [pc, #164]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802de8c:	4313      	orrs	r3, r2
 802de8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802de92:	687b      	ldr	r3, [r7, #4]
 802de94:	681b      	ldr	r3, [r3, #0]
 802de96:	f003 0308 	and.w	r3, r3, #8
 802de9a:	2b00      	cmp	r3, #0
 802de9c:	d028      	beq.n	802def0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 802de9e:	4b24      	ldr	r3, [pc, #144]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802dea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802dea4:	0e1b      	lsrs	r3, r3, #24
 802dea6:	f003 030f 	and.w	r3, r3, #15
 802deaa:	613b      	str	r3, [r7, #16]
 802deac:	4b20      	ldr	r3, [pc, #128]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802deae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802deb2:	0c1b      	lsrs	r3, r3, #16
 802deb4:	f003 0303 	and.w	r3, r3, #3
 802deb8:	60fb      	str	r3, [r7, #12]
 802deba:	687b      	ldr	r3, [r7, #4]
 802debc:	695b      	ldr	r3, [r3, #20]
 802debe:	019a      	lsls	r2, r3, #6
 802dec0:	68fb      	ldr	r3, [r7, #12]
 802dec2:	041b      	lsls	r3, r3, #16
 802dec4:	431a      	orrs	r2, r3
 802dec6:	693b      	ldr	r3, [r7, #16]
 802dec8:	061b      	lsls	r3, r3, #24
 802deca:	431a      	orrs	r2, r3
 802decc:	687b      	ldr	r3, [r7, #4]
 802dece:	69db      	ldr	r3, [r3, #28]
 802ded0:	071b      	lsls	r3, r3, #28
 802ded2:	4917      	ldr	r1, [pc, #92]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802ded4:	4313      	orrs	r3, r2
 802ded6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802deda:	4b15      	ldr	r3, [pc, #84]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802dedc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802dee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802dee4:	687b      	ldr	r3, [r7, #4]
 802dee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dee8:	4911      	ldr	r1, [pc, #68]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802deea:	4313      	orrs	r3, r2
 802deec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 802def0:	4b0f      	ldr	r3, [pc, #60]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802def2:	681b      	ldr	r3, [r3, #0]
 802def4:	4a0e      	ldr	r2, [pc, #56]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802def6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802defa:	6013      	str	r3, [r2, #0]
 802defc:	f7fa ffe2 	bl	8028ec4 <HAL_GetTick>
 802df00:	6178      	str	r0, [r7, #20]
 802df02:	e008      	b.n	802df16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 802df04:	f7fa ffde 	bl	8028ec4 <HAL_GetTick>
 802df08:	4602      	mov	r2, r0
 802df0a:	697b      	ldr	r3, [r7, #20]
 802df0c:	1ad3      	subs	r3, r2, r3
 802df0e:	2b64      	cmp	r3, #100	; 0x64
 802df10:	d901      	bls.n	802df16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 802df12:	2303      	movs	r3, #3
 802df14:	e007      	b.n	802df26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 802df16:	4b06      	ldr	r3, [pc, #24]	; (802df30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 802df18:	681b      	ldr	r3, [r3, #0]
 802df1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802df1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802df22:	d1ef      	bne.n	802df04 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 802df24:	2300      	movs	r3, #0
 802df26:	4618      	mov	r0, r3
 802df28:	3720      	adds	r7, #32
 802df2a:	46bd      	mov	sp, r7
 802df2c:	bd80      	pop	{r7, pc}
 802df2e:	bf00      	nop
 802df30:	40023800 	.word	0x40023800

0802df34 <HAL_RTC_Init>:
 802df34:	b580      	push	{r7, lr}
 802df36:	b082      	sub	sp, #8
 802df38:	af00      	add	r7, sp, #0
 802df3a:	6078      	str	r0, [r7, #4]
 802df3c:	687b      	ldr	r3, [r7, #4]
 802df3e:	2b00      	cmp	r3, #0
 802df40:	d101      	bne.n	802df46 <HAL_RTC_Init+0x12>
 802df42:	2301      	movs	r3, #1
 802df44:	e06b      	b.n	802e01e <HAL_RTC_Init+0xea>
 802df46:	687b      	ldr	r3, [r7, #4]
 802df48:	7f5b      	ldrb	r3, [r3, #29]
 802df4a:	b2db      	uxtb	r3, r3
 802df4c:	2b00      	cmp	r3, #0
 802df4e:	d105      	bne.n	802df5c <HAL_RTC_Init+0x28>
 802df50:	687b      	ldr	r3, [r7, #4]
 802df52:	2200      	movs	r2, #0
 802df54:	771a      	strb	r2, [r3, #28]
 802df56:	6878      	ldr	r0, [r7, #4]
 802df58:	f000 f868 	bl	802e02c <HAL_RTC_MspInit>
 802df5c:	687b      	ldr	r3, [r7, #4]
 802df5e:	2202      	movs	r2, #2
 802df60:	775a      	strb	r2, [r3, #29]
 802df62:	687b      	ldr	r3, [r7, #4]
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	22ca      	movs	r2, #202	; 0xca
 802df68:	625a      	str	r2, [r3, #36]	; 0x24
 802df6a:	687b      	ldr	r3, [r7, #4]
 802df6c:	681b      	ldr	r3, [r3, #0]
 802df6e:	2253      	movs	r2, #83	; 0x53
 802df70:	625a      	str	r2, [r3, #36]	; 0x24
 802df72:	6878      	ldr	r0, [r7, #4]
 802df74:	f000 faa0 	bl	802e4b8 <RTC_EnterInitMode>
 802df78:	4603      	mov	r3, r0
 802df7a:	2b00      	cmp	r3, #0
 802df7c:	d008      	beq.n	802df90 <HAL_RTC_Init+0x5c>
 802df7e:	687b      	ldr	r3, [r7, #4]
 802df80:	681b      	ldr	r3, [r3, #0]
 802df82:	22ff      	movs	r2, #255	; 0xff
 802df84:	625a      	str	r2, [r3, #36]	; 0x24
 802df86:	687b      	ldr	r3, [r7, #4]
 802df88:	2204      	movs	r2, #4
 802df8a:	775a      	strb	r2, [r3, #29]
 802df8c:	2301      	movs	r3, #1
 802df8e:	e046      	b.n	802e01e <HAL_RTC_Init+0xea>
 802df90:	687b      	ldr	r3, [r7, #4]
 802df92:	681b      	ldr	r3, [r3, #0]
 802df94:	6899      	ldr	r1, [r3, #8]
 802df96:	687b      	ldr	r3, [r7, #4]
 802df98:	681a      	ldr	r2, [r3, #0]
 802df9a:	4b23      	ldr	r3, [pc, #140]	; (802e028 <HAL_RTC_Init+0xf4>)
 802df9c:	400b      	ands	r3, r1
 802df9e:	6093      	str	r3, [r2, #8]
 802dfa0:	687b      	ldr	r3, [r7, #4]
 802dfa2:	681b      	ldr	r3, [r3, #0]
 802dfa4:	6899      	ldr	r1, [r3, #8]
 802dfa6:	687b      	ldr	r3, [r7, #4]
 802dfa8:	685a      	ldr	r2, [r3, #4]
 802dfaa:	687b      	ldr	r3, [r7, #4]
 802dfac:	691b      	ldr	r3, [r3, #16]
 802dfae:	431a      	orrs	r2, r3
 802dfb0:	687b      	ldr	r3, [r7, #4]
 802dfb2:	695b      	ldr	r3, [r3, #20]
 802dfb4:	431a      	orrs	r2, r3
 802dfb6:	687b      	ldr	r3, [r7, #4]
 802dfb8:	681b      	ldr	r3, [r3, #0]
 802dfba:	430a      	orrs	r2, r1
 802dfbc:	609a      	str	r2, [r3, #8]
 802dfbe:	687b      	ldr	r3, [r7, #4]
 802dfc0:	681b      	ldr	r3, [r3, #0]
 802dfc2:	687a      	ldr	r2, [r7, #4]
 802dfc4:	68d2      	ldr	r2, [r2, #12]
 802dfc6:	611a      	str	r2, [r3, #16]
 802dfc8:	687b      	ldr	r3, [r7, #4]
 802dfca:	681b      	ldr	r3, [r3, #0]
 802dfcc:	6919      	ldr	r1, [r3, #16]
 802dfce:	687b      	ldr	r3, [r7, #4]
 802dfd0:	689b      	ldr	r3, [r3, #8]
 802dfd2:	041a      	lsls	r2, r3, #16
 802dfd4:	687b      	ldr	r3, [r7, #4]
 802dfd6:	681b      	ldr	r3, [r3, #0]
 802dfd8:	430a      	orrs	r2, r1
 802dfda:	611a      	str	r2, [r3, #16]
 802dfdc:	687b      	ldr	r3, [r7, #4]
 802dfde:	681b      	ldr	r3, [r3, #0]
 802dfe0:	68da      	ldr	r2, [r3, #12]
 802dfe2:	687b      	ldr	r3, [r7, #4]
 802dfe4:	681b      	ldr	r3, [r3, #0]
 802dfe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802dfea:	60da      	str	r2, [r3, #12]
 802dfec:	687b      	ldr	r3, [r7, #4]
 802dfee:	681b      	ldr	r3, [r3, #0]
 802dff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802dff2:	687b      	ldr	r3, [r7, #4]
 802dff4:	681b      	ldr	r3, [r3, #0]
 802dff6:	f022 0208 	bic.w	r2, r2, #8
 802dffa:	64da      	str	r2, [r3, #76]	; 0x4c
 802dffc:	687b      	ldr	r3, [r7, #4]
 802dffe:	681b      	ldr	r3, [r3, #0]
 802e000:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 802e002:	687b      	ldr	r3, [r7, #4]
 802e004:	699a      	ldr	r2, [r3, #24]
 802e006:	687b      	ldr	r3, [r7, #4]
 802e008:	681b      	ldr	r3, [r3, #0]
 802e00a:	430a      	orrs	r2, r1
 802e00c:	64da      	str	r2, [r3, #76]	; 0x4c
 802e00e:	687b      	ldr	r3, [r7, #4]
 802e010:	681b      	ldr	r3, [r3, #0]
 802e012:	22ff      	movs	r2, #255	; 0xff
 802e014:	625a      	str	r2, [r3, #36]	; 0x24
 802e016:	687b      	ldr	r3, [r7, #4]
 802e018:	2201      	movs	r2, #1
 802e01a:	775a      	strb	r2, [r3, #29]
 802e01c:	2300      	movs	r3, #0
 802e01e:	4618      	mov	r0, r3
 802e020:	3708      	adds	r7, #8
 802e022:	46bd      	mov	sp, r7
 802e024:	bd80      	pop	{r7, pc}
 802e026:	bf00      	nop
 802e028:	ff8fffbf 	.word	0xff8fffbf

0802e02c <HAL_RTC_MspInit>:
 802e02c:	b480      	push	{r7}
 802e02e:	b083      	sub	sp, #12
 802e030:	af00      	add	r7, sp, #0
 802e032:	6078      	str	r0, [r7, #4]
 802e034:	bf00      	nop
 802e036:	370c      	adds	r7, #12
 802e038:	46bd      	mov	sp, r7
 802e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e03e:	4770      	bx	lr

0802e040 <HAL_RTC_SetTime>:
 802e040:	b590      	push	{r4, r7, lr}
 802e042:	b087      	sub	sp, #28
 802e044:	af00      	add	r7, sp, #0
 802e046:	60f8      	str	r0, [r7, #12]
 802e048:	60b9      	str	r1, [r7, #8]
 802e04a:	607a      	str	r2, [r7, #4]
 802e04c:	2300      	movs	r3, #0
 802e04e:	617b      	str	r3, [r7, #20]
 802e050:	68fb      	ldr	r3, [r7, #12]
 802e052:	7f1b      	ldrb	r3, [r3, #28]
 802e054:	2b01      	cmp	r3, #1
 802e056:	d101      	bne.n	802e05c <HAL_RTC_SetTime+0x1c>
 802e058:	2302      	movs	r3, #2
 802e05a:	e0a8      	b.n	802e1ae <HAL_RTC_SetTime+0x16e>
 802e05c:	68fb      	ldr	r3, [r7, #12]
 802e05e:	2201      	movs	r2, #1
 802e060:	771a      	strb	r2, [r3, #28]
 802e062:	68fb      	ldr	r3, [r7, #12]
 802e064:	2202      	movs	r2, #2
 802e066:	775a      	strb	r2, [r3, #29]
 802e068:	687b      	ldr	r3, [r7, #4]
 802e06a:	2b00      	cmp	r3, #0
 802e06c:	d126      	bne.n	802e0bc <HAL_RTC_SetTime+0x7c>
 802e06e:	68fb      	ldr	r3, [r7, #12]
 802e070:	681b      	ldr	r3, [r3, #0]
 802e072:	689b      	ldr	r3, [r3, #8]
 802e074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e078:	2b00      	cmp	r3, #0
 802e07a:	d102      	bne.n	802e082 <HAL_RTC_SetTime+0x42>
 802e07c:	68bb      	ldr	r3, [r7, #8]
 802e07e:	2200      	movs	r2, #0
 802e080:	731a      	strb	r2, [r3, #12]
 802e082:	68bb      	ldr	r3, [r7, #8]
 802e084:	781b      	ldrb	r3, [r3, #0]
 802e086:	4618      	mov	r0, r3
 802e088:	f000 fa42 	bl	802e510 <RTC_ByteToBcd2>
 802e08c:	4603      	mov	r3, r0
 802e08e:	041c      	lsls	r4, r3, #16
 802e090:	68bb      	ldr	r3, [r7, #8]
 802e092:	785b      	ldrb	r3, [r3, #1]
 802e094:	4618      	mov	r0, r3
 802e096:	f000 fa3b 	bl	802e510 <RTC_ByteToBcd2>
 802e09a:	4603      	mov	r3, r0
 802e09c:	021b      	lsls	r3, r3, #8
 802e09e:	431c      	orrs	r4, r3
 802e0a0:	68bb      	ldr	r3, [r7, #8]
 802e0a2:	789b      	ldrb	r3, [r3, #2]
 802e0a4:	4618      	mov	r0, r3
 802e0a6:	f000 fa33 	bl	802e510 <RTC_ByteToBcd2>
 802e0aa:	4603      	mov	r3, r0
 802e0ac:	ea44 0203 	orr.w	r2, r4, r3
 802e0b0:	68bb      	ldr	r3, [r7, #8]
 802e0b2:	7b1b      	ldrb	r3, [r3, #12]
 802e0b4:	041b      	lsls	r3, r3, #16
 802e0b6:	4313      	orrs	r3, r2
 802e0b8:	617b      	str	r3, [r7, #20]
 802e0ba:	e018      	b.n	802e0ee <HAL_RTC_SetTime+0xae>
 802e0bc:	68fb      	ldr	r3, [r7, #12]
 802e0be:	681b      	ldr	r3, [r3, #0]
 802e0c0:	689b      	ldr	r3, [r3, #8]
 802e0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e0c6:	2b00      	cmp	r3, #0
 802e0c8:	d102      	bne.n	802e0d0 <HAL_RTC_SetTime+0x90>
 802e0ca:	68bb      	ldr	r3, [r7, #8]
 802e0cc:	2200      	movs	r2, #0
 802e0ce:	731a      	strb	r2, [r3, #12]
 802e0d0:	68bb      	ldr	r3, [r7, #8]
 802e0d2:	781b      	ldrb	r3, [r3, #0]
 802e0d4:	041a      	lsls	r2, r3, #16
 802e0d6:	68bb      	ldr	r3, [r7, #8]
 802e0d8:	785b      	ldrb	r3, [r3, #1]
 802e0da:	021b      	lsls	r3, r3, #8
 802e0dc:	4313      	orrs	r3, r2
 802e0de:	68ba      	ldr	r2, [r7, #8]
 802e0e0:	7892      	ldrb	r2, [r2, #2]
 802e0e2:	431a      	orrs	r2, r3
 802e0e4:	68bb      	ldr	r3, [r7, #8]
 802e0e6:	7b1b      	ldrb	r3, [r3, #12]
 802e0e8:	041b      	lsls	r3, r3, #16
 802e0ea:	4313      	orrs	r3, r2
 802e0ec:	617b      	str	r3, [r7, #20]
 802e0ee:	68fb      	ldr	r3, [r7, #12]
 802e0f0:	681b      	ldr	r3, [r3, #0]
 802e0f2:	22ca      	movs	r2, #202	; 0xca
 802e0f4:	625a      	str	r2, [r3, #36]	; 0x24
 802e0f6:	68fb      	ldr	r3, [r7, #12]
 802e0f8:	681b      	ldr	r3, [r3, #0]
 802e0fa:	2253      	movs	r2, #83	; 0x53
 802e0fc:	625a      	str	r2, [r3, #36]	; 0x24
 802e0fe:	68f8      	ldr	r0, [r7, #12]
 802e100:	f000 f9da 	bl	802e4b8 <RTC_EnterInitMode>
 802e104:	4603      	mov	r3, r0
 802e106:	2b00      	cmp	r3, #0
 802e108:	d00b      	beq.n	802e122 <HAL_RTC_SetTime+0xe2>
 802e10a:	68fb      	ldr	r3, [r7, #12]
 802e10c:	681b      	ldr	r3, [r3, #0]
 802e10e:	22ff      	movs	r2, #255	; 0xff
 802e110:	625a      	str	r2, [r3, #36]	; 0x24
 802e112:	68fb      	ldr	r3, [r7, #12]
 802e114:	2204      	movs	r2, #4
 802e116:	775a      	strb	r2, [r3, #29]
 802e118:	68fb      	ldr	r3, [r7, #12]
 802e11a:	2200      	movs	r2, #0
 802e11c:	771a      	strb	r2, [r3, #28]
 802e11e:	2301      	movs	r3, #1
 802e120:	e045      	b.n	802e1ae <HAL_RTC_SetTime+0x16e>
 802e122:	68fb      	ldr	r3, [r7, #12]
 802e124:	681a      	ldr	r2, [r3, #0]
 802e126:	6979      	ldr	r1, [r7, #20]
 802e128:	4b23      	ldr	r3, [pc, #140]	; (802e1b8 <HAL_RTC_SetTime+0x178>)
 802e12a:	400b      	ands	r3, r1
 802e12c:	6013      	str	r3, [r2, #0]
 802e12e:	68fb      	ldr	r3, [r7, #12]
 802e130:	681b      	ldr	r3, [r3, #0]
 802e132:	689a      	ldr	r2, [r3, #8]
 802e134:	68fb      	ldr	r3, [r7, #12]
 802e136:	681b      	ldr	r3, [r3, #0]
 802e138:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802e13c:	609a      	str	r2, [r3, #8]
 802e13e:	68fb      	ldr	r3, [r7, #12]
 802e140:	681b      	ldr	r3, [r3, #0]
 802e142:	6899      	ldr	r1, [r3, #8]
 802e144:	68bb      	ldr	r3, [r7, #8]
 802e146:	691a      	ldr	r2, [r3, #16]
 802e148:	68bb      	ldr	r3, [r7, #8]
 802e14a:	695b      	ldr	r3, [r3, #20]
 802e14c:	431a      	orrs	r2, r3
 802e14e:	68fb      	ldr	r3, [r7, #12]
 802e150:	681b      	ldr	r3, [r3, #0]
 802e152:	430a      	orrs	r2, r1
 802e154:	609a      	str	r2, [r3, #8]
 802e156:	68fb      	ldr	r3, [r7, #12]
 802e158:	681b      	ldr	r3, [r3, #0]
 802e15a:	68da      	ldr	r2, [r3, #12]
 802e15c:	68fb      	ldr	r3, [r7, #12]
 802e15e:	681b      	ldr	r3, [r3, #0]
 802e160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802e164:	60da      	str	r2, [r3, #12]
 802e166:	68fb      	ldr	r3, [r7, #12]
 802e168:	681b      	ldr	r3, [r3, #0]
 802e16a:	689b      	ldr	r3, [r3, #8]
 802e16c:	f003 0320 	and.w	r3, r3, #32
 802e170:	2b00      	cmp	r3, #0
 802e172:	d111      	bne.n	802e198 <HAL_RTC_SetTime+0x158>
 802e174:	68f8      	ldr	r0, [r7, #12]
 802e176:	f000 f977 	bl	802e468 <HAL_RTC_WaitForSynchro>
 802e17a:	4603      	mov	r3, r0
 802e17c:	2b00      	cmp	r3, #0
 802e17e:	d00b      	beq.n	802e198 <HAL_RTC_SetTime+0x158>
 802e180:	68fb      	ldr	r3, [r7, #12]
 802e182:	681b      	ldr	r3, [r3, #0]
 802e184:	22ff      	movs	r2, #255	; 0xff
 802e186:	625a      	str	r2, [r3, #36]	; 0x24
 802e188:	68fb      	ldr	r3, [r7, #12]
 802e18a:	2204      	movs	r2, #4
 802e18c:	775a      	strb	r2, [r3, #29]
 802e18e:	68fb      	ldr	r3, [r7, #12]
 802e190:	2200      	movs	r2, #0
 802e192:	771a      	strb	r2, [r3, #28]
 802e194:	2301      	movs	r3, #1
 802e196:	e00a      	b.n	802e1ae <HAL_RTC_SetTime+0x16e>
 802e198:	68fb      	ldr	r3, [r7, #12]
 802e19a:	681b      	ldr	r3, [r3, #0]
 802e19c:	22ff      	movs	r2, #255	; 0xff
 802e19e:	625a      	str	r2, [r3, #36]	; 0x24
 802e1a0:	68fb      	ldr	r3, [r7, #12]
 802e1a2:	2201      	movs	r2, #1
 802e1a4:	775a      	strb	r2, [r3, #29]
 802e1a6:	68fb      	ldr	r3, [r7, #12]
 802e1a8:	2200      	movs	r2, #0
 802e1aa:	771a      	strb	r2, [r3, #28]
 802e1ac:	2300      	movs	r3, #0
 802e1ae:	4618      	mov	r0, r3
 802e1b0:	371c      	adds	r7, #28
 802e1b2:	46bd      	mov	sp, r7
 802e1b4:	bd90      	pop	{r4, r7, pc}
 802e1b6:	bf00      	nop
 802e1b8:	007f7f7f 	.word	0x007f7f7f

0802e1bc <HAL_RTC_GetTime>:
 802e1bc:	b580      	push	{r7, lr}
 802e1be:	b086      	sub	sp, #24
 802e1c0:	af00      	add	r7, sp, #0
 802e1c2:	60f8      	str	r0, [r7, #12]
 802e1c4:	60b9      	str	r1, [r7, #8]
 802e1c6:	607a      	str	r2, [r7, #4]
 802e1c8:	2300      	movs	r3, #0
 802e1ca:	617b      	str	r3, [r7, #20]
 802e1cc:	68fb      	ldr	r3, [r7, #12]
 802e1ce:	681b      	ldr	r3, [r3, #0]
 802e1d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802e1d2:	68bb      	ldr	r3, [r7, #8]
 802e1d4:	605a      	str	r2, [r3, #4]
 802e1d6:	68fb      	ldr	r3, [r7, #12]
 802e1d8:	681b      	ldr	r3, [r3, #0]
 802e1da:	691b      	ldr	r3, [r3, #16]
 802e1dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 802e1e0:	68bb      	ldr	r3, [r7, #8]
 802e1e2:	609a      	str	r2, [r3, #8]
 802e1e4:	68fb      	ldr	r3, [r7, #12]
 802e1e6:	681b      	ldr	r3, [r3, #0]
 802e1e8:	681a      	ldr	r2, [r3, #0]
 802e1ea:	4b22      	ldr	r3, [pc, #136]	; (802e274 <HAL_RTC_GetTime+0xb8>)
 802e1ec:	4013      	ands	r3, r2
 802e1ee:	617b      	str	r3, [r7, #20]
 802e1f0:	697b      	ldr	r3, [r7, #20]
 802e1f2:	0c1b      	lsrs	r3, r3, #16
 802e1f4:	b2db      	uxtb	r3, r3
 802e1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e1fa:	b2da      	uxtb	r2, r3
 802e1fc:	68bb      	ldr	r3, [r7, #8]
 802e1fe:	701a      	strb	r2, [r3, #0]
 802e200:	697b      	ldr	r3, [r7, #20]
 802e202:	0a1b      	lsrs	r3, r3, #8
 802e204:	b2db      	uxtb	r3, r3
 802e206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802e20a:	b2da      	uxtb	r2, r3
 802e20c:	68bb      	ldr	r3, [r7, #8]
 802e20e:	705a      	strb	r2, [r3, #1]
 802e210:	697b      	ldr	r3, [r7, #20]
 802e212:	b2db      	uxtb	r3, r3
 802e214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802e218:	b2da      	uxtb	r2, r3
 802e21a:	68bb      	ldr	r3, [r7, #8]
 802e21c:	709a      	strb	r2, [r3, #2]
 802e21e:	697b      	ldr	r3, [r7, #20]
 802e220:	0c1b      	lsrs	r3, r3, #16
 802e222:	b2db      	uxtb	r3, r3
 802e224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e228:	b2da      	uxtb	r2, r3
 802e22a:	68bb      	ldr	r3, [r7, #8]
 802e22c:	731a      	strb	r2, [r3, #12]
 802e22e:	687b      	ldr	r3, [r7, #4]
 802e230:	2b00      	cmp	r3, #0
 802e232:	d11a      	bne.n	802e26a <HAL_RTC_GetTime+0xae>
 802e234:	68bb      	ldr	r3, [r7, #8]
 802e236:	781b      	ldrb	r3, [r3, #0]
 802e238:	4618      	mov	r0, r3
 802e23a:	f000 f987 	bl	802e54c <RTC_Bcd2ToByte>
 802e23e:	4603      	mov	r3, r0
 802e240:	461a      	mov	r2, r3
 802e242:	68bb      	ldr	r3, [r7, #8]
 802e244:	701a      	strb	r2, [r3, #0]
 802e246:	68bb      	ldr	r3, [r7, #8]
 802e248:	785b      	ldrb	r3, [r3, #1]
 802e24a:	4618      	mov	r0, r3
 802e24c:	f000 f97e 	bl	802e54c <RTC_Bcd2ToByte>
 802e250:	4603      	mov	r3, r0
 802e252:	461a      	mov	r2, r3
 802e254:	68bb      	ldr	r3, [r7, #8]
 802e256:	705a      	strb	r2, [r3, #1]
 802e258:	68bb      	ldr	r3, [r7, #8]
 802e25a:	789b      	ldrb	r3, [r3, #2]
 802e25c:	4618      	mov	r0, r3
 802e25e:	f000 f975 	bl	802e54c <RTC_Bcd2ToByte>
 802e262:	4603      	mov	r3, r0
 802e264:	461a      	mov	r2, r3
 802e266:	68bb      	ldr	r3, [r7, #8]
 802e268:	709a      	strb	r2, [r3, #2]
 802e26a:	2300      	movs	r3, #0
 802e26c:	4618      	mov	r0, r3
 802e26e:	3718      	adds	r7, #24
 802e270:	46bd      	mov	sp, r7
 802e272:	bd80      	pop	{r7, pc}
 802e274:	007f7f7f 	.word	0x007f7f7f

0802e278 <HAL_RTC_SetDate>:
 802e278:	b590      	push	{r4, r7, lr}
 802e27a:	b087      	sub	sp, #28
 802e27c:	af00      	add	r7, sp, #0
 802e27e:	60f8      	str	r0, [r7, #12]
 802e280:	60b9      	str	r1, [r7, #8]
 802e282:	607a      	str	r2, [r7, #4]
 802e284:	2300      	movs	r3, #0
 802e286:	617b      	str	r3, [r7, #20]
 802e288:	68fb      	ldr	r3, [r7, #12]
 802e28a:	7f1b      	ldrb	r3, [r3, #28]
 802e28c:	2b01      	cmp	r3, #1
 802e28e:	d101      	bne.n	802e294 <HAL_RTC_SetDate+0x1c>
 802e290:	2302      	movs	r3, #2
 802e292:	e092      	b.n	802e3ba <HAL_RTC_SetDate+0x142>
 802e294:	68fb      	ldr	r3, [r7, #12]
 802e296:	2201      	movs	r2, #1
 802e298:	771a      	strb	r2, [r3, #28]
 802e29a:	68fb      	ldr	r3, [r7, #12]
 802e29c:	2202      	movs	r2, #2
 802e29e:	775a      	strb	r2, [r3, #29]
 802e2a0:	687b      	ldr	r3, [r7, #4]
 802e2a2:	2b00      	cmp	r3, #0
 802e2a4:	d10e      	bne.n	802e2c4 <HAL_RTC_SetDate+0x4c>
 802e2a6:	68bb      	ldr	r3, [r7, #8]
 802e2a8:	785b      	ldrb	r3, [r3, #1]
 802e2aa:	f003 0310 	and.w	r3, r3, #16
 802e2ae:	2b00      	cmp	r3, #0
 802e2b0:	d008      	beq.n	802e2c4 <HAL_RTC_SetDate+0x4c>
 802e2b2:	68bb      	ldr	r3, [r7, #8]
 802e2b4:	785b      	ldrb	r3, [r3, #1]
 802e2b6:	f023 0310 	bic.w	r3, r3, #16
 802e2ba:	b2db      	uxtb	r3, r3
 802e2bc:	330a      	adds	r3, #10
 802e2be:	b2da      	uxtb	r2, r3
 802e2c0:	68bb      	ldr	r3, [r7, #8]
 802e2c2:	705a      	strb	r2, [r3, #1]
 802e2c4:	687b      	ldr	r3, [r7, #4]
 802e2c6:	2b00      	cmp	r3, #0
 802e2c8:	d11c      	bne.n	802e304 <HAL_RTC_SetDate+0x8c>
 802e2ca:	68bb      	ldr	r3, [r7, #8]
 802e2cc:	78db      	ldrb	r3, [r3, #3]
 802e2ce:	4618      	mov	r0, r3
 802e2d0:	f000 f91e 	bl	802e510 <RTC_ByteToBcd2>
 802e2d4:	4603      	mov	r3, r0
 802e2d6:	041c      	lsls	r4, r3, #16
 802e2d8:	68bb      	ldr	r3, [r7, #8]
 802e2da:	785b      	ldrb	r3, [r3, #1]
 802e2dc:	4618      	mov	r0, r3
 802e2de:	f000 f917 	bl	802e510 <RTC_ByteToBcd2>
 802e2e2:	4603      	mov	r3, r0
 802e2e4:	021b      	lsls	r3, r3, #8
 802e2e6:	431c      	orrs	r4, r3
 802e2e8:	68bb      	ldr	r3, [r7, #8]
 802e2ea:	789b      	ldrb	r3, [r3, #2]
 802e2ec:	4618      	mov	r0, r3
 802e2ee:	f000 f90f 	bl	802e510 <RTC_ByteToBcd2>
 802e2f2:	4603      	mov	r3, r0
 802e2f4:	ea44 0203 	orr.w	r2, r4, r3
 802e2f8:	68bb      	ldr	r3, [r7, #8]
 802e2fa:	781b      	ldrb	r3, [r3, #0]
 802e2fc:	035b      	lsls	r3, r3, #13
 802e2fe:	4313      	orrs	r3, r2
 802e300:	617b      	str	r3, [r7, #20]
 802e302:	e00e      	b.n	802e322 <HAL_RTC_SetDate+0xaa>
 802e304:	68bb      	ldr	r3, [r7, #8]
 802e306:	78db      	ldrb	r3, [r3, #3]
 802e308:	041a      	lsls	r2, r3, #16
 802e30a:	68bb      	ldr	r3, [r7, #8]
 802e30c:	785b      	ldrb	r3, [r3, #1]
 802e30e:	021b      	lsls	r3, r3, #8
 802e310:	4313      	orrs	r3, r2
 802e312:	68ba      	ldr	r2, [r7, #8]
 802e314:	7892      	ldrb	r2, [r2, #2]
 802e316:	431a      	orrs	r2, r3
 802e318:	68bb      	ldr	r3, [r7, #8]
 802e31a:	781b      	ldrb	r3, [r3, #0]
 802e31c:	035b      	lsls	r3, r3, #13
 802e31e:	4313      	orrs	r3, r2
 802e320:	617b      	str	r3, [r7, #20]
 802e322:	68fb      	ldr	r3, [r7, #12]
 802e324:	681b      	ldr	r3, [r3, #0]
 802e326:	22ca      	movs	r2, #202	; 0xca
 802e328:	625a      	str	r2, [r3, #36]	; 0x24
 802e32a:	68fb      	ldr	r3, [r7, #12]
 802e32c:	681b      	ldr	r3, [r3, #0]
 802e32e:	2253      	movs	r2, #83	; 0x53
 802e330:	625a      	str	r2, [r3, #36]	; 0x24
 802e332:	68f8      	ldr	r0, [r7, #12]
 802e334:	f000 f8c0 	bl	802e4b8 <RTC_EnterInitMode>
 802e338:	4603      	mov	r3, r0
 802e33a:	2b00      	cmp	r3, #0
 802e33c:	d00b      	beq.n	802e356 <HAL_RTC_SetDate+0xde>
 802e33e:	68fb      	ldr	r3, [r7, #12]
 802e340:	681b      	ldr	r3, [r3, #0]
 802e342:	22ff      	movs	r2, #255	; 0xff
 802e344:	625a      	str	r2, [r3, #36]	; 0x24
 802e346:	68fb      	ldr	r3, [r7, #12]
 802e348:	2204      	movs	r2, #4
 802e34a:	775a      	strb	r2, [r3, #29]
 802e34c:	68fb      	ldr	r3, [r7, #12]
 802e34e:	2200      	movs	r2, #0
 802e350:	771a      	strb	r2, [r3, #28]
 802e352:	2301      	movs	r3, #1
 802e354:	e031      	b.n	802e3ba <HAL_RTC_SetDate+0x142>
 802e356:	68fb      	ldr	r3, [r7, #12]
 802e358:	681a      	ldr	r2, [r3, #0]
 802e35a:	6979      	ldr	r1, [r7, #20]
 802e35c:	4b19      	ldr	r3, [pc, #100]	; (802e3c4 <HAL_RTC_SetDate+0x14c>)
 802e35e:	400b      	ands	r3, r1
 802e360:	6053      	str	r3, [r2, #4]
 802e362:	68fb      	ldr	r3, [r7, #12]
 802e364:	681b      	ldr	r3, [r3, #0]
 802e366:	68da      	ldr	r2, [r3, #12]
 802e368:	68fb      	ldr	r3, [r7, #12]
 802e36a:	681b      	ldr	r3, [r3, #0]
 802e36c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802e370:	60da      	str	r2, [r3, #12]
 802e372:	68fb      	ldr	r3, [r7, #12]
 802e374:	681b      	ldr	r3, [r3, #0]
 802e376:	689b      	ldr	r3, [r3, #8]
 802e378:	f003 0320 	and.w	r3, r3, #32
 802e37c:	2b00      	cmp	r3, #0
 802e37e:	d111      	bne.n	802e3a4 <HAL_RTC_SetDate+0x12c>
 802e380:	68f8      	ldr	r0, [r7, #12]
 802e382:	f000 f871 	bl	802e468 <HAL_RTC_WaitForSynchro>
 802e386:	4603      	mov	r3, r0
 802e388:	2b00      	cmp	r3, #0
 802e38a:	d00b      	beq.n	802e3a4 <HAL_RTC_SetDate+0x12c>
 802e38c:	68fb      	ldr	r3, [r7, #12]
 802e38e:	681b      	ldr	r3, [r3, #0]
 802e390:	22ff      	movs	r2, #255	; 0xff
 802e392:	625a      	str	r2, [r3, #36]	; 0x24
 802e394:	68fb      	ldr	r3, [r7, #12]
 802e396:	2204      	movs	r2, #4
 802e398:	775a      	strb	r2, [r3, #29]
 802e39a:	68fb      	ldr	r3, [r7, #12]
 802e39c:	2200      	movs	r2, #0
 802e39e:	771a      	strb	r2, [r3, #28]
 802e3a0:	2301      	movs	r3, #1
 802e3a2:	e00a      	b.n	802e3ba <HAL_RTC_SetDate+0x142>
 802e3a4:	68fb      	ldr	r3, [r7, #12]
 802e3a6:	681b      	ldr	r3, [r3, #0]
 802e3a8:	22ff      	movs	r2, #255	; 0xff
 802e3aa:	625a      	str	r2, [r3, #36]	; 0x24
 802e3ac:	68fb      	ldr	r3, [r7, #12]
 802e3ae:	2201      	movs	r2, #1
 802e3b0:	775a      	strb	r2, [r3, #29]
 802e3b2:	68fb      	ldr	r3, [r7, #12]
 802e3b4:	2200      	movs	r2, #0
 802e3b6:	771a      	strb	r2, [r3, #28]
 802e3b8:	2300      	movs	r3, #0
 802e3ba:	4618      	mov	r0, r3
 802e3bc:	371c      	adds	r7, #28
 802e3be:	46bd      	mov	sp, r7
 802e3c0:	bd90      	pop	{r4, r7, pc}
 802e3c2:	bf00      	nop
 802e3c4:	00ffff3f 	.word	0x00ffff3f

0802e3c8 <HAL_RTC_GetDate>:
 802e3c8:	b580      	push	{r7, lr}
 802e3ca:	b086      	sub	sp, #24
 802e3cc:	af00      	add	r7, sp, #0
 802e3ce:	60f8      	str	r0, [r7, #12]
 802e3d0:	60b9      	str	r1, [r7, #8]
 802e3d2:	607a      	str	r2, [r7, #4]
 802e3d4:	2300      	movs	r3, #0
 802e3d6:	617b      	str	r3, [r7, #20]
 802e3d8:	68fb      	ldr	r3, [r7, #12]
 802e3da:	681b      	ldr	r3, [r3, #0]
 802e3dc:	685a      	ldr	r2, [r3, #4]
 802e3de:	4b21      	ldr	r3, [pc, #132]	; (802e464 <HAL_RTC_GetDate+0x9c>)
 802e3e0:	4013      	ands	r3, r2
 802e3e2:	617b      	str	r3, [r7, #20]
 802e3e4:	697b      	ldr	r3, [r7, #20]
 802e3e6:	0c1b      	lsrs	r3, r3, #16
 802e3e8:	b2da      	uxtb	r2, r3
 802e3ea:	68bb      	ldr	r3, [r7, #8]
 802e3ec:	70da      	strb	r2, [r3, #3]
 802e3ee:	697b      	ldr	r3, [r7, #20]
 802e3f0:	0a1b      	lsrs	r3, r3, #8
 802e3f2:	b2db      	uxtb	r3, r3
 802e3f4:	f003 031f 	and.w	r3, r3, #31
 802e3f8:	b2da      	uxtb	r2, r3
 802e3fa:	68bb      	ldr	r3, [r7, #8]
 802e3fc:	705a      	strb	r2, [r3, #1]
 802e3fe:	697b      	ldr	r3, [r7, #20]
 802e400:	b2db      	uxtb	r3, r3
 802e402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e406:	b2da      	uxtb	r2, r3
 802e408:	68bb      	ldr	r3, [r7, #8]
 802e40a:	709a      	strb	r2, [r3, #2]
 802e40c:	697b      	ldr	r3, [r7, #20]
 802e40e:	0b5b      	lsrs	r3, r3, #13
 802e410:	b2db      	uxtb	r3, r3
 802e412:	f003 0307 	and.w	r3, r3, #7
 802e416:	b2da      	uxtb	r2, r3
 802e418:	68bb      	ldr	r3, [r7, #8]
 802e41a:	701a      	strb	r2, [r3, #0]
 802e41c:	687b      	ldr	r3, [r7, #4]
 802e41e:	2b00      	cmp	r3, #0
 802e420:	d11a      	bne.n	802e458 <HAL_RTC_GetDate+0x90>
 802e422:	68bb      	ldr	r3, [r7, #8]
 802e424:	78db      	ldrb	r3, [r3, #3]
 802e426:	4618      	mov	r0, r3
 802e428:	f000 f890 	bl	802e54c <RTC_Bcd2ToByte>
 802e42c:	4603      	mov	r3, r0
 802e42e:	461a      	mov	r2, r3
 802e430:	68bb      	ldr	r3, [r7, #8]
 802e432:	70da      	strb	r2, [r3, #3]
 802e434:	68bb      	ldr	r3, [r7, #8]
 802e436:	785b      	ldrb	r3, [r3, #1]
 802e438:	4618      	mov	r0, r3
 802e43a:	f000 f887 	bl	802e54c <RTC_Bcd2ToByte>
 802e43e:	4603      	mov	r3, r0
 802e440:	461a      	mov	r2, r3
 802e442:	68bb      	ldr	r3, [r7, #8]
 802e444:	705a      	strb	r2, [r3, #1]
 802e446:	68bb      	ldr	r3, [r7, #8]
 802e448:	789b      	ldrb	r3, [r3, #2]
 802e44a:	4618      	mov	r0, r3
 802e44c:	f000 f87e 	bl	802e54c <RTC_Bcd2ToByte>
 802e450:	4603      	mov	r3, r0
 802e452:	461a      	mov	r2, r3
 802e454:	68bb      	ldr	r3, [r7, #8]
 802e456:	709a      	strb	r2, [r3, #2]
 802e458:	2300      	movs	r3, #0
 802e45a:	4618      	mov	r0, r3
 802e45c:	3718      	adds	r7, #24
 802e45e:	46bd      	mov	sp, r7
 802e460:	bd80      	pop	{r7, pc}
 802e462:	bf00      	nop
 802e464:	00ffff3f 	.word	0x00ffff3f

0802e468 <HAL_RTC_WaitForSynchro>:
 802e468:	b580      	push	{r7, lr}
 802e46a:	b084      	sub	sp, #16
 802e46c:	af00      	add	r7, sp, #0
 802e46e:	6078      	str	r0, [r7, #4]
 802e470:	2300      	movs	r3, #0
 802e472:	60fb      	str	r3, [r7, #12]
 802e474:	687b      	ldr	r3, [r7, #4]
 802e476:	681b      	ldr	r3, [r3, #0]
 802e478:	68da      	ldr	r2, [r3, #12]
 802e47a:	687b      	ldr	r3, [r7, #4]
 802e47c:	681b      	ldr	r3, [r3, #0]
 802e47e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802e482:	60da      	str	r2, [r3, #12]
 802e484:	f7fa fd1e 	bl	8028ec4 <HAL_GetTick>
 802e488:	60f8      	str	r0, [r7, #12]
 802e48a:	e009      	b.n	802e4a0 <HAL_RTC_WaitForSynchro+0x38>
 802e48c:	f7fa fd1a 	bl	8028ec4 <HAL_GetTick>
 802e490:	4602      	mov	r2, r0
 802e492:	68fb      	ldr	r3, [r7, #12]
 802e494:	1ad3      	subs	r3, r2, r3
 802e496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e49a:	d901      	bls.n	802e4a0 <HAL_RTC_WaitForSynchro+0x38>
 802e49c:	2303      	movs	r3, #3
 802e49e:	e007      	b.n	802e4b0 <HAL_RTC_WaitForSynchro+0x48>
 802e4a0:	687b      	ldr	r3, [r7, #4]
 802e4a2:	681b      	ldr	r3, [r3, #0]
 802e4a4:	68db      	ldr	r3, [r3, #12]
 802e4a6:	f003 0320 	and.w	r3, r3, #32
 802e4aa:	2b00      	cmp	r3, #0
 802e4ac:	d0ee      	beq.n	802e48c <HAL_RTC_WaitForSynchro+0x24>
 802e4ae:	2300      	movs	r3, #0
 802e4b0:	4618      	mov	r0, r3
 802e4b2:	3710      	adds	r7, #16
 802e4b4:	46bd      	mov	sp, r7
 802e4b6:	bd80      	pop	{r7, pc}

0802e4b8 <RTC_EnterInitMode>:
 802e4b8:	b580      	push	{r7, lr}
 802e4ba:	b084      	sub	sp, #16
 802e4bc:	af00      	add	r7, sp, #0
 802e4be:	6078      	str	r0, [r7, #4]
 802e4c0:	2300      	movs	r3, #0
 802e4c2:	60fb      	str	r3, [r7, #12]
 802e4c4:	687b      	ldr	r3, [r7, #4]
 802e4c6:	681b      	ldr	r3, [r3, #0]
 802e4c8:	68db      	ldr	r3, [r3, #12]
 802e4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e4ce:	2b00      	cmp	r3, #0
 802e4d0:	d119      	bne.n	802e506 <RTC_EnterInitMode+0x4e>
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	681b      	ldr	r3, [r3, #0]
 802e4d6:	f04f 32ff 	mov.w	r2, #4294967295
 802e4da:	60da      	str	r2, [r3, #12]
 802e4dc:	f7fa fcf2 	bl	8028ec4 <HAL_GetTick>
 802e4e0:	60f8      	str	r0, [r7, #12]
 802e4e2:	e009      	b.n	802e4f8 <RTC_EnterInitMode+0x40>
 802e4e4:	f7fa fcee 	bl	8028ec4 <HAL_GetTick>
 802e4e8:	4602      	mov	r2, r0
 802e4ea:	68fb      	ldr	r3, [r7, #12]
 802e4ec:	1ad3      	subs	r3, r2, r3
 802e4ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802e4f2:	d901      	bls.n	802e4f8 <RTC_EnterInitMode+0x40>
 802e4f4:	2303      	movs	r3, #3
 802e4f6:	e007      	b.n	802e508 <RTC_EnterInitMode+0x50>
 802e4f8:	687b      	ldr	r3, [r7, #4]
 802e4fa:	681b      	ldr	r3, [r3, #0]
 802e4fc:	68db      	ldr	r3, [r3, #12]
 802e4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e502:	2b00      	cmp	r3, #0
 802e504:	d0ee      	beq.n	802e4e4 <RTC_EnterInitMode+0x2c>
 802e506:	2300      	movs	r3, #0
 802e508:	4618      	mov	r0, r3
 802e50a:	3710      	adds	r7, #16
 802e50c:	46bd      	mov	sp, r7
 802e50e:	bd80      	pop	{r7, pc}

0802e510 <RTC_ByteToBcd2>:
 802e510:	b480      	push	{r7}
 802e512:	b085      	sub	sp, #20
 802e514:	af00      	add	r7, sp, #0
 802e516:	4603      	mov	r3, r0
 802e518:	71fb      	strb	r3, [r7, #7]
 802e51a:	2300      	movs	r3, #0
 802e51c:	60fb      	str	r3, [r7, #12]
 802e51e:	e005      	b.n	802e52c <RTC_ByteToBcd2+0x1c>
 802e520:	68fb      	ldr	r3, [r7, #12]
 802e522:	3301      	adds	r3, #1
 802e524:	60fb      	str	r3, [r7, #12]
 802e526:	79fb      	ldrb	r3, [r7, #7]
 802e528:	3b0a      	subs	r3, #10
 802e52a:	71fb      	strb	r3, [r7, #7]
 802e52c:	79fb      	ldrb	r3, [r7, #7]
 802e52e:	2b09      	cmp	r3, #9
 802e530:	d8f6      	bhi.n	802e520 <RTC_ByteToBcd2+0x10>
 802e532:	68fb      	ldr	r3, [r7, #12]
 802e534:	b2db      	uxtb	r3, r3
 802e536:	011b      	lsls	r3, r3, #4
 802e538:	b2da      	uxtb	r2, r3
 802e53a:	79fb      	ldrb	r3, [r7, #7]
 802e53c:	4313      	orrs	r3, r2
 802e53e:	b2db      	uxtb	r3, r3
 802e540:	4618      	mov	r0, r3
 802e542:	3714      	adds	r7, #20
 802e544:	46bd      	mov	sp, r7
 802e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e54a:	4770      	bx	lr

0802e54c <RTC_Bcd2ToByte>:
 802e54c:	b480      	push	{r7}
 802e54e:	b085      	sub	sp, #20
 802e550:	af00      	add	r7, sp, #0
 802e552:	4603      	mov	r3, r0
 802e554:	71fb      	strb	r3, [r7, #7]
 802e556:	2300      	movs	r3, #0
 802e558:	60fb      	str	r3, [r7, #12]
 802e55a:	79fb      	ldrb	r3, [r7, #7]
 802e55c:	091b      	lsrs	r3, r3, #4
 802e55e:	b2db      	uxtb	r3, r3
 802e560:	461a      	mov	r2, r3
 802e562:	4613      	mov	r3, r2
 802e564:	009b      	lsls	r3, r3, #2
 802e566:	4413      	add	r3, r2
 802e568:	005b      	lsls	r3, r3, #1
 802e56a:	60fb      	str	r3, [r7, #12]
 802e56c:	79fb      	ldrb	r3, [r7, #7]
 802e56e:	f003 030f 	and.w	r3, r3, #15
 802e572:	b2da      	uxtb	r2, r3
 802e574:	68fb      	ldr	r3, [r7, #12]
 802e576:	b2db      	uxtb	r3, r3
 802e578:	4413      	add	r3, r2
 802e57a:	b2db      	uxtb	r3, r3
 802e57c:	4618      	mov	r0, r3
 802e57e:	3714      	adds	r7, #20
 802e580:	46bd      	mov	sp, r7
 802e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e586:	4770      	bx	lr

0802e588 <HAL_RTCEx_BKUPWrite>:
 802e588:	b480      	push	{r7}
 802e58a:	b087      	sub	sp, #28
 802e58c:	af00      	add	r7, sp, #0
 802e58e:	60f8      	str	r0, [r7, #12]
 802e590:	60b9      	str	r1, [r7, #8]
 802e592:	607a      	str	r2, [r7, #4]
 802e594:	2300      	movs	r3, #0
 802e596:	617b      	str	r3, [r7, #20]
 802e598:	68fb      	ldr	r3, [r7, #12]
 802e59a:	681b      	ldr	r3, [r3, #0]
 802e59c:	3350      	adds	r3, #80	; 0x50
 802e59e:	617b      	str	r3, [r7, #20]
 802e5a0:	68bb      	ldr	r3, [r7, #8]
 802e5a2:	009b      	lsls	r3, r3, #2
 802e5a4:	697a      	ldr	r2, [r7, #20]
 802e5a6:	4413      	add	r3, r2
 802e5a8:	617b      	str	r3, [r7, #20]
 802e5aa:	697b      	ldr	r3, [r7, #20]
 802e5ac:	687a      	ldr	r2, [r7, #4]
 802e5ae:	601a      	str	r2, [r3, #0]
 802e5b0:	bf00      	nop
 802e5b2:	371c      	adds	r7, #28
 802e5b4:	46bd      	mov	sp, r7
 802e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5ba:	4770      	bx	lr

0802e5bc <HAL_RTCEx_BKUPRead>:
 802e5bc:	b480      	push	{r7}
 802e5be:	b085      	sub	sp, #20
 802e5c0:	af00      	add	r7, sp, #0
 802e5c2:	6078      	str	r0, [r7, #4]
 802e5c4:	6039      	str	r1, [r7, #0]
 802e5c6:	2300      	movs	r3, #0
 802e5c8:	60fb      	str	r3, [r7, #12]
 802e5ca:	687b      	ldr	r3, [r7, #4]
 802e5cc:	681b      	ldr	r3, [r3, #0]
 802e5ce:	3350      	adds	r3, #80	; 0x50
 802e5d0:	60fb      	str	r3, [r7, #12]
 802e5d2:	683b      	ldr	r3, [r7, #0]
 802e5d4:	009b      	lsls	r3, r3, #2
 802e5d6:	68fa      	ldr	r2, [r7, #12]
 802e5d8:	4413      	add	r3, r2
 802e5da:	60fb      	str	r3, [r7, #12]
 802e5dc:	68fb      	ldr	r3, [r7, #12]
 802e5de:	681b      	ldr	r3, [r3, #0]
 802e5e0:	4618      	mov	r0, r3
 802e5e2:	3714      	adds	r7, #20
 802e5e4:	46bd      	mov	sp, r7
 802e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5ea:	4770      	bx	lr

0802e5ec <HAL_SD_IRQHandler>:
 802e5ec:	b580      	push	{r7, lr}
 802e5ee:	b084      	sub	sp, #16
 802e5f0:	af00      	add	r7, sp, #0
 802e5f2:	6078      	str	r0, [r7, #4]
 802e5f4:	2300      	movs	r3, #0
 802e5f6:	60fb      	str	r3, [r7, #12]
 802e5f8:	687b      	ldr	r3, [r7, #4]
 802e5fa:	681b      	ldr	r3, [r3, #0]
 802e5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e602:	2b00      	cmp	r3, #0
 802e604:	f000 808b 	beq.w	802e71e <HAL_SD_IRQHandler+0x132>
 802e608:	687b      	ldr	r3, [r7, #4]
 802e60a:	681b      	ldr	r3, [r3, #0]
 802e60c:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e610:	639a      	str	r2, [r3, #56]	; 0x38
 802e612:	687b      	ldr	r3, [r7, #4]
 802e614:	681b      	ldr	r3, [r3, #0]
 802e616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802e618:	687b      	ldr	r3, [r7, #4]
 802e61a:	681b      	ldr	r3, [r3, #0]
 802e61c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 802e620:	63da      	str	r2, [r3, #60]	; 0x3c
 802e622:	687b      	ldr	r3, [r7, #4]
 802e624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e626:	f003 0308 	and.w	r3, r3, #8
 802e62a:	2b00      	cmp	r3, #0
 802e62c:	d03a      	beq.n	802e6a4 <HAL_SD_IRQHandler+0xb8>
 802e62e:	687b      	ldr	r3, [r7, #4]
 802e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e632:	f003 0302 	and.w	r3, r3, #2
 802e636:	2b00      	cmp	r3, #0
 802e638:	d105      	bne.n	802e646 <HAL_SD_IRQHandler+0x5a>
 802e63a:	687b      	ldr	r3, [r7, #4]
 802e63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e63e:	f003 0320 	and.w	r3, r3, #32
 802e642:	2b00      	cmp	r3, #0
 802e644:	d011      	beq.n	802e66a <HAL_SD_IRQHandler+0x7e>
 802e646:	687b      	ldr	r3, [r7, #4]
 802e648:	681b      	ldr	r3, [r3, #0]
 802e64a:	4618      	mov	r0, r3
 802e64c:	f003 f870 	bl	8031730 <SDMMC_CmdStopTransfer>
 802e650:	60f8      	str	r0, [r7, #12]
 802e652:	68fb      	ldr	r3, [r7, #12]
 802e654:	2b00      	cmp	r3, #0
 802e656:	d008      	beq.n	802e66a <HAL_SD_IRQHandler+0x7e>
 802e658:	687b      	ldr	r3, [r7, #4]
 802e65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802e65c:	68fb      	ldr	r3, [r7, #12]
 802e65e:	431a      	orrs	r2, r3
 802e660:	687b      	ldr	r3, [r7, #4]
 802e662:	639a      	str	r2, [r3, #56]	; 0x38
 802e664:	6878      	ldr	r0, [r7, #4]
 802e666:	f000 f915 	bl	802e894 <HAL_SD_ErrorCallback>
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	681b      	ldr	r3, [r3, #0]
 802e66e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 802e672:	639a      	str	r2, [r3, #56]	; 0x38
 802e674:	687b      	ldr	r3, [r7, #4]
 802e676:	2201      	movs	r2, #1
 802e678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e67c:	687b      	ldr	r3, [r7, #4]
 802e67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e680:	f003 0301 	and.w	r3, r3, #1
 802e684:	2b00      	cmp	r3, #0
 802e686:	d105      	bne.n	802e694 <HAL_SD_IRQHandler+0xa8>
 802e688:	687b      	ldr	r3, [r7, #4]
 802e68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e68c:	f003 0302 	and.w	r3, r3, #2
 802e690:	2b00      	cmp	r3, #0
 802e692:	d003      	beq.n	802e69c <HAL_SD_IRQHandler+0xb0>
 802e694:	6878      	ldr	r0, [r7, #4]
 802e696:	f7e8 fc9d 	bl	8016fd4 <HAL_SD_RxCpltCallback>
 802e69a:	e0f3      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e69c:	6878      	ldr	r0, [r7, #4]
 802e69e:	f7e8 fc89 	bl	8016fb4 <HAL_SD_TxCpltCallback>
 802e6a2:	e0ef      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e6a4:	687b      	ldr	r3, [r7, #4]
 802e6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e6ac:	2b00      	cmp	r3, #0
 802e6ae:	f000 80e9 	beq.w	802e884 <HAL_SD_IRQHandler+0x298>
 802e6b2:	687b      	ldr	r3, [r7, #4]
 802e6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e6b6:	f003 0320 	and.w	r3, r3, #32
 802e6ba:	2b00      	cmp	r3, #0
 802e6bc:	d011      	beq.n	802e6e2 <HAL_SD_IRQHandler+0xf6>
 802e6be:	687b      	ldr	r3, [r7, #4]
 802e6c0:	681b      	ldr	r3, [r3, #0]
 802e6c2:	4618      	mov	r0, r3
 802e6c4:	f003 f834 	bl	8031730 <SDMMC_CmdStopTransfer>
 802e6c8:	60f8      	str	r0, [r7, #12]
 802e6ca:	68fb      	ldr	r3, [r7, #12]
 802e6cc:	2b00      	cmp	r3, #0
 802e6ce:	d008      	beq.n	802e6e2 <HAL_SD_IRQHandler+0xf6>
 802e6d0:	687b      	ldr	r3, [r7, #4]
 802e6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802e6d4:	68fb      	ldr	r3, [r7, #12]
 802e6d6:	431a      	orrs	r2, r3
 802e6d8:	687b      	ldr	r3, [r7, #4]
 802e6da:	639a      	str	r2, [r3, #56]	; 0x38
 802e6dc:	6878      	ldr	r0, [r7, #4]
 802e6de:	f000 f8d9 	bl	802e894 <HAL_SD_ErrorCallback>
 802e6e2:	687b      	ldr	r3, [r7, #4]
 802e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e6e6:	f003 0301 	and.w	r3, r3, #1
 802e6ea:	2b00      	cmp	r3, #0
 802e6ec:	f040 80ca 	bne.w	802e884 <HAL_SD_IRQHandler+0x298>
 802e6f0:	687b      	ldr	r3, [r7, #4]
 802e6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e6f4:	f003 0302 	and.w	r3, r3, #2
 802e6f8:	2b00      	cmp	r3, #0
 802e6fa:	f040 80c3 	bne.w	802e884 <HAL_SD_IRQHandler+0x298>
 802e6fe:	687b      	ldr	r3, [r7, #4]
 802e700:	681b      	ldr	r3, [r3, #0]
 802e702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802e704:	687b      	ldr	r3, [r7, #4]
 802e706:	681b      	ldr	r3, [r3, #0]
 802e708:	f022 0208 	bic.w	r2, r2, #8
 802e70c:	62da      	str	r2, [r3, #44]	; 0x2c
 802e70e:	687b      	ldr	r3, [r7, #4]
 802e710:	2201      	movs	r2, #1
 802e712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e716:	6878      	ldr	r0, [r7, #4]
 802e718:	f7e8 fc4c 	bl	8016fb4 <HAL_SD_TxCpltCallback>
 802e71c:	e0b2      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	681b      	ldr	r3, [r3, #0]
 802e722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802e728:	2b00      	cmp	r3, #0
 802e72a:	d008      	beq.n	802e73e <HAL_SD_IRQHandler+0x152>
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	681b      	ldr	r3, [r3, #0]
 802e730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802e734:	639a      	str	r2, [r3, #56]	; 0x38
 802e736:	6878      	ldr	r0, [r7, #4]
 802e738:	f000 f9a9 	bl	802ea8e <SD_Write_IT>
 802e73c:	e0a2      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e73e:	687b      	ldr	r3, [r7, #4]
 802e740:	681b      	ldr	r3, [r3, #0]
 802e742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802e748:	2b00      	cmp	r3, #0
 802e74a:	d008      	beq.n	802e75e <HAL_SD_IRQHandler+0x172>
 802e74c:	687b      	ldr	r3, [r7, #4]
 802e74e:	681b      	ldr	r3, [r3, #0]
 802e750:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 802e754:	639a      	str	r2, [r3, #56]	; 0x38
 802e756:	6878      	ldr	r0, [r7, #4]
 802e758:	f000 f971 	bl	802ea3e <SD_Read_IT>
 802e75c:	e092      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	681b      	ldr	r3, [r3, #0]
 802e762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e764:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 802e768:	2b00      	cmp	r3, #0
 802e76a:	f000 808b 	beq.w	802e884 <HAL_SD_IRQHandler+0x298>
 802e76e:	687b      	ldr	r3, [r7, #4]
 802e770:	681b      	ldr	r3, [r3, #0]
 802e772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e774:	f003 0302 	and.w	r3, r3, #2
 802e778:	2b00      	cmp	r3, #0
 802e77a:	d005      	beq.n	802e788 <HAL_SD_IRQHandler+0x19c>
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e780:	f043 0202 	orr.w	r2, r3, #2
 802e784:	687b      	ldr	r3, [r7, #4]
 802e786:	639a      	str	r2, [r3, #56]	; 0x38
 802e788:	687b      	ldr	r3, [r7, #4]
 802e78a:	681b      	ldr	r3, [r3, #0]
 802e78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e78e:	f003 0308 	and.w	r3, r3, #8
 802e792:	2b00      	cmp	r3, #0
 802e794:	d005      	beq.n	802e7a2 <HAL_SD_IRQHandler+0x1b6>
 802e796:	687b      	ldr	r3, [r7, #4]
 802e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e79a:	f043 0208 	orr.w	r2, r3, #8
 802e79e:	687b      	ldr	r3, [r7, #4]
 802e7a0:	639a      	str	r2, [r3, #56]	; 0x38
 802e7a2:	687b      	ldr	r3, [r7, #4]
 802e7a4:	681b      	ldr	r3, [r3, #0]
 802e7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e7a8:	f003 0320 	and.w	r3, r3, #32
 802e7ac:	2b00      	cmp	r3, #0
 802e7ae:	d005      	beq.n	802e7bc <HAL_SD_IRQHandler+0x1d0>
 802e7b0:	687b      	ldr	r3, [r7, #4]
 802e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e7b4:	f043 0220 	orr.w	r2, r3, #32
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	639a      	str	r2, [r3, #56]	; 0x38
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	681b      	ldr	r3, [r3, #0]
 802e7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e7c2:	f003 0310 	and.w	r3, r3, #16
 802e7c6:	2b00      	cmp	r3, #0
 802e7c8:	d005      	beq.n	802e7d6 <HAL_SD_IRQHandler+0x1ea>
 802e7ca:	687b      	ldr	r3, [r7, #4]
 802e7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e7ce:	f043 0210 	orr.w	r2, r3, #16
 802e7d2:	687b      	ldr	r3, [r7, #4]
 802e7d4:	639a      	str	r2, [r3, #56]	; 0x38
 802e7d6:	687b      	ldr	r3, [r7, #4]
 802e7d8:	681b      	ldr	r3, [r3, #0]
 802e7da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 802e7de:	639a      	str	r2, [r3, #56]	; 0x38
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	681b      	ldr	r3, [r3, #0]
 802e7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802e7e6:	687b      	ldr	r3, [r7, #4]
 802e7e8:	681b      	ldr	r3, [r3, #0]
 802e7ea:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 802e7ee:	63da      	str	r2, [r3, #60]	; 0x3c
 802e7f0:	687b      	ldr	r3, [r7, #4]
 802e7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e7f8:	2b00      	cmp	r3, #0
 802e7fa:	d036      	beq.n	802e86a <HAL_SD_IRQHandler+0x27e>
 802e7fc:	687b      	ldr	r3, [r7, #4]
 802e7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e800:	2b00      	cmp	r3, #0
 802e802:	d011      	beq.n	802e828 <HAL_SD_IRQHandler+0x23c>
 802e804:	687b      	ldr	r3, [r7, #4]
 802e806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e808:	4a20      	ldr	r2, [pc, #128]	; (802e88c <HAL_SD_IRQHandler+0x2a0>)
 802e80a:	651a      	str	r2, [r3, #80]	; 0x50
 802e80c:	687b      	ldr	r3, [r7, #4]
 802e80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e810:	4618      	mov	r0, r3
 802e812:	f7fb fced 	bl	802a1f0 <HAL_DMA_Abort_IT>
 802e816:	4603      	mov	r3, r0
 802e818:	2b00      	cmp	r3, #0
 802e81a:	d033      	beq.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e820:	4618      	mov	r0, r3
 802e822:	f000 f866 	bl	802e8f2 <SD_DMATxAbort>
 802e826:	e02d      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e828:	687b      	ldr	r3, [r7, #4]
 802e82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e82c:	2b00      	cmp	r3, #0
 802e82e:	d011      	beq.n	802e854 <HAL_SD_IRQHandler+0x268>
 802e830:	687b      	ldr	r3, [r7, #4]
 802e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e834:	4a16      	ldr	r2, [pc, #88]	; (802e890 <HAL_SD_IRQHandler+0x2a4>)
 802e836:	651a      	str	r2, [r3, #80]	; 0x50
 802e838:	687b      	ldr	r3, [r7, #4]
 802e83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e83c:	4618      	mov	r0, r3
 802e83e:	f7fb fcd7 	bl	802a1f0 <HAL_DMA_Abort_IT>
 802e842:	4603      	mov	r3, r0
 802e844:	2b00      	cmp	r3, #0
 802e846:	d01d      	beq.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e84c:	4618      	mov	r0, r3
 802e84e:	f000 f88e 	bl	802e96e <SD_DMARxAbort>
 802e852:	e017      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	2200      	movs	r2, #0
 802e858:	639a      	str	r2, [r3, #56]	; 0x38
 802e85a:	687b      	ldr	r3, [r7, #4]
 802e85c:	2201      	movs	r2, #1
 802e85e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e862:	6878      	ldr	r0, [r7, #4]
 802e864:	f7e8 fbdc 	bl	8017020 <HAL_SD_AbortCallback>
 802e868:	e00c      	b.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e86a:	687b      	ldr	r3, [r7, #4]
 802e86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e86e:	f003 0308 	and.w	r3, r3, #8
 802e872:	2b00      	cmp	r3, #0
 802e874:	d006      	beq.n	802e884 <HAL_SD_IRQHandler+0x298>
 802e876:	687b      	ldr	r3, [r7, #4]
 802e878:	2201      	movs	r2, #1
 802e87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e87e:	6878      	ldr	r0, [r7, #4]
 802e880:	f000 f808 	bl	802e894 <HAL_SD_ErrorCallback>
 802e884:	bf00      	nop
 802e886:	3710      	adds	r7, #16
 802e888:	46bd      	mov	sp, r7
 802e88a:	bd80      	pop	{r7, pc}
 802e88c:	0802e8f3 	.word	0x0802e8f3
 802e890:	0802e96f 	.word	0x0802e96f

0802e894 <HAL_SD_ErrorCallback>:
 802e894:	b480      	push	{r7}
 802e896:	b083      	sub	sp, #12
 802e898:	af00      	add	r7, sp, #0
 802e89a:	6078      	str	r0, [r7, #4]
 802e89c:	bf00      	nop
 802e89e:	370c      	adds	r7, #12
 802e8a0:	46bd      	mov	sp, r7
 802e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8a6:	4770      	bx	lr

0802e8a8 <HAL_SD_GetCardState>:
 802e8a8:	b580      	push	{r7, lr}
 802e8aa:	b086      	sub	sp, #24
 802e8ac:	af00      	add	r7, sp, #0
 802e8ae:	6078      	str	r0, [r7, #4]
 802e8b0:	2304      	movs	r3, #4
 802e8b2:	75fb      	strb	r3, [r7, #23]
 802e8b4:	2300      	movs	r3, #0
 802e8b6:	613b      	str	r3, [r7, #16]
 802e8b8:	2300      	movs	r3, #0
 802e8ba:	60fb      	str	r3, [r7, #12]
 802e8bc:	f107 030c 	add.w	r3, r7, #12
 802e8c0:	4619      	mov	r1, r3
 802e8c2:	6878      	ldr	r0, [r7, #4]
 802e8c4:	f000 f891 	bl	802e9ea <SD_SendStatus>
 802e8c8:	6138      	str	r0, [r7, #16]
 802e8ca:	693b      	ldr	r3, [r7, #16]
 802e8cc:	2b00      	cmp	r3, #0
 802e8ce:	d005      	beq.n	802e8dc <HAL_SD_GetCardState+0x34>
 802e8d0:	687b      	ldr	r3, [r7, #4]
 802e8d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802e8d4:	693b      	ldr	r3, [r7, #16]
 802e8d6:	431a      	orrs	r2, r3
 802e8d8:	687b      	ldr	r3, [r7, #4]
 802e8da:	639a      	str	r2, [r3, #56]	; 0x38
 802e8dc:	68fb      	ldr	r3, [r7, #12]
 802e8de:	0a5b      	lsrs	r3, r3, #9
 802e8e0:	b2db      	uxtb	r3, r3
 802e8e2:	f003 030f 	and.w	r3, r3, #15
 802e8e6:	75fb      	strb	r3, [r7, #23]
 802e8e8:	7dfb      	ldrb	r3, [r7, #23]
 802e8ea:	4618      	mov	r0, r3
 802e8ec:	3718      	adds	r7, #24
 802e8ee:	46bd      	mov	sp, r7
 802e8f0:	bd80      	pop	{r7, pc}

0802e8f2 <SD_DMATxAbort>:
 802e8f2:	b580      	push	{r7, lr}
 802e8f4:	b084      	sub	sp, #16
 802e8f6:	af00      	add	r7, sp, #0
 802e8f8:	6078      	str	r0, [r7, #4]
 802e8fa:	687b      	ldr	r3, [r7, #4]
 802e8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e8fe:	60fb      	str	r3, [r7, #12]
 802e900:	68fb      	ldr	r3, [r7, #12]
 802e902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e904:	2b00      	cmp	r3, #0
 802e906:	d002      	beq.n	802e90e <SD_DMATxAbort+0x1c>
 802e908:	68fb      	ldr	r3, [r7, #12]
 802e90a:	2200      	movs	r2, #0
 802e90c:	641a      	str	r2, [r3, #64]	; 0x40
 802e90e:	68fb      	ldr	r3, [r7, #12]
 802e910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e912:	2b00      	cmp	r3, #0
 802e914:	d127      	bne.n	802e966 <SD_DMATxAbort+0x74>
 802e916:	68f8      	ldr	r0, [r7, #12]
 802e918:	f7ff ffc6 	bl	802e8a8 <HAL_SD_GetCardState>
 802e91c:	4603      	mov	r3, r0
 802e91e:	72fb      	strb	r3, [r7, #11]
 802e920:	68fb      	ldr	r3, [r7, #12]
 802e922:	2200      	movs	r2, #0
 802e924:	639a      	str	r2, [r3, #56]	; 0x38
 802e926:	68fb      	ldr	r3, [r7, #12]
 802e928:	2201      	movs	r2, #1
 802e92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e92e:	7afb      	ldrb	r3, [r7, #11]
 802e930:	2b06      	cmp	r3, #6
 802e932:	d002      	beq.n	802e93a <SD_DMATxAbort+0x48>
 802e934:	7afb      	ldrb	r3, [r7, #11]
 802e936:	2b05      	cmp	r3, #5
 802e938:	d115      	bne.n	802e966 <SD_DMATxAbort+0x74>
 802e93a:	68fb      	ldr	r3, [r7, #12]
 802e93c:	681b      	ldr	r3, [r3, #0]
 802e93e:	4618      	mov	r0, r3
 802e940:	f002 fef6 	bl	8031730 <SDMMC_CmdStopTransfer>
 802e944:	4602      	mov	r2, r0
 802e946:	68fb      	ldr	r3, [r7, #12]
 802e948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e94a:	431a      	orrs	r2, r3
 802e94c:	68fb      	ldr	r3, [r7, #12]
 802e94e:	639a      	str	r2, [r3, #56]	; 0x38
 802e950:	68fb      	ldr	r3, [r7, #12]
 802e952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e954:	2b00      	cmp	r3, #0
 802e956:	d003      	beq.n	802e960 <SD_DMATxAbort+0x6e>
 802e958:	68f8      	ldr	r0, [r7, #12]
 802e95a:	f7e8 fb61 	bl	8017020 <HAL_SD_AbortCallback>
 802e95e:	e002      	b.n	802e966 <SD_DMATxAbort+0x74>
 802e960:	68f8      	ldr	r0, [r7, #12]
 802e962:	f7ff ff97 	bl	802e894 <HAL_SD_ErrorCallback>
 802e966:	bf00      	nop
 802e968:	3710      	adds	r7, #16
 802e96a:	46bd      	mov	sp, r7
 802e96c:	bd80      	pop	{r7, pc}

0802e96e <SD_DMARxAbort>:
 802e96e:	b580      	push	{r7, lr}
 802e970:	b084      	sub	sp, #16
 802e972:	af00      	add	r7, sp, #0
 802e974:	6078      	str	r0, [r7, #4]
 802e976:	687b      	ldr	r3, [r7, #4]
 802e978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e97a:	60fb      	str	r3, [r7, #12]
 802e97c:	68fb      	ldr	r3, [r7, #12]
 802e97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e980:	2b00      	cmp	r3, #0
 802e982:	d002      	beq.n	802e98a <SD_DMARxAbort+0x1c>
 802e984:	68fb      	ldr	r3, [r7, #12]
 802e986:	2200      	movs	r2, #0
 802e988:	63da      	str	r2, [r3, #60]	; 0x3c
 802e98a:	68fb      	ldr	r3, [r7, #12]
 802e98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e98e:	2b00      	cmp	r3, #0
 802e990:	d127      	bne.n	802e9e2 <SD_DMARxAbort+0x74>
 802e992:	68f8      	ldr	r0, [r7, #12]
 802e994:	f7ff ff88 	bl	802e8a8 <HAL_SD_GetCardState>
 802e998:	4603      	mov	r3, r0
 802e99a:	72fb      	strb	r3, [r7, #11]
 802e99c:	68fb      	ldr	r3, [r7, #12]
 802e99e:	2200      	movs	r2, #0
 802e9a0:	639a      	str	r2, [r3, #56]	; 0x38
 802e9a2:	68fb      	ldr	r3, [r7, #12]
 802e9a4:	2201      	movs	r2, #1
 802e9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 802e9aa:	7afb      	ldrb	r3, [r7, #11]
 802e9ac:	2b06      	cmp	r3, #6
 802e9ae:	d002      	beq.n	802e9b6 <SD_DMARxAbort+0x48>
 802e9b0:	7afb      	ldrb	r3, [r7, #11]
 802e9b2:	2b05      	cmp	r3, #5
 802e9b4:	d115      	bne.n	802e9e2 <SD_DMARxAbort+0x74>
 802e9b6:	68fb      	ldr	r3, [r7, #12]
 802e9b8:	681b      	ldr	r3, [r3, #0]
 802e9ba:	4618      	mov	r0, r3
 802e9bc:	f002 feb8 	bl	8031730 <SDMMC_CmdStopTransfer>
 802e9c0:	4602      	mov	r2, r0
 802e9c2:	68fb      	ldr	r3, [r7, #12]
 802e9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e9c6:	431a      	orrs	r2, r3
 802e9c8:	68fb      	ldr	r3, [r7, #12]
 802e9ca:	639a      	str	r2, [r3, #56]	; 0x38
 802e9cc:	68fb      	ldr	r3, [r7, #12]
 802e9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e9d0:	2b00      	cmp	r3, #0
 802e9d2:	d003      	beq.n	802e9dc <SD_DMARxAbort+0x6e>
 802e9d4:	68f8      	ldr	r0, [r7, #12]
 802e9d6:	f7e8 fb23 	bl	8017020 <HAL_SD_AbortCallback>
 802e9da:	e002      	b.n	802e9e2 <SD_DMARxAbort+0x74>
 802e9dc:	68f8      	ldr	r0, [r7, #12]
 802e9de:	f7ff ff59 	bl	802e894 <HAL_SD_ErrorCallback>
 802e9e2:	bf00      	nop
 802e9e4:	3710      	adds	r7, #16
 802e9e6:	46bd      	mov	sp, r7
 802e9e8:	bd80      	pop	{r7, pc}

0802e9ea <SD_SendStatus>:
 802e9ea:	b580      	push	{r7, lr}
 802e9ec:	b084      	sub	sp, #16
 802e9ee:	af00      	add	r7, sp, #0
 802e9f0:	6078      	str	r0, [r7, #4]
 802e9f2:	6039      	str	r1, [r7, #0]
 802e9f4:	2300      	movs	r3, #0
 802e9f6:	60fb      	str	r3, [r7, #12]
 802e9f8:	683b      	ldr	r3, [r7, #0]
 802e9fa:	2b00      	cmp	r3, #0
 802e9fc:	d102      	bne.n	802ea04 <SD_SendStatus+0x1a>
 802e9fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802ea02:	e018      	b.n	802ea36 <SD_SendStatus+0x4c>
 802ea04:	687b      	ldr	r3, [r7, #4]
 802ea06:	681a      	ldr	r2, [r3, #0]
 802ea08:	687b      	ldr	r3, [r7, #4]
 802ea0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ea0c:	041b      	lsls	r3, r3, #16
 802ea0e:	4619      	mov	r1, r3
 802ea10:	4610      	mov	r0, r2
 802ea12:	f002 feb1 	bl	8031778 <SDMMC_CmdSendStatus>
 802ea16:	60f8      	str	r0, [r7, #12]
 802ea18:	68fb      	ldr	r3, [r7, #12]
 802ea1a:	2b00      	cmp	r3, #0
 802ea1c:	d001      	beq.n	802ea22 <SD_SendStatus+0x38>
 802ea1e:	68fb      	ldr	r3, [r7, #12]
 802ea20:	e009      	b.n	802ea36 <SD_SendStatus+0x4c>
 802ea22:	687b      	ldr	r3, [r7, #4]
 802ea24:	681b      	ldr	r3, [r3, #0]
 802ea26:	2100      	movs	r1, #0
 802ea28:	4618      	mov	r0, r3
 802ea2a:	f002 fe6c 	bl	8031706 <SDMMC_GetResponse>
 802ea2e:	4602      	mov	r2, r0
 802ea30:	683b      	ldr	r3, [r7, #0]
 802ea32:	601a      	str	r2, [r3, #0]
 802ea34:	2300      	movs	r3, #0
 802ea36:	4618      	mov	r0, r3
 802ea38:	3710      	adds	r7, #16
 802ea3a:	46bd      	mov	sp, r7
 802ea3c:	bd80      	pop	{r7, pc}

0802ea3e <SD_Read_IT>:
 802ea3e:	b590      	push	{r4, r7, lr}
 802ea40:	b085      	sub	sp, #20
 802ea42:	af00      	add	r7, sp, #0
 802ea44:	6078      	str	r0, [r7, #4]
 802ea46:	2300      	movs	r3, #0
 802ea48:	60fb      	str	r3, [r7, #12]
 802ea4a:	687b      	ldr	r3, [r7, #4]
 802ea4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ea4e:	60bb      	str	r3, [r7, #8]
 802ea50:	2300      	movs	r3, #0
 802ea52:	60fb      	str	r3, [r7, #12]
 802ea54:	e00d      	b.n	802ea72 <SD_Read_IT+0x34>
 802ea56:	687b      	ldr	r3, [r7, #4]
 802ea58:	6819      	ldr	r1, [r3, #0]
 802ea5a:	68fb      	ldr	r3, [r7, #12]
 802ea5c:	009b      	lsls	r3, r3, #2
 802ea5e:	68ba      	ldr	r2, [r7, #8]
 802ea60:	18d4      	adds	r4, r2, r3
 802ea62:	4608      	mov	r0, r1
 802ea64:	f002 fdf9 	bl	803165a <SDMMC_ReadFIFO>
 802ea68:	4603      	mov	r3, r0
 802ea6a:	6023      	str	r3, [r4, #0]
 802ea6c:	68fb      	ldr	r3, [r7, #12]
 802ea6e:	3301      	adds	r3, #1
 802ea70:	60fb      	str	r3, [r7, #12]
 802ea72:	68fb      	ldr	r3, [r7, #12]
 802ea74:	2b07      	cmp	r3, #7
 802ea76:	d9ee      	bls.n	802ea56 <SD_Read_IT+0x18>
 802ea78:	687b      	ldr	r3, [r7, #4]
 802ea7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ea7c:	f103 0220 	add.w	r2, r3, #32
 802ea80:	687b      	ldr	r3, [r7, #4]
 802ea82:	629a      	str	r2, [r3, #40]	; 0x28
 802ea84:	2300      	movs	r3, #0
 802ea86:	4618      	mov	r0, r3
 802ea88:	3714      	adds	r7, #20
 802ea8a:	46bd      	mov	sp, r7
 802ea8c:	bd90      	pop	{r4, r7, pc}

0802ea8e <SD_Write_IT>:
 802ea8e:	b580      	push	{r7, lr}
 802ea90:	b084      	sub	sp, #16
 802ea92:	af00      	add	r7, sp, #0
 802ea94:	6078      	str	r0, [r7, #4]
 802ea96:	2300      	movs	r3, #0
 802ea98:	60fb      	str	r3, [r7, #12]
 802ea9a:	687b      	ldr	r3, [r7, #4]
 802ea9c:	6a1b      	ldr	r3, [r3, #32]
 802ea9e:	60bb      	str	r3, [r7, #8]
 802eaa0:	2300      	movs	r3, #0
 802eaa2:	60fb      	str	r3, [r7, #12]
 802eaa4:	e00b      	b.n	802eabe <SD_Write_IT+0x30>
 802eaa6:	687b      	ldr	r3, [r7, #4]
 802eaa8:	6818      	ldr	r0, [r3, #0]
 802eaaa:	68fb      	ldr	r3, [r7, #12]
 802eaac:	009b      	lsls	r3, r3, #2
 802eaae:	68ba      	ldr	r2, [r7, #8]
 802eab0:	4413      	add	r3, r2
 802eab2:	4619      	mov	r1, r3
 802eab4:	f002 fdde 	bl	8031674 <SDMMC_WriteFIFO>
 802eab8:	68fb      	ldr	r3, [r7, #12]
 802eaba:	3301      	adds	r3, #1
 802eabc:	60fb      	str	r3, [r7, #12]
 802eabe:	68fb      	ldr	r3, [r7, #12]
 802eac0:	2b07      	cmp	r3, #7
 802eac2:	d9f0      	bls.n	802eaa6 <SD_Write_IT+0x18>
 802eac4:	687b      	ldr	r3, [r7, #4]
 802eac6:	6a1b      	ldr	r3, [r3, #32]
 802eac8:	f103 0220 	add.w	r2, r3, #32
 802eacc:	687b      	ldr	r3, [r7, #4]
 802eace:	621a      	str	r2, [r3, #32]
 802ead0:	2300      	movs	r3, #0
 802ead2:	4618      	mov	r0, r3
 802ead4:	3710      	adds	r7, #16
 802ead6:	46bd      	mov	sp, r7
 802ead8:	bd80      	pop	{r7, pc}

0802eada <HAL_SPI_Init>:
 802eada:	b580      	push	{r7, lr}
 802eadc:	b084      	sub	sp, #16
 802eade:	af00      	add	r7, sp, #0
 802eae0:	6078      	str	r0, [r7, #4]
 802eae2:	687b      	ldr	r3, [r7, #4]
 802eae4:	2b00      	cmp	r3, #0
 802eae6:	d101      	bne.n	802eaec <HAL_SPI_Init+0x12>
 802eae8:	2301      	movs	r3, #1
 802eaea:	e084      	b.n	802ebf6 <HAL_SPI_Init+0x11c>
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	2200      	movs	r2, #0
 802eaf0:	629a      	str	r2, [r3, #40]	; 0x28
 802eaf2:	687b      	ldr	r3, [r7, #4]
 802eaf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802eaf8:	b2db      	uxtb	r3, r3
 802eafa:	2b00      	cmp	r3, #0
 802eafc:	d106      	bne.n	802eb0c <HAL_SPI_Init+0x32>
 802eafe:	687b      	ldr	r3, [r7, #4]
 802eb00:	2200      	movs	r2, #0
 802eb02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802eb06:	6878      	ldr	r0, [r7, #4]
 802eb08:	f000 f8a1 	bl	802ec4e <HAL_SPI_MspInit>
 802eb0c:	687b      	ldr	r3, [r7, #4]
 802eb0e:	2202      	movs	r2, #2
 802eb10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	681b      	ldr	r3, [r3, #0]
 802eb18:	681a      	ldr	r2, [r3, #0]
 802eb1a:	687b      	ldr	r3, [r7, #4]
 802eb1c:	681b      	ldr	r3, [r3, #0]
 802eb1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802eb22:	601a      	str	r2, [r3, #0]
 802eb24:	687b      	ldr	r3, [r7, #4]
 802eb26:	68db      	ldr	r3, [r3, #12]
 802eb28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802eb2c:	d902      	bls.n	802eb34 <HAL_SPI_Init+0x5a>
 802eb2e:	2300      	movs	r3, #0
 802eb30:	60fb      	str	r3, [r7, #12]
 802eb32:	e002      	b.n	802eb3a <HAL_SPI_Init+0x60>
 802eb34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802eb38:	60fb      	str	r3, [r7, #12]
 802eb3a:	687b      	ldr	r3, [r7, #4]
 802eb3c:	68db      	ldr	r3, [r3, #12]
 802eb3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 802eb42:	d007      	beq.n	802eb54 <HAL_SPI_Init+0x7a>
 802eb44:	687b      	ldr	r3, [r7, #4]
 802eb46:	68db      	ldr	r3, [r3, #12]
 802eb48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802eb4c:	d002      	beq.n	802eb54 <HAL_SPI_Init+0x7a>
 802eb4e:	687b      	ldr	r3, [r7, #4]
 802eb50:	2200      	movs	r2, #0
 802eb52:	629a      	str	r2, [r3, #40]	; 0x28
 802eb54:	687b      	ldr	r3, [r7, #4]
 802eb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802eb58:	2b00      	cmp	r3, #0
 802eb5a:	d10b      	bne.n	802eb74 <HAL_SPI_Init+0x9a>
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	68db      	ldr	r3, [r3, #12]
 802eb60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802eb64:	d903      	bls.n	802eb6e <HAL_SPI_Init+0x94>
 802eb66:	687b      	ldr	r3, [r7, #4]
 802eb68:	2202      	movs	r2, #2
 802eb6a:	631a      	str	r2, [r3, #48]	; 0x30
 802eb6c:	e002      	b.n	802eb74 <HAL_SPI_Init+0x9a>
 802eb6e:	687b      	ldr	r3, [r7, #4]
 802eb70:	2201      	movs	r2, #1
 802eb72:	631a      	str	r2, [r3, #48]	; 0x30
 802eb74:	687b      	ldr	r3, [r7, #4]
 802eb76:	685a      	ldr	r2, [r3, #4]
 802eb78:	687b      	ldr	r3, [r7, #4]
 802eb7a:	689b      	ldr	r3, [r3, #8]
 802eb7c:	431a      	orrs	r2, r3
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	691b      	ldr	r3, [r3, #16]
 802eb82:	431a      	orrs	r2, r3
 802eb84:	687b      	ldr	r3, [r7, #4]
 802eb86:	695b      	ldr	r3, [r3, #20]
 802eb88:	431a      	orrs	r2, r3
 802eb8a:	687b      	ldr	r3, [r7, #4]
 802eb8c:	699b      	ldr	r3, [r3, #24]
 802eb8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802eb92:	431a      	orrs	r2, r3
 802eb94:	687b      	ldr	r3, [r7, #4]
 802eb96:	69db      	ldr	r3, [r3, #28]
 802eb98:	431a      	orrs	r2, r3
 802eb9a:	687b      	ldr	r3, [r7, #4]
 802eb9c:	6a1b      	ldr	r3, [r3, #32]
 802eb9e:	ea42 0103 	orr.w	r1, r2, r3
 802eba2:	687b      	ldr	r3, [r7, #4]
 802eba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802eba6:	687b      	ldr	r3, [r7, #4]
 802eba8:	681b      	ldr	r3, [r3, #0]
 802ebaa:	430a      	orrs	r2, r1
 802ebac:	601a      	str	r2, [r3, #0]
 802ebae:	687b      	ldr	r3, [r7, #4]
 802ebb0:	699b      	ldr	r3, [r3, #24]
 802ebb2:	0c1b      	lsrs	r3, r3, #16
 802ebb4:	f003 0204 	and.w	r2, r3, #4
 802ebb8:	687b      	ldr	r3, [r7, #4]
 802ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ebbc:	431a      	orrs	r2, r3
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ebc2:	431a      	orrs	r2, r3
 802ebc4:	687b      	ldr	r3, [r7, #4]
 802ebc6:	68db      	ldr	r3, [r3, #12]
 802ebc8:	ea42 0103 	orr.w	r1, r2, r3
 802ebcc:	687b      	ldr	r3, [r7, #4]
 802ebce:	681b      	ldr	r3, [r3, #0]
 802ebd0:	68fa      	ldr	r2, [r7, #12]
 802ebd2:	430a      	orrs	r2, r1
 802ebd4:	605a      	str	r2, [r3, #4]
 802ebd6:	687b      	ldr	r3, [r7, #4]
 802ebd8:	681b      	ldr	r3, [r3, #0]
 802ebda:	69da      	ldr	r2, [r3, #28]
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	681b      	ldr	r3, [r3, #0]
 802ebe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802ebe4:	61da      	str	r2, [r3, #28]
 802ebe6:	687b      	ldr	r3, [r7, #4]
 802ebe8:	2200      	movs	r2, #0
 802ebea:	661a      	str	r2, [r3, #96]	; 0x60
 802ebec:	687b      	ldr	r3, [r7, #4]
 802ebee:	2201      	movs	r2, #1
 802ebf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ebf4:	2300      	movs	r3, #0
 802ebf6:	4618      	mov	r0, r3
 802ebf8:	3710      	adds	r7, #16
 802ebfa:	46bd      	mov	sp, r7
 802ebfc:	bd80      	pop	{r7, pc}

0802ebfe <HAL_SPI_DeInit>:
 802ebfe:	b580      	push	{r7, lr}
 802ec00:	b082      	sub	sp, #8
 802ec02:	af00      	add	r7, sp, #0
 802ec04:	6078      	str	r0, [r7, #4]
 802ec06:	687b      	ldr	r3, [r7, #4]
 802ec08:	2b00      	cmp	r3, #0
 802ec0a:	d101      	bne.n	802ec10 <HAL_SPI_DeInit+0x12>
 802ec0c:	2301      	movs	r3, #1
 802ec0e:	e01a      	b.n	802ec46 <HAL_SPI_DeInit+0x48>
 802ec10:	687b      	ldr	r3, [r7, #4]
 802ec12:	2202      	movs	r2, #2
 802ec14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ec18:	687b      	ldr	r3, [r7, #4]
 802ec1a:	681b      	ldr	r3, [r3, #0]
 802ec1c:	681a      	ldr	r2, [r3, #0]
 802ec1e:	687b      	ldr	r3, [r7, #4]
 802ec20:	681b      	ldr	r3, [r3, #0]
 802ec22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ec26:	601a      	str	r2, [r3, #0]
 802ec28:	6878      	ldr	r0, [r7, #4]
 802ec2a:	f000 f81a 	bl	802ec62 <HAL_SPI_MspDeInit>
 802ec2e:	687b      	ldr	r3, [r7, #4]
 802ec30:	2200      	movs	r2, #0
 802ec32:	661a      	str	r2, [r3, #96]	; 0x60
 802ec34:	687b      	ldr	r3, [r7, #4]
 802ec36:	2200      	movs	r2, #0
 802ec38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ec3c:	687b      	ldr	r3, [r7, #4]
 802ec3e:	2200      	movs	r2, #0
 802ec40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802ec44:	2300      	movs	r3, #0
 802ec46:	4618      	mov	r0, r3
 802ec48:	3708      	adds	r7, #8
 802ec4a:	46bd      	mov	sp, r7
 802ec4c:	bd80      	pop	{r7, pc}

0802ec4e <HAL_SPI_MspInit>:
 802ec4e:	b480      	push	{r7}
 802ec50:	b083      	sub	sp, #12
 802ec52:	af00      	add	r7, sp, #0
 802ec54:	6078      	str	r0, [r7, #4]
 802ec56:	bf00      	nop
 802ec58:	370c      	adds	r7, #12
 802ec5a:	46bd      	mov	sp, r7
 802ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec60:	4770      	bx	lr

0802ec62 <HAL_SPI_MspDeInit>:
 802ec62:	b480      	push	{r7}
 802ec64:	b083      	sub	sp, #12
 802ec66:	af00      	add	r7, sp, #0
 802ec68:	6078      	str	r0, [r7, #4]
 802ec6a:	bf00      	nop
 802ec6c:	370c      	adds	r7, #12
 802ec6e:	46bd      	mov	sp, r7
 802ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec74:	4770      	bx	lr

0802ec76 <HAL_SPI_Transmit>:
 802ec76:	b580      	push	{r7, lr}
 802ec78:	b088      	sub	sp, #32
 802ec7a:	af00      	add	r7, sp, #0
 802ec7c:	60f8      	str	r0, [r7, #12]
 802ec7e:	60b9      	str	r1, [r7, #8]
 802ec80:	603b      	str	r3, [r7, #0]
 802ec82:	4613      	mov	r3, r2
 802ec84:	80fb      	strh	r3, [r7, #6]
 802ec86:	2300      	movs	r3, #0
 802ec88:	77fb      	strb	r3, [r7, #31]
 802ec8a:	68fb      	ldr	r3, [r7, #12]
 802ec8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802ec90:	2b01      	cmp	r3, #1
 802ec92:	d101      	bne.n	802ec98 <HAL_SPI_Transmit+0x22>
 802ec94:	2302      	movs	r3, #2
 802ec96:	e150      	b.n	802ef3a <HAL_SPI_Transmit+0x2c4>
 802ec98:	68fb      	ldr	r3, [r7, #12]
 802ec9a:	2201      	movs	r2, #1
 802ec9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802eca0:	f7fa f910 	bl	8028ec4 <HAL_GetTick>
 802eca4:	61b8      	str	r0, [r7, #24]
 802eca6:	88fb      	ldrh	r3, [r7, #6]
 802eca8:	82fb      	strh	r3, [r7, #22]
 802ecaa:	68fb      	ldr	r3, [r7, #12]
 802ecac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802ecb0:	b2db      	uxtb	r3, r3
 802ecb2:	2b01      	cmp	r3, #1
 802ecb4:	d002      	beq.n	802ecbc <HAL_SPI_Transmit+0x46>
 802ecb6:	2302      	movs	r3, #2
 802ecb8:	77fb      	strb	r3, [r7, #31]
 802ecba:	e135      	b.n	802ef28 <HAL_SPI_Transmit+0x2b2>
 802ecbc:	68bb      	ldr	r3, [r7, #8]
 802ecbe:	2b00      	cmp	r3, #0
 802ecc0:	d002      	beq.n	802ecc8 <HAL_SPI_Transmit+0x52>
 802ecc2:	88fb      	ldrh	r3, [r7, #6]
 802ecc4:	2b00      	cmp	r3, #0
 802ecc6:	d102      	bne.n	802ecce <HAL_SPI_Transmit+0x58>
 802ecc8:	2301      	movs	r3, #1
 802ecca:	77fb      	strb	r3, [r7, #31]
 802eccc:	e12c      	b.n	802ef28 <HAL_SPI_Transmit+0x2b2>
 802ecce:	68fb      	ldr	r3, [r7, #12]
 802ecd0:	2203      	movs	r2, #3
 802ecd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ecd6:	68fb      	ldr	r3, [r7, #12]
 802ecd8:	2200      	movs	r2, #0
 802ecda:	661a      	str	r2, [r3, #96]	; 0x60
 802ecdc:	68fb      	ldr	r3, [r7, #12]
 802ecde:	68ba      	ldr	r2, [r7, #8]
 802ece0:	639a      	str	r2, [r3, #56]	; 0x38
 802ece2:	68fb      	ldr	r3, [r7, #12]
 802ece4:	88fa      	ldrh	r2, [r7, #6]
 802ece6:	879a      	strh	r2, [r3, #60]	; 0x3c
 802ece8:	68fb      	ldr	r3, [r7, #12]
 802ecea:	88fa      	ldrh	r2, [r7, #6]
 802ecec:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ecee:	68fb      	ldr	r3, [r7, #12]
 802ecf0:	2200      	movs	r2, #0
 802ecf2:	641a      	str	r2, [r3, #64]	; 0x40
 802ecf4:	68fb      	ldr	r3, [r7, #12]
 802ecf6:	2200      	movs	r2, #0
 802ecf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 802ecfc:	68fb      	ldr	r3, [r7, #12]
 802ecfe:	2200      	movs	r2, #0
 802ed00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802ed04:	68fb      	ldr	r3, [r7, #12]
 802ed06:	2200      	movs	r2, #0
 802ed08:	651a      	str	r2, [r3, #80]	; 0x50
 802ed0a:	68fb      	ldr	r3, [r7, #12]
 802ed0c:	2200      	movs	r2, #0
 802ed0e:	64da      	str	r2, [r3, #76]	; 0x4c
 802ed10:	68fb      	ldr	r3, [r7, #12]
 802ed12:	689b      	ldr	r3, [r3, #8]
 802ed14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802ed18:	d107      	bne.n	802ed2a <HAL_SPI_Transmit+0xb4>
 802ed1a:	68fb      	ldr	r3, [r7, #12]
 802ed1c:	681b      	ldr	r3, [r3, #0]
 802ed1e:	681a      	ldr	r2, [r3, #0]
 802ed20:	68fb      	ldr	r3, [r7, #12]
 802ed22:	681b      	ldr	r3, [r3, #0]
 802ed24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802ed28:	601a      	str	r2, [r3, #0]
 802ed2a:	68fb      	ldr	r3, [r7, #12]
 802ed2c:	681b      	ldr	r3, [r3, #0]
 802ed2e:	681b      	ldr	r3, [r3, #0]
 802ed30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ed34:	2b40      	cmp	r3, #64	; 0x40
 802ed36:	d007      	beq.n	802ed48 <HAL_SPI_Transmit+0xd2>
 802ed38:	68fb      	ldr	r3, [r7, #12]
 802ed3a:	681b      	ldr	r3, [r3, #0]
 802ed3c:	681a      	ldr	r2, [r3, #0]
 802ed3e:	68fb      	ldr	r3, [r7, #12]
 802ed40:	681b      	ldr	r3, [r3, #0]
 802ed42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed46:	601a      	str	r2, [r3, #0]
 802ed48:	68fb      	ldr	r3, [r7, #12]
 802ed4a:	68db      	ldr	r3, [r3, #12]
 802ed4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802ed50:	d94b      	bls.n	802edea <HAL_SPI_Transmit+0x174>
 802ed52:	68fb      	ldr	r3, [r7, #12]
 802ed54:	685b      	ldr	r3, [r3, #4]
 802ed56:	2b00      	cmp	r3, #0
 802ed58:	d002      	beq.n	802ed60 <HAL_SPI_Transmit+0xea>
 802ed5a:	8afb      	ldrh	r3, [r7, #22]
 802ed5c:	2b01      	cmp	r3, #1
 802ed5e:	d13e      	bne.n	802edde <HAL_SPI_Transmit+0x168>
 802ed60:	68fb      	ldr	r3, [r7, #12]
 802ed62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed64:	881a      	ldrh	r2, [r3, #0]
 802ed66:	68fb      	ldr	r3, [r7, #12]
 802ed68:	681b      	ldr	r3, [r3, #0]
 802ed6a:	60da      	str	r2, [r3, #12]
 802ed6c:	68fb      	ldr	r3, [r7, #12]
 802ed6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed70:	1c9a      	adds	r2, r3, #2
 802ed72:	68fb      	ldr	r3, [r7, #12]
 802ed74:	639a      	str	r2, [r3, #56]	; 0x38
 802ed76:	68fb      	ldr	r3, [r7, #12]
 802ed78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ed7a:	b29b      	uxth	r3, r3
 802ed7c:	3b01      	subs	r3, #1
 802ed7e:	b29a      	uxth	r2, r3
 802ed80:	68fb      	ldr	r3, [r7, #12]
 802ed82:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ed84:	e02b      	b.n	802edde <HAL_SPI_Transmit+0x168>
 802ed86:	68fb      	ldr	r3, [r7, #12]
 802ed88:	681b      	ldr	r3, [r3, #0]
 802ed8a:	689b      	ldr	r3, [r3, #8]
 802ed8c:	f003 0302 	and.w	r3, r3, #2
 802ed90:	2b02      	cmp	r3, #2
 802ed92:	d112      	bne.n	802edba <HAL_SPI_Transmit+0x144>
 802ed94:	68fb      	ldr	r3, [r7, #12]
 802ed96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed98:	881a      	ldrh	r2, [r3, #0]
 802ed9a:	68fb      	ldr	r3, [r7, #12]
 802ed9c:	681b      	ldr	r3, [r3, #0]
 802ed9e:	60da      	str	r2, [r3, #12]
 802eda0:	68fb      	ldr	r3, [r7, #12]
 802eda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eda4:	1c9a      	adds	r2, r3, #2
 802eda6:	68fb      	ldr	r3, [r7, #12]
 802eda8:	639a      	str	r2, [r3, #56]	; 0x38
 802edaa:	68fb      	ldr	r3, [r7, #12]
 802edac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802edae:	b29b      	uxth	r3, r3
 802edb0:	3b01      	subs	r3, #1
 802edb2:	b29a      	uxth	r2, r3
 802edb4:	68fb      	ldr	r3, [r7, #12]
 802edb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 802edb8:	e011      	b.n	802edde <HAL_SPI_Transmit+0x168>
 802edba:	f7fa f883 	bl	8028ec4 <HAL_GetTick>
 802edbe:	4602      	mov	r2, r0
 802edc0:	69bb      	ldr	r3, [r7, #24]
 802edc2:	1ad3      	subs	r3, r2, r3
 802edc4:	683a      	ldr	r2, [r7, #0]
 802edc6:	429a      	cmp	r2, r3
 802edc8:	d803      	bhi.n	802edd2 <HAL_SPI_Transmit+0x15c>
 802edca:	683b      	ldr	r3, [r7, #0]
 802edcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 802edd0:	d102      	bne.n	802edd8 <HAL_SPI_Transmit+0x162>
 802edd2:	683b      	ldr	r3, [r7, #0]
 802edd4:	2b00      	cmp	r3, #0
 802edd6:	d102      	bne.n	802edde <HAL_SPI_Transmit+0x168>
 802edd8:	2303      	movs	r3, #3
 802edda:	77fb      	strb	r3, [r7, #31]
 802eddc:	e0a4      	b.n	802ef28 <HAL_SPI_Transmit+0x2b2>
 802edde:	68fb      	ldr	r3, [r7, #12]
 802ede0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ede2:	b29b      	uxth	r3, r3
 802ede4:	2b00      	cmp	r3, #0
 802ede6:	d1ce      	bne.n	802ed86 <HAL_SPI_Transmit+0x110>
 802ede8:	e07c      	b.n	802eee4 <HAL_SPI_Transmit+0x26e>
 802edea:	68fb      	ldr	r3, [r7, #12]
 802edec:	685b      	ldr	r3, [r3, #4]
 802edee:	2b00      	cmp	r3, #0
 802edf0:	d002      	beq.n	802edf8 <HAL_SPI_Transmit+0x182>
 802edf2:	8afb      	ldrh	r3, [r7, #22]
 802edf4:	2b01      	cmp	r3, #1
 802edf6:	d170      	bne.n	802eeda <HAL_SPI_Transmit+0x264>
 802edf8:	68fb      	ldr	r3, [r7, #12]
 802edfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802edfc:	b29b      	uxth	r3, r3
 802edfe:	2b01      	cmp	r3, #1
 802ee00:	d912      	bls.n	802ee28 <HAL_SPI_Transmit+0x1b2>
 802ee02:	68fb      	ldr	r3, [r7, #12]
 802ee04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee06:	881a      	ldrh	r2, [r3, #0]
 802ee08:	68fb      	ldr	r3, [r7, #12]
 802ee0a:	681b      	ldr	r3, [r3, #0]
 802ee0c:	60da      	str	r2, [r3, #12]
 802ee0e:	68fb      	ldr	r3, [r7, #12]
 802ee10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee12:	1c9a      	adds	r2, r3, #2
 802ee14:	68fb      	ldr	r3, [r7, #12]
 802ee16:	639a      	str	r2, [r3, #56]	; 0x38
 802ee18:	68fb      	ldr	r3, [r7, #12]
 802ee1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ee1c:	b29b      	uxth	r3, r3
 802ee1e:	3b02      	subs	r3, #2
 802ee20:	b29a      	uxth	r2, r3
 802ee22:	68fb      	ldr	r3, [r7, #12]
 802ee24:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ee26:	e058      	b.n	802eeda <HAL_SPI_Transmit+0x264>
 802ee28:	68fb      	ldr	r3, [r7, #12]
 802ee2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ee2c:	68fb      	ldr	r3, [r7, #12]
 802ee2e:	681b      	ldr	r3, [r3, #0]
 802ee30:	330c      	adds	r3, #12
 802ee32:	7812      	ldrb	r2, [r2, #0]
 802ee34:	701a      	strb	r2, [r3, #0]
 802ee36:	68fb      	ldr	r3, [r7, #12]
 802ee38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee3a:	1c5a      	adds	r2, r3, #1
 802ee3c:	68fb      	ldr	r3, [r7, #12]
 802ee3e:	639a      	str	r2, [r3, #56]	; 0x38
 802ee40:	68fb      	ldr	r3, [r7, #12]
 802ee42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ee44:	b29b      	uxth	r3, r3
 802ee46:	3b01      	subs	r3, #1
 802ee48:	b29a      	uxth	r2, r3
 802ee4a:	68fb      	ldr	r3, [r7, #12]
 802ee4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ee4e:	e044      	b.n	802eeda <HAL_SPI_Transmit+0x264>
 802ee50:	68fb      	ldr	r3, [r7, #12]
 802ee52:	681b      	ldr	r3, [r3, #0]
 802ee54:	689b      	ldr	r3, [r3, #8]
 802ee56:	f003 0302 	and.w	r3, r3, #2
 802ee5a:	2b02      	cmp	r3, #2
 802ee5c:	d12b      	bne.n	802eeb6 <HAL_SPI_Transmit+0x240>
 802ee5e:	68fb      	ldr	r3, [r7, #12]
 802ee60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ee62:	b29b      	uxth	r3, r3
 802ee64:	2b01      	cmp	r3, #1
 802ee66:	d912      	bls.n	802ee8e <HAL_SPI_Transmit+0x218>
 802ee68:	68fb      	ldr	r3, [r7, #12]
 802ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee6c:	881a      	ldrh	r2, [r3, #0]
 802ee6e:	68fb      	ldr	r3, [r7, #12]
 802ee70:	681b      	ldr	r3, [r3, #0]
 802ee72:	60da      	str	r2, [r3, #12]
 802ee74:	68fb      	ldr	r3, [r7, #12]
 802ee76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee78:	1c9a      	adds	r2, r3, #2
 802ee7a:	68fb      	ldr	r3, [r7, #12]
 802ee7c:	639a      	str	r2, [r3, #56]	; 0x38
 802ee7e:	68fb      	ldr	r3, [r7, #12]
 802ee80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ee82:	b29b      	uxth	r3, r3
 802ee84:	3b02      	subs	r3, #2
 802ee86:	b29a      	uxth	r2, r3
 802ee88:	68fb      	ldr	r3, [r7, #12]
 802ee8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 802ee8c:	e025      	b.n	802eeda <HAL_SPI_Transmit+0x264>
 802ee8e:	68fb      	ldr	r3, [r7, #12]
 802ee90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ee92:	68fb      	ldr	r3, [r7, #12]
 802ee94:	681b      	ldr	r3, [r3, #0]
 802ee96:	330c      	adds	r3, #12
 802ee98:	7812      	ldrb	r2, [r2, #0]
 802ee9a:	701a      	strb	r2, [r3, #0]
 802ee9c:	68fb      	ldr	r3, [r7, #12]
 802ee9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eea0:	1c5a      	adds	r2, r3, #1
 802eea2:	68fb      	ldr	r3, [r7, #12]
 802eea4:	639a      	str	r2, [r3, #56]	; 0x38
 802eea6:	68fb      	ldr	r3, [r7, #12]
 802eea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802eeaa:	b29b      	uxth	r3, r3
 802eeac:	3b01      	subs	r3, #1
 802eeae:	b29a      	uxth	r2, r3
 802eeb0:	68fb      	ldr	r3, [r7, #12]
 802eeb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 802eeb4:	e011      	b.n	802eeda <HAL_SPI_Transmit+0x264>
 802eeb6:	f7fa f805 	bl	8028ec4 <HAL_GetTick>
 802eeba:	4602      	mov	r2, r0
 802eebc:	69bb      	ldr	r3, [r7, #24]
 802eebe:	1ad3      	subs	r3, r2, r3
 802eec0:	683a      	ldr	r2, [r7, #0]
 802eec2:	429a      	cmp	r2, r3
 802eec4:	d803      	bhi.n	802eece <HAL_SPI_Transmit+0x258>
 802eec6:	683b      	ldr	r3, [r7, #0]
 802eec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802eecc:	d102      	bne.n	802eed4 <HAL_SPI_Transmit+0x25e>
 802eece:	683b      	ldr	r3, [r7, #0]
 802eed0:	2b00      	cmp	r3, #0
 802eed2:	d102      	bne.n	802eeda <HAL_SPI_Transmit+0x264>
 802eed4:	2303      	movs	r3, #3
 802eed6:	77fb      	strb	r3, [r7, #31]
 802eed8:	e026      	b.n	802ef28 <HAL_SPI_Transmit+0x2b2>
 802eeda:	68fb      	ldr	r3, [r7, #12]
 802eedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802eede:	b29b      	uxth	r3, r3
 802eee0:	2b00      	cmp	r3, #0
 802eee2:	d1b5      	bne.n	802ee50 <HAL_SPI_Transmit+0x1da>
 802eee4:	69ba      	ldr	r2, [r7, #24]
 802eee6:	6839      	ldr	r1, [r7, #0]
 802eee8:	68f8      	ldr	r0, [r7, #12]
 802eeea:	f000 fca2 	bl	802f832 <SPI_EndRxTxTransaction>
 802eeee:	4603      	mov	r3, r0
 802eef0:	2b00      	cmp	r3, #0
 802eef2:	d002      	beq.n	802eefa <HAL_SPI_Transmit+0x284>
 802eef4:	68fb      	ldr	r3, [r7, #12]
 802eef6:	2220      	movs	r2, #32
 802eef8:	661a      	str	r2, [r3, #96]	; 0x60
 802eefa:	68fb      	ldr	r3, [r7, #12]
 802eefc:	689b      	ldr	r3, [r3, #8]
 802eefe:	2b00      	cmp	r3, #0
 802ef00:	d10a      	bne.n	802ef18 <HAL_SPI_Transmit+0x2a2>
 802ef02:	2300      	movs	r3, #0
 802ef04:	613b      	str	r3, [r7, #16]
 802ef06:	68fb      	ldr	r3, [r7, #12]
 802ef08:	681b      	ldr	r3, [r3, #0]
 802ef0a:	68db      	ldr	r3, [r3, #12]
 802ef0c:	613b      	str	r3, [r7, #16]
 802ef0e:	68fb      	ldr	r3, [r7, #12]
 802ef10:	681b      	ldr	r3, [r3, #0]
 802ef12:	689b      	ldr	r3, [r3, #8]
 802ef14:	613b      	str	r3, [r7, #16]
 802ef16:	693b      	ldr	r3, [r7, #16]
 802ef18:	68fb      	ldr	r3, [r7, #12]
 802ef1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ef1c:	2b00      	cmp	r3, #0
 802ef1e:	d002      	beq.n	802ef26 <HAL_SPI_Transmit+0x2b0>
 802ef20:	2301      	movs	r3, #1
 802ef22:	77fb      	strb	r3, [r7, #31]
 802ef24:	e000      	b.n	802ef28 <HAL_SPI_Transmit+0x2b2>
 802ef26:	bf00      	nop
 802ef28:	68fb      	ldr	r3, [r7, #12]
 802ef2a:	2201      	movs	r2, #1
 802ef2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ef30:	68fb      	ldr	r3, [r7, #12]
 802ef32:	2200      	movs	r2, #0
 802ef34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802ef38:	7ffb      	ldrb	r3, [r7, #31]
 802ef3a:	4618      	mov	r0, r3
 802ef3c:	3720      	adds	r7, #32
 802ef3e:	46bd      	mov	sp, r7
 802ef40:	bd80      	pop	{r7, pc}

0802ef42 <HAL_SPI_Receive>:
 802ef42:	b580      	push	{r7, lr}
 802ef44:	b088      	sub	sp, #32
 802ef46:	af02      	add	r7, sp, #8
 802ef48:	60f8      	str	r0, [r7, #12]
 802ef4a:	60b9      	str	r1, [r7, #8]
 802ef4c:	603b      	str	r3, [r7, #0]
 802ef4e:	4613      	mov	r3, r2
 802ef50:	80fb      	strh	r3, [r7, #6]
 802ef52:	2300      	movs	r3, #0
 802ef54:	75fb      	strb	r3, [r7, #23]
 802ef56:	68fb      	ldr	r3, [r7, #12]
 802ef58:	685b      	ldr	r3, [r3, #4]
 802ef5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802ef5e:	d112      	bne.n	802ef86 <HAL_SPI_Receive+0x44>
 802ef60:	68fb      	ldr	r3, [r7, #12]
 802ef62:	689b      	ldr	r3, [r3, #8]
 802ef64:	2b00      	cmp	r3, #0
 802ef66:	d10e      	bne.n	802ef86 <HAL_SPI_Receive+0x44>
 802ef68:	68fb      	ldr	r3, [r7, #12]
 802ef6a:	2204      	movs	r2, #4
 802ef6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802ef70:	88fa      	ldrh	r2, [r7, #6]
 802ef72:	683b      	ldr	r3, [r7, #0]
 802ef74:	9300      	str	r3, [sp, #0]
 802ef76:	4613      	mov	r3, r2
 802ef78:	68ba      	ldr	r2, [r7, #8]
 802ef7a:	68b9      	ldr	r1, [r7, #8]
 802ef7c:	68f8      	ldr	r0, [r7, #12]
 802ef7e:	f000 f908 	bl	802f192 <HAL_SPI_TransmitReceive>
 802ef82:	4603      	mov	r3, r0
 802ef84:	e101      	b.n	802f18a <HAL_SPI_Receive+0x248>
 802ef86:	68fb      	ldr	r3, [r7, #12]
 802ef88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802ef8c:	2b01      	cmp	r3, #1
 802ef8e:	d101      	bne.n	802ef94 <HAL_SPI_Receive+0x52>
 802ef90:	2302      	movs	r3, #2
 802ef92:	e0fa      	b.n	802f18a <HAL_SPI_Receive+0x248>
 802ef94:	68fb      	ldr	r3, [r7, #12]
 802ef96:	2201      	movs	r2, #1
 802ef98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802ef9c:	f7f9 ff92 	bl	8028ec4 <HAL_GetTick>
 802efa0:	6138      	str	r0, [r7, #16]
 802efa2:	68fb      	ldr	r3, [r7, #12]
 802efa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802efa8:	b2db      	uxtb	r3, r3
 802efaa:	2b01      	cmp	r3, #1
 802efac:	d002      	beq.n	802efb4 <HAL_SPI_Receive+0x72>
 802efae:	2302      	movs	r3, #2
 802efb0:	75fb      	strb	r3, [r7, #23]
 802efb2:	e0e1      	b.n	802f178 <HAL_SPI_Receive+0x236>
 802efb4:	68bb      	ldr	r3, [r7, #8]
 802efb6:	2b00      	cmp	r3, #0
 802efb8:	d002      	beq.n	802efc0 <HAL_SPI_Receive+0x7e>
 802efba:	88fb      	ldrh	r3, [r7, #6]
 802efbc:	2b00      	cmp	r3, #0
 802efbe:	d102      	bne.n	802efc6 <HAL_SPI_Receive+0x84>
 802efc0:	2301      	movs	r3, #1
 802efc2:	75fb      	strb	r3, [r7, #23]
 802efc4:	e0d8      	b.n	802f178 <HAL_SPI_Receive+0x236>
 802efc6:	68fb      	ldr	r3, [r7, #12]
 802efc8:	2204      	movs	r2, #4
 802efca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802efce:	68fb      	ldr	r3, [r7, #12]
 802efd0:	2200      	movs	r2, #0
 802efd2:	661a      	str	r2, [r3, #96]	; 0x60
 802efd4:	68fb      	ldr	r3, [r7, #12]
 802efd6:	68ba      	ldr	r2, [r7, #8]
 802efd8:	641a      	str	r2, [r3, #64]	; 0x40
 802efda:	68fb      	ldr	r3, [r7, #12]
 802efdc:	88fa      	ldrh	r2, [r7, #6]
 802efde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 802efe2:	68fb      	ldr	r3, [r7, #12]
 802efe4:	88fa      	ldrh	r2, [r7, #6]
 802efe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802efea:	68fb      	ldr	r3, [r7, #12]
 802efec:	2200      	movs	r2, #0
 802efee:	639a      	str	r2, [r3, #56]	; 0x38
 802eff0:	68fb      	ldr	r3, [r7, #12]
 802eff2:	2200      	movs	r2, #0
 802eff4:	879a      	strh	r2, [r3, #60]	; 0x3c
 802eff6:	68fb      	ldr	r3, [r7, #12]
 802eff8:	2200      	movs	r2, #0
 802effa:	87da      	strh	r2, [r3, #62]	; 0x3e
 802effc:	68fb      	ldr	r3, [r7, #12]
 802effe:	2200      	movs	r2, #0
 802f000:	64da      	str	r2, [r3, #76]	; 0x4c
 802f002:	68fb      	ldr	r3, [r7, #12]
 802f004:	2200      	movs	r2, #0
 802f006:	651a      	str	r2, [r3, #80]	; 0x50
 802f008:	68fb      	ldr	r3, [r7, #12]
 802f00a:	68db      	ldr	r3, [r3, #12]
 802f00c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802f010:	d908      	bls.n	802f024 <HAL_SPI_Receive+0xe2>
 802f012:	68fb      	ldr	r3, [r7, #12]
 802f014:	681b      	ldr	r3, [r3, #0]
 802f016:	685a      	ldr	r2, [r3, #4]
 802f018:	68fb      	ldr	r3, [r7, #12]
 802f01a:	681b      	ldr	r3, [r3, #0]
 802f01c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f020:	605a      	str	r2, [r3, #4]
 802f022:	e007      	b.n	802f034 <HAL_SPI_Receive+0xf2>
 802f024:	68fb      	ldr	r3, [r7, #12]
 802f026:	681b      	ldr	r3, [r3, #0]
 802f028:	685a      	ldr	r2, [r3, #4]
 802f02a:	68fb      	ldr	r3, [r7, #12]
 802f02c:	681b      	ldr	r3, [r3, #0]
 802f02e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802f032:	605a      	str	r2, [r3, #4]
 802f034:	68fb      	ldr	r3, [r7, #12]
 802f036:	689b      	ldr	r3, [r3, #8]
 802f038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f03c:	d107      	bne.n	802f04e <HAL_SPI_Receive+0x10c>
 802f03e:	68fb      	ldr	r3, [r7, #12]
 802f040:	681b      	ldr	r3, [r3, #0]
 802f042:	681a      	ldr	r2, [r3, #0]
 802f044:	68fb      	ldr	r3, [r7, #12]
 802f046:	681b      	ldr	r3, [r3, #0]
 802f048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f04c:	601a      	str	r2, [r3, #0]
 802f04e:	68fb      	ldr	r3, [r7, #12]
 802f050:	681b      	ldr	r3, [r3, #0]
 802f052:	681b      	ldr	r3, [r3, #0]
 802f054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f058:	2b40      	cmp	r3, #64	; 0x40
 802f05a:	d007      	beq.n	802f06c <HAL_SPI_Receive+0x12a>
 802f05c:	68fb      	ldr	r3, [r7, #12]
 802f05e:	681b      	ldr	r3, [r3, #0]
 802f060:	681a      	ldr	r2, [r3, #0]
 802f062:	68fb      	ldr	r3, [r7, #12]
 802f064:	681b      	ldr	r3, [r3, #0]
 802f066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f06a:	601a      	str	r2, [r3, #0]
 802f06c:	68fb      	ldr	r3, [r7, #12]
 802f06e:	68db      	ldr	r3, [r3, #12]
 802f070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802f074:	d867      	bhi.n	802f146 <HAL_SPI_Receive+0x204>
 802f076:	e030      	b.n	802f0da <HAL_SPI_Receive+0x198>
 802f078:	68fb      	ldr	r3, [r7, #12]
 802f07a:	681b      	ldr	r3, [r3, #0]
 802f07c:	689b      	ldr	r3, [r3, #8]
 802f07e:	f003 0301 	and.w	r3, r3, #1
 802f082:	2b01      	cmp	r3, #1
 802f084:	d117      	bne.n	802f0b6 <HAL_SPI_Receive+0x174>
 802f086:	68fb      	ldr	r3, [r7, #12]
 802f088:	681b      	ldr	r3, [r3, #0]
 802f08a:	f103 020c 	add.w	r2, r3, #12
 802f08e:	68fb      	ldr	r3, [r7, #12]
 802f090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f092:	7812      	ldrb	r2, [r2, #0]
 802f094:	b2d2      	uxtb	r2, r2
 802f096:	701a      	strb	r2, [r3, #0]
 802f098:	68fb      	ldr	r3, [r7, #12]
 802f09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f09c:	1c5a      	adds	r2, r3, #1
 802f09e:	68fb      	ldr	r3, [r7, #12]
 802f0a0:	641a      	str	r2, [r3, #64]	; 0x40
 802f0a2:	68fb      	ldr	r3, [r7, #12]
 802f0a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f0a8:	b29b      	uxth	r3, r3
 802f0aa:	3b01      	subs	r3, #1
 802f0ac:	b29a      	uxth	r2, r3
 802f0ae:	68fb      	ldr	r3, [r7, #12]
 802f0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f0b4:	e011      	b.n	802f0da <HAL_SPI_Receive+0x198>
 802f0b6:	f7f9 ff05 	bl	8028ec4 <HAL_GetTick>
 802f0ba:	4602      	mov	r2, r0
 802f0bc:	693b      	ldr	r3, [r7, #16]
 802f0be:	1ad3      	subs	r3, r2, r3
 802f0c0:	683a      	ldr	r2, [r7, #0]
 802f0c2:	429a      	cmp	r2, r3
 802f0c4:	d803      	bhi.n	802f0ce <HAL_SPI_Receive+0x18c>
 802f0c6:	683b      	ldr	r3, [r7, #0]
 802f0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f0cc:	d102      	bne.n	802f0d4 <HAL_SPI_Receive+0x192>
 802f0ce:	683b      	ldr	r3, [r7, #0]
 802f0d0:	2b00      	cmp	r3, #0
 802f0d2:	d102      	bne.n	802f0da <HAL_SPI_Receive+0x198>
 802f0d4:	2303      	movs	r3, #3
 802f0d6:	75fb      	strb	r3, [r7, #23]
 802f0d8:	e04e      	b.n	802f178 <HAL_SPI_Receive+0x236>
 802f0da:	68fb      	ldr	r3, [r7, #12]
 802f0dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f0e0:	b29b      	uxth	r3, r3
 802f0e2:	2b00      	cmp	r3, #0
 802f0e4:	d1c8      	bne.n	802f078 <HAL_SPI_Receive+0x136>
 802f0e6:	e034      	b.n	802f152 <HAL_SPI_Receive+0x210>
 802f0e8:	68fb      	ldr	r3, [r7, #12]
 802f0ea:	681b      	ldr	r3, [r3, #0]
 802f0ec:	689b      	ldr	r3, [r3, #8]
 802f0ee:	f003 0301 	and.w	r3, r3, #1
 802f0f2:	2b01      	cmp	r3, #1
 802f0f4:	d115      	bne.n	802f122 <HAL_SPI_Receive+0x1e0>
 802f0f6:	68fb      	ldr	r3, [r7, #12]
 802f0f8:	681b      	ldr	r3, [r3, #0]
 802f0fa:	68da      	ldr	r2, [r3, #12]
 802f0fc:	68fb      	ldr	r3, [r7, #12]
 802f0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f100:	b292      	uxth	r2, r2
 802f102:	801a      	strh	r2, [r3, #0]
 802f104:	68fb      	ldr	r3, [r7, #12]
 802f106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f108:	1c9a      	adds	r2, r3, #2
 802f10a:	68fb      	ldr	r3, [r7, #12]
 802f10c:	641a      	str	r2, [r3, #64]	; 0x40
 802f10e:	68fb      	ldr	r3, [r7, #12]
 802f110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f114:	b29b      	uxth	r3, r3
 802f116:	3b01      	subs	r3, #1
 802f118:	b29a      	uxth	r2, r3
 802f11a:	68fb      	ldr	r3, [r7, #12]
 802f11c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f120:	e011      	b.n	802f146 <HAL_SPI_Receive+0x204>
 802f122:	f7f9 fecf 	bl	8028ec4 <HAL_GetTick>
 802f126:	4602      	mov	r2, r0
 802f128:	693b      	ldr	r3, [r7, #16]
 802f12a:	1ad3      	subs	r3, r2, r3
 802f12c:	683a      	ldr	r2, [r7, #0]
 802f12e:	429a      	cmp	r2, r3
 802f130:	d803      	bhi.n	802f13a <HAL_SPI_Receive+0x1f8>
 802f132:	683b      	ldr	r3, [r7, #0]
 802f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f138:	d102      	bne.n	802f140 <HAL_SPI_Receive+0x1fe>
 802f13a:	683b      	ldr	r3, [r7, #0]
 802f13c:	2b00      	cmp	r3, #0
 802f13e:	d102      	bne.n	802f146 <HAL_SPI_Receive+0x204>
 802f140:	2303      	movs	r3, #3
 802f142:	75fb      	strb	r3, [r7, #23]
 802f144:	e018      	b.n	802f178 <HAL_SPI_Receive+0x236>
 802f146:	68fb      	ldr	r3, [r7, #12]
 802f148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f14c:	b29b      	uxth	r3, r3
 802f14e:	2b00      	cmp	r3, #0
 802f150:	d1ca      	bne.n	802f0e8 <HAL_SPI_Receive+0x1a6>
 802f152:	693a      	ldr	r2, [r7, #16]
 802f154:	6839      	ldr	r1, [r7, #0]
 802f156:	68f8      	ldr	r0, [r7, #12]
 802f158:	f000 fb13 	bl	802f782 <SPI_EndRxTransaction>
 802f15c:	4603      	mov	r3, r0
 802f15e:	2b00      	cmp	r3, #0
 802f160:	d002      	beq.n	802f168 <HAL_SPI_Receive+0x226>
 802f162:	68fb      	ldr	r3, [r7, #12]
 802f164:	2220      	movs	r2, #32
 802f166:	661a      	str	r2, [r3, #96]	; 0x60
 802f168:	68fb      	ldr	r3, [r7, #12]
 802f16a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f16c:	2b00      	cmp	r3, #0
 802f16e:	d002      	beq.n	802f176 <HAL_SPI_Receive+0x234>
 802f170:	2301      	movs	r3, #1
 802f172:	75fb      	strb	r3, [r7, #23]
 802f174:	e000      	b.n	802f178 <HAL_SPI_Receive+0x236>
 802f176:	bf00      	nop
 802f178:	68fb      	ldr	r3, [r7, #12]
 802f17a:	2201      	movs	r2, #1
 802f17c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802f180:	68fb      	ldr	r3, [r7, #12]
 802f182:	2200      	movs	r2, #0
 802f184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802f188:	7dfb      	ldrb	r3, [r7, #23]
 802f18a:	4618      	mov	r0, r3
 802f18c:	3718      	adds	r7, #24
 802f18e:	46bd      	mov	sp, r7
 802f190:	bd80      	pop	{r7, pc}

0802f192 <HAL_SPI_TransmitReceive>:
 802f192:	b580      	push	{r7, lr}
 802f194:	b08a      	sub	sp, #40	; 0x28
 802f196:	af00      	add	r7, sp, #0
 802f198:	60f8      	str	r0, [r7, #12]
 802f19a:	60b9      	str	r1, [r7, #8]
 802f19c:	607a      	str	r2, [r7, #4]
 802f19e:	807b      	strh	r3, [r7, #2]
 802f1a0:	2301      	movs	r3, #1
 802f1a2:	627b      	str	r3, [r7, #36]	; 0x24
 802f1a4:	2300      	movs	r3, #0
 802f1a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f1aa:	68fb      	ldr	r3, [r7, #12]
 802f1ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802f1b0:	2b01      	cmp	r3, #1
 802f1b2:	d101      	bne.n	802f1b8 <HAL_SPI_TransmitReceive+0x26>
 802f1b4:	2302      	movs	r3, #2
 802f1b6:	e1fb      	b.n	802f5b0 <HAL_SPI_TransmitReceive+0x41e>
 802f1b8:	68fb      	ldr	r3, [r7, #12]
 802f1ba:	2201      	movs	r2, #1
 802f1bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802f1c0:	f7f9 fe80 	bl	8028ec4 <HAL_GetTick>
 802f1c4:	61f8      	str	r0, [r7, #28]
 802f1c6:	68fb      	ldr	r3, [r7, #12]
 802f1c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802f1cc:	76fb      	strb	r3, [r7, #27]
 802f1ce:	68fb      	ldr	r3, [r7, #12]
 802f1d0:	685b      	ldr	r3, [r3, #4]
 802f1d2:	617b      	str	r3, [r7, #20]
 802f1d4:	887b      	ldrh	r3, [r7, #2]
 802f1d6:	827b      	strh	r3, [r7, #18]
 802f1d8:	887b      	ldrh	r3, [r7, #2]
 802f1da:	823b      	strh	r3, [r7, #16]
 802f1dc:	7efb      	ldrb	r3, [r7, #27]
 802f1de:	2b01      	cmp	r3, #1
 802f1e0:	d00e      	beq.n	802f200 <HAL_SPI_TransmitReceive+0x6e>
 802f1e2:	697b      	ldr	r3, [r7, #20]
 802f1e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802f1e8:	d106      	bne.n	802f1f8 <HAL_SPI_TransmitReceive+0x66>
 802f1ea:	68fb      	ldr	r3, [r7, #12]
 802f1ec:	689b      	ldr	r3, [r3, #8]
 802f1ee:	2b00      	cmp	r3, #0
 802f1f0:	d102      	bne.n	802f1f8 <HAL_SPI_TransmitReceive+0x66>
 802f1f2:	7efb      	ldrb	r3, [r7, #27]
 802f1f4:	2b04      	cmp	r3, #4
 802f1f6:	d003      	beq.n	802f200 <HAL_SPI_TransmitReceive+0x6e>
 802f1f8:	2302      	movs	r3, #2
 802f1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f1fe:	e1cd      	b.n	802f59c <HAL_SPI_TransmitReceive+0x40a>
 802f200:	68bb      	ldr	r3, [r7, #8]
 802f202:	2b00      	cmp	r3, #0
 802f204:	d005      	beq.n	802f212 <HAL_SPI_TransmitReceive+0x80>
 802f206:	687b      	ldr	r3, [r7, #4]
 802f208:	2b00      	cmp	r3, #0
 802f20a:	d002      	beq.n	802f212 <HAL_SPI_TransmitReceive+0x80>
 802f20c:	887b      	ldrh	r3, [r7, #2]
 802f20e:	2b00      	cmp	r3, #0
 802f210:	d103      	bne.n	802f21a <HAL_SPI_TransmitReceive+0x88>
 802f212:	2301      	movs	r3, #1
 802f214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f218:	e1c0      	b.n	802f59c <HAL_SPI_TransmitReceive+0x40a>
 802f21a:	68fb      	ldr	r3, [r7, #12]
 802f21c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802f220:	b2db      	uxtb	r3, r3
 802f222:	2b04      	cmp	r3, #4
 802f224:	d003      	beq.n	802f22e <HAL_SPI_TransmitReceive+0x9c>
 802f226:	68fb      	ldr	r3, [r7, #12]
 802f228:	2205      	movs	r2, #5
 802f22a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802f22e:	68fb      	ldr	r3, [r7, #12]
 802f230:	2200      	movs	r2, #0
 802f232:	661a      	str	r2, [r3, #96]	; 0x60
 802f234:	68fb      	ldr	r3, [r7, #12]
 802f236:	687a      	ldr	r2, [r7, #4]
 802f238:	641a      	str	r2, [r3, #64]	; 0x40
 802f23a:	68fb      	ldr	r3, [r7, #12]
 802f23c:	887a      	ldrh	r2, [r7, #2]
 802f23e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f242:	68fb      	ldr	r3, [r7, #12]
 802f244:	887a      	ldrh	r2, [r7, #2]
 802f246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 802f24a:	68fb      	ldr	r3, [r7, #12]
 802f24c:	68ba      	ldr	r2, [r7, #8]
 802f24e:	639a      	str	r2, [r3, #56]	; 0x38
 802f250:	68fb      	ldr	r3, [r7, #12]
 802f252:	887a      	ldrh	r2, [r7, #2]
 802f254:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f256:	68fb      	ldr	r3, [r7, #12]
 802f258:	887a      	ldrh	r2, [r7, #2]
 802f25a:	879a      	strh	r2, [r3, #60]	; 0x3c
 802f25c:	68fb      	ldr	r3, [r7, #12]
 802f25e:	2200      	movs	r2, #0
 802f260:	64da      	str	r2, [r3, #76]	; 0x4c
 802f262:	68fb      	ldr	r3, [r7, #12]
 802f264:	2200      	movs	r2, #0
 802f266:	651a      	str	r2, [r3, #80]	; 0x50
 802f268:	68fb      	ldr	r3, [r7, #12]
 802f26a:	68db      	ldr	r3, [r3, #12]
 802f26c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802f270:	d802      	bhi.n	802f278 <HAL_SPI_TransmitReceive+0xe6>
 802f272:	8a3b      	ldrh	r3, [r7, #16]
 802f274:	2b01      	cmp	r3, #1
 802f276:	d908      	bls.n	802f28a <HAL_SPI_TransmitReceive+0xf8>
 802f278:	68fb      	ldr	r3, [r7, #12]
 802f27a:	681b      	ldr	r3, [r3, #0]
 802f27c:	685a      	ldr	r2, [r3, #4]
 802f27e:	68fb      	ldr	r3, [r7, #12]
 802f280:	681b      	ldr	r3, [r3, #0]
 802f282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f286:	605a      	str	r2, [r3, #4]
 802f288:	e007      	b.n	802f29a <HAL_SPI_TransmitReceive+0x108>
 802f28a:	68fb      	ldr	r3, [r7, #12]
 802f28c:	681b      	ldr	r3, [r3, #0]
 802f28e:	685a      	ldr	r2, [r3, #4]
 802f290:	68fb      	ldr	r3, [r7, #12]
 802f292:	681b      	ldr	r3, [r3, #0]
 802f294:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802f298:	605a      	str	r2, [r3, #4]
 802f29a:	68fb      	ldr	r3, [r7, #12]
 802f29c:	681b      	ldr	r3, [r3, #0]
 802f29e:	681b      	ldr	r3, [r3, #0]
 802f2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f2a4:	2b40      	cmp	r3, #64	; 0x40
 802f2a6:	d007      	beq.n	802f2b8 <HAL_SPI_TransmitReceive+0x126>
 802f2a8:	68fb      	ldr	r3, [r7, #12]
 802f2aa:	681b      	ldr	r3, [r3, #0]
 802f2ac:	681a      	ldr	r2, [r3, #0]
 802f2ae:	68fb      	ldr	r3, [r7, #12]
 802f2b0:	681b      	ldr	r3, [r3, #0]
 802f2b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f2b6:	601a      	str	r2, [r3, #0]
 802f2b8:	68fb      	ldr	r3, [r7, #12]
 802f2ba:	68db      	ldr	r3, [r3, #12]
 802f2bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 802f2c0:	d97c      	bls.n	802f3bc <HAL_SPI_TransmitReceive+0x22a>
 802f2c2:	68fb      	ldr	r3, [r7, #12]
 802f2c4:	685b      	ldr	r3, [r3, #4]
 802f2c6:	2b00      	cmp	r3, #0
 802f2c8:	d002      	beq.n	802f2d0 <HAL_SPI_TransmitReceive+0x13e>
 802f2ca:	8a7b      	ldrh	r3, [r7, #18]
 802f2cc:	2b01      	cmp	r3, #1
 802f2ce:	d169      	bne.n	802f3a4 <HAL_SPI_TransmitReceive+0x212>
 802f2d0:	68fb      	ldr	r3, [r7, #12]
 802f2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2d4:	881a      	ldrh	r2, [r3, #0]
 802f2d6:	68fb      	ldr	r3, [r7, #12]
 802f2d8:	681b      	ldr	r3, [r3, #0]
 802f2da:	60da      	str	r2, [r3, #12]
 802f2dc:	68fb      	ldr	r3, [r7, #12]
 802f2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2e0:	1c9a      	adds	r2, r3, #2
 802f2e2:	68fb      	ldr	r3, [r7, #12]
 802f2e4:	639a      	str	r2, [r3, #56]	; 0x38
 802f2e6:	68fb      	ldr	r3, [r7, #12]
 802f2e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f2ea:	b29b      	uxth	r3, r3
 802f2ec:	3b01      	subs	r3, #1
 802f2ee:	b29a      	uxth	r2, r3
 802f2f0:	68fb      	ldr	r3, [r7, #12]
 802f2f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f2f4:	e056      	b.n	802f3a4 <HAL_SPI_TransmitReceive+0x212>
 802f2f6:	68fb      	ldr	r3, [r7, #12]
 802f2f8:	681b      	ldr	r3, [r3, #0]
 802f2fa:	689b      	ldr	r3, [r3, #8]
 802f2fc:	f003 0302 	and.w	r3, r3, #2
 802f300:	2b02      	cmp	r3, #2
 802f302:	d11b      	bne.n	802f33c <HAL_SPI_TransmitReceive+0x1aa>
 802f304:	68fb      	ldr	r3, [r7, #12]
 802f306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f308:	b29b      	uxth	r3, r3
 802f30a:	2b00      	cmp	r3, #0
 802f30c:	d016      	beq.n	802f33c <HAL_SPI_TransmitReceive+0x1aa>
 802f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f310:	2b01      	cmp	r3, #1
 802f312:	d113      	bne.n	802f33c <HAL_SPI_TransmitReceive+0x1aa>
 802f314:	68fb      	ldr	r3, [r7, #12]
 802f316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f318:	881a      	ldrh	r2, [r3, #0]
 802f31a:	68fb      	ldr	r3, [r7, #12]
 802f31c:	681b      	ldr	r3, [r3, #0]
 802f31e:	60da      	str	r2, [r3, #12]
 802f320:	68fb      	ldr	r3, [r7, #12]
 802f322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f324:	1c9a      	adds	r2, r3, #2
 802f326:	68fb      	ldr	r3, [r7, #12]
 802f328:	639a      	str	r2, [r3, #56]	; 0x38
 802f32a:	68fb      	ldr	r3, [r7, #12]
 802f32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f32e:	b29b      	uxth	r3, r3
 802f330:	3b01      	subs	r3, #1
 802f332:	b29a      	uxth	r2, r3
 802f334:	68fb      	ldr	r3, [r7, #12]
 802f336:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f338:	2300      	movs	r3, #0
 802f33a:	627b      	str	r3, [r7, #36]	; 0x24
 802f33c:	68fb      	ldr	r3, [r7, #12]
 802f33e:	681b      	ldr	r3, [r3, #0]
 802f340:	689b      	ldr	r3, [r3, #8]
 802f342:	f003 0301 	and.w	r3, r3, #1
 802f346:	2b01      	cmp	r3, #1
 802f348:	d11c      	bne.n	802f384 <HAL_SPI_TransmitReceive+0x1f2>
 802f34a:	68fb      	ldr	r3, [r7, #12]
 802f34c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f350:	b29b      	uxth	r3, r3
 802f352:	2b00      	cmp	r3, #0
 802f354:	d016      	beq.n	802f384 <HAL_SPI_TransmitReceive+0x1f2>
 802f356:	68fb      	ldr	r3, [r7, #12]
 802f358:	681b      	ldr	r3, [r3, #0]
 802f35a:	68da      	ldr	r2, [r3, #12]
 802f35c:	68fb      	ldr	r3, [r7, #12]
 802f35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f360:	b292      	uxth	r2, r2
 802f362:	801a      	strh	r2, [r3, #0]
 802f364:	68fb      	ldr	r3, [r7, #12]
 802f366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f368:	1c9a      	adds	r2, r3, #2
 802f36a:	68fb      	ldr	r3, [r7, #12]
 802f36c:	641a      	str	r2, [r3, #64]	; 0x40
 802f36e:	68fb      	ldr	r3, [r7, #12]
 802f370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f374:	b29b      	uxth	r3, r3
 802f376:	3b01      	subs	r3, #1
 802f378:	b29a      	uxth	r2, r3
 802f37a:	68fb      	ldr	r3, [r7, #12]
 802f37c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f380:	2301      	movs	r3, #1
 802f382:	627b      	str	r3, [r7, #36]	; 0x24
 802f384:	f7f9 fd9e 	bl	8028ec4 <HAL_GetTick>
 802f388:	4602      	mov	r2, r0
 802f38a:	69fb      	ldr	r3, [r7, #28]
 802f38c:	1ad3      	subs	r3, r2, r3
 802f38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802f390:	429a      	cmp	r2, r3
 802f392:	d807      	bhi.n	802f3a4 <HAL_SPI_TransmitReceive+0x212>
 802f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f396:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f39a:	d003      	beq.n	802f3a4 <HAL_SPI_TransmitReceive+0x212>
 802f39c:	2303      	movs	r3, #3
 802f39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f3a2:	e0fb      	b.n	802f59c <HAL_SPI_TransmitReceive+0x40a>
 802f3a4:	68fb      	ldr	r3, [r7, #12]
 802f3a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f3a8:	b29b      	uxth	r3, r3
 802f3aa:	2b00      	cmp	r3, #0
 802f3ac:	d1a3      	bne.n	802f2f6 <HAL_SPI_TransmitReceive+0x164>
 802f3ae:	68fb      	ldr	r3, [r7, #12]
 802f3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f3b4:	b29b      	uxth	r3, r3
 802f3b6:	2b00      	cmp	r3, #0
 802f3b8:	d19d      	bne.n	802f2f6 <HAL_SPI_TransmitReceive+0x164>
 802f3ba:	e0df      	b.n	802f57c <HAL_SPI_TransmitReceive+0x3ea>
 802f3bc:	68fb      	ldr	r3, [r7, #12]
 802f3be:	685b      	ldr	r3, [r3, #4]
 802f3c0:	2b00      	cmp	r3, #0
 802f3c2:	d003      	beq.n	802f3cc <HAL_SPI_TransmitReceive+0x23a>
 802f3c4:	8a7b      	ldrh	r3, [r7, #18]
 802f3c6:	2b01      	cmp	r3, #1
 802f3c8:	f040 80cb 	bne.w	802f562 <HAL_SPI_TransmitReceive+0x3d0>
 802f3cc:	68fb      	ldr	r3, [r7, #12]
 802f3ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f3d0:	b29b      	uxth	r3, r3
 802f3d2:	2b01      	cmp	r3, #1
 802f3d4:	d912      	bls.n	802f3fc <HAL_SPI_TransmitReceive+0x26a>
 802f3d6:	68fb      	ldr	r3, [r7, #12]
 802f3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3da:	881a      	ldrh	r2, [r3, #0]
 802f3dc:	68fb      	ldr	r3, [r7, #12]
 802f3de:	681b      	ldr	r3, [r3, #0]
 802f3e0:	60da      	str	r2, [r3, #12]
 802f3e2:	68fb      	ldr	r3, [r7, #12]
 802f3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3e6:	1c9a      	adds	r2, r3, #2
 802f3e8:	68fb      	ldr	r3, [r7, #12]
 802f3ea:	639a      	str	r2, [r3, #56]	; 0x38
 802f3ec:	68fb      	ldr	r3, [r7, #12]
 802f3ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f3f0:	b29b      	uxth	r3, r3
 802f3f2:	3b02      	subs	r3, #2
 802f3f4:	b29a      	uxth	r2, r3
 802f3f6:	68fb      	ldr	r3, [r7, #12]
 802f3f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f3fa:	e0b2      	b.n	802f562 <HAL_SPI_TransmitReceive+0x3d0>
 802f3fc:	68fb      	ldr	r3, [r7, #12]
 802f3fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802f400:	68fb      	ldr	r3, [r7, #12]
 802f402:	681b      	ldr	r3, [r3, #0]
 802f404:	330c      	adds	r3, #12
 802f406:	7812      	ldrb	r2, [r2, #0]
 802f408:	701a      	strb	r2, [r3, #0]
 802f40a:	68fb      	ldr	r3, [r7, #12]
 802f40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f40e:	1c5a      	adds	r2, r3, #1
 802f410:	68fb      	ldr	r3, [r7, #12]
 802f412:	639a      	str	r2, [r3, #56]	; 0x38
 802f414:	68fb      	ldr	r3, [r7, #12]
 802f416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f418:	b29b      	uxth	r3, r3
 802f41a:	3b01      	subs	r3, #1
 802f41c:	b29a      	uxth	r2, r3
 802f41e:	68fb      	ldr	r3, [r7, #12]
 802f420:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f422:	e09e      	b.n	802f562 <HAL_SPI_TransmitReceive+0x3d0>
 802f424:	68fb      	ldr	r3, [r7, #12]
 802f426:	681b      	ldr	r3, [r3, #0]
 802f428:	689b      	ldr	r3, [r3, #8]
 802f42a:	f003 0302 	and.w	r3, r3, #2
 802f42e:	2b02      	cmp	r3, #2
 802f430:	d134      	bne.n	802f49c <HAL_SPI_TransmitReceive+0x30a>
 802f432:	68fb      	ldr	r3, [r7, #12]
 802f434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f436:	b29b      	uxth	r3, r3
 802f438:	2b00      	cmp	r3, #0
 802f43a:	d02f      	beq.n	802f49c <HAL_SPI_TransmitReceive+0x30a>
 802f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f43e:	2b01      	cmp	r3, #1
 802f440:	d12c      	bne.n	802f49c <HAL_SPI_TransmitReceive+0x30a>
 802f442:	68fb      	ldr	r3, [r7, #12]
 802f444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f446:	b29b      	uxth	r3, r3
 802f448:	2b01      	cmp	r3, #1
 802f44a:	d912      	bls.n	802f472 <HAL_SPI_TransmitReceive+0x2e0>
 802f44c:	68fb      	ldr	r3, [r7, #12]
 802f44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f450:	881a      	ldrh	r2, [r3, #0]
 802f452:	68fb      	ldr	r3, [r7, #12]
 802f454:	681b      	ldr	r3, [r3, #0]
 802f456:	60da      	str	r2, [r3, #12]
 802f458:	68fb      	ldr	r3, [r7, #12]
 802f45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f45c:	1c9a      	adds	r2, r3, #2
 802f45e:	68fb      	ldr	r3, [r7, #12]
 802f460:	639a      	str	r2, [r3, #56]	; 0x38
 802f462:	68fb      	ldr	r3, [r7, #12]
 802f464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f466:	b29b      	uxth	r3, r3
 802f468:	3b02      	subs	r3, #2
 802f46a:	b29a      	uxth	r2, r3
 802f46c:	68fb      	ldr	r3, [r7, #12]
 802f46e:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f470:	e012      	b.n	802f498 <HAL_SPI_TransmitReceive+0x306>
 802f472:	68fb      	ldr	r3, [r7, #12]
 802f474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802f476:	68fb      	ldr	r3, [r7, #12]
 802f478:	681b      	ldr	r3, [r3, #0]
 802f47a:	330c      	adds	r3, #12
 802f47c:	7812      	ldrb	r2, [r2, #0]
 802f47e:	701a      	strb	r2, [r3, #0]
 802f480:	68fb      	ldr	r3, [r7, #12]
 802f482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f484:	1c5a      	adds	r2, r3, #1
 802f486:	68fb      	ldr	r3, [r7, #12]
 802f488:	639a      	str	r2, [r3, #56]	; 0x38
 802f48a:	68fb      	ldr	r3, [r7, #12]
 802f48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f48e:	b29b      	uxth	r3, r3
 802f490:	3b01      	subs	r3, #1
 802f492:	b29a      	uxth	r2, r3
 802f494:	68fb      	ldr	r3, [r7, #12]
 802f496:	87da      	strh	r2, [r3, #62]	; 0x3e
 802f498:	2300      	movs	r3, #0
 802f49a:	627b      	str	r3, [r7, #36]	; 0x24
 802f49c:	68fb      	ldr	r3, [r7, #12]
 802f49e:	681b      	ldr	r3, [r3, #0]
 802f4a0:	689b      	ldr	r3, [r3, #8]
 802f4a2:	f003 0301 	and.w	r3, r3, #1
 802f4a6:	2b01      	cmp	r3, #1
 802f4a8:	d148      	bne.n	802f53c <HAL_SPI_TransmitReceive+0x3aa>
 802f4aa:	68fb      	ldr	r3, [r7, #12]
 802f4ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f4b0:	b29b      	uxth	r3, r3
 802f4b2:	2b00      	cmp	r3, #0
 802f4b4:	d042      	beq.n	802f53c <HAL_SPI_TransmitReceive+0x3aa>
 802f4b6:	68fb      	ldr	r3, [r7, #12]
 802f4b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f4bc:	b29b      	uxth	r3, r3
 802f4be:	2b01      	cmp	r3, #1
 802f4c0:	d923      	bls.n	802f50a <HAL_SPI_TransmitReceive+0x378>
 802f4c2:	68fb      	ldr	r3, [r7, #12]
 802f4c4:	681b      	ldr	r3, [r3, #0]
 802f4c6:	68da      	ldr	r2, [r3, #12]
 802f4c8:	68fb      	ldr	r3, [r7, #12]
 802f4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f4cc:	b292      	uxth	r2, r2
 802f4ce:	801a      	strh	r2, [r3, #0]
 802f4d0:	68fb      	ldr	r3, [r7, #12]
 802f4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f4d4:	1c9a      	adds	r2, r3, #2
 802f4d6:	68fb      	ldr	r3, [r7, #12]
 802f4d8:	641a      	str	r2, [r3, #64]	; 0x40
 802f4da:	68fb      	ldr	r3, [r7, #12]
 802f4dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f4e0:	b29b      	uxth	r3, r3
 802f4e2:	3b02      	subs	r3, #2
 802f4e4:	b29a      	uxth	r2, r3
 802f4e6:	68fb      	ldr	r3, [r7, #12]
 802f4e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f4ec:	68fb      	ldr	r3, [r7, #12]
 802f4ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f4f2:	b29b      	uxth	r3, r3
 802f4f4:	2b01      	cmp	r3, #1
 802f4f6:	d81f      	bhi.n	802f538 <HAL_SPI_TransmitReceive+0x3a6>
 802f4f8:	68fb      	ldr	r3, [r7, #12]
 802f4fa:	681b      	ldr	r3, [r3, #0]
 802f4fc:	685a      	ldr	r2, [r3, #4]
 802f4fe:	68fb      	ldr	r3, [r7, #12]
 802f500:	681b      	ldr	r3, [r3, #0]
 802f502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802f506:	605a      	str	r2, [r3, #4]
 802f508:	e016      	b.n	802f538 <HAL_SPI_TransmitReceive+0x3a6>
 802f50a:	68fb      	ldr	r3, [r7, #12]
 802f50c:	681b      	ldr	r3, [r3, #0]
 802f50e:	f103 020c 	add.w	r2, r3, #12
 802f512:	68fb      	ldr	r3, [r7, #12]
 802f514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f516:	7812      	ldrb	r2, [r2, #0]
 802f518:	b2d2      	uxtb	r2, r2
 802f51a:	701a      	strb	r2, [r3, #0]
 802f51c:	68fb      	ldr	r3, [r7, #12]
 802f51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f520:	1c5a      	adds	r2, r3, #1
 802f522:	68fb      	ldr	r3, [r7, #12]
 802f524:	641a      	str	r2, [r3, #64]	; 0x40
 802f526:	68fb      	ldr	r3, [r7, #12]
 802f528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f52c:	b29b      	uxth	r3, r3
 802f52e:	3b01      	subs	r3, #1
 802f530:	b29a      	uxth	r2, r3
 802f532:	68fb      	ldr	r3, [r7, #12]
 802f534:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802f538:	2301      	movs	r3, #1
 802f53a:	627b      	str	r3, [r7, #36]	; 0x24
 802f53c:	f7f9 fcc2 	bl	8028ec4 <HAL_GetTick>
 802f540:	4602      	mov	r2, r0
 802f542:	69fb      	ldr	r3, [r7, #28]
 802f544:	1ad3      	subs	r3, r2, r3
 802f546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802f548:	429a      	cmp	r2, r3
 802f54a:	d803      	bhi.n	802f554 <HAL_SPI_TransmitReceive+0x3c2>
 802f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f552:	d102      	bne.n	802f55a <HAL_SPI_TransmitReceive+0x3c8>
 802f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f556:	2b00      	cmp	r3, #0
 802f558:	d103      	bne.n	802f562 <HAL_SPI_TransmitReceive+0x3d0>
 802f55a:	2303      	movs	r3, #3
 802f55c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f560:	e01c      	b.n	802f59c <HAL_SPI_TransmitReceive+0x40a>
 802f562:	68fb      	ldr	r3, [r7, #12]
 802f564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802f566:	b29b      	uxth	r3, r3
 802f568:	2b00      	cmp	r3, #0
 802f56a:	f47f af5b 	bne.w	802f424 <HAL_SPI_TransmitReceive+0x292>
 802f56e:	68fb      	ldr	r3, [r7, #12]
 802f570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 802f574:	b29b      	uxth	r3, r3
 802f576:	2b00      	cmp	r3, #0
 802f578:	f47f af54 	bne.w	802f424 <HAL_SPI_TransmitReceive+0x292>
 802f57c:	69fa      	ldr	r2, [r7, #28]
 802f57e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802f580:	68f8      	ldr	r0, [r7, #12]
 802f582:	f000 f956 	bl	802f832 <SPI_EndRxTxTransaction>
 802f586:	4603      	mov	r3, r0
 802f588:	2b00      	cmp	r3, #0
 802f58a:	d006      	beq.n	802f59a <HAL_SPI_TransmitReceive+0x408>
 802f58c:	2301      	movs	r3, #1
 802f58e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802f592:	68fb      	ldr	r3, [r7, #12]
 802f594:	2220      	movs	r2, #32
 802f596:	661a      	str	r2, [r3, #96]	; 0x60
 802f598:	e000      	b.n	802f59c <HAL_SPI_TransmitReceive+0x40a>
 802f59a:	bf00      	nop
 802f59c:	68fb      	ldr	r3, [r7, #12]
 802f59e:	2201      	movs	r2, #1
 802f5a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802f5a4:	68fb      	ldr	r3, [r7, #12]
 802f5a6:	2200      	movs	r2, #0
 802f5a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802f5ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802f5b0:	4618      	mov	r0, r3
 802f5b2:	3728      	adds	r7, #40	; 0x28
 802f5b4:	46bd      	mov	sp, r7
 802f5b6:	bd80      	pop	{r7, pc}

0802f5b8 <HAL_SPI_GetState>:
 802f5b8:	b480      	push	{r7}
 802f5ba:	b083      	sub	sp, #12
 802f5bc:	af00      	add	r7, sp, #0
 802f5be:	6078      	str	r0, [r7, #4]
 802f5c0:	687b      	ldr	r3, [r7, #4]
 802f5c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 802f5c6:	b2db      	uxtb	r3, r3
 802f5c8:	4618      	mov	r0, r3
 802f5ca:	370c      	adds	r7, #12
 802f5cc:	46bd      	mov	sp, r7
 802f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5d2:	4770      	bx	lr

0802f5d4 <SPI_WaitFlagStateUntilTimeout>:
 802f5d4:	b580      	push	{r7, lr}
 802f5d6:	b084      	sub	sp, #16
 802f5d8:	af00      	add	r7, sp, #0
 802f5da:	60f8      	str	r0, [r7, #12]
 802f5dc:	60b9      	str	r1, [r7, #8]
 802f5de:	603b      	str	r3, [r7, #0]
 802f5e0:	4613      	mov	r3, r2
 802f5e2:	71fb      	strb	r3, [r7, #7]
 802f5e4:	e04c      	b.n	802f680 <SPI_WaitFlagStateUntilTimeout+0xac>
 802f5e6:	683b      	ldr	r3, [r7, #0]
 802f5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f5ec:	d048      	beq.n	802f680 <SPI_WaitFlagStateUntilTimeout+0xac>
 802f5ee:	f7f9 fc69 	bl	8028ec4 <HAL_GetTick>
 802f5f2:	4602      	mov	r2, r0
 802f5f4:	69bb      	ldr	r3, [r7, #24]
 802f5f6:	1ad3      	subs	r3, r2, r3
 802f5f8:	683a      	ldr	r2, [r7, #0]
 802f5fa:	429a      	cmp	r2, r3
 802f5fc:	d902      	bls.n	802f604 <SPI_WaitFlagStateUntilTimeout+0x30>
 802f5fe:	683b      	ldr	r3, [r7, #0]
 802f600:	2b00      	cmp	r3, #0
 802f602:	d13d      	bne.n	802f680 <SPI_WaitFlagStateUntilTimeout+0xac>
 802f604:	68fb      	ldr	r3, [r7, #12]
 802f606:	681b      	ldr	r3, [r3, #0]
 802f608:	685a      	ldr	r2, [r3, #4]
 802f60a:	68fb      	ldr	r3, [r7, #12]
 802f60c:	681b      	ldr	r3, [r3, #0]
 802f60e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802f612:	605a      	str	r2, [r3, #4]
 802f614:	68fb      	ldr	r3, [r7, #12]
 802f616:	685b      	ldr	r3, [r3, #4]
 802f618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802f61c:	d111      	bne.n	802f642 <SPI_WaitFlagStateUntilTimeout+0x6e>
 802f61e:	68fb      	ldr	r3, [r7, #12]
 802f620:	689b      	ldr	r3, [r3, #8]
 802f622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f626:	d004      	beq.n	802f632 <SPI_WaitFlagStateUntilTimeout+0x5e>
 802f628:	68fb      	ldr	r3, [r7, #12]
 802f62a:	689b      	ldr	r3, [r3, #8]
 802f62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802f630:	d107      	bne.n	802f642 <SPI_WaitFlagStateUntilTimeout+0x6e>
 802f632:	68fb      	ldr	r3, [r7, #12]
 802f634:	681b      	ldr	r3, [r3, #0]
 802f636:	681a      	ldr	r2, [r3, #0]
 802f638:	68fb      	ldr	r3, [r7, #12]
 802f63a:	681b      	ldr	r3, [r3, #0]
 802f63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802f640:	601a      	str	r2, [r3, #0]
 802f642:	68fb      	ldr	r3, [r7, #12]
 802f644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f64a:	d10f      	bne.n	802f66c <SPI_WaitFlagStateUntilTimeout+0x98>
 802f64c:	68fb      	ldr	r3, [r7, #12]
 802f64e:	681b      	ldr	r3, [r3, #0]
 802f650:	681a      	ldr	r2, [r3, #0]
 802f652:	68fb      	ldr	r3, [r7, #12]
 802f654:	681b      	ldr	r3, [r3, #0]
 802f656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802f65a:	601a      	str	r2, [r3, #0]
 802f65c:	68fb      	ldr	r3, [r7, #12]
 802f65e:	681b      	ldr	r3, [r3, #0]
 802f660:	681a      	ldr	r2, [r3, #0]
 802f662:	68fb      	ldr	r3, [r7, #12]
 802f664:	681b      	ldr	r3, [r3, #0]
 802f666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802f66a:	601a      	str	r2, [r3, #0]
 802f66c:	68fb      	ldr	r3, [r7, #12]
 802f66e:	2201      	movs	r2, #1
 802f670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802f674:	68fb      	ldr	r3, [r7, #12]
 802f676:	2200      	movs	r2, #0
 802f678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802f67c:	2303      	movs	r3, #3
 802f67e:	e00f      	b.n	802f6a0 <SPI_WaitFlagStateUntilTimeout+0xcc>
 802f680:	68fb      	ldr	r3, [r7, #12]
 802f682:	681b      	ldr	r3, [r3, #0]
 802f684:	689a      	ldr	r2, [r3, #8]
 802f686:	68bb      	ldr	r3, [r7, #8]
 802f688:	4013      	ands	r3, r2
 802f68a:	68ba      	ldr	r2, [r7, #8]
 802f68c:	429a      	cmp	r2, r3
 802f68e:	bf0c      	ite	eq
 802f690:	2301      	moveq	r3, #1
 802f692:	2300      	movne	r3, #0
 802f694:	b2db      	uxtb	r3, r3
 802f696:	461a      	mov	r2, r3
 802f698:	79fb      	ldrb	r3, [r7, #7]
 802f69a:	429a      	cmp	r2, r3
 802f69c:	d1a3      	bne.n	802f5e6 <SPI_WaitFlagStateUntilTimeout+0x12>
 802f69e:	2300      	movs	r3, #0
 802f6a0:	4618      	mov	r0, r3
 802f6a2:	3710      	adds	r7, #16
 802f6a4:	46bd      	mov	sp, r7
 802f6a6:	bd80      	pop	{r7, pc}

0802f6a8 <SPI_WaitFifoStateUntilTimeout>:
 802f6a8:	b580      	push	{r7, lr}
 802f6aa:	b084      	sub	sp, #16
 802f6ac:	af00      	add	r7, sp, #0
 802f6ae:	60f8      	str	r0, [r7, #12]
 802f6b0:	60b9      	str	r1, [r7, #8]
 802f6b2:	607a      	str	r2, [r7, #4]
 802f6b4:	603b      	str	r3, [r7, #0]
 802f6b6:	e057      	b.n	802f768 <SPI_WaitFifoStateUntilTimeout+0xc0>
 802f6b8:	68bb      	ldr	r3, [r7, #8]
 802f6ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802f6be:	d106      	bne.n	802f6ce <SPI_WaitFifoStateUntilTimeout+0x26>
 802f6c0:	687b      	ldr	r3, [r7, #4]
 802f6c2:	2b00      	cmp	r3, #0
 802f6c4:	d103      	bne.n	802f6ce <SPI_WaitFifoStateUntilTimeout+0x26>
 802f6c6:	68fb      	ldr	r3, [r7, #12]
 802f6c8:	681b      	ldr	r3, [r3, #0]
 802f6ca:	330c      	adds	r3, #12
 802f6cc:	781b      	ldrb	r3, [r3, #0]
 802f6ce:	683b      	ldr	r3, [r7, #0]
 802f6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802f6d4:	d048      	beq.n	802f768 <SPI_WaitFifoStateUntilTimeout+0xc0>
 802f6d6:	f7f9 fbf5 	bl	8028ec4 <HAL_GetTick>
 802f6da:	4602      	mov	r2, r0
 802f6dc:	69bb      	ldr	r3, [r7, #24]
 802f6de:	1ad3      	subs	r3, r2, r3
 802f6e0:	683a      	ldr	r2, [r7, #0]
 802f6e2:	429a      	cmp	r2, r3
 802f6e4:	d902      	bls.n	802f6ec <SPI_WaitFifoStateUntilTimeout+0x44>
 802f6e6:	683b      	ldr	r3, [r7, #0]
 802f6e8:	2b00      	cmp	r3, #0
 802f6ea:	d13d      	bne.n	802f768 <SPI_WaitFifoStateUntilTimeout+0xc0>
 802f6ec:	68fb      	ldr	r3, [r7, #12]
 802f6ee:	681b      	ldr	r3, [r3, #0]
 802f6f0:	685a      	ldr	r2, [r3, #4]
 802f6f2:	68fb      	ldr	r3, [r7, #12]
 802f6f4:	681b      	ldr	r3, [r3, #0]
 802f6f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802f6fa:	605a      	str	r2, [r3, #4]
 802f6fc:	68fb      	ldr	r3, [r7, #12]
 802f6fe:	685b      	ldr	r3, [r3, #4]
 802f700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802f704:	d111      	bne.n	802f72a <SPI_WaitFifoStateUntilTimeout+0x82>
 802f706:	68fb      	ldr	r3, [r7, #12]
 802f708:	689b      	ldr	r3, [r3, #8]
 802f70a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f70e:	d004      	beq.n	802f71a <SPI_WaitFifoStateUntilTimeout+0x72>
 802f710:	68fb      	ldr	r3, [r7, #12]
 802f712:	689b      	ldr	r3, [r3, #8]
 802f714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802f718:	d107      	bne.n	802f72a <SPI_WaitFifoStateUntilTimeout+0x82>
 802f71a:	68fb      	ldr	r3, [r7, #12]
 802f71c:	681b      	ldr	r3, [r3, #0]
 802f71e:	681a      	ldr	r2, [r3, #0]
 802f720:	68fb      	ldr	r3, [r7, #12]
 802f722:	681b      	ldr	r3, [r3, #0]
 802f724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802f728:	601a      	str	r2, [r3, #0]
 802f72a:	68fb      	ldr	r3, [r7, #12]
 802f72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f72e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f732:	d10f      	bne.n	802f754 <SPI_WaitFifoStateUntilTimeout+0xac>
 802f734:	68fb      	ldr	r3, [r7, #12]
 802f736:	681b      	ldr	r3, [r3, #0]
 802f738:	681a      	ldr	r2, [r3, #0]
 802f73a:	68fb      	ldr	r3, [r7, #12]
 802f73c:	681b      	ldr	r3, [r3, #0]
 802f73e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802f742:	601a      	str	r2, [r3, #0]
 802f744:	68fb      	ldr	r3, [r7, #12]
 802f746:	681b      	ldr	r3, [r3, #0]
 802f748:	681a      	ldr	r2, [r3, #0]
 802f74a:	68fb      	ldr	r3, [r7, #12]
 802f74c:	681b      	ldr	r3, [r3, #0]
 802f74e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802f752:	601a      	str	r2, [r3, #0]
 802f754:	68fb      	ldr	r3, [r7, #12]
 802f756:	2201      	movs	r2, #1
 802f758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 802f75c:	68fb      	ldr	r3, [r7, #12]
 802f75e:	2200      	movs	r2, #0
 802f760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802f764:	2303      	movs	r3, #3
 802f766:	e008      	b.n	802f77a <SPI_WaitFifoStateUntilTimeout+0xd2>
 802f768:	68fb      	ldr	r3, [r7, #12]
 802f76a:	681b      	ldr	r3, [r3, #0]
 802f76c:	689a      	ldr	r2, [r3, #8]
 802f76e:	68bb      	ldr	r3, [r7, #8]
 802f770:	4013      	ands	r3, r2
 802f772:	687a      	ldr	r2, [r7, #4]
 802f774:	429a      	cmp	r2, r3
 802f776:	d19f      	bne.n	802f6b8 <SPI_WaitFifoStateUntilTimeout+0x10>
 802f778:	2300      	movs	r3, #0
 802f77a:	4618      	mov	r0, r3
 802f77c:	3710      	adds	r7, #16
 802f77e:	46bd      	mov	sp, r7
 802f780:	bd80      	pop	{r7, pc}

0802f782 <SPI_EndRxTransaction>:
 802f782:	b580      	push	{r7, lr}
 802f784:	b086      	sub	sp, #24
 802f786:	af02      	add	r7, sp, #8
 802f788:	60f8      	str	r0, [r7, #12]
 802f78a:	60b9      	str	r1, [r7, #8]
 802f78c:	607a      	str	r2, [r7, #4]
 802f78e:	68fb      	ldr	r3, [r7, #12]
 802f790:	685b      	ldr	r3, [r3, #4]
 802f792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802f796:	d111      	bne.n	802f7bc <SPI_EndRxTransaction+0x3a>
 802f798:	68fb      	ldr	r3, [r7, #12]
 802f79a:	689b      	ldr	r3, [r3, #8]
 802f79c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f7a0:	d004      	beq.n	802f7ac <SPI_EndRxTransaction+0x2a>
 802f7a2:	68fb      	ldr	r3, [r7, #12]
 802f7a4:	689b      	ldr	r3, [r3, #8]
 802f7a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802f7aa:	d107      	bne.n	802f7bc <SPI_EndRxTransaction+0x3a>
 802f7ac:	68fb      	ldr	r3, [r7, #12]
 802f7ae:	681b      	ldr	r3, [r3, #0]
 802f7b0:	681a      	ldr	r2, [r3, #0]
 802f7b2:	68fb      	ldr	r3, [r7, #12]
 802f7b4:	681b      	ldr	r3, [r3, #0]
 802f7b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802f7ba:	601a      	str	r2, [r3, #0]
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	9300      	str	r3, [sp, #0]
 802f7c0:	68bb      	ldr	r3, [r7, #8]
 802f7c2:	2200      	movs	r2, #0
 802f7c4:	2180      	movs	r1, #128	; 0x80
 802f7c6:	68f8      	ldr	r0, [r7, #12]
 802f7c8:	f7ff ff04 	bl	802f5d4 <SPI_WaitFlagStateUntilTimeout>
 802f7cc:	4603      	mov	r3, r0
 802f7ce:	2b00      	cmp	r3, #0
 802f7d0:	d007      	beq.n	802f7e2 <SPI_EndRxTransaction+0x60>
 802f7d2:	68fb      	ldr	r3, [r7, #12]
 802f7d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f7d6:	f043 0220 	orr.w	r2, r3, #32
 802f7da:	68fb      	ldr	r3, [r7, #12]
 802f7dc:	661a      	str	r2, [r3, #96]	; 0x60
 802f7de:	2303      	movs	r3, #3
 802f7e0:	e023      	b.n	802f82a <SPI_EndRxTransaction+0xa8>
 802f7e2:	68fb      	ldr	r3, [r7, #12]
 802f7e4:	685b      	ldr	r3, [r3, #4]
 802f7e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802f7ea:	d11d      	bne.n	802f828 <SPI_EndRxTransaction+0xa6>
 802f7ec:	68fb      	ldr	r3, [r7, #12]
 802f7ee:	689b      	ldr	r3, [r3, #8]
 802f7f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f7f4:	d004      	beq.n	802f800 <SPI_EndRxTransaction+0x7e>
 802f7f6:	68fb      	ldr	r3, [r7, #12]
 802f7f8:	689b      	ldr	r3, [r3, #8]
 802f7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802f7fe:	d113      	bne.n	802f828 <SPI_EndRxTransaction+0xa6>
 802f800:	687b      	ldr	r3, [r7, #4]
 802f802:	9300      	str	r3, [sp, #0]
 802f804:	68bb      	ldr	r3, [r7, #8]
 802f806:	2200      	movs	r2, #0
 802f808:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802f80c:	68f8      	ldr	r0, [r7, #12]
 802f80e:	f7ff ff4b 	bl	802f6a8 <SPI_WaitFifoStateUntilTimeout>
 802f812:	4603      	mov	r3, r0
 802f814:	2b00      	cmp	r3, #0
 802f816:	d007      	beq.n	802f828 <SPI_EndRxTransaction+0xa6>
 802f818:	68fb      	ldr	r3, [r7, #12]
 802f81a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f81c:	f043 0220 	orr.w	r2, r3, #32
 802f820:	68fb      	ldr	r3, [r7, #12]
 802f822:	661a      	str	r2, [r3, #96]	; 0x60
 802f824:	2303      	movs	r3, #3
 802f826:	e000      	b.n	802f82a <SPI_EndRxTransaction+0xa8>
 802f828:	2300      	movs	r3, #0
 802f82a:	4618      	mov	r0, r3
 802f82c:	3710      	adds	r7, #16
 802f82e:	46bd      	mov	sp, r7
 802f830:	bd80      	pop	{r7, pc}

0802f832 <SPI_EndRxTxTransaction>:
 802f832:	b580      	push	{r7, lr}
 802f834:	b086      	sub	sp, #24
 802f836:	af02      	add	r7, sp, #8
 802f838:	60f8      	str	r0, [r7, #12]
 802f83a:	60b9      	str	r1, [r7, #8]
 802f83c:	607a      	str	r2, [r7, #4]
 802f83e:	687b      	ldr	r3, [r7, #4]
 802f840:	9300      	str	r3, [sp, #0]
 802f842:	68bb      	ldr	r3, [r7, #8]
 802f844:	2200      	movs	r2, #0
 802f846:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 802f84a:	68f8      	ldr	r0, [r7, #12]
 802f84c:	f7ff ff2c 	bl	802f6a8 <SPI_WaitFifoStateUntilTimeout>
 802f850:	4603      	mov	r3, r0
 802f852:	2b00      	cmp	r3, #0
 802f854:	d007      	beq.n	802f866 <SPI_EndRxTxTransaction+0x34>
 802f856:	68fb      	ldr	r3, [r7, #12]
 802f858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f85a:	f043 0220 	orr.w	r2, r3, #32
 802f85e:	68fb      	ldr	r3, [r7, #12]
 802f860:	661a      	str	r2, [r3, #96]	; 0x60
 802f862:	2303      	movs	r3, #3
 802f864:	e027      	b.n	802f8b6 <SPI_EndRxTxTransaction+0x84>
 802f866:	687b      	ldr	r3, [r7, #4]
 802f868:	9300      	str	r3, [sp, #0]
 802f86a:	68bb      	ldr	r3, [r7, #8]
 802f86c:	2200      	movs	r2, #0
 802f86e:	2180      	movs	r1, #128	; 0x80
 802f870:	68f8      	ldr	r0, [r7, #12]
 802f872:	f7ff feaf 	bl	802f5d4 <SPI_WaitFlagStateUntilTimeout>
 802f876:	4603      	mov	r3, r0
 802f878:	2b00      	cmp	r3, #0
 802f87a:	d007      	beq.n	802f88c <SPI_EndRxTxTransaction+0x5a>
 802f87c:	68fb      	ldr	r3, [r7, #12]
 802f87e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f880:	f043 0220 	orr.w	r2, r3, #32
 802f884:	68fb      	ldr	r3, [r7, #12]
 802f886:	661a      	str	r2, [r3, #96]	; 0x60
 802f888:	2303      	movs	r3, #3
 802f88a:	e014      	b.n	802f8b6 <SPI_EndRxTxTransaction+0x84>
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	9300      	str	r3, [sp, #0]
 802f890:	68bb      	ldr	r3, [r7, #8]
 802f892:	2200      	movs	r2, #0
 802f894:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802f898:	68f8      	ldr	r0, [r7, #12]
 802f89a:	f7ff ff05 	bl	802f6a8 <SPI_WaitFifoStateUntilTimeout>
 802f89e:	4603      	mov	r3, r0
 802f8a0:	2b00      	cmp	r3, #0
 802f8a2:	d007      	beq.n	802f8b4 <SPI_EndRxTxTransaction+0x82>
 802f8a4:	68fb      	ldr	r3, [r7, #12]
 802f8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f8a8:	f043 0220 	orr.w	r2, r3, #32
 802f8ac:	68fb      	ldr	r3, [r7, #12]
 802f8ae:	661a      	str	r2, [r3, #96]	; 0x60
 802f8b0:	2303      	movs	r3, #3
 802f8b2:	e000      	b.n	802f8b6 <SPI_EndRxTxTransaction+0x84>
 802f8b4:	2300      	movs	r3, #0
 802f8b6:	4618      	mov	r0, r3
 802f8b8:	3710      	adds	r7, #16
 802f8ba:	46bd      	mov	sp, r7
 802f8bc:	bd80      	pop	{r7, pc}

0802f8be <HAL_TIM_Base_Init>:
 802f8be:	b580      	push	{r7, lr}
 802f8c0:	b082      	sub	sp, #8
 802f8c2:	af00      	add	r7, sp, #0
 802f8c4:	6078      	str	r0, [r7, #4]
 802f8c6:	687b      	ldr	r3, [r7, #4]
 802f8c8:	2b00      	cmp	r3, #0
 802f8ca:	d101      	bne.n	802f8d0 <HAL_TIM_Base_Init+0x12>
 802f8cc:	2301      	movs	r3, #1
 802f8ce:	e01d      	b.n	802f90c <HAL_TIM_Base_Init+0x4e>
 802f8d0:	687b      	ldr	r3, [r7, #4]
 802f8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802f8d6:	b2db      	uxtb	r3, r3
 802f8d8:	2b00      	cmp	r3, #0
 802f8da:	d106      	bne.n	802f8ea <HAL_TIM_Base_Init+0x2c>
 802f8dc:	687b      	ldr	r3, [r7, #4]
 802f8de:	2200      	movs	r2, #0
 802f8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802f8e4:	6878      	ldr	r0, [r7, #4]
 802f8e6:	f000 f815 	bl	802f914 <HAL_TIM_Base_MspInit>
 802f8ea:	687b      	ldr	r3, [r7, #4]
 802f8ec:	2202      	movs	r2, #2
 802f8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802f8f2:	687b      	ldr	r3, [r7, #4]
 802f8f4:	681a      	ldr	r2, [r3, #0]
 802f8f6:	687b      	ldr	r3, [r7, #4]
 802f8f8:	3304      	adds	r3, #4
 802f8fa:	4619      	mov	r1, r3
 802f8fc:	4610      	mov	r0, r2
 802f8fe:	f000 fcdb 	bl	80302b8 <TIM_Base_SetConfig>
 802f902:	687b      	ldr	r3, [r7, #4]
 802f904:	2201      	movs	r2, #1
 802f906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802f90a:	2300      	movs	r3, #0
 802f90c:	4618      	mov	r0, r3
 802f90e:	3708      	adds	r7, #8
 802f910:	46bd      	mov	sp, r7
 802f912:	bd80      	pop	{r7, pc}

0802f914 <HAL_TIM_Base_MspInit>:
 802f914:	b480      	push	{r7}
 802f916:	b083      	sub	sp, #12
 802f918:	af00      	add	r7, sp, #0
 802f91a:	6078      	str	r0, [r7, #4]
 802f91c:	bf00      	nop
 802f91e:	370c      	adds	r7, #12
 802f920:	46bd      	mov	sp, r7
 802f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f926:	4770      	bx	lr

0802f928 <HAL_TIM_Base_Start>:
 802f928:	b480      	push	{r7}
 802f92a:	b085      	sub	sp, #20
 802f92c:	af00      	add	r7, sp, #0
 802f92e:	6078      	str	r0, [r7, #4]
 802f930:	687b      	ldr	r3, [r7, #4]
 802f932:	2202      	movs	r2, #2
 802f934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802f938:	687b      	ldr	r3, [r7, #4]
 802f93a:	681b      	ldr	r3, [r3, #0]
 802f93c:	689a      	ldr	r2, [r3, #8]
 802f93e:	4b0e      	ldr	r3, [pc, #56]	; (802f978 <HAL_TIM_Base_Start+0x50>)
 802f940:	4013      	ands	r3, r2
 802f942:	60fb      	str	r3, [r7, #12]
 802f944:	68fb      	ldr	r3, [r7, #12]
 802f946:	2b06      	cmp	r3, #6
 802f948:	d00b      	beq.n	802f962 <HAL_TIM_Base_Start+0x3a>
 802f94a:	68fb      	ldr	r3, [r7, #12]
 802f94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f950:	d007      	beq.n	802f962 <HAL_TIM_Base_Start+0x3a>
 802f952:	687b      	ldr	r3, [r7, #4]
 802f954:	681b      	ldr	r3, [r3, #0]
 802f956:	681a      	ldr	r2, [r3, #0]
 802f958:	687b      	ldr	r3, [r7, #4]
 802f95a:	681b      	ldr	r3, [r3, #0]
 802f95c:	f042 0201 	orr.w	r2, r2, #1
 802f960:	601a      	str	r2, [r3, #0]
 802f962:	687b      	ldr	r3, [r7, #4]
 802f964:	2201      	movs	r2, #1
 802f966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802f96a:	2300      	movs	r3, #0
 802f96c:	4618      	mov	r0, r3
 802f96e:	3714      	adds	r7, #20
 802f970:	46bd      	mov	sp, r7
 802f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f976:	4770      	bx	lr
 802f978:	00010007 	.word	0x00010007

0802f97c <HAL_TIM_Base_Start_IT>:
 802f97c:	b480      	push	{r7}
 802f97e:	b085      	sub	sp, #20
 802f980:	af00      	add	r7, sp, #0
 802f982:	6078      	str	r0, [r7, #4]
 802f984:	687b      	ldr	r3, [r7, #4]
 802f986:	681b      	ldr	r3, [r3, #0]
 802f988:	68da      	ldr	r2, [r3, #12]
 802f98a:	687b      	ldr	r3, [r7, #4]
 802f98c:	681b      	ldr	r3, [r3, #0]
 802f98e:	f042 0201 	orr.w	r2, r2, #1
 802f992:	60da      	str	r2, [r3, #12]
 802f994:	687b      	ldr	r3, [r7, #4]
 802f996:	681b      	ldr	r3, [r3, #0]
 802f998:	689a      	ldr	r2, [r3, #8]
 802f99a:	4b0c      	ldr	r3, [pc, #48]	; (802f9cc <HAL_TIM_Base_Start_IT+0x50>)
 802f99c:	4013      	ands	r3, r2
 802f99e:	60fb      	str	r3, [r7, #12]
 802f9a0:	68fb      	ldr	r3, [r7, #12]
 802f9a2:	2b06      	cmp	r3, #6
 802f9a4:	d00b      	beq.n	802f9be <HAL_TIM_Base_Start_IT+0x42>
 802f9a6:	68fb      	ldr	r3, [r7, #12]
 802f9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f9ac:	d007      	beq.n	802f9be <HAL_TIM_Base_Start_IT+0x42>
 802f9ae:	687b      	ldr	r3, [r7, #4]
 802f9b0:	681b      	ldr	r3, [r3, #0]
 802f9b2:	681a      	ldr	r2, [r3, #0]
 802f9b4:	687b      	ldr	r3, [r7, #4]
 802f9b6:	681b      	ldr	r3, [r3, #0]
 802f9b8:	f042 0201 	orr.w	r2, r2, #1
 802f9bc:	601a      	str	r2, [r3, #0]
 802f9be:	2300      	movs	r3, #0
 802f9c0:	4618      	mov	r0, r3
 802f9c2:	3714      	adds	r7, #20
 802f9c4:	46bd      	mov	sp, r7
 802f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9ca:	4770      	bx	lr
 802f9cc:	00010007 	.word	0x00010007

0802f9d0 <HAL_TIM_PWM_Start>:
 802f9d0:	b580      	push	{r7, lr}
 802f9d2:	b084      	sub	sp, #16
 802f9d4:	af00      	add	r7, sp, #0
 802f9d6:	6078      	str	r0, [r7, #4]
 802f9d8:	6039      	str	r1, [r7, #0]
 802f9da:	687b      	ldr	r3, [r7, #4]
 802f9dc:	681b      	ldr	r3, [r3, #0]
 802f9de:	2201      	movs	r2, #1
 802f9e0:	6839      	ldr	r1, [r7, #0]
 802f9e2:	4618      	mov	r0, r3
 802f9e4:	f001 f92a 	bl	8030c3c <TIM_CCxChannelCmd>
 802f9e8:	687b      	ldr	r3, [r7, #4]
 802f9ea:	681b      	ldr	r3, [r3, #0]
 802f9ec:	4a17      	ldr	r2, [pc, #92]	; (802fa4c <HAL_TIM_PWM_Start+0x7c>)
 802f9ee:	4293      	cmp	r3, r2
 802f9f0:	d004      	beq.n	802f9fc <HAL_TIM_PWM_Start+0x2c>
 802f9f2:	687b      	ldr	r3, [r7, #4]
 802f9f4:	681b      	ldr	r3, [r3, #0]
 802f9f6:	4a16      	ldr	r2, [pc, #88]	; (802fa50 <HAL_TIM_PWM_Start+0x80>)
 802f9f8:	4293      	cmp	r3, r2
 802f9fa:	d101      	bne.n	802fa00 <HAL_TIM_PWM_Start+0x30>
 802f9fc:	2301      	movs	r3, #1
 802f9fe:	e000      	b.n	802fa02 <HAL_TIM_PWM_Start+0x32>
 802fa00:	2300      	movs	r3, #0
 802fa02:	2b00      	cmp	r3, #0
 802fa04:	d007      	beq.n	802fa16 <HAL_TIM_PWM_Start+0x46>
 802fa06:	687b      	ldr	r3, [r7, #4]
 802fa08:	681b      	ldr	r3, [r3, #0]
 802fa0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802fa0c:	687b      	ldr	r3, [r7, #4]
 802fa0e:	681b      	ldr	r3, [r3, #0]
 802fa10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802fa14:	645a      	str	r2, [r3, #68]	; 0x44
 802fa16:	687b      	ldr	r3, [r7, #4]
 802fa18:	681b      	ldr	r3, [r3, #0]
 802fa1a:	689a      	ldr	r2, [r3, #8]
 802fa1c:	4b0d      	ldr	r3, [pc, #52]	; (802fa54 <HAL_TIM_PWM_Start+0x84>)
 802fa1e:	4013      	ands	r3, r2
 802fa20:	60fb      	str	r3, [r7, #12]
 802fa22:	68fb      	ldr	r3, [r7, #12]
 802fa24:	2b06      	cmp	r3, #6
 802fa26:	d00b      	beq.n	802fa40 <HAL_TIM_PWM_Start+0x70>
 802fa28:	68fb      	ldr	r3, [r7, #12]
 802fa2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802fa2e:	d007      	beq.n	802fa40 <HAL_TIM_PWM_Start+0x70>
 802fa30:	687b      	ldr	r3, [r7, #4]
 802fa32:	681b      	ldr	r3, [r3, #0]
 802fa34:	681a      	ldr	r2, [r3, #0]
 802fa36:	687b      	ldr	r3, [r7, #4]
 802fa38:	681b      	ldr	r3, [r3, #0]
 802fa3a:	f042 0201 	orr.w	r2, r2, #1
 802fa3e:	601a      	str	r2, [r3, #0]
 802fa40:	2300      	movs	r3, #0
 802fa42:	4618      	mov	r0, r3
 802fa44:	3710      	adds	r7, #16
 802fa46:	46bd      	mov	sp, r7
 802fa48:	bd80      	pop	{r7, pc}
 802fa4a:	bf00      	nop
 802fa4c:	40010000 	.word	0x40010000
 802fa50:	40010400 	.word	0x40010400
 802fa54:	00010007 	.word	0x00010007

0802fa58 <HAL_TIM_IC_Start_IT>:
 802fa58:	b580      	push	{r7, lr}
 802fa5a:	b084      	sub	sp, #16
 802fa5c:	af00      	add	r7, sp, #0
 802fa5e:	6078      	str	r0, [r7, #4]
 802fa60:	6039      	str	r1, [r7, #0]
 802fa62:	683b      	ldr	r3, [r7, #0]
 802fa64:	2b0c      	cmp	r3, #12
 802fa66:	d841      	bhi.n	802faec <HAL_TIM_IC_Start_IT+0x94>
 802fa68:	a201      	add	r2, pc, #4	; (adr r2, 802fa70 <HAL_TIM_IC_Start_IT+0x18>)
 802fa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa6e:	bf00      	nop
 802fa70:	0802faa5 	.word	0x0802faa5
 802fa74:	0802faed 	.word	0x0802faed
 802fa78:	0802faed 	.word	0x0802faed
 802fa7c:	0802faed 	.word	0x0802faed
 802fa80:	0802fab7 	.word	0x0802fab7
 802fa84:	0802faed 	.word	0x0802faed
 802fa88:	0802faed 	.word	0x0802faed
 802fa8c:	0802faed 	.word	0x0802faed
 802fa90:	0802fac9 	.word	0x0802fac9
 802fa94:	0802faed 	.word	0x0802faed
 802fa98:	0802faed 	.word	0x0802faed
 802fa9c:	0802faed 	.word	0x0802faed
 802faa0:	0802fadb 	.word	0x0802fadb
 802faa4:	687b      	ldr	r3, [r7, #4]
 802faa6:	681b      	ldr	r3, [r3, #0]
 802faa8:	68da      	ldr	r2, [r3, #12]
 802faaa:	687b      	ldr	r3, [r7, #4]
 802faac:	681b      	ldr	r3, [r3, #0]
 802faae:	f042 0202 	orr.w	r2, r2, #2
 802fab2:	60da      	str	r2, [r3, #12]
 802fab4:	e01b      	b.n	802faee <HAL_TIM_IC_Start_IT+0x96>
 802fab6:	687b      	ldr	r3, [r7, #4]
 802fab8:	681b      	ldr	r3, [r3, #0]
 802faba:	68da      	ldr	r2, [r3, #12]
 802fabc:	687b      	ldr	r3, [r7, #4]
 802fabe:	681b      	ldr	r3, [r3, #0]
 802fac0:	f042 0204 	orr.w	r2, r2, #4
 802fac4:	60da      	str	r2, [r3, #12]
 802fac6:	e012      	b.n	802faee <HAL_TIM_IC_Start_IT+0x96>
 802fac8:	687b      	ldr	r3, [r7, #4]
 802faca:	681b      	ldr	r3, [r3, #0]
 802facc:	68da      	ldr	r2, [r3, #12]
 802face:	687b      	ldr	r3, [r7, #4]
 802fad0:	681b      	ldr	r3, [r3, #0]
 802fad2:	f042 0208 	orr.w	r2, r2, #8
 802fad6:	60da      	str	r2, [r3, #12]
 802fad8:	e009      	b.n	802faee <HAL_TIM_IC_Start_IT+0x96>
 802fada:	687b      	ldr	r3, [r7, #4]
 802fadc:	681b      	ldr	r3, [r3, #0]
 802fade:	68da      	ldr	r2, [r3, #12]
 802fae0:	687b      	ldr	r3, [r7, #4]
 802fae2:	681b      	ldr	r3, [r3, #0]
 802fae4:	f042 0210 	orr.w	r2, r2, #16
 802fae8:	60da      	str	r2, [r3, #12]
 802faea:	e000      	b.n	802faee <HAL_TIM_IC_Start_IT+0x96>
 802faec:	bf00      	nop
 802faee:	687b      	ldr	r3, [r7, #4]
 802faf0:	681b      	ldr	r3, [r3, #0]
 802faf2:	2201      	movs	r2, #1
 802faf4:	6839      	ldr	r1, [r7, #0]
 802faf6:	4618      	mov	r0, r3
 802faf8:	f001 f8a0 	bl	8030c3c <TIM_CCxChannelCmd>
 802fafc:	687b      	ldr	r3, [r7, #4]
 802fafe:	681b      	ldr	r3, [r3, #0]
 802fb00:	689a      	ldr	r2, [r3, #8]
 802fb02:	4b0b      	ldr	r3, [pc, #44]	; (802fb30 <HAL_TIM_IC_Start_IT+0xd8>)
 802fb04:	4013      	ands	r3, r2
 802fb06:	60fb      	str	r3, [r7, #12]
 802fb08:	68fb      	ldr	r3, [r7, #12]
 802fb0a:	2b06      	cmp	r3, #6
 802fb0c:	d00b      	beq.n	802fb26 <HAL_TIM_IC_Start_IT+0xce>
 802fb0e:	68fb      	ldr	r3, [r7, #12]
 802fb10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802fb14:	d007      	beq.n	802fb26 <HAL_TIM_IC_Start_IT+0xce>
 802fb16:	687b      	ldr	r3, [r7, #4]
 802fb18:	681b      	ldr	r3, [r3, #0]
 802fb1a:	681a      	ldr	r2, [r3, #0]
 802fb1c:	687b      	ldr	r3, [r7, #4]
 802fb1e:	681b      	ldr	r3, [r3, #0]
 802fb20:	f042 0201 	orr.w	r2, r2, #1
 802fb24:	601a      	str	r2, [r3, #0]
 802fb26:	2300      	movs	r3, #0
 802fb28:	4618      	mov	r0, r3
 802fb2a:	3710      	adds	r7, #16
 802fb2c:	46bd      	mov	sp, r7
 802fb2e:	bd80      	pop	{r7, pc}
 802fb30:	00010007 	.word	0x00010007

0802fb34 <HAL_TIM_IRQHandler>:
 802fb34:	b580      	push	{r7, lr}
 802fb36:	b082      	sub	sp, #8
 802fb38:	af00      	add	r7, sp, #0
 802fb3a:	6078      	str	r0, [r7, #4]
 802fb3c:	687b      	ldr	r3, [r7, #4]
 802fb3e:	681b      	ldr	r3, [r3, #0]
 802fb40:	691b      	ldr	r3, [r3, #16]
 802fb42:	f003 0302 	and.w	r3, r3, #2
 802fb46:	2b02      	cmp	r3, #2
 802fb48:	d122      	bne.n	802fb90 <HAL_TIM_IRQHandler+0x5c>
 802fb4a:	687b      	ldr	r3, [r7, #4]
 802fb4c:	681b      	ldr	r3, [r3, #0]
 802fb4e:	68db      	ldr	r3, [r3, #12]
 802fb50:	f003 0302 	and.w	r3, r3, #2
 802fb54:	2b02      	cmp	r3, #2
 802fb56:	d11b      	bne.n	802fb90 <HAL_TIM_IRQHandler+0x5c>
 802fb58:	687b      	ldr	r3, [r7, #4]
 802fb5a:	681b      	ldr	r3, [r3, #0]
 802fb5c:	f06f 0202 	mvn.w	r2, #2
 802fb60:	611a      	str	r2, [r3, #16]
 802fb62:	687b      	ldr	r3, [r7, #4]
 802fb64:	2201      	movs	r2, #1
 802fb66:	771a      	strb	r2, [r3, #28]
 802fb68:	687b      	ldr	r3, [r7, #4]
 802fb6a:	681b      	ldr	r3, [r3, #0]
 802fb6c:	699b      	ldr	r3, [r3, #24]
 802fb6e:	f003 0303 	and.w	r3, r3, #3
 802fb72:	2b00      	cmp	r3, #0
 802fb74:	d003      	beq.n	802fb7e <HAL_TIM_IRQHandler+0x4a>
 802fb76:	6878      	ldr	r0, [r7, #4]
 802fb78:	f000 fb80 	bl	803027c <HAL_TIM_IC_CaptureCallback>
 802fb7c:	e005      	b.n	802fb8a <HAL_TIM_IRQHandler+0x56>
 802fb7e:	6878      	ldr	r0, [r7, #4]
 802fb80:	f000 fb72 	bl	8030268 <HAL_TIM_OC_DelayElapsedCallback>
 802fb84:	6878      	ldr	r0, [r7, #4]
 802fb86:	f000 fb83 	bl	8030290 <HAL_TIM_PWM_PulseFinishedCallback>
 802fb8a:	687b      	ldr	r3, [r7, #4]
 802fb8c:	2200      	movs	r2, #0
 802fb8e:	771a      	strb	r2, [r3, #28]
 802fb90:	687b      	ldr	r3, [r7, #4]
 802fb92:	681b      	ldr	r3, [r3, #0]
 802fb94:	691b      	ldr	r3, [r3, #16]
 802fb96:	f003 0304 	and.w	r3, r3, #4
 802fb9a:	2b04      	cmp	r3, #4
 802fb9c:	d122      	bne.n	802fbe4 <HAL_TIM_IRQHandler+0xb0>
 802fb9e:	687b      	ldr	r3, [r7, #4]
 802fba0:	681b      	ldr	r3, [r3, #0]
 802fba2:	68db      	ldr	r3, [r3, #12]
 802fba4:	f003 0304 	and.w	r3, r3, #4
 802fba8:	2b04      	cmp	r3, #4
 802fbaa:	d11b      	bne.n	802fbe4 <HAL_TIM_IRQHandler+0xb0>
 802fbac:	687b      	ldr	r3, [r7, #4]
 802fbae:	681b      	ldr	r3, [r3, #0]
 802fbb0:	f06f 0204 	mvn.w	r2, #4
 802fbb4:	611a      	str	r2, [r3, #16]
 802fbb6:	687b      	ldr	r3, [r7, #4]
 802fbb8:	2202      	movs	r2, #2
 802fbba:	771a      	strb	r2, [r3, #28]
 802fbbc:	687b      	ldr	r3, [r7, #4]
 802fbbe:	681b      	ldr	r3, [r3, #0]
 802fbc0:	699b      	ldr	r3, [r3, #24]
 802fbc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802fbc6:	2b00      	cmp	r3, #0
 802fbc8:	d003      	beq.n	802fbd2 <HAL_TIM_IRQHandler+0x9e>
 802fbca:	6878      	ldr	r0, [r7, #4]
 802fbcc:	f000 fb56 	bl	803027c <HAL_TIM_IC_CaptureCallback>
 802fbd0:	e005      	b.n	802fbde <HAL_TIM_IRQHandler+0xaa>
 802fbd2:	6878      	ldr	r0, [r7, #4]
 802fbd4:	f000 fb48 	bl	8030268 <HAL_TIM_OC_DelayElapsedCallback>
 802fbd8:	6878      	ldr	r0, [r7, #4]
 802fbda:	f000 fb59 	bl	8030290 <HAL_TIM_PWM_PulseFinishedCallback>
 802fbde:	687b      	ldr	r3, [r7, #4]
 802fbe0:	2200      	movs	r2, #0
 802fbe2:	771a      	strb	r2, [r3, #28]
 802fbe4:	687b      	ldr	r3, [r7, #4]
 802fbe6:	681b      	ldr	r3, [r3, #0]
 802fbe8:	691b      	ldr	r3, [r3, #16]
 802fbea:	f003 0308 	and.w	r3, r3, #8
 802fbee:	2b08      	cmp	r3, #8
 802fbf0:	d122      	bne.n	802fc38 <HAL_TIM_IRQHandler+0x104>
 802fbf2:	687b      	ldr	r3, [r7, #4]
 802fbf4:	681b      	ldr	r3, [r3, #0]
 802fbf6:	68db      	ldr	r3, [r3, #12]
 802fbf8:	f003 0308 	and.w	r3, r3, #8
 802fbfc:	2b08      	cmp	r3, #8
 802fbfe:	d11b      	bne.n	802fc38 <HAL_TIM_IRQHandler+0x104>
 802fc00:	687b      	ldr	r3, [r7, #4]
 802fc02:	681b      	ldr	r3, [r3, #0]
 802fc04:	f06f 0208 	mvn.w	r2, #8
 802fc08:	611a      	str	r2, [r3, #16]
 802fc0a:	687b      	ldr	r3, [r7, #4]
 802fc0c:	2204      	movs	r2, #4
 802fc0e:	771a      	strb	r2, [r3, #28]
 802fc10:	687b      	ldr	r3, [r7, #4]
 802fc12:	681b      	ldr	r3, [r3, #0]
 802fc14:	69db      	ldr	r3, [r3, #28]
 802fc16:	f003 0303 	and.w	r3, r3, #3
 802fc1a:	2b00      	cmp	r3, #0
 802fc1c:	d003      	beq.n	802fc26 <HAL_TIM_IRQHandler+0xf2>
 802fc1e:	6878      	ldr	r0, [r7, #4]
 802fc20:	f000 fb2c 	bl	803027c <HAL_TIM_IC_CaptureCallback>
 802fc24:	e005      	b.n	802fc32 <HAL_TIM_IRQHandler+0xfe>
 802fc26:	6878      	ldr	r0, [r7, #4]
 802fc28:	f000 fb1e 	bl	8030268 <HAL_TIM_OC_DelayElapsedCallback>
 802fc2c:	6878      	ldr	r0, [r7, #4]
 802fc2e:	f000 fb2f 	bl	8030290 <HAL_TIM_PWM_PulseFinishedCallback>
 802fc32:	687b      	ldr	r3, [r7, #4]
 802fc34:	2200      	movs	r2, #0
 802fc36:	771a      	strb	r2, [r3, #28]
 802fc38:	687b      	ldr	r3, [r7, #4]
 802fc3a:	681b      	ldr	r3, [r3, #0]
 802fc3c:	691b      	ldr	r3, [r3, #16]
 802fc3e:	f003 0310 	and.w	r3, r3, #16
 802fc42:	2b10      	cmp	r3, #16
 802fc44:	d122      	bne.n	802fc8c <HAL_TIM_IRQHandler+0x158>
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	681b      	ldr	r3, [r3, #0]
 802fc4a:	68db      	ldr	r3, [r3, #12]
 802fc4c:	f003 0310 	and.w	r3, r3, #16
 802fc50:	2b10      	cmp	r3, #16
 802fc52:	d11b      	bne.n	802fc8c <HAL_TIM_IRQHandler+0x158>
 802fc54:	687b      	ldr	r3, [r7, #4]
 802fc56:	681b      	ldr	r3, [r3, #0]
 802fc58:	f06f 0210 	mvn.w	r2, #16
 802fc5c:	611a      	str	r2, [r3, #16]
 802fc5e:	687b      	ldr	r3, [r7, #4]
 802fc60:	2208      	movs	r2, #8
 802fc62:	771a      	strb	r2, [r3, #28]
 802fc64:	687b      	ldr	r3, [r7, #4]
 802fc66:	681b      	ldr	r3, [r3, #0]
 802fc68:	69db      	ldr	r3, [r3, #28]
 802fc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802fc6e:	2b00      	cmp	r3, #0
 802fc70:	d003      	beq.n	802fc7a <HAL_TIM_IRQHandler+0x146>
 802fc72:	6878      	ldr	r0, [r7, #4]
 802fc74:	f000 fb02 	bl	803027c <HAL_TIM_IC_CaptureCallback>
 802fc78:	e005      	b.n	802fc86 <HAL_TIM_IRQHandler+0x152>
 802fc7a:	6878      	ldr	r0, [r7, #4]
 802fc7c:	f000 faf4 	bl	8030268 <HAL_TIM_OC_DelayElapsedCallback>
 802fc80:	6878      	ldr	r0, [r7, #4]
 802fc82:	f000 fb05 	bl	8030290 <HAL_TIM_PWM_PulseFinishedCallback>
 802fc86:	687b      	ldr	r3, [r7, #4]
 802fc88:	2200      	movs	r2, #0
 802fc8a:	771a      	strb	r2, [r3, #28]
 802fc8c:	687b      	ldr	r3, [r7, #4]
 802fc8e:	681b      	ldr	r3, [r3, #0]
 802fc90:	691b      	ldr	r3, [r3, #16]
 802fc92:	f003 0301 	and.w	r3, r3, #1
 802fc96:	2b01      	cmp	r3, #1
 802fc98:	d10e      	bne.n	802fcb8 <HAL_TIM_IRQHandler+0x184>
 802fc9a:	687b      	ldr	r3, [r7, #4]
 802fc9c:	681b      	ldr	r3, [r3, #0]
 802fc9e:	68db      	ldr	r3, [r3, #12]
 802fca0:	f003 0301 	and.w	r3, r3, #1
 802fca4:	2b01      	cmp	r3, #1
 802fca6:	d107      	bne.n	802fcb8 <HAL_TIM_IRQHandler+0x184>
 802fca8:	687b      	ldr	r3, [r7, #4]
 802fcaa:	681b      	ldr	r3, [r3, #0]
 802fcac:	f06f 0201 	mvn.w	r2, #1
 802fcb0:	611a      	str	r2, [r3, #16]
 802fcb2:	6878      	ldr	r0, [r7, #4]
 802fcb4:	f7e8 fcc2 	bl	801863c <HAL_TIM_PeriodElapsedCallback>
 802fcb8:	687b      	ldr	r3, [r7, #4]
 802fcba:	681b      	ldr	r3, [r3, #0]
 802fcbc:	691b      	ldr	r3, [r3, #16]
 802fcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fcc2:	2b80      	cmp	r3, #128	; 0x80
 802fcc4:	d10e      	bne.n	802fce4 <HAL_TIM_IRQHandler+0x1b0>
 802fcc6:	687b      	ldr	r3, [r7, #4]
 802fcc8:	681b      	ldr	r3, [r3, #0]
 802fcca:	68db      	ldr	r3, [r3, #12]
 802fccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fcd0:	2b80      	cmp	r3, #128	; 0x80
 802fcd2:	d107      	bne.n	802fce4 <HAL_TIM_IRQHandler+0x1b0>
 802fcd4:	687b      	ldr	r3, [r7, #4]
 802fcd6:	681b      	ldr	r3, [r3, #0]
 802fcd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802fcdc:	611a      	str	r2, [r3, #16]
 802fcde:	6878      	ldr	r0, [r7, #4]
 802fce0:	f001 f868 	bl	8030db4 <HAL_TIMEx_BreakCallback>
 802fce4:	687b      	ldr	r3, [r7, #4]
 802fce6:	681b      	ldr	r3, [r3, #0]
 802fce8:	691b      	ldr	r3, [r3, #16]
 802fcea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802fcee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802fcf2:	d10e      	bne.n	802fd12 <HAL_TIM_IRQHandler+0x1de>
 802fcf4:	687b      	ldr	r3, [r7, #4]
 802fcf6:	681b      	ldr	r3, [r3, #0]
 802fcf8:	68db      	ldr	r3, [r3, #12]
 802fcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fcfe:	2b80      	cmp	r3, #128	; 0x80
 802fd00:	d107      	bne.n	802fd12 <HAL_TIM_IRQHandler+0x1de>
 802fd02:	687b      	ldr	r3, [r7, #4]
 802fd04:	681b      	ldr	r3, [r3, #0]
 802fd06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802fd0a:	611a      	str	r2, [r3, #16]
 802fd0c:	6878      	ldr	r0, [r7, #4]
 802fd0e:	f001 f85b 	bl	8030dc8 <HAL_TIMEx_Break2Callback>
 802fd12:	687b      	ldr	r3, [r7, #4]
 802fd14:	681b      	ldr	r3, [r3, #0]
 802fd16:	691b      	ldr	r3, [r3, #16]
 802fd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fd1c:	2b40      	cmp	r3, #64	; 0x40
 802fd1e:	d10e      	bne.n	802fd3e <HAL_TIM_IRQHandler+0x20a>
 802fd20:	687b      	ldr	r3, [r7, #4]
 802fd22:	681b      	ldr	r3, [r3, #0]
 802fd24:	68db      	ldr	r3, [r3, #12]
 802fd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fd2a:	2b40      	cmp	r3, #64	; 0x40
 802fd2c:	d107      	bne.n	802fd3e <HAL_TIM_IRQHandler+0x20a>
 802fd2e:	687b      	ldr	r3, [r7, #4]
 802fd30:	681b      	ldr	r3, [r3, #0]
 802fd32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802fd36:	611a      	str	r2, [r3, #16]
 802fd38:	6878      	ldr	r0, [r7, #4]
 802fd3a:	f000 fab3 	bl	80302a4 <HAL_TIM_TriggerCallback>
 802fd3e:	687b      	ldr	r3, [r7, #4]
 802fd40:	681b      	ldr	r3, [r3, #0]
 802fd42:	691b      	ldr	r3, [r3, #16]
 802fd44:	f003 0320 	and.w	r3, r3, #32
 802fd48:	2b20      	cmp	r3, #32
 802fd4a:	d10e      	bne.n	802fd6a <HAL_TIM_IRQHandler+0x236>
 802fd4c:	687b      	ldr	r3, [r7, #4]
 802fd4e:	681b      	ldr	r3, [r3, #0]
 802fd50:	68db      	ldr	r3, [r3, #12]
 802fd52:	f003 0320 	and.w	r3, r3, #32
 802fd56:	2b20      	cmp	r3, #32
 802fd58:	d107      	bne.n	802fd6a <HAL_TIM_IRQHandler+0x236>
 802fd5a:	687b      	ldr	r3, [r7, #4]
 802fd5c:	681b      	ldr	r3, [r3, #0]
 802fd5e:	f06f 0220 	mvn.w	r2, #32
 802fd62:	611a      	str	r2, [r3, #16]
 802fd64:	6878      	ldr	r0, [r7, #4]
 802fd66:	f001 f81b 	bl	8030da0 <HAL_TIMEx_CommutCallback>
 802fd6a:	bf00      	nop
 802fd6c:	3708      	adds	r7, #8
 802fd6e:	46bd      	mov	sp, r7
 802fd70:	bd80      	pop	{r7, pc}

0802fd72 <HAL_TIM_IC_ConfigChannel>:
 802fd72:	b580      	push	{r7, lr}
 802fd74:	b084      	sub	sp, #16
 802fd76:	af00      	add	r7, sp, #0
 802fd78:	60f8      	str	r0, [r7, #12]
 802fd7a:	60b9      	str	r1, [r7, #8]
 802fd7c:	607a      	str	r2, [r7, #4]
 802fd7e:	68fb      	ldr	r3, [r7, #12]
 802fd80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fd84:	2b01      	cmp	r3, #1
 802fd86:	d101      	bne.n	802fd8c <HAL_TIM_IC_ConfigChannel+0x1a>
 802fd88:	2302      	movs	r3, #2
 802fd8a:	e08a      	b.n	802fea2 <HAL_TIM_IC_ConfigChannel+0x130>
 802fd8c:	68fb      	ldr	r3, [r7, #12]
 802fd8e:	2201      	movs	r2, #1
 802fd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802fd94:	68fb      	ldr	r3, [r7, #12]
 802fd96:	2202      	movs	r2, #2
 802fd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802fd9c:	687b      	ldr	r3, [r7, #4]
 802fd9e:	2b00      	cmp	r3, #0
 802fda0:	d11b      	bne.n	802fdda <HAL_TIM_IC_ConfigChannel+0x68>
 802fda2:	68fb      	ldr	r3, [r7, #12]
 802fda4:	6818      	ldr	r0, [r3, #0]
 802fda6:	68bb      	ldr	r3, [r7, #8]
 802fda8:	6819      	ldr	r1, [r3, #0]
 802fdaa:	68bb      	ldr	r3, [r7, #8]
 802fdac:	685a      	ldr	r2, [r3, #4]
 802fdae:	68bb      	ldr	r3, [r7, #8]
 802fdb0:	68db      	ldr	r3, [r3, #12]
 802fdb2:	f000 fd7f 	bl	80308b4 <TIM_TI1_SetConfig>
 802fdb6:	68fb      	ldr	r3, [r7, #12]
 802fdb8:	681b      	ldr	r3, [r3, #0]
 802fdba:	699a      	ldr	r2, [r3, #24]
 802fdbc:	68fb      	ldr	r3, [r7, #12]
 802fdbe:	681b      	ldr	r3, [r3, #0]
 802fdc0:	f022 020c 	bic.w	r2, r2, #12
 802fdc4:	619a      	str	r2, [r3, #24]
 802fdc6:	68fb      	ldr	r3, [r7, #12]
 802fdc8:	681b      	ldr	r3, [r3, #0]
 802fdca:	6999      	ldr	r1, [r3, #24]
 802fdcc:	68bb      	ldr	r3, [r7, #8]
 802fdce:	689a      	ldr	r2, [r3, #8]
 802fdd0:	68fb      	ldr	r3, [r7, #12]
 802fdd2:	681b      	ldr	r3, [r3, #0]
 802fdd4:	430a      	orrs	r2, r1
 802fdd6:	619a      	str	r2, [r3, #24]
 802fdd8:	e05a      	b.n	802fe90 <HAL_TIM_IC_ConfigChannel+0x11e>
 802fdda:	687b      	ldr	r3, [r7, #4]
 802fddc:	2b04      	cmp	r3, #4
 802fdde:	d11c      	bne.n	802fe1a <HAL_TIM_IC_ConfigChannel+0xa8>
 802fde0:	68fb      	ldr	r3, [r7, #12]
 802fde2:	6818      	ldr	r0, [r3, #0]
 802fde4:	68bb      	ldr	r3, [r7, #8]
 802fde6:	6819      	ldr	r1, [r3, #0]
 802fde8:	68bb      	ldr	r3, [r7, #8]
 802fdea:	685a      	ldr	r2, [r3, #4]
 802fdec:	68bb      	ldr	r3, [r7, #8]
 802fdee:	68db      	ldr	r3, [r3, #12]
 802fdf0:	f000 fe03 	bl	80309fa <TIM_TI2_SetConfig>
 802fdf4:	68fb      	ldr	r3, [r7, #12]
 802fdf6:	681b      	ldr	r3, [r3, #0]
 802fdf8:	699a      	ldr	r2, [r3, #24]
 802fdfa:	68fb      	ldr	r3, [r7, #12]
 802fdfc:	681b      	ldr	r3, [r3, #0]
 802fdfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 802fe02:	619a      	str	r2, [r3, #24]
 802fe04:	68fb      	ldr	r3, [r7, #12]
 802fe06:	681b      	ldr	r3, [r3, #0]
 802fe08:	6999      	ldr	r1, [r3, #24]
 802fe0a:	68bb      	ldr	r3, [r7, #8]
 802fe0c:	689b      	ldr	r3, [r3, #8]
 802fe0e:	021a      	lsls	r2, r3, #8
 802fe10:	68fb      	ldr	r3, [r7, #12]
 802fe12:	681b      	ldr	r3, [r3, #0]
 802fe14:	430a      	orrs	r2, r1
 802fe16:	619a      	str	r2, [r3, #24]
 802fe18:	e03a      	b.n	802fe90 <HAL_TIM_IC_ConfigChannel+0x11e>
 802fe1a:	687b      	ldr	r3, [r7, #4]
 802fe1c:	2b08      	cmp	r3, #8
 802fe1e:	d11b      	bne.n	802fe58 <HAL_TIM_IC_ConfigChannel+0xe6>
 802fe20:	68fb      	ldr	r3, [r7, #12]
 802fe22:	6818      	ldr	r0, [r3, #0]
 802fe24:	68bb      	ldr	r3, [r7, #8]
 802fe26:	6819      	ldr	r1, [r3, #0]
 802fe28:	68bb      	ldr	r3, [r7, #8]
 802fe2a:	685a      	ldr	r2, [r3, #4]
 802fe2c:	68bb      	ldr	r3, [r7, #8]
 802fe2e:	68db      	ldr	r3, [r3, #12]
 802fe30:	f000 fe50 	bl	8030ad4 <TIM_TI3_SetConfig>
 802fe34:	68fb      	ldr	r3, [r7, #12]
 802fe36:	681b      	ldr	r3, [r3, #0]
 802fe38:	69da      	ldr	r2, [r3, #28]
 802fe3a:	68fb      	ldr	r3, [r7, #12]
 802fe3c:	681b      	ldr	r3, [r3, #0]
 802fe3e:	f022 020c 	bic.w	r2, r2, #12
 802fe42:	61da      	str	r2, [r3, #28]
 802fe44:	68fb      	ldr	r3, [r7, #12]
 802fe46:	681b      	ldr	r3, [r3, #0]
 802fe48:	69d9      	ldr	r1, [r3, #28]
 802fe4a:	68bb      	ldr	r3, [r7, #8]
 802fe4c:	689a      	ldr	r2, [r3, #8]
 802fe4e:	68fb      	ldr	r3, [r7, #12]
 802fe50:	681b      	ldr	r3, [r3, #0]
 802fe52:	430a      	orrs	r2, r1
 802fe54:	61da      	str	r2, [r3, #28]
 802fe56:	e01b      	b.n	802fe90 <HAL_TIM_IC_ConfigChannel+0x11e>
 802fe58:	68fb      	ldr	r3, [r7, #12]
 802fe5a:	6818      	ldr	r0, [r3, #0]
 802fe5c:	68bb      	ldr	r3, [r7, #8]
 802fe5e:	6819      	ldr	r1, [r3, #0]
 802fe60:	68bb      	ldr	r3, [r7, #8]
 802fe62:	685a      	ldr	r2, [r3, #4]
 802fe64:	68bb      	ldr	r3, [r7, #8]
 802fe66:	68db      	ldr	r3, [r3, #12]
 802fe68:	f000 fe70 	bl	8030b4c <TIM_TI4_SetConfig>
 802fe6c:	68fb      	ldr	r3, [r7, #12]
 802fe6e:	681b      	ldr	r3, [r3, #0]
 802fe70:	69da      	ldr	r2, [r3, #28]
 802fe72:	68fb      	ldr	r3, [r7, #12]
 802fe74:	681b      	ldr	r3, [r3, #0]
 802fe76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 802fe7a:	61da      	str	r2, [r3, #28]
 802fe7c:	68fb      	ldr	r3, [r7, #12]
 802fe7e:	681b      	ldr	r3, [r3, #0]
 802fe80:	69d9      	ldr	r1, [r3, #28]
 802fe82:	68bb      	ldr	r3, [r7, #8]
 802fe84:	689b      	ldr	r3, [r3, #8]
 802fe86:	021a      	lsls	r2, r3, #8
 802fe88:	68fb      	ldr	r3, [r7, #12]
 802fe8a:	681b      	ldr	r3, [r3, #0]
 802fe8c:	430a      	orrs	r2, r1
 802fe8e:	61da      	str	r2, [r3, #28]
 802fe90:	68fb      	ldr	r3, [r7, #12]
 802fe92:	2201      	movs	r2, #1
 802fe94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802fe98:	68fb      	ldr	r3, [r7, #12]
 802fe9a:	2200      	movs	r2, #0
 802fe9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802fea0:	2300      	movs	r3, #0
 802fea2:	4618      	mov	r0, r3
 802fea4:	3710      	adds	r7, #16
 802fea6:	46bd      	mov	sp, r7
 802fea8:	bd80      	pop	{r7, pc}
	...

0802feac <HAL_TIM_PWM_ConfigChannel>:
 802feac:	b580      	push	{r7, lr}
 802feae:	b084      	sub	sp, #16
 802feb0:	af00      	add	r7, sp, #0
 802feb2:	60f8      	str	r0, [r7, #12]
 802feb4:	60b9      	str	r1, [r7, #8]
 802feb6:	607a      	str	r2, [r7, #4]
 802feb8:	68fb      	ldr	r3, [r7, #12]
 802feba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802febe:	2b01      	cmp	r3, #1
 802fec0:	d101      	bne.n	802fec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 802fec2:	2302      	movs	r3, #2
 802fec4:	e105      	b.n	80300d2 <HAL_TIM_PWM_ConfigChannel+0x226>
 802fec6:	68fb      	ldr	r3, [r7, #12]
 802fec8:	2201      	movs	r2, #1
 802feca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 802fece:	68fb      	ldr	r3, [r7, #12]
 802fed0:	2202      	movs	r2, #2
 802fed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802fed6:	687b      	ldr	r3, [r7, #4]
 802fed8:	2b14      	cmp	r3, #20
 802feda:	f200 80f0 	bhi.w	80300be <HAL_TIM_PWM_ConfigChannel+0x212>
 802fede:	a201      	add	r2, pc, #4	; (adr r2, 802fee4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 802fee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fee4:	0802ff39 	.word	0x0802ff39
 802fee8:	080300bf 	.word	0x080300bf
 802feec:	080300bf 	.word	0x080300bf
 802fef0:	080300bf 	.word	0x080300bf
 802fef4:	0802ff79 	.word	0x0802ff79
 802fef8:	080300bf 	.word	0x080300bf
 802fefc:	080300bf 	.word	0x080300bf
 802ff00:	080300bf 	.word	0x080300bf
 802ff04:	0802ffbb 	.word	0x0802ffbb
 802ff08:	080300bf 	.word	0x080300bf
 802ff0c:	080300bf 	.word	0x080300bf
 802ff10:	080300bf 	.word	0x080300bf
 802ff14:	0802fffb 	.word	0x0802fffb
 802ff18:	080300bf 	.word	0x080300bf
 802ff1c:	080300bf 	.word	0x080300bf
 802ff20:	080300bf 	.word	0x080300bf
 802ff24:	0803003d 	.word	0x0803003d
 802ff28:	080300bf 	.word	0x080300bf
 802ff2c:	080300bf 	.word	0x080300bf
 802ff30:	080300bf 	.word	0x080300bf
 802ff34:	0803007d 	.word	0x0803007d
 802ff38:	68fb      	ldr	r3, [r7, #12]
 802ff3a:	681b      	ldr	r3, [r3, #0]
 802ff3c:	68b9      	ldr	r1, [r7, #8]
 802ff3e:	4618      	mov	r0, r3
 802ff40:	f000 fa5a 	bl	80303f8 <TIM_OC1_SetConfig>
 802ff44:	68fb      	ldr	r3, [r7, #12]
 802ff46:	681b      	ldr	r3, [r3, #0]
 802ff48:	699a      	ldr	r2, [r3, #24]
 802ff4a:	68fb      	ldr	r3, [r7, #12]
 802ff4c:	681b      	ldr	r3, [r3, #0]
 802ff4e:	f042 0208 	orr.w	r2, r2, #8
 802ff52:	619a      	str	r2, [r3, #24]
 802ff54:	68fb      	ldr	r3, [r7, #12]
 802ff56:	681b      	ldr	r3, [r3, #0]
 802ff58:	699a      	ldr	r2, [r3, #24]
 802ff5a:	68fb      	ldr	r3, [r7, #12]
 802ff5c:	681b      	ldr	r3, [r3, #0]
 802ff5e:	f022 0204 	bic.w	r2, r2, #4
 802ff62:	619a      	str	r2, [r3, #24]
 802ff64:	68fb      	ldr	r3, [r7, #12]
 802ff66:	681b      	ldr	r3, [r3, #0]
 802ff68:	6999      	ldr	r1, [r3, #24]
 802ff6a:	68bb      	ldr	r3, [r7, #8]
 802ff6c:	691a      	ldr	r2, [r3, #16]
 802ff6e:	68fb      	ldr	r3, [r7, #12]
 802ff70:	681b      	ldr	r3, [r3, #0]
 802ff72:	430a      	orrs	r2, r1
 802ff74:	619a      	str	r2, [r3, #24]
 802ff76:	e0a3      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 802ff78:	68fb      	ldr	r3, [r7, #12]
 802ff7a:	681b      	ldr	r3, [r3, #0]
 802ff7c:	68b9      	ldr	r1, [r7, #8]
 802ff7e:	4618      	mov	r0, r3
 802ff80:	f000 faac 	bl	80304dc <TIM_OC2_SetConfig>
 802ff84:	68fb      	ldr	r3, [r7, #12]
 802ff86:	681b      	ldr	r3, [r3, #0]
 802ff88:	699a      	ldr	r2, [r3, #24]
 802ff8a:	68fb      	ldr	r3, [r7, #12]
 802ff8c:	681b      	ldr	r3, [r3, #0]
 802ff8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802ff92:	619a      	str	r2, [r3, #24]
 802ff94:	68fb      	ldr	r3, [r7, #12]
 802ff96:	681b      	ldr	r3, [r3, #0]
 802ff98:	699a      	ldr	r2, [r3, #24]
 802ff9a:	68fb      	ldr	r3, [r7, #12]
 802ff9c:	681b      	ldr	r3, [r3, #0]
 802ff9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802ffa2:	619a      	str	r2, [r3, #24]
 802ffa4:	68fb      	ldr	r3, [r7, #12]
 802ffa6:	681b      	ldr	r3, [r3, #0]
 802ffa8:	6999      	ldr	r1, [r3, #24]
 802ffaa:	68bb      	ldr	r3, [r7, #8]
 802ffac:	691b      	ldr	r3, [r3, #16]
 802ffae:	021a      	lsls	r2, r3, #8
 802ffb0:	68fb      	ldr	r3, [r7, #12]
 802ffb2:	681b      	ldr	r3, [r3, #0]
 802ffb4:	430a      	orrs	r2, r1
 802ffb6:	619a      	str	r2, [r3, #24]
 802ffb8:	e082      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 802ffba:	68fb      	ldr	r3, [r7, #12]
 802ffbc:	681b      	ldr	r3, [r3, #0]
 802ffbe:	68b9      	ldr	r1, [r7, #8]
 802ffc0:	4618      	mov	r0, r3
 802ffc2:	f000 fb03 	bl	80305cc <TIM_OC3_SetConfig>
 802ffc6:	68fb      	ldr	r3, [r7, #12]
 802ffc8:	681b      	ldr	r3, [r3, #0]
 802ffca:	69da      	ldr	r2, [r3, #28]
 802ffcc:	68fb      	ldr	r3, [r7, #12]
 802ffce:	681b      	ldr	r3, [r3, #0]
 802ffd0:	f042 0208 	orr.w	r2, r2, #8
 802ffd4:	61da      	str	r2, [r3, #28]
 802ffd6:	68fb      	ldr	r3, [r7, #12]
 802ffd8:	681b      	ldr	r3, [r3, #0]
 802ffda:	69da      	ldr	r2, [r3, #28]
 802ffdc:	68fb      	ldr	r3, [r7, #12]
 802ffde:	681b      	ldr	r3, [r3, #0]
 802ffe0:	f022 0204 	bic.w	r2, r2, #4
 802ffe4:	61da      	str	r2, [r3, #28]
 802ffe6:	68fb      	ldr	r3, [r7, #12]
 802ffe8:	681b      	ldr	r3, [r3, #0]
 802ffea:	69d9      	ldr	r1, [r3, #28]
 802ffec:	68bb      	ldr	r3, [r7, #8]
 802ffee:	691a      	ldr	r2, [r3, #16]
 802fff0:	68fb      	ldr	r3, [r7, #12]
 802fff2:	681b      	ldr	r3, [r3, #0]
 802fff4:	430a      	orrs	r2, r1
 802fff6:	61da      	str	r2, [r3, #28]
 802fff8:	e062      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 802fffa:	68fb      	ldr	r3, [r7, #12]
 802fffc:	681b      	ldr	r3, [r3, #0]
 802fffe:	68b9      	ldr	r1, [r7, #8]
 8030000:	4618      	mov	r0, r3
 8030002:	f000 fb59 	bl	80306b8 <TIM_OC4_SetConfig>
 8030006:	68fb      	ldr	r3, [r7, #12]
 8030008:	681b      	ldr	r3, [r3, #0]
 803000a:	69da      	ldr	r2, [r3, #28]
 803000c:	68fb      	ldr	r3, [r7, #12]
 803000e:	681b      	ldr	r3, [r3, #0]
 8030010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8030014:	61da      	str	r2, [r3, #28]
 8030016:	68fb      	ldr	r3, [r7, #12]
 8030018:	681b      	ldr	r3, [r3, #0]
 803001a:	69da      	ldr	r2, [r3, #28]
 803001c:	68fb      	ldr	r3, [r7, #12]
 803001e:	681b      	ldr	r3, [r3, #0]
 8030020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8030024:	61da      	str	r2, [r3, #28]
 8030026:	68fb      	ldr	r3, [r7, #12]
 8030028:	681b      	ldr	r3, [r3, #0]
 803002a:	69d9      	ldr	r1, [r3, #28]
 803002c:	68bb      	ldr	r3, [r7, #8]
 803002e:	691b      	ldr	r3, [r3, #16]
 8030030:	021a      	lsls	r2, r3, #8
 8030032:	68fb      	ldr	r3, [r7, #12]
 8030034:	681b      	ldr	r3, [r3, #0]
 8030036:	430a      	orrs	r2, r1
 8030038:	61da      	str	r2, [r3, #28]
 803003a:	e041      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 803003c:	68fb      	ldr	r3, [r7, #12]
 803003e:	681b      	ldr	r3, [r3, #0]
 8030040:	68b9      	ldr	r1, [r7, #8]
 8030042:	4618      	mov	r0, r3
 8030044:	f000 fb90 	bl	8030768 <TIM_OC5_SetConfig>
 8030048:	68fb      	ldr	r3, [r7, #12]
 803004a:	681b      	ldr	r3, [r3, #0]
 803004c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803004e:	68fb      	ldr	r3, [r7, #12]
 8030050:	681b      	ldr	r3, [r3, #0]
 8030052:	f042 0208 	orr.w	r2, r2, #8
 8030056:	655a      	str	r2, [r3, #84]	; 0x54
 8030058:	68fb      	ldr	r3, [r7, #12]
 803005a:	681b      	ldr	r3, [r3, #0]
 803005c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803005e:	68fb      	ldr	r3, [r7, #12]
 8030060:	681b      	ldr	r3, [r3, #0]
 8030062:	f022 0204 	bic.w	r2, r2, #4
 8030066:	655a      	str	r2, [r3, #84]	; 0x54
 8030068:	68fb      	ldr	r3, [r7, #12]
 803006a:	681b      	ldr	r3, [r3, #0]
 803006c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 803006e:	68bb      	ldr	r3, [r7, #8]
 8030070:	691a      	ldr	r2, [r3, #16]
 8030072:	68fb      	ldr	r3, [r7, #12]
 8030074:	681b      	ldr	r3, [r3, #0]
 8030076:	430a      	orrs	r2, r1
 8030078:	655a      	str	r2, [r3, #84]	; 0x54
 803007a:	e021      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 803007c:	68fb      	ldr	r3, [r7, #12]
 803007e:	681b      	ldr	r3, [r3, #0]
 8030080:	68b9      	ldr	r1, [r7, #8]
 8030082:	4618      	mov	r0, r3
 8030084:	f000 fbc2 	bl	803080c <TIM_OC6_SetConfig>
 8030088:	68fb      	ldr	r3, [r7, #12]
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803008e:	68fb      	ldr	r3, [r7, #12]
 8030090:	681b      	ldr	r3, [r3, #0]
 8030092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8030096:	655a      	str	r2, [r3, #84]	; 0x54
 8030098:	68fb      	ldr	r3, [r7, #12]
 803009a:	681b      	ldr	r3, [r3, #0]
 803009c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803009e:	68fb      	ldr	r3, [r7, #12]
 80300a0:	681b      	ldr	r3, [r3, #0]
 80300a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80300a6:	655a      	str	r2, [r3, #84]	; 0x54
 80300a8:	68fb      	ldr	r3, [r7, #12]
 80300aa:	681b      	ldr	r3, [r3, #0]
 80300ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80300ae:	68bb      	ldr	r3, [r7, #8]
 80300b0:	691b      	ldr	r3, [r3, #16]
 80300b2:	021a      	lsls	r2, r3, #8
 80300b4:	68fb      	ldr	r3, [r7, #12]
 80300b6:	681b      	ldr	r3, [r3, #0]
 80300b8:	430a      	orrs	r2, r1
 80300ba:	655a      	str	r2, [r3, #84]	; 0x54
 80300bc:	e000      	b.n	80300c0 <HAL_TIM_PWM_ConfigChannel+0x214>
 80300be:	bf00      	nop
 80300c0:	68fb      	ldr	r3, [r7, #12]
 80300c2:	2201      	movs	r2, #1
 80300c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80300c8:	68fb      	ldr	r3, [r7, #12]
 80300ca:	2200      	movs	r2, #0
 80300cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80300d0:	2300      	movs	r3, #0
 80300d2:	4618      	mov	r0, r3
 80300d4:	3710      	adds	r7, #16
 80300d6:	46bd      	mov	sp, r7
 80300d8:	bd80      	pop	{r7, pc}
 80300da:	bf00      	nop

080300dc <HAL_TIM_ConfigClockSource>:
 80300dc:	b580      	push	{r7, lr}
 80300de:	b084      	sub	sp, #16
 80300e0:	af00      	add	r7, sp, #0
 80300e2:	6078      	str	r0, [r7, #4]
 80300e4:	6039      	str	r1, [r7, #0]
 80300e6:	687b      	ldr	r3, [r7, #4]
 80300e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80300ec:	2b01      	cmp	r3, #1
 80300ee:	d101      	bne.n	80300f4 <HAL_TIM_ConfigClockSource+0x18>
 80300f0:	2302      	movs	r3, #2
 80300f2:	e0b3      	b.n	803025c <HAL_TIM_ConfigClockSource+0x180>
 80300f4:	687b      	ldr	r3, [r7, #4]
 80300f6:	2201      	movs	r2, #1
 80300f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80300fc:	687b      	ldr	r3, [r7, #4]
 80300fe:	2202      	movs	r2, #2
 8030100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8030104:	687b      	ldr	r3, [r7, #4]
 8030106:	681b      	ldr	r3, [r3, #0]
 8030108:	689b      	ldr	r3, [r3, #8]
 803010a:	60fb      	str	r3, [r7, #12]
 803010c:	68fa      	ldr	r2, [r7, #12]
 803010e:	4b55      	ldr	r3, [pc, #340]	; (8030264 <HAL_TIM_ConfigClockSource+0x188>)
 8030110:	4013      	ands	r3, r2
 8030112:	60fb      	str	r3, [r7, #12]
 8030114:	68fb      	ldr	r3, [r7, #12]
 8030116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 803011a:	60fb      	str	r3, [r7, #12]
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	681b      	ldr	r3, [r3, #0]
 8030120:	68fa      	ldr	r2, [r7, #12]
 8030122:	609a      	str	r2, [r3, #8]
 8030124:	683b      	ldr	r3, [r7, #0]
 8030126:	681b      	ldr	r3, [r3, #0]
 8030128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803012c:	d03e      	beq.n	80301ac <HAL_TIM_ConfigClockSource+0xd0>
 803012e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030132:	f200 8087 	bhi.w	8030244 <HAL_TIM_ConfigClockSource+0x168>
 8030136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803013a:	f000 8085 	beq.w	8030248 <HAL_TIM_ConfigClockSource+0x16c>
 803013e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8030142:	d87f      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 8030144:	2b70      	cmp	r3, #112	; 0x70
 8030146:	d01a      	beq.n	803017e <HAL_TIM_ConfigClockSource+0xa2>
 8030148:	2b70      	cmp	r3, #112	; 0x70
 803014a:	d87b      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 803014c:	2b60      	cmp	r3, #96	; 0x60
 803014e:	d050      	beq.n	80301f2 <HAL_TIM_ConfigClockSource+0x116>
 8030150:	2b60      	cmp	r3, #96	; 0x60
 8030152:	d877      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 8030154:	2b50      	cmp	r3, #80	; 0x50
 8030156:	d03c      	beq.n	80301d2 <HAL_TIM_ConfigClockSource+0xf6>
 8030158:	2b50      	cmp	r3, #80	; 0x50
 803015a:	d873      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 803015c:	2b40      	cmp	r3, #64	; 0x40
 803015e:	d058      	beq.n	8030212 <HAL_TIM_ConfigClockSource+0x136>
 8030160:	2b40      	cmp	r3, #64	; 0x40
 8030162:	d86f      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 8030164:	2b30      	cmp	r3, #48	; 0x30
 8030166:	d064      	beq.n	8030232 <HAL_TIM_ConfigClockSource+0x156>
 8030168:	2b30      	cmp	r3, #48	; 0x30
 803016a:	d86b      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 803016c:	2b20      	cmp	r3, #32
 803016e:	d060      	beq.n	8030232 <HAL_TIM_ConfigClockSource+0x156>
 8030170:	2b20      	cmp	r3, #32
 8030172:	d867      	bhi.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 8030174:	2b00      	cmp	r3, #0
 8030176:	d05c      	beq.n	8030232 <HAL_TIM_ConfigClockSource+0x156>
 8030178:	2b10      	cmp	r3, #16
 803017a:	d05a      	beq.n	8030232 <HAL_TIM_ConfigClockSource+0x156>
 803017c:	e062      	b.n	8030244 <HAL_TIM_ConfigClockSource+0x168>
 803017e:	687b      	ldr	r3, [r7, #4]
 8030180:	6818      	ldr	r0, [r3, #0]
 8030182:	683b      	ldr	r3, [r7, #0]
 8030184:	6899      	ldr	r1, [r3, #8]
 8030186:	683b      	ldr	r3, [r7, #0]
 8030188:	685a      	ldr	r2, [r3, #4]
 803018a:	683b      	ldr	r3, [r7, #0]
 803018c:	68db      	ldr	r3, [r3, #12]
 803018e:	f000 fd35 	bl	8030bfc <TIM_ETR_SetConfig>
 8030192:	687b      	ldr	r3, [r7, #4]
 8030194:	681b      	ldr	r3, [r3, #0]
 8030196:	689b      	ldr	r3, [r3, #8]
 8030198:	60fb      	str	r3, [r7, #12]
 803019a:	68fb      	ldr	r3, [r7, #12]
 803019c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80301a0:	60fb      	str	r3, [r7, #12]
 80301a2:	687b      	ldr	r3, [r7, #4]
 80301a4:	681b      	ldr	r3, [r3, #0]
 80301a6:	68fa      	ldr	r2, [r7, #12]
 80301a8:	609a      	str	r2, [r3, #8]
 80301aa:	e04e      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 80301ac:	687b      	ldr	r3, [r7, #4]
 80301ae:	6818      	ldr	r0, [r3, #0]
 80301b0:	683b      	ldr	r3, [r7, #0]
 80301b2:	6899      	ldr	r1, [r3, #8]
 80301b4:	683b      	ldr	r3, [r7, #0]
 80301b6:	685a      	ldr	r2, [r3, #4]
 80301b8:	683b      	ldr	r3, [r7, #0]
 80301ba:	68db      	ldr	r3, [r3, #12]
 80301bc:	f000 fd1e 	bl	8030bfc <TIM_ETR_SetConfig>
 80301c0:	687b      	ldr	r3, [r7, #4]
 80301c2:	681b      	ldr	r3, [r3, #0]
 80301c4:	689a      	ldr	r2, [r3, #8]
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	681b      	ldr	r3, [r3, #0]
 80301ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80301ce:	609a      	str	r2, [r3, #8]
 80301d0:	e03b      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	6818      	ldr	r0, [r3, #0]
 80301d6:	683b      	ldr	r3, [r7, #0]
 80301d8:	6859      	ldr	r1, [r3, #4]
 80301da:	683b      	ldr	r3, [r7, #0]
 80301dc:	68db      	ldr	r3, [r3, #12]
 80301de:	461a      	mov	r2, r3
 80301e0:	f000 fbdc 	bl	803099c <TIM_TI1_ConfigInputStage>
 80301e4:	687b      	ldr	r3, [r7, #4]
 80301e6:	681b      	ldr	r3, [r3, #0]
 80301e8:	2150      	movs	r1, #80	; 0x50
 80301ea:	4618      	mov	r0, r3
 80301ec:	f000 fceb 	bl	8030bc6 <TIM_ITRx_SetConfig>
 80301f0:	e02b      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 80301f2:	687b      	ldr	r3, [r7, #4]
 80301f4:	6818      	ldr	r0, [r3, #0]
 80301f6:	683b      	ldr	r3, [r7, #0]
 80301f8:	6859      	ldr	r1, [r3, #4]
 80301fa:	683b      	ldr	r3, [r7, #0]
 80301fc:	68db      	ldr	r3, [r3, #12]
 80301fe:	461a      	mov	r2, r3
 8030200:	f000 fc38 	bl	8030a74 <TIM_TI2_ConfigInputStage>
 8030204:	687b      	ldr	r3, [r7, #4]
 8030206:	681b      	ldr	r3, [r3, #0]
 8030208:	2160      	movs	r1, #96	; 0x60
 803020a:	4618      	mov	r0, r3
 803020c:	f000 fcdb 	bl	8030bc6 <TIM_ITRx_SetConfig>
 8030210:	e01b      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 8030212:	687b      	ldr	r3, [r7, #4]
 8030214:	6818      	ldr	r0, [r3, #0]
 8030216:	683b      	ldr	r3, [r7, #0]
 8030218:	6859      	ldr	r1, [r3, #4]
 803021a:	683b      	ldr	r3, [r7, #0]
 803021c:	68db      	ldr	r3, [r3, #12]
 803021e:	461a      	mov	r2, r3
 8030220:	f000 fbbc 	bl	803099c <TIM_TI1_ConfigInputStage>
 8030224:	687b      	ldr	r3, [r7, #4]
 8030226:	681b      	ldr	r3, [r3, #0]
 8030228:	2140      	movs	r1, #64	; 0x40
 803022a:	4618      	mov	r0, r3
 803022c:	f000 fccb 	bl	8030bc6 <TIM_ITRx_SetConfig>
 8030230:	e00b      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 8030232:	687b      	ldr	r3, [r7, #4]
 8030234:	681a      	ldr	r2, [r3, #0]
 8030236:	683b      	ldr	r3, [r7, #0]
 8030238:	681b      	ldr	r3, [r3, #0]
 803023a:	4619      	mov	r1, r3
 803023c:	4610      	mov	r0, r2
 803023e:	f000 fcc2 	bl	8030bc6 <TIM_ITRx_SetConfig>
 8030242:	e002      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 8030244:	bf00      	nop
 8030246:	e000      	b.n	803024a <HAL_TIM_ConfigClockSource+0x16e>
 8030248:	bf00      	nop
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	2201      	movs	r2, #1
 803024e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8030252:	687b      	ldr	r3, [r7, #4]
 8030254:	2200      	movs	r2, #0
 8030256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 803025a:	2300      	movs	r3, #0
 803025c:	4618      	mov	r0, r3
 803025e:	3710      	adds	r7, #16
 8030260:	46bd      	mov	sp, r7
 8030262:	bd80      	pop	{r7, pc}
 8030264:	fffeff88 	.word	0xfffeff88

08030268 <HAL_TIM_OC_DelayElapsedCallback>:
 8030268:	b480      	push	{r7}
 803026a:	b083      	sub	sp, #12
 803026c:	af00      	add	r7, sp, #0
 803026e:	6078      	str	r0, [r7, #4]
 8030270:	bf00      	nop
 8030272:	370c      	adds	r7, #12
 8030274:	46bd      	mov	sp, r7
 8030276:	f85d 7b04 	ldr.w	r7, [sp], #4
 803027a:	4770      	bx	lr

0803027c <HAL_TIM_IC_CaptureCallback>:
 803027c:	b480      	push	{r7}
 803027e:	b083      	sub	sp, #12
 8030280:	af00      	add	r7, sp, #0
 8030282:	6078      	str	r0, [r7, #4]
 8030284:	bf00      	nop
 8030286:	370c      	adds	r7, #12
 8030288:	46bd      	mov	sp, r7
 803028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803028e:	4770      	bx	lr

08030290 <HAL_TIM_PWM_PulseFinishedCallback>:
 8030290:	b480      	push	{r7}
 8030292:	b083      	sub	sp, #12
 8030294:	af00      	add	r7, sp, #0
 8030296:	6078      	str	r0, [r7, #4]
 8030298:	bf00      	nop
 803029a:	370c      	adds	r7, #12
 803029c:	46bd      	mov	sp, r7
 803029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302a2:	4770      	bx	lr

080302a4 <HAL_TIM_TriggerCallback>:
 80302a4:	b480      	push	{r7}
 80302a6:	b083      	sub	sp, #12
 80302a8:	af00      	add	r7, sp, #0
 80302aa:	6078      	str	r0, [r7, #4]
 80302ac:	bf00      	nop
 80302ae:	370c      	adds	r7, #12
 80302b0:	46bd      	mov	sp, r7
 80302b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302b6:	4770      	bx	lr

080302b8 <TIM_Base_SetConfig>:
 80302b8:	b480      	push	{r7}
 80302ba:	b085      	sub	sp, #20
 80302bc:	af00      	add	r7, sp, #0
 80302be:	6078      	str	r0, [r7, #4]
 80302c0:	6039      	str	r1, [r7, #0]
 80302c2:	687b      	ldr	r3, [r7, #4]
 80302c4:	681b      	ldr	r3, [r3, #0]
 80302c6:	60fb      	str	r3, [r7, #12]
 80302c8:	687b      	ldr	r3, [r7, #4]
 80302ca:	4a40      	ldr	r2, [pc, #256]	; (80303cc <TIM_Base_SetConfig+0x114>)
 80302cc:	4293      	cmp	r3, r2
 80302ce:	d013      	beq.n	80302f8 <TIM_Base_SetConfig+0x40>
 80302d0:	687b      	ldr	r3, [r7, #4]
 80302d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80302d6:	d00f      	beq.n	80302f8 <TIM_Base_SetConfig+0x40>
 80302d8:	687b      	ldr	r3, [r7, #4]
 80302da:	4a3d      	ldr	r2, [pc, #244]	; (80303d0 <TIM_Base_SetConfig+0x118>)
 80302dc:	4293      	cmp	r3, r2
 80302de:	d00b      	beq.n	80302f8 <TIM_Base_SetConfig+0x40>
 80302e0:	687b      	ldr	r3, [r7, #4]
 80302e2:	4a3c      	ldr	r2, [pc, #240]	; (80303d4 <TIM_Base_SetConfig+0x11c>)
 80302e4:	4293      	cmp	r3, r2
 80302e6:	d007      	beq.n	80302f8 <TIM_Base_SetConfig+0x40>
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	4a3b      	ldr	r2, [pc, #236]	; (80303d8 <TIM_Base_SetConfig+0x120>)
 80302ec:	4293      	cmp	r3, r2
 80302ee:	d003      	beq.n	80302f8 <TIM_Base_SetConfig+0x40>
 80302f0:	687b      	ldr	r3, [r7, #4]
 80302f2:	4a3a      	ldr	r2, [pc, #232]	; (80303dc <TIM_Base_SetConfig+0x124>)
 80302f4:	4293      	cmp	r3, r2
 80302f6:	d108      	bne.n	803030a <TIM_Base_SetConfig+0x52>
 80302f8:	68fb      	ldr	r3, [r7, #12]
 80302fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80302fe:	60fb      	str	r3, [r7, #12]
 8030300:	683b      	ldr	r3, [r7, #0]
 8030302:	685b      	ldr	r3, [r3, #4]
 8030304:	68fa      	ldr	r2, [r7, #12]
 8030306:	4313      	orrs	r3, r2
 8030308:	60fb      	str	r3, [r7, #12]
 803030a:	687b      	ldr	r3, [r7, #4]
 803030c:	4a2f      	ldr	r2, [pc, #188]	; (80303cc <TIM_Base_SetConfig+0x114>)
 803030e:	4293      	cmp	r3, r2
 8030310:	d02b      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8030318:	d027      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 803031a:	687b      	ldr	r3, [r7, #4]
 803031c:	4a2c      	ldr	r2, [pc, #176]	; (80303d0 <TIM_Base_SetConfig+0x118>)
 803031e:	4293      	cmp	r3, r2
 8030320:	d023      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030322:	687b      	ldr	r3, [r7, #4]
 8030324:	4a2b      	ldr	r2, [pc, #172]	; (80303d4 <TIM_Base_SetConfig+0x11c>)
 8030326:	4293      	cmp	r3, r2
 8030328:	d01f      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 803032a:	687b      	ldr	r3, [r7, #4]
 803032c:	4a2a      	ldr	r2, [pc, #168]	; (80303d8 <TIM_Base_SetConfig+0x120>)
 803032e:	4293      	cmp	r3, r2
 8030330:	d01b      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030332:	687b      	ldr	r3, [r7, #4]
 8030334:	4a29      	ldr	r2, [pc, #164]	; (80303dc <TIM_Base_SetConfig+0x124>)
 8030336:	4293      	cmp	r3, r2
 8030338:	d017      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 803033a:	687b      	ldr	r3, [r7, #4]
 803033c:	4a28      	ldr	r2, [pc, #160]	; (80303e0 <TIM_Base_SetConfig+0x128>)
 803033e:	4293      	cmp	r3, r2
 8030340:	d013      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030342:	687b      	ldr	r3, [r7, #4]
 8030344:	4a27      	ldr	r2, [pc, #156]	; (80303e4 <TIM_Base_SetConfig+0x12c>)
 8030346:	4293      	cmp	r3, r2
 8030348:	d00f      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 803034a:	687b      	ldr	r3, [r7, #4]
 803034c:	4a26      	ldr	r2, [pc, #152]	; (80303e8 <TIM_Base_SetConfig+0x130>)
 803034e:	4293      	cmp	r3, r2
 8030350:	d00b      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030352:	687b      	ldr	r3, [r7, #4]
 8030354:	4a25      	ldr	r2, [pc, #148]	; (80303ec <TIM_Base_SetConfig+0x134>)
 8030356:	4293      	cmp	r3, r2
 8030358:	d007      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 803035a:	687b      	ldr	r3, [r7, #4]
 803035c:	4a24      	ldr	r2, [pc, #144]	; (80303f0 <TIM_Base_SetConfig+0x138>)
 803035e:	4293      	cmp	r3, r2
 8030360:	d003      	beq.n	803036a <TIM_Base_SetConfig+0xb2>
 8030362:	687b      	ldr	r3, [r7, #4]
 8030364:	4a23      	ldr	r2, [pc, #140]	; (80303f4 <TIM_Base_SetConfig+0x13c>)
 8030366:	4293      	cmp	r3, r2
 8030368:	d108      	bne.n	803037c <TIM_Base_SetConfig+0xc4>
 803036a:	68fb      	ldr	r3, [r7, #12]
 803036c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8030370:	60fb      	str	r3, [r7, #12]
 8030372:	683b      	ldr	r3, [r7, #0]
 8030374:	68db      	ldr	r3, [r3, #12]
 8030376:	68fa      	ldr	r2, [r7, #12]
 8030378:	4313      	orrs	r3, r2
 803037a:	60fb      	str	r3, [r7, #12]
 803037c:	68fb      	ldr	r3, [r7, #12]
 803037e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8030382:	683b      	ldr	r3, [r7, #0]
 8030384:	695b      	ldr	r3, [r3, #20]
 8030386:	4313      	orrs	r3, r2
 8030388:	60fb      	str	r3, [r7, #12]
 803038a:	687b      	ldr	r3, [r7, #4]
 803038c:	68fa      	ldr	r2, [r7, #12]
 803038e:	601a      	str	r2, [r3, #0]
 8030390:	683b      	ldr	r3, [r7, #0]
 8030392:	689a      	ldr	r2, [r3, #8]
 8030394:	687b      	ldr	r3, [r7, #4]
 8030396:	62da      	str	r2, [r3, #44]	; 0x2c
 8030398:	683b      	ldr	r3, [r7, #0]
 803039a:	681a      	ldr	r2, [r3, #0]
 803039c:	687b      	ldr	r3, [r7, #4]
 803039e:	629a      	str	r2, [r3, #40]	; 0x28
 80303a0:	687b      	ldr	r3, [r7, #4]
 80303a2:	4a0a      	ldr	r2, [pc, #40]	; (80303cc <TIM_Base_SetConfig+0x114>)
 80303a4:	4293      	cmp	r3, r2
 80303a6:	d003      	beq.n	80303b0 <TIM_Base_SetConfig+0xf8>
 80303a8:	687b      	ldr	r3, [r7, #4]
 80303aa:	4a0c      	ldr	r2, [pc, #48]	; (80303dc <TIM_Base_SetConfig+0x124>)
 80303ac:	4293      	cmp	r3, r2
 80303ae:	d103      	bne.n	80303b8 <TIM_Base_SetConfig+0x100>
 80303b0:	683b      	ldr	r3, [r7, #0]
 80303b2:	691a      	ldr	r2, [r3, #16]
 80303b4:	687b      	ldr	r3, [r7, #4]
 80303b6:	631a      	str	r2, [r3, #48]	; 0x30
 80303b8:	687b      	ldr	r3, [r7, #4]
 80303ba:	2201      	movs	r2, #1
 80303bc:	615a      	str	r2, [r3, #20]
 80303be:	bf00      	nop
 80303c0:	3714      	adds	r7, #20
 80303c2:	46bd      	mov	sp, r7
 80303c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80303c8:	4770      	bx	lr
 80303ca:	bf00      	nop
 80303cc:	40010000 	.word	0x40010000
 80303d0:	40000400 	.word	0x40000400
 80303d4:	40000800 	.word	0x40000800
 80303d8:	40000c00 	.word	0x40000c00
 80303dc:	40010400 	.word	0x40010400
 80303e0:	40014000 	.word	0x40014000
 80303e4:	40014400 	.word	0x40014400
 80303e8:	40014800 	.word	0x40014800
 80303ec:	40001800 	.word	0x40001800
 80303f0:	40001c00 	.word	0x40001c00
 80303f4:	40002000 	.word	0x40002000

080303f8 <TIM_OC1_SetConfig>:
 80303f8:	b480      	push	{r7}
 80303fa:	b087      	sub	sp, #28
 80303fc:	af00      	add	r7, sp, #0
 80303fe:	6078      	str	r0, [r7, #4]
 8030400:	6039      	str	r1, [r7, #0]
 8030402:	687b      	ldr	r3, [r7, #4]
 8030404:	6a1b      	ldr	r3, [r3, #32]
 8030406:	f023 0201 	bic.w	r2, r3, #1
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	621a      	str	r2, [r3, #32]
 803040e:	687b      	ldr	r3, [r7, #4]
 8030410:	6a1b      	ldr	r3, [r3, #32]
 8030412:	617b      	str	r3, [r7, #20]
 8030414:	687b      	ldr	r3, [r7, #4]
 8030416:	685b      	ldr	r3, [r3, #4]
 8030418:	613b      	str	r3, [r7, #16]
 803041a:	687b      	ldr	r3, [r7, #4]
 803041c:	699b      	ldr	r3, [r3, #24]
 803041e:	60fb      	str	r3, [r7, #12]
 8030420:	68fa      	ldr	r2, [r7, #12]
 8030422:	4b2b      	ldr	r3, [pc, #172]	; (80304d0 <TIM_OC1_SetConfig+0xd8>)
 8030424:	4013      	ands	r3, r2
 8030426:	60fb      	str	r3, [r7, #12]
 8030428:	68fb      	ldr	r3, [r7, #12]
 803042a:	f023 0303 	bic.w	r3, r3, #3
 803042e:	60fb      	str	r3, [r7, #12]
 8030430:	683b      	ldr	r3, [r7, #0]
 8030432:	681b      	ldr	r3, [r3, #0]
 8030434:	68fa      	ldr	r2, [r7, #12]
 8030436:	4313      	orrs	r3, r2
 8030438:	60fb      	str	r3, [r7, #12]
 803043a:	697b      	ldr	r3, [r7, #20]
 803043c:	f023 0302 	bic.w	r3, r3, #2
 8030440:	617b      	str	r3, [r7, #20]
 8030442:	683b      	ldr	r3, [r7, #0]
 8030444:	689b      	ldr	r3, [r3, #8]
 8030446:	697a      	ldr	r2, [r7, #20]
 8030448:	4313      	orrs	r3, r2
 803044a:	617b      	str	r3, [r7, #20]
 803044c:	687b      	ldr	r3, [r7, #4]
 803044e:	4a21      	ldr	r2, [pc, #132]	; (80304d4 <TIM_OC1_SetConfig+0xdc>)
 8030450:	4293      	cmp	r3, r2
 8030452:	d003      	beq.n	803045c <TIM_OC1_SetConfig+0x64>
 8030454:	687b      	ldr	r3, [r7, #4]
 8030456:	4a20      	ldr	r2, [pc, #128]	; (80304d8 <TIM_OC1_SetConfig+0xe0>)
 8030458:	4293      	cmp	r3, r2
 803045a:	d10c      	bne.n	8030476 <TIM_OC1_SetConfig+0x7e>
 803045c:	697b      	ldr	r3, [r7, #20]
 803045e:	f023 0308 	bic.w	r3, r3, #8
 8030462:	617b      	str	r3, [r7, #20]
 8030464:	683b      	ldr	r3, [r7, #0]
 8030466:	68db      	ldr	r3, [r3, #12]
 8030468:	697a      	ldr	r2, [r7, #20]
 803046a:	4313      	orrs	r3, r2
 803046c:	617b      	str	r3, [r7, #20]
 803046e:	697b      	ldr	r3, [r7, #20]
 8030470:	f023 0304 	bic.w	r3, r3, #4
 8030474:	617b      	str	r3, [r7, #20]
 8030476:	687b      	ldr	r3, [r7, #4]
 8030478:	4a16      	ldr	r2, [pc, #88]	; (80304d4 <TIM_OC1_SetConfig+0xdc>)
 803047a:	4293      	cmp	r3, r2
 803047c:	d003      	beq.n	8030486 <TIM_OC1_SetConfig+0x8e>
 803047e:	687b      	ldr	r3, [r7, #4]
 8030480:	4a15      	ldr	r2, [pc, #84]	; (80304d8 <TIM_OC1_SetConfig+0xe0>)
 8030482:	4293      	cmp	r3, r2
 8030484:	d111      	bne.n	80304aa <TIM_OC1_SetConfig+0xb2>
 8030486:	693b      	ldr	r3, [r7, #16]
 8030488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803048c:	613b      	str	r3, [r7, #16]
 803048e:	693b      	ldr	r3, [r7, #16]
 8030490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8030494:	613b      	str	r3, [r7, #16]
 8030496:	683b      	ldr	r3, [r7, #0]
 8030498:	695b      	ldr	r3, [r3, #20]
 803049a:	693a      	ldr	r2, [r7, #16]
 803049c:	4313      	orrs	r3, r2
 803049e:	613b      	str	r3, [r7, #16]
 80304a0:	683b      	ldr	r3, [r7, #0]
 80304a2:	699b      	ldr	r3, [r3, #24]
 80304a4:	693a      	ldr	r2, [r7, #16]
 80304a6:	4313      	orrs	r3, r2
 80304a8:	613b      	str	r3, [r7, #16]
 80304aa:	687b      	ldr	r3, [r7, #4]
 80304ac:	693a      	ldr	r2, [r7, #16]
 80304ae:	605a      	str	r2, [r3, #4]
 80304b0:	687b      	ldr	r3, [r7, #4]
 80304b2:	68fa      	ldr	r2, [r7, #12]
 80304b4:	619a      	str	r2, [r3, #24]
 80304b6:	683b      	ldr	r3, [r7, #0]
 80304b8:	685a      	ldr	r2, [r3, #4]
 80304ba:	687b      	ldr	r3, [r7, #4]
 80304bc:	635a      	str	r2, [r3, #52]	; 0x34
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	697a      	ldr	r2, [r7, #20]
 80304c2:	621a      	str	r2, [r3, #32]
 80304c4:	bf00      	nop
 80304c6:	371c      	adds	r7, #28
 80304c8:	46bd      	mov	sp, r7
 80304ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304ce:	4770      	bx	lr
 80304d0:	fffeff8f 	.word	0xfffeff8f
 80304d4:	40010000 	.word	0x40010000
 80304d8:	40010400 	.word	0x40010400

080304dc <TIM_OC2_SetConfig>:
 80304dc:	b480      	push	{r7}
 80304de:	b087      	sub	sp, #28
 80304e0:	af00      	add	r7, sp, #0
 80304e2:	6078      	str	r0, [r7, #4]
 80304e4:	6039      	str	r1, [r7, #0]
 80304e6:	687b      	ldr	r3, [r7, #4]
 80304e8:	6a1b      	ldr	r3, [r3, #32]
 80304ea:	f023 0210 	bic.w	r2, r3, #16
 80304ee:	687b      	ldr	r3, [r7, #4]
 80304f0:	621a      	str	r2, [r3, #32]
 80304f2:	687b      	ldr	r3, [r7, #4]
 80304f4:	6a1b      	ldr	r3, [r3, #32]
 80304f6:	617b      	str	r3, [r7, #20]
 80304f8:	687b      	ldr	r3, [r7, #4]
 80304fa:	685b      	ldr	r3, [r3, #4]
 80304fc:	613b      	str	r3, [r7, #16]
 80304fe:	687b      	ldr	r3, [r7, #4]
 8030500:	699b      	ldr	r3, [r3, #24]
 8030502:	60fb      	str	r3, [r7, #12]
 8030504:	68fa      	ldr	r2, [r7, #12]
 8030506:	4b2e      	ldr	r3, [pc, #184]	; (80305c0 <TIM_OC2_SetConfig+0xe4>)
 8030508:	4013      	ands	r3, r2
 803050a:	60fb      	str	r3, [r7, #12]
 803050c:	68fb      	ldr	r3, [r7, #12]
 803050e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8030512:	60fb      	str	r3, [r7, #12]
 8030514:	683b      	ldr	r3, [r7, #0]
 8030516:	681b      	ldr	r3, [r3, #0]
 8030518:	021b      	lsls	r3, r3, #8
 803051a:	68fa      	ldr	r2, [r7, #12]
 803051c:	4313      	orrs	r3, r2
 803051e:	60fb      	str	r3, [r7, #12]
 8030520:	697b      	ldr	r3, [r7, #20]
 8030522:	f023 0320 	bic.w	r3, r3, #32
 8030526:	617b      	str	r3, [r7, #20]
 8030528:	683b      	ldr	r3, [r7, #0]
 803052a:	689b      	ldr	r3, [r3, #8]
 803052c:	011b      	lsls	r3, r3, #4
 803052e:	697a      	ldr	r2, [r7, #20]
 8030530:	4313      	orrs	r3, r2
 8030532:	617b      	str	r3, [r7, #20]
 8030534:	687b      	ldr	r3, [r7, #4]
 8030536:	4a23      	ldr	r2, [pc, #140]	; (80305c4 <TIM_OC2_SetConfig+0xe8>)
 8030538:	4293      	cmp	r3, r2
 803053a:	d003      	beq.n	8030544 <TIM_OC2_SetConfig+0x68>
 803053c:	687b      	ldr	r3, [r7, #4]
 803053e:	4a22      	ldr	r2, [pc, #136]	; (80305c8 <TIM_OC2_SetConfig+0xec>)
 8030540:	4293      	cmp	r3, r2
 8030542:	d10d      	bne.n	8030560 <TIM_OC2_SetConfig+0x84>
 8030544:	697b      	ldr	r3, [r7, #20]
 8030546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803054a:	617b      	str	r3, [r7, #20]
 803054c:	683b      	ldr	r3, [r7, #0]
 803054e:	68db      	ldr	r3, [r3, #12]
 8030550:	011b      	lsls	r3, r3, #4
 8030552:	697a      	ldr	r2, [r7, #20]
 8030554:	4313      	orrs	r3, r2
 8030556:	617b      	str	r3, [r7, #20]
 8030558:	697b      	ldr	r3, [r7, #20]
 803055a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803055e:	617b      	str	r3, [r7, #20]
 8030560:	687b      	ldr	r3, [r7, #4]
 8030562:	4a18      	ldr	r2, [pc, #96]	; (80305c4 <TIM_OC2_SetConfig+0xe8>)
 8030564:	4293      	cmp	r3, r2
 8030566:	d003      	beq.n	8030570 <TIM_OC2_SetConfig+0x94>
 8030568:	687b      	ldr	r3, [r7, #4]
 803056a:	4a17      	ldr	r2, [pc, #92]	; (80305c8 <TIM_OC2_SetConfig+0xec>)
 803056c:	4293      	cmp	r3, r2
 803056e:	d113      	bne.n	8030598 <TIM_OC2_SetConfig+0xbc>
 8030570:	693b      	ldr	r3, [r7, #16]
 8030572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8030576:	613b      	str	r3, [r7, #16]
 8030578:	693b      	ldr	r3, [r7, #16]
 803057a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 803057e:	613b      	str	r3, [r7, #16]
 8030580:	683b      	ldr	r3, [r7, #0]
 8030582:	695b      	ldr	r3, [r3, #20]
 8030584:	009b      	lsls	r3, r3, #2
 8030586:	693a      	ldr	r2, [r7, #16]
 8030588:	4313      	orrs	r3, r2
 803058a:	613b      	str	r3, [r7, #16]
 803058c:	683b      	ldr	r3, [r7, #0]
 803058e:	699b      	ldr	r3, [r3, #24]
 8030590:	009b      	lsls	r3, r3, #2
 8030592:	693a      	ldr	r2, [r7, #16]
 8030594:	4313      	orrs	r3, r2
 8030596:	613b      	str	r3, [r7, #16]
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	693a      	ldr	r2, [r7, #16]
 803059c:	605a      	str	r2, [r3, #4]
 803059e:	687b      	ldr	r3, [r7, #4]
 80305a0:	68fa      	ldr	r2, [r7, #12]
 80305a2:	619a      	str	r2, [r3, #24]
 80305a4:	683b      	ldr	r3, [r7, #0]
 80305a6:	685a      	ldr	r2, [r3, #4]
 80305a8:	687b      	ldr	r3, [r7, #4]
 80305aa:	639a      	str	r2, [r3, #56]	; 0x38
 80305ac:	687b      	ldr	r3, [r7, #4]
 80305ae:	697a      	ldr	r2, [r7, #20]
 80305b0:	621a      	str	r2, [r3, #32]
 80305b2:	bf00      	nop
 80305b4:	371c      	adds	r7, #28
 80305b6:	46bd      	mov	sp, r7
 80305b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80305bc:	4770      	bx	lr
 80305be:	bf00      	nop
 80305c0:	feff8fff 	.word	0xfeff8fff
 80305c4:	40010000 	.word	0x40010000
 80305c8:	40010400 	.word	0x40010400

080305cc <TIM_OC3_SetConfig>:
 80305cc:	b480      	push	{r7}
 80305ce:	b087      	sub	sp, #28
 80305d0:	af00      	add	r7, sp, #0
 80305d2:	6078      	str	r0, [r7, #4]
 80305d4:	6039      	str	r1, [r7, #0]
 80305d6:	687b      	ldr	r3, [r7, #4]
 80305d8:	6a1b      	ldr	r3, [r3, #32]
 80305da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80305de:	687b      	ldr	r3, [r7, #4]
 80305e0:	621a      	str	r2, [r3, #32]
 80305e2:	687b      	ldr	r3, [r7, #4]
 80305e4:	6a1b      	ldr	r3, [r3, #32]
 80305e6:	617b      	str	r3, [r7, #20]
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	685b      	ldr	r3, [r3, #4]
 80305ec:	613b      	str	r3, [r7, #16]
 80305ee:	687b      	ldr	r3, [r7, #4]
 80305f0:	69db      	ldr	r3, [r3, #28]
 80305f2:	60fb      	str	r3, [r7, #12]
 80305f4:	68fa      	ldr	r2, [r7, #12]
 80305f6:	4b2d      	ldr	r3, [pc, #180]	; (80306ac <TIM_OC3_SetConfig+0xe0>)
 80305f8:	4013      	ands	r3, r2
 80305fa:	60fb      	str	r3, [r7, #12]
 80305fc:	68fb      	ldr	r3, [r7, #12]
 80305fe:	f023 0303 	bic.w	r3, r3, #3
 8030602:	60fb      	str	r3, [r7, #12]
 8030604:	683b      	ldr	r3, [r7, #0]
 8030606:	681b      	ldr	r3, [r3, #0]
 8030608:	68fa      	ldr	r2, [r7, #12]
 803060a:	4313      	orrs	r3, r2
 803060c:	60fb      	str	r3, [r7, #12]
 803060e:	697b      	ldr	r3, [r7, #20]
 8030610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8030614:	617b      	str	r3, [r7, #20]
 8030616:	683b      	ldr	r3, [r7, #0]
 8030618:	689b      	ldr	r3, [r3, #8]
 803061a:	021b      	lsls	r3, r3, #8
 803061c:	697a      	ldr	r2, [r7, #20]
 803061e:	4313      	orrs	r3, r2
 8030620:	617b      	str	r3, [r7, #20]
 8030622:	687b      	ldr	r3, [r7, #4]
 8030624:	4a22      	ldr	r2, [pc, #136]	; (80306b0 <TIM_OC3_SetConfig+0xe4>)
 8030626:	4293      	cmp	r3, r2
 8030628:	d003      	beq.n	8030632 <TIM_OC3_SetConfig+0x66>
 803062a:	687b      	ldr	r3, [r7, #4]
 803062c:	4a21      	ldr	r2, [pc, #132]	; (80306b4 <TIM_OC3_SetConfig+0xe8>)
 803062e:	4293      	cmp	r3, r2
 8030630:	d10d      	bne.n	803064e <TIM_OC3_SetConfig+0x82>
 8030632:	697b      	ldr	r3, [r7, #20]
 8030634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8030638:	617b      	str	r3, [r7, #20]
 803063a:	683b      	ldr	r3, [r7, #0]
 803063c:	68db      	ldr	r3, [r3, #12]
 803063e:	021b      	lsls	r3, r3, #8
 8030640:	697a      	ldr	r2, [r7, #20]
 8030642:	4313      	orrs	r3, r2
 8030644:	617b      	str	r3, [r7, #20]
 8030646:	697b      	ldr	r3, [r7, #20]
 8030648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 803064c:	617b      	str	r3, [r7, #20]
 803064e:	687b      	ldr	r3, [r7, #4]
 8030650:	4a17      	ldr	r2, [pc, #92]	; (80306b0 <TIM_OC3_SetConfig+0xe4>)
 8030652:	4293      	cmp	r3, r2
 8030654:	d003      	beq.n	803065e <TIM_OC3_SetConfig+0x92>
 8030656:	687b      	ldr	r3, [r7, #4]
 8030658:	4a16      	ldr	r2, [pc, #88]	; (80306b4 <TIM_OC3_SetConfig+0xe8>)
 803065a:	4293      	cmp	r3, r2
 803065c:	d113      	bne.n	8030686 <TIM_OC3_SetConfig+0xba>
 803065e:	693b      	ldr	r3, [r7, #16]
 8030660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8030664:	613b      	str	r3, [r7, #16]
 8030666:	693b      	ldr	r3, [r7, #16]
 8030668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 803066c:	613b      	str	r3, [r7, #16]
 803066e:	683b      	ldr	r3, [r7, #0]
 8030670:	695b      	ldr	r3, [r3, #20]
 8030672:	011b      	lsls	r3, r3, #4
 8030674:	693a      	ldr	r2, [r7, #16]
 8030676:	4313      	orrs	r3, r2
 8030678:	613b      	str	r3, [r7, #16]
 803067a:	683b      	ldr	r3, [r7, #0]
 803067c:	699b      	ldr	r3, [r3, #24]
 803067e:	011b      	lsls	r3, r3, #4
 8030680:	693a      	ldr	r2, [r7, #16]
 8030682:	4313      	orrs	r3, r2
 8030684:	613b      	str	r3, [r7, #16]
 8030686:	687b      	ldr	r3, [r7, #4]
 8030688:	693a      	ldr	r2, [r7, #16]
 803068a:	605a      	str	r2, [r3, #4]
 803068c:	687b      	ldr	r3, [r7, #4]
 803068e:	68fa      	ldr	r2, [r7, #12]
 8030690:	61da      	str	r2, [r3, #28]
 8030692:	683b      	ldr	r3, [r7, #0]
 8030694:	685a      	ldr	r2, [r3, #4]
 8030696:	687b      	ldr	r3, [r7, #4]
 8030698:	63da      	str	r2, [r3, #60]	; 0x3c
 803069a:	687b      	ldr	r3, [r7, #4]
 803069c:	697a      	ldr	r2, [r7, #20]
 803069e:	621a      	str	r2, [r3, #32]
 80306a0:	bf00      	nop
 80306a2:	371c      	adds	r7, #28
 80306a4:	46bd      	mov	sp, r7
 80306a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306aa:	4770      	bx	lr
 80306ac:	fffeff8f 	.word	0xfffeff8f
 80306b0:	40010000 	.word	0x40010000
 80306b4:	40010400 	.word	0x40010400

080306b8 <TIM_OC4_SetConfig>:
 80306b8:	b480      	push	{r7}
 80306ba:	b087      	sub	sp, #28
 80306bc:	af00      	add	r7, sp, #0
 80306be:	6078      	str	r0, [r7, #4]
 80306c0:	6039      	str	r1, [r7, #0]
 80306c2:	687b      	ldr	r3, [r7, #4]
 80306c4:	6a1b      	ldr	r3, [r3, #32]
 80306c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80306ca:	687b      	ldr	r3, [r7, #4]
 80306cc:	621a      	str	r2, [r3, #32]
 80306ce:	687b      	ldr	r3, [r7, #4]
 80306d0:	6a1b      	ldr	r3, [r3, #32]
 80306d2:	613b      	str	r3, [r7, #16]
 80306d4:	687b      	ldr	r3, [r7, #4]
 80306d6:	685b      	ldr	r3, [r3, #4]
 80306d8:	617b      	str	r3, [r7, #20]
 80306da:	687b      	ldr	r3, [r7, #4]
 80306dc:	69db      	ldr	r3, [r3, #28]
 80306de:	60fb      	str	r3, [r7, #12]
 80306e0:	68fa      	ldr	r2, [r7, #12]
 80306e2:	4b1e      	ldr	r3, [pc, #120]	; (803075c <TIM_OC4_SetConfig+0xa4>)
 80306e4:	4013      	ands	r3, r2
 80306e6:	60fb      	str	r3, [r7, #12]
 80306e8:	68fb      	ldr	r3, [r7, #12]
 80306ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80306ee:	60fb      	str	r3, [r7, #12]
 80306f0:	683b      	ldr	r3, [r7, #0]
 80306f2:	681b      	ldr	r3, [r3, #0]
 80306f4:	021b      	lsls	r3, r3, #8
 80306f6:	68fa      	ldr	r2, [r7, #12]
 80306f8:	4313      	orrs	r3, r2
 80306fa:	60fb      	str	r3, [r7, #12]
 80306fc:	693b      	ldr	r3, [r7, #16]
 80306fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8030702:	613b      	str	r3, [r7, #16]
 8030704:	683b      	ldr	r3, [r7, #0]
 8030706:	689b      	ldr	r3, [r3, #8]
 8030708:	031b      	lsls	r3, r3, #12
 803070a:	693a      	ldr	r2, [r7, #16]
 803070c:	4313      	orrs	r3, r2
 803070e:	613b      	str	r3, [r7, #16]
 8030710:	687b      	ldr	r3, [r7, #4]
 8030712:	4a13      	ldr	r2, [pc, #76]	; (8030760 <TIM_OC4_SetConfig+0xa8>)
 8030714:	4293      	cmp	r3, r2
 8030716:	d003      	beq.n	8030720 <TIM_OC4_SetConfig+0x68>
 8030718:	687b      	ldr	r3, [r7, #4]
 803071a:	4a12      	ldr	r2, [pc, #72]	; (8030764 <TIM_OC4_SetConfig+0xac>)
 803071c:	4293      	cmp	r3, r2
 803071e:	d109      	bne.n	8030734 <TIM_OC4_SetConfig+0x7c>
 8030720:	697b      	ldr	r3, [r7, #20]
 8030722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8030726:	617b      	str	r3, [r7, #20]
 8030728:	683b      	ldr	r3, [r7, #0]
 803072a:	695b      	ldr	r3, [r3, #20]
 803072c:	019b      	lsls	r3, r3, #6
 803072e:	697a      	ldr	r2, [r7, #20]
 8030730:	4313      	orrs	r3, r2
 8030732:	617b      	str	r3, [r7, #20]
 8030734:	687b      	ldr	r3, [r7, #4]
 8030736:	697a      	ldr	r2, [r7, #20]
 8030738:	605a      	str	r2, [r3, #4]
 803073a:	687b      	ldr	r3, [r7, #4]
 803073c:	68fa      	ldr	r2, [r7, #12]
 803073e:	61da      	str	r2, [r3, #28]
 8030740:	683b      	ldr	r3, [r7, #0]
 8030742:	685a      	ldr	r2, [r3, #4]
 8030744:	687b      	ldr	r3, [r7, #4]
 8030746:	641a      	str	r2, [r3, #64]	; 0x40
 8030748:	687b      	ldr	r3, [r7, #4]
 803074a:	693a      	ldr	r2, [r7, #16]
 803074c:	621a      	str	r2, [r3, #32]
 803074e:	bf00      	nop
 8030750:	371c      	adds	r7, #28
 8030752:	46bd      	mov	sp, r7
 8030754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030758:	4770      	bx	lr
 803075a:	bf00      	nop
 803075c:	feff8fff 	.word	0xfeff8fff
 8030760:	40010000 	.word	0x40010000
 8030764:	40010400 	.word	0x40010400

08030768 <TIM_OC5_SetConfig>:
 8030768:	b480      	push	{r7}
 803076a:	b087      	sub	sp, #28
 803076c:	af00      	add	r7, sp, #0
 803076e:	6078      	str	r0, [r7, #4]
 8030770:	6039      	str	r1, [r7, #0]
 8030772:	687b      	ldr	r3, [r7, #4]
 8030774:	6a1b      	ldr	r3, [r3, #32]
 8030776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803077a:	687b      	ldr	r3, [r7, #4]
 803077c:	621a      	str	r2, [r3, #32]
 803077e:	687b      	ldr	r3, [r7, #4]
 8030780:	6a1b      	ldr	r3, [r3, #32]
 8030782:	613b      	str	r3, [r7, #16]
 8030784:	687b      	ldr	r3, [r7, #4]
 8030786:	685b      	ldr	r3, [r3, #4]
 8030788:	617b      	str	r3, [r7, #20]
 803078a:	687b      	ldr	r3, [r7, #4]
 803078c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803078e:	60fb      	str	r3, [r7, #12]
 8030790:	68fa      	ldr	r2, [r7, #12]
 8030792:	4b1b      	ldr	r3, [pc, #108]	; (8030800 <TIM_OC5_SetConfig+0x98>)
 8030794:	4013      	ands	r3, r2
 8030796:	60fb      	str	r3, [r7, #12]
 8030798:	683b      	ldr	r3, [r7, #0]
 803079a:	681b      	ldr	r3, [r3, #0]
 803079c:	68fa      	ldr	r2, [r7, #12]
 803079e:	4313      	orrs	r3, r2
 80307a0:	60fb      	str	r3, [r7, #12]
 80307a2:	693b      	ldr	r3, [r7, #16]
 80307a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80307a8:	613b      	str	r3, [r7, #16]
 80307aa:	683b      	ldr	r3, [r7, #0]
 80307ac:	689b      	ldr	r3, [r3, #8]
 80307ae:	041b      	lsls	r3, r3, #16
 80307b0:	693a      	ldr	r2, [r7, #16]
 80307b2:	4313      	orrs	r3, r2
 80307b4:	613b      	str	r3, [r7, #16]
 80307b6:	687b      	ldr	r3, [r7, #4]
 80307b8:	4a12      	ldr	r2, [pc, #72]	; (8030804 <TIM_OC5_SetConfig+0x9c>)
 80307ba:	4293      	cmp	r3, r2
 80307bc:	d003      	beq.n	80307c6 <TIM_OC5_SetConfig+0x5e>
 80307be:	687b      	ldr	r3, [r7, #4]
 80307c0:	4a11      	ldr	r2, [pc, #68]	; (8030808 <TIM_OC5_SetConfig+0xa0>)
 80307c2:	4293      	cmp	r3, r2
 80307c4:	d109      	bne.n	80307da <TIM_OC5_SetConfig+0x72>
 80307c6:	697b      	ldr	r3, [r7, #20]
 80307c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80307cc:	617b      	str	r3, [r7, #20]
 80307ce:	683b      	ldr	r3, [r7, #0]
 80307d0:	695b      	ldr	r3, [r3, #20]
 80307d2:	021b      	lsls	r3, r3, #8
 80307d4:	697a      	ldr	r2, [r7, #20]
 80307d6:	4313      	orrs	r3, r2
 80307d8:	617b      	str	r3, [r7, #20]
 80307da:	687b      	ldr	r3, [r7, #4]
 80307dc:	697a      	ldr	r2, [r7, #20]
 80307de:	605a      	str	r2, [r3, #4]
 80307e0:	687b      	ldr	r3, [r7, #4]
 80307e2:	68fa      	ldr	r2, [r7, #12]
 80307e4:	655a      	str	r2, [r3, #84]	; 0x54
 80307e6:	683b      	ldr	r3, [r7, #0]
 80307e8:	685a      	ldr	r2, [r3, #4]
 80307ea:	687b      	ldr	r3, [r7, #4]
 80307ec:	659a      	str	r2, [r3, #88]	; 0x58
 80307ee:	687b      	ldr	r3, [r7, #4]
 80307f0:	693a      	ldr	r2, [r7, #16]
 80307f2:	621a      	str	r2, [r3, #32]
 80307f4:	bf00      	nop
 80307f6:	371c      	adds	r7, #28
 80307f8:	46bd      	mov	sp, r7
 80307fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80307fe:	4770      	bx	lr
 8030800:	fffeff8f 	.word	0xfffeff8f
 8030804:	40010000 	.word	0x40010000
 8030808:	40010400 	.word	0x40010400

0803080c <TIM_OC6_SetConfig>:
 803080c:	b480      	push	{r7}
 803080e:	b087      	sub	sp, #28
 8030810:	af00      	add	r7, sp, #0
 8030812:	6078      	str	r0, [r7, #4]
 8030814:	6039      	str	r1, [r7, #0]
 8030816:	687b      	ldr	r3, [r7, #4]
 8030818:	6a1b      	ldr	r3, [r3, #32]
 803081a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 803081e:	687b      	ldr	r3, [r7, #4]
 8030820:	621a      	str	r2, [r3, #32]
 8030822:	687b      	ldr	r3, [r7, #4]
 8030824:	6a1b      	ldr	r3, [r3, #32]
 8030826:	613b      	str	r3, [r7, #16]
 8030828:	687b      	ldr	r3, [r7, #4]
 803082a:	685b      	ldr	r3, [r3, #4]
 803082c:	617b      	str	r3, [r7, #20]
 803082e:	687b      	ldr	r3, [r7, #4]
 8030830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030832:	60fb      	str	r3, [r7, #12]
 8030834:	68fa      	ldr	r2, [r7, #12]
 8030836:	4b1c      	ldr	r3, [pc, #112]	; (80308a8 <TIM_OC6_SetConfig+0x9c>)
 8030838:	4013      	ands	r3, r2
 803083a:	60fb      	str	r3, [r7, #12]
 803083c:	683b      	ldr	r3, [r7, #0]
 803083e:	681b      	ldr	r3, [r3, #0]
 8030840:	021b      	lsls	r3, r3, #8
 8030842:	68fa      	ldr	r2, [r7, #12]
 8030844:	4313      	orrs	r3, r2
 8030846:	60fb      	str	r3, [r7, #12]
 8030848:	693b      	ldr	r3, [r7, #16]
 803084a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803084e:	613b      	str	r3, [r7, #16]
 8030850:	683b      	ldr	r3, [r7, #0]
 8030852:	689b      	ldr	r3, [r3, #8]
 8030854:	051b      	lsls	r3, r3, #20
 8030856:	693a      	ldr	r2, [r7, #16]
 8030858:	4313      	orrs	r3, r2
 803085a:	613b      	str	r3, [r7, #16]
 803085c:	687b      	ldr	r3, [r7, #4]
 803085e:	4a13      	ldr	r2, [pc, #76]	; (80308ac <TIM_OC6_SetConfig+0xa0>)
 8030860:	4293      	cmp	r3, r2
 8030862:	d003      	beq.n	803086c <TIM_OC6_SetConfig+0x60>
 8030864:	687b      	ldr	r3, [r7, #4]
 8030866:	4a12      	ldr	r2, [pc, #72]	; (80308b0 <TIM_OC6_SetConfig+0xa4>)
 8030868:	4293      	cmp	r3, r2
 803086a:	d109      	bne.n	8030880 <TIM_OC6_SetConfig+0x74>
 803086c:	697b      	ldr	r3, [r7, #20]
 803086e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030872:	617b      	str	r3, [r7, #20]
 8030874:	683b      	ldr	r3, [r7, #0]
 8030876:	695b      	ldr	r3, [r3, #20]
 8030878:	029b      	lsls	r3, r3, #10
 803087a:	697a      	ldr	r2, [r7, #20]
 803087c:	4313      	orrs	r3, r2
 803087e:	617b      	str	r3, [r7, #20]
 8030880:	687b      	ldr	r3, [r7, #4]
 8030882:	697a      	ldr	r2, [r7, #20]
 8030884:	605a      	str	r2, [r3, #4]
 8030886:	687b      	ldr	r3, [r7, #4]
 8030888:	68fa      	ldr	r2, [r7, #12]
 803088a:	655a      	str	r2, [r3, #84]	; 0x54
 803088c:	683b      	ldr	r3, [r7, #0]
 803088e:	685a      	ldr	r2, [r3, #4]
 8030890:	687b      	ldr	r3, [r7, #4]
 8030892:	65da      	str	r2, [r3, #92]	; 0x5c
 8030894:	687b      	ldr	r3, [r7, #4]
 8030896:	693a      	ldr	r2, [r7, #16]
 8030898:	621a      	str	r2, [r3, #32]
 803089a:	bf00      	nop
 803089c:	371c      	adds	r7, #28
 803089e:	46bd      	mov	sp, r7
 80308a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308a4:	4770      	bx	lr
 80308a6:	bf00      	nop
 80308a8:	feff8fff 	.word	0xfeff8fff
 80308ac:	40010000 	.word	0x40010000
 80308b0:	40010400 	.word	0x40010400

080308b4 <TIM_TI1_SetConfig>:
 80308b4:	b480      	push	{r7}
 80308b6:	b087      	sub	sp, #28
 80308b8:	af00      	add	r7, sp, #0
 80308ba:	60f8      	str	r0, [r7, #12]
 80308bc:	60b9      	str	r1, [r7, #8]
 80308be:	607a      	str	r2, [r7, #4]
 80308c0:	603b      	str	r3, [r7, #0]
 80308c2:	68fb      	ldr	r3, [r7, #12]
 80308c4:	6a1b      	ldr	r3, [r3, #32]
 80308c6:	f023 0201 	bic.w	r2, r3, #1
 80308ca:	68fb      	ldr	r3, [r7, #12]
 80308cc:	621a      	str	r2, [r3, #32]
 80308ce:	68fb      	ldr	r3, [r7, #12]
 80308d0:	699b      	ldr	r3, [r3, #24]
 80308d2:	617b      	str	r3, [r7, #20]
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	6a1b      	ldr	r3, [r3, #32]
 80308d8:	613b      	str	r3, [r7, #16]
 80308da:	68fb      	ldr	r3, [r7, #12]
 80308dc:	4a28      	ldr	r2, [pc, #160]	; (8030980 <TIM_TI1_SetConfig+0xcc>)
 80308de:	4293      	cmp	r3, r2
 80308e0:	d01b      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 80308e2:	68fb      	ldr	r3, [r7, #12]
 80308e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80308e8:	d017      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 80308ea:	68fb      	ldr	r3, [r7, #12]
 80308ec:	4a25      	ldr	r2, [pc, #148]	; (8030984 <TIM_TI1_SetConfig+0xd0>)
 80308ee:	4293      	cmp	r3, r2
 80308f0:	d013      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 80308f2:	68fb      	ldr	r3, [r7, #12]
 80308f4:	4a24      	ldr	r2, [pc, #144]	; (8030988 <TIM_TI1_SetConfig+0xd4>)
 80308f6:	4293      	cmp	r3, r2
 80308f8:	d00f      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 80308fa:	68fb      	ldr	r3, [r7, #12]
 80308fc:	4a23      	ldr	r2, [pc, #140]	; (803098c <TIM_TI1_SetConfig+0xd8>)
 80308fe:	4293      	cmp	r3, r2
 8030900:	d00b      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 8030902:	68fb      	ldr	r3, [r7, #12]
 8030904:	4a22      	ldr	r2, [pc, #136]	; (8030990 <TIM_TI1_SetConfig+0xdc>)
 8030906:	4293      	cmp	r3, r2
 8030908:	d007      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 803090a:	68fb      	ldr	r3, [r7, #12]
 803090c:	4a21      	ldr	r2, [pc, #132]	; (8030994 <TIM_TI1_SetConfig+0xe0>)
 803090e:	4293      	cmp	r3, r2
 8030910:	d003      	beq.n	803091a <TIM_TI1_SetConfig+0x66>
 8030912:	68fb      	ldr	r3, [r7, #12]
 8030914:	4a20      	ldr	r2, [pc, #128]	; (8030998 <TIM_TI1_SetConfig+0xe4>)
 8030916:	4293      	cmp	r3, r2
 8030918:	d101      	bne.n	803091e <TIM_TI1_SetConfig+0x6a>
 803091a:	2301      	movs	r3, #1
 803091c:	e000      	b.n	8030920 <TIM_TI1_SetConfig+0x6c>
 803091e:	2300      	movs	r3, #0
 8030920:	2b00      	cmp	r3, #0
 8030922:	d008      	beq.n	8030936 <TIM_TI1_SetConfig+0x82>
 8030924:	697b      	ldr	r3, [r7, #20]
 8030926:	f023 0303 	bic.w	r3, r3, #3
 803092a:	617b      	str	r3, [r7, #20]
 803092c:	697a      	ldr	r2, [r7, #20]
 803092e:	687b      	ldr	r3, [r7, #4]
 8030930:	4313      	orrs	r3, r2
 8030932:	617b      	str	r3, [r7, #20]
 8030934:	e003      	b.n	803093e <TIM_TI1_SetConfig+0x8a>
 8030936:	697b      	ldr	r3, [r7, #20]
 8030938:	f043 0301 	orr.w	r3, r3, #1
 803093c:	617b      	str	r3, [r7, #20]
 803093e:	697b      	ldr	r3, [r7, #20]
 8030940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8030944:	617b      	str	r3, [r7, #20]
 8030946:	683b      	ldr	r3, [r7, #0]
 8030948:	011b      	lsls	r3, r3, #4
 803094a:	b2db      	uxtb	r3, r3
 803094c:	697a      	ldr	r2, [r7, #20]
 803094e:	4313      	orrs	r3, r2
 8030950:	617b      	str	r3, [r7, #20]
 8030952:	693b      	ldr	r3, [r7, #16]
 8030954:	f023 030a 	bic.w	r3, r3, #10
 8030958:	613b      	str	r3, [r7, #16]
 803095a:	68bb      	ldr	r3, [r7, #8]
 803095c:	f003 030a 	and.w	r3, r3, #10
 8030960:	693a      	ldr	r2, [r7, #16]
 8030962:	4313      	orrs	r3, r2
 8030964:	613b      	str	r3, [r7, #16]
 8030966:	68fb      	ldr	r3, [r7, #12]
 8030968:	697a      	ldr	r2, [r7, #20]
 803096a:	619a      	str	r2, [r3, #24]
 803096c:	68fb      	ldr	r3, [r7, #12]
 803096e:	693a      	ldr	r2, [r7, #16]
 8030970:	621a      	str	r2, [r3, #32]
 8030972:	bf00      	nop
 8030974:	371c      	adds	r7, #28
 8030976:	46bd      	mov	sp, r7
 8030978:	f85d 7b04 	ldr.w	r7, [sp], #4
 803097c:	4770      	bx	lr
 803097e:	bf00      	nop
 8030980:	40010000 	.word	0x40010000
 8030984:	40000400 	.word	0x40000400
 8030988:	40000800 	.word	0x40000800
 803098c:	40000c00 	.word	0x40000c00
 8030990:	40010400 	.word	0x40010400
 8030994:	40014000 	.word	0x40014000
 8030998:	40001800 	.word	0x40001800

0803099c <TIM_TI1_ConfigInputStage>:
 803099c:	b480      	push	{r7}
 803099e:	b087      	sub	sp, #28
 80309a0:	af00      	add	r7, sp, #0
 80309a2:	60f8      	str	r0, [r7, #12]
 80309a4:	60b9      	str	r1, [r7, #8]
 80309a6:	607a      	str	r2, [r7, #4]
 80309a8:	68fb      	ldr	r3, [r7, #12]
 80309aa:	6a1b      	ldr	r3, [r3, #32]
 80309ac:	617b      	str	r3, [r7, #20]
 80309ae:	68fb      	ldr	r3, [r7, #12]
 80309b0:	6a1b      	ldr	r3, [r3, #32]
 80309b2:	f023 0201 	bic.w	r2, r3, #1
 80309b6:	68fb      	ldr	r3, [r7, #12]
 80309b8:	621a      	str	r2, [r3, #32]
 80309ba:	68fb      	ldr	r3, [r7, #12]
 80309bc:	699b      	ldr	r3, [r3, #24]
 80309be:	613b      	str	r3, [r7, #16]
 80309c0:	693b      	ldr	r3, [r7, #16]
 80309c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80309c6:	613b      	str	r3, [r7, #16]
 80309c8:	687b      	ldr	r3, [r7, #4]
 80309ca:	011b      	lsls	r3, r3, #4
 80309cc:	693a      	ldr	r2, [r7, #16]
 80309ce:	4313      	orrs	r3, r2
 80309d0:	613b      	str	r3, [r7, #16]
 80309d2:	697b      	ldr	r3, [r7, #20]
 80309d4:	f023 030a 	bic.w	r3, r3, #10
 80309d8:	617b      	str	r3, [r7, #20]
 80309da:	697a      	ldr	r2, [r7, #20]
 80309dc:	68bb      	ldr	r3, [r7, #8]
 80309de:	4313      	orrs	r3, r2
 80309e0:	617b      	str	r3, [r7, #20]
 80309e2:	68fb      	ldr	r3, [r7, #12]
 80309e4:	693a      	ldr	r2, [r7, #16]
 80309e6:	619a      	str	r2, [r3, #24]
 80309e8:	68fb      	ldr	r3, [r7, #12]
 80309ea:	697a      	ldr	r2, [r7, #20]
 80309ec:	621a      	str	r2, [r3, #32]
 80309ee:	bf00      	nop
 80309f0:	371c      	adds	r7, #28
 80309f2:	46bd      	mov	sp, r7
 80309f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309f8:	4770      	bx	lr

080309fa <TIM_TI2_SetConfig>:
 80309fa:	b480      	push	{r7}
 80309fc:	b087      	sub	sp, #28
 80309fe:	af00      	add	r7, sp, #0
 8030a00:	60f8      	str	r0, [r7, #12]
 8030a02:	60b9      	str	r1, [r7, #8]
 8030a04:	607a      	str	r2, [r7, #4]
 8030a06:	603b      	str	r3, [r7, #0]
 8030a08:	68fb      	ldr	r3, [r7, #12]
 8030a0a:	6a1b      	ldr	r3, [r3, #32]
 8030a0c:	f023 0210 	bic.w	r2, r3, #16
 8030a10:	68fb      	ldr	r3, [r7, #12]
 8030a12:	621a      	str	r2, [r3, #32]
 8030a14:	68fb      	ldr	r3, [r7, #12]
 8030a16:	699b      	ldr	r3, [r3, #24]
 8030a18:	617b      	str	r3, [r7, #20]
 8030a1a:	68fb      	ldr	r3, [r7, #12]
 8030a1c:	6a1b      	ldr	r3, [r3, #32]
 8030a1e:	613b      	str	r3, [r7, #16]
 8030a20:	697b      	ldr	r3, [r7, #20]
 8030a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8030a26:	617b      	str	r3, [r7, #20]
 8030a28:	687b      	ldr	r3, [r7, #4]
 8030a2a:	021b      	lsls	r3, r3, #8
 8030a2c:	697a      	ldr	r2, [r7, #20]
 8030a2e:	4313      	orrs	r3, r2
 8030a30:	617b      	str	r3, [r7, #20]
 8030a32:	697b      	ldr	r3, [r7, #20]
 8030a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8030a38:	617b      	str	r3, [r7, #20]
 8030a3a:	683b      	ldr	r3, [r7, #0]
 8030a3c:	031b      	lsls	r3, r3, #12
 8030a3e:	b29b      	uxth	r3, r3
 8030a40:	697a      	ldr	r2, [r7, #20]
 8030a42:	4313      	orrs	r3, r2
 8030a44:	617b      	str	r3, [r7, #20]
 8030a46:	693b      	ldr	r3, [r7, #16]
 8030a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8030a4c:	613b      	str	r3, [r7, #16]
 8030a4e:	68bb      	ldr	r3, [r7, #8]
 8030a50:	011b      	lsls	r3, r3, #4
 8030a52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8030a56:	693a      	ldr	r2, [r7, #16]
 8030a58:	4313      	orrs	r3, r2
 8030a5a:	613b      	str	r3, [r7, #16]
 8030a5c:	68fb      	ldr	r3, [r7, #12]
 8030a5e:	697a      	ldr	r2, [r7, #20]
 8030a60:	619a      	str	r2, [r3, #24]
 8030a62:	68fb      	ldr	r3, [r7, #12]
 8030a64:	693a      	ldr	r2, [r7, #16]
 8030a66:	621a      	str	r2, [r3, #32]
 8030a68:	bf00      	nop
 8030a6a:	371c      	adds	r7, #28
 8030a6c:	46bd      	mov	sp, r7
 8030a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a72:	4770      	bx	lr

08030a74 <TIM_TI2_ConfigInputStage>:
 8030a74:	b480      	push	{r7}
 8030a76:	b087      	sub	sp, #28
 8030a78:	af00      	add	r7, sp, #0
 8030a7a:	60f8      	str	r0, [r7, #12]
 8030a7c:	60b9      	str	r1, [r7, #8]
 8030a7e:	607a      	str	r2, [r7, #4]
 8030a80:	68fb      	ldr	r3, [r7, #12]
 8030a82:	6a1b      	ldr	r3, [r3, #32]
 8030a84:	f023 0210 	bic.w	r2, r3, #16
 8030a88:	68fb      	ldr	r3, [r7, #12]
 8030a8a:	621a      	str	r2, [r3, #32]
 8030a8c:	68fb      	ldr	r3, [r7, #12]
 8030a8e:	699b      	ldr	r3, [r3, #24]
 8030a90:	617b      	str	r3, [r7, #20]
 8030a92:	68fb      	ldr	r3, [r7, #12]
 8030a94:	6a1b      	ldr	r3, [r3, #32]
 8030a96:	613b      	str	r3, [r7, #16]
 8030a98:	697b      	ldr	r3, [r7, #20]
 8030a9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8030a9e:	617b      	str	r3, [r7, #20]
 8030aa0:	687b      	ldr	r3, [r7, #4]
 8030aa2:	031b      	lsls	r3, r3, #12
 8030aa4:	697a      	ldr	r2, [r7, #20]
 8030aa6:	4313      	orrs	r3, r2
 8030aa8:	617b      	str	r3, [r7, #20]
 8030aaa:	693b      	ldr	r3, [r7, #16]
 8030aac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8030ab0:	613b      	str	r3, [r7, #16]
 8030ab2:	68bb      	ldr	r3, [r7, #8]
 8030ab4:	011b      	lsls	r3, r3, #4
 8030ab6:	693a      	ldr	r2, [r7, #16]
 8030ab8:	4313      	orrs	r3, r2
 8030aba:	613b      	str	r3, [r7, #16]
 8030abc:	68fb      	ldr	r3, [r7, #12]
 8030abe:	697a      	ldr	r2, [r7, #20]
 8030ac0:	619a      	str	r2, [r3, #24]
 8030ac2:	68fb      	ldr	r3, [r7, #12]
 8030ac4:	693a      	ldr	r2, [r7, #16]
 8030ac6:	621a      	str	r2, [r3, #32]
 8030ac8:	bf00      	nop
 8030aca:	371c      	adds	r7, #28
 8030acc:	46bd      	mov	sp, r7
 8030ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ad2:	4770      	bx	lr

08030ad4 <TIM_TI3_SetConfig>:
 8030ad4:	b480      	push	{r7}
 8030ad6:	b087      	sub	sp, #28
 8030ad8:	af00      	add	r7, sp, #0
 8030ada:	60f8      	str	r0, [r7, #12]
 8030adc:	60b9      	str	r1, [r7, #8]
 8030ade:	607a      	str	r2, [r7, #4]
 8030ae0:	603b      	str	r3, [r7, #0]
 8030ae2:	68fb      	ldr	r3, [r7, #12]
 8030ae4:	6a1b      	ldr	r3, [r3, #32]
 8030ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8030aea:	68fb      	ldr	r3, [r7, #12]
 8030aec:	621a      	str	r2, [r3, #32]
 8030aee:	68fb      	ldr	r3, [r7, #12]
 8030af0:	69db      	ldr	r3, [r3, #28]
 8030af2:	617b      	str	r3, [r7, #20]
 8030af4:	68fb      	ldr	r3, [r7, #12]
 8030af6:	6a1b      	ldr	r3, [r3, #32]
 8030af8:	613b      	str	r3, [r7, #16]
 8030afa:	697b      	ldr	r3, [r7, #20]
 8030afc:	f023 0303 	bic.w	r3, r3, #3
 8030b00:	617b      	str	r3, [r7, #20]
 8030b02:	697a      	ldr	r2, [r7, #20]
 8030b04:	687b      	ldr	r3, [r7, #4]
 8030b06:	4313      	orrs	r3, r2
 8030b08:	617b      	str	r3, [r7, #20]
 8030b0a:	697b      	ldr	r3, [r7, #20]
 8030b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8030b10:	617b      	str	r3, [r7, #20]
 8030b12:	683b      	ldr	r3, [r7, #0]
 8030b14:	011b      	lsls	r3, r3, #4
 8030b16:	b2db      	uxtb	r3, r3
 8030b18:	697a      	ldr	r2, [r7, #20]
 8030b1a:	4313      	orrs	r3, r2
 8030b1c:	617b      	str	r3, [r7, #20]
 8030b1e:	693b      	ldr	r3, [r7, #16]
 8030b20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8030b24:	613b      	str	r3, [r7, #16]
 8030b26:	68bb      	ldr	r3, [r7, #8]
 8030b28:	021b      	lsls	r3, r3, #8
 8030b2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8030b2e:	693a      	ldr	r2, [r7, #16]
 8030b30:	4313      	orrs	r3, r2
 8030b32:	613b      	str	r3, [r7, #16]
 8030b34:	68fb      	ldr	r3, [r7, #12]
 8030b36:	697a      	ldr	r2, [r7, #20]
 8030b38:	61da      	str	r2, [r3, #28]
 8030b3a:	68fb      	ldr	r3, [r7, #12]
 8030b3c:	693a      	ldr	r2, [r7, #16]
 8030b3e:	621a      	str	r2, [r3, #32]
 8030b40:	bf00      	nop
 8030b42:	371c      	adds	r7, #28
 8030b44:	46bd      	mov	sp, r7
 8030b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b4a:	4770      	bx	lr

08030b4c <TIM_TI4_SetConfig>:
 8030b4c:	b480      	push	{r7}
 8030b4e:	b087      	sub	sp, #28
 8030b50:	af00      	add	r7, sp, #0
 8030b52:	60f8      	str	r0, [r7, #12]
 8030b54:	60b9      	str	r1, [r7, #8]
 8030b56:	607a      	str	r2, [r7, #4]
 8030b58:	603b      	str	r3, [r7, #0]
 8030b5a:	68fb      	ldr	r3, [r7, #12]
 8030b5c:	6a1b      	ldr	r3, [r3, #32]
 8030b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8030b62:	68fb      	ldr	r3, [r7, #12]
 8030b64:	621a      	str	r2, [r3, #32]
 8030b66:	68fb      	ldr	r3, [r7, #12]
 8030b68:	69db      	ldr	r3, [r3, #28]
 8030b6a:	617b      	str	r3, [r7, #20]
 8030b6c:	68fb      	ldr	r3, [r7, #12]
 8030b6e:	6a1b      	ldr	r3, [r3, #32]
 8030b70:	613b      	str	r3, [r7, #16]
 8030b72:	697b      	ldr	r3, [r7, #20]
 8030b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8030b78:	617b      	str	r3, [r7, #20]
 8030b7a:	687b      	ldr	r3, [r7, #4]
 8030b7c:	021b      	lsls	r3, r3, #8
 8030b7e:	697a      	ldr	r2, [r7, #20]
 8030b80:	4313      	orrs	r3, r2
 8030b82:	617b      	str	r3, [r7, #20]
 8030b84:	697b      	ldr	r3, [r7, #20]
 8030b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8030b8a:	617b      	str	r3, [r7, #20]
 8030b8c:	683b      	ldr	r3, [r7, #0]
 8030b8e:	031b      	lsls	r3, r3, #12
 8030b90:	b29b      	uxth	r3, r3
 8030b92:	697a      	ldr	r2, [r7, #20]
 8030b94:	4313      	orrs	r3, r2
 8030b96:	617b      	str	r3, [r7, #20]
 8030b98:	693b      	ldr	r3, [r7, #16]
 8030b9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8030b9e:	613b      	str	r3, [r7, #16]
 8030ba0:	68bb      	ldr	r3, [r7, #8]
 8030ba2:	031b      	lsls	r3, r3, #12
 8030ba4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8030ba8:	693a      	ldr	r2, [r7, #16]
 8030baa:	4313      	orrs	r3, r2
 8030bac:	613b      	str	r3, [r7, #16]
 8030bae:	68fb      	ldr	r3, [r7, #12]
 8030bb0:	697a      	ldr	r2, [r7, #20]
 8030bb2:	61da      	str	r2, [r3, #28]
 8030bb4:	68fb      	ldr	r3, [r7, #12]
 8030bb6:	693a      	ldr	r2, [r7, #16]
 8030bb8:	621a      	str	r2, [r3, #32]
 8030bba:	bf00      	nop
 8030bbc:	371c      	adds	r7, #28
 8030bbe:	46bd      	mov	sp, r7
 8030bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030bc4:	4770      	bx	lr

08030bc6 <TIM_ITRx_SetConfig>:
 8030bc6:	b480      	push	{r7}
 8030bc8:	b085      	sub	sp, #20
 8030bca:	af00      	add	r7, sp, #0
 8030bcc:	6078      	str	r0, [r7, #4]
 8030bce:	6039      	str	r1, [r7, #0]
 8030bd0:	687b      	ldr	r3, [r7, #4]
 8030bd2:	689b      	ldr	r3, [r3, #8]
 8030bd4:	60fb      	str	r3, [r7, #12]
 8030bd6:	68fb      	ldr	r3, [r7, #12]
 8030bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8030bdc:	60fb      	str	r3, [r7, #12]
 8030bde:	683a      	ldr	r2, [r7, #0]
 8030be0:	68fb      	ldr	r3, [r7, #12]
 8030be2:	4313      	orrs	r3, r2
 8030be4:	f043 0307 	orr.w	r3, r3, #7
 8030be8:	60fb      	str	r3, [r7, #12]
 8030bea:	687b      	ldr	r3, [r7, #4]
 8030bec:	68fa      	ldr	r2, [r7, #12]
 8030bee:	609a      	str	r2, [r3, #8]
 8030bf0:	bf00      	nop
 8030bf2:	3714      	adds	r7, #20
 8030bf4:	46bd      	mov	sp, r7
 8030bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030bfa:	4770      	bx	lr

08030bfc <TIM_ETR_SetConfig>:
 8030bfc:	b480      	push	{r7}
 8030bfe:	b087      	sub	sp, #28
 8030c00:	af00      	add	r7, sp, #0
 8030c02:	60f8      	str	r0, [r7, #12]
 8030c04:	60b9      	str	r1, [r7, #8]
 8030c06:	607a      	str	r2, [r7, #4]
 8030c08:	603b      	str	r3, [r7, #0]
 8030c0a:	68fb      	ldr	r3, [r7, #12]
 8030c0c:	689b      	ldr	r3, [r3, #8]
 8030c0e:	617b      	str	r3, [r7, #20]
 8030c10:	697b      	ldr	r3, [r7, #20]
 8030c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8030c16:	617b      	str	r3, [r7, #20]
 8030c18:	683b      	ldr	r3, [r7, #0]
 8030c1a:	021a      	lsls	r2, r3, #8
 8030c1c:	687b      	ldr	r3, [r7, #4]
 8030c1e:	431a      	orrs	r2, r3
 8030c20:	68bb      	ldr	r3, [r7, #8]
 8030c22:	4313      	orrs	r3, r2
 8030c24:	697a      	ldr	r2, [r7, #20]
 8030c26:	4313      	orrs	r3, r2
 8030c28:	617b      	str	r3, [r7, #20]
 8030c2a:	68fb      	ldr	r3, [r7, #12]
 8030c2c:	697a      	ldr	r2, [r7, #20]
 8030c2e:	609a      	str	r2, [r3, #8]
 8030c30:	bf00      	nop
 8030c32:	371c      	adds	r7, #28
 8030c34:	46bd      	mov	sp, r7
 8030c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c3a:	4770      	bx	lr

08030c3c <TIM_CCxChannelCmd>:
 8030c3c:	b480      	push	{r7}
 8030c3e:	b087      	sub	sp, #28
 8030c40:	af00      	add	r7, sp, #0
 8030c42:	60f8      	str	r0, [r7, #12]
 8030c44:	60b9      	str	r1, [r7, #8]
 8030c46:	607a      	str	r2, [r7, #4]
 8030c48:	68bb      	ldr	r3, [r7, #8]
 8030c4a:	f003 031f 	and.w	r3, r3, #31
 8030c4e:	2201      	movs	r2, #1
 8030c50:	fa02 f303 	lsl.w	r3, r2, r3
 8030c54:	617b      	str	r3, [r7, #20]
 8030c56:	68fb      	ldr	r3, [r7, #12]
 8030c58:	6a1a      	ldr	r2, [r3, #32]
 8030c5a:	697b      	ldr	r3, [r7, #20]
 8030c5c:	43db      	mvns	r3, r3
 8030c5e:	401a      	ands	r2, r3
 8030c60:	68fb      	ldr	r3, [r7, #12]
 8030c62:	621a      	str	r2, [r3, #32]
 8030c64:	68fb      	ldr	r3, [r7, #12]
 8030c66:	6a1a      	ldr	r2, [r3, #32]
 8030c68:	68bb      	ldr	r3, [r7, #8]
 8030c6a:	f003 031f 	and.w	r3, r3, #31
 8030c6e:	6879      	ldr	r1, [r7, #4]
 8030c70:	fa01 f303 	lsl.w	r3, r1, r3
 8030c74:	431a      	orrs	r2, r3
 8030c76:	68fb      	ldr	r3, [r7, #12]
 8030c78:	621a      	str	r2, [r3, #32]
 8030c7a:	bf00      	nop
 8030c7c:	371c      	adds	r7, #28
 8030c7e:	46bd      	mov	sp, r7
 8030c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c84:	4770      	bx	lr
	...

08030c88 <HAL_TIMEx_PWMN_Start>:
 8030c88:	b580      	push	{r7, lr}
 8030c8a:	b084      	sub	sp, #16
 8030c8c:	af00      	add	r7, sp, #0
 8030c8e:	6078      	str	r0, [r7, #4]
 8030c90:	6039      	str	r1, [r7, #0]
 8030c92:	687b      	ldr	r3, [r7, #4]
 8030c94:	681b      	ldr	r3, [r3, #0]
 8030c96:	2204      	movs	r2, #4
 8030c98:	6839      	ldr	r1, [r7, #0]
 8030c9a:	4618      	mov	r0, r3
 8030c9c:	f000 f89e 	bl	8030ddc <TIM_CCxNChannelCmd>
 8030ca0:	687b      	ldr	r3, [r7, #4]
 8030ca2:	681b      	ldr	r3, [r3, #0]
 8030ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8030ca6:	687b      	ldr	r3, [r7, #4]
 8030ca8:	681b      	ldr	r3, [r3, #0]
 8030caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8030cae:	645a      	str	r2, [r3, #68]	; 0x44
 8030cb0:	687b      	ldr	r3, [r7, #4]
 8030cb2:	681b      	ldr	r3, [r3, #0]
 8030cb4:	689a      	ldr	r2, [r3, #8]
 8030cb6:	4b0b      	ldr	r3, [pc, #44]	; (8030ce4 <HAL_TIMEx_PWMN_Start+0x5c>)
 8030cb8:	4013      	ands	r3, r2
 8030cba:	60fb      	str	r3, [r7, #12]
 8030cbc:	68fb      	ldr	r3, [r7, #12]
 8030cbe:	2b06      	cmp	r3, #6
 8030cc0:	d00b      	beq.n	8030cda <HAL_TIMEx_PWMN_Start+0x52>
 8030cc2:	68fb      	ldr	r3, [r7, #12]
 8030cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030cc8:	d007      	beq.n	8030cda <HAL_TIMEx_PWMN_Start+0x52>
 8030cca:	687b      	ldr	r3, [r7, #4]
 8030ccc:	681b      	ldr	r3, [r3, #0]
 8030cce:	681a      	ldr	r2, [r3, #0]
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	681b      	ldr	r3, [r3, #0]
 8030cd4:	f042 0201 	orr.w	r2, r2, #1
 8030cd8:	601a      	str	r2, [r3, #0]
 8030cda:	2300      	movs	r3, #0
 8030cdc:	4618      	mov	r0, r3
 8030cde:	3710      	adds	r7, #16
 8030ce0:	46bd      	mov	sp, r7
 8030ce2:	bd80      	pop	{r7, pc}
 8030ce4:	00010007 	.word	0x00010007

08030ce8 <HAL_TIMEx_MasterConfigSynchronization>:
 8030ce8:	b480      	push	{r7}
 8030cea:	b085      	sub	sp, #20
 8030cec:	af00      	add	r7, sp, #0
 8030cee:	6078      	str	r0, [r7, #4]
 8030cf0:	6039      	str	r1, [r7, #0]
 8030cf2:	687b      	ldr	r3, [r7, #4]
 8030cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8030cf8:	2b01      	cmp	r3, #1
 8030cfa:	d101      	bne.n	8030d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8030cfc:	2302      	movs	r3, #2
 8030cfe:	e045      	b.n	8030d8c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8030d00:	687b      	ldr	r3, [r7, #4]
 8030d02:	2201      	movs	r2, #1
 8030d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8030d08:	687b      	ldr	r3, [r7, #4]
 8030d0a:	2202      	movs	r2, #2
 8030d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8030d10:	687b      	ldr	r3, [r7, #4]
 8030d12:	681b      	ldr	r3, [r3, #0]
 8030d14:	685b      	ldr	r3, [r3, #4]
 8030d16:	60fb      	str	r3, [r7, #12]
 8030d18:	687b      	ldr	r3, [r7, #4]
 8030d1a:	681b      	ldr	r3, [r3, #0]
 8030d1c:	689b      	ldr	r3, [r3, #8]
 8030d1e:	60bb      	str	r3, [r7, #8]
 8030d20:	687b      	ldr	r3, [r7, #4]
 8030d22:	681b      	ldr	r3, [r3, #0]
 8030d24:	4a1c      	ldr	r2, [pc, #112]	; (8030d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8030d26:	4293      	cmp	r3, r2
 8030d28:	d004      	beq.n	8030d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8030d2a:	687b      	ldr	r3, [r7, #4]
 8030d2c:	681b      	ldr	r3, [r3, #0]
 8030d2e:	4a1b      	ldr	r2, [pc, #108]	; (8030d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8030d30:	4293      	cmp	r3, r2
 8030d32:	d108      	bne.n	8030d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8030d34:	68fb      	ldr	r3, [r7, #12]
 8030d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8030d3a:	60fb      	str	r3, [r7, #12]
 8030d3c:	683b      	ldr	r3, [r7, #0]
 8030d3e:	685b      	ldr	r3, [r3, #4]
 8030d40:	68fa      	ldr	r2, [r7, #12]
 8030d42:	4313      	orrs	r3, r2
 8030d44:	60fb      	str	r3, [r7, #12]
 8030d46:	68fb      	ldr	r3, [r7, #12]
 8030d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8030d4c:	60fb      	str	r3, [r7, #12]
 8030d4e:	683b      	ldr	r3, [r7, #0]
 8030d50:	681b      	ldr	r3, [r3, #0]
 8030d52:	68fa      	ldr	r2, [r7, #12]
 8030d54:	4313      	orrs	r3, r2
 8030d56:	60fb      	str	r3, [r7, #12]
 8030d58:	68bb      	ldr	r3, [r7, #8]
 8030d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8030d5e:	60bb      	str	r3, [r7, #8]
 8030d60:	683b      	ldr	r3, [r7, #0]
 8030d62:	689b      	ldr	r3, [r3, #8]
 8030d64:	68ba      	ldr	r2, [r7, #8]
 8030d66:	4313      	orrs	r3, r2
 8030d68:	60bb      	str	r3, [r7, #8]
 8030d6a:	687b      	ldr	r3, [r7, #4]
 8030d6c:	681b      	ldr	r3, [r3, #0]
 8030d6e:	68fa      	ldr	r2, [r7, #12]
 8030d70:	605a      	str	r2, [r3, #4]
 8030d72:	687b      	ldr	r3, [r7, #4]
 8030d74:	681b      	ldr	r3, [r3, #0]
 8030d76:	68ba      	ldr	r2, [r7, #8]
 8030d78:	609a      	str	r2, [r3, #8]
 8030d7a:	687b      	ldr	r3, [r7, #4]
 8030d7c:	2201      	movs	r2, #1
 8030d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8030d82:	687b      	ldr	r3, [r7, #4]
 8030d84:	2200      	movs	r2, #0
 8030d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8030d8a:	2300      	movs	r3, #0
 8030d8c:	4618      	mov	r0, r3
 8030d8e:	3714      	adds	r7, #20
 8030d90:	46bd      	mov	sp, r7
 8030d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d96:	4770      	bx	lr
 8030d98:	40010000 	.word	0x40010000
 8030d9c:	40010400 	.word	0x40010400

08030da0 <HAL_TIMEx_CommutCallback>:
 8030da0:	b480      	push	{r7}
 8030da2:	b083      	sub	sp, #12
 8030da4:	af00      	add	r7, sp, #0
 8030da6:	6078      	str	r0, [r7, #4]
 8030da8:	bf00      	nop
 8030daa:	370c      	adds	r7, #12
 8030dac:	46bd      	mov	sp, r7
 8030dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030db2:	4770      	bx	lr

08030db4 <HAL_TIMEx_BreakCallback>:
 8030db4:	b480      	push	{r7}
 8030db6:	b083      	sub	sp, #12
 8030db8:	af00      	add	r7, sp, #0
 8030dba:	6078      	str	r0, [r7, #4]
 8030dbc:	bf00      	nop
 8030dbe:	370c      	adds	r7, #12
 8030dc0:	46bd      	mov	sp, r7
 8030dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030dc6:	4770      	bx	lr

08030dc8 <HAL_TIMEx_Break2Callback>:
 8030dc8:	b480      	push	{r7}
 8030dca:	b083      	sub	sp, #12
 8030dcc:	af00      	add	r7, sp, #0
 8030dce:	6078      	str	r0, [r7, #4]
 8030dd0:	bf00      	nop
 8030dd2:	370c      	adds	r7, #12
 8030dd4:	46bd      	mov	sp, r7
 8030dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030dda:	4770      	bx	lr

08030ddc <TIM_CCxNChannelCmd>:
 8030ddc:	b480      	push	{r7}
 8030dde:	b087      	sub	sp, #28
 8030de0:	af00      	add	r7, sp, #0
 8030de2:	60f8      	str	r0, [r7, #12]
 8030de4:	60b9      	str	r1, [r7, #8]
 8030de6:	607a      	str	r2, [r7, #4]
 8030de8:	68bb      	ldr	r3, [r7, #8]
 8030dea:	f003 031f 	and.w	r3, r3, #31
 8030dee:	2204      	movs	r2, #4
 8030df0:	fa02 f303 	lsl.w	r3, r2, r3
 8030df4:	617b      	str	r3, [r7, #20]
 8030df6:	68fb      	ldr	r3, [r7, #12]
 8030df8:	6a1a      	ldr	r2, [r3, #32]
 8030dfa:	697b      	ldr	r3, [r7, #20]
 8030dfc:	43db      	mvns	r3, r3
 8030dfe:	401a      	ands	r2, r3
 8030e00:	68fb      	ldr	r3, [r7, #12]
 8030e02:	621a      	str	r2, [r3, #32]
 8030e04:	68fb      	ldr	r3, [r7, #12]
 8030e06:	6a1a      	ldr	r2, [r3, #32]
 8030e08:	68bb      	ldr	r3, [r7, #8]
 8030e0a:	f003 031f 	and.w	r3, r3, #31
 8030e0e:	6879      	ldr	r1, [r7, #4]
 8030e10:	fa01 f303 	lsl.w	r3, r1, r3
 8030e14:	431a      	orrs	r2, r3
 8030e16:	68fb      	ldr	r3, [r7, #12]
 8030e18:	621a      	str	r2, [r3, #32]
 8030e1a:	bf00      	nop
 8030e1c:	371c      	adds	r7, #28
 8030e1e:	46bd      	mov	sp, r7
 8030e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030e24:	4770      	bx	lr

08030e26 <HAL_UART_Init>:
 8030e26:	b580      	push	{r7, lr}
 8030e28:	b082      	sub	sp, #8
 8030e2a:	af00      	add	r7, sp, #0
 8030e2c:	6078      	str	r0, [r7, #4]
 8030e2e:	687b      	ldr	r3, [r7, #4]
 8030e30:	2b00      	cmp	r3, #0
 8030e32:	d101      	bne.n	8030e38 <HAL_UART_Init+0x12>
 8030e34:	2301      	movs	r3, #1
 8030e36:	e040      	b.n	8030eba <HAL_UART_Init+0x94>
 8030e38:	687b      	ldr	r3, [r7, #4]
 8030e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030e3c:	2b00      	cmp	r3, #0
 8030e3e:	d106      	bne.n	8030e4e <HAL_UART_Init+0x28>
 8030e40:	687b      	ldr	r3, [r7, #4]
 8030e42:	2200      	movs	r2, #0
 8030e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8030e48:	6878      	ldr	r0, [r7, #4]
 8030e4a:	f000 f83a 	bl	8030ec2 <HAL_UART_MspInit>
 8030e4e:	687b      	ldr	r3, [r7, #4]
 8030e50:	2224      	movs	r2, #36	; 0x24
 8030e52:	675a      	str	r2, [r3, #116]	; 0x74
 8030e54:	687b      	ldr	r3, [r7, #4]
 8030e56:	681b      	ldr	r3, [r3, #0]
 8030e58:	681a      	ldr	r2, [r3, #0]
 8030e5a:	687b      	ldr	r3, [r7, #4]
 8030e5c:	681b      	ldr	r3, [r3, #0]
 8030e5e:	f022 0201 	bic.w	r2, r2, #1
 8030e62:	601a      	str	r2, [r3, #0]
 8030e64:	6878      	ldr	r0, [r7, #4]
 8030e66:	f000 f837 	bl	8030ed8 <UART_SetConfig>
 8030e6a:	4603      	mov	r3, r0
 8030e6c:	2b01      	cmp	r3, #1
 8030e6e:	d101      	bne.n	8030e74 <HAL_UART_Init+0x4e>
 8030e70:	2301      	movs	r3, #1
 8030e72:	e022      	b.n	8030eba <HAL_UART_Init+0x94>
 8030e74:	687b      	ldr	r3, [r7, #4]
 8030e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030e78:	2b00      	cmp	r3, #0
 8030e7a:	d002      	beq.n	8030e82 <HAL_UART_Init+0x5c>
 8030e7c:	6878      	ldr	r0, [r7, #4]
 8030e7e:	f000 fad3 	bl	8031428 <UART_AdvFeatureConfig>
 8030e82:	687b      	ldr	r3, [r7, #4]
 8030e84:	681b      	ldr	r3, [r3, #0]
 8030e86:	685a      	ldr	r2, [r3, #4]
 8030e88:	687b      	ldr	r3, [r7, #4]
 8030e8a:	681b      	ldr	r3, [r3, #0]
 8030e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8030e90:	605a      	str	r2, [r3, #4]
 8030e92:	687b      	ldr	r3, [r7, #4]
 8030e94:	681b      	ldr	r3, [r3, #0]
 8030e96:	689a      	ldr	r2, [r3, #8]
 8030e98:	687b      	ldr	r3, [r7, #4]
 8030e9a:	681b      	ldr	r3, [r3, #0]
 8030e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8030ea0:	609a      	str	r2, [r3, #8]
 8030ea2:	687b      	ldr	r3, [r7, #4]
 8030ea4:	681b      	ldr	r3, [r3, #0]
 8030ea6:	681a      	ldr	r2, [r3, #0]
 8030ea8:	687b      	ldr	r3, [r7, #4]
 8030eaa:	681b      	ldr	r3, [r3, #0]
 8030eac:	f042 0201 	orr.w	r2, r2, #1
 8030eb0:	601a      	str	r2, [r3, #0]
 8030eb2:	6878      	ldr	r0, [r7, #4]
 8030eb4:	f000 fb5a 	bl	803156c <UART_CheckIdleState>
 8030eb8:	4603      	mov	r3, r0
 8030eba:	4618      	mov	r0, r3
 8030ebc:	3708      	adds	r7, #8
 8030ebe:	46bd      	mov	sp, r7
 8030ec0:	bd80      	pop	{r7, pc}

08030ec2 <HAL_UART_MspInit>:
 8030ec2:	b480      	push	{r7}
 8030ec4:	b083      	sub	sp, #12
 8030ec6:	af00      	add	r7, sp, #0
 8030ec8:	6078      	str	r0, [r7, #4]
 8030eca:	bf00      	nop
 8030ecc:	370c      	adds	r7, #12
 8030ece:	46bd      	mov	sp, r7
 8030ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ed4:	4770      	bx	lr
	...

08030ed8 <UART_SetConfig>:
 8030ed8:	b580      	push	{r7, lr}
 8030eda:	b088      	sub	sp, #32
 8030edc:	af00      	add	r7, sp, #0
 8030ede:	6078      	str	r0, [r7, #4]
 8030ee0:	2300      	movs	r3, #0
 8030ee2:	61bb      	str	r3, [r7, #24]
 8030ee4:	2300      	movs	r3, #0
 8030ee6:	75fb      	strb	r3, [r7, #23]
 8030ee8:	687b      	ldr	r3, [r7, #4]
 8030eea:	689a      	ldr	r2, [r3, #8]
 8030eec:	687b      	ldr	r3, [r7, #4]
 8030eee:	691b      	ldr	r3, [r3, #16]
 8030ef0:	431a      	orrs	r2, r3
 8030ef2:	687b      	ldr	r3, [r7, #4]
 8030ef4:	695b      	ldr	r3, [r3, #20]
 8030ef6:	431a      	orrs	r2, r3
 8030ef8:	687b      	ldr	r3, [r7, #4]
 8030efa:	69db      	ldr	r3, [r3, #28]
 8030efc:	4313      	orrs	r3, r2
 8030efe:	613b      	str	r3, [r7, #16]
 8030f00:	687b      	ldr	r3, [r7, #4]
 8030f02:	681b      	ldr	r3, [r3, #0]
 8030f04:	681a      	ldr	r2, [r3, #0]
 8030f06:	4ba6      	ldr	r3, [pc, #664]	; (80311a0 <UART_SetConfig+0x2c8>)
 8030f08:	4013      	ands	r3, r2
 8030f0a:	687a      	ldr	r2, [r7, #4]
 8030f0c:	6812      	ldr	r2, [r2, #0]
 8030f0e:	6939      	ldr	r1, [r7, #16]
 8030f10:	430b      	orrs	r3, r1
 8030f12:	6013      	str	r3, [r2, #0]
 8030f14:	687b      	ldr	r3, [r7, #4]
 8030f16:	681b      	ldr	r3, [r3, #0]
 8030f18:	685b      	ldr	r3, [r3, #4]
 8030f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8030f1e:	687b      	ldr	r3, [r7, #4]
 8030f20:	68da      	ldr	r2, [r3, #12]
 8030f22:	687b      	ldr	r3, [r7, #4]
 8030f24:	681b      	ldr	r3, [r3, #0]
 8030f26:	430a      	orrs	r2, r1
 8030f28:	605a      	str	r2, [r3, #4]
 8030f2a:	687b      	ldr	r3, [r7, #4]
 8030f2c:	699b      	ldr	r3, [r3, #24]
 8030f2e:	613b      	str	r3, [r7, #16]
 8030f30:	687b      	ldr	r3, [r7, #4]
 8030f32:	6a1b      	ldr	r3, [r3, #32]
 8030f34:	693a      	ldr	r2, [r7, #16]
 8030f36:	4313      	orrs	r3, r2
 8030f38:	613b      	str	r3, [r7, #16]
 8030f3a:	687b      	ldr	r3, [r7, #4]
 8030f3c:	681b      	ldr	r3, [r3, #0]
 8030f3e:	689b      	ldr	r3, [r3, #8]
 8030f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8030f44:	687b      	ldr	r3, [r7, #4]
 8030f46:	681b      	ldr	r3, [r3, #0]
 8030f48:	693a      	ldr	r2, [r7, #16]
 8030f4a:	430a      	orrs	r2, r1
 8030f4c:	609a      	str	r2, [r3, #8]
 8030f4e:	687b      	ldr	r3, [r7, #4]
 8030f50:	681b      	ldr	r3, [r3, #0]
 8030f52:	4a94      	ldr	r2, [pc, #592]	; (80311a4 <UART_SetConfig+0x2cc>)
 8030f54:	4293      	cmp	r3, r2
 8030f56:	d120      	bne.n	8030f9a <UART_SetConfig+0xc2>
 8030f58:	4b93      	ldr	r3, [pc, #588]	; (80311a8 <UART_SetConfig+0x2d0>)
 8030f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030f5e:	f003 0303 	and.w	r3, r3, #3
 8030f62:	2b03      	cmp	r3, #3
 8030f64:	d816      	bhi.n	8030f94 <UART_SetConfig+0xbc>
 8030f66:	a201      	add	r2, pc, #4	; (adr r2, 8030f6c <UART_SetConfig+0x94>)
 8030f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030f6c:	08030f7d 	.word	0x08030f7d
 8030f70:	08030f89 	.word	0x08030f89
 8030f74:	08030f83 	.word	0x08030f83
 8030f78:	08030f8f 	.word	0x08030f8f
 8030f7c:	2301      	movs	r3, #1
 8030f7e:	77fb      	strb	r3, [r7, #31]
 8030f80:	e150      	b.n	8031224 <UART_SetConfig+0x34c>
 8030f82:	2302      	movs	r3, #2
 8030f84:	77fb      	strb	r3, [r7, #31]
 8030f86:	e14d      	b.n	8031224 <UART_SetConfig+0x34c>
 8030f88:	2304      	movs	r3, #4
 8030f8a:	77fb      	strb	r3, [r7, #31]
 8030f8c:	e14a      	b.n	8031224 <UART_SetConfig+0x34c>
 8030f8e:	2308      	movs	r3, #8
 8030f90:	77fb      	strb	r3, [r7, #31]
 8030f92:	e147      	b.n	8031224 <UART_SetConfig+0x34c>
 8030f94:	2310      	movs	r3, #16
 8030f96:	77fb      	strb	r3, [r7, #31]
 8030f98:	e144      	b.n	8031224 <UART_SetConfig+0x34c>
 8030f9a:	687b      	ldr	r3, [r7, #4]
 8030f9c:	681b      	ldr	r3, [r3, #0]
 8030f9e:	4a83      	ldr	r2, [pc, #524]	; (80311ac <UART_SetConfig+0x2d4>)
 8030fa0:	4293      	cmp	r3, r2
 8030fa2:	d132      	bne.n	803100a <UART_SetConfig+0x132>
 8030fa4:	4b80      	ldr	r3, [pc, #512]	; (80311a8 <UART_SetConfig+0x2d0>)
 8030fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030faa:	f003 030c 	and.w	r3, r3, #12
 8030fae:	2b0c      	cmp	r3, #12
 8030fb0:	d828      	bhi.n	8031004 <UART_SetConfig+0x12c>
 8030fb2:	a201      	add	r2, pc, #4	; (adr r2, 8030fb8 <UART_SetConfig+0xe0>)
 8030fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030fb8:	08030fed 	.word	0x08030fed
 8030fbc:	08031005 	.word	0x08031005
 8030fc0:	08031005 	.word	0x08031005
 8030fc4:	08031005 	.word	0x08031005
 8030fc8:	08030ff9 	.word	0x08030ff9
 8030fcc:	08031005 	.word	0x08031005
 8030fd0:	08031005 	.word	0x08031005
 8030fd4:	08031005 	.word	0x08031005
 8030fd8:	08030ff3 	.word	0x08030ff3
 8030fdc:	08031005 	.word	0x08031005
 8030fe0:	08031005 	.word	0x08031005
 8030fe4:	08031005 	.word	0x08031005
 8030fe8:	08030fff 	.word	0x08030fff
 8030fec:	2300      	movs	r3, #0
 8030fee:	77fb      	strb	r3, [r7, #31]
 8030ff0:	e118      	b.n	8031224 <UART_SetConfig+0x34c>
 8030ff2:	2302      	movs	r3, #2
 8030ff4:	77fb      	strb	r3, [r7, #31]
 8030ff6:	e115      	b.n	8031224 <UART_SetConfig+0x34c>
 8030ff8:	2304      	movs	r3, #4
 8030ffa:	77fb      	strb	r3, [r7, #31]
 8030ffc:	e112      	b.n	8031224 <UART_SetConfig+0x34c>
 8030ffe:	2308      	movs	r3, #8
 8031000:	77fb      	strb	r3, [r7, #31]
 8031002:	e10f      	b.n	8031224 <UART_SetConfig+0x34c>
 8031004:	2310      	movs	r3, #16
 8031006:	77fb      	strb	r3, [r7, #31]
 8031008:	e10c      	b.n	8031224 <UART_SetConfig+0x34c>
 803100a:	687b      	ldr	r3, [r7, #4]
 803100c:	681b      	ldr	r3, [r3, #0]
 803100e:	4a68      	ldr	r2, [pc, #416]	; (80311b0 <UART_SetConfig+0x2d8>)
 8031010:	4293      	cmp	r3, r2
 8031012:	d120      	bne.n	8031056 <UART_SetConfig+0x17e>
 8031014:	4b64      	ldr	r3, [pc, #400]	; (80311a8 <UART_SetConfig+0x2d0>)
 8031016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 803101a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 803101e:	2b30      	cmp	r3, #48	; 0x30
 8031020:	d013      	beq.n	803104a <UART_SetConfig+0x172>
 8031022:	2b30      	cmp	r3, #48	; 0x30
 8031024:	d814      	bhi.n	8031050 <UART_SetConfig+0x178>
 8031026:	2b20      	cmp	r3, #32
 8031028:	d009      	beq.n	803103e <UART_SetConfig+0x166>
 803102a:	2b20      	cmp	r3, #32
 803102c:	d810      	bhi.n	8031050 <UART_SetConfig+0x178>
 803102e:	2b00      	cmp	r3, #0
 8031030:	d002      	beq.n	8031038 <UART_SetConfig+0x160>
 8031032:	2b10      	cmp	r3, #16
 8031034:	d006      	beq.n	8031044 <UART_SetConfig+0x16c>
 8031036:	e00b      	b.n	8031050 <UART_SetConfig+0x178>
 8031038:	2300      	movs	r3, #0
 803103a:	77fb      	strb	r3, [r7, #31]
 803103c:	e0f2      	b.n	8031224 <UART_SetConfig+0x34c>
 803103e:	2302      	movs	r3, #2
 8031040:	77fb      	strb	r3, [r7, #31]
 8031042:	e0ef      	b.n	8031224 <UART_SetConfig+0x34c>
 8031044:	2304      	movs	r3, #4
 8031046:	77fb      	strb	r3, [r7, #31]
 8031048:	e0ec      	b.n	8031224 <UART_SetConfig+0x34c>
 803104a:	2308      	movs	r3, #8
 803104c:	77fb      	strb	r3, [r7, #31]
 803104e:	e0e9      	b.n	8031224 <UART_SetConfig+0x34c>
 8031050:	2310      	movs	r3, #16
 8031052:	77fb      	strb	r3, [r7, #31]
 8031054:	e0e6      	b.n	8031224 <UART_SetConfig+0x34c>
 8031056:	687b      	ldr	r3, [r7, #4]
 8031058:	681b      	ldr	r3, [r3, #0]
 803105a:	4a56      	ldr	r2, [pc, #344]	; (80311b4 <UART_SetConfig+0x2dc>)
 803105c:	4293      	cmp	r3, r2
 803105e:	d120      	bne.n	80310a2 <UART_SetConfig+0x1ca>
 8031060:	4b51      	ldr	r3, [pc, #324]	; (80311a8 <UART_SetConfig+0x2d0>)
 8031062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8031066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 803106a:	2bc0      	cmp	r3, #192	; 0xc0
 803106c:	d013      	beq.n	8031096 <UART_SetConfig+0x1be>
 803106e:	2bc0      	cmp	r3, #192	; 0xc0
 8031070:	d814      	bhi.n	803109c <UART_SetConfig+0x1c4>
 8031072:	2b80      	cmp	r3, #128	; 0x80
 8031074:	d009      	beq.n	803108a <UART_SetConfig+0x1b2>
 8031076:	2b80      	cmp	r3, #128	; 0x80
 8031078:	d810      	bhi.n	803109c <UART_SetConfig+0x1c4>
 803107a:	2b00      	cmp	r3, #0
 803107c:	d002      	beq.n	8031084 <UART_SetConfig+0x1ac>
 803107e:	2b40      	cmp	r3, #64	; 0x40
 8031080:	d006      	beq.n	8031090 <UART_SetConfig+0x1b8>
 8031082:	e00b      	b.n	803109c <UART_SetConfig+0x1c4>
 8031084:	2300      	movs	r3, #0
 8031086:	77fb      	strb	r3, [r7, #31]
 8031088:	e0cc      	b.n	8031224 <UART_SetConfig+0x34c>
 803108a:	2302      	movs	r3, #2
 803108c:	77fb      	strb	r3, [r7, #31]
 803108e:	e0c9      	b.n	8031224 <UART_SetConfig+0x34c>
 8031090:	2304      	movs	r3, #4
 8031092:	77fb      	strb	r3, [r7, #31]
 8031094:	e0c6      	b.n	8031224 <UART_SetConfig+0x34c>
 8031096:	2308      	movs	r3, #8
 8031098:	77fb      	strb	r3, [r7, #31]
 803109a:	e0c3      	b.n	8031224 <UART_SetConfig+0x34c>
 803109c:	2310      	movs	r3, #16
 803109e:	77fb      	strb	r3, [r7, #31]
 80310a0:	e0c0      	b.n	8031224 <UART_SetConfig+0x34c>
 80310a2:	687b      	ldr	r3, [r7, #4]
 80310a4:	681b      	ldr	r3, [r3, #0]
 80310a6:	4a44      	ldr	r2, [pc, #272]	; (80311b8 <UART_SetConfig+0x2e0>)
 80310a8:	4293      	cmp	r3, r2
 80310aa:	d125      	bne.n	80310f8 <UART_SetConfig+0x220>
 80310ac:	4b3e      	ldr	r3, [pc, #248]	; (80311a8 <UART_SetConfig+0x2d0>)
 80310ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80310b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80310b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80310ba:	d017      	beq.n	80310ec <UART_SetConfig+0x214>
 80310bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80310c0:	d817      	bhi.n	80310f2 <UART_SetConfig+0x21a>
 80310c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80310c6:	d00b      	beq.n	80310e0 <UART_SetConfig+0x208>
 80310c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80310cc:	d811      	bhi.n	80310f2 <UART_SetConfig+0x21a>
 80310ce:	2b00      	cmp	r3, #0
 80310d0:	d003      	beq.n	80310da <UART_SetConfig+0x202>
 80310d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80310d6:	d006      	beq.n	80310e6 <UART_SetConfig+0x20e>
 80310d8:	e00b      	b.n	80310f2 <UART_SetConfig+0x21a>
 80310da:	2300      	movs	r3, #0
 80310dc:	77fb      	strb	r3, [r7, #31]
 80310de:	e0a1      	b.n	8031224 <UART_SetConfig+0x34c>
 80310e0:	2302      	movs	r3, #2
 80310e2:	77fb      	strb	r3, [r7, #31]
 80310e4:	e09e      	b.n	8031224 <UART_SetConfig+0x34c>
 80310e6:	2304      	movs	r3, #4
 80310e8:	77fb      	strb	r3, [r7, #31]
 80310ea:	e09b      	b.n	8031224 <UART_SetConfig+0x34c>
 80310ec:	2308      	movs	r3, #8
 80310ee:	77fb      	strb	r3, [r7, #31]
 80310f0:	e098      	b.n	8031224 <UART_SetConfig+0x34c>
 80310f2:	2310      	movs	r3, #16
 80310f4:	77fb      	strb	r3, [r7, #31]
 80310f6:	e095      	b.n	8031224 <UART_SetConfig+0x34c>
 80310f8:	687b      	ldr	r3, [r7, #4]
 80310fa:	681b      	ldr	r3, [r3, #0]
 80310fc:	4a2f      	ldr	r2, [pc, #188]	; (80311bc <UART_SetConfig+0x2e4>)
 80310fe:	4293      	cmp	r3, r2
 8031100:	d125      	bne.n	803114e <UART_SetConfig+0x276>
 8031102:	4b29      	ldr	r3, [pc, #164]	; (80311a8 <UART_SetConfig+0x2d0>)
 8031104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8031108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 803110c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8031110:	d017      	beq.n	8031142 <UART_SetConfig+0x26a>
 8031112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8031116:	d817      	bhi.n	8031148 <UART_SetConfig+0x270>
 8031118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803111c:	d00b      	beq.n	8031136 <UART_SetConfig+0x25e>
 803111e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031122:	d811      	bhi.n	8031148 <UART_SetConfig+0x270>
 8031124:	2b00      	cmp	r3, #0
 8031126:	d003      	beq.n	8031130 <UART_SetConfig+0x258>
 8031128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803112c:	d006      	beq.n	803113c <UART_SetConfig+0x264>
 803112e:	e00b      	b.n	8031148 <UART_SetConfig+0x270>
 8031130:	2301      	movs	r3, #1
 8031132:	77fb      	strb	r3, [r7, #31]
 8031134:	e076      	b.n	8031224 <UART_SetConfig+0x34c>
 8031136:	2302      	movs	r3, #2
 8031138:	77fb      	strb	r3, [r7, #31]
 803113a:	e073      	b.n	8031224 <UART_SetConfig+0x34c>
 803113c:	2304      	movs	r3, #4
 803113e:	77fb      	strb	r3, [r7, #31]
 8031140:	e070      	b.n	8031224 <UART_SetConfig+0x34c>
 8031142:	2308      	movs	r3, #8
 8031144:	77fb      	strb	r3, [r7, #31]
 8031146:	e06d      	b.n	8031224 <UART_SetConfig+0x34c>
 8031148:	2310      	movs	r3, #16
 803114a:	77fb      	strb	r3, [r7, #31]
 803114c:	e06a      	b.n	8031224 <UART_SetConfig+0x34c>
 803114e:	687b      	ldr	r3, [r7, #4]
 8031150:	681b      	ldr	r3, [r3, #0]
 8031152:	4a1b      	ldr	r2, [pc, #108]	; (80311c0 <UART_SetConfig+0x2e8>)
 8031154:	4293      	cmp	r3, r2
 8031156:	d138      	bne.n	80311ca <UART_SetConfig+0x2f2>
 8031158:	4b13      	ldr	r3, [pc, #76]	; (80311a8 <UART_SetConfig+0x2d0>)
 803115a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 803115e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8031162:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031166:	d017      	beq.n	8031198 <UART_SetConfig+0x2c0>
 8031168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803116c:	d82a      	bhi.n	80311c4 <UART_SetConfig+0x2ec>
 803116e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031172:	d00b      	beq.n	803118c <UART_SetConfig+0x2b4>
 8031174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031178:	d824      	bhi.n	80311c4 <UART_SetConfig+0x2ec>
 803117a:	2b00      	cmp	r3, #0
 803117c:	d003      	beq.n	8031186 <UART_SetConfig+0x2ae>
 803117e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031182:	d006      	beq.n	8031192 <UART_SetConfig+0x2ba>
 8031184:	e01e      	b.n	80311c4 <UART_SetConfig+0x2ec>
 8031186:	2300      	movs	r3, #0
 8031188:	77fb      	strb	r3, [r7, #31]
 803118a:	e04b      	b.n	8031224 <UART_SetConfig+0x34c>
 803118c:	2302      	movs	r3, #2
 803118e:	77fb      	strb	r3, [r7, #31]
 8031190:	e048      	b.n	8031224 <UART_SetConfig+0x34c>
 8031192:	2304      	movs	r3, #4
 8031194:	77fb      	strb	r3, [r7, #31]
 8031196:	e045      	b.n	8031224 <UART_SetConfig+0x34c>
 8031198:	2308      	movs	r3, #8
 803119a:	77fb      	strb	r3, [r7, #31]
 803119c:	e042      	b.n	8031224 <UART_SetConfig+0x34c>
 803119e:	bf00      	nop
 80311a0:	efff69f3 	.word	0xefff69f3
 80311a4:	40011000 	.word	0x40011000
 80311a8:	40023800 	.word	0x40023800
 80311ac:	40004400 	.word	0x40004400
 80311b0:	40004800 	.word	0x40004800
 80311b4:	40004c00 	.word	0x40004c00
 80311b8:	40005000 	.word	0x40005000
 80311bc:	40011400 	.word	0x40011400
 80311c0:	40007800 	.word	0x40007800
 80311c4:	2310      	movs	r3, #16
 80311c6:	77fb      	strb	r3, [r7, #31]
 80311c8:	e02c      	b.n	8031224 <UART_SetConfig+0x34c>
 80311ca:	687b      	ldr	r3, [r7, #4]
 80311cc:	681b      	ldr	r3, [r3, #0]
 80311ce:	4a92      	ldr	r2, [pc, #584]	; (8031418 <UART_SetConfig+0x540>)
 80311d0:	4293      	cmp	r3, r2
 80311d2:	d125      	bne.n	8031220 <UART_SetConfig+0x348>
 80311d4:	4b91      	ldr	r3, [pc, #580]	; (803141c <UART_SetConfig+0x544>)
 80311d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80311da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80311de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80311e2:	d017      	beq.n	8031214 <UART_SetConfig+0x33c>
 80311e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80311e8:	d817      	bhi.n	803121a <UART_SetConfig+0x342>
 80311ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80311ee:	d00b      	beq.n	8031208 <UART_SetConfig+0x330>
 80311f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80311f4:	d811      	bhi.n	803121a <UART_SetConfig+0x342>
 80311f6:	2b00      	cmp	r3, #0
 80311f8:	d003      	beq.n	8031202 <UART_SetConfig+0x32a>
 80311fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80311fe:	d006      	beq.n	803120e <UART_SetConfig+0x336>
 8031200:	e00b      	b.n	803121a <UART_SetConfig+0x342>
 8031202:	2300      	movs	r3, #0
 8031204:	77fb      	strb	r3, [r7, #31]
 8031206:	e00d      	b.n	8031224 <UART_SetConfig+0x34c>
 8031208:	2302      	movs	r3, #2
 803120a:	77fb      	strb	r3, [r7, #31]
 803120c:	e00a      	b.n	8031224 <UART_SetConfig+0x34c>
 803120e:	2304      	movs	r3, #4
 8031210:	77fb      	strb	r3, [r7, #31]
 8031212:	e007      	b.n	8031224 <UART_SetConfig+0x34c>
 8031214:	2308      	movs	r3, #8
 8031216:	77fb      	strb	r3, [r7, #31]
 8031218:	e004      	b.n	8031224 <UART_SetConfig+0x34c>
 803121a:	2310      	movs	r3, #16
 803121c:	77fb      	strb	r3, [r7, #31]
 803121e:	e001      	b.n	8031224 <UART_SetConfig+0x34c>
 8031220:	2310      	movs	r3, #16
 8031222:	77fb      	strb	r3, [r7, #31]
 8031224:	687b      	ldr	r3, [r7, #4]
 8031226:	69db      	ldr	r3, [r3, #28]
 8031228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803122c:	d17d      	bne.n	803132a <UART_SetConfig+0x452>
 803122e:	7ffb      	ldrb	r3, [r7, #31]
 8031230:	2b08      	cmp	r3, #8
 8031232:	d85a      	bhi.n	80312ea <UART_SetConfig+0x412>
 8031234:	a201      	add	r2, pc, #4	; (adr r2, 803123c <UART_SetConfig+0x364>)
 8031236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803123a:	bf00      	nop
 803123c:	08031261 	.word	0x08031261
 8031240:	0803127f 	.word	0x0803127f
 8031244:	0803129d 	.word	0x0803129d
 8031248:	080312eb 	.word	0x080312eb
 803124c:	080312b5 	.word	0x080312b5
 8031250:	080312eb 	.word	0x080312eb
 8031254:	080312eb 	.word	0x080312eb
 8031258:	080312eb 	.word	0x080312eb
 803125c:	080312d3 	.word	0x080312d3
 8031260:	f7fc fa1a 	bl	802d698 <HAL_RCC_GetPCLK1Freq>
 8031264:	4603      	mov	r3, r0
 8031266:	005a      	lsls	r2, r3, #1
 8031268:	687b      	ldr	r3, [r7, #4]
 803126a:	685b      	ldr	r3, [r3, #4]
 803126c:	085b      	lsrs	r3, r3, #1
 803126e:	441a      	add	r2, r3
 8031270:	687b      	ldr	r3, [r7, #4]
 8031272:	685b      	ldr	r3, [r3, #4]
 8031274:	fbb2 f3f3 	udiv	r3, r2, r3
 8031278:	b29b      	uxth	r3, r3
 803127a:	61bb      	str	r3, [r7, #24]
 803127c:	e038      	b.n	80312f0 <UART_SetConfig+0x418>
 803127e:	f7fc fa1f 	bl	802d6c0 <HAL_RCC_GetPCLK2Freq>
 8031282:	4603      	mov	r3, r0
 8031284:	005a      	lsls	r2, r3, #1
 8031286:	687b      	ldr	r3, [r7, #4]
 8031288:	685b      	ldr	r3, [r3, #4]
 803128a:	085b      	lsrs	r3, r3, #1
 803128c:	441a      	add	r2, r3
 803128e:	687b      	ldr	r3, [r7, #4]
 8031290:	685b      	ldr	r3, [r3, #4]
 8031292:	fbb2 f3f3 	udiv	r3, r2, r3
 8031296:	b29b      	uxth	r3, r3
 8031298:	61bb      	str	r3, [r7, #24]
 803129a:	e029      	b.n	80312f0 <UART_SetConfig+0x418>
 803129c:	687b      	ldr	r3, [r7, #4]
 803129e:	685b      	ldr	r3, [r3, #4]
 80312a0:	085a      	lsrs	r2, r3, #1
 80312a2:	4b5f      	ldr	r3, [pc, #380]	; (8031420 <UART_SetConfig+0x548>)
 80312a4:	4413      	add	r3, r2
 80312a6:	687a      	ldr	r2, [r7, #4]
 80312a8:	6852      	ldr	r2, [r2, #4]
 80312aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80312ae:	b29b      	uxth	r3, r3
 80312b0:	61bb      	str	r3, [r7, #24]
 80312b2:	e01d      	b.n	80312f0 <UART_SetConfig+0x418>
 80312b4:	f7fc f91e 	bl	802d4f4 <HAL_RCC_GetSysClockFreq>
 80312b8:	4603      	mov	r3, r0
 80312ba:	005a      	lsls	r2, r3, #1
 80312bc:	687b      	ldr	r3, [r7, #4]
 80312be:	685b      	ldr	r3, [r3, #4]
 80312c0:	085b      	lsrs	r3, r3, #1
 80312c2:	441a      	add	r2, r3
 80312c4:	687b      	ldr	r3, [r7, #4]
 80312c6:	685b      	ldr	r3, [r3, #4]
 80312c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80312cc:	b29b      	uxth	r3, r3
 80312ce:	61bb      	str	r3, [r7, #24]
 80312d0:	e00e      	b.n	80312f0 <UART_SetConfig+0x418>
 80312d2:	687b      	ldr	r3, [r7, #4]
 80312d4:	685b      	ldr	r3, [r3, #4]
 80312d6:	085b      	lsrs	r3, r3, #1
 80312d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80312dc:	687b      	ldr	r3, [r7, #4]
 80312de:	685b      	ldr	r3, [r3, #4]
 80312e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80312e4:	b29b      	uxth	r3, r3
 80312e6:	61bb      	str	r3, [r7, #24]
 80312e8:	e002      	b.n	80312f0 <UART_SetConfig+0x418>
 80312ea:	2301      	movs	r3, #1
 80312ec:	75fb      	strb	r3, [r7, #23]
 80312ee:	bf00      	nop
 80312f0:	69bb      	ldr	r3, [r7, #24]
 80312f2:	2b0f      	cmp	r3, #15
 80312f4:	d916      	bls.n	8031324 <UART_SetConfig+0x44c>
 80312f6:	69bb      	ldr	r3, [r7, #24]
 80312f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80312fc:	d212      	bcs.n	8031324 <UART_SetConfig+0x44c>
 80312fe:	69bb      	ldr	r3, [r7, #24]
 8031300:	b29b      	uxth	r3, r3
 8031302:	f023 030f 	bic.w	r3, r3, #15
 8031306:	81fb      	strh	r3, [r7, #14]
 8031308:	69bb      	ldr	r3, [r7, #24]
 803130a:	085b      	lsrs	r3, r3, #1
 803130c:	b29b      	uxth	r3, r3
 803130e:	f003 0307 	and.w	r3, r3, #7
 8031312:	b29a      	uxth	r2, r3
 8031314:	89fb      	ldrh	r3, [r7, #14]
 8031316:	4313      	orrs	r3, r2
 8031318:	81fb      	strh	r3, [r7, #14]
 803131a:	687b      	ldr	r3, [r7, #4]
 803131c:	681b      	ldr	r3, [r3, #0]
 803131e:	89fa      	ldrh	r2, [r7, #14]
 8031320:	60da      	str	r2, [r3, #12]
 8031322:	e06e      	b.n	8031402 <UART_SetConfig+0x52a>
 8031324:	2301      	movs	r3, #1
 8031326:	75fb      	strb	r3, [r7, #23]
 8031328:	e06b      	b.n	8031402 <UART_SetConfig+0x52a>
 803132a:	7ffb      	ldrb	r3, [r7, #31]
 803132c:	2b08      	cmp	r3, #8
 803132e:	d857      	bhi.n	80313e0 <UART_SetConfig+0x508>
 8031330:	a201      	add	r2, pc, #4	; (adr r2, 8031338 <UART_SetConfig+0x460>)
 8031332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031336:	bf00      	nop
 8031338:	0803135d 	.word	0x0803135d
 803133c:	08031379 	.word	0x08031379
 8031340:	08031395 	.word	0x08031395
 8031344:	080313e1 	.word	0x080313e1
 8031348:	080313ad 	.word	0x080313ad
 803134c:	080313e1 	.word	0x080313e1
 8031350:	080313e1 	.word	0x080313e1
 8031354:	080313e1 	.word	0x080313e1
 8031358:	080313c9 	.word	0x080313c9
 803135c:	f7fc f99c 	bl	802d698 <HAL_RCC_GetPCLK1Freq>
 8031360:	4602      	mov	r2, r0
 8031362:	687b      	ldr	r3, [r7, #4]
 8031364:	685b      	ldr	r3, [r3, #4]
 8031366:	085b      	lsrs	r3, r3, #1
 8031368:	441a      	add	r2, r3
 803136a:	687b      	ldr	r3, [r7, #4]
 803136c:	685b      	ldr	r3, [r3, #4]
 803136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8031372:	b29b      	uxth	r3, r3
 8031374:	61bb      	str	r3, [r7, #24]
 8031376:	e036      	b.n	80313e6 <UART_SetConfig+0x50e>
 8031378:	f7fc f9a2 	bl	802d6c0 <HAL_RCC_GetPCLK2Freq>
 803137c:	4602      	mov	r2, r0
 803137e:	687b      	ldr	r3, [r7, #4]
 8031380:	685b      	ldr	r3, [r3, #4]
 8031382:	085b      	lsrs	r3, r3, #1
 8031384:	441a      	add	r2, r3
 8031386:	687b      	ldr	r3, [r7, #4]
 8031388:	685b      	ldr	r3, [r3, #4]
 803138a:	fbb2 f3f3 	udiv	r3, r2, r3
 803138e:	b29b      	uxth	r3, r3
 8031390:	61bb      	str	r3, [r7, #24]
 8031392:	e028      	b.n	80313e6 <UART_SetConfig+0x50e>
 8031394:	687b      	ldr	r3, [r7, #4]
 8031396:	685b      	ldr	r3, [r3, #4]
 8031398:	085a      	lsrs	r2, r3, #1
 803139a:	4b22      	ldr	r3, [pc, #136]	; (8031424 <UART_SetConfig+0x54c>)
 803139c:	4413      	add	r3, r2
 803139e:	687a      	ldr	r2, [r7, #4]
 80313a0:	6852      	ldr	r2, [r2, #4]
 80313a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80313a6:	b29b      	uxth	r3, r3
 80313a8:	61bb      	str	r3, [r7, #24]
 80313aa:	e01c      	b.n	80313e6 <UART_SetConfig+0x50e>
 80313ac:	f7fc f8a2 	bl	802d4f4 <HAL_RCC_GetSysClockFreq>
 80313b0:	4602      	mov	r2, r0
 80313b2:	687b      	ldr	r3, [r7, #4]
 80313b4:	685b      	ldr	r3, [r3, #4]
 80313b6:	085b      	lsrs	r3, r3, #1
 80313b8:	441a      	add	r2, r3
 80313ba:	687b      	ldr	r3, [r7, #4]
 80313bc:	685b      	ldr	r3, [r3, #4]
 80313be:	fbb2 f3f3 	udiv	r3, r2, r3
 80313c2:	b29b      	uxth	r3, r3
 80313c4:	61bb      	str	r3, [r7, #24]
 80313c6:	e00e      	b.n	80313e6 <UART_SetConfig+0x50e>
 80313c8:	687b      	ldr	r3, [r7, #4]
 80313ca:	685b      	ldr	r3, [r3, #4]
 80313cc:	085b      	lsrs	r3, r3, #1
 80313ce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80313d2:	687b      	ldr	r3, [r7, #4]
 80313d4:	685b      	ldr	r3, [r3, #4]
 80313d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80313da:	b29b      	uxth	r3, r3
 80313dc:	61bb      	str	r3, [r7, #24]
 80313de:	e002      	b.n	80313e6 <UART_SetConfig+0x50e>
 80313e0:	2301      	movs	r3, #1
 80313e2:	75fb      	strb	r3, [r7, #23]
 80313e4:	bf00      	nop
 80313e6:	69bb      	ldr	r3, [r7, #24]
 80313e8:	2b0f      	cmp	r3, #15
 80313ea:	d908      	bls.n	80313fe <UART_SetConfig+0x526>
 80313ec:	69bb      	ldr	r3, [r7, #24]
 80313ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80313f2:	d204      	bcs.n	80313fe <UART_SetConfig+0x526>
 80313f4:	687b      	ldr	r3, [r7, #4]
 80313f6:	681b      	ldr	r3, [r3, #0]
 80313f8:	69ba      	ldr	r2, [r7, #24]
 80313fa:	60da      	str	r2, [r3, #12]
 80313fc:	e001      	b.n	8031402 <UART_SetConfig+0x52a>
 80313fe:	2301      	movs	r3, #1
 8031400:	75fb      	strb	r3, [r7, #23]
 8031402:	687b      	ldr	r3, [r7, #4]
 8031404:	2200      	movs	r2, #0
 8031406:	661a      	str	r2, [r3, #96]	; 0x60
 8031408:	687b      	ldr	r3, [r7, #4]
 803140a:	2200      	movs	r2, #0
 803140c:	665a      	str	r2, [r3, #100]	; 0x64
 803140e:	7dfb      	ldrb	r3, [r7, #23]
 8031410:	4618      	mov	r0, r3
 8031412:	3720      	adds	r7, #32
 8031414:	46bd      	mov	sp, r7
 8031416:	bd80      	pop	{r7, pc}
 8031418:	40007c00 	.word	0x40007c00
 803141c:	40023800 	.word	0x40023800
 8031420:	01e84800 	.word	0x01e84800
 8031424:	00f42400 	.word	0x00f42400

08031428 <UART_AdvFeatureConfig>:
 8031428:	b480      	push	{r7}
 803142a:	b083      	sub	sp, #12
 803142c:	af00      	add	r7, sp, #0
 803142e:	6078      	str	r0, [r7, #4]
 8031430:	687b      	ldr	r3, [r7, #4]
 8031432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031434:	f003 0301 	and.w	r3, r3, #1
 8031438:	2b00      	cmp	r3, #0
 803143a:	d00a      	beq.n	8031452 <UART_AdvFeatureConfig+0x2a>
 803143c:	687b      	ldr	r3, [r7, #4]
 803143e:	681b      	ldr	r3, [r3, #0]
 8031440:	685b      	ldr	r3, [r3, #4]
 8031442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8031446:	687b      	ldr	r3, [r7, #4]
 8031448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803144a:	687b      	ldr	r3, [r7, #4]
 803144c:	681b      	ldr	r3, [r3, #0]
 803144e:	430a      	orrs	r2, r1
 8031450:	605a      	str	r2, [r3, #4]
 8031452:	687b      	ldr	r3, [r7, #4]
 8031454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031456:	f003 0302 	and.w	r3, r3, #2
 803145a:	2b00      	cmp	r3, #0
 803145c:	d00a      	beq.n	8031474 <UART_AdvFeatureConfig+0x4c>
 803145e:	687b      	ldr	r3, [r7, #4]
 8031460:	681b      	ldr	r3, [r3, #0]
 8031462:	685b      	ldr	r3, [r3, #4]
 8031464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8031468:	687b      	ldr	r3, [r7, #4]
 803146a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803146c:	687b      	ldr	r3, [r7, #4]
 803146e:	681b      	ldr	r3, [r3, #0]
 8031470:	430a      	orrs	r2, r1
 8031472:	605a      	str	r2, [r3, #4]
 8031474:	687b      	ldr	r3, [r7, #4]
 8031476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031478:	f003 0304 	and.w	r3, r3, #4
 803147c:	2b00      	cmp	r3, #0
 803147e:	d00a      	beq.n	8031496 <UART_AdvFeatureConfig+0x6e>
 8031480:	687b      	ldr	r3, [r7, #4]
 8031482:	681b      	ldr	r3, [r3, #0]
 8031484:	685b      	ldr	r3, [r3, #4]
 8031486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 803148a:	687b      	ldr	r3, [r7, #4]
 803148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803148e:	687b      	ldr	r3, [r7, #4]
 8031490:	681b      	ldr	r3, [r3, #0]
 8031492:	430a      	orrs	r2, r1
 8031494:	605a      	str	r2, [r3, #4]
 8031496:	687b      	ldr	r3, [r7, #4]
 8031498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803149a:	f003 0308 	and.w	r3, r3, #8
 803149e:	2b00      	cmp	r3, #0
 80314a0:	d00a      	beq.n	80314b8 <UART_AdvFeatureConfig+0x90>
 80314a2:	687b      	ldr	r3, [r7, #4]
 80314a4:	681b      	ldr	r3, [r3, #0]
 80314a6:	685b      	ldr	r3, [r3, #4]
 80314a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80314ac:	687b      	ldr	r3, [r7, #4]
 80314ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80314b0:	687b      	ldr	r3, [r7, #4]
 80314b2:	681b      	ldr	r3, [r3, #0]
 80314b4:	430a      	orrs	r2, r1
 80314b6:	605a      	str	r2, [r3, #4]
 80314b8:	687b      	ldr	r3, [r7, #4]
 80314ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80314bc:	f003 0310 	and.w	r3, r3, #16
 80314c0:	2b00      	cmp	r3, #0
 80314c2:	d00a      	beq.n	80314da <UART_AdvFeatureConfig+0xb2>
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	681b      	ldr	r3, [r3, #0]
 80314c8:	689b      	ldr	r3, [r3, #8]
 80314ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80314ce:	687b      	ldr	r3, [r7, #4]
 80314d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80314d2:	687b      	ldr	r3, [r7, #4]
 80314d4:	681b      	ldr	r3, [r3, #0]
 80314d6:	430a      	orrs	r2, r1
 80314d8:	609a      	str	r2, [r3, #8]
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80314de:	f003 0320 	and.w	r3, r3, #32
 80314e2:	2b00      	cmp	r3, #0
 80314e4:	d00a      	beq.n	80314fc <UART_AdvFeatureConfig+0xd4>
 80314e6:	687b      	ldr	r3, [r7, #4]
 80314e8:	681b      	ldr	r3, [r3, #0]
 80314ea:	689b      	ldr	r3, [r3, #8]
 80314ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80314f0:	687b      	ldr	r3, [r7, #4]
 80314f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80314f4:	687b      	ldr	r3, [r7, #4]
 80314f6:	681b      	ldr	r3, [r3, #0]
 80314f8:	430a      	orrs	r2, r1
 80314fa:	609a      	str	r2, [r3, #8]
 80314fc:	687b      	ldr	r3, [r7, #4]
 80314fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8031504:	2b00      	cmp	r3, #0
 8031506:	d01a      	beq.n	803153e <UART_AdvFeatureConfig+0x116>
 8031508:	687b      	ldr	r3, [r7, #4]
 803150a:	681b      	ldr	r3, [r3, #0]
 803150c:	685b      	ldr	r3, [r3, #4]
 803150e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8031512:	687b      	ldr	r3, [r7, #4]
 8031514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8031516:	687b      	ldr	r3, [r7, #4]
 8031518:	681b      	ldr	r3, [r3, #0]
 803151a:	430a      	orrs	r2, r1
 803151c:	605a      	str	r2, [r3, #4]
 803151e:	687b      	ldr	r3, [r7, #4]
 8031520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031526:	d10a      	bne.n	803153e <UART_AdvFeatureConfig+0x116>
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	681b      	ldr	r3, [r3, #0]
 803152c:	685b      	ldr	r3, [r3, #4]
 803152e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8031532:	687b      	ldr	r3, [r7, #4]
 8031534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8031536:	687b      	ldr	r3, [r7, #4]
 8031538:	681b      	ldr	r3, [r3, #0]
 803153a:	430a      	orrs	r2, r1
 803153c:	605a      	str	r2, [r3, #4]
 803153e:	687b      	ldr	r3, [r7, #4]
 8031540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8031546:	2b00      	cmp	r3, #0
 8031548:	d00a      	beq.n	8031560 <UART_AdvFeatureConfig+0x138>
 803154a:	687b      	ldr	r3, [r7, #4]
 803154c:	681b      	ldr	r3, [r3, #0]
 803154e:	685b      	ldr	r3, [r3, #4]
 8031550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8031554:	687b      	ldr	r3, [r7, #4]
 8031556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8031558:	687b      	ldr	r3, [r7, #4]
 803155a:	681b      	ldr	r3, [r3, #0]
 803155c:	430a      	orrs	r2, r1
 803155e:	605a      	str	r2, [r3, #4]
 8031560:	bf00      	nop
 8031562:	370c      	adds	r7, #12
 8031564:	46bd      	mov	sp, r7
 8031566:	f85d 7b04 	ldr.w	r7, [sp], #4
 803156a:	4770      	bx	lr

0803156c <UART_CheckIdleState>:
 803156c:	b580      	push	{r7, lr}
 803156e:	b086      	sub	sp, #24
 8031570:	af02      	add	r7, sp, #8
 8031572:	6078      	str	r0, [r7, #4]
 8031574:	687b      	ldr	r3, [r7, #4]
 8031576:	2200      	movs	r2, #0
 8031578:	67da      	str	r2, [r3, #124]	; 0x7c
 803157a:	f7f7 fca3 	bl	8028ec4 <HAL_GetTick>
 803157e:	60f8      	str	r0, [r7, #12]
 8031580:	687b      	ldr	r3, [r7, #4]
 8031582:	681b      	ldr	r3, [r3, #0]
 8031584:	681b      	ldr	r3, [r3, #0]
 8031586:	f003 0308 	and.w	r3, r3, #8
 803158a:	2b08      	cmp	r3, #8
 803158c:	d10e      	bne.n	80315ac <UART_CheckIdleState+0x40>
 803158e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8031592:	9300      	str	r3, [sp, #0]
 8031594:	68fb      	ldr	r3, [r7, #12]
 8031596:	2200      	movs	r2, #0
 8031598:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 803159c:	6878      	ldr	r0, [r7, #4]
 803159e:	f000 f814 	bl	80315ca <UART_WaitOnFlagUntilTimeout>
 80315a2:	4603      	mov	r3, r0
 80315a4:	2b00      	cmp	r3, #0
 80315a6:	d001      	beq.n	80315ac <UART_CheckIdleState+0x40>
 80315a8:	2303      	movs	r3, #3
 80315aa:	e00a      	b.n	80315c2 <UART_CheckIdleState+0x56>
 80315ac:	687b      	ldr	r3, [r7, #4]
 80315ae:	2220      	movs	r2, #32
 80315b0:	675a      	str	r2, [r3, #116]	; 0x74
 80315b2:	687b      	ldr	r3, [r7, #4]
 80315b4:	2220      	movs	r2, #32
 80315b6:	679a      	str	r2, [r3, #120]	; 0x78
 80315b8:	687b      	ldr	r3, [r7, #4]
 80315ba:	2200      	movs	r2, #0
 80315bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80315c0:	2300      	movs	r3, #0
 80315c2:	4618      	mov	r0, r3
 80315c4:	3710      	adds	r7, #16
 80315c6:	46bd      	mov	sp, r7
 80315c8:	bd80      	pop	{r7, pc}

080315ca <UART_WaitOnFlagUntilTimeout>:
 80315ca:	b580      	push	{r7, lr}
 80315cc:	b084      	sub	sp, #16
 80315ce:	af00      	add	r7, sp, #0
 80315d0:	60f8      	str	r0, [r7, #12]
 80315d2:	60b9      	str	r1, [r7, #8]
 80315d4:	603b      	str	r3, [r7, #0]
 80315d6:	4613      	mov	r3, r2
 80315d8:	71fb      	strb	r3, [r7, #7]
 80315da:	e02a      	b.n	8031632 <UART_WaitOnFlagUntilTimeout+0x68>
 80315dc:	69bb      	ldr	r3, [r7, #24]
 80315de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80315e2:	d026      	beq.n	8031632 <UART_WaitOnFlagUntilTimeout+0x68>
 80315e4:	f7f7 fc6e 	bl	8028ec4 <HAL_GetTick>
 80315e8:	4602      	mov	r2, r0
 80315ea:	683b      	ldr	r3, [r7, #0]
 80315ec:	1ad3      	subs	r3, r2, r3
 80315ee:	69ba      	ldr	r2, [r7, #24]
 80315f0:	429a      	cmp	r2, r3
 80315f2:	d302      	bcc.n	80315fa <UART_WaitOnFlagUntilTimeout+0x30>
 80315f4:	69bb      	ldr	r3, [r7, #24]
 80315f6:	2b00      	cmp	r3, #0
 80315f8:	d11b      	bne.n	8031632 <UART_WaitOnFlagUntilTimeout+0x68>
 80315fa:	68fb      	ldr	r3, [r7, #12]
 80315fc:	681b      	ldr	r3, [r3, #0]
 80315fe:	681a      	ldr	r2, [r3, #0]
 8031600:	68fb      	ldr	r3, [r7, #12]
 8031602:	681b      	ldr	r3, [r3, #0]
 8031604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8031608:	601a      	str	r2, [r3, #0]
 803160a:	68fb      	ldr	r3, [r7, #12]
 803160c:	681b      	ldr	r3, [r3, #0]
 803160e:	689a      	ldr	r2, [r3, #8]
 8031610:	68fb      	ldr	r3, [r7, #12]
 8031612:	681b      	ldr	r3, [r3, #0]
 8031614:	f022 0201 	bic.w	r2, r2, #1
 8031618:	609a      	str	r2, [r3, #8]
 803161a:	68fb      	ldr	r3, [r7, #12]
 803161c:	2220      	movs	r2, #32
 803161e:	675a      	str	r2, [r3, #116]	; 0x74
 8031620:	68fb      	ldr	r3, [r7, #12]
 8031622:	2220      	movs	r2, #32
 8031624:	679a      	str	r2, [r3, #120]	; 0x78
 8031626:	68fb      	ldr	r3, [r7, #12]
 8031628:	2200      	movs	r2, #0
 803162a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 803162e:	2303      	movs	r3, #3
 8031630:	e00f      	b.n	8031652 <UART_WaitOnFlagUntilTimeout+0x88>
 8031632:	68fb      	ldr	r3, [r7, #12]
 8031634:	681b      	ldr	r3, [r3, #0]
 8031636:	69da      	ldr	r2, [r3, #28]
 8031638:	68bb      	ldr	r3, [r7, #8]
 803163a:	4013      	ands	r3, r2
 803163c:	68ba      	ldr	r2, [r7, #8]
 803163e:	429a      	cmp	r2, r3
 8031640:	bf0c      	ite	eq
 8031642:	2301      	moveq	r3, #1
 8031644:	2300      	movne	r3, #0
 8031646:	b2db      	uxtb	r3, r3
 8031648:	461a      	mov	r2, r3
 803164a:	79fb      	ldrb	r3, [r7, #7]
 803164c:	429a      	cmp	r2, r3
 803164e:	d0c5      	beq.n	80315dc <UART_WaitOnFlagUntilTimeout+0x12>
 8031650:	2300      	movs	r3, #0
 8031652:	4618      	mov	r0, r3
 8031654:	3710      	adds	r7, #16
 8031656:	46bd      	mov	sp, r7
 8031658:	bd80      	pop	{r7, pc}

0803165a <SDMMC_ReadFIFO>:
 803165a:	b480      	push	{r7}
 803165c:	b083      	sub	sp, #12
 803165e:	af00      	add	r7, sp, #0
 8031660:	6078      	str	r0, [r7, #4]
 8031662:	687b      	ldr	r3, [r7, #4]
 8031664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8031668:	4618      	mov	r0, r3
 803166a:	370c      	adds	r7, #12
 803166c:	46bd      	mov	sp, r7
 803166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031672:	4770      	bx	lr

08031674 <SDMMC_WriteFIFO>:
 8031674:	b480      	push	{r7}
 8031676:	b083      	sub	sp, #12
 8031678:	af00      	add	r7, sp, #0
 803167a:	6078      	str	r0, [r7, #4]
 803167c:	6039      	str	r1, [r7, #0]
 803167e:	683b      	ldr	r3, [r7, #0]
 8031680:	681a      	ldr	r2, [r3, #0]
 8031682:	687b      	ldr	r3, [r7, #4]
 8031684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8031688:	2300      	movs	r3, #0
 803168a:	4618      	mov	r0, r3
 803168c:	370c      	adds	r7, #12
 803168e:	46bd      	mov	sp, r7
 8031690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031694:	4770      	bx	lr
	...

08031698 <SDMMC_SendCommand>:
 8031698:	b480      	push	{r7}
 803169a:	b085      	sub	sp, #20
 803169c:	af00      	add	r7, sp, #0
 803169e:	6078      	str	r0, [r7, #4]
 80316a0:	6039      	str	r1, [r7, #0]
 80316a2:	2300      	movs	r3, #0
 80316a4:	60fb      	str	r3, [r7, #12]
 80316a6:	683b      	ldr	r3, [r7, #0]
 80316a8:	681a      	ldr	r2, [r3, #0]
 80316aa:	687b      	ldr	r3, [r7, #4]
 80316ac:	609a      	str	r2, [r3, #8]
 80316ae:	683b      	ldr	r3, [r7, #0]
 80316b0:	685a      	ldr	r2, [r3, #4]
 80316b2:	683b      	ldr	r3, [r7, #0]
 80316b4:	689b      	ldr	r3, [r3, #8]
 80316b6:	431a      	orrs	r2, r3
 80316b8:	683b      	ldr	r3, [r7, #0]
 80316ba:	68db      	ldr	r3, [r3, #12]
 80316bc:	431a      	orrs	r2, r3
 80316be:	683b      	ldr	r3, [r7, #0]
 80316c0:	691b      	ldr	r3, [r3, #16]
 80316c2:	4313      	orrs	r3, r2
 80316c4:	68fa      	ldr	r2, [r7, #12]
 80316c6:	4313      	orrs	r3, r2
 80316c8:	60fb      	str	r3, [r7, #12]
 80316ca:	687b      	ldr	r3, [r7, #4]
 80316cc:	68da      	ldr	r2, [r3, #12]
 80316ce:	4b06      	ldr	r3, [pc, #24]	; (80316e8 <SDMMC_SendCommand+0x50>)
 80316d0:	4013      	ands	r3, r2
 80316d2:	68fa      	ldr	r2, [r7, #12]
 80316d4:	431a      	orrs	r2, r3
 80316d6:	687b      	ldr	r3, [r7, #4]
 80316d8:	60da      	str	r2, [r3, #12]
 80316da:	2300      	movs	r3, #0
 80316dc:	4618      	mov	r0, r3
 80316de:	3714      	adds	r7, #20
 80316e0:	46bd      	mov	sp, r7
 80316e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80316e6:	4770      	bx	lr
 80316e8:	fffff000 	.word	0xfffff000

080316ec <SDMMC_GetCommandResponse>:
 80316ec:	b480      	push	{r7}
 80316ee:	b083      	sub	sp, #12
 80316f0:	af00      	add	r7, sp, #0
 80316f2:	6078      	str	r0, [r7, #4]
 80316f4:	687b      	ldr	r3, [r7, #4]
 80316f6:	691b      	ldr	r3, [r3, #16]
 80316f8:	b2db      	uxtb	r3, r3
 80316fa:	4618      	mov	r0, r3
 80316fc:	370c      	adds	r7, #12
 80316fe:	46bd      	mov	sp, r7
 8031700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031704:	4770      	bx	lr

08031706 <SDMMC_GetResponse>:
 8031706:	b480      	push	{r7}
 8031708:	b085      	sub	sp, #20
 803170a:	af00      	add	r7, sp, #0
 803170c:	6078      	str	r0, [r7, #4]
 803170e:	6039      	str	r1, [r7, #0]
 8031710:	2300      	movs	r3, #0
 8031712:	60fb      	str	r3, [r7, #12]
 8031714:	687b      	ldr	r3, [r7, #4]
 8031716:	3314      	adds	r3, #20
 8031718:	461a      	mov	r2, r3
 803171a:	683b      	ldr	r3, [r7, #0]
 803171c:	4413      	add	r3, r2
 803171e:	60fb      	str	r3, [r7, #12]
 8031720:	68fb      	ldr	r3, [r7, #12]
 8031722:	681b      	ldr	r3, [r3, #0]
 8031724:	4618      	mov	r0, r3
 8031726:	3714      	adds	r7, #20
 8031728:	46bd      	mov	sp, r7
 803172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803172e:	4770      	bx	lr

08031730 <SDMMC_CmdStopTransfer>:
 8031730:	b580      	push	{r7, lr}
 8031732:	b088      	sub	sp, #32
 8031734:	af00      	add	r7, sp, #0
 8031736:	6078      	str	r0, [r7, #4]
 8031738:	2300      	movs	r3, #0
 803173a:	61fb      	str	r3, [r7, #28]
 803173c:	2300      	movs	r3, #0
 803173e:	60bb      	str	r3, [r7, #8]
 8031740:	230c      	movs	r3, #12
 8031742:	60fb      	str	r3, [r7, #12]
 8031744:	2340      	movs	r3, #64	; 0x40
 8031746:	613b      	str	r3, [r7, #16]
 8031748:	2300      	movs	r3, #0
 803174a:	617b      	str	r3, [r7, #20]
 803174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8031750:	61bb      	str	r3, [r7, #24]
 8031752:	f107 0308 	add.w	r3, r7, #8
 8031756:	4619      	mov	r1, r3
 8031758:	6878      	ldr	r0, [r7, #4]
 803175a:	f7ff ff9d 	bl	8031698 <SDMMC_SendCommand>
 803175e:	4a05      	ldr	r2, [pc, #20]	; (8031774 <SDMMC_CmdStopTransfer+0x44>)
 8031760:	210c      	movs	r1, #12
 8031762:	6878      	ldr	r0, [r7, #4]
 8031764:	f000 f82c 	bl	80317c0 <SDMMC_GetCmdResp1>
 8031768:	61f8      	str	r0, [r7, #28]
 803176a:	69fb      	ldr	r3, [r7, #28]
 803176c:	4618      	mov	r0, r3
 803176e:	3720      	adds	r7, #32
 8031770:	46bd      	mov	sp, r7
 8031772:	bd80      	pop	{r7, pc}
 8031774:	05f5e100 	.word	0x05f5e100

08031778 <SDMMC_CmdSendStatus>:
 8031778:	b580      	push	{r7, lr}
 803177a:	b088      	sub	sp, #32
 803177c:	af00      	add	r7, sp, #0
 803177e:	6078      	str	r0, [r7, #4]
 8031780:	6039      	str	r1, [r7, #0]
 8031782:	2300      	movs	r3, #0
 8031784:	61fb      	str	r3, [r7, #28]
 8031786:	683b      	ldr	r3, [r7, #0]
 8031788:	60bb      	str	r3, [r7, #8]
 803178a:	230d      	movs	r3, #13
 803178c:	60fb      	str	r3, [r7, #12]
 803178e:	2340      	movs	r3, #64	; 0x40
 8031790:	613b      	str	r3, [r7, #16]
 8031792:	2300      	movs	r3, #0
 8031794:	617b      	str	r3, [r7, #20]
 8031796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803179a:	61bb      	str	r3, [r7, #24]
 803179c:	f107 0308 	add.w	r3, r7, #8
 80317a0:	4619      	mov	r1, r3
 80317a2:	6878      	ldr	r0, [r7, #4]
 80317a4:	f7ff ff78 	bl	8031698 <SDMMC_SendCommand>
 80317a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80317ac:	210d      	movs	r1, #13
 80317ae:	6878      	ldr	r0, [r7, #4]
 80317b0:	f000 f806 	bl	80317c0 <SDMMC_GetCmdResp1>
 80317b4:	61f8      	str	r0, [r7, #28]
 80317b6:	69fb      	ldr	r3, [r7, #28]
 80317b8:	4618      	mov	r0, r3
 80317ba:	3720      	adds	r7, #32
 80317bc:	46bd      	mov	sp, r7
 80317be:	bd80      	pop	{r7, pc}

080317c0 <SDMMC_GetCmdResp1>:
 80317c0:	b590      	push	{r4, r7, lr}
 80317c2:	b087      	sub	sp, #28
 80317c4:	af00      	add	r7, sp, #0
 80317c6:	60f8      	str	r0, [r7, #12]
 80317c8:	460b      	mov	r3, r1
 80317ca:	607a      	str	r2, [r7, #4]
 80317cc:	72fb      	strb	r3, [r7, #11]
 80317ce:	4b6c      	ldr	r3, [pc, #432]	; (8031980 <SDMMC_GetCmdResp1+0x1c0>)
 80317d0:	681b      	ldr	r3, [r3, #0]
 80317d2:	4a6c      	ldr	r2, [pc, #432]	; (8031984 <SDMMC_GetCmdResp1+0x1c4>)
 80317d4:	fba2 2303 	umull	r2, r3, r2, r3
 80317d8:	0a5b      	lsrs	r3, r3, #9
 80317da:	687a      	ldr	r2, [r7, #4]
 80317dc:	fb02 f403 	mul.w	r4, r2, r3
 80317e0:	4623      	mov	r3, r4
 80317e2:	1e5c      	subs	r4, r3, #1
 80317e4:	2b00      	cmp	r3, #0
 80317e6:	d102      	bne.n	80317ee <SDMMC_GetCmdResp1+0x2e>
 80317e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80317ec:	e0c3      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80317ee:	68fb      	ldr	r3, [r7, #12]
 80317f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80317f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80317f6:	2b00      	cmp	r3, #0
 80317f8:	d0f2      	beq.n	80317e0 <SDMMC_GetCmdResp1+0x20>
 80317fa:	68fb      	ldr	r3, [r7, #12]
 80317fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80317fe:	f003 0304 	and.w	r3, r3, #4
 8031802:	2b00      	cmp	r3, #0
 8031804:	d004      	beq.n	8031810 <SDMMC_GetCmdResp1+0x50>
 8031806:	68fb      	ldr	r3, [r7, #12]
 8031808:	2204      	movs	r2, #4
 803180a:	639a      	str	r2, [r3, #56]	; 0x38
 803180c:	2304      	movs	r3, #4
 803180e:	e0b2      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031810:	68fb      	ldr	r3, [r7, #12]
 8031812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031814:	f003 0301 	and.w	r3, r3, #1
 8031818:	2b00      	cmp	r3, #0
 803181a:	d004      	beq.n	8031826 <SDMMC_GetCmdResp1+0x66>
 803181c:	68fb      	ldr	r3, [r7, #12]
 803181e:	2201      	movs	r2, #1
 8031820:	639a      	str	r2, [r3, #56]	; 0x38
 8031822:	2301      	movs	r3, #1
 8031824:	e0a7      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031826:	68f8      	ldr	r0, [r7, #12]
 8031828:	f7ff ff60 	bl	80316ec <SDMMC_GetCommandResponse>
 803182c:	4603      	mov	r3, r0
 803182e:	461a      	mov	r2, r3
 8031830:	7afb      	ldrb	r3, [r7, #11]
 8031832:	4293      	cmp	r3, r2
 8031834:	d001      	beq.n	803183a <SDMMC_GetCmdResp1+0x7a>
 8031836:	2301      	movs	r3, #1
 8031838:	e09d      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 803183a:	68fb      	ldr	r3, [r7, #12]
 803183c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8031840:	639a      	str	r2, [r3, #56]	; 0x38
 8031842:	2100      	movs	r1, #0
 8031844:	68f8      	ldr	r0, [r7, #12]
 8031846:	f7ff ff5e 	bl	8031706 <SDMMC_GetResponse>
 803184a:	6178      	str	r0, [r7, #20]
 803184c:	697a      	ldr	r2, [r7, #20]
 803184e:	4b4e      	ldr	r3, [pc, #312]	; (8031988 <SDMMC_GetCmdResp1+0x1c8>)
 8031850:	4013      	ands	r3, r2
 8031852:	2b00      	cmp	r3, #0
 8031854:	d101      	bne.n	803185a <SDMMC_GetCmdResp1+0x9a>
 8031856:	2300      	movs	r3, #0
 8031858:	e08d      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 803185a:	697b      	ldr	r3, [r7, #20]
 803185c:	2b00      	cmp	r3, #0
 803185e:	da02      	bge.n	8031866 <SDMMC_GetCmdResp1+0xa6>
 8031860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8031864:	e087      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031866:	697b      	ldr	r3, [r7, #20]
 8031868:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803186c:	2b00      	cmp	r3, #0
 803186e:	d001      	beq.n	8031874 <SDMMC_GetCmdResp1+0xb4>
 8031870:	2340      	movs	r3, #64	; 0x40
 8031872:	e080      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031874:	697b      	ldr	r3, [r7, #20]
 8031876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803187a:	2b00      	cmp	r3, #0
 803187c:	d001      	beq.n	8031882 <SDMMC_GetCmdResp1+0xc2>
 803187e:	2380      	movs	r3, #128	; 0x80
 8031880:	e079      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031882:	697b      	ldr	r3, [r7, #20]
 8031884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8031888:	2b00      	cmp	r3, #0
 803188a:	d002      	beq.n	8031892 <SDMMC_GetCmdResp1+0xd2>
 803188c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8031890:	e071      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031892:	697b      	ldr	r3, [r7, #20]
 8031894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031898:	2b00      	cmp	r3, #0
 803189a:	d002      	beq.n	80318a2 <SDMMC_GetCmdResp1+0xe2>
 803189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80318a0:	e069      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318a2:	697b      	ldr	r3, [r7, #20]
 80318a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80318a8:	2b00      	cmp	r3, #0
 80318aa:	d002      	beq.n	80318b2 <SDMMC_GetCmdResp1+0xf2>
 80318ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80318b0:	e061      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318b2:	697b      	ldr	r3, [r7, #20]
 80318b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80318b8:	2b00      	cmp	r3, #0
 80318ba:	d002      	beq.n	80318c2 <SDMMC_GetCmdResp1+0x102>
 80318bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80318c0:	e059      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318c2:	697b      	ldr	r3, [r7, #20]
 80318c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80318c8:	2b00      	cmp	r3, #0
 80318ca:	d002      	beq.n	80318d2 <SDMMC_GetCmdResp1+0x112>
 80318cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80318d0:	e051      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318d2:	697b      	ldr	r3, [r7, #20]
 80318d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80318d8:	2b00      	cmp	r3, #0
 80318da:	d002      	beq.n	80318e2 <SDMMC_GetCmdResp1+0x122>
 80318dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80318e0:	e049      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318e2:	697b      	ldr	r3, [r7, #20]
 80318e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80318e8:	2b00      	cmp	r3, #0
 80318ea:	d002      	beq.n	80318f2 <SDMMC_GetCmdResp1+0x132>
 80318ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80318f0:	e041      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 80318f2:	697b      	ldr	r3, [r7, #20]
 80318f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80318f8:	2b00      	cmp	r3, #0
 80318fa:	d002      	beq.n	8031902 <SDMMC_GetCmdResp1+0x142>
 80318fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031900:	e039      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031902:	697b      	ldr	r3, [r7, #20]
 8031904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8031908:	2b00      	cmp	r3, #0
 803190a:	d002      	beq.n	8031912 <SDMMC_GetCmdResp1+0x152>
 803190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8031910:	e031      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031912:	697b      	ldr	r3, [r7, #20]
 8031914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8031918:	2b00      	cmp	r3, #0
 803191a:	d002      	beq.n	8031922 <SDMMC_GetCmdResp1+0x162>
 803191c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8031920:	e029      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031922:	697b      	ldr	r3, [r7, #20]
 8031924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031928:	2b00      	cmp	r3, #0
 803192a:	d002      	beq.n	8031932 <SDMMC_GetCmdResp1+0x172>
 803192c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8031930:	e021      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031932:	697b      	ldr	r3, [r7, #20]
 8031934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8031938:	2b00      	cmp	r3, #0
 803193a:	d002      	beq.n	8031942 <SDMMC_GetCmdResp1+0x182>
 803193c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8031940:	e019      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031942:	697b      	ldr	r3, [r7, #20]
 8031944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8031948:	2b00      	cmp	r3, #0
 803194a:	d002      	beq.n	8031952 <SDMMC_GetCmdResp1+0x192>
 803194c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8031950:	e011      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031952:	697b      	ldr	r3, [r7, #20]
 8031954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031958:	2b00      	cmp	r3, #0
 803195a:	d002      	beq.n	8031962 <SDMMC_GetCmdResp1+0x1a2>
 803195c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8031960:	e009      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031962:	697b      	ldr	r3, [r7, #20]
 8031964:	f003 0308 	and.w	r3, r3, #8
 8031968:	2b00      	cmp	r3, #0
 803196a:	d002      	beq.n	8031972 <SDMMC_GetCmdResp1+0x1b2>
 803196c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8031970:	e001      	b.n	8031976 <SDMMC_GetCmdResp1+0x1b6>
 8031972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8031976:	4618      	mov	r0, r3
 8031978:	371c      	adds	r7, #28
 803197a:	46bd      	mov	sp, r7
 803197c:	bd90      	pop	{r4, r7, pc}
 803197e:	bf00      	nop
 8031980:	2000cc48 	.word	0x2000cc48
 8031984:	10624dd3 	.word	0x10624dd3
 8031988:	fdffe008 	.word	0xfdffe008

0803198c <USB_CoreInit>:
 803198c:	b084      	sub	sp, #16
 803198e:	b580      	push	{r7, lr}
 8031990:	b084      	sub	sp, #16
 8031992:	af00      	add	r7, sp, #0
 8031994:	6078      	str	r0, [r7, #4]
 8031996:	f107 001c 	add.w	r0, r7, #28
 803199a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 803199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80319a0:	2b01      	cmp	r3, #1
 80319a2:	d120      	bne.n	80319e6 <USB_CoreInit+0x5a>
 80319a4:	687b      	ldr	r3, [r7, #4]
 80319a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80319a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80319ac:	687b      	ldr	r3, [r7, #4]
 80319ae:	639a      	str	r2, [r3, #56]	; 0x38
 80319b0:	687b      	ldr	r3, [r7, #4]
 80319b2:	68da      	ldr	r2, [r3, #12]
 80319b4:	4b20      	ldr	r3, [pc, #128]	; (8031a38 <USB_CoreInit+0xac>)
 80319b6:	4013      	ands	r3, r2
 80319b8:	687a      	ldr	r2, [r7, #4]
 80319ba:	60d3      	str	r3, [r2, #12]
 80319bc:	687b      	ldr	r3, [r7, #4]
 80319be:	68db      	ldr	r3, [r3, #12]
 80319c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80319c4:	687b      	ldr	r3, [r7, #4]
 80319c6:	60da      	str	r2, [r3, #12]
 80319c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80319ca:	2b01      	cmp	r3, #1
 80319cc:	d105      	bne.n	80319da <USB_CoreInit+0x4e>
 80319ce:	687b      	ldr	r3, [r7, #4]
 80319d0:	68db      	ldr	r3, [r3, #12]
 80319d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80319d6:	687b      	ldr	r3, [r7, #4]
 80319d8:	60da      	str	r2, [r3, #12]
 80319da:	6878      	ldr	r0, [r7, #4]
 80319dc:	f001 fbee 	bl	80331bc <USB_CoreReset>
 80319e0:	4603      	mov	r3, r0
 80319e2:	73fb      	strb	r3, [r7, #15]
 80319e4:	e010      	b.n	8031a08 <USB_CoreInit+0x7c>
 80319e6:	687b      	ldr	r3, [r7, #4]
 80319e8:	68db      	ldr	r3, [r3, #12]
 80319ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80319ee:	687b      	ldr	r3, [r7, #4]
 80319f0:	60da      	str	r2, [r3, #12]
 80319f2:	6878      	ldr	r0, [r7, #4]
 80319f4:	f001 fbe2 	bl	80331bc <USB_CoreReset>
 80319f8:	4603      	mov	r3, r0
 80319fa:	73fb      	strb	r3, [r7, #15]
 80319fc:	687b      	ldr	r3, [r7, #4]
 80319fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8031a04:	687b      	ldr	r3, [r7, #4]
 8031a06:	639a      	str	r2, [r3, #56]	; 0x38
 8031a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031a0a:	2b01      	cmp	r3, #1
 8031a0c:	d10b      	bne.n	8031a26 <USB_CoreInit+0x9a>
 8031a0e:	687b      	ldr	r3, [r7, #4]
 8031a10:	689b      	ldr	r3, [r3, #8]
 8031a12:	f043 0206 	orr.w	r2, r3, #6
 8031a16:	687b      	ldr	r3, [r7, #4]
 8031a18:	609a      	str	r2, [r3, #8]
 8031a1a:	687b      	ldr	r3, [r7, #4]
 8031a1c:	689b      	ldr	r3, [r3, #8]
 8031a1e:	f043 0220 	orr.w	r2, r3, #32
 8031a22:	687b      	ldr	r3, [r7, #4]
 8031a24:	609a      	str	r2, [r3, #8]
 8031a26:	7bfb      	ldrb	r3, [r7, #15]
 8031a28:	4618      	mov	r0, r3
 8031a2a:	3710      	adds	r7, #16
 8031a2c:	46bd      	mov	sp, r7
 8031a2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031a32:	b004      	add	sp, #16
 8031a34:	4770      	bx	lr
 8031a36:	bf00      	nop
 8031a38:	ffbdffbf 	.word	0xffbdffbf

08031a3c <USB_SetTurnaroundTime>:
 8031a3c:	b480      	push	{r7}
 8031a3e:	b087      	sub	sp, #28
 8031a40:	af00      	add	r7, sp, #0
 8031a42:	60f8      	str	r0, [r7, #12]
 8031a44:	60b9      	str	r1, [r7, #8]
 8031a46:	4613      	mov	r3, r2
 8031a48:	71fb      	strb	r3, [r7, #7]
 8031a4a:	79fb      	ldrb	r3, [r7, #7]
 8031a4c:	2b02      	cmp	r3, #2
 8031a4e:	d165      	bne.n	8031b1c <USB_SetTurnaroundTime+0xe0>
 8031a50:	68bb      	ldr	r3, [r7, #8]
 8031a52:	4a41      	ldr	r2, [pc, #260]	; (8031b58 <USB_SetTurnaroundTime+0x11c>)
 8031a54:	4293      	cmp	r3, r2
 8031a56:	d906      	bls.n	8031a66 <USB_SetTurnaroundTime+0x2a>
 8031a58:	68bb      	ldr	r3, [r7, #8]
 8031a5a:	4a40      	ldr	r2, [pc, #256]	; (8031b5c <USB_SetTurnaroundTime+0x120>)
 8031a5c:	4293      	cmp	r3, r2
 8031a5e:	d202      	bcs.n	8031a66 <USB_SetTurnaroundTime+0x2a>
 8031a60:	230f      	movs	r3, #15
 8031a62:	617b      	str	r3, [r7, #20]
 8031a64:	e062      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031a66:	68bb      	ldr	r3, [r7, #8]
 8031a68:	4a3c      	ldr	r2, [pc, #240]	; (8031b5c <USB_SetTurnaroundTime+0x120>)
 8031a6a:	4293      	cmp	r3, r2
 8031a6c:	d306      	bcc.n	8031a7c <USB_SetTurnaroundTime+0x40>
 8031a6e:	68bb      	ldr	r3, [r7, #8]
 8031a70:	4a3b      	ldr	r2, [pc, #236]	; (8031b60 <USB_SetTurnaroundTime+0x124>)
 8031a72:	4293      	cmp	r3, r2
 8031a74:	d202      	bcs.n	8031a7c <USB_SetTurnaroundTime+0x40>
 8031a76:	230e      	movs	r3, #14
 8031a78:	617b      	str	r3, [r7, #20]
 8031a7a:	e057      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031a7c:	68bb      	ldr	r3, [r7, #8]
 8031a7e:	4a38      	ldr	r2, [pc, #224]	; (8031b60 <USB_SetTurnaroundTime+0x124>)
 8031a80:	4293      	cmp	r3, r2
 8031a82:	d306      	bcc.n	8031a92 <USB_SetTurnaroundTime+0x56>
 8031a84:	68bb      	ldr	r3, [r7, #8]
 8031a86:	4a37      	ldr	r2, [pc, #220]	; (8031b64 <USB_SetTurnaroundTime+0x128>)
 8031a88:	4293      	cmp	r3, r2
 8031a8a:	d202      	bcs.n	8031a92 <USB_SetTurnaroundTime+0x56>
 8031a8c:	230d      	movs	r3, #13
 8031a8e:	617b      	str	r3, [r7, #20]
 8031a90:	e04c      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031a92:	68bb      	ldr	r3, [r7, #8]
 8031a94:	4a33      	ldr	r2, [pc, #204]	; (8031b64 <USB_SetTurnaroundTime+0x128>)
 8031a96:	4293      	cmp	r3, r2
 8031a98:	d306      	bcc.n	8031aa8 <USB_SetTurnaroundTime+0x6c>
 8031a9a:	68bb      	ldr	r3, [r7, #8]
 8031a9c:	4a32      	ldr	r2, [pc, #200]	; (8031b68 <USB_SetTurnaroundTime+0x12c>)
 8031a9e:	4293      	cmp	r3, r2
 8031aa0:	d802      	bhi.n	8031aa8 <USB_SetTurnaroundTime+0x6c>
 8031aa2:	230c      	movs	r3, #12
 8031aa4:	617b      	str	r3, [r7, #20]
 8031aa6:	e041      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031aa8:	68bb      	ldr	r3, [r7, #8]
 8031aaa:	4a2f      	ldr	r2, [pc, #188]	; (8031b68 <USB_SetTurnaroundTime+0x12c>)
 8031aac:	4293      	cmp	r3, r2
 8031aae:	d906      	bls.n	8031abe <USB_SetTurnaroundTime+0x82>
 8031ab0:	68bb      	ldr	r3, [r7, #8]
 8031ab2:	4a2e      	ldr	r2, [pc, #184]	; (8031b6c <USB_SetTurnaroundTime+0x130>)
 8031ab4:	4293      	cmp	r3, r2
 8031ab6:	d802      	bhi.n	8031abe <USB_SetTurnaroundTime+0x82>
 8031ab8:	230b      	movs	r3, #11
 8031aba:	617b      	str	r3, [r7, #20]
 8031abc:	e036      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031abe:	68bb      	ldr	r3, [r7, #8]
 8031ac0:	4a2a      	ldr	r2, [pc, #168]	; (8031b6c <USB_SetTurnaroundTime+0x130>)
 8031ac2:	4293      	cmp	r3, r2
 8031ac4:	d906      	bls.n	8031ad4 <USB_SetTurnaroundTime+0x98>
 8031ac6:	68bb      	ldr	r3, [r7, #8]
 8031ac8:	4a29      	ldr	r2, [pc, #164]	; (8031b70 <USB_SetTurnaroundTime+0x134>)
 8031aca:	4293      	cmp	r3, r2
 8031acc:	d802      	bhi.n	8031ad4 <USB_SetTurnaroundTime+0x98>
 8031ace:	230a      	movs	r3, #10
 8031ad0:	617b      	str	r3, [r7, #20]
 8031ad2:	e02b      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031ad4:	68bb      	ldr	r3, [r7, #8]
 8031ad6:	4a26      	ldr	r2, [pc, #152]	; (8031b70 <USB_SetTurnaroundTime+0x134>)
 8031ad8:	4293      	cmp	r3, r2
 8031ada:	d906      	bls.n	8031aea <USB_SetTurnaroundTime+0xae>
 8031adc:	68bb      	ldr	r3, [r7, #8]
 8031ade:	4a25      	ldr	r2, [pc, #148]	; (8031b74 <USB_SetTurnaroundTime+0x138>)
 8031ae0:	4293      	cmp	r3, r2
 8031ae2:	d202      	bcs.n	8031aea <USB_SetTurnaroundTime+0xae>
 8031ae4:	2309      	movs	r3, #9
 8031ae6:	617b      	str	r3, [r7, #20]
 8031ae8:	e020      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031aea:	68bb      	ldr	r3, [r7, #8]
 8031aec:	4a21      	ldr	r2, [pc, #132]	; (8031b74 <USB_SetTurnaroundTime+0x138>)
 8031aee:	4293      	cmp	r3, r2
 8031af0:	d306      	bcc.n	8031b00 <USB_SetTurnaroundTime+0xc4>
 8031af2:	68bb      	ldr	r3, [r7, #8]
 8031af4:	4a20      	ldr	r2, [pc, #128]	; (8031b78 <USB_SetTurnaroundTime+0x13c>)
 8031af6:	4293      	cmp	r3, r2
 8031af8:	d802      	bhi.n	8031b00 <USB_SetTurnaroundTime+0xc4>
 8031afa:	2308      	movs	r3, #8
 8031afc:	617b      	str	r3, [r7, #20]
 8031afe:	e015      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031b00:	68bb      	ldr	r3, [r7, #8]
 8031b02:	4a1d      	ldr	r2, [pc, #116]	; (8031b78 <USB_SetTurnaroundTime+0x13c>)
 8031b04:	4293      	cmp	r3, r2
 8031b06:	d906      	bls.n	8031b16 <USB_SetTurnaroundTime+0xda>
 8031b08:	68bb      	ldr	r3, [r7, #8]
 8031b0a:	4a1c      	ldr	r2, [pc, #112]	; (8031b7c <USB_SetTurnaroundTime+0x140>)
 8031b0c:	4293      	cmp	r3, r2
 8031b0e:	d202      	bcs.n	8031b16 <USB_SetTurnaroundTime+0xda>
 8031b10:	2307      	movs	r3, #7
 8031b12:	617b      	str	r3, [r7, #20]
 8031b14:	e00a      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031b16:	2306      	movs	r3, #6
 8031b18:	617b      	str	r3, [r7, #20]
 8031b1a:	e007      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031b1c:	79fb      	ldrb	r3, [r7, #7]
 8031b1e:	2b00      	cmp	r3, #0
 8031b20:	d102      	bne.n	8031b28 <USB_SetTurnaroundTime+0xec>
 8031b22:	2309      	movs	r3, #9
 8031b24:	617b      	str	r3, [r7, #20]
 8031b26:	e001      	b.n	8031b2c <USB_SetTurnaroundTime+0xf0>
 8031b28:	2309      	movs	r3, #9
 8031b2a:	617b      	str	r3, [r7, #20]
 8031b2c:	68fb      	ldr	r3, [r7, #12]
 8031b2e:	68db      	ldr	r3, [r3, #12]
 8031b30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8031b34:	68fb      	ldr	r3, [r7, #12]
 8031b36:	60da      	str	r2, [r3, #12]
 8031b38:	68fb      	ldr	r3, [r7, #12]
 8031b3a:	68da      	ldr	r2, [r3, #12]
 8031b3c:	697b      	ldr	r3, [r7, #20]
 8031b3e:	029b      	lsls	r3, r3, #10
 8031b40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8031b44:	431a      	orrs	r2, r3
 8031b46:	68fb      	ldr	r3, [r7, #12]
 8031b48:	60da      	str	r2, [r3, #12]
 8031b4a:	2300      	movs	r3, #0
 8031b4c:	4618      	mov	r0, r3
 8031b4e:	371c      	adds	r7, #28
 8031b50:	46bd      	mov	sp, r7
 8031b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b56:	4770      	bx	lr
 8031b58:	00d8acbf 	.word	0x00d8acbf
 8031b5c:	00e4e1c0 	.word	0x00e4e1c0
 8031b60:	00f42400 	.word	0x00f42400
 8031b64:	01067380 	.word	0x01067380
 8031b68:	011a499f 	.word	0x011a499f
 8031b6c:	01312cff 	.word	0x01312cff
 8031b70:	014ca43f 	.word	0x014ca43f
 8031b74:	016e3600 	.word	0x016e3600
 8031b78:	01a6ab1f 	.word	0x01a6ab1f
 8031b7c:	01e84800 	.word	0x01e84800

08031b80 <USB_EnableGlobalInt>:
 8031b80:	b480      	push	{r7}
 8031b82:	b083      	sub	sp, #12
 8031b84:	af00      	add	r7, sp, #0
 8031b86:	6078      	str	r0, [r7, #4]
 8031b88:	687b      	ldr	r3, [r7, #4]
 8031b8a:	689b      	ldr	r3, [r3, #8]
 8031b8c:	f043 0201 	orr.w	r2, r3, #1
 8031b90:	687b      	ldr	r3, [r7, #4]
 8031b92:	609a      	str	r2, [r3, #8]
 8031b94:	2300      	movs	r3, #0
 8031b96:	4618      	mov	r0, r3
 8031b98:	370c      	adds	r7, #12
 8031b9a:	46bd      	mov	sp, r7
 8031b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ba0:	4770      	bx	lr

08031ba2 <USB_DisableGlobalInt>:
 8031ba2:	b480      	push	{r7}
 8031ba4:	b083      	sub	sp, #12
 8031ba6:	af00      	add	r7, sp, #0
 8031ba8:	6078      	str	r0, [r7, #4]
 8031baa:	687b      	ldr	r3, [r7, #4]
 8031bac:	689b      	ldr	r3, [r3, #8]
 8031bae:	f023 0201 	bic.w	r2, r3, #1
 8031bb2:	687b      	ldr	r3, [r7, #4]
 8031bb4:	609a      	str	r2, [r3, #8]
 8031bb6:	2300      	movs	r3, #0
 8031bb8:	4618      	mov	r0, r3
 8031bba:	370c      	adds	r7, #12
 8031bbc:	46bd      	mov	sp, r7
 8031bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031bc2:	4770      	bx	lr

08031bc4 <USB_SetCurrentMode>:
 8031bc4:	b580      	push	{r7, lr}
 8031bc6:	b084      	sub	sp, #16
 8031bc8:	af00      	add	r7, sp, #0
 8031bca:	6078      	str	r0, [r7, #4]
 8031bcc:	460b      	mov	r3, r1
 8031bce:	70fb      	strb	r3, [r7, #3]
 8031bd0:	2300      	movs	r3, #0
 8031bd2:	60fb      	str	r3, [r7, #12]
 8031bd4:	687b      	ldr	r3, [r7, #4]
 8031bd6:	68db      	ldr	r3, [r3, #12]
 8031bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8031bdc:	687b      	ldr	r3, [r7, #4]
 8031bde:	60da      	str	r2, [r3, #12]
 8031be0:	78fb      	ldrb	r3, [r7, #3]
 8031be2:	2b01      	cmp	r3, #1
 8031be4:	d115      	bne.n	8031c12 <USB_SetCurrentMode+0x4e>
 8031be6:	687b      	ldr	r3, [r7, #4]
 8031be8:	68db      	ldr	r3, [r3, #12]
 8031bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8031bee:	687b      	ldr	r3, [r7, #4]
 8031bf0:	60da      	str	r2, [r3, #12]
 8031bf2:	2001      	movs	r0, #1
 8031bf4:	f7e5 ffe2 	bl	8017bbc <HAL_Delay>
 8031bf8:	68fb      	ldr	r3, [r7, #12]
 8031bfa:	3301      	adds	r3, #1
 8031bfc:	60fb      	str	r3, [r7, #12]
 8031bfe:	6878      	ldr	r0, [r7, #4]
 8031c00:	f001 fa4b 	bl	803309a <USB_GetMode>
 8031c04:	4603      	mov	r3, r0
 8031c06:	2b01      	cmp	r3, #1
 8031c08:	d01e      	beq.n	8031c48 <USB_SetCurrentMode+0x84>
 8031c0a:	68fb      	ldr	r3, [r7, #12]
 8031c0c:	2b31      	cmp	r3, #49	; 0x31
 8031c0e:	d9f0      	bls.n	8031bf2 <USB_SetCurrentMode+0x2e>
 8031c10:	e01a      	b.n	8031c48 <USB_SetCurrentMode+0x84>
 8031c12:	78fb      	ldrb	r3, [r7, #3]
 8031c14:	2b00      	cmp	r3, #0
 8031c16:	d115      	bne.n	8031c44 <USB_SetCurrentMode+0x80>
 8031c18:	687b      	ldr	r3, [r7, #4]
 8031c1a:	68db      	ldr	r3, [r3, #12]
 8031c1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8031c20:	687b      	ldr	r3, [r7, #4]
 8031c22:	60da      	str	r2, [r3, #12]
 8031c24:	2001      	movs	r0, #1
 8031c26:	f7e5 ffc9 	bl	8017bbc <HAL_Delay>
 8031c2a:	68fb      	ldr	r3, [r7, #12]
 8031c2c:	3301      	adds	r3, #1
 8031c2e:	60fb      	str	r3, [r7, #12]
 8031c30:	6878      	ldr	r0, [r7, #4]
 8031c32:	f001 fa32 	bl	803309a <USB_GetMode>
 8031c36:	4603      	mov	r3, r0
 8031c38:	2b00      	cmp	r3, #0
 8031c3a:	d005      	beq.n	8031c48 <USB_SetCurrentMode+0x84>
 8031c3c:	68fb      	ldr	r3, [r7, #12]
 8031c3e:	2b31      	cmp	r3, #49	; 0x31
 8031c40:	d9f0      	bls.n	8031c24 <USB_SetCurrentMode+0x60>
 8031c42:	e001      	b.n	8031c48 <USB_SetCurrentMode+0x84>
 8031c44:	2301      	movs	r3, #1
 8031c46:	e005      	b.n	8031c54 <USB_SetCurrentMode+0x90>
 8031c48:	68fb      	ldr	r3, [r7, #12]
 8031c4a:	2b32      	cmp	r3, #50	; 0x32
 8031c4c:	d101      	bne.n	8031c52 <USB_SetCurrentMode+0x8e>
 8031c4e:	2301      	movs	r3, #1
 8031c50:	e000      	b.n	8031c54 <USB_SetCurrentMode+0x90>
 8031c52:	2300      	movs	r3, #0
 8031c54:	4618      	mov	r0, r3
 8031c56:	3710      	adds	r7, #16
 8031c58:	46bd      	mov	sp, r7
 8031c5a:	bd80      	pop	{r7, pc}

08031c5c <USB_DevInit>:
 8031c5c:	b084      	sub	sp, #16
 8031c5e:	b580      	push	{r7, lr}
 8031c60:	b086      	sub	sp, #24
 8031c62:	af00      	add	r7, sp, #0
 8031c64:	6078      	str	r0, [r7, #4]
 8031c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8031c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8031c6e:	2300      	movs	r3, #0
 8031c70:	75fb      	strb	r3, [r7, #23]
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	60fb      	str	r3, [r7, #12]
 8031c76:	2300      	movs	r3, #0
 8031c78:	613b      	str	r3, [r7, #16]
 8031c7a:	e009      	b.n	8031c90 <USB_DevInit+0x34>
 8031c7c:	687a      	ldr	r2, [r7, #4]
 8031c7e:	693b      	ldr	r3, [r7, #16]
 8031c80:	3340      	adds	r3, #64	; 0x40
 8031c82:	009b      	lsls	r3, r3, #2
 8031c84:	4413      	add	r3, r2
 8031c86:	2200      	movs	r2, #0
 8031c88:	605a      	str	r2, [r3, #4]
 8031c8a:	693b      	ldr	r3, [r7, #16]
 8031c8c:	3301      	adds	r3, #1
 8031c8e:	613b      	str	r3, [r7, #16]
 8031c90:	693b      	ldr	r3, [r7, #16]
 8031c92:	2b0e      	cmp	r3, #14
 8031c94:	d9f2      	bls.n	8031c7c <USB_DevInit+0x20>
 8031c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8031c98:	2b00      	cmp	r3, #0
 8031c9a:	d11c      	bne.n	8031cd6 <USB_DevInit+0x7a>
 8031c9c:	68fb      	ldr	r3, [r7, #12]
 8031c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031ca2:	685b      	ldr	r3, [r3, #4]
 8031ca4:	68fa      	ldr	r2, [r7, #12]
 8031ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031caa:	f043 0302 	orr.w	r3, r3, #2
 8031cae:	6053      	str	r3, [r2, #4]
 8031cb0:	687b      	ldr	r3, [r7, #4]
 8031cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031cb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8031cb8:	687b      	ldr	r3, [r7, #4]
 8031cba:	639a      	str	r2, [r3, #56]	; 0x38
 8031cbc:	687b      	ldr	r3, [r7, #4]
 8031cbe:	681b      	ldr	r3, [r3, #0]
 8031cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8031cc4:	687b      	ldr	r3, [r7, #4]
 8031cc6:	601a      	str	r2, [r3, #0]
 8031cc8:	687b      	ldr	r3, [r7, #4]
 8031cca:	681b      	ldr	r3, [r3, #0]
 8031ccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8031cd0:	687b      	ldr	r3, [r7, #4]
 8031cd2:	601a      	str	r2, [r3, #0]
 8031cd4:	e005      	b.n	8031ce2 <USB_DevInit+0x86>
 8031cd6:	687b      	ldr	r3, [r7, #4]
 8031cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031cda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8031cde:	687b      	ldr	r3, [r7, #4]
 8031ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8031ce2:	68fb      	ldr	r3, [r7, #12]
 8031ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8031ce8:	461a      	mov	r2, r3
 8031cea:	2300      	movs	r3, #0
 8031cec:	6013      	str	r3, [r2, #0]
 8031cee:	68fb      	ldr	r3, [r7, #12]
 8031cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031cf4:	4619      	mov	r1, r3
 8031cf6:	68fb      	ldr	r3, [r7, #12]
 8031cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031cfc:	461a      	mov	r2, r3
 8031cfe:	680b      	ldr	r3, [r1, #0]
 8031d00:	6013      	str	r3, [r2, #0]
 8031d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8031d04:	2b01      	cmp	r3, #1
 8031d06:	d10c      	bne.n	8031d22 <USB_DevInit+0xc6>
 8031d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031d0a:	2b00      	cmp	r3, #0
 8031d0c:	d104      	bne.n	8031d18 <USB_DevInit+0xbc>
 8031d0e:	2100      	movs	r1, #0
 8031d10:	6878      	ldr	r0, [r7, #4]
 8031d12:	f000 f965 	bl	8031fe0 <USB_SetDevSpeed>
 8031d16:	e008      	b.n	8031d2a <USB_DevInit+0xce>
 8031d18:	2101      	movs	r1, #1
 8031d1a:	6878      	ldr	r0, [r7, #4]
 8031d1c:	f000 f960 	bl	8031fe0 <USB_SetDevSpeed>
 8031d20:	e003      	b.n	8031d2a <USB_DevInit+0xce>
 8031d22:	2103      	movs	r1, #3
 8031d24:	6878      	ldr	r0, [r7, #4]
 8031d26:	f000 f95b 	bl	8031fe0 <USB_SetDevSpeed>
 8031d2a:	2110      	movs	r1, #16
 8031d2c:	6878      	ldr	r0, [r7, #4]
 8031d2e:	f000 f8f3 	bl	8031f18 <USB_FlushTxFifo>
 8031d32:	4603      	mov	r3, r0
 8031d34:	2b00      	cmp	r3, #0
 8031d36:	d001      	beq.n	8031d3c <USB_DevInit+0xe0>
 8031d38:	2301      	movs	r3, #1
 8031d3a:	75fb      	strb	r3, [r7, #23]
 8031d3c:	6878      	ldr	r0, [r7, #4]
 8031d3e:	f000 f91f 	bl	8031f80 <USB_FlushRxFifo>
 8031d42:	4603      	mov	r3, r0
 8031d44:	2b00      	cmp	r3, #0
 8031d46:	d001      	beq.n	8031d4c <USB_DevInit+0xf0>
 8031d48:	2301      	movs	r3, #1
 8031d4a:	75fb      	strb	r3, [r7, #23]
 8031d4c:	68fb      	ldr	r3, [r7, #12]
 8031d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031d52:	461a      	mov	r2, r3
 8031d54:	2300      	movs	r3, #0
 8031d56:	6113      	str	r3, [r2, #16]
 8031d58:	68fb      	ldr	r3, [r7, #12]
 8031d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031d5e:	461a      	mov	r2, r3
 8031d60:	2300      	movs	r3, #0
 8031d62:	6153      	str	r3, [r2, #20]
 8031d64:	68fb      	ldr	r3, [r7, #12]
 8031d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031d6a:	461a      	mov	r2, r3
 8031d6c:	2300      	movs	r3, #0
 8031d6e:	61d3      	str	r3, [r2, #28]
 8031d70:	2300      	movs	r3, #0
 8031d72:	613b      	str	r3, [r7, #16]
 8031d74:	e043      	b.n	8031dfe <USB_DevInit+0x1a2>
 8031d76:	693b      	ldr	r3, [r7, #16]
 8031d78:	015a      	lsls	r2, r3, #5
 8031d7a:	68fb      	ldr	r3, [r7, #12]
 8031d7c:	4413      	add	r3, r2
 8031d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031d82:	681b      	ldr	r3, [r3, #0]
 8031d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8031d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8031d8c:	d118      	bne.n	8031dc0 <USB_DevInit+0x164>
 8031d8e:	693b      	ldr	r3, [r7, #16]
 8031d90:	2b00      	cmp	r3, #0
 8031d92:	d10a      	bne.n	8031daa <USB_DevInit+0x14e>
 8031d94:	693b      	ldr	r3, [r7, #16]
 8031d96:	015a      	lsls	r2, r3, #5
 8031d98:	68fb      	ldr	r3, [r7, #12]
 8031d9a:	4413      	add	r3, r2
 8031d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031da0:	461a      	mov	r2, r3
 8031da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8031da6:	6013      	str	r3, [r2, #0]
 8031da8:	e013      	b.n	8031dd2 <USB_DevInit+0x176>
 8031daa:	693b      	ldr	r3, [r7, #16]
 8031dac:	015a      	lsls	r2, r3, #5
 8031dae:	68fb      	ldr	r3, [r7, #12]
 8031db0:	4413      	add	r3, r2
 8031db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031db6:	461a      	mov	r2, r3
 8031db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8031dbc:	6013      	str	r3, [r2, #0]
 8031dbe:	e008      	b.n	8031dd2 <USB_DevInit+0x176>
 8031dc0:	693b      	ldr	r3, [r7, #16]
 8031dc2:	015a      	lsls	r2, r3, #5
 8031dc4:	68fb      	ldr	r3, [r7, #12]
 8031dc6:	4413      	add	r3, r2
 8031dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031dcc:	461a      	mov	r2, r3
 8031dce:	2300      	movs	r3, #0
 8031dd0:	6013      	str	r3, [r2, #0]
 8031dd2:	693b      	ldr	r3, [r7, #16]
 8031dd4:	015a      	lsls	r2, r3, #5
 8031dd6:	68fb      	ldr	r3, [r7, #12]
 8031dd8:	4413      	add	r3, r2
 8031dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031dde:	461a      	mov	r2, r3
 8031de0:	2300      	movs	r3, #0
 8031de2:	6113      	str	r3, [r2, #16]
 8031de4:	693b      	ldr	r3, [r7, #16]
 8031de6:	015a      	lsls	r2, r3, #5
 8031de8:	68fb      	ldr	r3, [r7, #12]
 8031dea:	4413      	add	r3, r2
 8031dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031df0:	461a      	mov	r2, r3
 8031df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8031df6:	6093      	str	r3, [r2, #8]
 8031df8:	693b      	ldr	r3, [r7, #16]
 8031dfa:	3301      	adds	r3, #1
 8031dfc:	613b      	str	r3, [r7, #16]
 8031dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031e00:	693a      	ldr	r2, [r7, #16]
 8031e02:	429a      	cmp	r2, r3
 8031e04:	d3b7      	bcc.n	8031d76 <USB_DevInit+0x11a>
 8031e06:	2300      	movs	r3, #0
 8031e08:	613b      	str	r3, [r7, #16]
 8031e0a:	e043      	b.n	8031e94 <USB_DevInit+0x238>
 8031e0c:	693b      	ldr	r3, [r7, #16]
 8031e0e:	015a      	lsls	r2, r3, #5
 8031e10:	68fb      	ldr	r3, [r7, #12]
 8031e12:	4413      	add	r3, r2
 8031e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e18:	681b      	ldr	r3, [r3, #0]
 8031e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8031e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8031e22:	d118      	bne.n	8031e56 <USB_DevInit+0x1fa>
 8031e24:	693b      	ldr	r3, [r7, #16]
 8031e26:	2b00      	cmp	r3, #0
 8031e28:	d10a      	bne.n	8031e40 <USB_DevInit+0x1e4>
 8031e2a:	693b      	ldr	r3, [r7, #16]
 8031e2c:	015a      	lsls	r2, r3, #5
 8031e2e:	68fb      	ldr	r3, [r7, #12]
 8031e30:	4413      	add	r3, r2
 8031e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e36:	461a      	mov	r2, r3
 8031e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8031e3c:	6013      	str	r3, [r2, #0]
 8031e3e:	e013      	b.n	8031e68 <USB_DevInit+0x20c>
 8031e40:	693b      	ldr	r3, [r7, #16]
 8031e42:	015a      	lsls	r2, r3, #5
 8031e44:	68fb      	ldr	r3, [r7, #12]
 8031e46:	4413      	add	r3, r2
 8031e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e4c:	461a      	mov	r2, r3
 8031e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8031e52:	6013      	str	r3, [r2, #0]
 8031e54:	e008      	b.n	8031e68 <USB_DevInit+0x20c>
 8031e56:	693b      	ldr	r3, [r7, #16]
 8031e58:	015a      	lsls	r2, r3, #5
 8031e5a:	68fb      	ldr	r3, [r7, #12]
 8031e5c:	4413      	add	r3, r2
 8031e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e62:	461a      	mov	r2, r3
 8031e64:	2300      	movs	r3, #0
 8031e66:	6013      	str	r3, [r2, #0]
 8031e68:	693b      	ldr	r3, [r7, #16]
 8031e6a:	015a      	lsls	r2, r3, #5
 8031e6c:	68fb      	ldr	r3, [r7, #12]
 8031e6e:	4413      	add	r3, r2
 8031e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e74:	461a      	mov	r2, r3
 8031e76:	2300      	movs	r3, #0
 8031e78:	6113      	str	r3, [r2, #16]
 8031e7a:	693b      	ldr	r3, [r7, #16]
 8031e7c:	015a      	lsls	r2, r3, #5
 8031e7e:	68fb      	ldr	r3, [r7, #12]
 8031e80:	4413      	add	r3, r2
 8031e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e86:	461a      	mov	r2, r3
 8031e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8031e8c:	6093      	str	r3, [r2, #8]
 8031e8e:	693b      	ldr	r3, [r7, #16]
 8031e90:	3301      	adds	r3, #1
 8031e92:	613b      	str	r3, [r7, #16]
 8031e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031e96:	693a      	ldr	r2, [r7, #16]
 8031e98:	429a      	cmp	r2, r3
 8031e9a:	d3b7      	bcc.n	8031e0c <USB_DevInit+0x1b0>
 8031e9c:	68fb      	ldr	r3, [r7, #12]
 8031e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031ea2:	691b      	ldr	r3, [r3, #16]
 8031ea4:	68fa      	ldr	r2, [r7, #12]
 8031ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8031eae:	6113      	str	r3, [r2, #16]
 8031eb0:	687b      	ldr	r3, [r7, #4]
 8031eb2:	2200      	movs	r2, #0
 8031eb4:	619a      	str	r2, [r3, #24]
 8031eb6:	687b      	ldr	r3, [r7, #4]
 8031eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8031ebc:	615a      	str	r2, [r3, #20]
 8031ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031ec0:	2b00      	cmp	r3, #0
 8031ec2:	d105      	bne.n	8031ed0 <USB_DevInit+0x274>
 8031ec4:	687b      	ldr	r3, [r7, #4]
 8031ec6:	699b      	ldr	r3, [r3, #24]
 8031ec8:	f043 0210 	orr.w	r2, r3, #16
 8031ecc:	687b      	ldr	r3, [r7, #4]
 8031ece:	619a      	str	r2, [r3, #24]
 8031ed0:	687b      	ldr	r3, [r7, #4]
 8031ed2:	699a      	ldr	r2, [r3, #24]
 8031ed4:	4b0e      	ldr	r3, [pc, #56]	; (8031f10 <USB_DevInit+0x2b4>)
 8031ed6:	4313      	orrs	r3, r2
 8031ed8:	687a      	ldr	r2, [r7, #4]
 8031eda:	6193      	str	r3, [r2, #24]
 8031edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8031ede:	2b00      	cmp	r3, #0
 8031ee0:	d005      	beq.n	8031eee <USB_DevInit+0x292>
 8031ee2:	687b      	ldr	r3, [r7, #4]
 8031ee4:	699b      	ldr	r3, [r3, #24]
 8031ee6:	f043 0208 	orr.w	r2, r3, #8
 8031eea:	687b      	ldr	r3, [r7, #4]
 8031eec:	619a      	str	r2, [r3, #24]
 8031eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8031ef0:	2b01      	cmp	r3, #1
 8031ef2:	d105      	bne.n	8031f00 <USB_DevInit+0x2a4>
 8031ef4:	687b      	ldr	r3, [r7, #4]
 8031ef6:	699a      	ldr	r2, [r3, #24]
 8031ef8:	4b06      	ldr	r3, [pc, #24]	; (8031f14 <USB_DevInit+0x2b8>)
 8031efa:	4313      	orrs	r3, r2
 8031efc:	687a      	ldr	r2, [r7, #4]
 8031efe:	6193      	str	r3, [r2, #24]
 8031f00:	7dfb      	ldrb	r3, [r7, #23]
 8031f02:	4618      	mov	r0, r3
 8031f04:	3718      	adds	r7, #24
 8031f06:	46bd      	mov	sp, r7
 8031f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031f0c:	b004      	add	sp, #16
 8031f0e:	4770      	bx	lr
 8031f10:	803c3800 	.word	0x803c3800
 8031f14:	40000004 	.word	0x40000004

08031f18 <USB_FlushTxFifo>:
 8031f18:	b480      	push	{r7}
 8031f1a:	b085      	sub	sp, #20
 8031f1c:	af00      	add	r7, sp, #0
 8031f1e:	6078      	str	r0, [r7, #4]
 8031f20:	6039      	str	r1, [r7, #0]
 8031f22:	2300      	movs	r3, #0
 8031f24:	60fb      	str	r3, [r7, #12]
 8031f26:	68fb      	ldr	r3, [r7, #12]
 8031f28:	3301      	adds	r3, #1
 8031f2a:	60fb      	str	r3, [r7, #12]
 8031f2c:	68fb      	ldr	r3, [r7, #12]
 8031f2e:	4a13      	ldr	r2, [pc, #76]	; (8031f7c <USB_FlushTxFifo+0x64>)
 8031f30:	4293      	cmp	r3, r2
 8031f32:	d901      	bls.n	8031f38 <USB_FlushTxFifo+0x20>
 8031f34:	2303      	movs	r3, #3
 8031f36:	e01b      	b.n	8031f70 <USB_FlushTxFifo+0x58>
 8031f38:	687b      	ldr	r3, [r7, #4]
 8031f3a:	691b      	ldr	r3, [r3, #16]
 8031f3c:	2b00      	cmp	r3, #0
 8031f3e:	daf2      	bge.n	8031f26 <USB_FlushTxFifo+0xe>
 8031f40:	2300      	movs	r3, #0
 8031f42:	60fb      	str	r3, [r7, #12]
 8031f44:	683b      	ldr	r3, [r7, #0]
 8031f46:	019b      	lsls	r3, r3, #6
 8031f48:	f043 0220 	orr.w	r2, r3, #32
 8031f4c:	687b      	ldr	r3, [r7, #4]
 8031f4e:	611a      	str	r2, [r3, #16]
 8031f50:	68fb      	ldr	r3, [r7, #12]
 8031f52:	3301      	adds	r3, #1
 8031f54:	60fb      	str	r3, [r7, #12]
 8031f56:	68fb      	ldr	r3, [r7, #12]
 8031f58:	4a08      	ldr	r2, [pc, #32]	; (8031f7c <USB_FlushTxFifo+0x64>)
 8031f5a:	4293      	cmp	r3, r2
 8031f5c:	d901      	bls.n	8031f62 <USB_FlushTxFifo+0x4a>
 8031f5e:	2303      	movs	r3, #3
 8031f60:	e006      	b.n	8031f70 <USB_FlushTxFifo+0x58>
 8031f62:	687b      	ldr	r3, [r7, #4]
 8031f64:	691b      	ldr	r3, [r3, #16]
 8031f66:	f003 0320 	and.w	r3, r3, #32
 8031f6a:	2b20      	cmp	r3, #32
 8031f6c:	d0f0      	beq.n	8031f50 <USB_FlushTxFifo+0x38>
 8031f6e:	2300      	movs	r3, #0
 8031f70:	4618      	mov	r0, r3
 8031f72:	3714      	adds	r7, #20
 8031f74:	46bd      	mov	sp, r7
 8031f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f7a:	4770      	bx	lr
 8031f7c:	00030d40 	.word	0x00030d40

08031f80 <USB_FlushRxFifo>:
 8031f80:	b480      	push	{r7}
 8031f82:	b085      	sub	sp, #20
 8031f84:	af00      	add	r7, sp, #0
 8031f86:	6078      	str	r0, [r7, #4]
 8031f88:	2300      	movs	r3, #0
 8031f8a:	60fb      	str	r3, [r7, #12]
 8031f8c:	68fb      	ldr	r3, [r7, #12]
 8031f8e:	3301      	adds	r3, #1
 8031f90:	60fb      	str	r3, [r7, #12]
 8031f92:	68fb      	ldr	r3, [r7, #12]
 8031f94:	4a11      	ldr	r2, [pc, #68]	; (8031fdc <USB_FlushRxFifo+0x5c>)
 8031f96:	4293      	cmp	r3, r2
 8031f98:	d901      	bls.n	8031f9e <USB_FlushRxFifo+0x1e>
 8031f9a:	2303      	movs	r3, #3
 8031f9c:	e018      	b.n	8031fd0 <USB_FlushRxFifo+0x50>
 8031f9e:	687b      	ldr	r3, [r7, #4]
 8031fa0:	691b      	ldr	r3, [r3, #16]
 8031fa2:	2b00      	cmp	r3, #0
 8031fa4:	daf2      	bge.n	8031f8c <USB_FlushRxFifo+0xc>
 8031fa6:	2300      	movs	r3, #0
 8031fa8:	60fb      	str	r3, [r7, #12]
 8031faa:	687b      	ldr	r3, [r7, #4]
 8031fac:	2210      	movs	r2, #16
 8031fae:	611a      	str	r2, [r3, #16]
 8031fb0:	68fb      	ldr	r3, [r7, #12]
 8031fb2:	3301      	adds	r3, #1
 8031fb4:	60fb      	str	r3, [r7, #12]
 8031fb6:	68fb      	ldr	r3, [r7, #12]
 8031fb8:	4a08      	ldr	r2, [pc, #32]	; (8031fdc <USB_FlushRxFifo+0x5c>)
 8031fba:	4293      	cmp	r3, r2
 8031fbc:	d901      	bls.n	8031fc2 <USB_FlushRxFifo+0x42>
 8031fbe:	2303      	movs	r3, #3
 8031fc0:	e006      	b.n	8031fd0 <USB_FlushRxFifo+0x50>
 8031fc2:	687b      	ldr	r3, [r7, #4]
 8031fc4:	691b      	ldr	r3, [r3, #16]
 8031fc6:	f003 0310 	and.w	r3, r3, #16
 8031fca:	2b10      	cmp	r3, #16
 8031fcc:	d0f0      	beq.n	8031fb0 <USB_FlushRxFifo+0x30>
 8031fce:	2300      	movs	r3, #0
 8031fd0:	4618      	mov	r0, r3
 8031fd2:	3714      	adds	r7, #20
 8031fd4:	46bd      	mov	sp, r7
 8031fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fda:	4770      	bx	lr
 8031fdc:	00030d40 	.word	0x00030d40

08031fe0 <USB_SetDevSpeed>:
 8031fe0:	b480      	push	{r7}
 8031fe2:	b085      	sub	sp, #20
 8031fe4:	af00      	add	r7, sp, #0
 8031fe6:	6078      	str	r0, [r7, #4]
 8031fe8:	460b      	mov	r3, r1
 8031fea:	70fb      	strb	r3, [r7, #3]
 8031fec:	687b      	ldr	r3, [r7, #4]
 8031fee:	60fb      	str	r3, [r7, #12]
 8031ff0:	68fb      	ldr	r3, [r7, #12]
 8031ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031ff6:	681a      	ldr	r2, [r3, #0]
 8031ff8:	78fb      	ldrb	r3, [r7, #3]
 8031ffa:	68f9      	ldr	r1, [r7, #12]
 8031ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032000:	4313      	orrs	r3, r2
 8032002:	600b      	str	r3, [r1, #0]
 8032004:	2300      	movs	r3, #0
 8032006:	4618      	mov	r0, r3
 8032008:	3714      	adds	r7, #20
 803200a:	46bd      	mov	sp, r7
 803200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032010:	4770      	bx	lr

08032012 <USB_GetDevSpeed>:
 8032012:	b480      	push	{r7}
 8032014:	b087      	sub	sp, #28
 8032016:	af00      	add	r7, sp, #0
 8032018:	6078      	str	r0, [r7, #4]
 803201a:	687b      	ldr	r3, [r7, #4]
 803201c:	613b      	str	r3, [r7, #16]
 803201e:	693b      	ldr	r3, [r7, #16]
 8032020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032024:	689b      	ldr	r3, [r3, #8]
 8032026:	f003 0306 	and.w	r3, r3, #6
 803202a:	60fb      	str	r3, [r7, #12]
 803202c:	68fb      	ldr	r3, [r7, #12]
 803202e:	2b00      	cmp	r3, #0
 8032030:	d102      	bne.n	8032038 <USB_GetDevSpeed+0x26>
 8032032:	2300      	movs	r3, #0
 8032034:	75fb      	strb	r3, [r7, #23]
 8032036:	e00a      	b.n	803204e <USB_GetDevSpeed+0x3c>
 8032038:	68fb      	ldr	r3, [r7, #12]
 803203a:	2b02      	cmp	r3, #2
 803203c:	d002      	beq.n	8032044 <USB_GetDevSpeed+0x32>
 803203e:	68fb      	ldr	r3, [r7, #12]
 8032040:	2b06      	cmp	r3, #6
 8032042:	d102      	bne.n	803204a <USB_GetDevSpeed+0x38>
 8032044:	2302      	movs	r3, #2
 8032046:	75fb      	strb	r3, [r7, #23]
 8032048:	e001      	b.n	803204e <USB_GetDevSpeed+0x3c>
 803204a:	230f      	movs	r3, #15
 803204c:	75fb      	strb	r3, [r7, #23]
 803204e:	7dfb      	ldrb	r3, [r7, #23]
 8032050:	4618      	mov	r0, r3
 8032052:	371c      	adds	r7, #28
 8032054:	46bd      	mov	sp, r7
 8032056:	f85d 7b04 	ldr.w	r7, [sp], #4
 803205a:	4770      	bx	lr

0803205c <USB_ActivateEndpoint>:
 803205c:	b480      	push	{r7}
 803205e:	b085      	sub	sp, #20
 8032060:	af00      	add	r7, sp, #0
 8032062:	6078      	str	r0, [r7, #4]
 8032064:	6039      	str	r1, [r7, #0]
 8032066:	687b      	ldr	r3, [r7, #4]
 8032068:	60fb      	str	r3, [r7, #12]
 803206a:	683b      	ldr	r3, [r7, #0]
 803206c:	781b      	ldrb	r3, [r3, #0]
 803206e:	60bb      	str	r3, [r7, #8]
 8032070:	683b      	ldr	r3, [r7, #0]
 8032072:	785b      	ldrb	r3, [r3, #1]
 8032074:	2b01      	cmp	r3, #1
 8032076:	d139      	bne.n	80320ec <USB_ActivateEndpoint+0x90>
 8032078:	68fb      	ldr	r3, [r7, #12]
 803207a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803207e:	69da      	ldr	r2, [r3, #28]
 8032080:	683b      	ldr	r3, [r7, #0]
 8032082:	781b      	ldrb	r3, [r3, #0]
 8032084:	f003 030f 	and.w	r3, r3, #15
 8032088:	2101      	movs	r1, #1
 803208a:	fa01 f303 	lsl.w	r3, r1, r3
 803208e:	b29b      	uxth	r3, r3
 8032090:	68f9      	ldr	r1, [r7, #12]
 8032092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032096:	4313      	orrs	r3, r2
 8032098:	61cb      	str	r3, [r1, #28]
 803209a:	68bb      	ldr	r3, [r7, #8]
 803209c:	015a      	lsls	r2, r3, #5
 803209e:	68fb      	ldr	r3, [r7, #12]
 80320a0:	4413      	add	r3, r2
 80320a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80320a6:	681b      	ldr	r3, [r3, #0]
 80320a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80320ac:	2b00      	cmp	r3, #0
 80320ae:	d153      	bne.n	8032158 <USB_ActivateEndpoint+0xfc>
 80320b0:	68bb      	ldr	r3, [r7, #8]
 80320b2:	015a      	lsls	r2, r3, #5
 80320b4:	68fb      	ldr	r3, [r7, #12]
 80320b6:	4413      	add	r3, r2
 80320b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80320bc:	681a      	ldr	r2, [r3, #0]
 80320be:	683b      	ldr	r3, [r7, #0]
 80320c0:	68db      	ldr	r3, [r3, #12]
 80320c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80320c6:	683b      	ldr	r3, [r7, #0]
 80320c8:	791b      	ldrb	r3, [r3, #4]
 80320ca:	049b      	lsls	r3, r3, #18
 80320cc:	4319      	orrs	r1, r3
 80320ce:	68bb      	ldr	r3, [r7, #8]
 80320d0:	059b      	lsls	r3, r3, #22
 80320d2:	430b      	orrs	r3, r1
 80320d4:	431a      	orrs	r2, r3
 80320d6:	68bb      	ldr	r3, [r7, #8]
 80320d8:	0159      	lsls	r1, r3, #5
 80320da:	68fb      	ldr	r3, [r7, #12]
 80320dc:	440b      	add	r3, r1
 80320de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80320e2:	4619      	mov	r1, r3
 80320e4:	4b20      	ldr	r3, [pc, #128]	; (8032168 <USB_ActivateEndpoint+0x10c>)
 80320e6:	4313      	orrs	r3, r2
 80320e8:	600b      	str	r3, [r1, #0]
 80320ea:	e035      	b.n	8032158 <USB_ActivateEndpoint+0xfc>
 80320ec:	68fb      	ldr	r3, [r7, #12]
 80320ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80320f2:	69da      	ldr	r2, [r3, #28]
 80320f4:	683b      	ldr	r3, [r7, #0]
 80320f6:	781b      	ldrb	r3, [r3, #0]
 80320f8:	f003 030f 	and.w	r3, r3, #15
 80320fc:	2101      	movs	r1, #1
 80320fe:	fa01 f303 	lsl.w	r3, r1, r3
 8032102:	041b      	lsls	r3, r3, #16
 8032104:	68f9      	ldr	r1, [r7, #12]
 8032106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803210a:	4313      	orrs	r3, r2
 803210c:	61cb      	str	r3, [r1, #28]
 803210e:	68bb      	ldr	r3, [r7, #8]
 8032110:	015a      	lsls	r2, r3, #5
 8032112:	68fb      	ldr	r3, [r7, #12]
 8032114:	4413      	add	r3, r2
 8032116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803211a:	681b      	ldr	r3, [r3, #0]
 803211c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032120:	2b00      	cmp	r3, #0
 8032122:	d119      	bne.n	8032158 <USB_ActivateEndpoint+0xfc>
 8032124:	68bb      	ldr	r3, [r7, #8]
 8032126:	015a      	lsls	r2, r3, #5
 8032128:	68fb      	ldr	r3, [r7, #12]
 803212a:	4413      	add	r3, r2
 803212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032130:	681a      	ldr	r2, [r3, #0]
 8032132:	683b      	ldr	r3, [r7, #0]
 8032134:	68db      	ldr	r3, [r3, #12]
 8032136:	f3c3 010a 	ubfx	r1, r3, #0, #11
 803213a:	683b      	ldr	r3, [r7, #0]
 803213c:	791b      	ldrb	r3, [r3, #4]
 803213e:	049b      	lsls	r3, r3, #18
 8032140:	430b      	orrs	r3, r1
 8032142:	431a      	orrs	r2, r3
 8032144:	68bb      	ldr	r3, [r7, #8]
 8032146:	0159      	lsls	r1, r3, #5
 8032148:	68fb      	ldr	r3, [r7, #12]
 803214a:	440b      	add	r3, r1
 803214c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032150:	4619      	mov	r1, r3
 8032152:	4b05      	ldr	r3, [pc, #20]	; (8032168 <USB_ActivateEndpoint+0x10c>)
 8032154:	4313      	orrs	r3, r2
 8032156:	600b      	str	r3, [r1, #0]
 8032158:	2300      	movs	r3, #0
 803215a:	4618      	mov	r0, r3
 803215c:	3714      	adds	r7, #20
 803215e:	46bd      	mov	sp, r7
 8032160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032164:	4770      	bx	lr
 8032166:	bf00      	nop
 8032168:	10008000 	.word	0x10008000

0803216c <USB_DeactivateEndpoint>:
 803216c:	b480      	push	{r7}
 803216e:	b085      	sub	sp, #20
 8032170:	af00      	add	r7, sp, #0
 8032172:	6078      	str	r0, [r7, #4]
 8032174:	6039      	str	r1, [r7, #0]
 8032176:	687b      	ldr	r3, [r7, #4]
 8032178:	60fb      	str	r3, [r7, #12]
 803217a:	683b      	ldr	r3, [r7, #0]
 803217c:	781b      	ldrb	r3, [r3, #0]
 803217e:	60bb      	str	r3, [r7, #8]
 8032180:	683b      	ldr	r3, [r7, #0]
 8032182:	785b      	ldrb	r3, [r3, #1]
 8032184:	2b01      	cmp	r3, #1
 8032186:	d161      	bne.n	803224c <USB_DeactivateEndpoint+0xe0>
 8032188:	68bb      	ldr	r3, [r7, #8]
 803218a:	015a      	lsls	r2, r3, #5
 803218c:	68fb      	ldr	r3, [r7, #12]
 803218e:	4413      	add	r3, r2
 8032190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032194:	681b      	ldr	r3, [r3, #0]
 8032196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803219a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803219e:	d11f      	bne.n	80321e0 <USB_DeactivateEndpoint+0x74>
 80321a0:	68bb      	ldr	r3, [r7, #8]
 80321a2:	015a      	lsls	r2, r3, #5
 80321a4:	68fb      	ldr	r3, [r7, #12]
 80321a6:	4413      	add	r3, r2
 80321a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80321ac:	681b      	ldr	r3, [r3, #0]
 80321ae:	68ba      	ldr	r2, [r7, #8]
 80321b0:	0151      	lsls	r1, r2, #5
 80321b2:	68fa      	ldr	r2, [r7, #12]
 80321b4:	440a      	add	r2, r1
 80321b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80321ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80321be:	6013      	str	r3, [r2, #0]
 80321c0:	68bb      	ldr	r3, [r7, #8]
 80321c2:	015a      	lsls	r2, r3, #5
 80321c4:	68fb      	ldr	r3, [r7, #12]
 80321c6:	4413      	add	r3, r2
 80321c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80321cc:	681b      	ldr	r3, [r3, #0]
 80321ce:	68ba      	ldr	r2, [r7, #8]
 80321d0:	0151      	lsls	r1, r2, #5
 80321d2:	68fa      	ldr	r2, [r7, #12]
 80321d4:	440a      	add	r2, r1
 80321d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80321da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80321de:	6013      	str	r3, [r2, #0]
 80321e0:	68fb      	ldr	r3, [r7, #12]
 80321e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80321e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80321e8:	683b      	ldr	r3, [r7, #0]
 80321ea:	781b      	ldrb	r3, [r3, #0]
 80321ec:	f003 030f 	and.w	r3, r3, #15
 80321f0:	2101      	movs	r1, #1
 80321f2:	fa01 f303 	lsl.w	r3, r1, r3
 80321f6:	b29b      	uxth	r3, r3
 80321f8:	43db      	mvns	r3, r3
 80321fa:	68f9      	ldr	r1, [r7, #12]
 80321fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032200:	4013      	ands	r3, r2
 8032202:	63cb      	str	r3, [r1, #60]	; 0x3c
 8032204:	68fb      	ldr	r3, [r7, #12]
 8032206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803220a:	69da      	ldr	r2, [r3, #28]
 803220c:	683b      	ldr	r3, [r7, #0]
 803220e:	781b      	ldrb	r3, [r3, #0]
 8032210:	f003 030f 	and.w	r3, r3, #15
 8032214:	2101      	movs	r1, #1
 8032216:	fa01 f303 	lsl.w	r3, r1, r3
 803221a:	b29b      	uxth	r3, r3
 803221c:	43db      	mvns	r3, r3
 803221e:	68f9      	ldr	r1, [r7, #12]
 8032220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032224:	4013      	ands	r3, r2
 8032226:	61cb      	str	r3, [r1, #28]
 8032228:	68bb      	ldr	r3, [r7, #8]
 803222a:	015a      	lsls	r2, r3, #5
 803222c:	68fb      	ldr	r3, [r7, #12]
 803222e:	4413      	add	r3, r2
 8032230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032234:	681a      	ldr	r2, [r3, #0]
 8032236:	68bb      	ldr	r3, [r7, #8]
 8032238:	0159      	lsls	r1, r3, #5
 803223a:	68fb      	ldr	r3, [r7, #12]
 803223c:	440b      	add	r3, r1
 803223e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032242:	4619      	mov	r1, r3
 8032244:	4b35      	ldr	r3, [pc, #212]	; (803231c <USB_DeactivateEndpoint+0x1b0>)
 8032246:	4013      	ands	r3, r2
 8032248:	600b      	str	r3, [r1, #0]
 803224a:	e060      	b.n	803230e <USB_DeactivateEndpoint+0x1a2>
 803224c:	68bb      	ldr	r3, [r7, #8]
 803224e:	015a      	lsls	r2, r3, #5
 8032250:	68fb      	ldr	r3, [r7, #12]
 8032252:	4413      	add	r3, r2
 8032254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032258:	681b      	ldr	r3, [r3, #0]
 803225a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803225e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032262:	d11f      	bne.n	80322a4 <USB_DeactivateEndpoint+0x138>
 8032264:	68bb      	ldr	r3, [r7, #8]
 8032266:	015a      	lsls	r2, r3, #5
 8032268:	68fb      	ldr	r3, [r7, #12]
 803226a:	4413      	add	r3, r2
 803226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032270:	681b      	ldr	r3, [r3, #0]
 8032272:	68ba      	ldr	r2, [r7, #8]
 8032274:	0151      	lsls	r1, r2, #5
 8032276:	68fa      	ldr	r2, [r7, #12]
 8032278:	440a      	add	r2, r1
 803227a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803227e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8032282:	6013      	str	r3, [r2, #0]
 8032284:	68bb      	ldr	r3, [r7, #8]
 8032286:	015a      	lsls	r2, r3, #5
 8032288:	68fb      	ldr	r3, [r7, #12]
 803228a:	4413      	add	r3, r2
 803228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032290:	681b      	ldr	r3, [r3, #0]
 8032292:	68ba      	ldr	r2, [r7, #8]
 8032294:	0151      	lsls	r1, r2, #5
 8032296:	68fa      	ldr	r2, [r7, #12]
 8032298:	440a      	add	r2, r1
 803229a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803229e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80322a2:	6013      	str	r3, [r2, #0]
 80322a4:	68fb      	ldr	r3, [r7, #12]
 80322a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80322aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80322ac:	683b      	ldr	r3, [r7, #0]
 80322ae:	781b      	ldrb	r3, [r3, #0]
 80322b0:	f003 030f 	and.w	r3, r3, #15
 80322b4:	2101      	movs	r1, #1
 80322b6:	fa01 f303 	lsl.w	r3, r1, r3
 80322ba:	041b      	lsls	r3, r3, #16
 80322bc:	43db      	mvns	r3, r3
 80322be:	68f9      	ldr	r1, [r7, #12]
 80322c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80322c4:	4013      	ands	r3, r2
 80322c6:	63cb      	str	r3, [r1, #60]	; 0x3c
 80322c8:	68fb      	ldr	r3, [r7, #12]
 80322ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80322ce:	69da      	ldr	r2, [r3, #28]
 80322d0:	683b      	ldr	r3, [r7, #0]
 80322d2:	781b      	ldrb	r3, [r3, #0]
 80322d4:	f003 030f 	and.w	r3, r3, #15
 80322d8:	2101      	movs	r1, #1
 80322da:	fa01 f303 	lsl.w	r3, r1, r3
 80322de:	041b      	lsls	r3, r3, #16
 80322e0:	43db      	mvns	r3, r3
 80322e2:	68f9      	ldr	r1, [r7, #12]
 80322e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80322e8:	4013      	ands	r3, r2
 80322ea:	61cb      	str	r3, [r1, #28]
 80322ec:	68bb      	ldr	r3, [r7, #8]
 80322ee:	015a      	lsls	r2, r3, #5
 80322f0:	68fb      	ldr	r3, [r7, #12]
 80322f2:	4413      	add	r3, r2
 80322f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80322f8:	681a      	ldr	r2, [r3, #0]
 80322fa:	68bb      	ldr	r3, [r7, #8]
 80322fc:	0159      	lsls	r1, r3, #5
 80322fe:	68fb      	ldr	r3, [r7, #12]
 8032300:	440b      	add	r3, r1
 8032302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032306:	4619      	mov	r1, r3
 8032308:	4b05      	ldr	r3, [pc, #20]	; (8032320 <USB_DeactivateEndpoint+0x1b4>)
 803230a:	4013      	ands	r3, r2
 803230c:	600b      	str	r3, [r1, #0]
 803230e:	2300      	movs	r3, #0
 8032310:	4618      	mov	r0, r3
 8032312:	3714      	adds	r7, #20
 8032314:	46bd      	mov	sp, r7
 8032316:	f85d 7b04 	ldr.w	r7, [sp], #4
 803231a:	4770      	bx	lr
 803231c:	ec337800 	.word	0xec337800
 8032320:	eff37800 	.word	0xeff37800

08032324 <USB_EPStartXfer>:
 8032324:	b580      	push	{r7, lr}
 8032326:	b08a      	sub	sp, #40	; 0x28
 8032328:	af02      	add	r7, sp, #8
 803232a:	60f8      	str	r0, [r7, #12]
 803232c:	60b9      	str	r1, [r7, #8]
 803232e:	4613      	mov	r3, r2
 8032330:	71fb      	strb	r3, [r7, #7]
 8032332:	68fb      	ldr	r3, [r7, #12]
 8032334:	61fb      	str	r3, [r7, #28]
 8032336:	68bb      	ldr	r3, [r7, #8]
 8032338:	781b      	ldrb	r3, [r3, #0]
 803233a:	61bb      	str	r3, [r7, #24]
 803233c:	68bb      	ldr	r3, [r7, #8]
 803233e:	785b      	ldrb	r3, [r3, #1]
 8032340:	2b01      	cmp	r3, #1
 8032342:	f040 8163 	bne.w	803260c <USB_EPStartXfer+0x2e8>
 8032346:	68bb      	ldr	r3, [r7, #8]
 8032348:	699b      	ldr	r3, [r3, #24]
 803234a:	2b00      	cmp	r3, #0
 803234c:	d132      	bne.n	80323b4 <USB_EPStartXfer+0x90>
 803234e:	69bb      	ldr	r3, [r7, #24]
 8032350:	015a      	lsls	r2, r3, #5
 8032352:	69fb      	ldr	r3, [r7, #28]
 8032354:	4413      	add	r3, r2
 8032356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803235a:	691a      	ldr	r2, [r3, #16]
 803235c:	69bb      	ldr	r3, [r7, #24]
 803235e:	0159      	lsls	r1, r3, #5
 8032360:	69fb      	ldr	r3, [r7, #28]
 8032362:	440b      	add	r3, r1
 8032364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032368:	4619      	mov	r1, r3
 803236a:	4ba5      	ldr	r3, [pc, #660]	; (8032600 <USB_EPStartXfer+0x2dc>)
 803236c:	4013      	ands	r3, r2
 803236e:	610b      	str	r3, [r1, #16]
 8032370:	69bb      	ldr	r3, [r7, #24]
 8032372:	015a      	lsls	r2, r3, #5
 8032374:	69fb      	ldr	r3, [r7, #28]
 8032376:	4413      	add	r3, r2
 8032378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803237c:	691b      	ldr	r3, [r3, #16]
 803237e:	69ba      	ldr	r2, [r7, #24]
 8032380:	0151      	lsls	r1, r2, #5
 8032382:	69fa      	ldr	r2, [r7, #28]
 8032384:	440a      	add	r2, r1
 8032386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803238a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803238e:	6113      	str	r3, [r2, #16]
 8032390:	69bb      	ldr	r3, [r7, #24]
 8032392:	015a      	lsls	r2, r3, #5
 8032394:	69fb      	ldr	r3, [r7, #28]
 8032396:	4413      	add	r3, r2
 8032398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803239c:	691a      	ldr	r2, [r3, #16]
 803239e:	69bb      	ldr	r3, [r7, #24]
 80323a0:	0159      	lsls	r1, r3, #5
 80323a2:	69fb      	ldr	r3, [r7, #28]
 80323a4:	440b      	add	r3, r1
 80323a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80323aa:	4619      	mov	r1, r3
 80323ac:	4b95      	ldr	r3, [pc, #596]	; (8032604 <USB_EPStartXfer+0x2e0>)
 80323ae:	4013      	ands	r3, r2
 80323b0:	610b      	str	r3, [r1, #16]
 80323b2:	e074      	b.n	803249e <USB_EPStartXfer+0x17a>
 80323b4:	69bb      	ldr	r3, [r7, #24]
 80323b6:	015a      	lsls	r2, r3, #5
 80323b8:	69fb      	ldr	r3, [r7, #28]
 80323ba:	4413      	add	r3, r2
 80323bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80323c0:	691a      	ldr	r2, [r3, #16]
 80323c2:	69bb      	ldr	r3, [r7, #24]
 80323c4:	0159      	lsls	r1, r3, #5
 80323c6:	69fb      	ldr	r3, [r7, #28]
 80323c8:	440b      	add	r3, r1
 80323ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80323ce:	4619      	mov	r1, r3
 80323d0:	4b8c      	ldr	r3, [pc, #560]	; (8032604 <USB_EPStartXfer+0x2e0>)
 80323d2:	4013      	ands	r3, r2
 80323d4:	610b      	str	r3, [r1, #16]
 80323d6:	69bb      	ldr	r3, [r7, #24]
 80323d8:	015a      	lsls	r2, r3, #5
 80323da:	69fb      	ldr	r3, [r7, #28]
 80323dc:	4413      	add	r3, r2
 80323de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80323e2:	691a      	ldr	r2, [r3, #16]
 80323e4:	69bb      	ldr	r3, [r7, #24]
 80323e6:	0159      	lsls	r1, r3, #5
 80323e8:	69fb      	ldr	r3, [r7, #28]
 80323ea:	440b      	add	r3, r1
 80323ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80323f0:	4619      	mov	r1, r3
 80323f2:	4b83      	ldr	r3, [pc, #524]	; (8032600 <USB_EPStartXfer+0x2dc>)
 80323f4:	4013      	ands	r3, r2
 80323f6:	610b      	str	r3, [r1, #16]
 80323f8:	69bb      	ldr	r3, [r7, #24]
 80323fa:	015a      	lsls	r2, r3, #5
 80323fc:	69fb      	ldr	r3, [r7, #28]
 80323fe:	4413      	add	r3, r2
 8032400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032404:	691a      	ldr	r2, [r3, #16]
 8032406:	68bb      	ldr	r3, [r7, #8]
 8032408:	6999      	ldr	r1, [r3, #24]
 803240a:	68bb      	ldr	r3, [r7, #8]
 803240c:	68db      	ldr	r3, [r3, #12]
 803240e:	440b      	add	r3, r1
 8032410:	1e59      	subs	r1, r3, #1
 8032412:	68bb      	ldr	r3, [r7, #8]
 8032414:	68db      	ldr	r3, [r3, #12]
 8032416:	fbb1 f3f3 	udiv	r3, r1, r3
 803241a:	04d9      	lsls	r1, r3, #19
 803241c:	4b7a      	ldr	r3, [pc, #488]	; (8032608 <USB_EPStartXfer+0x2e4>)
 803241e:	400b      	ands	r3, r1
 8032420:	69b9      	ldr	r1, [r7, #24]
 8032422:	0148      	lsls	r0, r1, #5
 8032424:	69f9      	ldr	r1, [r7, #28]
 8032426:	4401      	add	r1, r0
 8032428:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803242c:	4313      	orrs	r3, r2
 803242e:	610b      	str	r3, [r1, #16]
 8032430:	69bb      	ldr	r3, [r7, #24]
 8032432:	015a      	lsls	r2, r3, #5
 8032434:	69fb      	ldr	r3, [r7, #28]
 8032436:	4413      	add	r3, r2
 8032438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803243c:	691a      	ldr	r2, [r3, #16]
 803243e:	68bb      	ldr	r3, [r7, #8]
 8032440:	699b      	ldr	r3, [r3, #24]
 8032442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8032446:	69b9      	ldr	r1, [r7, #24]
 8032448:	0148      	lsls	r0, r1, #5
 803244a:	69f9      	ldr	r1, [r7, #28]
 803244c:	4401      	add	r1, r0
 803244e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8032452:	4313      	orrs	r3, r2
 8032454:	610b      	str	r3, [r1, #16]
 8032456:	68bb      	ldr	r3, [r7, #8]
 8032458:	791b      	ldrb	r3, [r3, #4]
 803245a:	2b01      	cmp	r3, #1
 803245c:	d11f      	bne.n	803249e <USB_EPStartXfer+0x17a>
 803245e:	69bb      	ldr	r3, [r7, #24]
 8032460:	015a      	lsls	r2, r3, #5
 8032462:	69fb      	ldr	r3, [r7, #28]
 8032464:	4413      	add	r3, r2
 8032466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803246a:	691b      	ldr	r3, [r3, #16]
 803246c:	69ba      	ldr	r2, [r7, #24]
 803246e:	0151      	lsls	r1, r2, #5
 8032470:	69fa      	ldr	r2, [r7, #28]
 8032472:	440a      	add	r2, r1
 8032474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032478:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 803247c:	6113      	str	r3, [r2, #16]
 803247e:	69bb      	ldr	r3, [r7, #24]
 8032480:	015a      	lsls	r2, r3, #5
 8032482:	69fb      	ldr	r3, [r7, #28]
 8032484:	4413      	add	r3, r2
 8032486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803248a:	691b      	ldr	r3, [r3, #16]
 803248c:	69ba      	ldr	r2, [r7, #24]
 803248e:	0151      	lsls	r1, r2, #5
 8032490:	69fa      	ldr	r2, [r7, #28]
 8032492:	440a      	add	r2, r1
 8032494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803249c:	6113      	str	r3, [r2, #16]
 803249e:	79fb      	ldrb	r3, [r7, #7]
 80324a0:	2b01      	cmp	r3, #1
 80324a2:	d14b      	bne.n	803253c <USB_EPStartXfer+0x218>
 80324a4:	68bb      	ldr	r3, [r7, #8]
 80324a6:	695b      	ldr	r3, [r3, #20]
 80324a8:	2b00      	cmp	r3, #0
 80324aa:	d009      	beq.n	80324c0 <USB_EPStartXfer+0x19c>
 80324ac:	69bb      	ldr	r3, [r7, #24]
 80324ae:	015a      	lsls	r2, r3, #5
 80324b0:	69fb      	ldr	r3, [r7, #28]
 80324b2:	4413      	add	r3, r2
 80324b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80324b8:	461a      	mov	r2, r3
 80324ba:	68bb      	ldr	r3, [r7, #8]
 80324bc:	695b      	ldr	r3, [r3, #20]
 80324be:	6153      	str	r3, [r2, #20]
 80324c0:	68bb      	ldr	r3, [r7, #8]
 80324c2:	791b      	ldrb	r3, [r3, #4]
 80324c4:	2b01      	cmp	r3, #1
 80324c6:	d128      	bne.n	803251a <USB_EPStartXfer+0x1f6>
 80324c8:	69fb      	ldr	r3, [r7, #28]
 80324ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80324ce:	689b      	ldr	r3, [r3, #8]
 80324d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80324d4:	2b00      	cmp	r3, #0
 80324d6:	d110      	bne.n	80324fa <USB_EPStartXfer+0x1d6>
 80324d8:	69bb      	ldr	r3, [r7, #24]
 80324da:	015a      	lsls	r2, r3, #5
 80324dc:	69fb      	ldr	r3, [r7, #28]
 80324de:	4413      	add	r3, r2
 80324e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80324e4:	681b      	ldr	r3, [r3, #0]
 80324e6:	69ba      	ldr	r2, [r7, #24]
 80324e8:	0151      	lsls	r1, r2, #5
 80324ea:	69fa      	ldr	r2, [r7, #28]
 80324ec:	440a      	add	r2, r1
 80324ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80324f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80324f6:	6013      	str	r3, [r2, #0]
 80324f8:	e00f      	b.n	803251a <USB_EPStartXfer+0x1f6>
 80324fa:	69bb      	ldr	r3, [r7, #24]
 80324fc:	015a      	lsls	r2, r3, #5
 80324fe:	69fb      	ldr	r3, [r7, #28]
 8032500:	4413      	add	r3, r2
 8032502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032506:	681b      	ldr	r3, [r3, #0]
 8032508:	69ba      	ldr	r2, [r7, #24]
 803250a:	0151      	lsls	r1, r2, #5
 803250c:	69fa      	ldr	r2, [r7, #28]
 803250e:	440a      	add	r2, r1
 8032510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8032518:	6013      	str	r3, [r2, #0]
 803251a:	69bb      	ldr	r3, [r7, #24]
 803251c:	015a      	lsls	r2, r3, #5
 803251e:	69fb      	ldr	r3, [r7, #28]
 8032520:	4413      	add	r3, r2
 8032522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032526:	681b      	ldr	r3, [r3, #0]
 8032528:	69ba      	ldr	r2, [r7, #24]
 803252a:	0151      	lsls	r1, r2, #5
 803252c:	69fa      	ldr	r2, [r7, #28]
 803252e:	440a      	add	r2, r1
 8032530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8032538:	6013      	str	r3, [r2, #0]
 803253a:	e137      	b.n	80327ac <USB_EPStartXfer+0x488>
 803253c:	69bb      	ldr	r3, [r7, #24]
 803253e:	015a      	lsls	r2, r3, #5
 8032540:	69fb      	ldr	r3, [r7, #28]
 8032542:	4413      	add	r3, r2
 8032544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032548:	681b      	ldr	r3, [r3, #0]
 803254a:	69ba      	ldr	r2, [r7, #24]
 803254c:	0151      	lsls	r1, r2, #5
 803254e:	69fa      	ldr	r2, [r7, #28]
 8032550:	440a      	add	r2, r1
 8032552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803255a:	6013      	str	r3, [r2, #0]
 803255c:	68bb      	ldr	r3, [r7, #8]
 803255e:	791b      	ldrb	r3, [r3, #4]
 8032560:	2b01      	cmp	r3, #1
 8032562:	d015      	beq.n	8032590 <USB_EPStartXfer+0x26c>
 8032564:	68bb      	ldr	r3, [r7, #8]
 8032566:	699b      	ldr	r3, [r3, #24]
 8032568:	2b00      	cmp	r3, #0
 803256a:	f000 811f 	beq.w	80327ac <USB_EPStartXfer+0x488>
 803256e:	69fb      	ldr	r3, [r7, #28]
 8032570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8032576:	68bb      	ldr	r3, [r7, #8]
 8032578:	781b      	ldrb	r3, [r3, #0]
 803257a:	f003 030f 	and.w	r3, r3, #15
 803257e:	2101      	movs	r1, #1
 8032580:	fa01 f303 	lsl.w	r3, r1, r3
 8032584:	69f9      	ldr	r1, [r7, #28]
 8032586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803258a:	4313      	orrs	r3, r2
 803258c:	634b      	str	r3, [r1, #52]	; 0x34
 803258e:	e10d      	b.n	80327ac <USB_EPStartXfer+0x488>
 8032590:	69fb      	ldr	r3, [r7, #28]
 8032592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032596:	689b      	ldr	r3, [r3, #8]
 8032598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803259c:	2b00      	cmp	r3, #0
 803259e:	d110      	bne.n	80325c2 <USB_EPStartXfer+0x29e>
 80325a0:	69bb      	ldr	r3, [r7, #24]
 80325a2:	015a      	lsls	r2, r3, #5
 80325a4:	69fb      	ldr	r3, [r7, #28]
 80325a6:	4413      	add	r3, r2
 80325a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80325ac:	681b      	ldr	r3, [r3, #0]
 80325ae:	69ba      	ldr	r2, [r7, #24]
 80325b0:	0151      	lsls	r1, r2, #5
 80325b2:	69fa      	ldr	r2, [r7, #28]
 80325b4:	440a      	add	r2, r1
 80325b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80325ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80325be:	6013      	str	r3, [r2, #0]
 80325c0:	e00f      	b.n	80325e2 <USB_EPStartXfer+0x2be>
 80325c2:	69bb      	ldr	r3, [r7, #24]
 80325c4:	015a      	lsls	r2, r3, #5
 80325c6:	69fb      	ldr	r3, [r7, #28]
 80325c8:	4413      	add	r3, r2
 80325ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80325ce:	681b      	ldr	r3, [r3, #0]
 80325d0:	69ba      	ldr	r2, [r7, #24]
 80325d2:	0151      	lsls	r1, r2, #5
 80325d4:	69fa      	ldr	r2, [r7, #28]
 80325d6:	440a      	add	r2, r1
 80325d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80325dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80325e0:	6013      	str	r3, [r2, #0]
 80325e2:	68bb      	ldr	r3, [r7, #8]
 80325e4:	6919      	ldr	r1, [r3, #16]
 80325e6:	68bb      	ldr	r3, [r7, #8]
 80325e8:	781a      	ldrb	r2, [r3, #0]
 80325ea:	68bb      	ldr	r3, [r7, #8]
 80325ec:	699b      	ldr	r3, [r3, #24]
 80325ee:	b298      	uxth	r0, r3
 80325f0:	79fb      	ldrb	r3, [r7, #7]
 80325f2:	9300      	str	r3, [sp, #0]
 80325f4:	4603      	mov	r3, r0
 80325f6:	68f8      	ldr	r0, [r7, #12]
 80325f8:	f000 faea 	bl	8032bd0 <USB_WritePacket>
 80325fc:	e0d6      	b.n	80327ac <USB_EPStartXfer+0x488>
 80325fe:	bf00      	nop
 8032600:	e007ffff 	.word	0xe007ffff
 8032604:	fff80000 	.word	0xfff80000
 8032608:	1ff80000 	.word	0x1ff80000
 803260c:	69bb      	ldr	r3, [r7, #24]
 803260e:	015a      	lsls	r2, r3, #5
 8032610:	69fb      	ldr	r3, [r7, #28]
 8032612:	4413      	add	r3, r2
 8032614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032618:	691a      	ldr	r2, [r3, #16]
 803261a:	69bb      	ldr	r3, [r7, #24]
 803261c:	0159      	lsls	r1, r3, #5
 803261e:	69fb      	ldr	r3, [r7, #28]
 8032620:	440b      	add	r3, r1
 8032622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032626:	4619      	mov	r1, r3
 8032628:	4b63      	ldr	r3, [pc, #396]	; (80327b8 <USB_EPStartXfer+0x494>)
 803262a:	4013      	ands	r3, r2
 803262c:	610b      	str	r3, [r1, #16]
 803262e:	69bb      	ldr	r3, [r7, #24]
 8032630:	015a      	lsls	r2, r3, #5
 8032632:	69fb      	ldr	r3, [r7, #28]
 8032634:	4413      	add	r3, r2
 8032636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803263a:	691a      	ldr	r2, [r3, #16]
 803263c:	69bb      	ldr	r3, [r7, #24]
 803263e:	0159      	lsls	r1, r3, #5
 8032640:	69fb      	ldr	r3, [r7, #28]
 8032642:	440b      	add	r3, r1
 8032644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032648:	4619      	mov	r1, r3
 803264a:	4b5c      	ldr	r3, [pc, #368]	; (80327bc <USB_EPStartXfer+0x498>)
 803264c:	4013      	ands	r3, r2
 803264e:	610b      	str	r3, [r1, #16]
 8032650:	68bb      	ldr	r3, [r7, #8]
 8032652:	699b      	ldr	r3, [r3, #24]
 8032654:	2b00      	cmp	r3, #0
 8032656:	d123      	bne.n	80326a0 <USB_EPStartXfer+0x37c>
 8032658:	69bb      	ldr	r3, [r7, #24]
 803265a:	015a      	lsls	r2, r3, #5
 803265c:	69fb      	ldr	r3, [r7, #28]
 803265e:	4413      	add	r3, r2
 8032660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032664:	691a      	ldr	r2, [r3, #16]
 8032666:	68bb      	ldr	r3, [r7, #8]
 8032668:	68db      	ldr	r3, [r3, #12]
 803266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803266e:	69b9      	ldr	r1, [r7, #24]
 8032670:	0148      	lsls	r0, r1, #5
 8032672:	69f9      	ldr	r1, [r7, #28]
 8032674:	4401      	add	r1, r0
 8032676:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803267a:	4313      	orrs	r3, r2
 803267c:	610b      	str	r3, [r1, #16]
 803267e:	69bb      	ldr	r3, [r7, #24]
 8032680:	015a      	lsls	r2, r3, #5
 8032682:	69fb      	ldr	r3, [r7, #28]
 8032684:	4413      	add	r3, r2
 8032686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803268a:	691b      	ldr	r3, [r3, #16]
 803268c:	69ba      	ldr	r2, [r7, #24]
 803268e:	0151      	lsls	r1, r2, #5
 8032690:	69fa      	ldr	r2, [r7, #28]
 8032692:	440a      	add	r2, r1
 8032694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803269c:	6113      	str	r3, [r2, #16]
 803269e:	e037      	b.n	8032710 <USB_EPStartXfer+0x3ec>
 80326a0:	68bb      	ldr	r3, [r7, #8]
 80326a2:	699a      	ldr	r2, [r3, #24]
 80326a4:	68bb      	ldr	r3, [r7, #8]
 80326a6:	68db      	ldr	r3, [r3, #12]
 80326a8:	4413      	add	r3, r2
 80326aa:	1e5a      	subs	r2, r3, #1
 80326ac:	68bb      	ldr	r3, [r7, #8]
 80326ae:	68db      	ldr	r3, [r3, #12]
 80326b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80326b4:	82fb      	strh	r3, [r7, #22]
 80326b6:	68bb      	ldr	r3, [r7, #8]
 80326b8:	68db      	ldr	r3, [r3, #12]
 80326ba:	8afa      	ldrh	r2, [r7, #22]
 80326bc:	fb03 f202 	mul.w	r2, r3, r2
 80326c0:	68bb      	ldr	r3, [r7, #8]
 80326c2:	61da      	str	r2, [r3, #28]
 80326c4:	69bb      	ldr	r3, [r7, #24]
 80326c6:	015a      	lsls	r2, r3, #5
 80326c8:	69fb      	ldr	r3, [r7, #28]
 80326ca:	4413      	add	r3, r2
 80326cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80326d0:	691a      	ldr	r2, [r3, #16]
 80326d2:	8afb      	ldrh	r3, [r7, #22]
 80326d4:	04d9      	lsls	r1, r3, #19
 80326d6:	4b3a      	ldr	r3, [pc, #232]	; (80327c0 <USB_EPStartXfer+0x49c>)
 80326d8:	400b      	ands	r3, r1
 80326da:	69b9      	ldr	r1, [r7, #24]
 80326dc:	0148      	lsls	r0, r1, #5
 80326de:	69f9      	ldr	r1, [r7, #28]
 80326e0:	4401      	add	r1, r0
 80326e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80326e6:	4313      	orrs	r3, r2
 80326e8:	610b      	str	r3, [r1, #16]
 80326ea:	69bb      	ldr	r3, [r7, #24]
 80326ec:	015a      	lsls	r2, r3, #5
 80326ee:	69fb      	ldr	r3, [r7, #28]
 80326f0:	4413      	add	r3, r2
 80326f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80326f6:	691a      	ldr	r2, [r3, #16]
 80326f8:	68bb      	ldr	r3, [r7, #8]
 80326fa:	69db      	ldr	r3, [r3, #28]
 80326fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8032700:	69b9      	ldr	r1, [r7, #24]
 8032702:	0148      	lsls	r0, r1, #5
 8032704:	69f9      	ldr	r1, [r7, #28]
 8032706:	4401      	add	r1, r0
 8032708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803270c:	4313      	orrs	r3, r2
 803270e:	610b      	str	r3, [r1, #16]
 8032710:	79fb      	ldrb	r3, [r7, #7]
 8032712:	2b01      	cmp	r3, #1
 8032714:	d10d      	bne.n	8032732 <USB_EPStartXfer+0x40e>
 8032716:	68bb      	ldr	r3, [r7, #8]
 8032718:	691b      	ldr	r3, [r3, #16]
 803271a:	2b00      	cmp	r3, #0
 803271c:	d009      	beq.n	8032732 <USB_EPStartXfer+0x40e>
 803271e:	68bb      	ldr	r3, [r7, #8]
 8032720:	6919      	ldr	r1, [r3, #16]
 8032722:	69bb      	ldr	r3, [r7, #24]
 8032724:	015a      	lsls	r2, r3, #5
 8032726:	69fb      	ldr	r3, [r7, #28]
 8032728:	4413      	add	r3, r2
 803272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803272e:	460a      	mov	r2, r1
 8032730:	615a      	str	r2, [r3, #20]
 8032732:	68bb      	ldr	r3, [r7, #8]
 8032734:	791b      	ldrb	r3, [r3, #4]
 8032736:	2b01      	cmp	r3, #1
 8032738:	d128      	bne.n	803278c <USB_EPStartXfer+0x468>
 803273a:	69fb      	ldr	r3, [r7, #28]
 803273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032740:	689b      	ldr	r3, [r3, #8]
 8032742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032746:	2b00      	cmp	r3, #0
 8032748:	d110      	bne.n	803276c <USB_EPStartXfer+0x448>
 803274a:	69bb      	ldr	r3, [r7, #24]
 803274c:	015a      	lsls	r2, r3, #5
 803274e:	69fb      	ldr	r3, [r7, #28]
 8032750:	4413      	add	r3, r2
 8032752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032756:	681b      	ldr	r3, [r3, #0]
 8032758:	69ba      	ldr	r2, [r7, #24]
 803275a:	0151      	lsls	r1, r2, #5
 803275c:	69fa      	ldr	r2, [r7, #28]
 803275e:	440a      	add	r2, r1
 8032760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032764:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8032768:	6013      	str	r3, [r2, #0]
 803276a:	e00f      	b.n	803278c <USB_EPStartXfer+0x468>
 803276c:	69bb      	ldr	r3, [r7, #24]
 803276e:	015a      	lsls	r2, r3, #5
 8032770:	69fb      	ldr	r3, [r7, #28]
 8032772:	4413      	add	r3, r2
 8032774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032778:	681b      	ldr	r3, [r3, #0]
 803277a:	69ba      	ldr	r2, [r7, #24]
 803277c:	0151      	lsls	r1, r2, #5
 803277e:	69fa      	ldr	r2, [r7, #28]
 8032780:	440a      	add	r2, r1
 8032782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803278a:	6013      	str	r3, [r2, #0]
 803278c:	69bb      	ldr	r3, [r7, #24]
 803278e:	015a      	lsls	r2, r3, #5
 8032790:	69fb      	ldr	r3, [r7, #28]
 8032792:	4413      	add	r3, r2
 8032794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032798:	681b      	ldr	r3, [r3, #0]
 803279a:	69ba      	ldr	r2, [r7, #24]
 803279c:	0151      	lsls	r1, r2, #5
 803279e:	69fa      	ldr	r2, [r7, #28]
 80327a0:	440a      	add	r2, r1
 80327a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80327a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80327aa:	6013      	str	r3, [r2, #0]
 80327ac:	2300      	movs	r3, #0
 80327ae:	4618      	mov	r0, r3
 80327b0:	3720      	adds	r7, #32
 80327b2:	46bd      	mov	sp, r7
 80327b4:	bd80      	pop	{r7, pc}
 80327b6:	bf00      	nop
 80327b8:	fff80000 	.word	0xfff80000
 80327bc:	e007ffff 	.word	0xe007ffff
 80327c0:	1ff80000 	.word	0x1ff80000

080327c4 <USB_EP0StartXfer>:
 80327c4:	b480      	push	{r7}
 80327c6:	b087      	sub	sp, #28
 80327c8:	af00      	add	r7, sp, #0
 80327ca:	60f8      	str	r0, [r7, #12]
 80327cc:	60b9      	str	r1, [r7, #8]
 80327ce:	4613      	mov	r3, r2
 80327d0:	71fb      	strb	r3, [r7, #7]
 80327d2:	68fb      	ldr	r3, [r7, #12]
 80327d4:	617b      	str	r3, [r7, #20]
 80327d6:	68bb      	ldr	r3, [r7, #8]
 80327d8:	781b      	ldrb	r3, [r3, #0]
 80327da:	613b      	str	r3, [r7, #16]
 80327dc:	68bb      	ldr	r3, [r7, #8]
 80327de:	785b      	ldrb	r3, [r3, #1]
 80327e0:	2b01      	cmp	r3, #1
 80327e2:	f040 80ce 	bne.w	8032982 <USB_EP0StartXfer+0x1be>
 80327e6:	68bb      	ldr	r3, [r7, #8]
 80327e8:	699b      	ldr	r3, [r3, #24]
 80327ea:	2b00      	cmp	r3, #0
 80327ec:	d132      	bne.n	8032854 <USB_EP0StartXfer+0x90>
 80327ee:	693b      	ldr	r3, [r7, #16]
 80327f0:	015a      	lsls	r2, r3, #5
 80327f2:	697b      	ldr	r3, [r7, #20]
 80327f4:	4413      	add	r3, r2
 80327f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80327fa:	691a      	ldr	r2, [r3, #16]
 80327fc:	693b      	ldr	r3, [r7, #16]
 80327fe:	0159      	lsls	r1, r3, #5
 8032800:	697b      	ldr	r3, [r7, #20]
 8032802:	440b      	add	r3, r1
 8032804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032808:	4619      	mov	r1, r3
 803280a:	4b9a      	ldr	r3, [pc, #616]	; (8032a74 <USB_EP0StartXfer+0x2b0>)
 803280c:	4013      	ands	r3, r2
 803280e:	610b      	str	r3, [r1, #16]
 8032810:	693b      	ldr	r3, [r7, #16]
 8032812:	015a      	lsls	r2, r3, #5
 8032814:	697b      	ldr	r3, [r7, #20]
 8032816:	4413      	add	r3, r2
 8032818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803281c:	691b      	ldr	r3, [r3, #16]
 803281e:	693a      	ldr	r2, [r7, #16]
 8032820:	0151      	lsls	r1, r2, #5
 8032822:	697a      	ldr	r2, [r7, #20]
 8032824:	440a      	add	r2, r1
 8032826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803282a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803282e:	6113      	str	r3, [r2, #16]
 8032830:	693b      	ldr	r3, [r7, #16]
 8032832:	015a      	lsls	r2, r3, #5
 8032834:	697b      	ldr	r3, [r7, #20]
 8032836:	4413      	add	r3, r2
 8032838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803283c:	691a      	ldr	r2, [r3, #16]
 803283e:	693b      	ldr	r3, [r7, #16]
 8032840:	0159      	lsls	r1, r3, #5
 8032842:	697b      	ldr	r3, [r7, #20]
 8032844:	440b      	add	r3, r1
 8032846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803284a:	4619      	mov	r1, r3
 803284c:	4b8a      	ldr	r3, [pc, #552]	; (8032a78 <USB_EP0StartXfer+0x2b4>)
 803284e:	4013      	ands	r3, r2
 8032850:	610b      	str	r3, [r1, #16]
 8032852:	e04e      	b.n	80328f2 <USB_EP0StartXfer+0x12e>
 8032854:	693b      	ldr	r3, [r7, #16]
 8032856:	015a      	lsls	r2, r3, #5
 8032858:	697b      	ldr	r3, [r7, #20]
 803285a:	4413      	add	r3, r2
 803285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032860:	691a      	ldr	r2, [r3, #16]
 8032862:	693b      	ldr	r3, [r7, #16]
 8032864:	0159      	lsls	r1, r3, #5
 8032866:	697b      	ldr	r3, [r7, #20]
 8032868:	440b      	add	r3, r1
 803286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803286e:	4619      	mov	r1, r3
 8032870:	4b81      	ldr	r3, [pc, #516]	; (8032a78 <USB_EP0StartXfer+0x2b4>)
 8032872:	4013      	ands	r3, r2
 8032874:	610b      	str	r3, [r1, #16]
 8032876:	693b      	ldr	r3, [r7, #16]
 8032878:	015a      	lsls	r2, r3, #5
 803287a:	697b      	ldr	r3, [r7, #20]
 803287c:	4413      	add	r3, r2
 803287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032882:	691a      	ldr	r2, [r3, #16]
 8032884:	693b      	ldr	r3, [r7, #16]
 8032886:	0159      	lsls	r1, r3, #5
 8032888:	697b      	ldr	r3, [r7, #20]
 803288a:	440b      	add	r3, r1
 803288c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032890:	4619      	mov	r1, r3
 8032892:	4b78      	ldr	r3, [pc, #480]	; (8032a74 <USB_EP0StartXfer+0x2b0>)
 8032894:	4013      	ands	r3, r2
 8032896:	610b      	str	r3, [r1, #16]
 8032898:	68bb      	ldr	r3, [r7, #8]
 803289a:	699a      	ldr	r2, [r3, #24]
 803289c:	68bb      	ldr	r3, [r7, #8]
 803289e:	68db      	ldr	r3, [r3, #12]
 80328a0:	429a      	cmp	r2, r3
 80328a2:	d903      	bls.n	80328ac <USB_EP0StartXfer+0xe8>
 80328a4:	68bb      	ldr	r3, [r7, #8]
 80328a6:	68da      	ldr	r2, [r3, #12]
 80328a8:	68bb      	ldr	r3, [r7, #8]
 80328aa:	619a      	str	r2, [r3, #24]
 80328ac:	693b      	ldr	r3, [r7, #16]
 80328ae:	015a      	lsls	r2, r3, #5
 80328b0:	697b      	ldr	r3, [r7, #20]
 80328b2:	4413      	add	r3, r2
 80328b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80328b8:	691b      	ldr	r3, [r3, #16]
 80328ba:	693a      	ldr	r2, [r7, #16]
 80328bc:	0151      	lsls	r1, r2, #5
 80328be:	697a      	ldr	r2, [r7, #20]
 80328c0:	440a      	add	r2, r1
 80328c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80328c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80328ca:	6113      	str	r3, [r2, #16]
 80328cc:	693b      	ldr	r3, [r7, #16]
 80328ce:	015a      	lsls	r2, r3, #5
 80328d0:	697b      	ldr	r3, [r7, #20]
 80328d2:	4413      	add	r3, r2
 80328d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80328d8:	691a      	ldr	r2, [r3, #16]
 80328da:	68bb      	ldr	r3, [r7, #8]
 80328dc:	699b      	ldr	r3, [r3, #24]
 80328de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80328e2:	6939      	ldr	r1, [r7, #16]
 80328e4:	0148      	lsls	r0, r1, #5
 80328e6:	6979      	ldr	r1, [r7, #20]
 80328e8:	4401      	add	r1, r0
 80328ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80328ee:	4313      	orrs	r3, r2
 80328f0:	610b      	str	r3, [r1, #16]
 80328f2:	79fb      	ldrb	r3, [r7, #7]
 80328f4:	2b01      	cmp	r3, #1
 80328f6:	d11e      	bne.n	8032936 <USB_EP0StartXfer+0x172>
 80328f8:	68bb      	ldr	r3, [r7, #8]
 80328fa:	695b      	ldr	r3, [r3, #20]
 80328fc:	2b00      	cmp	r3, #0
 80328fe:	d009      	beq.n	8032914 <USB_EP0StartXfer+0x150>
 8032900:	693b      	ldr	r3, [r7, #16]
 8032902:	015a      	lsls	r2, r3, #5
 8032904:	697b      	ldr	r3, [r7, #20]
 8032906:	4413      	add	r3, r2
 8032908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803290c:	461a      	mov	r2, r3
 803290e:	68bb      	ldr	r3, [r7, #8]
 8032910:	695b      	ldr	r3, [r3, #20]
 8032912:	6153      	str	r3, [r2, #20]
 8032914:	693b      	ldr	r3, [r7, #16]
 8032916:	015a      	lsls	r2, r3, #5
 8032918:	697b      	ldr	r3, [r7, #20]
 803291a:	4413      	add	r3, r2
 803291c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032920:	681b      	ldr	r3, [r3, #0]
 8032922:	693a      	ldr	r2, [r7, #16]
 8032924:	0151      	lsls	r1, r2, #5
 8032926:	697a      	ldr	r2, [r7, #20]
 8032928:	440a      	add	r2, r1
 803292a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803292e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8032932:	6013      	str	r3, [r2, #0]
 8032934:	e097      	b.n	8032a66 <USB_EP0StartXfer+0x2a2>
 8032936:	693b      	ldr	r3, [r7, #16]
 8032938:	015a      	lsls	r2, r3, #5
 803293a:	697b      	ldr	r3, [r7, #20]
 803293c:	4413      	add	r3, r2
 803293e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032942:	681b      	ldr	r3, [r3, #0]
 8032944:	693a      	ldr	r2, [r7, #16]
 8032946:	0151      	lsls	r1, r2, #5
 8032948:	697a      	ldr	r2, [r7, #20]
 803294a:	440a      	add	r2, r1
 803294c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8032954:	6013      	str	r3, [r2, #0]
 8032956:	68bb      	ldr	r3, [r7, #8]
 8032958:	699b      	ldr	r3, [r3, #24]
 803295a:	2b00      	cmp	r3, #0
 803295c:	f000 8083 	beq.w	8032a66 <USB_EP0StartXfer+0x2a2>
 8032960:	697b      	ldr	r3, [r7, #20]
 8032962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8032968:	68bb      	ldr	r3, [r7, #8]
 803296a:	781b      	ldrb	r3, [r3, #0]
 803296c:	f003 030f 	and.w	r3, r3, #15
 8032970:	2101      	movs	r1, #1
 8032972:	fa01 f303 	lsl.w	r3, r1, r3
 8032976:	6979      	ldr	r1, [r7, #20]
 8032978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803297c:	4313      	orrs	r3, r2
 803297e:	634b      	str	r3, [r1, #52]	; 0x34
 8032980:	e071      	b.n	8032a66 <USB_EP0StartXfer+0x2a2>
 8032982:	693b      	ldr	r3, [r7, #16]
 8032984:	015a      	lsls	r2, r3, #5
 8032986:	697b      	ldr	r3, [r7, #20]
 8032988:	4413      	add	r3, r2
 803298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803298e:	691a      	ldr	r2, [r3, #16]
 8032990:	693b      	ldr	r3, [r7, #16]
 8032992:	0159      	lsls	r1, r3, #5
 8032994:	697b      	ldr	r3, [r7, #20]
 8032996:	440b      	add	r3, r1
 8032998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803299c:	4619      	mov	r1, r3
 803299e:	4b36      	ldr	r3, [pc, #216]	; (8032a78 <USB_EP0StartXfer+0x2b4>)
 80329a0:	4013      	ands	r3, r2
 80329a2:	610b      	str	r3, [r1, #16]
 80329a4:	693b      	ldr	r3, [r7, #16]
 80329a6:	015a      	lsls	r2, r3, #5
 80329a8:	697b      	ldr	r3, [r7, #20]
 80329aa:	4413      	add	r3, r2
 80329ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80329b0:	691a      	ldr	r2, [r3, #16]
 80329b2:	693b      	ldr	r3, [r7, #16]
 80329b4:	0159      	lsls	r1, r3, #5
 80329b6:	697b      	ldr	r3, [r7, #20]
 80329b8:	440b      	add	r3, r1
 80329ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80329be:	4619      	mov	r1, r3
 80329c0:	4b2c      	ldr	r3, [pc, #176]	; (8032a74 <USB_EP0StartXfer+0x2b0>)
 80329c2:	4013      	ands	r3, r2
 80329c4:	610b      	str	r3, [r1, #16]
 80329c6:	68bb      	ldr	r3, [r7, #8]
 80329c8:	699b      	ldr	r3, [r3, #24]
 80329ca:	2b00      	cmp	r3, #0
 80329cc:	d003      	beq.n	80329d6 <USB_EP0StartXfer+0x212>
 80329ce:	68bb      	ldr	r3, [r7, #8]
 80329d0:	68da      	ldr	r2, [r3, #12]
 80329d2:	68bb      	ldr	r3, [r7, #8]
 80329d4:	619a      	str	r2, [r3, #24]
 80329d6:	68bb      	ldr	r3, [r7, #8]
 80329d8:	68da      	ldr	r2, [r3, #12]
 80329da:	68bb      	ldr	r3, [r7, #8]
 80329dc:	61da      	str	r2, [r3, #28]
 80329de:	693b      	ldr	r3, [r7, #16]
 80329e0:	015a      	lsls	r2, r3, #5
 80329e2:	697b      	ldr	r3, [r7, #20]
 80329e4:	4413      	add	r3, r2
 80329e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80329ea:	691b      	ldr	r3, [r3, #16]
 80329ec:	693a      	ldr	r2, [r7, #16]
 80329ee:	0151      	lsls	r1, r2, #5
 80329f0:	697a      	ldr	r2, [r7, #20]
 80329f2:	440a      	add	r2, r1
 80329f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80329f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80329fc:	6113      	str	r3, [r2, #16]
 80329fe:	693b      	ldr	r3, [r7, #16]
 8032a00:	015a      	lsls	r2, r3, #5
 8032a02:	697b      	ldr	r3, [r7, #20]
 8032a04:	4413      	add	r3, r2
 8032a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032a0a:	691a      	ldr	r2, [r3, #16]
 8032a0c:	68bb      	ldr	r3, [r7, #8]
 8032a0e:	69db      	ldr	r3, [r3, #28]
 8032a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8032a14:	6939      	ldr	r1, [r7, #16]
 8032a16:	0148      	lsls	r0, r1, #5
 8032a18:	6979      	ldr	r1, [r7, #20]
 8032a1a:	4401      	add	r1, r0
 8032a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8032a20:	4313      	orrs	r3, r2
 8032a22:	610b      	str	r3, [r1, #16]
 8032a24:	79fb      	ldrb	r3, [r7, #7]
 8032a26:	2b01      	cmp	r3, #1
 8032a28:	d10d      	bne.n	8032a46 <USB_EP0StartXfer+0x282>
 8032a2a:	68bb      	ldr	r3, [r7, #8]
 8032a2c:	691b      	ldr	r3, [r3, #16]
 8032a2e:	2b00      	cmp	r3, #0
 8032a30:	d009      	beq.n	8032a46 <USB_EP0StartXfer+0x282>
 8032a32:	68bb      	ldr	r3, [r7, #8]
 8032a34:	6919      	ldr	r1, [r3, #16]
 8032a36:	693b      	ldr	r3, [r7, #16]
 8032a38:	015a      	lsls	r2, r3, #5
 8032a3a:	697b      	ldr	r3, [r7, #20]
 8032a3c:	4413      	add	r3, r2
 8032a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032a42:	460a      	mov	r2, r1
 8032a44:	615a      	str	r2, [r3, #20]
 8032a46:	693b      	ldr	r3, [r7, #16]
 8032a48:	015a      	lsls	r2, r3, #5
 8032a4a:	697b      	ldr	r3, [r7, #20]
 8032a4c:	4413      	add	r3, r2
 8032a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032a52:	681b      	ldr	r3, [r3, #0]
 8032a54:	693a      	ldr	r2, [r7, #16]
 8032a56:	0151      	lsls	r1, r2, #5
 8032a58:	697a      	ldr	r2, [r7, #20]
 8032a5a:	440a      	add	r2, r1
 8032a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8032a64:	6013      	str	r3, [r2, #0]
 8032a66:	2300      	movs	r3, #0
 8032a68:	4618      	mov	r0, r3
 8032a6a:	371c      	adds	r7, #28
 8032a6c:	46bd      	mov	sp, r7
 8032a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a72:	4770      	bx	lr
 8032a74:	e007ffff 	.word	0xe007ffff
 8032a78:	fff80000 	.word	0xfff80000

08032a7c <USB_EPStopXfer>:
 8032a7c:	b480      	push	{r7}
 8032a7e:	b087      	sub	sp, #28
 8032a80:	af00      	add	r7, sp, #0
 8032a82:	6078      	str	r0, [r7, #4]
 8032a84:	6039      	str	r1, [r7, #0]
 8032a86:	2300      	movs	r3, #0
 8032a88:	60fb      	str	r3, [r7, #12]
 8032a8a:	2300      	movs	r3, #0
 8032a8c:	75fb      	strb	r3, [r7, #23]
 8032a8e:	687b      	ldr	r3, [r7, #4]
 8032a90:	613b      	str	r3, [r7, #16]
 8032a92:	683b      	ldr	r3, [r7, #0]
 8032a94:	785b      	ldrb	r3, [r3, #1]
 8032a96:	2b01      	cmp	r3, #1
 8032a98:	d14a      	bne.n	8032b30 <USB_EPStopXfer+0xb4>
 8032a9a:	683b      	ldr	r3, [r7, #0]
 8032a9c:	781b      	ldrb	r3, [r3, #0]
 8032a9e:	015a      	lsls	r2, r3, #5
 8032aa0:	693b      	ldr	r3, [r7, #16]
 8032aa2:	4413      	add	r3, r2
 8032aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032aa8:	681b      	ldr	r3, [r3, #0]
 8032aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8032aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032ab2:	f040 8086 	bne.w	8032bc2 <USB_EPStopXfer+0x146>
 8032ab6:	683b      	ldr	r3, [r7, #0]
 8032ab8:	781b      	ldrb	r3, [r3, #0]
 8032aba:	015a      	lsls	r2, r3, #5
 8032abc:	693b      	ldr	r3, [r7, #16]
 8032abe:	4413      	add	r3, r2
 8032ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032ac4:	681b      	ldr	r3, [r3, #0]
 8032ac6:	683a      	ldr	r2, [r7, #0]
 8032ac8:	7812      	ldrb	r2, [r2, #0]
 8032aca:	0151      	lsls	r1, r2, #5
 8032acc:	693a      	ldr	r2, [r7, #16]
 8032ace:	440a      	add	r2, r1
 8032ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032ad4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8032ad8:	6013      	str	r3, [r2, #0]
 8032ada:	683b      	ldr	r3, [r7, #0]
 8032adc:	781b      	ldrb	r3, [r3, #0]
 8032ade:	015a      	lsls	r2, r3, #5
 8032ae0:	693b      	ldr	r3, [r7, #16]
 8032ae2:	4413      	add	r3, r2
 8032ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032ae8:	681b      	ldr	r3, [r3, #0]
 8032aea:	683a      	ldr	r2, [r7, #0]
 8032aec:	7812      	ldrb	r2, [r2, #0]
 8032aee:	0151      	lsls	r1, r2, #5
 8032af0:	693a      	ldr	r2, [r7, #16]
 8032af2:	440a      	add	r2, r1
 8032af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8032afc:	6013      	str	r3, [r2, #0]
 8032afe:	68fb      	ldr	r3, [r7, #12]
 8032b00:	3301      	adds	r3, #1
 8032b02:	60fb      	str	r3, [r7, #12]
 8032b04:	68fb      	ldr	r3, [r7, #12]
 8032b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8032b0a:	4293      	cmp	r3, r2
 8032b0c:	d902      	bls.n	8032b14 <USB_EPStopXfer+0x98>
 8032b0e:	2301      	movs	r3, #1
 8032b10:	75fb      	strb	r3, [r7, #23]
 8032b12:	e056      	b.n	8032bc2 <USB_EPStopXfer+0x146>
 8032b14:	683b      	ldr	r3, [r7, #0]
 8032b16:	781b      	ldrb	r3, [r3, #0]
 8032b18:	015a      	lsls	r2, r3, #5
 8032b1a:	693b      	ldr	r3, [r7, #16]
 8032b1c:	4413      	add	r3, r2
 8032b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032b22:	681b      	ldr	r3, [r3, #0]
 8032b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8032b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032b2c:	d0e7      	beq.n	8032afe <USB_EPStopXfer+0x82>
 8032b2e:	e048      	b.n	8032bc2 <USB_EPStopXfer+0x146>
 8032b30:	683b      	ldr	r3, [r7, #0]
 8032b32:	781b      	ldrb	r3, [r3, #0]
 8032b34:	015a      	lsls	r2, r3, #5
 8032b36:	693b      	ldr	r3, [r7, #16]
 8032b38:	4413      	add	r3, r2
 8032b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032b3e:	681b      	ldr	r3, [r3, #0]
 8032b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8032b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032b48:	d13b      	bne.n	8032bc2 <USB_EPStopXfer+0x146>
 8032b4a:	683b      	ldr	r3, [r7, #0]
 8032b4c:	781b      	ldrb	r3, [r3, #0]
 8032b4e:	015a      	lsls	r2, r3, #5
 8032b50:	693b      	ldr	r3, [r7, #16]
 8032b52:	4413      	add	r3, r2
 8032b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032b58:	681b      	ldr	r3, [r3, #0]
 8032b5a:	683a      	ldr	r2, [r7, #0]
 8032b5c:	7812      	ldrb	r2, [r2, #0]
 8032b5e:	0151      	lsls	r1, r2, #5
 8032b60:	693a      	ldr	r2, [r7, #16]
 8032b62:	440a      	add	r2, r1
 8032b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032b68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8032b6c:	6013      	str	r3, [r2, #0]
 8032b6e:	683b      	ldr	r3, [r7, #0]
 8032b70:	781b      	ldrb	r3, [r3, #0]
 8032b72:	015a      	lsls	r2, r3, #5
 8032b74:	693b      	ldr	r3, [r7, #16]
 8032b76:	4413      	add	r3, r2
 8032b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032b7c:	681b      	ldr	r3, [r3, #0]
 8032b7e:	683a      	ldr	r2, [r7, #0]
 8032b80:	7812      	ldrb	r2, [r2, #0]
 8032b82:	0151      	lsls	r1, r2, #5
 8032b84:	693a      	ldr	r2, [r7, #16]
 8032b86:	440a      	add	r2, r1
 8032b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8032b90:	6013      	str	r3, [r2, #0]
 8032b92:	68fb      	ldr	r3, [r7, #12]
 8032b94:	3301      	adds	r3, #1
 8032b96:	60fb      	str	r3, [r7, #12]
 8032b98:	68fb      	ldr	r3, [r7, #12]
 8032b9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8032b9e:	4293      	cmp	r3, r2
 8032ba0:	d902      	bls.n	8032ba8 <USB_EPStopXfer+0x12c>
 8032ba2:	2301      	movs	r3, #1
 8032ba4:	75fb      	strb	r3, [r7, #23]
 8032ba6:	e00c      	b.n	8032bc2 <USB_EPStopXfer+0x146>
 8032ba8:	683b      	ldr	r3, [r7, #0]
 8032baa:	781b      	ldrb	r3, [r3, #0]
 8032bac:	015a      	lsls	r2, r3, #5
 8032bae:	693b      	ldr	r3, [r7, #16]
 8032bb0:	4413      	add	r3, r2
 8032bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032bb6:	681b      	ldr	r3, [r3, #0]
 8032bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8032bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032bc0:	d0e7      	beq.n	8032b92 <USB_EPStopXfer+0x116>
 8032bc2:	7dfb      	ldrb	r3, [r7, #23]
 8032bc4:	4618      	mov	r0, r3
 8032bc6:	371c      	adds	r7, #28
 8032bc8:	46bd      	mov	sp, r7
 8032bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032bce:	4770      	bx	lr

08032bd0 <USB_WritePacket>:
 8032bd0:	b480      	push	{r7}
 8032bd2:	b089      	sub	sp, #36	; 0x24
 8032bd4:	af00      	add	r7, sp, #0
 8032bd6:	60f8      	str	r0, [r7, #12]
 8032bd8:	60b9      	str	r1, [r7, #8]
 8032bda:	4611      	mov	r1, r2
 8032bdc:	461a      	mov	r2, r3
 8032bde:	460b      	mov	r3, r1
 8032be0:	71fb      	strb	r3, [r7, #7]
 8032be2:	4613      	mov	r3, r2
 8032be4:	80bb      	strh	r3, [r7, #4]
 8032be6:	68fb      	ldr	r3, [r7, #12]
 8032be8:	617b      	str	r3, [r7, #20]
 8032bea:	68bb      	ldr	r3, [r7, #8]
 8032bec:	61fb      	str	r3, [r7, #28]
 8032bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8032bf2:	2b00      	cmp	r3, #0
 8032bf4:	d123      	bne.n	8032c3e <USB_WritePacket+0x6e>
 8032bf6:	88bb      	ldrh	r3, [r7, #4]
 8032bf8:	3303      	adds	r3, #3
 8032bfa:	089b      	lsrs	r3, r3, #2
 8032bfc:	613b      	str	r3, [r7, #16]
 8032bfe:	2300      	movs	r3, #0
 8032c00:	61bb      	str	r3, [r7, #24]
 8032c02:	e018      	b.n	8032c36 <USB_WritePacket+0x66>
 8032c04:	79fb      	ldrb	r3, [r7, #7]
 8032c06:	031a      	lsls	r2, r3, #12
 8032c08:	697b      	ldr	r3, [r7, #20]
 8032c0a:	4413      	add	r3, r2
 8032c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8032c10:	461a      	mov	r2, r3
 8032c12:	69fb      	ldr	r3, [r7, #28]
 8032c14:	681b      	ldr	r3, [r3, #0]
 8032c16:	6013      	str	r3, [r2, #0]
 8032c18:	69fb      	ldr	r3, [r7, #28]
 8032c1a:	3301      	adds	r3, #1
 8032c1c:	61fb      	str	r3, [r7, #28]
 8032c1e:	69fb      	ldr	r3, [r7, #28]
 8032c20:	3301      	adds	r3, #1
 8032c22:	61fb      	str	r3, [r7, #28]
 8032c24:	69fb      	ldr	r3, [r7, #28]
 8032c26:	3301      	adds	r3, #1
 8032c28:	61fb      	str	r3, [r7, #28]
 8032c2a:	69fb      	ldr	r3, [r7, #28]
 8032c2c:	3301      	adds	r3, #1
 8032c2e:	61fb      	str	r3, [r7, #28]
 8032c30:	69bb      	ldr	r3, [r7, #24]
 8032c32:	3301      	adds	r3, #1
 8032c34:	61bb      	str	r3, [r7, #24]
 8032c36:	69ba      	ldr	r2, [r7, #24]
 8032c38:	693b      	ldr	r3, [r7, #16]
 8032c3a:	429a      	cmp	r2, r3
 8032c3c:	d3e2      	bcc.n	8032c04 <USB_WritePacket+0x34>
 8032c3e:	2300      	movs	r3, #0
 8032c40:	4618      	mov	r0, r3
 8032c42:	3724      	adds	r7, #36	; 0x24
 8032c44:	46bd      	mov	sp, r7
 8032c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032c4a:	4770      	bx	lr

08032c4c <USB_ReadPacket>:
 8032c4c:	b480      	push	{r7}
 8032c4e:	b08b      	sub	sp, #44	; 0x2c
 8032c50:	af00      	add	r7, sp, #0
 8032c52:	60f8      	str	r0, [r7, #12]
 8032c54:	60b9      	str	r1, [r7, #8]
 8032c56:	4613      	mov	r3, r2
 8032c58:	80fb      	strh	r3, [r7, #6]
 8032c5a:	68fb      	ldr	r3, [r7, #12]
 8032c5c:	61bb      	str	r3, [r7, #24]
 8032c5e:	68bb      	ldr	r3, [r7, #8]
 8032c60:	627b      	str	r3, [r7, #36]	; 0x24
 8032c62:	88fb      	ldrh	r3, [r7, #6]
 8032c64:	089b      	lsrs	r3, r3, #2
 8032c66:	b29b      	uxth	r3, r3
 8032c68:	617b      	str	r3, [r7, #20]
 8032c6a:	88fb      	ldrh	r3, [r7, #6]
 8032c6c:	f003 0303 	and.w	r3, r3, #3
 8032c70:	83fb      	strh	r3, [r7, #30]
 8032c72:	2300      	movs	r3, #0
 8032c74:	623b      	str	r3, [r7, #32]
 8032c76:	e014      	b.n	8032ca2 <USB_ReadPacket+0x56>
 8032c78:	69bb      	ldr	r3, [r7, #24]
 8032c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8032c7e:	681a      	ldr	r2, [r3, #0]
 8032c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c82:	601a      	str	r2, [r3, #0]
 8032c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c86:	3301      	adds	r3, #1
 8032c88:	627b      	str	r3, [r7, #36]	; 0x24
 8032c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c8c:	3301      	adds	r3, #1
 8032c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8032c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c92:	3301      	adds	r3, #1
 8032c94:	627b      	str	r3, [r7, #36]	; 0x24
 8032c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c98:	3301      	adds	r3, #1
 8032c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8032c9c:	6a3b      	ldr	r3, [r7, #32]
 8032c9e:	3301      	adds	r3, #1
 8032ca0:	623b      	str	r3, [r7, #32]
 8032ca2:	6a3a      	ldr	r2, [r7, #32]
 8032ca4:	697b      	ldr	r3, [r7, #20]
 8032ca6:	429a      	cmp	r2, r3
 8032ca8:	d3e6      	bcc.n	8032c78 <USB_ReadPacket+0x2c>
 8032caa:	8bfb      	ldrh	r3, [r7, #30]
 8032cac:	2b00      	cmp	r3, #0
 8032cae:	d01e      	beq.n	8032cee <USB_ReadPacket+0xa2>
 8032cb0:	2300      	movs	r3, #0
 8032cb2:	623b      	str	r3, [r7, #32]
 8032cb4:	69bb      	ldr	r3, [r7, #24]
 8032cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8032cba:	461a      	mov	r2, r3
 8032cbc:	f107 0310 	add.w	r3, r7, #16
 8032cc0:	6812      	ldr	r2, [r2, #0]
 8032cc2:	601a      	str	r2, [r3, #0]
 8032cc4:	693a      	ldr	r2, [r7, #16]
 8032cc6:	6a3b      	ldr	r3, [r7, #32]
 8032cc8:	b2db      	uxtb	r3, r3
 8032cca:	00db      	lsls	r3, r3, #3
 8032ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8032cd0:	b2da      	uxtb	r2, r3
 8032cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cd4:	701a      	strb	r2, [r3, #0]
 8032cd6:	6a3b      	ldr	r3, [r7, #32]
 8032cd8:	3301      	adds	r3, #1
 8032cda:	623b      	str	r3, [r7, #32]
 8032cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cde:	3301      	adds	r3, #1
 8032ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8032ce2:	8bfb      	ldrh	r3, [r7, #30]
 8032ce4:	3b01      	subs	r3, #1
 8032ce6:	83fb      	strh	r3, [r7, #30]
 8032ce8:	8bfb      	ldrh	r3, [r7, #30]
 8032cea:	2b00      	cmp	r3, #0
 8032cec:	d1ea      	bne.n	8032cc4 <USB_ReadPacket+0x78>
 8032cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cf0:	4618      	mov	r0, r3
 8032cf2:	372c      	adds	r7, #44	; 0x2c
 8032cf4:	46bd      	mov	sp, r7
 8032cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032cfa:	4770      	bx	lr

08032cfc <USB_EPSetStall>:
 8032cfc:	b480      	push	{r7}
 8032cfe:	b085      	sub	sp, #20
 8032d00:	af00      	add	r7, sp, #0
 8032d02:	6078      	str	r0, [r7, #4]
 8032d04:	6039      	str	r1, [r7, #0]
 8032d06:	687b      	ldr	r3, [r7, #4]
 8032d08:	60fb      	str	r3, [r7, #12]
 8032d0a:	683b      	ldr	r3, [r7, #0]
 8032d0c:	781b      	ldrb	r3, [r3, #0]
 8032d0e:	60bb      	str	r3, [r7, #8]
 8032d10:	683b      	ldr	r3, [r7, #0]
 8032d12:	785b      	ldrb	r3, [r3, #1]
 8032d14:	2b01      	cmp	r3, #1
 8032d16:	d12c      	bne.n	8032d72 <USB_EPSetStall+0x76>
 8032d18:	68bb      	ldr	r3, [r7, #8]
 8032d1a:	015a      	lsls	r2, r3, #5
 8032d1c:	68fb      	ldr	r3, [r7, #12]
 8032d1e:	4413      	add	r3, r2
 8032d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032d24:	681b      	ldr	r3, [r3, #0]
 8032d26:	2b00      	cmp	r3, #0
 8032d28:	db12      	blt.n	8032d50 <USB_EPSetStall+0x54>
 8032d2a:	68bb      	ldr	r3, [r7, #8]
 8032d2c:	2b00      	cmp	r3, #0
 8032d2e:	d00f      	beq.n	8032d50 <USB_EPSetStall+0x54>
 8032d30:	68bb      	ldr	r3, [r7, #8]
 8032d32:	015a      	lsls	r2, r3, #5
 8032d34:	68fb      	ldr	r3, [r7, #12]
 8032d36:	4413      	add	r3, r2
 8032d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032d3c:	681b      	ldr	r3, [r3, #0]
 8032d3e:	68ba      	ldr	r2, [r7, #8]
 8032d40:	0151      	lsls	r1, r2, #5
 8032d42:	68fa      	ldr	r2, [r7, #12]
 8032d44:	440a      	add	r2, r1
 8032d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8032d4e:	6013      	str	r3, [r2, #0]
 8032d50:	68bb      	ldr	r3, [r7, #8]
 8032d52:	015a      	lsls	r2, r3, #5
 8032d54:	68fb      	ldr	r3, [r7, #12]
 8032d56:	4413      	add	r3, r2
 8032d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032d5c:	681b      	ldr	r3, [r3, #0]
 8032d5e:	68ba      	ldr	r2, [r7, #8]
 8032d60:	0151      	lsls	r1, r2, #5
 8032d62:	68fa      	ldr	r2, [r7, #12]
 8032d64:	440a      	add	r2, r1
 8032d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8032d6e:	6013      	str	r3, [r2, #0]
 8032d70:	e02b      	b.n	8032dca <USB_EPSetStall+0xce>
 8032d72:	68bb      	ldr	r3, [r7, #8]
 8032d74:	015a      	lsls	r2, r3, #5
 8032d76:	68fb      	ldr	r3, [r7, #12]
 8032d78:	4413      	add	r3, r2
 8032d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032d7e:	681b      	ldr	r3, [r3, #0]
 8032d80:	2b00      	cmp	r3, #0
 8032d82:	db12      	blt.n	8032daa <USB_EPSetStall+0xae>
 8032d84:	68bb      	ldr	r3, [r7, #8]
 8032d86:	2b00      	cmp	r3, #0
 8032d88:	d00f      	beq.n	8032daa <USB_EPSetStall+0xae>
 8032d8a:	68bb      	ldr	r3, [r7, #8]
 8032d8c:	015a      	lsls	r2, r3, #5
 8032d8e:	68fb      	ldr	r3, [r7, #12]
 8032d90:	4413      	add	r3, r2
 8032d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032d96:	681b      	ldr	r3, [r3, #0]
 8032d98:	68ba      	ldr	r2, [r7, #8]
 8032d9a:	0151      	lsls	r1, r2, #5
 8032d9c:	68fa      	ldr	r2, [r7, #12]
 8032d9e:	440a      	add	r2, r1
 8032da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8032da8:	6013      	str	r3, [r2, #0]
 8032daa:	68bb      	ldr	r3, [r7, #8]
 8032dac:	015a      	lsls	r2, r3, #5
 8032dae:	68fb      	ldr	r3, [r7, #12]
 8032db0:	4413      	add	r3, r2
 8032db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032db6:	681b      	ldr	r3, [r3, #0]
 8032db8:	68ba      	ldr	r2, [r7, #8]
 8032dba:	0151      	lsls	r1, r2, #5
 8032dbc:	68fa      	ldr	r2, [r7, #12]
 8032dbe:	440a      	add	r2, r1
 8032dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8032dc8:	6013      	str	r3, [r2, #0]
 8032dca:	2300      	movs	r3, #0
 8032dcc:	4618      	mov	r0, r3
 8032dce:	3714      	adds	r7, #20
 8032dd0:	46bd      	mov	sp, r7
 8032dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032dd6:	4770      	bx	lr

08032dd8 <USB_EPClearStall>:
 8032dd8:	b480      	push	{r7}
 8032dda:	b085      	sub	sp, #20
 8032ddc:	af00      	add	r7, sp, #0
 8032dde:	6078      	str	r0, [r7, #4]
 8032de0:	6039      	str	r1, [r7, #0]
 8032de2:	687b      	ldr	r3, [r7, #4]
 8032de4:	60fb      	str	r3, [r7, #12]
 8032de6:	683b      	ldr	r3, [r7, #0]
 8032de8:	781b      	ldrb	r3, [r3, #0]
 8032dea:	60bb      	str	r3, [r7, #8]
 8032dec:	683b      	ldr	r3, [r7, #0]
 8032dee:	785b      	ldrb	r3, [r3, #1]
 8032df0:	2b01      	cmp	r3, #1
 8032df2:	d128      	bne.n	8032e46 <USB_EPClearStall+0x6e>
 8032df4:	68bb      	ldr	r3, [r7, #8]
 8032df6:	015a      	lsls	r2, r3, #5
 8032df8:	68fb      	ldr	r3, [r7, #12]
 8032dfa:	4413      	add	r3, r2
 8032dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032e00:	681b      	ldr	r3, [r3, #0]
 8032e02:	68ba      	ldr	r2, [r7, #8]
 8032e04:	0151      	lsls	r1, r2, #5
 8032e06:	68fa      	ldr	r2, [r7, #12]
 8032e08:	440a      	add	r2, r1
 8032e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8032e12:	6013      	str	r3, [r2, #0]
 8032e14:	683b      	ldr	r3, [r7, #0]
 8032e16:	791b      	ldrb	r3, [r3, #4]
 8032e18:	2b03      	cmp	r3, #3
 8032e1a:	d003      	beq.n	8032e24 <USB_EPClearStall+0x4c>
 8032e1c:	683b      	ldr	r3, [r7, #0]
 8032e1e:	791b      	ldrb	r3, [r3, #4]
 8032e20:	2b02      	cmp	r3, #2
 8032e22:	d138      	bne.n	8032e96 <USB_EPClearStall+0xbe>
 8032e24:	68bb      	ldr	r3, [r7, #8]
 8032e26:	015a      	lsls	r2, r3, #5
 8032e28:	68fb      	ldr	r3, [r7, #12]
 8032e2a:	4413      	add	r3, r2
 8032e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032e30:	681b      	ldr	r3, [r3, #0]
 8032e32:	68ba      	ldr	r2, [r7, #8]
 8032e34:	0151      	lsls	r1, r2, #5
 8032e36:	68fa      	ldr	r2, [r7, #12]
 8032e38:	440a      	add	r2, r1
 8032e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8032e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8032e42:	6013      	str	r3, [r2, #0]
 8032e44:	e027      	b.n	8032e96 <USB_EPClearStall+0xbe>
 8032e46:	68bb      	ldr	r3, [r7, #8]
 8032e48:	015a      	lsls	r2, r3, #5
 8032e4a:	68fb      	ldr	r3, [r7, #12]
 8032e4c:	4413      	add	r3, r2
 8032e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032e52:	681b      	ldr	r3, [r3, #0]
 8032e54:	68ba      	ldr	r2, [r7, #8]
 8032e56:	0151      	lsls	r1, r2, #5
 8032e58:	68fa      	ldr	r2, [r7, #12]
 8032e5a:	440a      	add	r2, r1
 8032e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8032e64:	6013      	str	r3, [r2, #0]
 8032e66:	683b      	ldr	r3, [r7, #0]
 8032e68:	791b      	ldrb	r3, [r3, #4]
 8032e6a:	2b03      	cmp	r3, #3
 8032e6c:	d003      	beq.n	8032e76 <USB_EPClearStall+0x9e>
 8032e6e:	683b      	ldr	r3, [r7, #0]
 8032e70:	791b      	ldrb	r3, [r3, #4]
 8032e72:	2b02      	cmp	r3, #2
 8032e74:	d10f      	bne.n	8032e96 <USB_EPClearStall+0xbe>
 8032e76:	68bb      	ldr	r3, [r7, #8]
 8032e78:	015a      	lsls	r2, r3, #5
 8032e7a:	68fb      	ldr	r3, [r7, #12]
 8032e7c:	4413      	add	r3, r2
 8032e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032e82:	681b      	ldr	r3, [r3, #0]
 8032e84:	68ba      	ldr	r2, [r7, #8]
 8032e86:	0151      	lsls	r1, r2, #5
 8032e88:	68fa      	ldr	r2, [r7, #12]
 8032e8a:	440a      	add	r2, r1
 8032e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8032e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8032e94:	6013      	str	r3, [r2, #0]
 8032e96:	2300      	movs	r3, #0
 8032e98:	4618      	mov	r0, r3
 8032e9a:	3714      	adds	r7, #20
 8032e9c:	46bd      	mov	sp, r7
 8032e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ea2:	4770      	bx	lr

08032ea4 <USB_SetDevAddress>:
 8032ea4:	b480      	push	{r7}
 8032ea6:	b085      	sub	sp, #20
 8032ea8:	af00      	add	r7, sp, #0
 8032eaa:	6078      	str	r0, [r7, #4]
 8032eac:	460b      	mov	r3, r1
 8032eae:	70fb      	strb	r3, [r7, #3]
 8032eb0:	687b      	ldr	r3, [r7, #4]
 8032eb2:	60fb      	str	r3, [r7, #12]
 8032eb4:	68fb      	ldr	r3, [r7, #12]
 8032eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032eba:	681b      	ldr	r3, [r3, #0]
 8032ebc:	68fa      	ldr	r2, [r7, #12]
 8032ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8032ec2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8032ec6:	6013      	str	r3, [r2, #0]
 8032ec8:	68fb      	ldr	r3, [r7, #12]
 8032eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032ece:	681a      	ldr	r2, [r3, #0]
 8032ed0:	78fb      	ldrb	r3, [r7, #3]
 8032ed2:	011b      	lsls	r3, r3, #4
 8032ed4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8032ed8:	68f9      	ldr	r1, [r7, #12]
 8032eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032ede:	4313      	orrs	r3, r2
 8032ee0:	600b      	str	r3, [r1, #0]
 8032ee2:	2300      	movs	r3, #0
 8032ee4:	4618      	mov	r0, r3
 8032ee6:	3714      	adds	r7, #20
 8032ee8:	46bd      	mov	sp, r7
 8032eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032eee:	4770      	bx	lr

08032ef0 <USB_DevConnect>:
 8032ef0:	b480      	push	{r7}
 8032ef2:	b085      	sub	sp, #20
 8032ef4:	af00      	add	r7, sp, #0
 8032ef6:	6078      	str	r0, [r7, #4]
 8032ef8:	687b      	ldr	r3, [r7, #4]
 8032efa:	60fb      	str	r3, [r7, #12]
 8032efc:	68fb      	ldr	r3, [r7, #12]
 8032efe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8032f02:	681b      	ldr	r3, [r3, #0]
 8032f04:	68fa      	ldr	r2, [r7, #12]
 8032f06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8032f0a:	f023 0303 	bic.w	r3, r3, #3
 8032f0e:	6013      	str	r3, [r2, #0]
 8032f10:	68fb      	ldr	r3, [r7, #12]
 8032f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032f16:	685b      	ldr	r3, [r3, #4]
 8032f18:	68fa      	ldr	r2, [r7, #12]
 8032f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8032f1e:	f023 0302 	bic.w	r3, r3, #2
 8032f22:	6053      	str	r3, [r2, #4]
 8032f24:	2300      	movs	r3, #0
 8032f26:	4618      	mov	r0, r3
 8032f28:	3714      	adds	r7, #20
 8032f2a:	46bd      	mov	sp, r7
 8032f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f30:	4770      	bx	lr

08032f32 <USB_DevDisconnect>:
 8032f32:	b480      	push	{r7}
 8032f34:	b085      	sub	sp, #20
 8032f36:	af00      	add	r7, sp, #0
 8032f38:	6078      	str	r0, [r7, #4]
 8032f3a:	687b      	ldr	r3, [r7, #4]
 8032f3c:	60fb      	str	r3, [r7, #12]
 8032f3e:	68fb      	ldr	r3, [r7, #12]
 8032f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8032f44:	681b      	ldr	r3, [r3, #0]
 8032f46:	68fa      	ldr	r2, [r7, #12]
 8032f48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8032f4c:	f023 0303 	bic.w	r3, r3, #3
 8032f50:	6013      	str	r3, [r2, #0]
 8032f52:	68fb      	ldr	r3, [r7, #12]
 8032f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032f58:	685b      	ldr	r3, [r3, #4]
 8032f5a:	68fa      	ldr	r2, [r7, #12]
 8032f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8032f60:	f043 0302 	orr.w	r3, r3, #2
 8032f64:	6053      	str	r3, [r2, #4]
 8032f66:	2300      	movs	r3, #0
 8032f68:	4618      	mov	r0, r3
 8032f6a:	3714      	adds	r7, #20
 8032f6c:	46bd      	mov	sp, r7
 8032f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f72:	4770      	bx	lr

08032f74 <USB_ReadInterrupts>:
 8032f74:	b480      	push	{r7}
 8032f76:	b085      	sub	sp, #20
 8032f78:	af00      	add	r7, sp, #0
 8032f7a:	6078      	str	r0, [r7, #4]
 8032f7c:	687b      	ldr	r3, [r7, #4]
 8032f7e:	695b      	ldr	r3, [r3, #20]
 8032f80:	60fb      	str	r3, [r7, #12]
 8032f82:	687b      	ldr	r3, [r7, #4]
 8032f84:	699b      	ldr	r3, [r3, #24]
 8032f86:	68fa      	ldr	r2, [r7, #12]
 8032f88:	4013      	ands	r3, r2
 8032f8a:	60fb      	str	r3, [r7, #12]
 8032f8c:	68fb      	ldr	r3, [r7, #12]
 8032f8e:	4618      	mov	r0, r3
 8032f90:	3714      	adds	r7, #20
 8032f92:	46bd      	mov	sp, r7
 8032f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f98:	4770      	bx	lr

08032f9a <USB_ReadDevAllOutEpInterrupt>:
 8032f9a:	b480      	push	{r7}
 8032f9c:	b085      	sub	sp, #20
 8032f9e:	af00      	add	r7, sp, #0
 8032fa0:	6078      	str	r0, [r7, #4]
 8032fa2:	687b      	ldr	r3, [r7, #4]
 8032fa4:	60fb      	str	r3, [r7, #12]
 8032fa6:	68fb      	ldr	r3, [r7, #12]
 8032fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032fac:	699b      	ldr	r3, [r3, #24]
 8032fae:	60bb      	str	r3, [r7, #8]
 8032fb0:	68fb      	ldr	r3, [r7, #12]
 8032fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032fb6:	69db      	ldr	r3, [r3, #28]
 8032fb8:	68ba      	ldr	r2, [r7, #8]
 8032fba:	4013      	ands	r3, r2
 8032fbc:	60bb      	str	r3, [r7, #8]
 8032fbe:	68bb      	ldr	r3, [r7, #8]
 8032fc0:	0c1b      	lsrs	r3, r3, #16
 8032fc2:	4618      	mov	r0, r3
 8032fc4:	3714      	adds	r7, #20
 8032fc6:	46bd      	mov	sp, r7
 8032fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032fcc:	4770      	bx	lr

08032fce <USB_ReadDevAllInEpInterrupt>:
 8032fce:	b480      	push	{r7}
 8032fd0:	b085      	sub	sp, #20
 8032fd2:	af00      	add	r7, sp, #0
 8032fd4:	6078      	str	r0, [r7, #4]
 8032fd6:	687b      	ldr	r3, [r7, #4]
 8032fd8:	60fb      	str	r3, [r7, #12]
 8032fda:	68fb      	ldr	r3, [r7, #12]
 8032fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032fe0:	699b      	ldr	r3, [r3, #24]
 8032fe2:	60bb      	str	r3, [r7, #8]
 8032fe4:	68fb      	ldr	r3, [r7, #12]
 8032fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032fea:	69db      	ldr	r3, [r3, #28]
 8032fec:	68ba      	ldr	r2, [r7, #8]
 8032fee:	4013      	ands	r3, r2
 8032ff0:	60bb      	str	r3, [r7, #8]
 8032ff2:	68bb      	ldr	r3, [r7, #8]
 8032ff4:	b29b      	uxth	r3, r3
 8032ff6:	4618      	mov	r0, r3
 8032ff8:	3714      	adds	r7, #20
 8032ffa:	46bd      	mov	sp, r7
 8032ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033000:	4770      	bx	lr

08033002 <USB_ReadDevOutEPInterrupt>:
 8033002:	b480      	push	{r7}
 8033004:	b085      	sub	sp, #20
 8033006:	af00      	add	r7, sp, #0
 8033008:	6078      	str	r0, [r7, #4]
 803300a:	460b      	mov	r3, r1
 803300c:	70fb      	strb	r3, [r7, #3]
 803300e:	687b      	ldr	r3, [r7, #4]
 8033010:	60fb      	str	r3, [r7, #12]
 8033012:	78fb      	ldrb	r3, [r7, #3]
 8033014:	015a      	lsls	r2, r3, #5
 8033016:	68fb      	ldr	r3, [r7, #12]
 8033018:	4413      	add	r3, r2
 803301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803301e:	689b      	ldr	r3, [r3, #8]
 8033020:	60bb      	str	r3, [r7, #8]
 8033022:	68fb      	ldr	r3, [r7, #12]
 8033024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033028:	695b      	ldr	r3, [r3, #20]
 803302a:	68ba      	ldr	r2, [r7, #8]
 803302c:	4013      	ands	r3, r2
 803302e:	60bb      	str	r3, [r7, #8]
 8033030:	68bb      	ldr	r3, [r7, #8]
 8033032:	4618      	mov	r0, r3
 8033034:	3714      	adds	r7, #20
 8033036:	46bd      	mov	sp, r7
 8033038:	f85d 7b04 	ldr.w	r7, [sp], #4
 803303c:	4770      	bx	lr

0803303e <USB_ReadDevInEPInterrupt>:
 803303e:	b480      	push	{r7}
 8033040:	b087      	sub	sp, #28
 8033042:	af00      	add	r7, sp, #0
 8033044:	6078      	str	r0, [r7, #4]
 8033046:	460b      	mov	r3, r1
 8033048:	70fb      	strb	r3, [r7, #3]
 803304a:	687b      	ldr	r3, [r7, #4]
 803304c:	617b      	str	r3, [r7, #20]
 803304e:	697b      	ldr	r3, [r7, #20]
 8033050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033054:	691b      	ldr	r3, [r3, #16]
 8033056:	613b      	str	r3, [r7, #16]
 8033058:	697b      	ldr	r3, [r7, #20]
 803305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033060:	60fb      	str	r3, [r7, #12]
 8033062:	78fb      	ldrb	r3, [r7, #3]
 8033064:	f003 030f 	and.w	r3, r3, #15
 8033068:	68fa      	ldr	r2, [r7, #12]
 803306a:	fa22 f303 	lsr.w	r3, r2, r3
 803306e:	01db      	lsls	r3, r3, #7
 8033070:	b2db      	uxtb	r3, r3
 8033072:	693a      	ldr	r2, [r7, #16]
 8033074:	4313      	orrs	r3, r2
 8033076:	613b      	str	r3, [r7, #16]
 8033078:	78fb      	ldrb	r3, [r7, #3]
 803307a:	015a      	lsls	r2, r3, #5
 803307c:	697b      	ldr	r3, [r7, #20]
 803307e:	4413      	add	r3, r2
 8033080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8033084:	689b      	ldr	r3, [r3, #8]
 8033086:	693a      	ldr	r2, [r7, #16]
 8033088:	4013      	ands	r3, r2
 803308a:	60bb      	str	r3, [r7, #8]
 803308c:	68bb      	ldr	r3, [r7, #8]
 803308e:	4618      	mov	r0, r3
 8033090:	371c      	adds	r7, #28
 8033092:	46bd      	mov	sp, r7
 8033094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033098:	4770      	bx	lr

0803309a <USB_GetMode>:
 803309a:	b480      	push	{r7}
 803309c:	b083      	sub	sp, #12
 803309e:	af00      	add	r7, sp, #0
 80330a0:	6078      	str	r0, [r7, #4]
 80330a2:	687b      	ldr	r3, [r7, #4]
 80330a4:	695b      	ldr	r3, [r3, #20]
 80330a6:	f003 0301 	and.w	r3, r3, #1
 80330aa:	4618      	mov	r0, r3
 80330ac:	370c      	adds	r7, #12
 80330ae:	46bd      	mov	sp, r7
 80330b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80330b4:	4770      	bx	lr
	...

080330b8 <USB_ActivateSetup>:
 80330b8:	b480      	push	{r7}
 80330ba:	b085      	sub	sp, #20
 80330bc:	af00      	add	r7, sp, #0
 80330be:	6078      	str	r0, [r7, #4]
 80330c0:	687b      	ldr	r3, [r7, #4]
 80330c2:	60fb      	str	r3, [r7, #12]
 80330c4:	68fb      	ldr	r3, [r7, #12]
 80330c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80330ca:	681a      	ldr	r2, [r3, #0]
 80330cc:	68fb      	ldr	r3, [r7, #12]
 80330ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80330d2:	4619      	mov	r1, r3
 80330d4:	4b09      	ldr	r3, [pc, #36]	; (80330fc <USB_ActivateSetup+0x44>)
 80330d6:	4013      	ands	r3, r2
 80330d8:	600b      	str	r3, [r1, #0]
 80330da:	68fb      	ldr	r3, [r7, #12]
 80330dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80330e0:	685b      	ldr	r3, [r3, #4]
 80330e2:	68fa      	ldr	r2, [r7, #12]
 80330e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80330e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80330ec:	6053      	str	r3, [r2, #4]
 80330ee:	2300      	movs	r3, #0
 80330f0:	4618      	mov	r0, r3
 80330f2:	3714      	adds	r7, #20
 80330f4:	46bd      	mov	sp, r7
 80330f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80330fa:	4770      	bx	lr
 80330fc:	fffff800 	.word	0xfffff800

08033100 <USB_EP0_OutStart>:
 8033100:	b480      	push	{r7}
 8033102:	b087      	sub	sp, #28
 8033104:	af00      	add	r7, sp, #0
 8033106:	60f8      	str	r0, [r7, #12]
 8033108:	460b      	mov	r3, r1
 803310a:	607a      	str	r2, [r7, #4]
 803310c:	72fb      	strb	r3, [r7, #11]
 803310e:	68fb      	ldr	r3, [r7, #12]
 8033110:	617b      	str	r3, [r7, #20]
 8033112:	68fb      	ldr	r3, [r7, #12]
 8033114:	333c      	adds	r3, #60	; 0x3c
 8033116:	3304      	adds	r3, #4
 8033118:	681b      	ldr	r3, [r3, #0]
 803311a:	613b      	str	r3, [r7, #16]
 803311c:	693b      	ldr	r3, [r7, #16]
 803311e:	4a26      	ldr	r2, [pc, #152]	; (80331b8 <USB_EP0_OutStart+0xb8>)
 8033120:	4293      	cmp	r3, r2
 8033122:	d90a      	bls.n	803313a <USB_EP0_OutStart+0x3a>
 8033124:	697b      	ldr	r3, [r7, #20]
 8033126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803312a:	681b      	ldr	r3, [r3, #0]
 803312c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8033130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8033134:	d101      	bne.n	803313a <USB_EP0_OutStart+0x3a>
 8033136:	2300      	movs	r3, #0
 8033138:	e037      	b.n	80331aa <USB_EP0_OutStart+0xaa>
 803313a:	697b      	ldr	r3, [r7, #20]
 803313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033140:	461a      	mov	r2, r3
 8033142:	2300      	movs	r3, #0
 8033144:	6113      	str	r3, [r2, #16]
 8033146:	697b      	ldr	r3, [r7, #20]
 8033148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803314c:	691b      	ldr	r3, [r3, #16]
 803314e:	697a      	ldr	r2, [r7, #20]
 8033150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8033154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8033158:	6113      	str	r3, [r2, #16]
 803315a:	697b      	ldr	r3, [r7, #20]
 803315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033160:	691b      	ldr	r3, [r3, #16]
 8033162:	697a      	ldr	r2, [r7, #20]
 8033164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8033168:	f043 0318 	orr.w	r3, r3, #24
 803316c:	6113      	str	r3, [r2, #16]
 803316e:	697b      	ldr	r3, [r7, #20]
 8033170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033174:	691b      	ldr	r3, [r3, #16]
 8033176:	697a      	ldr	r2, [r7, #20]
 8033178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803317c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8033180:	6113      	str	r3, [r2, #16]
 8033182:	7afb      	ldrb	r3, [r7, #11]
 8033184:	2b01      	cmp	r3, #1
 8033186:	d10f      	bne.n	80331a8 <USB_EP0_OutStart+0xa8>
 8033188:	697b      	ldr	r3, [r7, #20]
 803318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803318e:	461a      	mov	r2, r3
 8033190:	687b      	ldr	r3, [r7, #4]
 8033192:	6153      	str	r3, [r2, #20]
 8033194:	697b      	ldr	r3, [r7, #20]
 8033196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803319a:	681b      	ldr	r3, [r3, #0]
 803319c:	697a      	ldr	r2, [r7, #20]
 803319e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80331a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80331a6:	6013      	str	r3, [r2, #0]
 80331a8:	2300      	movs	r3, #0
 80331aa:	4618      	mov	r0, r3
 80331ac:	371c      	adds	r7, #28
 80331ae:	46bd      	mov	sp, r7
 80331b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80331b4:	4770      	bx	lr
 80331b6:	bf00      	nop
 80331b8:	4f54300a 	.word	0x4f54300a

080331bc <USB_CoreReset>:
 80331bc:	b480      	push	{r7}
 80331be:	b085      	sub	sp, #20
 80331c0:	af00      	add	r7, sp, #0
 80331c2:	6078      	str	r0, [r7, #4]
 80331c4:	2300      	movs	r3, #0
 80331c6:	60fb      	str	r3, [r7, #12]
 80331c8:	68fb      	ldr	r3, [r7, #12]
 80331ca:	3301      	adds	r3, #1
 80331cc:	60fb      	str	r3, [r7, #12]
 80331ce:	68fb      	ldr	r3, [r7, #12]
 80331d0:	4a13      	ldr	r2, [pc, #76]	; (8033220 <USB_CoreReset+0x64>)
 80331d2:	4293      	cmp	r3, r2
 80331d4:	d901      	bls.n	80331da <USB_CoreReset+0x1e>
 80331d6:	2303      	movs	r3, #3
 80331d8:	e01b      	b.n	8033212 <USB_CoreReset+0x56>
 80331da:	687b      	ldr	r3, [r7, #4]
 80331dc:	691b      	ldr	r3, [r3, #16]
 80331de:	2b00      	cmp	r3, #0
 80331e0:	daf2      	bge.n	80331c8 <USB_CoreReset+0xc>
 80331e2:	2300      	movs	r3, #0
 80331e4:	60fb      	str	r3, [r7, #12]
 80331e6:	687b      	ldr	r3, [r7, #4]
 80331e8:	691b      	ldr	r3, [r3, #16]
 80331ea:	f043 0201 	orr.w	r2, r3, #1
 80331ee:	687b      	ldr	r3, [r7, #4]
 80331f0:	611a      	str	r2, [r3, #16]
 80331f2:	68fb      	ldr	r3, [r7, #12]
 80331f4:	3301      	adds	r3, #1
 80331f6:	60fb      	str	r3, [r7, #12]
 80331f8:	68fb      	ldr	r3, [r7, #12]
 80331fa:	4a09      	ldr	r2, [pc, #36]	; (8033220 <USB_CoreReset+0x64>)
 80331fc:	4293      	cmp	r3, r2
 80331fe:	d901      	bls.n	8033204 <USB_CoreReset+0x48>
 8033200:	2303      	movs	r3, #3
 8033202:	e006      	b.n	8033212 <USB_CoreReset+0x56>
 8033204:	687b      	ldr	r3, [r7, #4]
 8033206:	691b      	ldr	r3, [r3, #16]
 8033208:	f003 0301 	and.w	r3, r3, #1
 803320c:	2b01      	cmp	r3, #1
 803320e:	d0f0      	beq.n	80331f2 <USB_CoreReset+0x36>
 8033210:	2300      	movs	r3, #0
 8033212:	4618      	mov	r0, r3
 8033214:	3714      	adds	r7, #20
 8033216:	46bd      	mov	sp, r7
 8033218:	f85d 7b04 	ldr.w	r7, [sp], #4
 803321c:	4770      	bx	lr
 803321e:	bf00      	nop
 8033220:	00030d40 	.word	0x00030d40

08033224 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8033224:	b580      	push	{r7, lr}
 8033226:	b084      	sub	sp, #16
 8033228:	af00      	add	r7, sp, #0
 803322a:	6078      	str	r0, [r7, #4]
 803322c:	460b      	mov	r3, r1
 803322e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)malloc(sizeof(USBD_CDC_HandleTypeDef));
 8033230:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8033234:	f001 ffec 	bl	8035210 <malloc>
 8033238:	4603      	mov	r3, r0
 803323a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803323c:	68fb      	ldr	r3, [r7, #12]
 803323e:	2b00      	cmp	r3, #0
 8033240:	d109      	bne.n	8033256 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8033242:	687b      	ldr	r3, [r7, #4]
 8033244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033248:	687b      	ldr	r3, [r7, #4]
 803324a:	32b0      	adds	r2, #176	; 0xb0
 803324c:	2100      	movs	r1, #0
 803324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8033252:	2302      	movs	r3, #2
 8033254:	e0d4      	b.n	8033400 <USBD_CDC_Init+0x1dc>
  }

  (void)memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8033256:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803325a:	2100      	movs	r1, #0
 803325c:	68f8      	ldr	r0, [r7, #12]
 803325e:	f002 f81f 	bl	80352a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8033262:	687b      	ldr	r3, [r7, #4]
 8033264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033268:	687b      	ldr	r3, [r7, #4]
 803326a:	32b0      	adds	r2, #176	; 0xb0
 803326c:	68f9      	ldr	r1, [r7, #12]
 803326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8033272:	687b      	ldr	r3, [r7, #4]
 8033274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033278:	687b      	ldr	r3, [r7, #4]
 803327a:	32b0      	adds	r2, #176	; 0xb0
 803327c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8033280:	687b      	ldr	r3, [r7, #4]
 8033282:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8033286:	687b      	ldr	r3, [r7, #4]
 8033288:	7c1b      	ldrb	r3, [r3, #16]
 803328a:	2b00      	cmp	r3, #0
 803328c:	d138      	bne.n	8033300 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803328e:	4b5e      	ldr	r3, [pc, #376]	; (8033408 <USBD_CDC_Init+0x1e4>)
 8033290:	7819      	ldrb	r1, [r3, #0]
 8033292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8033296:	2202      	movs	r2, #2
 8033298:	6878      	ldr	r0, [r7, #4]
 803329a:	f7e6 ff4a 	bl	801a132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803329e:	4b5a      	ldr	r3, [pc, #360]	; (8033408 <USBD_CDC_Init+0x1e4>)
 80332a0:	781b      	ldrb	r3, [r3, #0]
 80332a2:	f003 020f 	and.w	r2, r3, #15
 80332a6:	6879      	ldr	r1, [r7, #4]
 80332a8:	4613      	mov	r3, r2
 80332aa:	009b      	lsls	r3, r3, #2
 80332ac:	4413      	add	r3, r2
 80332ae:	009b      	lsls	r3, r3, #2
 80332b0:	440b      	add	r3, r1
 80332b2:	3324      	adds	r3, #36	; 0x24
 80332b4:	2201      	movs	r2, #1
 80332b6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80332b8:	4b54      	ldr	r3, [pc, #336]	; (803340c <USBD_CDC_Init+0x1e8>)
 80332ba:	7819      	ldrb	r1, [r3, #0]
 80332bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80332c0:	2202      	movs	r2, #2
 80332c2:	6878      	ldr	r0, [r7, #4]
 80332c4:	f7e6 ff35 	bl	801a132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80332c8:	4b50      	ldr	r3, [pc, #320]	; (803340c <USBD_CDC_Init+0x1e8>)
 80332ca:	781b      	ldrb	r3, [r3, #0]
 80332cc:	f003 020f 	and.w	r2, r3, #15
 80332d0:	6879      	ldr	r1, [r7, #4]
 80332d2:	4613      	mov	r3, r2
 80332d4:	009b      	lsls	r3, r3, #2
 80332d6:	4413      	add	r3, r2
 80332d8:	009b      	lsls	r3, r3, #2
 80332da:	440b      	add	r3, r1
 80332dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80332e0:	2201      	movs	r2, #1
 80332e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80332e4:	4b4a      	ldr	r3, [pc, #296]	; (8033410 <USBD_CDC_Init+0x1ec>)
 80332e6:	781b      	ldrb	r3, [r3, #0]
 80332e8:	f003 020f 	and.w	r2, r3, #15
 80332ec:	6879      	ldr	r1, [r7, #4]
 80332ee:	4613      	mov	r3, r2
 80332f0:	009b      	lsls	r3, r3, #2
 80332f2:	4413      	add	r3, r2
 80332f4:	009b      	lsls	r3, r3, #2
 80332f6:	440b      	add	r3, r1
 80332f8:	3326      	adds	r3, #38	; 0x26
 80332fa:	2210      	movs	r2, #16
 80332fc:	801a      	strh	r2, [r3, #0]
 80332fe:	e035      	b.n	803336c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8033300:	4b41      	ldr	r3, [pc, #260]	; (8033408 <USBD_CDC_Init+0x1e4>)
 8033302:	7819      	ldrb	r1, [r3, #0]
 8033304:	2340      	movs	r3, #64	; 0x40
 8033306:	2202      	movs	r2, #2
 8033308:	6878      	ldr	r0, [r7, #4]
 803330a:	f7e6 ff12 	bl	801a132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803330e:	4b3e      	ldr	r3, [pc, #248]	; (8033408 <USBD_CDC_Init+0x1e4>)
 8033310:	781b      	ldrb	r3, [r3, #0]
 8033312:	f003 020f 	and.w	r2, r3, #15
 8033316:	6879      	ldr	r1, [r7, #4]
 8033318:	4613      	mov	r3, r2
 803331a:	009b      	lsls	r3, r3, #2
 803331c:	4413      	add	r3, r2
 803331e:	009b      	lsls	r3, r3, #2
 8033320:	440b      	add	r3, r1
 8033322:	3324      	adds	r3, #36	; 0x24
 8033324:	2201      	movs	r2, #1
 8033326:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8033328:	4b38      	ldr	r3, [pc, #224]	; (803340c <USBD_CDC_Init+0x1e8>)
 803332a:	7819      	ldrb	r1, [r3, #0]
 803332c:	2340      	movs	r3, #64	; 0x40
 803332e:	2202      	movs	r2, #2
 8033330:	6878      	ldr	r0, [r7, #4]
 8033332:	f7e6 fefe 	bl	801a132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8033336:	4b35      	ldr	r3, [pc, #212]	; (803340c <USBD_CDC_Init+0x1e8>)
 8033338:	781b      	ldrb	r3, [r3, #0]
 803333a:	f003 020f 	and.w	r2, r3, #15
 803333e:	6879      	ldr	r1, [r7, #4]
 8033340:	4613      	mov	r3, r2
 8033342:	009b      	lsls	r3, r3, #2
 8033344:	4413      	add	r3, r2
 8033346:	009b      	lsls	r3, r3, #2
 8033348:	440b      	add	r3, r1
 803334a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803334e:	2201      	movs	r2, #1
 8033350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8033352:	4b2f      	ldr	r3, [pc, #188]	; (8033410 <USBD_CDC_Init+0x1ec>)
 8033354:	781b      	ldrb	r3, [r3, #0]
 8033356:	f003 020f 	and.w	r2, r3, #15
 803335a:	6879      	ldr	r1, [r7, #4]
 803335c:	4613      	mov	r3, r2
 803335e:	009b      	lsls	r3, r3, #2
 8033360:	4413      	add	r3, r2
 8033362:	009b      	lsls	r3, r3, #2
 8033364:	440b      	add	r3, r1
 8033366:	3326      	adds	r3, #38	; 0x26
 8033368:	2210      	movs	r2, #16
 803336a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803336c:	4b28      	ldr	r3, [pc, #160]	; (8033410 <USBD_CDC_Init+0x1ec>)
 803336e:	7819      	ldrb	r1, [r3, #0]
 8033370:	2308      	movs	r3, #8
 8033372:	2203      	movs	r2, #3
 8033374:	6878      	ldr	r0, [r7, #4]
 8033376:	f7e6 fedc 	bl	801a132 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803337a:	4b25      	ldr	r3, [pc, #148]	; (8033410 <USBD_CDC_Init+0x1ec>)
 803337c:	781b      	ldrb	r3, [r3, #0]
 803337e:	f003 020f 	and.w	r2, r3, #15
 8033382:	6879      	ldr	r1, [r7, #4]
 8033384:	4613      	mov	r3, r2
 8033386:	009b      	lsls	r3, r3, #2
 8033388:	4413      	add	r3, r2
 803338a:	009b      	lsls	r3, r3, #2
 803338c:	440b      	add	r3, r1
 803338e:	3324      	adds	r3, #36	; 0x24
 8033390:	2201      	movs	r2, #1
 8033392:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8033394:	68fb      	ldr	r3, [r7, #12]
 8033396:	2200      	movs	r2, #0
 8033398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803339c:	687b      	ldr	r3, [r7, #4]
 803339e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80333a2:	687a      	ldr	r2, [r7, #4]
 80333a4:	33b0      	adds	r3, #176	; 0xb0
 80333a6:	009b      	lsls	r3, r3, #2
 80333a8:	4413      	add	r3, r2
 80333aa:	685b      	ldr	r3, [r3, #4]
 80333ac:	681b      	ldr	r3, [r3, #0]
 80333ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80333b0:	68fb      	ldr	r3, [r7, #12]
 80333b2:	2200      	movs	r2, #0
 80333b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80333b8:	68fb      	ldr	r3, [r7, #12]
 80333ba:	2200      	movs	r2, #0
 80333bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80333c0:	68fb      	ldr	r3, [r7, #12]
 80333c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80333c6:	2b00      	cmp	r3, #0
 80333c8:	d101      	bne.n	80333ce <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80333ca:	2302      	movs	r3, #2
 80333cc:	e018      	b.n	8033400 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80333ce:	687b      	ldr	r3, [r7, #4]
 80333d0:	7c1b      	ldrb	r3, [r3, #16]
 80333d2:	2b00      	cmp	r3, #0
 80333d4:	d10a      	bne.n	80333ec <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80333d6:	4b0d      	ldr	r3, [pc, #52]	; (803340c <USBD_CDC_Init+0x1e8>)
 80333d8:	7819      	ldrb	r1, [r3, #0]
 80333da:	68fb      	ldr	r3, [r7, #12]
 80333dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80333e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80333e4:	6878      	ldr	r0, [r7, #4]
 80333e6:	f7e6 ff93 	bl	801a310 <USBD_LL_PrepareReceive>
 80333ea:	e008      	b.n	80333fe <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80333ec:	4b07      	ldr	r3, [pc, #28]	; (803340c <USBD_CDC_Init+0x1e8>)
 80333ee:	7819      	ldrb	r1, [r3, #0]
 80333f0:	68fb      	ldr	r3, [r7, #12]
 80333f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80333f6:	2340      	movs	r3, #64	; 0x40
 80333f8:	6878      	ldr	r0, [r7, #4]
 80333fa:	f7e6 ff89 	bl	801a310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80333fe:	2300      	movs	r3, #0
}
 8033400:	4618      	mov	r0, r3
 8033402:	3710      	adds	r7, #16
 8033404:	46bd      	mov	sp, r7
 8033406:	bd80      	pop	{r7, pc}
 8033408:	20002a07 	.word	0x20002a07
 803340c:	20002a08 	.word	0x20002a08
 8033410:	20002a09 	.word	0x20002a09

08033414 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8033414:	b580      	push	{r7, lr}
 8033416:	b082      	sub	sp, #8
 8033418:	af00      	add	r7, sp, #0
 803341a:	6078      	str	r0, [r7, #4]
 803341c:	460b      	mov	r3, r1
 803341e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8033420:	4b3a      	ldr	r3, [pc, #232]	; (803350c <USBD_CDC_DeInit+0xf8>)
 8033422:	781b      	ldrb	r3, [r3, #0]
 8033424:	4619      	mov	r1, r3
 8033426:	6878      	ldr	r0, [r7, #4]
 8033428:	f7e6 fea9 	bl	801a17e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803342c:	4b37      	ldr	r3, [pc, #220]	; (803350c <USBD_CDC_DeInit+0xf8>)
 803342e:	781b      	ldrb	r3, [r3, #0]
 8033430:	f003 020f 	and.w	r2, r3, #15
 8033434:	6879      	ldr	r1, [r7, #4]
 8033436:	4613      	mov	r3, r2
 8033438:	009b      	lsls	r3, r3, #2
 803343a:	4413      	add	r3, r2
 803343c:	009b      	lsls	r3, r3, #2
 803343e:	440b      	add	r3, r1
 8033440:	3324      	adds	r3, #36	; 0x24
 8033442:	2200      	movs	r2, #0
 8033444:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8033446:	4b32      	ldr	r3, [pc, #200]	; (8033510 <USBD_CDC_DeInit+0xfc>)
 8033448:	781b      	ldrb	r3, [r3, #0]
 803344a:	4619      	mov	r1, r3
 803344c:	6878      	ldr	r0, [r7, #4]
 803344e:	f7e6 fe96 	bl	801a17e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8033452:	4b2f      	ldr	r3, [pc, #188]	; (8033510 <USBD_CDC_DeInit+0xfc>)
 8033454:	781b      	ldrb	r3, [r3, #0]
 8033456:	f003 020f 	and.w	r2, r3, #15
 803345a:	6879      	ldr	r1, [r7, #4]
 803345c:	4613      	mov	r3, r2
 803345e:	009b      	lsls	r3, r3, #2
 8033460:	4413      	add	r3, r2
 8033462:	009b      	lsls	r3, r3, #2
 8033464:	440b      	add	r3, r1
 8033466:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803346a:	2200      	movs	r2, #0
 803346c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803346e:	4b29      	ldr	r3, [pc, #164]	; (8033514 <USBD_CDC_DeInit+0x100>)
 8033470:	781b      	ldrb	r3, [r3, #0]
 8033472:	4619      	mov	r1, r3
 8033474:	6878      	ldr	r0, [r7, #4]
 8033476:	f7e6 fe82 	bl	801a17e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803347a:	4b26      	ldr	r3, [pc, #152]	; (8033514 <USBD_CDC_DeInit+0x100>)
 803347c:	781b      	ldrb	r3, [r3, #0]
 803347e:	f003 020f 	and.w	r2, r3, #15
 8033482:	6879      	ldr	r1, [r7, #4]
 8033484:	4613      	mov	r3, r2
 8033486:	009b      	lsls	r3, r3, #2
 8033488:	4413      	add	r3, r2
 803348a:	009b      	lsls	r3, r3, #2
 803348c:	440b      	add	r3, r1
 803348e:	3324      	adds	r3, #36	; 0x24
 8033490:	2200      	movs	r2, #0
 8033492:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8033494:	4b1f      	ldr	r3, [pc, #124]	; (8033514 <USBD_CDC_DeInit+0x100>)
 8033496:	781b      	ldrb	r3, [r3, #0]
 8033498:	f003 020f 	and.w	r2, r3, #15
 803349c:	6879      	ldr	r1, [r7, #4]
 803349e:	4613      	mov	r3, r2
 80334a0:	009b      	lsls	r3, r3, #2
 80334a2:	4413      	add	r3, r2
 80334a4:	009b      	lsls	r3, r3, #2
 80334a6:	440b      	add	r3, r1
 80334a8:	3326      	adds	r3, #38	; 0x26
 80334aa:	2200      	movs	r2, #0
 80334ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80334ae:	687b      	ldr	r3, [r7, #4]
 80334b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80334b4:	687b      	ldr	r3, [r7, #4]
 80334b6:	32b0      	adds	r2, #176	; 0xb0
 80334b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80334bc:	2b00      	cmp	r3, #0
 80334be:	d01f      	beq.n	8033500 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80334c0:	687b      	ldr	r3, [r7, #4]
 80334c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80334c6:	687a      	ldr	r2, [r7, #4]
 80334c8:	33b0      	adds	r3, #176	; 0xb0
 80334ca:	009b      	lsls	r3, r3, #2
 80334cc:	4413      	add	r3, r2
 80334ce:	685b      	ldr	r3, [r3, #4]
 80334d0:	685b      	ldr	r3, [r3, #4]
 80334d2:	4798      	blx	r3
    (void)free(pdev->pClassDataCmsit[pdev->classId]);
 80334d4:	687b      	ldr	r3, [r7, #4]
 80334d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80334da:	687b      	ldr	r3, [r7, #4]
 80334dc:	32b0      	adds	r2, #176	; 0xb0
 80334de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80334e2:	4618      	mov	r0, r3
 80334e4:	f001 fe9c 	bl	8035220 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80334e8:	687b      	ldr	r3, [r7, #4]
 80334ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80334ee:	687b      	ldr	r3, [r7, #4]
 80334f0:	32b0      	adds	r2, #176	; 0xb0
 80334f2:	2100      	movs	r1, #0
 80334f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80334f8:	687b      	ldr	r3, [r7, #4]
 80334fa:	2200      	movs	r2, #0
 80334fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8033500:	2300      	movs	r3, #0
}
 8033502:	4618      	mov	r0, r3
 8033504:	3708      	adds	r7, #8
 8033506:	46bd      	mov	sp, r7
 8033508:	bd80      	pop	{r7, pc}
 803350a:	bf00      	nop
 803350c:	20002a07 	.word	0x20002a07
 8033510:	20002a08 	.word	0x20002a08
 8033514:	20002a09 	.word	0x20002a09

08033518 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8033518:	b580      	push	{r7, lr}
 803351a:	b086      	sub	sp, #24
 803351c:	af00      	add	r7, sp, #0
 803351e:	6078      	str	r0, [r7, #4]
 8033520:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033522:	687b      	ldr	r3, [r7, #4]
 8033524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033528:	687b      	ldr	r3, [r7, #4]
 803352a:	32b0      	adds	r2, #176	; 0xb0
 803352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033530:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8033532:	2300      	movs	r3, #0
 8033534:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8033536:	2300      	movs	r3, #0
 8033538:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803353a:	2300      	movs	r3, #0
 803353c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803353e:	693b      	ldr	r3, [r7, #16]
 8033540:	2b00      	cmp	r3, #0
 8033542:	d101      	bne.n	8033548 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8033544:	2303      	movs	r3, #3
 8033546:	e0bf      	b.n	80336c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8033548:	683b      	ldr	r3, [r7, #0]
 803354a:	781b      	ldrb	r3, [r3, #0]
 803354c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8033550:	2b00      	cmp	r3, #0
 8033552:	d050      	beq.n	80335f6 <USBD_CDC_Setup+0xde>
 8033554:	2b20      	cmp	r3, #32
 8033556:	f040 80af 	bne.w	80336b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803355a:	683b      	ldr	r3, [r7, #0]
 803355c:	88db      	ldrh	r3, [r3, #6]
 803355e:	2b00      	cmp	r3, #0
 8033560:	d03a      	beq.n	80335d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8033562:	683b      	ldr	r3, [r7, #0]
 8033564:	781b      	ldrb	r3, [r3, #0]
 8033566:	b25b      	sxtb	r3, r3
 8033568:	2b00      	cmp	r3, #0
 803356a:	da1b      	bge.n	80335a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803356c:	687b      	ldr	r3, [r7, #4]
 803356e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033572:	687a      	ldr	r2, [r7, #4]
 8033574:	33b0      	adds	r3, #176	; 0xb0
 8033576:	009b      	lsls	r3, r3, #2
 8033578:	4413      	add	r3, r2
 803357a:	685b      	ldr	r3, [r3, #4]
 803357c:	689b      	ldr	r3, [r3, #8]
 803357e:	683a      	ldr	r2, [r7, #0]
 8033580:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8033582:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8033584:	683a      	ldr	r2, [r7, #0]
 8033586:	88d2      	ldrh	r2, [r2, #6]
 8033588:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803358a:	683b      	ldr	r3, [r7, #0]
 803358c:	88db      	ldrh	r3, [r3, #6]
 803358e:	2b07      	cmp	r3, #7
 8033590:	bf28      	it	cs
 8033592:	2307      	movcs	r3, #7
 8033594:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8033596:	693b      	ldr	r3, [r7, #16]
 8033598:	89fa      	ldrh	r2, [r7, #14]
 803359a:	4619      	mov	r1, r3
 803359c:	6878      	ldr	r0, [r7, #4]
 803359e:	f001 fdad 	bl	80350fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80335a2:	e090      	b.n	80336c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80335a4:	683b      	ldr	r3, [r7, #0]
 80335a6:	785a      	ldrb	r2, [r3, #1]
 80335a8:	693b      	ldr	r3, [r7, #16]
 80335aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80335ae:	683b      	ldr	r3, [r7, #0]
 80335b0:	88db      	ldrh	r3, [r3, #6]
 80335b2:	2b3f      	cmp	r3, #63	; 0x3f
 80335b4:	d803      	bhi.n	80335be <USBD_CDC_Setup+0xa6>
 80335b6:	683b      	ldr	r3, [r7, #0]
 80335b8:	88db      	ldrh	r3, [r3, #6]
 80335ba:	b2da      	uxtb	r2, r3
 80335bc:	e000      	b.n	80335c0 <USBD_CDC_Setup+0xa8>
 80335be:	2240      	movs	r2, #64	; 0x40
 80335c0:	693b      	ldr	r3, [r7, #16]
 80335c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80335c6:	6939      	ldr	r1, [r7, #16]
 80335c8:	693b      	ldr	r3, [r7, #16]
 80335ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80335ce:	461a      	mov	r2, r3
 80335d0:	6878      	ldr	r0, [r7, #4]
 80335d2:	f001 fdbf 	bl	8035154 <USBD_CtlPrepareRx>
      break;
 80335d6:	e076      	b.n	80336c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80335d8:	687b      	ldr	r3, [r7, #4]
 80335da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80335de:	687a      	ldr	r2, [r7, #4]
 80335e0:	33b0      	adds	r3, #176	; 0xb0
 80335e2:	009b      	lsls	r3, r3, #2
 80335e4:	4413      	add	r3, r2
 80335e6:	685b      	ldr	r3, [r3, #4]
 80335e8:	689b      	ldr	r3, [r3, #8]
 80335ea:	683a      	ldr	r2, [r7, #0]
 80335ec:	7850      	ldrb	r0, [r2, #1]
 80335ee:	2200      	movs	r2, #0
 80335f0:	6839      	ldr	r1, [r7, #0]
 80335f2:	4798      	blx	r3
      break;
 80335f4:	e067      	b.n	80336c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80335f6:	683b      	ldr	r3, [r7, #0]
 80335f8:	785b      	ldrb	r3, [r3, #1]
 80335fa:	2b0b      	cmp	r3, #11
 80335fc:	d851      	bhi.n	80336a2 <USBD_CDC_Setup+0x18a>
 80335fe:	a201      	add	r2, pc, #4	; (adr r2, 8033604 <USBD_CDC_Setup+0xec>)
 8033600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033604:	08033635 	.word	0x08033635
 8033608:	080336b1 	.word	0x080336b1
 803360c:	080336a3 	.word	0x080336a3
 8033610:	080336a3 	.word	0x080336a3
 8033614:	080336a3 	.word	0x080336a3
 8033618:	080336a3 	.word	0x080336a3
 803361c:	080336a3 	.word	0x080336a3
 8033620:	080336a3 	.word	0x080336a3
 8033624:	080336a3 	.word	0x080336a3
 8033628:	080336a3 	.word	0x080336a3
 803362c:	0803365f 	.word	0x0803365f
 8033630:	08033689 	.word	0x08033689
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033634:	687b      	ldr	r3, [r7, #4]
 8033636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803363a:	b2db      	uxtb	r3, r3
 803363c:	2b03      	cmp	r3, #3
 803363e:	d107      	bne.n	8033650 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8033640:	f107 030a 	add.w	r3, r7, #10
 8033644:	2202      	movs	r2, #2
 8033646:	4619      	mov	r1, r3
 8033648:	6878      	ldr	r0, [r7, #4]
 803364a:	f001 fd57 	bl	80350fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803364e:	e032      	b.n	80336b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8033650:	6839      	ldr	r1, [r7, #0]
 8033652:	6878      	ldr	r0, [r7, #4]
 8033654:	f001 fce1 	bl	803501a <USBD_CtlError>
            ret = USBD_FAIL;
 8033658:	2303      	movs	r3, #3
 803365a:	75fb      	strb	r3, [r7, #23]
          break;
 803365c:	e02b      	b.n	80336b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803365e:	687b      	ldr	r3, [r7, #4]
 8033660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033664:	b2db      	uxtb	r3, r3
 8033666:	2b03      	cmp	r3, #3
 8033668:	d107      	bne.n	803367a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803366a:	f107 030d 	add.w	r3, r7, #13
 803366e:	2201      	movs	r2, #1
 8033670:	4619      	mov	r1, r3
 8033672:	6878      	ldr	r0, [r7, #4]
 8033674:	f001 fd42 	bl	80350fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8033678:	e01d      	b.n	80336b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803367a:	6839      	ldr	r1, [r7, #0]
 803367c:	6878      	ldr	r0, [r7, #4]
 803367e:	f001 fccc 	bl	803501a <USBD_CtlError>
            ret = USBD_FAIL;
 8033682:	2303      	movs	r3, #3
 8033684:	75fb      	strb	r3, [r7, #23]
          break;
 8033686:	e016      	b.n	80336b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8033688:	687b      	ldr	r3, [r7, #4]
 803368a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803368e:	b2db      	uxtb	r3, r3
 8033690:	2b03      	cmp	r3, #3
 8033692:	d00f      	beq.n	80336b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8033694:	6839      	ldr	r1, [r7, #0]
 8033696:	6878      	ldr	r0, [r7, #4]
 8033698:	f001 fcbf 	bl	803501a <USBD_CtlError>
            ret = USBD_FAIL;
 803369c:	2303      	movs	r3, #3
 803369e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80336a0:	e008      	b.n	80336b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80336a2:	6839      	ldr	r1, [r7, #0]
 80336a4:	6878      	ldr	r0, [r7, #4]
 80336a6:	f001 fcb8 	bl	803501a <USBD_CtlError>
          ret = USBD_FAIL;
 80336aa:	2303      	movs	r3, #3
 80336ac:	75fb      	strb	r3, [r7, #23]
          break;
 80336ae:	e002      	b.n	80336b6 <USBD_CDC_Setup+0x19e>
          break;
 80336b0:	bf00      	nop
 80336b2:	e008      	b.n	80336c6 <USBD_CDC_Setup+0x1ae>
          break;
 80336b4:	bf00      	nop
      }
      break;
 80336b6:	e006      	b.n	80336c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80336b8:	6839      	ldr	r1, [r7, #0]
 80336ba:	6878      	ldr	r0, [r7, #4]
 80336bc:	f001 fcad 	bl	803501a <USBD_CtlError>
      ret = USBD_FAIL;
 80336c0:	2303      	movs	r3, #3
 80336c2:	75fb      	strb	r3, [r7, #23]
      break;
 80336c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80336c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80336c8:	4618      	mov	r0, r3
 80336ca:	3718      	adds	r7, #24
 80336cc:	46bd      	mov	sp, r7
 80336ce:	bd80      	pop	{r7, pc}

080336d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80336d0:	b580      	push	{r7, lr}
 80336d2:	b084      	sub	sp, #16
 80336d4:	af00      	add	r7, sp, #0
 80336d6:	6078      	str	r0, [r7, #4]
 80336d8:	460b      	mov	r3, r1
 80336da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80336dc:	687b      	ldr	r3, [r7, #4]
 80336de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80336e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80336e4:	687b      	ldr	r3, [r7, #4]
 80336e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80336ea:	687b      	ldr	r3, [r7, #4]
 80336ec:	32b0      	adds	r2, #176	; 0xb0
 80336ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80336f2:	2b00      	cmp	r3, #0
 80336f4:	d101      	bne.n	80336fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80336f6:	2303      	movs	r3, #3
 80336f8:	e065      	b.n	80337c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80336fa:	687b      	ldr	r3, [r7, #4]
 80336fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033700:	687b      	ldr	r3, [r7, #4]
 8033702:	32b0      	adds	r2, #176	; 0xb0
 8033704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033708:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803370a:	78fb      	ldrb	r3, [r7, #3]
 803370c:	f003 020f 	and.w	r2, r3, #15
 8033710:	6879      	ldr	r1, [r7, #4]
 8033712:	4613      	mov	r3, r2
 8033714:	009b      	lsls	r3, r3, #2
 8033716:	4413      	add	r3, r2
 8033718:	009b      	lsls	r3, r3, #2
 803371a:	440b      	add	r3, r1
 803371c:	3318      	adds	r3, #24
 803371e:	681b      	ldr	r3, [r3, #0]
 8033720:	2b00      	cmp	r3, #0
 8033722:	d02f      	beq.n	8033784 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8033724:	78fb      	ldrb	r3, [r7, #3]
 8033726:	f003 020f 	and.w	r2, r3, #15
 803372a:	6879      	ldr	r1, [r7, #4]
 803372c:	4613      	mov	r3, r2
 803372e:	009b      	lsls	r3, r3, #2
 8033730:	4413      	add	r3, r2
 8033732:	009b      	lsls	r3, r3, #2
 8033734:	440b      	add	r3, r1
 8033736:	3318      	adds	r3, #24
 8033738:	681a      	ldr	r2, [r3, #0]
 803373a:	78fb      	ldrb	r3, [r7, #3]
 803373c:	f003 010f 	and.w	r1, r3, #15
 8033740:	68f8      	ldr	r0, [r7, #12]
 8033742:	460b      	mov	r3, r1
 8033744:	00db      	lsls	r3, r3, #3
 8033746:	440b      	add	r3, r1
 8033748:	009b      	lsls	r3, r3, #2
 803374a:	4403      	add	r3, r0
 803374c:	3348      	adds	r3, #72	; 0x48
 803374e:	681b      	ldr	r3, [r3, #0]
 8033750:	fbb2 f1f3 	udiv	r1, r2, r3
 8033754:	fb01 f303 	mul.w	r3, r1, r3
 8033758:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803375a:	2b00      	cmp	r3, #0
 803375c:	d112      	bne.n	8033784 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803375e:	78fb      	ldrb	r3, [r7, #3]
 8033760:	f003 020f 	and.w	r2, r3, #15
 8033764:	6879      	ldr	r1, [r7, #4]
 8033766:	4613      	mov	r3, r2
 8033768:	009b      	lsls	r3, r3, #2
 803376a:	4413      	add	r3, r2
 803376c:	009b      	lsls	r3, r3, #2
 803376e:	440b      	add	r3, r1
 8033770:	3318      	adds	r3, #24
 8033772:	2200      	movs	r2, #0
 8033774:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8033776:	78f9      	ldrb	r1, [r7, #3]
 8033778:	2300      	movs	r3, #0
 803377a:	2200      	movs	r2, #0
 803377c:	6878      	ldr	r0, [r7, #4]
 803377e:	f7e6 fda6 	bl	801a2ce <USBD_LL_Transmit>
 8033782:	e01f      	b.n	80337c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8033784:	68bb      	ldr	r3, [r7, #8]
 8033786:	2200      	movs	r2, #0
 8033788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803378c:	687b      	ldr	r3, [r7, #4]
 803378e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033792:	687a      	ldr	r2, [r7, #4]
 8033794:	33b0      	adds	r3, #176	; 0xb0
 8033796:	009b      	lsls	r3, r3, #2
 8033798:	4413      	add	r3, r2
 803379a:	685b      	ldr	r3, [r3, #4]
 803379c:	691b      	ldr	r3, [r3, #16]
 803379e:	2b00      	cmp	r3, #0
 80337a0:	d010      	beq.n	80337c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80337a2:	687b      	ldr	r3, [r7, #4]
 80337a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80337a8:	687a      	ldr	r2, [r7, #4]
 80337aa:	33b0      	adds	r3, #176	; 0xb0
 80337ac:	009b      	lsls	r3, r3, #2
 80337ae:	4413      	add	r3, r2
 80337b0:	685b      	ldr	r3, [r3, #4]
 80337b2:	691b      	ldr	r3, [r3, #16]
 80337b4:	68ba      	ldr	r2, [r7, #8]
 80337b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80337ba:	68ba      	ldr	r2, [r7, #8]
 80337bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80337c0:	78fa      	ldrb	r2, [r7, #3]
 80337c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80337c4:	2300      	movs	r3, #0
}
 80337c6:	4618      	mov	r0, r3
 80337c8:	3710      	adds	r7, #16
 80337ca:	46bd      	mov	sp, r7
 80337cc:	bd80      	pop	{r7, pc}

080337ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80337ce:	b580      	push	{r7, lr}
 80337d0:	b084      	sub	sp, #16
 80337d2:	af00      	add	r7, sp, #0
 80337d4:	6078      	str	r0, [r7, #4]
 80337d6:	460b      	mov	r3, r1
 80337d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80337da:	687b      	ldr	r3, [r7, #4]
 80337dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80337e0:	687b      	ldr	r3, [r7, #4]
 80337e2:	32b0      	adds	r2, #176	; 0xb0
 80337e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80337e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80337ea:	687b      	ldr	r3, [r7, #4]
 80337ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80337f0:	687b      	ldr	r3, [r7, #4]
 80337f2:	32b0      	adds	r2, #176	; 0xb0
 80337f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80337f8:	2b00      	cmp	r3, #0
 80337fa:	d101      	bne.n	8033800 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80337fc:	2303      	movs	r3, #3
 80337fe:	e01a      	b.n	8033836 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8033800:	78fb      	ldrb	r3, [r7, #3]
 8033802:	4619      	mov	r1, r3
 8033804:	6878      	ldr	r0, [r7, #4]
 8033806:	f7e6 fda4 	bl	801a352 <USBD_LL_GetRxDataSize>
 803380a:	4602      	mov	r2, r0
 803380c:	68fb      	ldr	r3, [r7, #12]
 803380e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8033812:	687b      	ldr	r3, [r7, #4]
 8033814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033818:	687a      	ldr	r2, [r7, #4]
 803381a:	33b0      	adds	r3, #176	; 0xb0
 803381c:	009b      	lsls	r3, r3, #2
 803381e:	4413      	add	r3, r2
 8033820:	685b      	ldr	r3, [r3, #4]
 8033822:	68db      	ldr	r3, [r3, #12]
 8033824:	68fa      	ldr	r2, [r7, #12]
 8033826:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803382a:	68fa      	ldr	r2, [r7, #12]
 803382c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8033830:	4611      	mov	r1, r2
 8033832:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8033834:	2300      	movs	r3, #0
}
 8033836:	4618      	mov	r0, r3
 8033838:	3710      	adds	r7, #16
 803383a:	46bd      	mov	sp, r7
 803383c:	bd80      	pop	{r7, pc}

0803383e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803383e:	b580      	push	{r7, lr}
 8033840:	b084      	sub	sp, #16
 8033842:	af00      	add	r7, sp, #0
 8033844:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033846:	687b      	ldr	r3, [r7, #4]
 8033848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803384c:	687b      	ldr	r3, [r7, #4]
 803384e:	32b0      	adds	r2, #176	; 0xb0
 8033850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033854:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8033856:	68fb      	ldr	r3, [r7, #12]
 8033858:	2b00      	cmp	r3, #0
 803385a:	d101      	bne.n	8033860 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803385c:	2303      	movs	r3, #3
 803385e:	e025      	b.n	80338ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8033860:	687b      	ldr	r3, [r7, #4]
 8033862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033866:	687a      	ldr	r2, [r7, #4]
 8033868:	33b0      	adds	r3, #176	; 0xb0
 803386a:	009b      	lsls	r3, r3, #2
 803386c:	4413      	add	r3, r2
 803386e:	685b      	ldr	r3, [r3, #4]
 8033870:	2b00      	cmp	r3, #0
 8033872:	d01a      	beq.n	80338aa <USBD_CDC_EP0_RxReady+0x6c>
 8033874:	68fb      	ldr	r3, [r7, #12]
 8033876:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803387a:	2bff      	cmp	r3, #255	; 0xff
 803387c:	d015      	beq.n	80338aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803387e:	687b      	ldr	r3, [r7, #4]
 8033880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033884:	687a      	ldr	r2, [r7, #4]
 8033886:	33b0      	adds	r3, #176	; 0xb0
 8033888:	009b      	lsls	r3, r3, #2
 803388a:	4413      	add	r3, r2
 803388c:	685b      	ldr	r3, [r3, #4]
 803388e:	689b      	ldr	r3, [r3, #8]
 8033890:	68fa      	ldr	r2, [r7, #12]
 8033892:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8033896:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8033898:	68fa      	ldr	r2, [r7, #12]
 803389a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803389e:	b292      	uxth	r2, r2
 80338a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80338a2:	68fb      	ldr	r3, [r7, #12]
 80338a4:	22ff      	movs	r2, #255	; 0xff
 80338a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80338aa:	2300      	movs	r3, #0
}
 80338ac:	4618      	mov	r0, r3
 80338ae:	3710      	adds	r7, #16
 80338b0:	46bd      	mov	sp, r7
 80338b2:	bd80      	pop	{r7, pc}

080338b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80338b4:	b580      	push	{r7, lr}
 80338b6:	b086      	sub	sp, #24
 80338b8:	af00      	add	r7, sp, #0
 80338ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80338bc:	2182      	movs	r1, #130	; 0x82
 80338be:	4818      	ldr	r0, [pc, #96]	; (8033920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80338c0:	f000 fd49 	bl	8034356 <USBD_GetEpDesc>
 80338c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80338c6:	2101      	movs	r1, #1
 80338c8:	4815      	ldr	r0, [pc, #84]	; (8033920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80338ca:	f000 fd44 	bl	8034356 <USBD_GetEpDesc>
 80338ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80338d0:	2181      	movs	r1, #129	; 0x81
 80338d2:	4813      	ldr	r0, [pc, #76]	; (8033920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80338d4:	f000 fd3f 	bl	8034356 <USBD_GetEpDesc>
 80338d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80338da:	697b      	ldr	r3, [r7, #20]
 80338dc:	2b00      	cmp	r3, #0
 80338de:	d002      	beq.n	80338e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80338e0:	697b      	ldr	r3, [r7, #20]
 80338e2:	2210      	movs	r2, #16
 80338e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80338e6:	693b      	ldr	r3, [r7, #16]
 80338e8:	2b00      	cmp	r3, #0
 80338ea:	d006      	beq.n	80338fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80338ec:	693b      	ldr	r3, [r7, #16]
 80338ee:	2200      	movs	r2, #0
 80338f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80338f4:	711a      	strb	r2, [r3, #4]
 80338f6:	2200      	movs	r2, #0
 80338f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80338fa:	68fb      	ldr	r3, [r7, #12]
 80338fc:	2b00      	cmp	r3, #0
 80338fe:	d006      	beq.n	803390e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8033900:	68fb      	ldr	r3, [r7, #12]
 8033902:	2200      	movs	r2, #0
 8033904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8033908:	711a      	strb	r2, [r3, #4]
 803390a:	2200      	movs	r2, #0
 803390c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803390e:	687b      	ldr	r3, [r7, #4]
 8033910:	2243      	movs	r2, #67	; 0x43
 8033912:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8033914:	4b02      	ldr	r3, [pc, #8]	; (8033920 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8033916:	4618      	mov	r0, r3
 8033918:	3718      	adds	r7, #24
 803391a:	46bd      	mov	sp, r7
 803391c:	bd80      	pop	{r7, pc}
 803391e:	bf00      	nop
 8033920:	200029c4 	.word	0x200029c4

08033924 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8033924:	b580      	push	{r7, lr}
 8033926:	b086      	sub	sp, #24
 8033928:	af00      	add	r7, sp, #0
 803392a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803392c:	2182      	movs	r1, #130	; 0x82
 803392e:	4818      	ldr	r0, [pc, #96]	; (8033990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8033930:	f000 fd11 	bl	8034356 <USBD_GetEpDesc>
 8033934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8033936:	2101      	movs	r1, #1
 8033938:	4815      	ldr	r0, [pc, #84]	; (8033990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803393a:	f000 fd0c 	bl	8034356 <USBD_GetEpDesc>
 803393e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8033940:	2181      	movs	r1, #129	; 0x81
 8033942:	4813      	ldr	r0, [pc, #76]	; (8033990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8033944:	f000 fd07 	bl	8034356 <USBD_GetEpDesc>
 8033948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803394a:	697b      	ldr	r3, [r7, #20]
 803394c:	2b00      	cmp	r3, #0
 803394e:	d002      	beq.n	8033956 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8033950:	697b      	ldr	r3, [r7, #20]
 8033952:	2210      	movs	r2, #16
 8033954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8033956:	693b      	ldr	r3, [r7, #16]
 8033958:	2b00      	cmp	r3, #0
 803395a:	d006      	beq.n	803396a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803395c:	693b      	ldr	r3, [r7, #16]
 803395e:	2200      	movs	r2, #0
 8033960:	711a      	strb	r2, [r3, #4]
 8033962:	2200      	movs	r2, #0
 8033964:	f042 0202 	orr.w	r2, r2, #2
 8033968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803396a:	68fb      	ldr	r3, [r7, #12]
 803396c:	2b00      	cmp	r3, #0
 803396e:	d006      	beq.n	803397e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8033970:	68fb      	ldr	r3, [r7, #12]
 8033972:	2200      	movs	r2, #0
 8033974:	711a      	strb	r2, [r3, #4]
 8033976:	2200      	movs	r2, #0
 8033978:	f042 0202 	orr.w	r2, r2, #2
 803397c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803397e:	687b      	ldr	r3, [r7, #4]
 8033980:	2243      	movs	r2, #67	; 0x43
 8033982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8033984:	4b02      	ldr	r3, [pc, #8]	; (8033990 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8033986:	4618      	mov	r0, r3
 8033988:	3718      	adds	r7, #24
 803398a:	46bd      	mov	sp, r7
 803398c:	bd80      	pop	{r7, pc}
 803398e:	bf00      	nop
 8033990:	200029c4 	.word	0x200029c4

08033994 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8033994:	b580      	push	{r7, lr}
 8033996:	b086      	sub	sp, #24
 8033998:	af00      	add	r7, sp, #0
 803399a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803399c:	2182      	movs	r1, #130	; 0x82
 803399e:	4818      	ldr	r0, [pc, #96]	; (8033a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80339a0:	f000 fcd9 	bl	8034356 <USBD_GetEpDesc>
 80339a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80339a6:	2101      	movs	r1, #1
 80339a8:	4815      	ldr	r0, [pc, #84]	; (8033a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80339aa:	f000 fcd4 	bl	8034356 <USBD_GetEpDesc>
 80339ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80339b0:	2181      	movs	r1, #129	; 0x81
 80339b2:	4813      	ldr	r0, [pc, #76]	; (8033a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80339b4:	f000 fccf 	bl	8034356 <USBD_GetEpDesc>
 80339b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80339ba:	697b      	ldr	r3, [r7, #20]
 80339bc:	2b00      	cmp	r3, #0
 80339be:	d002      	beq.n	80339c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80339c0:	697b      	ldr	r3, [r7, #20]
 80339c2:	2210      	movs	r2, #16
 80339c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80339c6:	693b      	ldr	r3, [r7, #16]
 80339c8:	2b00      	cmp	r3, #0
 80339ca:	d006      	beq.n	80339da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80339cc:	693b      	ldr	r3, [r7, #16]
 80339ce:	2200      	movs	r2, #0
 80339d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80339d4:	711a      	strb	r2, [r3, #4]
 80339d6:	2200      	movs	r2, #0
 80339d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80339da:	68fb      	ldr	r3, [r7, #12]
 80339dc:	2b00      	cmp	r3, #0
 80339de:	d006      	beq.n	80339ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80339e0:	68fb      	ldr	r3, [r7, #12]
 80339e2:	2200      	movs	r2, #0
 80339e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80339e8:	711a      	strb	r2, [r3, #4]
 80339ea:	2200      	movs	r2, #0
 80339ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80339ee:	687b      	ldr	r3, [r7, #4]
 80339f0:	2243      	movs	r2, #67	; 0x43
 80339f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80339f4:	4b02      	ldr	r3, [pc, #8]	; (8033a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80339f6:	4618      	mov	r0, r3
 80339f8:	3718      	adds	r7, #24
 80339fa:	46bd      	mov	sp, r7
 80339fc:	bd80      	pop	{r7, pc}
 80339fe:	bf00      	nop
 8033a00:	200029c4 	.word	0x200029c4

08033a04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8033a04:	b480      	push	{r7}
 8033a06:	b083      	sub	sp, #12
 8033a08:	af00      	add	r7, sp, #0
 8033a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8033a0c:	687b      	ldr	r3, [r7, #4]
 8033a0e:	220a      	movs	r2, #10
 8033a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8033a12:	4b03      	ldr	r3, [pc, #12]	; (8033a20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8033a14:	4618      	mov	r0, r3
 8033a16:	370c      	adds	r7, #12
 8033a18:	46bd      	mov	sp, r7
 8033a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a1e:	4770      	bx	lr
 8033a20:	20002980 	.word	0x20002980

08033a24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8033a24:	b480      	push	{r7}
 8033a26:	b083      	sub	sp, #12
 8033a28:	af00      	add	r7, sp, #0
 8033a2a:	6078      	str	r0, [r7, #4]
 8033a2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8033a2e:	683b      	ldr	r3, [r7, #0]
 8033a30:	2b00      	cmp	r3, #0
 8033a32:	d101      	bne.n	8033a38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8033a34:	2303      	movs	r3, #3
 8033a36:	e009      	b.n	8033a4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8033a38:	687b      	ldr	r3, [r7, #4]
 8033a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8033a3e:	687a      	ldr	r2, [r7, #4]
 8033a40:	33b0      	adds	r3, #176	; 0xb0
 8033a42:	009b      	lsls	r3, r3, #2
 8033a44:	4413      	add	r3, r2
 8033a46:	683a      	ldr	r2, [r7, #0]
 8033a48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8033a4a:	2300      	movs	r3, #0
}
 8033a4c:	4618      	mov	r0, r3
 8033a4e:	370c      	adds	r7, #12
 8033a50:	46bd      	mov	sp, r7
 8033a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a56:	4770      	bx	lr

08033a58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8033a58:	b480      	push	{r7}
 8033a5a:	b087      	sub	sp, #28
 8033a5c:	af00      	add	r7, sp, #0
 8033a5e:	60f8      	str	r0, [r7, #12]
 8033a60:	60b9      	str	r1, [r7, #8]
 8033a62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033a64:	68fb      	ldr	r3, [r7, #12]
 8033a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033a6a:	68fb      	ldr	r3, [r7, #12]
 8033a6c:	32b0      	adds	r2, #176	; 0xb0
 8033a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033a72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8033a74:	697b      	ldr	r3, [r7, #20]
 8033a76:	2b00      	cmp	r3, #0
 8033a78:	d101      	bne.n	8033a7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8033a7a:	2303      	movs	r3, #3
 8033a7c:	e008      	b.n	8033a90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8033a7e:	697b      	ldr	r3, [r7, #20]
 8033a80:	68ba      	ldr	r2, [r7, #8]
 8033a82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8033a86:	697b      	ldr	r3, [r7, #20]
 8033a88:	687a      	ldr	r2, [r7, #4]
 8033a8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8033a8e:	2300      	movs	r3, #0
}
 8033a90:	4618      	mov	r0, r3
 8033a92:	371c      	adds	r7, #28
 8033a94:	46bd      	mov	sp, r7
 8033a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a9a:	4770      	bx	lr

08033a9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8033a9c:	b480      	push	{r7}
 8033a9e:	b085      	sub	sp, #20
 8033aa0:	af00      	add	r7, sp, #0
 8033aa2:	6078      	str	r0, [r7, #4]
 8033aa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033aa6:	687b      	ldr	r3, [r7, #4]
 8033aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033aac:	687b      	ldr	r3, [r7, #4]
 8033aae:	32b0      	adds	r2, #176	; 0xb0
 8033ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033ab4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8033ab6:	68fb      	ldr	r3, [r7, #12]
 8033ab8:	2b00      	cmp	r3, #0
 8033aba:	d101      	bne.n	8033ac0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8033abc:	2303      	movs	r3, #3
 8033abe:	e004      	b.n	8033aca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8033ac0:	68fb      	ldr	r3, [r7, #12]
 8033ac2:	683a      	ldr	r2, [r7, #0]
 8033ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8033ac8:	2300      	movs	r3, #0
}
 8033aca:	4618      	mov	r0, r3
 8033acc:	3714      	adds	r7, #20
 8033ace:	46bd      	mov	sp, r7
 8033ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ad4:	4770      	bx	lr
	...

08033ad8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8033ad8:	b580      	push	{r7, lr}
 8033ada:	b084      	sub	sp, #16
 8033adc:	af00      	add	r7, sp, #0
 8033ade:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033ae0:	687b      	ldr	r3, [r7, #4]
 8033ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033ae6:	687b      	ldr	r3, [r7, #4]
 8033ae8:	32b0      	adds	r2, #176	; 0xb0
 8033aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033aee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8033af0:	2301      	movs	r3, #1
 8033af2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8033af4:	68bb      	ldr	r3, [r7, #8]
 8033af6:	2b00      	cmp	r3, #0
 8033af8:	d101      	bne.n	8033afe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8033afa:	2303      	movs	r3, #3
 8033afc:	e025      	b.n	8033b4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8033afe:	68bb      	ldr	r3, [r7, #8]
 8033b00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8033b04:	2b00      	cmp	r3, #0
 8033b06:	d11f      	bne.n	8033b48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8033b08:	68bb      	ldr	r3, [r7, #8]
 8033b0a:	2201      	movs	r2, #1
 8033b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8033b10:	4b10      	ldr	r3, [pc, #64]	; (8033b54 <USBD_CDC_TransmitPacket+0x7c>)
 8033b12:	781b      	ldrb	r3, [r3, #0]
 8033b14:	f003 020f 	and.w	r2, r3, #15
 8033b18:	68bb      	ldr	r3, [r7, #8]
 8033b1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8033b1e:	6878      	ldr	r0, [r7, #4]
 8033b20:	4613      	mov	r3, r2
 8033b22:	009b      	lsls	r3, r3, #2
 8033b24:	4413      	add	r3, r2
 8033b26:	009b      	lsls	r3, r3, #2
 8033b28:	4403      	add	r3, r0
 8033b2a:	3318      	adds	r3, #24
 8033b2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8033b2e:	4b09      	ldr	r3, [pc, #36]	; (8033b54 <USBD_CDC_TransmitPacket+0x7c>)
 8033b30:	7819      	ldrb	r1, [r3, #0]
 8033b32:	68bb      	ldr	r3, [r7, #8]
 8033b34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8033b38:	68bb      	ldr	r3, [r7, #8]
 8033b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8033b3e:	6878      	ldr	r0, [r7, #4]
 8033b40:	f7e6 fbc5 	bl	801a2ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8033b44:	2300      	movs	r3, #0
 8033b46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8033b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8033b4a:	4618      	mov	r0, r3
 8033b4c:	3710      	adds	r7, #16
 8033b4e:	46bd      	mov	sp, r7
 8033b50:	bd80      	pop	{r7, pc}
 8033b52:	bf00      	nop
 8033b54:	20002a07 	.word	0x20002a07

08033b58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8033b58:	b580      	push	{r7, lr}
 8033b5a:	b084      	sub	sp, #16
 8033b5c:	af00      	add	r7, sp, #0
 8033b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8033b60:	687b      	ldr	r3, [r7, #4]
 8033b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033b66:	687b      	ldr	r3, [r7, #4]
 8033b68:	32b0      	adds	r2, #176	; 0xb0
 8033b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033b6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8033b70:	687b      	ldr	r3, [r7, #4]
 8033b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033b76:	687b      	ldr	r3, [r7, #4]
 8033b78:	32b0      	adds	r2, #176	; 0xb0
 8033b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033b7e:	2b00      	cmp	r3, #0
 8033b80:	d101      	bne.n	8033b86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8033b82:	2303      	movs	r3, #3
 8033b84:	e018      	b.n	8033bb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8033b86:	687b      	ldr	r3, [r7, #4]
 8033b88:	7c1b      	ldrb	r3, [r3, #16]
 8033b8a:	2b00      	cmp	r3, #0
 8033b8c:	d10a      	bne.n	8033ba4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8033b8e:	4b0c      	ldr	r3, [pc, #48]	; (8033bc0 <USBD_CDC_ReceivePacket+0x68>)
 8033b90:	7819      	ldrb	r1, [r3, #0]
 8033b92:	68fb      	ldr	r3, [r7, #12]
 8033b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8033b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8033b9c:	6878      	ldr	r0, [r7, #4]
 8033b9e:	f7e6 fbb7 	bl	801a310 <USBD_LL_PrepareReceive>
 8033ba2:	e008      	b.n	8033bb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8033ba4:	4b06      	ldr	r3, [pc, #24]	; (8033bc0 <USBD_CDC_ReceivePacket+0x68>)
 8033ba6:	7819      	ldrb	r1, [r3, #0]
 8033ba8:	68fb      	ldr	r3, [r7, #12]
 8033baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8033bae:	2340      	movs	r3, #64	; 0x40
 8033bb0:	6878      	ldr	r0, [r7, #4]
 8033bb2:	f7e6 fbad 	bl	801a310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8033bb6:	2300      	movs	r3, #0
}
 8033bb8:	4618      	mov	r0, r3
 8033bba:	3710      	adds	r7, #16
 8033bbc:	46bd      	mov	sp, r7
 8033bbe:	bd80      	pop	{r7, pc}
 8033bc0:	20002a08 	.word	0x20002a08

08033bc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8033bc4:	b580      	push	{r7, lr}
 8033bc6:	b086      	sub	sp, #24
 8033bc8:	af00      	add	r7, sp, #0
 8033bca:	60f8      	str	r0, [r7, #12]
 8033bcc:	60b9      	str	r1, [r7, #8]
 8033bce:	4613      	mov	r3, r2
 8033bd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8033bd2:	68fb      	ldr	r3, [r7, #12]
 8033bd4:	2b00      	cmp	r3, #0
 8033bd6:	d101      	bne.n	8033bdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8033bd8:	2303      	movs	r3, #3
 8033bda:	e01f      	b.n	8033c1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8033bdc:	68fb      	ldr	r3, [r7, #12]
 8033bde:	2200      	movs	r2, #0
 8033be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8033be4:	68fb      	ldr	r3, [r7, #12]
 8033be6:	2200      	movs	r2, #0
 8033be8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8033bec:	68fb      	ldr	r3, [r7, #12]
 8033bee:	2200      	movs	r2, #0
 8033bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8033bf4:	68bb      	ldr	r3, [r7, #8]
 8033bf6:	2b00      	cmp	r3, #0
 8033bf8:	d003      	beq.n	8033c02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8033bfa:	68fb      	ldr	r3, [r7, #12]
 8033bfc:	68ba      	ldr	r2, [r7, #8]
 8033bfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8033c02:	68fb      	ldr	r3, [r7, #12]
 8033c04:	2201      	movs	r2, #1
 8033c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8033c0a:	68fb      	ldr	r3, [r7, #12]
 8033c0c:	79fa      	ldrb	r2, [r7, #7]
 8033c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8033c10:	68f8      	ldr	r0, [r7, #12]
 8033c12:	f7e6 fa23 	bl	801a05c <USBD_LL_Init>
 8033c16:	4603      	mov	r3, r0
 8033c18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8033c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8033c1c:	4618      	mov	r0, r3
 8033c1e:	3718      	adds	r7, #24
 8033c20:	46bd      	mov	sp, r7
 8033c22:	bd80      	pop	{r7, pc}

08033c24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8033c24:	b580      	push	{r7, lr}
 8033c26:	b084      	sub	sp, #16
 8033c28:	af00      	add	r7, sp, #0
 8033c2a:	6078      	str	r0, [r7, #4]
 8033c2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8033c2e:	2300      	movs	r3, #0
 8033c30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8033c32:	683b      	ldr	r3, [r7, #0]
 8033c34:	2b00      	cmp	r3, #0
 8033c36:	d101      	bne.n	8033c3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8033c38:	2303      	movs	r3, #3
 8033c3a:	e025      	b.n	8033c88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8033c3c:	687b      	ldr	r3, [r7, #4]
 8033c3e:	683a      	ldr	r2, [r7, #0]
 8033c40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8033c44:	687b      	ldr	r3, [r7, #4]
 8033c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033c4a:	687b      	ldr	r3, [r7, #4]
 8033c4c:	32ae      	adds	r2, #174	; 0xae
 8033c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033c54:	2b00      	cmp	r3, #0
 8033c56:	d00f      	beq.n	8033c78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8033c58:	687b      	ldr	r3, [r7, #4]
 8033c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033c5e:	687b      	ldr	r3, [r7, #4]
 8033c60:	32ae      	adds	r2, #174	; 0xae
 8033c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033c68:	f107 020e 	add.w	r2, r7, #14
 8033c6c:	4610      	mov	r0, r2
 8033c6e:	4798      	blx	r3
 8033c70:	4602      	mov	r2, r0
 8033c72:	687b      	ldr	r3, [r7, #4]
 8033c74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8033c78:	687b      	ldr	r3, [r7, #4]
 8033c7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8033c7e:	1c5a      	adds	r2, r3, #1
 8033c80:	687b      	ldr	r3, [r7, #4]
 8033c82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8033c86:	2300      	movs	r3, #0
}
 8033c88:	4618      	mov	r0, r3
 8033c8a:	3710      	adds	r7, #16
 8033c8c:	46bd      	mov	sp, r7
 8033c8e:	bd80      	pop	{r7, pc}

08033c90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8033c90:	b580      	push	{r7, lr}
 8033c92:	b082      	sub	sp, #8
 8033c94:	af00      	add	r7, sp, #0
 8033c96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8033c98:	6878      	ldr	r0, [r7, #4]
 8033c9a:	f7e6 fa2f 	bl	801a0fc <USBD_LL_Start>
 8033c9e:	4603      	mov	r3, r0
}
 8033ca0:	4618      	mov	r0, r3
 8033ca2:	3708      	adds	r7, #8
 8033ca4:	46bd      	mov	sp, r7
 8033ca6:	bd80      	pop	{r7, pc}

08033ca8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8033ca8:	b480      	push	{r7}
 8033caa:	b083      	sub	sp, #12
 8033cac:	af00      	add	r7, sp, #0
 8033cae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8033cb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8033cb2:	4618      	mov	r0, r3
 8033cb4:	370c      	adds	r7, #12
 8033cb6:	46bd      	mov	sp, r7
 8033cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033cbc:	4770      	bx	lr

08033cbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8033cbe:	b580      	push	{r7, lr}
 8033cc0:	b084      	sub	sp, #16
 8033cc2:	af00      	add	r7, sp, #0
 8033cc4:	6078      	str	r0, [r7, #4]
 8033cc6:	460b      	mov	r3, r1
 8033cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8033cca:	2300      	movs	r3, #0
 8033ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8033cce:	687b      	ldr	r3, [r7, #4]
 8033cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033cd4:	2b00      	cmp	r3, #0
 8033cd6:	d009      	beq.n	8033cec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8033cd8:	687b      	ldr	r3, [r7, #4]
 8033cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033cde:	681b      	ldr	r3, [r3, #0]
 8033ce0:	78fa      	ldrb	r2, [r7, #3]
 8033ce2:	4611      	mov	r1, r2
 8033ce4:	6878      	ldr	r0, [r7, #4]
 8033ce6:	4798      	blx	r3
 8033ce8:	4603      	mov	r3, r0
 8033cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8033cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8033cee:	4618      	mov	r0, r3
 8033cf0:	3710      	adds	r7, #16
 8033cf2:	46bd      	mov	sp, r7
 8033cf4:	bd80      	pop	{r7, pc}

08033cf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8033cf6:	b580      	push	{r7, lr}
 8033cf8:	b084      	sub	sp, #16
 8033cfa:	af00      	add	r7, sp, #0
 8033cfc:	6078      	str	r0, [r7, #4]
 8033cfe:	460b      	mov	r3, r1
 8033d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8033d02:	2300      	movs	r3, #0
 8033d04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8033d06:	687b      	ldr	r3, [r7, #4]
 8033d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033d0c:	685b      	ldr	r3, [r3, #4]
 8033d0e:	78fa      	ldrb	r2, [r7, #3]
 8033d10:	4611      	mov	r1, r2
 8033d12:	6878      	ldr	r0, [r7, #4]
 8033d14:	4798      	blx	r3
 8033d16:	4603      	mov	r3, r0
 8033d18:	2b00      	cmp	r3, #0
 8033d1a:	d001      	beq.n	8033d20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8033d1c:	2303      	movs	r3, #3
 8033d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8033d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8033d22:	4618      	mov	r0, r3
 8033d24:	3710      	adds	r7, #16
 8033d26:	46bd      	mov	sp, r7
 8033d28:	bd80      	pop	{r7, pc}

08033d2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8033d2a:	b580      	push	{r7, lr}
 8033d2c:	b084      	sub	sp, #16
 8033d2e:	af00      	add	r7, sp, #0
 8033d30:	6078      	str	r0, [r7, #4]
 8033d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8033d34:	687b      	ldr	r3, [r7, #4]
 8033d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033d3a:	6839      	ldr	r1, [r7, #0]
 8033d3c:	4618      	mov	r0, r3
 8033d3e:	f001 f932 	bl	8034fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8033d42:	687b      	ldr	r3, [r7, #4]
 8033d44:	2201      	movs	r2, #1
 8033d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8033d4a:	687b      	ldr	r3, [r7, #4]
 8033d4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8033d50:	461a      	mov	r2, r3
 8033d52:	687b      	ldr	r3, [r7, #4]
 8033d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8033d58:	687b      	ldr	r3, [r7, #4]
 8033d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8033d5e:	f003 031f 	and.w	r3, r3, #31
 8033d62:	2b02      	cmp	r3, #2
 8033d64:	d01a      	beq.n	8033d9c <USBD_LL_SetupStage+0x72>
 8033d66:	2b02      	cmp	r3, #2
 8033d68:	d822      	bhi.n	8033db0 <USBD_LL_SetupStage+0x86>
 8033d6a:	2b00      	cmp	r3, #0
 8033d6c:	d002      	beq.n	8033d74 <USBD_LL_SetupStage+0x4a>
 8033d6e:	2b01      	cmp	r3, #1
 8033d70:	d00a      	beq.n	8033d88 <USBD_LL_SetupStage+0x5e>
 8033d72:	e01d      	b.n	8033db0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8033d74:	687b      	ldr	r3, [r7, #4]
 8033d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033d7a:	4619      	mov	r1, r3
 8033d7c:	6878      	ldr	r0, [r7, #4]
 8033d7e:	f000 fb5f 	bl	8034440 <USBD_StdDevReq>
 8033d82:	4603      	mov	r3, r0
 8033d84:	73fb      	strb	r3, [r7, #15]
      break;
 8033d86:	e020      	b.n	8033dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8033d88:	687b      	ldr	r3, [r7, #4]
 8033d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033d8e:	4619      	mov	r1, r3
 8033d90:	6878      	ldr	r0, [r7, #4]
 8033d92:	f000 fbc7 	bl	8034524 <USBD_StdItfReq>
 8033d96:	4603      	mov	r3, r0
 8033d98:	73fb      	strb	r3, [r7, #15]
      break;
 8033d9a:	e016      	b.n	8033dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8033d9c:	687b      	ldr	r3, [r7, #4]
 8033d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033da2:	4619      	mov	r1, r3
 8033da4:	6878      	ldr	r0, [r7, #4]
 8033da6:	f000 fc29 	bl	80345fc <USBD_StdEPReq>
 8033daa:	4603      	mov	r3, r0
 8033dac:	73fb      	strb	r3, [r7, #15]
      break;
 8033dae:	e00c      	b.n	8033dca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8033db0:	687b      	ldr	r3, [r7, #4]
 8033db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8033db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8033dba:	b2db      	uxtb	r3, r3
 8033dbc:	4619      	mov	r1, r3
 8033dbe:	6878      	ldr	r0, [r7, #4]
 8033dc0:	f7e6 f9fc 	bl	801a1bc <USBD_LL_StallEP>
 8033dc4:	4603      	mov	r3, r0
 8033dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8033dc8:	bf00      	nop
  }

  return ret;
 8033dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8033dcc:	4618      	mov	r0, r3
 8033dce:	3710      	adds	r7, #16
 8033dd0:	46bd      	mov	sp, r7
 8033dd2:	bd80      	pop	{r7, pc}

08033dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8033dd4:	b580      	push	{r7, lr}
 8033dd6:	b086      	sub	sp, #24
 8033dd8:	af00      	add	r7, sp, #0
 8033dda:	60f8      	str	r0, [r7, #12]
 8033ddc:	460b      	mov	r3, r1
 8033dde:	607a      	str	r2, [r7, #4]
 8033de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8033de2:	2300      	movs	r3, #0
 8033de4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8033de6:	7afb      	ldrb	r3, [r7, #11]
 8033de8:	2b00      	cmp	r3, #0
 8033dea:	d16e      	bne.n	8033eca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8033dec:	68fb      	ldr	r3, [r7, #12]
 8033dee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8033df2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8033df4:	68fb      	ldr	r3, [r7, #12]
 8033df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8033dfa:	2b03      	cmp	r3, #3
 8033dfc:	f040 8098 	bne.w	8033f30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8033e00:	693b      	ldr	r3, [r7, #16]
 8033e02:	689a      	ldr	r2, [r3, #8]
 8033e04:	693b      	ldr	r3, [r7, #16]
 8033e06:	68db      	ldr	r3, [r3, #12]
 8033e08:	429a      	cmp	r2, r3
 8033e0a:	d913      	bls.n	8033e34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8033e0c:	693b      	ldr	r3, [r7, #16]
 8033e0e:	689a      	ldr	r2, [r3, #8]
 8033e10:	693b      	ldr	r3, [r7, #16]
 8033e12:	68db      	ldr	r3, [r3, #12]
 8033e14:	1ad2      	subs	r2, r2, r3
 8033e16:	693b      	ldr	r3, [r7, #16]
 8033e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8033e1a:	693b      	ldr	r3, [r7, #16]
 8033e1c:	68da      	ldr	r2, [r3, #12]
 8033e1e:	693b      	ldr	r3, [r7, #16]
 8033e20:	689b      	ldr	r3, [r3, #8]
 8033e22:	4293      	cmp	r3, r2
 8033e24:	bf28      	it	cs
 8033e26:	4613      	movcs	r3, r2
 8033e28:	461a      	mov	r2, r3
 8033e2a:	6879      	ldr	r1, [r7, #4]
 8033e2c:	68f8      	ldr	r0, [r7, #12]
 8033e2e:	f001 f9ae 	bl	803518e <USBD_CtlContinueRx>
 8033e32:	e07d      	b.n	8033f30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8033e34:	68fb      	ldr	r3, [r7, #12]
 8033e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8033e3a:	f003 031f 	and.w	r3, r3, #31
 8033e3e:	2b02      	cmp	r3, #2
 8033e40:	d014      	beq.n	8033e6c <USBD_LL_DataOutStage+0x98>
 8033e42:	2b02      	cmp	r3, #2
 8033e44:	d81d      	bhi.n	8033e82 <USBD_LL_DataOutStage+0xae>
 8033e46:	2b00      	cmp	r3, #0
 8033e48:	d002      	beq.n	8033e50 <USBD_LL_DataOutStage+0x7c>
 8033e4a:	2b01      	cmp	r3, #1
 8033e4c:	d003      	beq.n	8033e56 <USBD_LL_DataOutStage+0x82>
 8033e4e:	e018      	b.n	8033e82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8033e50:	2300      	movs	r3, #0
 8033e52:	75bb      	strb	r3, [r7, #22]
            break;
 8033e54:	e018      	b.n	8033e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8033e56:	68fb      	ldr	r3, [r7, #12]
 8033e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8033e5c:	b2db      	uxtb	r3, r3
 8033e5e:	4619      	mov	r1, r3
 8033e60:	68f8      	ldr	r0, [r7, #12]
 8033e62:	f000 fa5e 	bl	8034322 <USBD_CoreFindIF>
 8033e66:	4603      	mov	r3, r0
 8033e68:	75bb      	strb	r3, [r7, #22]
            break;
 8033e6a:	e00d      	b.n	8033e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8033e6c:	68fb      	ldr	r3, [r7, #12]
 8033e6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8033e72:	b2db      	uxtb	r3, r3
 8033e74:	4619      	mov	r1, r3
 8033e76:	68f8      	ldr	r0, [r7, #12]
 8033e78:	f000 fa60 	bl	803433c <USBD_CoreFindEP>
 8033e7c:	4603      	mov	r3, r0
 8033e7e:	75bb      	strb	r3, [r7, #22]
            break;
 8033e80:	e002      	b.n	8033e88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8033e82:	2300      	movs	r3, #0
 8033e84:	75bb      	strb	r3, [r7, #22]
            break;
 8033e86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8033e88:	7dbb      	ldrb	r3, [r7, #22]
 8033e8a:	2b00      	cmp	r3, #0
 8033e8c:	d119      	bne.n	8033ec2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033e8e:	68fb      	ldr	r3, [r7, #12]
 8033e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033e94:	b2db      	uxtb	r3, r3
 8033e96:	2b03      	cmp	r3, #3
 8033e98:	d113      	bne.n	8033ec2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8033e9a:	7dba      	ldrb	r2, [r7, #22]
 8033e9c:	68fb      	ldr	r3, [r7, #12]
 8033e9e:	32ae      	adds	r2, #174	; 0xae
 8033ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033ea4:	691b      	ldr	r3, [r3, #16]
 8033ea6:	2b00      	cmp	r3, #0
 8033ea8:	d00b      	beq.n	8033ec2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8033eaa:	7dba      	ldrb	r2, [r7, #22]
 8033eac:	68fb      	ldr	r3, [r7, #12]
 8033eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8033eb2:	7dba      	ldrb	r2, [r7, #22]
 8033eb4:	68fb      	ldr	r3, [r7, #12]
 8033eb6:	32ae      	adds	r2, #174	; 0xae
 8033eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033ebc:	691b      	ldr	r3, [r3, #16]
 8033ebe:	68f8      	ldr	r0, [r7, #12]
 8033ec0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8033ec2:	68f8      	ldr	r0, [r7, #12]
 8033ec4:	f001 f974 	bl	80351b0 <USBD_CtlSendStatus>
 8033ec8:	e032      	b.n	8033f30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8033eca:	7afb      	ldrb	r3, [r7, #11]
 8033ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8033ed0:	b2db      	uxtb	r3, r3
 8033ed2:	4619      	mov	r1, r3
 8033ed4:	68f8      	ldr	r0, [r7, #12]
 8033ed6:	f000 fa31 	bl	803433c <USBD_CoreFindEP>
 8033eda:	4603      	mov	r3, r0
 8033edc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8033ede:	7dbb      	ldrb	r3, [r7, #22]
 8033ee0:	2bff      	cmp	r3, #255	; 0xff
 8033ee2:	d025      	beq.n	8033f30 <USBD_LL_DataOutStage+0x15c>
 8033ee4:	7dbb      	ldrb	r3, [r7, #22]
 8033ee6:	2b00      	cmp	r3, #0
 8033ee8:	d122      	bne.n	8033f30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033eea:	68fb      	ldr	r3, [r7, #12]
 8033eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033ef0:	b2db      	uxtb	r3, r3
 8033ef2:	2b03      	cmp	r3, #3
 8033ef4:	d117      	bne.n	8033f26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8033ef6:	7dba      	ldrb	r2, [r7, #22]
 8033ef8:	68fb      	ldr	r3, [r7, #12]
 8033efa:	32ae      	adds	r2, #174	; 0xae
 8033efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033f00:	699b      	ldr	r3, [r3, #24]
 8033f02:	2b00      	cmp	r3, #0
 8033f04:	d00f      	beq.n	8033f26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8033f06:	7dba      	ldrb	r2, [r7, #22]
 8033f08:	68fb      	ldr	r3, [r7, #12]
 8033f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8033f0e:	7dba      	ldrb	r2, [r7, #22]
 8033f10:	68fb      	ldr	r3, [r7, #12]
 8033f12:	32ae      	adds	r2, #174	; 0xae
 8033f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033f18:	699b      	ldr	r3, [r3, #24]
 8033f1a:	7afa      	ldrb	r2, [r7, #11]
 8033f1c:	4611      	mov	r1, r2
 8033f1e:	68f8      	ldr	r0, [r7, #12]
 8033f20:	4798      	blx	r3
 8033f22:	4603      	mov	r3, r0
 8033f24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8033f26:	7dfb      	ldrb	r3, [r7, #23]
 8033f28:	2b00      	cmp	r3, #0
 8033f2a:	d001      	beq.n	8033f30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8033f2c:	7dfb      	ldrb	r3, [r7, #23]
 8033f2e:	e000      	b.n	8033f32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8033f30:	2300      	movs	r3, #0
}
 8033f32:	4618      	mov	r0, r3
 8033f34:	3718      	adds	r7, #24
 8033f36:	46bd      	mov	sp, r7
 8033f38:	bd80      	pop	{r7, pc}

08033f3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8033f3a:	b580      	push	{r7, lr}
 8033f3c:	b086      	sub	sp, #24
 8033f3e:	af00      	add	r7, sp, #0
 8033f40:	60f8      	str	r0, [r7, #12]
 8033f42:	460b      	mov	r3, r1
 8033f44:	607a      	str	r2, [r7, #4]
 8033f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8033f48:	7afb      	ldrb	r3, [r7, #11]
 8033f4a:	2b00      	cmp	r3, #0
 8033f4c:	d16f      	bne.n	803402e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8033f4e:	68fb      	ldr	r3, [r7, #12]
 8033f50:	3314      	adds	r3, #20
 8033f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8033f54:	68fb      	ldr	r3, [r7, #12]
 8033f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8033f5a:	2b02      	cmp	r3, #2
 8033f5c:	d15a      	bne.n	8034014 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8033f5e:	693b      	ldr	r3, [r7, #16]
 8033f60:	689a      	ldr	r2, [r3, #8]
 8033f62:	693b      	ldr	r3, [r7, #16]
 8033f64:	68db      	ldr	r3, [r3, #12]
 8033f66:	429a      	cmp	r2, r3
 8033f68:	d914      	bls.n	8033f94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8033f6a:	693b      	ldr	r3, [r7, #16]
 8033f6c:	689a      	ldr	r2, [r3, #8]
 8033f6e:	693b      	ldr	r3, [r7, #16]
 8033f70:	68db      	ldr	r3, [r3, #12]
 8033f72:	1ad2      	subs	r2, r2, r3
 8033f74:	693b      	ldr	r3, [r7, #16]
 8033f76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8033f78:	693b      	ldr	r3, [r7, #16]
 8033f7a:	689b      	ldr	r3, [r3, #8]
 8033f7c:	461a      	mov	r2, r3
 8033f7e:	6879      	ldr	r1, [r7, #4]
 8033f80:	68f8      	ldr	r0, [r7, #12]
 8033f82:	f001 f8d6 	bl	8035132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8033f86:	2300      	movs	r3, #0
 8033f88:	2200      	movs	r2, #0
 8033f8a:	2100      	movs	r1, #0
 8033f8c:	68f8      	ldr	r0, [r7, #12]
 8033f8e:	f7e6 f9bf 	bl	801a310 <USBD_LL_PrepareReceive>
 8033f92:	e03f      	b.n	8034014 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8033f94:	693b      	ldr	r3, [r7, #16]
 8033f96:	68da      	ldr	r2, [r3, #12]
 8033f98:	693b      	ldr	r3, [r7, #16]
 8033f9a:	689b      	ldr	r3, [r3, #8]
 8033f9c:	429a      	cmp	r2, r3
 8033f9e:	d11c      	bne.n	8033fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8033fa0:	693b      	ldr	r3, [r7, #16]
 8033fa2:	685a      	ldr	r2, [r3, #4]
 8033fa4:	693b      	ldr	r3, [r7, #16]
 8033fa6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8033fa8:	429a      	cmp	r2, r3
 8033faa:	d316      	bcc.n	8033fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8033fac:	693b      	ldr	r3, [r7, #16]
 8033fae:	685a      	ldr	r2, [r3, #4]
 8033fb0:	68fb      	ldr	r3, [r7, #12]
 8033fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8033fb6:	429a      	cmp	r2, r3
 8033fb8:	d20f      	bcs.n	8033fda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8033fba:	2200      	movs	r2, #0
 8033fbc:	2100      	movs	r1, #0
 8033fbe:	68f8      	ldr	r0, [r7, #12]
 8033fc0:	f001 f8b7 	bl	8035132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8033fc4:	68fb      	ldr	r3, [r7, #12]
 8033fc6:	2200      	movs	r2, #0
 8033fc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8033fcc:	2300      	movs	r3, #0
 8033fce:	2200      	movs	r2, #0
 8033fd0:	2100      	movs	r1, #0
 8033fd2:	68f8      	ldr	r0, [r7, #12]
 8033fd4:	f7e6 f99c 	bl	801a310 <USBD_LL_PrepareReceive>
 8033fd8:	e01c      	b.n	8034014 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033fda:	68fb      	ldr	r3, [r7, #12]
 8033fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033fe0:	b2db      	uxtb	r3, r3
 8033fe2:	2b03      	cmp	r3, #3
 8033fe4:	d10f      	bne.n	8034006 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8033fe6:	68fb      	ldr	r3, [r7, #12]
 8033fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033fec:	68db      	ldr	r3, [r3, #12]
 8033fee:	2b00      	cmp	r3, #0
 8033ff0:	d009      	beq.n	8034006 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8033ff2:	68fb      	ldr	r3, [r7, #12]
 8033ff4:	2200      	movs	r2, #0
 8033ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8033ffa:	68fb      	ldr	r3, [r7, #12]
 8033ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8034000:	68db      	ldr	r3, [r3, #12]
 8034002:	68f8      	ldr	r0, [r7, #12]
 8034004:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8034006:	2180      	movs	r1, #128	; 0x80
 8034008:	68f8      	ldr	r0, [r7, #12]
 803400a:	f7e6 f8d7 	bl	801a1bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803400e:	68f8      	ldr	r0, [r7, #12]
 8034010:	f001 f8e1 	bl	80351d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8034014:	68fb      	ldr	r3, [r7, #12]
 8034016:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803401a:	2b00      	cmp	r3, #0
 803401c:	d03a      	beq.n	8034094 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803401e:	68f8      	ldr	r0, [r7, #12]
 8034020:	f7ff fe42 	bl	8033ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8034024:	68fb      	ldr	r3, [r7, #12]
 8034026:	2200      	movs	r2, #0
 8034028:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803402c:	e032      	b.n	8034094 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803402e:	7afb      	ldrb	r3, [r7, #11]
 8034030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8034034:	b2db      	uxtb	r3, r3
 8034036:	4619      	mov	r1, r3
 8034038:	68f8      	ldr	r0, [r7, #12]
 803403a:	f000 f97f 	bl	803433c <USBD_CoreFindEP>
 803403e:	4603      	mov	r3, r0
 8034040:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8034042:	7dfb      	ldrb	r3, [r7, #23]
 8034044:	2bff      	cmp	r3, #255	; 0xff
 8034046:	d025      	beq.n	8034094 <USBD_LL_DataInStage+0x15a>
 8034048:	7dfb      	ldrb	r3, [r7, #23]
 803404a:	2b00      	cmp	r3, #0
 803404c:	d122      	bne.n	8034094 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803404e:	68fb      	ldr	r3, [r7, #12]
 8034050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034054:	b2db      	uxtb	r3, r3
 8034056:	2b03      	cmp	r3, #3
 8034058:	d11c      	bne.n	8034094 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803405a:	7dfa      	ldrb	r2, [r7, #23]
 803405c:	68fb      	ldr	r3, [r7, #12]
 803405e:	32ae      	adds	r2, #174	; 0xae
 8034060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8034064:	695b      	ldr	r3, [r3, #20]
 8034066:	2b00      	cmp	r3, #0
 8034068:	d014      	beq.n	8034094 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803406a:	7dfa      	ldrb	r2, [r7, #23]
 803406c:	68fb      	ldr	r3, [r7, #12]
 803406e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8034072:	7dfa      	ldrb	r2, [r7, #23]
 8034074:	68fb      	ldr	r3, [r7, #12]
 8034076:	32ae      	adds	r2, #174	; 0xae
 8034078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803407c:	695b      	ldr	r3, [r3, #20]
 803407e:	7afa      	ldrb	r2, [r7, #11]
 8034080:	4611      	mov	r1, r2
 8034082:	68f8      	ldr	r0, [r7, #12]
 8034084:	4798      	blx	r3
 8034086:	4603      	mov	r3, r0
 8034088:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803408a:	7dbb      	ldrb	r3, [r7, #22]
 803408c:	2b00      	cmp	r3, #0
 803408e:	d001      	beq.n	8034094 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8034090:	7dbb      	ldrb	r3, [r7, #22]
 8034092:	e000      	b.n	8034096 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8034094:	2300      	movs	r3, #0
}
 8034096:	4618      	mov	r0, r3
 8034098:	3718      	adds	r7, #24
 803409a:	46bd      	mov	sp, r7
 803409c:	bd80      	pop	{r7, pc}

0803409e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803409e:	b580      	push	{r7, lr}
 80340a0:	b084      	sub	sp, #16
 80340a2:	af00      	add	r7, sp, #0
 80340a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80340a6:	2300      	movs	r3, #0
 80340a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80340aa:	687b      	ldr	r3, [r7, #4]
 80340ac:	2201      	movs	r2, #1
 80340ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80340b2:	687b      	ldr	r3, [r7, #4]
 80340b4:	2200      	movs	r2, #0
 80340b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80340ba:	687b      	ldr	r3, [r7, #4]
 80340bc:	2200      	movs	r2, #0
 80340be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80340c0:	687b      	ldr	r3, [r7, #4]
 80340c2:	2200      	movs	r2, #0
 80340c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80340c8:	687b      	ldr	r3, [r7, #4]
 80340ca:	2200      	movs	r2, #0
 80340cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80340d0:	687b      	ldr	r3, [r7, #4]
 80340d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80340d6:	2b00      	cmp	r3, #0
 80340d8:	d014      	beq.n	8034104 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80340da:	687b      	ldr	r3, [r7, #4]
 80340dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80340e0:	685b      	ldr	r3, [r3, #4]
 80340e2:	2b00      	cmp	r3, #0
 80340e4:	d00e      	beq.n	8034104 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80340e6:	687b      	ldr	r3, [r7, #4]
 80340e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80340ec:	685b      	ldr	r3, [r3, #4]
 80340ee:	687a      	ldr	r2, [r7, #4]
 80340f0:	6852      	ldr	r2, [r2, #4]
 80340f2:	b2d2      	uxtb	r2, r2
 80340f4:	4611      	mov	r1, r2
 80340f6:	6878      	ldr	r0, [r7, #4]
 80340f8:	4798      	blx	r3
 80340fa:	4603      	mov	r3, r0
 80340fc:	2b00      	cmp	r3, #0
 80340fe:	d001      	beq.n	8034104 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8034100:	2303      	movs	r3, #3
 8034102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8034104:	2340      	movs	r3, #64	; 0x40
 8034106:	2200      	movs	r2, #0
 8034108:	2100      	movs	r1, #0
 803410a:	6878      	ldr	r0, [r7, #4]
 803410c:	f7e6 f811 	bl	801a132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8034110:	687b      	ldr	r3, [r7, #4]
 8034112:	2201      	movs	r2, #1
 8034114:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8034118:	687b      	ldr	r3, [r7, #4]
 803411a:	2240      	movs	r2, #64	; 0x40
 803411c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8034120:	2340      	movs	r3, #64	; 0x40
 8034122:	2200      	movs	r2, #0
 8034124:	2180      	movs	r1, #128	; 0x80
 8034126:	6878      	ldr	r0, [r7, #4]
 8034128:	f7e6 f803 	bl	801a132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803412c:	687b      	ldr	r3, [r7, #4]
 803412e:	2201      	movs	r2, #1
 8034130:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8034132:	687b      	ldr	r3, [r7, #4]
 8034134:	2240      	movs	r2, #64	; 0x40
 8034136:	621a      	str	r2, [r3, #32]

  return ret;
 8034138:	7bfb      	ldrb	r3, [r7, #15]
}
 803413a:	4618      	mov	r0, r3
 803413c:	3710      	adds	r7, #16
 803413e:	46bd      	mov	sp, r7
 8034140:	bd80      	pop	{r7, pc}

08034142 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8034142:	b480      	push	{r7}
 8034144:	b083      	sub	sp, #12
 8034146:	af00      	add	r7, sp, #0
 8034148:	6078      	str	r0, [r7, #4]
 803414a:	460b      	mov	r3, r1
 803414c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803414e:	687b      	ldr	r3, [r7, #4]
 8034150:	78fa      	ldrb	r2, [r7, #3]
 8034152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8034154:	2300      	movs	r3, #0
}
 8034156:	4618      	mov	r0, r3
 8034158:	370c      	adds	r7, #12
 803415a:	46bd      	mov	sp, r7
 803415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034160:	4770      	bx	lr

08034162 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8034162:	b480      	push	{r7}
 8034164:	b083      	sub	sp, #12
 8034166:	af00      	add	r7, sp, #0
 8034168:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803416a:	687b      	ldr	r3, [r7, #4]
 803416c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034170:	b2da      	uxtb	r2, r3
 8034172:	687b      	ldr	r3, [r7, #4]
 8034174:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8034178:	687b      	ldr	r3, [r7, #4]
 803417a:	2204      	movs	r2, #4
 803417c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8034180:	2300      	movs	r3, #0
}
 8034182:	4618      	mov	r0, r3
 8034184:	370c      	adds	r7, #12
 8034186:	46bd      	mov	sp, r7
 8034188:	f85d 7b04 	ldr.w	r7, [sp], #4
 803418c:	4770      	bx	lr

0803418e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803418e:	b480      	push	{r7}
 8034190:	b083      	sub	sp, #12
 8034192:	af00      	add	r7, sp, #0
 8034194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8034196:	687b      	ldr	r3, [r7, #4]
 8034198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803419c:	b2db      	uxtb	r3, r3
 803419e:	2b04      	cmp	r3, #4
 80341a0:	d106      	bne.n	80341b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80341a2:	687b      	ldr	r3, [r7, #4]
 80341a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80341a8:	b2da      	uxtb	r2, r3
 80341aa:	687b      	ldr	r3, [r7, #4]
 80341ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80341b0:	2300      	movs	r3, #0
}
 80341b2:	4618      	mov	r0, r3
 80341b4:	370c      	adds	r7, #12
 80341b6:	46bd      	mov	sp, r7
 80341b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341bc:	4770      	bx	lr

080341be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80341be:	b580      	push	{r7, lr}
 80341c0:	b082      	sub	sp, #8
 80341c2:	af00      	add	r7, sp, #0
 80341c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80341c6:	687b      	ldr	r3, [r7, #4]
 80341c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80341cc:	b2db      	uxtb	r3, r3
 80341ce:	2b03      	cmp	r3, #3
 80341d0:	d110      	bne.n	80341f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80341d2:	687b      	ldr	r3, [r7, #4]
 80341d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80341d8:	2b00      	cmp	r3, #0
 80341da:	d00b      	beq.n	80341f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80341dc:	687b      	ldr	r3, [r7, #4]
 80341de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80341e2:	69db      	ldr	r3, [r3, #28]
 80341e4:	2b00      	cmp	r3, #0
 80341e6:	d005      	beq.n	80341f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80341e8:	687b      	ldr	r3, [r7, #4]
 80341ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80341ee:	69db      	ldr	r3, [r3, #28]
 80341f0:	6878      	ldr	r0, [r7, #4]
 80341f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80341f4:	2300      	movs	r3, #0
}
 80341f6:	4618      	mov	r0, r3
 80341f8:	3708      	adds	r7, #8
 80341fa:	46bd      	mov	sp, r7
 80341fc:	bd80      	pop	{r7, pc}

080341fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80341fe:	b580      	push	{r7, lr}
 8034200:	b082      	sub	sp, #8
 8034202:	af00      	add	r7, sp, #0
 8034204:	6078      	str	r0, [r7, #4]
 8034206:	460b      	mov	r3, r1
 8034208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803420a:	687b      	ldr	r3, [r7, #4]
 803420c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8034210:	687b      	ldr	r3, [r7, #4]
 8034212:	32ae      	adds	r2, #174	; 0xae
 8034214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8034218:	2b00      	cmp	r3, #0
 803421a:	d101      	bne.n	8034220 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803421c:	2303      	movs	r3, #3
 803421e:	e01c      	b.n	803425a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034220:	687b      	ldr	r3, [r7, #4]
 8034222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034226:	b2db      	uxtb	r3, r3
 8034228:	2b03      	cmp	r3, #3
 803422a:	d115      	bne.n	8034258 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803422c:	687b      	ldr	r3, [r7, #4]
 803422e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8034232:	687b      	ldr	r3, [r7, #4]
 8034234:	32ae      	adds	r2, #174	; 0xae
 8034236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803423a:	6a1b      	ldr	r3, [r3, #32]
 803423c:	2b00      	cmp	r3, #0
 803423e:	d00b      	beq.n	8034258 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8034240:	687b      	ldr	r3, [r7, #4]
 8034242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8034246:	687b      	ldr	r3, [r7, #4]
 8034248:	32ae      	adds	r2, #174	; 0xae
 803424a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803424e:	6a1b      	ldr	r3, [r3, #32]
 8034250:	78fa      	ldrb	r2, [r7, #3]
 8034252:	4611      	mov	r1, r2
 8034254:	6878      	ldr	r0, [r7, #4]
 8034256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8034258:	2300      	movs	r3, #0
}
 803425a:	4618      	mov	r0, r3
 803425c:	3708      	adds	r7, #8
 803425e:	46bd      	mov	sp, r7
 8034260:	bd80      	pop	{r7, pc}

08034262 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8034262:	b580      	push	{r7, lr}
 8034264:	b082      	sub	sp, #8
 8034266:	af00      	add	r7, sp, #0
 8034268:	6078      	str	r0, [r7, #4]
 803426a:	460b      	mov	r3, r1
 803426c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803426e:	687b      	ldr	r3, [r7, #4]
 8034270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8034274:	687b      	ldr	r3, [r7, #4]
 8034276:	32ae      	adds	r2, #174	; 0xae
 8034278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803427c:	2b00      	cmp	r3, #0
 803427e:	d101      	bne.n	8034284 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8034280:	2303      	movs	r3, #3
 8034282:	e01c      	b.n	80342be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034284:	687b      	ldr	r3, [r7, #4]
 8034286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803428a:	b2db      	uxtb	r3, r3
 803428c:	2b03      	cmp	r3, #3
 803428e:	d115      	bne.n	80342bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8034290:	687b      	ldr	r3, [r7, #4]
 8034292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8034296:	687b      	ldr	r3, [r7, #4]
 8034298:	32ae      	adds	r2, #174	; 0xae
 803429a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80342a0:	2b00      	cmp	r3, #0
 80342a2:	d00b      	beq.n	80342bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80342a4:	687b      	ldr	r3, [r7, #4]
 80342a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80342aa:	687b      	ldr	r3, [r7, #4]
 80342ac:	32ae      	adds	r2, #174	; 0xae
 80342ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80342b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80342b4:	78fa      	ldrb	r2, [r7, #3]
 80342b6:	4611      	mov	r1, r2
 80342b8:	6878      	ldr	r0, [r7, #4]
 80342ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80342bc:	2300      	movs	r3, #0
}
 80342be:	4618      	mov	r0, r3
 80342c0:	3708      	adds	r7, #8
 80342c2:	46bd      	mov	sp, r7
 80342c4:	bd80      	pop	{r7, pc}

080342c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80342c6:	b480      	push	{r7}
 80342c8:	b083      	sub	sp, #12
 80342ca:	af00      	add	r7, sp, #0
 80342cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80342ce:	2300      	movs	r3, #0
}
 80342d0:	4618      	mov	r0, r3
 80342d2:	370c      	adds	r7, #12
 80342d4:	46bd      	mov	sp, r7
 80342d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80342da:	4770      	bx	lr

080342dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80342dc:	b580      	push	{r7, lr}
 80342de:	b084      	sub	sp, #16
 80342e0:	af00      	add	r7, sp, #0
 80342e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80342e4:	2300      	movs	r3, #0
 80342e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80342e8:	687b      	ldr	r3, [r7, #4]
 80342ea:	2201      	movs	r2, #1
 80342ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80342f0:	687b      	ldr	r3, [r7, #4]
 80342f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80342f6:	2b00      	cmp	r3, #0
 80342f8:	d00e      	beq.n	8034318 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80342fa:	687b      	ldr	r3, [r7, #4]
 80342fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8034300:	685b      	ldr	r3, [r3, #4]
 8034302:	687a      	ldr	r2, [r7, #4]
 8034304:	6852      	ldr	r2, [r2, #4]
 8034306:	b2d2      	uxtb	r2, r2
 8034308:	4611      	mov	r1, r2
 803430a:	6878      	ldr	r0, [r7, #4]
 803430c:	4798      	blx	r3
 803430e:	4603      	mov	r3, r0
 8034310:	2b00      	cmp	r3, #0
 8034312:	d001      	beq.n	8034318 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8034314:	2303      	movs	r3, #3
 8034316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8034318:	7bfb      	ldrb	r3, [r7, #15]
}
 803431a:	4618      	mov	r0, r3
 803431c:	3710      	adds	r7, #16
 803431e:	46bd      	mov	sp, r7
 8034320:	bd80      	pop	{r7, pc}

08034322 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8034322:	b480      	push	{r7}
 8034324:	b083      	sub	sp, #12
 8034326:	af00      	add	r7, sp, #0
 8034328:	6078      	str	r0, [r7, #4]
 803432a:	460b      	mov	r3, r1
 803432c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803432e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8034330:	4618      	mov	r0, r3
 8034332:	370c      	adds	r7, #12
 8034334:	46bd      	mov	sp, r7
 8034336:	f85d 7b04 	ldr.w	r7, [sp], #4
 803433a:	4770      	bx	lr

0803433c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803433c:	b480      	push	{r7}
 803433e:	b083      	sub	sp, #12
 8034340:	af00      	add	r7, sp, #0
 8034342:	6078      	str	r0, [r7, #4]
 8034344:	460b      	mov	r3, r1
 8034346:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8034348:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803434a:	4618      	mov	r0, r3
 803434c:	370c      	adds	r7, #12
 803434e:	46bd      	mov	sp, r7
 8034350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034354:	4770      	bx	lr

08034356 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8034356:	b580      	push	{r7, lr}
 8034358:	b086      	sub	sp, #24
 803435a:	af00      	add	r7, sp, #0
 803435c:	6078      	str	r0, [r7, #4]
 803435e:	460b      	mov	r3, r1
 8034360:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8034362:	687b      	ldr	r3, [r7, #4]
 8034364:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8034366:	687b      	ldr	r3, [r7, #4]
 8034368:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803436a:	2300      	movs	r3, #0
 803436c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803436e:	68fb      	ldr	r3, [r7, #12]
 8034370:	885b      	ldrh	r3, [r3, #2]
 8034372:	b29a      	uxth	r2, r3
 8034374:	68fb      	ldr	r3, [r7, #12]
 8034376:	781b      	ldrb	r3, [r3, #0]
 8034378:	b29b      	uxth	r3, r3
 803437a:	429a      	cmp	r2, r3
 803437c:	d920      	bls.n	80343c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803437e:	68fb      	ldr	r3, [r7, #12]
 8034380:	781b      	ldrb	r3, [r3, #0]
 8034382:	b29b      	uxth	r3, r3
 8034384:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8034386:	e013      	b.n	80343b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8034388:	f107 030a 	add.w	r3, r7, #10
 803438c:	4619      	mov	r1, r3
 803438e:	6978      	ldr	r0, [r7, #20]
 8034390:	f000 f81b 	bl	80343ca <USBD_GetNextDesc>
 8034394:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8034396:	697b      	ldr	r3, [r7, #20]
 8034398:	785b      	ldrb	r3, [r3, #1]
 803439a:	2b05      	cmp	r3, #5
 803439c:	d108      	bne.n	80343b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803439e:	697b      	ldr	r3, [r7, #20]
 80343a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80343a2:	693b      	ldr	r3, [r7, #16]
 80343a4:	789b      	ldrb	r3, [r3, #2]
 80343a6:	78fa      	ldrb	r2, [r7, #3]
 80343a8:	429a      	cmp	r2, r3
 80343aa:	d008      	beq.n	80343be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80343ac:	2300      	movs	r3, #0
 80343ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80343b0:	68fb      	ldr	r3, [r7, #12]
 80343b2:	885b      	ldrh	r3, [r3, #2]
 80343b4:	b29a      	uxth	r2, r3
 80343b6:	897b      	ldrh	r3, [r7, #10]
 80343b8:	429a      	cmp	r2, r3
 80343ba:	d8e5      	bhi.n	8034388 <USBD_GetEpDesc+0x32>
 80343bc:	e000      	b.n	80343c0 <USBD_GetEpDesc+0x6a>
          break;
 80343be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80343c0:	693b      	ldr	r3, [r7, #16]
}
 80343c2:	4618      	mov	r0, r3
 80343c4:	3718      	adds	r7, #24
 80343c6:	46bd      	mov	sp, r7
 80343c8:	bd80      	pop	{r7, pc}

080343ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80343ca:	b480      	push	{r7}
 80343cc:	b085      	sub	sp, #20
 80343ce:	af00      	add	r7, sp, #0
 80343d0:	6078      	str	r0, [r7, #4]
 80343d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80343d4:	687b      	ldr	r3, [r7, #4]
 80343d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80343d8:	683b      	ldr	r3, [r7, #0]
 80343da:	881a      	ldrh	r2, [r3, #0]
 80343dc:	68fb      	ldr	r3, [r7, #12]
 80343de:	781b      	ldrb	r3, [r3, #0]
 80343e0:	b29b      	uxth	r3, r3
 80343e2:	4413      	add	r3, r2
 80343e4:	b29a      	uxth	r2, r3
 80343e6:	683b      	ldr	r3, [r7, #0]
 80343e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80343ea:	68fb      	ldr	r3, [r7, #12]
 80343ec:	781b      	ldrb	r3, [r3, #0]
 80343ee:	461a      	mov	r2, r3
 80343f0:	687b      	ldr	r3, [r7, #4]
 80343f2:	4413      	add	r3, r2
 80343f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80343f6:	68fb      	ldr	r3, [r7, #12]
}
 80343f8:	4618      	mov	r0, r3
 80343fa:	3714      	adds	r7, #20
 80343fc:	46bd      	mov	sp, r7
 80343fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034402:	4770      	bx	lr

08034404 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8034404:	b480      	push	{r7}
 8034406:	b087      	sub	sp, #28
 8034408:	af00      	add	r7, sp, #0
 803440a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803440c:	687b      	ldr	r3, [r7, #4]
 803440e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8034410:	697b      	ldr	r3, [r7, #20]
 8034412:	781b      	ldrb	r3, [r3, #0]
 8034414:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8034416:	697b      	ldr	r3, [r7, #20]
 8034418:	3301      	adds	r3, #1
 803441a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803441c:	697b      	ldr	r3, [r7, #20]
 803441e:	781b      	ldrb	r3, [r3, #0]
 8034420:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8034422:	8a3b      	ldrh	r3, [r7, #16]
 8034424:	021b      	lsls	r3, r3, #8
 8034426:	b21a      	sxth	r2, r3
 8034428:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803442c:	4313      	orrs	r3, r2
 803442e:	b21b      	sxth	r3, r3
 8034430:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8034432:	89fb      	ldrh	r3, [r7, #14]
}
 8034434:	4618      	mov	r0, r3
 8034436:	371c      	adds	r7, #28
 8034438:	46bd      	mov	sp, r7
 803443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803443e:	4770      	bx	lr

08034440 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034440:	b580      	push	{r7, lr}
 8034442:	b084      	sub	sp, #16
 8034444:	af00      	add	r7, sp, #0
 8034446:	6078      	str	r0, [r7, #4]
 8034448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803444a:	2300      	movs	r3, #0
 803444c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803444e:	683b      	ldr	r3, [r7, #0]
 8034450:	781b      	ldrb	r3, [r3, #0]
 8034452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8034456:	2b40      	cmp	r3, #64	; 0x40
 8034458:	d005      	beq.n	8034466 <USBD_StdDevReq+0x26>
 803445a:	2b40      	cmp	r3, #64	; 0x40
 803445c:	d857      	bhi.n	803450e <USBD_StdDevReq+0xce>
 803445e:	2b00      	cmp	r3, #0
 8034460:	d00f      	beq.n	8034482 <USBD_StdDevReq+0x42>
 8034462:	2b20      	cmp	r3, #32
 8034464:	d153      	bne.n	803450e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8034466:	687b      	ldr	r3, [r7, #4]
 8034468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803446c:	687b      	ldr	r3, [r7, #4]
 803446e:	32ae      	adds	r2, #174	; 0xae
 8034470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8034474:	689b      	ldr	r3, [r3, #8]
 8034476:	6839      	ldr	r1, [r7, #0]
 8034478:	6878      	ldr	r0, [r7, #4]
 803447a:	4798      	blx	r3
 803447c:	4603      	mov	r3, r0
 803447e:	73fb      	strb	r3, [r7, #15]
      break;
 8034480:	e04a      	b.n	8034518 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8034482:	683b      	ldr	r3, [r7, #0]
 8034484:	785b      	ldrb	r3, [r3, #1]
 8034486:	2b09      	cmp	r3, #9
 8034488:	d83b      	bhi.n	8034502 <USBD_StdDevReq+0xc2>
 803448a:	a201      	add	r2, pc, #4	; (adr r2, 8034490 <USBD_StdDevReq+0x50>)
 803448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034490:	080344e5 	.word	0x080344e5
 8034494:	080344f9 	.word	0x080344f9
 8034498:	08034503 	.word	0x08034503
 803449c:	080344ef 	.word	0x080344ef
 80344a0:	08034503 	.word	0x08034503
 80344a4:	080344c3 	.word	0x080344c3
 80344a8:	080344b9 	.word	0x080344b9
 80344ac:	08034503 	.word	0x08034503
 80344b0:	080344db 	.word	0x080344db
 80344b4:	080344cd 	.word	0x080344cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80344b8:	6839      	ldr	r1, [r7, #0]
 80344ba:	6878      	ldr	r0, [r7, #4]
 80344bc:	f000 fa3c 	bl	8034938 <USBD_GetDescriptor>
          break;
 80344c0:	e024      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80344c2:	6839      	ldr	r1, [r7, #0]
 80344c4:	6878      	ldr	r0, [r7, #4]
 80344c6:	f000 fbcb 	bl	8034c60 <USBD_SetAddress>
          break;
 80344ca:	e01f      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80344cc:	6839      	ldr	r1, [r7, #0]
 80344ce:	6878      	ldr	r0, [r7, #4]
 80344d0:	f000 fc0a 	bl	8034ce8 <USBD_SetConfig>
 80344d4:	4603      	mov	r3, r0
 80344d6:	73fb      	strb	r3, [r7, #15]
          break;
 80344d8:	e018      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80344da:	6839      	ldr	r1, [r7, #0]
 80344dc:	6878      	ldr	r0, [r7, #4]
 80344de:	f000 fcad 	bl	8034e3c <USBD_GetConfig>
          break;
 80344e2:	e013      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80344e4:	6839      	ldr	r1, [r7, #0]
 80344e6:	6878      	ldr	r0, [r7, #4]
 80344e8:	f000 fcde 	bl	8034ea8 <USBD_GetStatus>
          break;
 80344ec:	e00e      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80344ee:	6839      	ldr	r1, [r7, #0]
 80344f0:	6878      	ldr	r0, [r7, #4]
 80344f2:	f000 fd0d 	bl	8034f10 <USBD_SetFeature>
          break;
 80344f6:	e009      	b.n	803450c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80344f8:	6839      	ldr	r1, [r7, #0]
 80344fa:	6878      	ldr	r0, [r7, #4]
 80344fc:	f000 fd31 	bl	8034f62 <USBD_ClrFeature>
          break;
 8034500:	e004      	b.n	803450c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8034502:	6839      	ldr	r1, [r7, #0]
 8034504:	6878      	ldr	r0, [r7, #4]
 8034506:	f000 fd88 	bl	803501a <USBD_CtlError>
          break;
 803450a:	bf00      	nop
      }
      break;
 803450c:	e004      	b.n	8034518 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803450e:	6839      	ldr	r1, [r7, #0]
 8034510:	6878      	ldr	r0, [r7, #4]
 8034512:	f000 fd82 	bl	803501a <USBD_CtlError>
      break;
 8034516:	bf00      	nop
  }

  return ret;
 8034518:	7bfb      	ldrb	r3, [r7, #15]
}
 803451a:	4618      	mov	r0, r3
 803451c:	3710      	adds	r7, #16
 803451e:	46bd      	mov	sp, r7
 8034520:	bd80      	pop	{r7, pc}
 8034522:	bf00      	nop

08034524 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034524:	b580      	push	{r7, lr}
 8034526:	b084      	sub	sp, #16
 8034528:	af00      	add	r7, sp, #0
 803452a:	6078      	str	r0, [r7, #4]
 803452c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803452e:	2300      	movs	r3, #0
 8034530:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8034532:	683b      	ldr	r3, [r7, #0]
 8034534:	781b      	ldrb	r3, [r3, #0]
 8034536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803453a:	2b40      	cmp	r3, #64	; 0x40
 803453c:	d005      	beq.n	803454a <USBD_StdItfReq+0x26>
 803453e:	2b40      	cmp	r3, #64	; 0x40
 8034540:	d852      	bhi.n	80345e8 <USBD_StdItfReq+0xc4>
 8034542:	2b00      	cmp	r3, #0
 8034544:	d001      	beq.n	803454a <USBD_StdItfReq+0x26>
 8034546:	2b20      	cmp	r3, #32
 8034548:	d14e      	bne.n	80345e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803454a:	687b      	ldr	r3, [r7, #4]
 803454c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034550:	b2db      	uxtb	r3, r3
 8034552:	3b01      	subs	r3, #1
 8034554:	2b02      	cmp	r3, #2
 8034556:	d840      	bhi.n	80345da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8034558:	683b      	ldr	r3, [r7, #0]
 803455a:	889b      	ldrh	r3, [r3, #4]
 803455c:	b2db      	uxtb	r3, r3
 803455e:	2b01      	cmp	r3, #1
 8034560:	d836      	bhi.n	80345d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8034562:	683b      	ldr	r3, [r7, #0]
 8034564:	889b      	ldrh	r3, [r3, #4]
 8034566:	b2db      	uxtb	r3, r3
 8034568:	4619      	mov	r1, r3
 803456a:	6878      	ldr	r0, [r7, #4]
 803456c:	f7ff fed9 	bl	8034322 <USBD_CoreFindIF>
 8034570:	4603      	mov	r3, r0
 8034572:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8034574:	7bbb      	ldrb	r3, [r7, #14]
 8034576:	2bff      	cmp	r3, #255	; 0xff
 8034578:	d01d      	beq.n	80345b6 <USBD_StdItfReq+0x92>
 803457a:	7bbb      	ldrb	r3, [r7, #14]
 803457c:	2b00      	cmp	r3, #0
 803457e:	d11a      	bne.n	80345b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8034580:	7bba      	ldrb	r2, [r7, #14]
 8034582:	687b      	ldr	r3, [r7, #4]
 8034584:	32ae      	adds	r2, #174	; 0xae
 8034586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803458a:	689b      	ldr	r3, [r3, #8]
 803458c:	2b00      	cmp	r3, #0
 803458e:	d00f      	beq.n	80345b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8034590:	7bba      	ldrb	r2, [r7, #14]
 8034592:	687b      	ldr	r3, [r7, #4]
 8034594:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8034598:	7bba      	ldrb	r2, [r7, #14]
 803459a:	687b      	ldr	r3, [r7, #4]
 803459c:	32ae      	adds	r2, #174	; 0xae
 803459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80345a2:	689b      	ldr	r3, [r3, #8]
 80345a4:	6839      	ldr	r1, [r7, #0]
 80345a6:	6878      	ldr	r0, [r7, #4]
 80345a8:	4798      	blx	r3
 80345aa:	4603      	mov	r3, r0
 80345ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80345ae:	e004      	b.n	80345ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80345b0:	2303      	movs	r3, #3
 80345b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80345b4:	e001      	b.n	80345ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80345b6:	2303      	movs	r3, #3
 80345b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80345ba:	683b      	ldr	r3, [r7, #0]
 80345bc:	88db      	ldrh	r3, [r3, #6]
 80345be:	2b00      	cmp	r3, #0
 80345c0:	d110      	bne.n	80345e4 <USBD_StdItfReq+0xc0>
 80345c2:	7bfb      	ldrb	r3, [r7, #15]
 80345c4:	2b00      	cmp	r3, #0
 80345c6:	d10d      	bne.n	80345e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80345c8:	6878      	ldr	r0, [r7, #4]
 80345ca:	f000 fdf1 	bl	80351b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80345ce:	e009      	b.n	80345e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80345d0:	6839      	ldr	r1, [r7, #0]
 80345d2:	6878      	ldr	r0, [r7, #4]
 80345d4:	f000 fd21 	bl	803501a <USBD_CtlError>
          break;
 80345d8:	e004      	b.n	80345e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80345da:	6839      	ldr	r1, [r7, #0]
 80345dc:	6878      	ldr	r0, [r7, #4]
 80345de:	f000 fd1c 	bl	803501a <USBD_CtlError>
          break;
 80345e2:	e000      	b.n	80345e6 <USBD_StdItfReq+0xc2>
          break;
 80345e4:	bf00      	nop
      }
      break;
 80345e6:	e004      	b.n	80345f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80345e8:	6839      	ldr	r1, [r7, #0]
 80345ea:	6878      	ldr	r0, [r7, #4]
 80345ec:	f000 fd15 	bl	803501a <USBD_CtlError>
      break;
 80345f0:	bf00      	nop
  }

  return ret;
 80345f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80345f4:	4618      	mov	r0, r3
 80345f6:	3710      	adds	r7, #16
 80345f8:	46bd      	mov	sp, r7
 80345fa:	bd80      	pop	{r7, pc}

080345fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80345fc:	b580      	push	{r7, lr}
 80345fe:	b084      	sub	sp, #16
 8034600:	af00      	add	r7, sp, #0
 8034602:	6078      	str	r0, [r7, #4]
 8034604:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8034606:	2300      	movs	r3, #0
 8034608:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803460a:	683b      	ldr	r3, [r7, #0]
 803460c:	889b      	ldrh	r3, [r3, #4]
 803460e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8034610:	683b      	ldr	r3, [r7, #0]
 8034612:	781b      	ldrb	r3, [r3, #0]
 8034614:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8034618:	2b40      	cmp	r3, #64	; 0x40
 803461a:	d007      	beq.n	803462c <USBD_StdEPReq+0x30>
 803461c:	2b40      	cmp	r3, #64	; 0x40
 803461e:	f200 817f 	bhi.w	8034920 <USBD_StdEPReq+0x324>
 8034622:	2b00      	cmp	r3, #0
 8034624:	d02a      	beq.n	803467c <USBD_StdEPReq+0x80>
 8034626:	2b20      	cmp	r3, #32
 8034628:	f040 817a 	bne.w	8034920 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803462c:	7bbb      	ldrb	r3, [r7, #14]
 803462e:	4619      	mov	r1, r3
 8034630:	6878      	ldr	r0, [r7, #4]
 8034632:	f7ff fe83 	bl	803433c <USBD_CoreFindEP>
 8034636:	4603      	mov	r3, r0
 8034638:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803463a:	7b7b      	ldrb	r3, [r7, #13]
 803463c:	2bff      	cmp	r3, #255	; 0xff
 803463e:	f000 8174 	beq.w	803492a <USBD_StdEPReq+0x32e>
 8034642:	7b7b      	ldrb	r3, [r7, #13]
 8034644:	2b00      	cmp	r3, #0
 8034646:	f040 8170 	bne.w	803492a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803464a:	7b7a      	ldrb	r2, [r7, #13]
 803464c:	687b      	ldr	r3, [r7, #4]
 803464e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8034652:	7b7a      	ldrb	r2, [r7, #13]
 8034654:	687b      	ldr	r3, [r7, #4]
 8034656:	32ae      	adds	r2, #174	; 0xae
 8034658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803465c:	689b      	ldr	r3, [r3, #8]
 803465e:	2b00      	cmp	r3, #0
 8034660:	f000 8163 	beq.w	803492a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8034664:	7b7a      	ldrb	r2, [r7, #13]
 8034666:	687b      	ldr	r3, [r7, #4]
 8034668:	32ae      	adds	r2, #174	; 0xae
 803466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803466e:	689b      	ldr	r3, [r3, #8]
 8034670:	6839      	ldr	r1, [r7, #0]
 8034672:	6878      	ldr	r0, [r7, #4]
 8034674:	4798      	blx	r3
 8034676:	4603      	mov	r3, r0
 8034678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803467a:	e156      	b.n	803492a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803467c:	683b      	ldr	r3, [r7, #0]
 803467e:	785b      	ldrb	r3, [r3, #1]
 8034680:	2b03      	cmp	r3, #3
 8034682:	d008      	beq.n	8034696 <USBD_StdEPReq+0x9a>
 8034684:	2b03      	cmp	r3, #3
 8034686:	f300 8145 	bgt.w	8034914 <USBD_StdEPReq+0x318>
 803468a:	2b00      	cmp	r3, #0
 803468c:	f000 809b 	beq.w	80347c6 <USBD_StdEPReq+0x1ca>
 8034690:	2b01      	cmp	r3, #1
 8034692:	d03c      	beq.n	803470e <USBD_StdEPReq+0x112>
 8034694:	e13e      	b.n	8034914 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8034696:	687b      	ldr	r3, [r7, #4]
 8034698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803469c:	b2db      	uxtb	r3, r3
 803469e:	2b02      	cmp	r3, #2
 80346a0:	d002      	beq.n	80346a8 <USBD_StdEPReq+0xac>
 80346a2:	2b03      	cmp	r3, #3
 80346a4:	d016      	beq.n	80346d4 <USBD_StdEPReq+0xd8>
 80346a6:	e02c      	b.n	8034702 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80346a8:	7bbb      	ldrb	r3, [r7, #14]
 80346aa:	2b00      	cmp	r3, #0
 80346ac:	d00d      	beq.n	80346ca <USBD_StdEPReq+0xce>
 80346ae:	7bbb      	ldrb	r3, [r7, #14]
 80346b0:	2b80      	cmp	r3, #128	; 0x80
 80346b2:	d00a      	beq.n	80346ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80346b4:	7bbb      	ldrb	r3, [r7, #14]
 80346b6:	4619      	mov	r1, r3
 80346b8:	6878      	ldr	r0, [r7, #4]
 80346ba:	f7e5 fd7f 	bl	801a1bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80346be:	2180      	movs	r1, #128	; 0x80
 80346c0:	6878      	ldr	r0, [r7, #4]
 80346c2:	f7e5 fd7b 	bl	801a1bc <USBD_LL_StallEP>
 80346c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80346c8:	e020      	b.n	803470c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80346ca:	6839      	ldr	r1, [r7, #0]
 80346cc:	6878      	ldr	r0, [r7, #4]
 80346ce:	f000 fca4 	bl	803501a <USBD_CtlError>
              break;
 80346d2:	e01b      	b.n	803470c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80346d4:	683b      	ldr	r3, [r7, #0]
 80346d6:	885b      	ldrh	r3, [r3, #2]
 80346d8:	2b00      	cmp	r3, #0
 80346da:	d10e      	bne.n	80346fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80346dc:	7bbb      	ldrb	r3, [r7, #14]
 80346de:	2b00      	cmp	r3, #0
 80346e0:	d00b      	beq.n	80346fa <USBD_StdEPReq+0xfe>
 80346e2:	7bbb      	ldrb	r3, [r7, #14]
 80346e4:	2b80      	cmp	r3, #128	; 0x80
 80346e6:	d008      	beq.n	80346fa <USBD_StdEPReq+0xfe>
 80346e8:	683b      	ldr	r3, [r7, #0]
 80346ea:	88db      	ldrh	r3, [r3, #6]
 80346ec:	2b00      	cmp	r3, #0
 80346ee:	d104      	bne.n	80346fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80346f0:	7bbb      	ldrb	r3, [r7, #14]
 80346f2:	4619      	mov	r1, r3
 80346f4:	6878      	ldr	r0, [r7, #4]
 80346f6:	f7e5 fd61 	bl	801a1bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80346fa:	6878      	ldr	r0, [r7, #4]
 80346fc:	f000 fd58 	bl	80351b0 <USBD_CtlSendStatus>

              break;
 8034700:	e004      	b.n	803470c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8034702:	6839      	ldr	r1, [r7, #0]
 8034704:	6878      	ldr	r0, [r7, #4]
 8034706:	f000 fc88 	bl	803501a <USBD_CtlError>
              break;
 803470a:	bf00      	nop
          }
          break;
 803470c:	e107      	b.n	803491e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803470e:	687b      	ldr	r3, [r7, #4]
 8034710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034714:	b2db      	uxtb	r3, r3
 8034716:	2b02      	cmp	r3, #2
 8034718:	d002      	beq.n	8034720 <USBD_StdEPReq+0x124>
 803471a:	2b03      	cmp	r3, #3
 803471c:	d016      	beq.n	803474c <USBD_StdEPReq+0x150>
 803471e:	e04b      	b.n	80347b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8034720:	7bbb      	ldrb	r3, [r7, #14]
 8034722:	2b00      	cmp	r3, #0
 8034724:	d00d      	beq.n	8034742 <USBD_StdEPReq+0x146>
 8034726:	7bbb      	ldrb	r3, [r7, #14]
 8034728:	2b80      	cmp	r3, #128	; 0x80
 803472a:	d00a      	beq.n	8034742 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803472c:	7bbb      	ldrb	r3, [r7, #14]
 803472e:	4619      	mov	r1, r3
 8034730:	6878      	ldr	r0, [r7, #4]
 8034732:	f7e5 fd43 	bl	801a1bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8034736:	2180      	movs	r1, #128	; 0x80
 8034738:	6878      	ldr	r0, [r7, #4]
 803473a:	f7e5 fd3f 	bl	801a1bc <USBD_LL_StallEP>
 803473e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8034740:	e040      	b.n	80347c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8034742:	6839      	ldr	r1, [r7, #0]
 8034744:	6878      	ldr	r0, [r7, #4]
 8034746:	f000 fc68 	bl	803501a <USBD_CtlError>
              break;
 803474a:	e03b      	b.n	80347c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803474c:	683b      	ldr	r3, [r7, #0]
 803474e:	885b      	ldrh	r3, [r3, #2]
 8034750:	2b00      	cmp	r3, #0
 8034752:	d136      	bne.n	80347c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8034754:	7bbb      	ldrb	r3, [r7, #14]
 8034756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803475a:	2b00      	cmp	r3, #0
 803475c:	d004      	beq.n	8034768 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803475e:	7bbb      	ldrb	r3, [r7, #14]
 8034760:	4619      	mov	r1, r3
 8034762:	6878      	ldr	r0, [r7, #4]
 8034764:	f7e5 fd49 	bl	801a1fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8034768:	6878      	ldr	r0, [r7, #4]
 803476a:	f000 fd21 	bl	80351b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803476e:	7bbb      	ldrb	r3, [r7, #14]
 8034770:	4619      	mov	r1, r3
 8034772:	6878      	ldr	r0, [r7, #4]
 8034774:	f7ff fde2 	bl	803433c <USBD_CoreFindEP>
 8034778:	4603      	mov	r3, r0
 803477a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803477c:	7b7b      	ldrb	r3, [r7, #13]
 803477e:	2bff      	cmp	r3, #255	; 0xff
 8034780:	d01f      	beq.n	80347c2 <USBD_StdEPReq+0x1c6>
 8034782:	7b7b      	ldrb	r3, [r7, #13]
 8034784:	2b00      	cmp	r3, #0
 8034786:	d11c      	bne.n	80347c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8034788:	7b7a      	ldrb	r2, [r7, #13]
 803478a:	687b      	ldr	r3, [r7, #4]
 803478c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8034790:	7b7a      	ldrb	r2, [r7, #13]
 8034792:	687b      	ldr	r3, [r7, #4]
 8034794:	32ae      	adds	r2, #174	; 0xae
 8034796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803479a:	689b      	ldr	r3, [r3, #8]
 803479c:	2b00      	cmp	r3, #0
 803479e:	d010      	beq.n	80347c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80347a0:	7b7a      	ldrb	r2, [r7, #13]
 80347a2:	687b      	ldr	r3, [r7, #4]
 80347a4:	32ae      	adds	r2, #174	; 0xae
 80347a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80347aa:	689b      	ldr	r3, [r3, #8]
 80347ac:	6839      	ldr	r1, [r7, #0]
 80347ae:	6878      	ldr	r0, [r7, #4]
 80347b0:	4798      	blx	r3
 80347b2:	4603      	mov	r3, r0
 80347b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80347b6:	e004      	b.n	80347c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80347b8:	6839      	ldr	r1, [r7, #0]
 80347ba:	6878      	ldr	r0, [r7, #4]
 80347bc:	f000 fc2d 	bl	803501a <USBD_CtlError>
              break;
 80347c0:	e000      	b.n	80347c4 <USBD_StdEPReq+0x1c8>
              break;
 80347c2:	bf00      	nop
          }
          break;
 80347c4:	e0ab      	b.n	803491e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80347c6:	687b      	ldr	r3, [r7, #4]
 80347c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80347cc:	b2db      	uxtb	r3, r3
 80347ce:	2b02      	cmp	r3, #2
 80347d0:	d002      	beq.n	80347d8 <USBD_StdEPReq+0x1dc>
 80347d2:	2b03      	cmp	r3, #3
 80347d4:	d032      	beq.n	803483c <USBD_StdEPReq+0x240>
 80347d6:	e097      	b.n	8034908 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80347d8:	7bbb      	ldrb	r3, [r7, #14]
 80347da:	2b00      	cmp	r3, #0
 80347dc:	d007      	beq.n	80347ee <USBD_StdEPReq+0x1f2>
 80347de:	7bbb      	ldrb	r3, [r7, #14]
 80347e0:	2b80      	cmp	r3, #128	; 0x80
 80347e2:	d004      	beq.n	80347ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80347e4:	6839      	ldr	r1, [r7, #0]
 80347e6:	6878      	ldr	r0, [r7, #4]
 80347e8:	f000 fc17 	bl	803501a <USBD_CtlError>
                break;
 80347ec:	e091      	b.n	8034912 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80347ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80347f2:	2b00      	cmp	r3, #0
 80347f4:	da0b      	bge.n	803480e <USBD_StdEPReq+0x212>
 80347f6:	7bbb      	ldrb	r3, [r7, #14]
 80347f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80347fc:	4613      	mov	r3, r2
 80347fe:	009b      	lsls	r3, r3, #2
 8034800:	4413      	add	r3, r2
 8034802:	009b      	lsls	r3, r3, #2
 8034804:	3310      	adds	r3, #16
 8034806:	687a      	ldr	r2, [r7, #4]
 8034808:	4413      	add	r3, r2
 803480a:	3304      	adds	r3, #4
 803480c:	e00b      	b.n	8034826 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803480e:	7bbb      	ldrb	r3, [r7, #14]
 8034810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8034814:	4613      	mov	r3, r2
 8034816:	009b      	lsls	r3, r3, #2
 8034818:	4413      	add	r3, r2
 803481a:	009b      	lsls	r3, r3, #2
 803481c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8034820:	687a      	ldr	r2, [r7, #4]
 8034822:	4413      	add	r3, r2
 8034824:	3304      	adds	r3, #4
 8034826:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8034828:	68bb      	ldr	r3, [r7, #8]
 803482a:	2200      	movs	r2, #0
 803482c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803482e:	68bb      	ldr	r3, [r7, #8]
 8034830:	2202      	movs	r2, #2
 8034832:	4619      	mov	r1, r3
 8034834:	6878      	ldr	r0, [r7, #4]
 8034836:	f000 fc61 	bl	80350fc <USBD_CtlSendData>
              break;
 803483a:	e06a      	b.n	8034912 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803483c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8034840:	2b00      	cmp	r3, #0
 8034842:	da11      	bge.n	8034868 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8034844:	7bbb      	ldrb	r3, [r7, #14]
 8034846:	f003 020f 	and.w	r2, r3, #15
 803484a:	6879      	ldr	r1, [r7, #4]
 803484c:	4613      	mov	r3, r2
 803484e:	009b      	lsls	r3, r3, #2
 8034850:	4413      	add	r3, r2
 8034852:	009b      	lsls	r3, r3, #2
 8034854:	440b      	add	r3, r1
 8034856:	3324      	adds	r3, #36	; 0x24
 8034858:	881b      	ldrh	r3, [r3, #0]
 803485a:	2b00      	cmp	r3, #0
 803485c:	d117      	bne.n	803488e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803485e:	6839      	ldr	r1, [r7, #0]
 8034860:	6878      	ldr	r0, [r7, #4]
 8034862:	f000 fbda 	bl	803501a <USBD_CtlError>
                  break;
 8034866:	e054      	b.n	8034912 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8034868:	7bbb      	ldrb	r3, [r7, #14]
 803486a:	f003 020f 	and.w	r2, r3, #15
 803486e:	6879      	ldr	r1, [r7, #4]
 8034870:	4613      	mov	r3, r2
 8034872:	009b      	lsls	r3, r3, #2
 8034874:	4413      	add	r3, r2
 8034876:	009b      	lsls	r3, r3, #2
 8034878:	440b      	add	r3, r1
 803487a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803487e:	881b      	ldrh	r3, [r3, #0]
 8034880:	2b00      	cmp	r3, #0
 8034882:	d104      	bne.n	803488e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8034884:	6839      	ldr	r1, [r7, #0]
 8034886:	6878      	ldr	r0, [r7, #4]
 8034888:	f000 fbc7 	bl	803501a <USBD_CtlError>
                  break;
 803488c:	e041      	b.n	8034912 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803488e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8034892:	2b00      	cmp	r3, #0
 8034894:	da0b      	bge.n	80348ae <USBD_StdEPReq+0x2b2>
 8034896:	7bbb      	ldrb	r3, [r7, #14]
 8034898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803489c:	4613      	mov	r3, r2
 803489e:	009b      	lsls	r3, r3, #2
 80348a0:	4413      	add	r3, r2
 80348a2:	009b      	lsls	r3, r3, #2
 80348a4:	3310      	adds	r3, #16
 80348a6:	687a      	ldr	r2, [r7, #4]
 80348a8:	4413      	add	r3, r2
 80348aa:	3304      	adds	r3, #4
 80348ac:	e00b      	b.n	80348c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80348ae:	7bbb      	ldrb	r3, [r7, #14]
 80348b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80348b4:	4613      	mov	r3, r2
 80348b6:	009b      	lsls	r3, r3, #2
 80348b8:	4413      	add	r3, r2
 80348ba:	009b      	lsls	r3, r3, #2
 80348bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80348c0:	687a      	ldr	r2, [r7, #4]
 80348c2:	4413      	add	r3, r2
 80348c4:	3304      	adds	r3, #4
 80348c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80348c8:	7bbb      	ldrb	r3, [r7, #14]
 80348ca:	2b00      	cmp	r3, #0
 80348cc:	d002      	beq.n	80348d4 <USBD_StdEPReq+0x2d8>
 80348ce:	7bbb      	ldrb	r3, [r7, #14]
 80348d0:	2b80      	cmp	r3, #128	; 0x80
 80348d2:	d103      	bne.n	80348dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80348d4:	68bb      	ldr	r3, [r7, #8]
 80348d6:	2200      	movs	r2, #0
 80348d8:	601a      	str	r2, [r3, #0]
 80348da:	e00e      	b.n	80348fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80348dc:	7bbb      	ldrb	r3, [r7, #14]
 80348de:	4619      	mov	r1, r3
 80348e0:	6878      	ldr	r0, [r7, #4]
 80348e2:	f7e5 fca9 	bl	801a238 <USBD_LL_IsStallEP>
 80348e6:	4603      	mov	r3, r0
 80348e8:	2b00      	cmp	r3, #0
 80348ea:	d003      	beq.n	80348f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80348ec:	68bb      	ldr	r3, [r7, #8]
 80348ee:	2201      	movs	r2, #1
 80348f0:	601a      	str	r2, [r3, #0]
 80348f2:	e002      	b.n	80348fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80348f4:	68bb      	ldr	r3, [r7, #8]
 80348f6:	2200      	movs	r2, #0
 80348f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80348fa:	68bb      	ldr	r3, [r7, #8]
 80348fc:	2202      	movs	r2, #2
 80348fe:	4619      	mov	r1, r3
 8034900:	6878      	ldr	r0, [r7, #4]
 8034902:	f000 fbfb 	bl	80350fc <USBD_CtlSendData>
              break;
 8034906:	e004      	b.n	8034912 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8034908:	6839      	ldr	r1, [r7, #0]
 803490a:	6878      	ldr	r0, [r7, #4]
 803490c:	f000 fb85 	bl	803501a <USBD_CtlError>
              break;
 8034910:	bf00      	nop
          }
          break;
 8034912:	e004      	b.n	803491e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8034914:	6839      	ldr	r1, [r7, #0]
 8034916:	6878      	ldr	r0, [r7, #4]
 8034918:	f000 fb7f 	bl	803501a <USBD_CtlError>
          break;
 803491c:	bf00      	nop
      }
      break;
 803491e:	e005      	b.n	803492c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8034920:	6839      	ldr	r1, [r7, #0]
 8034922:	6878      	ldr	r0, [r7, #4]
 8034924:	f000 fb79 	bl	803501a <USBD_CtlError>
      break;
 8034928:	e000      	b.n	803492c <USBD_StdEPReq+0x330>
      break;
 803492a:	bf00      	nop
  }

  return ret;
 803492c:	7bfb      	ldrb	r3, [r7, #15]
}
 803492e:	4618      	mov	r0, r3
 8034930:	3710      	adds	r7, #16
 8034932:	46bd      	mov	sp, r7
 8034934:	bd80      	pop	{r7, pc}
	...

08034938 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034938:	b580      	push	{r7, lr}
 803493a:	b084      	sub	sp, #16
 803493c:	af00      	add	r7, sp, #0
 803493e:	6078      	str	r0, [r7, #4]
 8034940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8034942:	2300      	movs	r3, #0
 8034944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8034946:	2300      	movs	r3, #0
 8034948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803494a:	2300      	movs	r3, #0
 803494c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803494e:	683b      	ldr	r3, [r7, #0]
 8034950:	885b      	ldrh	r3, [r3, #2]
 8034952:	0a1b      	lsrs	r3, r3, #8
 8034954:	b29b      	uxth	r3, r3
 8034956:	3b01      	subs	r3, #1
 8034958:	2b0e      	cmp	r3, #14
 803495a:	f200 8152 	bhi.w	8034c02 <USBD_GetDescriptor+0x2ca>
 803495e:	a201      	add	r2, pc, #4	; (adr r2, 8034964 <USBD_GetDescriptor+0x2c>)
 8034960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034964:	080349d5 	.word	0x080349d5
 8034968:	080349ed 	.word	0x080349ed
 803496c:	08034a2d 	.word	0x08034a2d
 8034970:	08034c03 	.word	0x08034c03
 8034974:	08034c03 	.word	0x08034c03
 8034978:	08034ba3 	.word	0x08034ba3
 803497c:	08034bcf 	.word	0x08034bcf
 8034980:	08034c03 	.word	0x08034c03
 8034984:	08034c03 	.word	0x08034c03
 8034988:	08034c03 	.word	0x08034c03
 803498c:	08034c03 	.word	0x08034c03
 8034990:	08034c03 	.word	0x08034c03
 8034994:	08034c03 	.word	0x08034c03
 8034998:	08034c03 	.word	0x08034c03
 803499c:	080349a1 	.word	0x080349a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80349a0:	687b      	ldr	r3, [r7, #4]
 80349a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80349a6:	69db      	ldr	r3, [r3, #28]
 80349a8:	2b00      	cmp	r3, #0
 80349aa:	d00b      	beq.n	80349c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80349ac:	687b      	ldr	r3, [r7, #4]
 80349ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80349b2:	69db      	ldr	r3, [r3, #28]
 80349b4:	687a      	ldr	r2, [r7, #4]
 80349b6:	7c12      	ldrb	r2, [r2, #16]
 80349b8:	f107 0108 	add.w	r1, r7, #8
 80349bc:	4610      	mov	r0, r2
 80349be:	4798      	blx	r3
 80349c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80349c2:	e126      	b.n	8034c12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80349c4:	6839      	ldr	r1, [r7, #0]
 80349c6:	6878      	ldr	r0, [r7, #4]
 80349c8:	f000 fb27 	bl	803501a <USBD_CtlError>
        err++;
 80349cc:	7afb      	ldrb	r3, [r7, #11]
 80349ce:	3301      	adds	r3, #1
 80349d0:	72fb      	strb	r3, [r7, #11]
      break;
 80349d2:	e11e      	b.n	8034c12 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80349d4:	687b      	ldr	r3, [r7, #4]
 80349d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80349da:	681b      	ldr	r3, [r3, #0]
 80349dc:	687a      	ldr	r2, [r7, #4]
 80349de:	7c12      	ldrb	r2, [r2, #16]
 80349e0:	f107 0108 	add.w	r1, r7, #8
 80349e4:	4610      	mov	r0, r2
 80349e6:	4798      	blx	r3
 80349e8:	60f8      	str	r0, [r7, #12]
      break;
 80349ea:	e112      	b.n	8034c12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80349ec:	687b      	ldr	r3, [r7, #4]
 80349ee:	7c1b      	ldrb	r3, [r3, #16]
 80349f0:	2b00      	cmp	r3, #0
 80349f2:	d10d      	bne.n	8034a10 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80349f4:	687b      	ldr	r3, [r7, #4]
 80349f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80349fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80349fc:	f107 0208 	add.w	r2, r7, #8
 8034a00:	4610      	mov	r0, r2
 8034a02:	4798      	blx	r3
 8034a04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8034a06:	68fb      	ldr	r3, [r7, #12]
 8034a08:	3301      	adds	r3, #1
 8034a0a:	2202      	movs	r2, #2
 8034a0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8034a0e:	e100      	b.n	8034c12 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8034a10:	687b      	ldr	r3, [r7, #4]
 8034a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8034a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034a18:	f107 0208 	add.w	r2, r7, #8
 8034a1c:	4610      	mov	r0, r2
 8034a1e:	4798      	blx	r3
 8034a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8034a22:	68fb      	ldr	r3, [r7, #12]
 8034a24:	3301      	adds	r3, #1
 8034a26:	2202      	movs	r2, #2
 8034a28:	701a      	strb	r2, [r3, #0]
      break;
 8034a2a:	e0f2      	b.n	8034c12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8034a2c:	683b      	ldr	r3, [r7, #0]
 8034a2e:	885b      	ldrh	r3, [r3, #2]
 8034a30:	b2db      	uxtb	r3, r3
 8034a32:	2b05      	cmp	r3, #5
 8034a34:	f200 80ac 	bhi.w	8034b90 <USBD_GetDescriptor+0x258>
 8034a38:	a201      	add	r2, pc, #4	; (adr r2, 8034a40 <USBD_GetDescriptor+0x108>)
 8034a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034a3e:	bf00      	nop
 8034a40:	08034a59 	.word	0x08034a59
 8034a44:	08034a8d 	.word	0x08034a8d
 8034a48:	08034ac1 	.word	0x08034ac1
 8034a4c:	08034af5 	.word	0x08034af5
 8034a50:	08034b29 	.word	0x08034b29
 8034a54:	08034b5d 	.word	0x08034b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8034a58:	687b      	ldr	r3, [r7, #4]
 8034a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034a5e:	685b      	ldr	r3, [r3, #4]
 8034a60:	2b00      	cmp	r3, #0
 8034a62:	d00b      	beq.n	8034a7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8034a64:	687b      	ldr	r3, [r7, #4]
 8034a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034a6a:	685b      	ldr	r3, [r3, #4]
 8034a6c:	687a      	ldr	r2, [r7, #4]
 8034a6e:	7c12      	ldrb	r2, [r2, #16]
 8034a70:	f107 0108 	add.w	r1, r7, #8
 8034a74:	4610      	mov	r0, r2
 8034a76:	4798      	blx	r3
 8034a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034a7a:	e091      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034a7c:	6839      	ldr	r1, [r7, #0]
 8034a7e:	6878      	ldr	r0, [r7, #4]
 8034a80:	f000 facb 	bl	803501a <USBD_CtlError>
            err++;
 8034a84:	7afb      	ldrb	r3, [r7, #11]
 8034a86:	3301      	adds	r3, #1
 8034a88:	72fb      	strb	r3, [r7, #11]
          break;
 8034a8a:	e089      	b.n	8034ba0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8034a8c:	687b      	ldr	r3, [r7, #4]
 8034a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034a92:	689b      	ldr	r3, [r3, #8]
 8034a94:	2b00      	cmp	r3, #0
 8034a96:	d00b      	beq.n	8034ab0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8034a98:	687b      	ldr	r3, [r7, #4]
 8034a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034a9e:	689b      	ldr	r3, [r3, #8]
 8034aa0:	687a      	ldr	r2, [r7, #4]
 8034aa2:	7c12      	ldrb	r2, [r2, #16]
 8034aa4:	f107 0108 	add.w	r1, r7, #8
 8034aa8:	4610      	mov	r0, r2
 8034aaa:	4798      	blx	r3
 8034aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034aae:	e077      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034ab0:	6839      	ldr	r1, [r7, #0]
 8034ab2:	6878      	ldr	r0, [r7, #4]
 8034ab4:	f000 fab1 	bl	803501a <USBD_CtlError>
            err++;
 8034ab8:	7afb      	ldrb	r3, [r7, #11]
 8034aba:	3301      	adds	r3, #1
 8034abc:	72fb      	strb	r3, [r7, #11]
          break;
 8034abe:	e06f      	b.n	8034ba0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8034ac0:	687b      	ldr	r3, [r7, #4]
 8034ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034ac6:	68db      	ldr	r3, [r3, #12]
 8034ac8:	2b00      	cmp	r3, #0
 8034aca:	d00b      	beq.n	8034ae4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8034acc:	687b      	ldr	r3, [r7, #4]
 8034ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034ad2:	68db      	ldr	r3, [r3, #12]
 8034ad4:	687a      	ldr	r2, [r7, #4]
 8034ad6:	7c12      	ldrb	r2, [r2, #16]
 8034ad8:	f107 0108 	add.w	r1, r7, #8
 8034adc:	4610      	mov	r0, r2
 8034ade:	4798      	blx	r3
 8034ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034ae2:	e05d      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034ae4:	6839      	ldr	r1, [r7, #0]
 8034ae6:	6878      	ldr	r0, [r7, #4]
 8034ae8:	f000 fa97 	bl	803501a <USBD_CtlError>
            err++;
 8034aec:	7afb      	ldrb	r3, [r7, #11]
 8034aee:	3301      	adds	r3, #1
 8034af0:	72fb      	strb	r3, [r7, #11]
          break;
 8034af2:	e055      	b.n	8034ba0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8034af4:	687b      	ldr	r3, [r7, #4]
 8034af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034afa:	691b      	ldr	r3, [r3, #16]
 8034afc:	2b00      	cmp	r3, #0
 8034afe:	d00b      	beq.n	8034b18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8034b00:	687b      	ldr	r3, [r7, #4]
 8034b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034b06:	691b      	ldr	r3, [r3, #16]
 8034b08:	687a      	ldr	r2, [r7, #4]
 8034b0a:	7c12      	ldrb	r2, [r2, #16]
 8034b0c:	f107 0108 	add.w	r1, r7, #8
 8034b10:	4610      	mov	r0, r2
 8034b12:	4798      	blx	r3
 8034b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034b16:	e043      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034b18:	6839      	ldr	r1, [r7, #0]
 8034b1a:	6878      	ldr	r0, [r7, #4]
 8034b1c:	f000 fa7d 	bl	803501a <USBD_CtlError>
            err++;
 8034b20:	7afb      	ldrb	r3, [r7, #11]
 8034b22:	3301      	adds	r3, #1
 8034b24:	72fb      	strb	r3, [r7, #11]
          break;
 8034b26:	e03b      	b.n	8034ba0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8034b28:	687b      	ldr	r3, [r7, #4]
 8034b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034b2e:	695b      	ldr	r3, [r3, #20]
 8034b30:	2b00      	cmp	r3, #0
 8034b32:	d00b      	beq.n	8034b4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8034b34:	687b      	ldr	r3, [r7, #4]
 8034b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034b3a:	695b      	ldr	r3, [r3, #20]
 8034b3c:	687a      	ldr	r2, [r7, #4]
 8034b3e:	7c12      	ldrb	r2, [r2, #16]
 8034b40:	f107 0108 	add.w	r1, r7, #8
 8034b44:	4610      	mov	r0, r2
 8034b46:	4798      	blx	r3
 8034b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034b4a:	e029      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034b4c:	6839      	ldr	r1, [r7, #0]
 8034b4e:	6878      	ldr	r0, [r7, #4]
 8034b50:	f000 fa63 	bl	803501a <USBD_CtlError>
            err++;
 8034b54:	7afb      	ldrb	r3, [r7, #11]
 8034b56:	3301      	adds	r3, #1
 8034b58:	72fb      	strb	r3, [r7, #11]
          break;
 8034b5a:	e021      	b.n	8034ba0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8034b5c:	687b      	ldr	r3, [r7, #4]
 8034b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034b62:	699b      	ldr	r3, [r3, #24]
 8034b64:	2b00      	cmp	r3, #0
 8034b66:	d00b      	beq.n	8034b80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8034b68:	687b      	ldr	r3, [r7, #4]
 8034b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8034b6e:	699b      	ldr	r3, [r3, #24]
 8034b70:	687a      	ldr	r2, [r7, #4]
 8034b72:	7c12      	ldrb	r2, [r2, #16]
 8034b74:	f107 0108 	add.w	r1, r7, #8
 8034b78:	4610      	mov	r0, r2
 8034b7a:	4798      	blx	r3
 8034b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8034b7e:	e00f      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8034b80:	6839      	ldr	r1, [r7, #0]
 8034b82:	6878      	ldr	r0, [r7, #4]
 8034b84:	f000 fa49 	bl	803501a <USBD_CtlError>
            err++;
 8034b88:	7afb      	ldrb	r3, [r7, #11]
 8034b8a:	3301      	adds	r3, #1
 8034b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8034b8e:	e007      	b.n	8034ba0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8034b90:	6839      	ldr	r1, [r7, #0]
 8034b92:	6878      	ldr	r0, [r7, #4]
 8034b94:	f000 fa41 	bl	803501a <USBD_CtlError>
          err++;
 8034b98:	7afb      	ldrb	r3, [r7, #11]
 8034b9a:	3301      	adds	r3, #1
 8034b9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8034b9e:	bf00      	nop
      }
      break;
 8034ba0:	e037      	b.n	8034c12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034ba2:	687b      	ldr	r3, [r7, #4]
 8034ba4:	7c1b      	ldrb	r3, [r3, #16]
 8034ba6:	2b00      	cmp	r3, #0
 8034ba8:	d109      	bne.n	8034bbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8034baa:	687b      	ldr	r3, [r7, #4]
 8034bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8034bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034bb2:	f107 0208 	add.w	r2, r7, #8
 8034bb6:	4610      	mov	r0, r2
 8034bb8:	4798      	blx	r3
 8034bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8034bbc:	e029      	b.n	8034c12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8034bbe:	6839      	ldr	r1, [r7, #0]
 8034bc0:	6878      	ldr	r0, [r7, #4]
 8034bc2:	f000 fa2a 	bl	803501a <USBD_CtlError>
        err++;
 8034bc6:	7afb      	ldrb	r3, [r7, #11]
 8034bc8:	3301      	adds	r3, #1
 8034bca:	72fb      	strb	r3, [r7, #11]
      break;
 8034bcc:	e021      	b.n	8034c12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034bce:	687b      	ldr	r3, [r7, #4]
 8034bd0:	7c1b      	ldrb	r3, [r3, #16]
 8034bd2:	2b00      	cmp	r3, #0
 8034bd4:	d10d      	bne.n	8034bf2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8034bd6:	687b      	ldr	r3, [r7, #4]
 8034bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8034bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034bde:	f107 0208 	add.w	r2, r7, #8
 8034be2:	4610      	mov	r0, r2
 8034be4:	4798      	blx	r3
 8034be6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8034be8:	68fb      	ldr	r3, [r7, #12]
 8034bea:	3301      	adds	r3, #1
 8034bec:	2207      	movs	r2, #7
 8034bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8034bf0:	e00f      	b.n	8034c12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8034bf2:	6839      	ldr	r1, [r7, #0]
 8034bf4:	6878      	ldr	r0, [r7, #4]
 8034bf6:	f000 fa10 	bl	803501a <USBD_CtlError>
        err++;
 8034bfa:	7afb      	ldrb	r3, [r7, #11]
 8034bfc:	3301      	adds	r3, #1
 8034bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8034c00:	e007      	b.n	8034c12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8034c02:	6839      	ldr	r1, [r7, #0]
 8034c04:	6878      	ldr	r0, [r7, #4]
 8034c06:	f000 fa08 	bl	803501a <USBD_CtlError>
      err++;
 8034c0a:	7afb      	ldrb	r3, [r7, #11]
 8034c0c:	3301      	adds	r3, #1
 8034c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8034c10:	bf00      	nop
  }

  if (err != 0U)
 8034c12:	7afb      	ldrb	r3, [r7, #11]
 8034c14:	2b00      	cmp	r3, #0
 8034c16:	d11e      	bne.n	8034c56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8034c18:	683b      	ldr	r3, [r7, #0]
 8034c1a:	88db      	ldrh	r3, [r3, #6]
 8034c1c:	2b00      	cmp	r3, #0
 8034c1e:	d016      	beq.n	8034c4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8034c20:	893b      	ldrh	r3, [r7, #8]
 8034c22:	2b00      	cmp	r3, #0
 8034c24:	d00e      	beq.n	8034c44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8034c26:	683b      	ldr	r3, [r7, #0]
 8034c28:	88da      	ldrh	r2, [r3, #6]
 8034c2a:	893b      	ldrh	r3, [r7, #8]
 8034c2c:	4293      	cmp	r3, r2
 8034c2e:	bf28      	it	cs
 8034c30:	4613      	movcs	r3, r2
 8034c32:	b29b      	uxth	r3, r3
 8034c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8034c36:	893b      	ldrh	r3, [r7, #8]
 8034c38:	461a      	mov	r2, r3
 8034c3a:	68f9      	ldr	r1, [r7, #12]
 8034c3c:	6878      	ldr	r0, [r7, #4]
 8034c3e:	f000 fa5d 	bl	80350fc <USBD_CtlSendData>
 8034c42:	e009      	b.n	8034c58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8034c44:	6839      	ldr	r1, [r7, #0]
 8034c46:	6878      	ldr	r0, [r7, #4]
 8034c48:	f000 f9e7 	bl	803501a <USBD_CtlError>
 8034c4c:	e004      	b.n	8034c58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8034c4e:	6878      	ldr	r0, [r7, #4]
 8034c50:	f000 faae 	bl	80351b0 <USBD_CtlSendStatus>
 8034c54:	e000      	b.n	8034c58 <USBD_GetDescriptor+0x320>
    return;
 8034c56:	bf00      	nop
  }
}
 8034c58:	3710      	adds	r7, #16
 8034c5a:	46bd      	mov	sp, r7
 8034c5c:	bd80      	pop	{r7, pc}
 8034c5e:	bf00      	nop

08034c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034c60:	b580      	push	{r7, lr}
 8034c62:	b084      	sub	sp, #16
 8034c64:	af00      	add	r7, sp, #0
 8034c66:	6078      	str	r0, [r7, #4]
 8034c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8034c6a:	683b      	ldr	r3, [r7, #0]
 8034c6c:	889b      	ldrh	r3, [r3, #4]
 8034c6e:	2b00      	cmp	r3, #0
 8034c70:	d131      	bne.n	8034cd6 <USBD_SetAddress+0x76>
 8034c72:	683b      	ldr	r3, [r7, #0]
 8034c74:	88db      	ldrh	r3, [r3, #6]
 8034c76:	2b00      	cmp	r3, #0
 8034c78:	d12d      	bne.n	8034cd6 <USBD_SetAddress+0x76>
 8034c7a:	683b      	ldr	r3, [r7, #0]
 8034c7c:	885b      	ldrh	r3, [r3, #2]
 8034c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8034c80:	d829      	bhi.n	8034cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8034c82:	683b      	ldr	r3, [r7, #0]
 8034c84:	885b      	ldrh	r3, [r3, #2]
 8034c86:	b2db      	uxtb	r3, r3
 8034c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034c8e:	687b      	ldr	r3, [r7, #4]
 8034c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034c94:	b2db      	uxtb	r3, r3
 8034c96:	2b03      	cmp	r3, #3
 8034c98:	d104      	bne.n	8034ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8034c9a:	6839      	ldr	r1, [r7, #0]
 8034c9c:	6878      	ldr	r0, [r7, #4]
 8034c9e:	f000 f9bc 	bl	803501a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034ca2:	e01d      	b.n	8034ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8034ca4:	687b      	ldr	r3, [r7, #4]
 8034ca6:	7bfa      	ldrb	r2, [r7, #15]
 8034ca8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8034cac:	7bfb      	ldrb	r3, [r7, #15]
 8034cae:	4619      	mov	r1, r3
 8034cb0:	6878      	ldr	r0, [r7, #4]
 8034cb2:	f7e5 faed 	bl	801a290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8034cb6:	6878      	ldr	r0, [r7, #4]
 8034cb8:	f000 fa7a 	bl	80351b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8034cbc:	7bfb      	ldrb	r3, [r7, #15]
 8034cbe:	2b00      	cmp	r3, #0
 8034cc0:	d004      	beq.n	8034ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8034cc2:	687b      	ldr	r3, [r7, #4]
 8034cc4:	2202      	movs	r2, #2
 8034cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034cca:	e009      	b.n	8034ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8034ccc:	687b      	ldr	r3, [r7, #4]
 8034cce:	2201      	movs	r2, #1
 8034cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034cd4:	e004      	b.n	8034ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8034cd6:	6839      	ldr	r1, [r7, #0]
 8034cd8:	6878      	ldr	r0, [r7, #4]
 8034cda:	f000 f99e 	bl	803501a <USBD_CtlError>
  }
}
 8034cde:	bf00      	nop
 8034ce0:	bf00      	nop
 8034ce2:	3710      	adds	r7, #16
 8034ce4:	46bd      	mov	sp, r7
 8034ce6:	bd80      	pop	{r7, pc}

08034ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034ce8:	b580      	push	{r7, lr}
 8034cea:	b084      	sub	sp, #16
 8034cec:	af00      	add	r7, sp, #0
 8034cee:	6078      	str	r0, [r7, #4]
 8034cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8034cf2:	2300      	movs	r3, #0
 8034cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8034cf6:	683b      	ldr	r3, [r7, #0]
 8034cf8:	885b      	ldrh	r3, [r3, #2]
 8034cfa:	b2da      	uxtb	r2, r3
 8034cfc:	4b4e      	ldr	r3, [pc, #312]	; (8034e38 <USBD_SetConfig+0x150>)
 8034cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8034d00:	4b4d      	ldr	r3, [pc, #308]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d02:	781b      	ldrb	r3, [r3, #0]
 8034d04:	2b01      	cmp	r3, #1
 8034d06:	d905      	bls.n	8034d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8034d08:	6839      	ldr	r1, [r7, #0]
 8034d0a:	6878      	ldr	r0, [r7, #4]
 8034d0c:	f000 f985 	bl	803501a <USBD_CtlError>
    return USBD_FAIL;
 8034d10:	2303      	movs	r3, #3
 8034d12:	e08c      	b.n	8034e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8034d14:	687b      	ldr	r3, [r7, #4]
 8034d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034d1a:	b2db      	uxtb	r3, r3
 8034d1c:	2b02      	cmp	r3, #2
 8034d1e:	d002      	beq.n	8034d26 <USBD_SetConfig+0x3e>
 8034d20:	2b03      	cmp	r3, #3
 8034d22:	d029      	beq.n	8034d78 <USBD_SetConfig+0x90>
 8034d24:	e075      	b.n	8034e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8034d26:	4b44      	ldr	r3, [pc, #272]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d28:	781b      	ldrb	r3, [r3, #0]
 8034d2a:	2b00      	cmp	r3, #0
 8034d2c:	d020      	beq.n	8034d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8034d2e:	4b42      	ldr	r3, [pc, #264]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d30:	781b      	ldrb	r3, [r3, #0]
 8034d32:	461a      	mov	r2, r3
 8034d34:	687b      	ldr	r3, [r7, #4]
 8034d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8034d38:	4b3f      	ldr	r3, [pc, #252]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d3a:	781b      	ldrb	r3, [r3, #0]
 8034d3c:	4619      	mov	r1, r3
 8034d3e:	6878      	ldr	r0, [r7, #4]
 8034d40:	f7fe ffbd 	bl	8033cbe <USBD_SetClassConfig>
 8034d44:	4603      	mov	r3, r0
 8034d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8034d48:	7bfb      	ldrb	r3, [r7, #15]
 8034d4a:	2b00      	cmp	r3, #0
 8034d4c:	d008      	beq.n	8034d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8034d4e:	6839      	ldr	r1, [r7, #0]
 8034d50:	6878      	ldr	r0, [r7, #4]
 8034d52:	f000 f962 	bl	803501a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8034d56:	687b      	ldr	r3, [r7, #4]
 8034d58:	2202      	movs	r2, #2
 8034d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8034d5e:	e065      	b.n	8034e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8034d60:	6878      	ldr	r0, [r7, #4]
 8034d62:	f000 fa25 	bl	80351b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8034d66:	687b      	ldr	r3, [r7, #4]
 8034d68:	2203      	movs	r2, #3
 8034d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8034d6e:	e05d      	b.n	8034e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8034d70:	6878      	ldr	r0, [r7, #4]
 8034d72:	f000 fa1d 	bl	80351b0 <USBD_CtlSendStatus>
      break;
 8034d76:	e059      	b.n	8034e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8034d78:	4b2f      	ldr	r3, [pc, #188]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d7a:	781b      	ldrb	r3, [r3, #0]
 8034d7c:	2b00      	cmp	r3, #0
 8034d7e:	d112      	bne.n	8034da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8034d80:	687b      	ldr	r3, [r7, #4]
 8034d82:	2202      	movs	r2, #2
 8034d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8034d88:	4b2b      	ldr	r3, [pc, #172]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d8a:	781b      	ldrb	r3, [r3, #0]
 8034d8c:	461a      	mov	r2, r3
 8034d8e:	687b      	ldr	r3, [r7, #4]
 8034d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8034d92:	4b29      	ldr	r3, [pc, #164]	; (8034e38 <USBD_SetConfig+0x150>)
 8034d94:	781b      	ldrb	r3, [r3, #0]
 8034d96:	4619      	mov	r1, r3
 8034d98:	6878      	ldr	r0, [r7, #4]
 8034d9a:	f7fe ffac 	bl	8033cf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8034d9e:	6878      	ldr	r0, [r7, #4]
 8034da0:	f000 fa06 	bl	80351b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8034da4:	e042      	b.n	8034e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8034da6:	4b24      	ldr	r3, [pc, #144]	; (8034e38 <USBD_SetConfig+0x150>)
 8034da8:	781b      	ldrb	r3, [r3, #0]
 8034daa:	461a      	mov	r2, r3
 8034dac:	687b      	ldr	r3, [r7, #4]
 8034dae:	685b      	ldr	r3, [r3, #4]
 8034db0:	429a      	cmp	r2, r3
 8034db2:	d02a      	beq.n	8034e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8034db4:	687b      	ldr	r3, [r7, #4]
 8034db6:	685b      	ldr	r3, [r3, #4]
 8034db8:	b2db      	uxtb	r3, r3
 8034dba:	4619      	mov	r1, r3
 8034dbc:	6878      	ldr	r0, [r7, #4]
 8034dbe:	f7fe ff9a 	bl	8033cf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8034dc2:	4b1d      	ldr	r3, [pc, #116]	; (8034e38 <USBD_SetConfig+0x150>)
 8034dc4:	781b      	ldrb	r3, [r3, #0]
 8034dc6:	461a      	mov	r2, r3
 8034dc8:	687b      	ldr	r3, [r7, #4]
 8034dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8034dcc:	4b1a      	ldr	r3, [pc, #104]	; (8034e38 <USBD_SetConfig+0x150>)
 8034dce:	781b      	ldrb	r3, [r3, #0]
 8034dd0:	4619      	mov	r1, r3
 8034dd2:	6878      	ldr	r0, [r7, #4]
 8034dd4:	f7fe ff73 	bl	8033cbe <USBD_SetClassConfig>
 8034dd8:	4603      	mov	r3, r0
 8034dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8034ddc:	7bfb      	ldrb	r3, [r7, #15]
 8034dde:	2b00      	cmp	r3, #0
 8034de0:	d00f      	beq.n	8034e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8034de2:	6839      	ldr	r1, [r7, #0]
 8034de4:	6878      	ldr	r0, [r7, #4]
 8034de6:	f000 f918 	bl	803501a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8034dea:	687b      	ldr	r3, [r7, #4]
 8034dec:	685b      	ldr	r3, [r3, #4]
 8034dee:	b2db      	uxtb	r3, r3
 8034df0:	4619      	mov	r1, r3
 8034df2:	6878      	ldr	r0, [r7, #4]
 8034df4:	f7fe ff7f 	bl	8033cf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8034df8:	687b      	ldr	r3, [r7, #4]
 8034dfa:	2202      	movs	r2, #2
 8034dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8034e00:	e014      	b.n	8034e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8034e02:	6878      	ldr	r0, [r7, #4]
 8034e04:	f000 f9d4 	bl	80351b0 <USBD_CtlSendStatus>
      break;
 8034e08:	e010      	b.n	8034e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8034e0a:	6878      	ldr	r0, [r7, #4]
 8034e0c:	f000 f9d0 	bl	80351b0 <USBD_CtlSendStatus>
      break;
 8034e10:	e00c      	b.n	8034e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8034e12:	6839      	ldr	r1, [r7, #0]
 8034e14:	6878      	ldr	r0, [r7, #4]
 8034e16:	f000 f900 	bl	803501a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8034e1a:	4b07      	ldr	r3, [pc, #28]	; (8034e38 <USBD_SetConfig+0x150>)
 8034e1c:	781b      	ldrb	r3, [r3, #0]
 8034e1e:	4619      	mov	r1, r3
 8034e20:	6878      	ldr	r0, [r7, #4]
 8034e22:	f7fe ff68 	bl	8033cf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8034e26:	2303      	movs	r3, #3
 8034e28:	73fb      	strb	r3, [r7, #15]
      break;
 8034e2a:	bf00      	nop
  }

  return ret;
 8034e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8034e2e:	4618      	mov	r0, r3
 8034e30:	3710      	adds	r7, #16
 8034e32:	46bd      	mov	sp, r7
 8034e34:	bd80      	pop	{r7, pc}
 8034e36:	bf00      	nop
 8034e38:	2000ce6c 	.word	0x2000ce6c

08034e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034e3c:	b580      	push	{r7, lr}
 8034e3e:	b082      	sub	sp, #8
 8034e40:	af00      	add	r7, sp, #0
 8034e42:	6078      	str	r0, [r7, #4]
 8034e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8034e46:	683b      	ldr	r3, [r7, #0]
 8034e48:	88db      	ldrh	r3, [r3, #6]
 8034e4a:	2b01      	cmp	r3, #1
 8034e4c:	d004      	beq.n	8034e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8034e4e:	6839      	ldr	r1, [r7, #0]
 8034e50:	6878      	ldr	r0, [r7, #4]
 8034e52:	f000 f8e2 	bl	803501a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8034e56:	e023      	b.n	8034ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8034e58:	687b      	ldr	r3, [r7, #4]
 8034e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034e5e:	b2db      	uxtb	r3, r3
 8034e60:	2b02      	cmp	r3, #2
 8034e62:	dc02      	bgt.n	8034e6a <USBD_GetConfig+0x2e>
 8034e64:	2b00      	cmp	r3, #0
 8034e66:	dc03      	bgt.n	8034e70 <USBD_GetConfig+0x34>
 8034e68:	e015      	b.n	8034e96 <USBD_GetConfig+0x5a>
 8034e6a:	2b03      	cmp	r3, #3
 8034e6c:	d00b      	beq.n	8034e86 <USBD_GetConfig+0x4a>
 8034e6e:	e012      	b.n	8034e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8034e70:	687b      	ldr	r3, [r7, #4]
 8034e72:	2200      	movs	r2, #0
 8034e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8034e76:	687b      	ldr	r3, [r7, #4]
 8034e78:	3308      	adds	r3, #8
 8034e7a:	2201      	movs	r2, #1
 8034e7c:	4619      	mov	r1, r3
 8034e7e:	6878      	ldr	r0, [r7, #4]
 8034e80:	f000 f93c 	bl	80350fc <USBD_CtlSendData>
        break;
 8034e84:	e00c      	b.n	8034ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8034e86:	687b      	ldr	r3, [r7, #4]
 8034e88:	3304      	adds	r3, #4
 8034e8a:	2201      	movs	r2, #1
 8034e8c:	4619      	mov	r1, r3
 8034e8e:	6878      	ldr	r0, [r7, #4]
 8034e90:	f000 f934 	bl	80350fc <USBD_CtlSendData>
        break;
 8034e94:	e004      	b.n	8034ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8034e96:	6839      	ldr	r1, [r7, #0]
 8034e98:	6878      	ldr	r0, [r7, #4]
 8034e9a:	f000 f8be 	bl	803501a <USBD_CtlError>
        break;
 8034e9e:	bf00      	nop
}
 8034ea0:	bf00      	nop
 8034ea2:	3708      	adds	r7, #8
 8034ea4:	46bd      	mov	sp, r7
 8034ea6:	bd80      	pop	{r7, pc}

08034ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034ea8:	b580      	push	{r7, lr}
 8034eaa:	b082      	sub	sp, #8
 8034eac:	af00      	add	r7, sp, #0
 8034eae:	6078      	str	r0, [r7, #4]
 8034eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8034eb2:	687b      	ldr	r3, [r7, #4]
 8034eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034eb8:	b2db      	uxtb	r3, r3
 8034eba:	3b01      	subs	r3, #1
 8034ebc:	2b02      	cmp	r3, #2
 8034ebe:	d81e      	bhi.n	8034efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8034ec0:	683b      	ldr	r3, [r7, #0]
 8034ec2:	88db      	ldrh	r3, [r3, #6]
 8034ec4:	2b02      	cmp	r3, #2
 8034ec6:	d004      	beq.n	8034ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8034ec8:	6839      	ldr	r1, [r7, #0]
 8034eca:	6878      	ldr	r0, [r7, #4]
 8034ecc:	f000 f8a5 	bl	803501a <USBD_CtlError>
        break;
 8034ed0:	e01a      	b.n	8034f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8034ed2:	687b      	ldr	r3, [r7, #4]
 8034ed4:	2201      	movs	r2, #1
 8034ed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8034ed8:	687b      	ldr	r3, [r7, #4]
 8034eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8034ede:	2b00      	cmp	r3, #0
 8034ee0:	d005      	beq.n	8034eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8034ee2:	687b      	ldr	r3, [r7, #4]
 8034ee4:	68db      	ldr	r3, [r3, #12]
 8034ee6:	f043 0202 	orr.w	r2, r3, #2
 8034eea:	687b      	ldr	r3, [r7, #4]
 8034eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8034eee:	687b      	ldr	r3, [r7, #4]
 8034ef0:	330c      	adds	r3, #12
 8034ef2:	2202      	movs	r2, #2
 8034ef4:	4619      	mov	r1, r3
 8034ef6:	6878      	ldr	r0, [r7, #4]
 8034ef8:	f000 f900 	bl	80350fc <USBD_CtlSendData>
      break;
 8034efc:	e004      	b.n	8034f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8034efe:	6839      	ldr	r1, [r7, #0]
 8034f00:	6878      	ldr	r0, [r7, #4]
 8034f02:	f000 f88a 	bl	803501a <USBD_CtlError>
      break;
 8034f06:	bf00      	nop
  }
}
 8034f08:	bf00      	nop
 8034f0a:	3708      	adds	r7, #8
 8034f0c:	46bd      	mov	sp, r7
 8034f0e:	bd80      	pop	{r7, pc}

08034f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034f10:	b580      	push	{r7, lr}
 8034f12:	b082      	sub	sp, #8
 8034f14:	af00      	add	r7, sp, #0
 8034f16:	6078      	str	r0, [r7, #4]
 8034f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8034f1a:	683b      	ldr	r3, [r7, #0]
 8034f1c:	885b      	ldrh	r3, [r3, #2]
 8034f1e:	2b01      	cmp	r3, #1
 8034f20:	d107      	bne.n	8034f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8034f22:	687b      	ldr	r3, [r7, #4]
 8034f24:	2201      	movs	r2, #1
 8034f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8034f2a:	6878      	ldr	r0, [r7, #4]
 8034f2c:	f000 f940 	bl	80351b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8034f30:	e013      	b.n	8034f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8034f32:	683b      	ldr	r3, [r7, #0]
 8034f34:	885b      	ldrh	r3, [r3, #2]
 8034f36:	2b02      	cmp	r3, #2
 8034f38:	d10b      	bne.n	8034f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8034f3a:	683b      	ldr	r3, [r7, #0]
 8034f3c:	889b      	ldrh	r3, [r3, #4]
 8034f3e:	0a1b      	lsrs	r3, r3, #8
 8034f40:	b29b      	uxth	r3, r3
 8034f42:	b2da      	uxtb	r2, r3
 8034f44:	687b      	ldr	r3, [r7, #4]
 8034f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8034f4a:	6878      	ldr	r0, [r7, #4]
 8034f4c:	f000 f930 	bl	80351b0 <USBD_CtlSendStatus>
}
 8034f50:	e003      	b.n	8034f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8034f52:	6839      	ldr	r1, [r7, #0]
 8034f54:	6878      	ldr	r0, [r7, #4]
 8034f56:	f000 f860 	bl	803501a <USBD_CtlError>
}
 8034f5a:	bf00      	nop
 8034f5c:	3708      	adds	r7, #8
 8034f5e:	46bd      	mov	sp, r7
 8034f60:	bd80      	pop	{r7, pc}

08034f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8034f62:	b580      	push	{r7, lr}
 8034f64:	b082      	sub	sp, #8
 8034f66:	af00      	add	r7, sp, #0
 8034f68:	6078      	str	r0, [r7, #4]
 8034f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8034f6c:	687b      	ldr	r3, [r7, #4]
 8034f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034f72:	b2db      	uxtb	r3, r3
 8034f74:	3b01      	subs	r3, #1
 8034f76:	2b02      	cmp	r3, #2
 8034f78:	d80b      	bhi.n	8034f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8034f7a:	683b      	ldr	r3, [r7, #0]
 8034f7c:	885b      	ldrh	r3, [r3, #2]
 8034f7e:	2b01      	cmp	r3, #1
 8034f80:	d10c      	bne.n	8034f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8034f82:	687b      	ldr	r3, [r7, #4]
 8034f84:	2200      	movs	r2, #0
 8034f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8034f8a:	6878      	ldr	r0, [r7, #4]
 8034f8c:	f000 f910 	bl	80351b0 <USBD_CtlSendStatus>
      }
      break;
 8034f90:	e004      	b.n	8034f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8034f92:	6839      	ldr	r1, [r7, #0]
 8034f94:	6878      	ldr	r0, [r7, #4]
 8034f96:	f000 f840 	bl	803501a <USBD_CtlError>
      break;
 8034f9a:	e000      	b.n	8034f9e <USBD_ClrFeature+0x3c>
      break;
 8034f9c:	bf00      	nop
  }
}
 8034f9e:	bf00      	nop
 8034fa0:	3708      	adds	r7, #8
 8034fa2:	46bd      	mov	sp, r7
 8034fa4:	bd80      	pop	{r7, pc}

08034fa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8034fa6:	b580      	push	{r7, lr}
 8034fa8:	b084      	sub	sp, #16
 8034faa:	af00      	add	r7, sp, #0
 8034fac:	6078      	str	r0, [r7, #4]
 8034fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8034fb0:	683b      	ldr	r3, [r7, #0]
 8034fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8034fb4:	68fb      	ldr	r3, [r7, #12]
 8034fb6:	781a      	ldrb	r2, [r3, #0]
 8034fb8:	687b      	ldr	r3, [r7, #4]
 8034fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8034fbc:	68fb      	ldr	r3, [r7, #12]
 8034fbe:	3301      	adds	r3, #1
 8034fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8034fc2:	68fb      	ldr	r3, [r7, #12]
 8034fc4:	781a      	ldrb	r2, [r3, #0]
 8034fc6:	687b      	ldr	r3, [r7, #4]
 8034fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8034fca:	68fb      	ldr	r3, [r7, #12]
 8034fcc:	3301      	adds	r3, #1
 8034fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8034fd0:	68f8      	ldr	r0, [r7, #12]
 8034fd2:	f7ff fa17 	bl	8034404 <SWAPBYTE>
 8034fd6:	4603      	mov	r3, r0
 8034fd8:	461a      	mov	r2, r3
 8034fda:	687b      	ldr	r3, [r7, #4]
 8034fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8034fde:	68fb      	ldr	r3, [r7, #12]
 8034fe0:	3301      	adds	r3, #1
 8034fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8034fe4:	68fb      	ldr	r3, [r7, #12]
 8034fe6:	3301      	adds	r3, #1
 8034fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8034fea:	68f8      	ldr	r0, [r7, #12]
 8034fec:	f7ff fa0a 	bl	8034404 <SWAPBYTE>
 8034ff0:	4603      	mov	r3, r0
 8034ff2:	461a      	mov	r2, r3
 8034ff4:	687b      	ldr	r3, [r7, #4]
 8034ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8034ff8:	68fb      	ldr	r3, [r7, #12]
 8034ffa:	3301      	adds	r3, #1
 8034ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8034ffe:	68fb      	ldr	r3, [r7, #12]
 8035000:	3301      	adds	r3, #1
 8035002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8035004:	68f8      	ldr	r0, [r7, #12]
 8035006:	f7ff f9fd 	bl	8034404 <SWAPBYTE>
 803500a:	4603      	mov	r3, r0
 803500c:	461a      	mov	r2, r3
 803500e:	687b      	ldr	r3, [r7, #4]
 8035010:	80da      	strh	r2, [r3, #6]
}
 8035012:	bf00      	nop
 8035014:	3710      	adds	r7, #16
 8035016:	46bd      	mov	sp, r7
 8035018:	bd80      	pop	{r7, pc}

0803501a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803501a:	b580      	push	{r7, lr}
 803501c:	b082      	sub	sp, #8
 803501e:	af00      	add	r7, sp, #0
 8035020:	6078      	str	r0, [r7, #4]
 8035022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8035024:	2180      	movs	r1, #128	; 0x80
 8035026:	6878      	ldr	r0, [r7, #4]
 8035028:	f7e5 f8c8 	bl	801a1bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803502c:	2100      	movs	r1, #0
 803502e:	6878      	ldr	r0, [r7, #4]
 8035030:	f7e5 f8c4 	bl	801a1bc <USBD_LL_StallEP>
}
 8035034:	bf00      	nop
 8035036:	3708      	adds	r7, #8
 8035038:	46bd      	mov	sp, r7
 803503a:	bd80      	pop	{r7, pc}

0803503c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803503c:	b580      	push	{r7, lr}
 803503e:	b086      	sub	sp, #24
 8035040:	af00      	add	r7, sp, #0
 8035042:	60f8      	str	r0, [r7, #12]
 8035044:	60b9      	str	r1, [r7, #8]
 8035046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8035048:	2300      	movs	r3, #0
 803504a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803504c:	68fb      	ldr	r3, [r7, #12]
 803504e:	2b00      	cmp	r3, #0
 8035050:	d036      	beq.n	80350c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8035052:	68fb      	ldr	r3, [r7, #12]
 8035054:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8035056:	6938      	ldr	r0, [r7, #16]
 8035058:	f000 f836 	bl	80350c8 <USBD_GetLen>
 803505c:	4603      	mov	r3, r0
 803505e:	3301      	adds	r3, #1
 8035060:	b29b      	uxth	r3, r3
 8035062:	005b      	lsls	r3, r3, #1
 8035064:	b29a      	uxth	r2, r3
 8035066:	687b      	ldr	r3, [r7, #4]
 8035068:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803506a:	7dfb      	ldrb	r3, [r7, #23]
 803506c:	68ba      	ldr	r2, [r7, #8]
 803506e:	4413      	add	r3, r2
 8035070:	687a      	ldr	r2, [r7, #4]
 8035072:	7812      	ldrb	r2, [r2, #0]
 8035074:	701a      	strb	r2, [r3, #0]
  idx++;
 8035076:	7dfb      	ldrb	r3, [r7, #23]
 8035078:	3301      	adds	r3, #1
 803507a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803507c:	7dfb      	ldrb	r3, [r7, #23]
 803507e:	68ba      	ldr	r2, [r7, #8]
 8035080:	4413      	add	r3, r2
 8035082:	2203      	movs	r2, #3
 8035084:	701a      	strb	r2, [r3, #0]
  idx++;
 8035086:	7dfb      	ldrb	r3, [r7, #23]
 8035088:	3301      	adds	r3, #1
 803508a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803508c:	e013      	b.n	80350b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803508e:	7dfb      	ldrb	r3, [r7, #23]
 8035090:	68ba      	ldr	r2, [r7, #8]
 8035092:	4413      	add	r3, r2
 8035094:	693a      	ldr	r2, [r7, #16]
 8035096:	7812      	ldrb	r2, [r2, #0]
 8035098:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803509a:	693b      	ldr	r3, [r7, #16]
 803509c:	3301      	adds	r3, #1
 803509e:	613b      	str	r3, [r7, #16]
    idx++;
 80350a0:	7dfb      	ldrb	r3, [r7, #23]
 80350a2:	3301      	adds	r3, #1
 80350a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80350a6:	7dfb      	ldrb	r3, [r7, #23]
 80350a8:	68ba      	ldr	r2, [r7, #8]
 80350aa:	4413      	add	r3, r2
 80350ac:	2200      	movs	r2, #0
 80350ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80350b0:	7dfb      	ldrb	r3, [r7, #23]
 80350b2:	3301      	adds	r3, #1
 80350b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80350b6:	693b      	ldr	r3, [r7, #16]
 80350b8:	781b      	ldrb	r3, [r3, #0]
 80350ba:	2b00      	cmp	r3, #0
 80350bc:	d1e7      	bne.n	803508e <USBD_GetString+0x52>
 80350be:	e000      	b.n	80350c2 <USBD_GetString+0x86>
    return;
 80350c0:	bf00      	nop
  }
}
 80350c2:	3718      	adds	r7, #24
 80350c4:	46bd      	mov	sp, r7
 80350c6:	bd80      	pop	{r7, pc}

080350c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80350c8:	b480      	push	{r7}
 80350ca:	b085      	sub	sp, #20
 80350cc:	af00      	add	r7, sp, #0
 80350ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80350d0:	2300      	movs	r3, #0
 80350d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80350d4:	687b      	ldr	r3, [r7, #4]
 80350d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80350d8:	e005      	b.n	80350e6 <USBD_GetLen+0x1e>
  {
    len++;
 80350da:	7bfb      	ldrb	r3, [r7, #15]
 80350dc:	3301      	adds	r3, #1
 80350de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80350e0:	68bb      	ldr	r3, [r7, #8]
 80350e2:	3301      	adds	r3, #1
 80350e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80350e6:	68bb      	ldr	r3, [r7, #8]
 80350e8:	781b      	ldrb	r3, [r3, #0]
 80350ea:	2b00      	cmp	r3, #0
 80350ec:	d1f5      	bne.n	80350da <USBD_GetLen+0x12>
  }

  return len;
 80350ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80350f0:	4618      	mov	r0, r3
 80350f2:	3714      	adds	r7, #20
 80350f4:	46bd      	mov	sp, r7
 80350f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80350fa:	4770      	bx	lr

080350fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80350fc:	b580      	push	{r7, lr}
 80350fe:	b084      	sub	sp, #16
 8035100:	af00      	add	r7, sp, #0
 8035102:	60f8      	str	r0, [r7, #12]
 8035104:	60b9      	str	r1, [r7, #8]
 8035106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8035108:	68fb      	ldr	r3, [r7, #12]
 803510a:	2202      	movs	r2, #2
 803510c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8035110:	68fb      	ldr	r3, [r7, #12]
 8035112:	687a      	ldr	r2, [r7, #4]
 8035114:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8035116:	68fb      	ldr	r3, [r7, #12]
 8035118:	687a      	ldr	r2, [r7, #4]
 803511a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803511c:	687b      	ldr	r3, [r7, #4]
 803511e:	68ba      	ldr	r2, [r7, #8]
 8035120:	2100      	movs	r1, #0
 8035122:	68f8      	ldr	r0, [r7, #12]
 8035124:	f7e5 f8d3 	bl	801a2ce <USBD_LL_Transmit>

  return USBD_OK;
 8035128:	2300      	movs	r3, #0
}
 803512a:	4618      	mov	r0, r3
 803512c:	3710      	adds	r7, #16
 803512e:	46bd      	mov	sp, r7
 8035130:	bd80      	pop	{r7, pc}

08035132 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8035132:	b580      	push	{r7, lr}
 8035134:	b084      	sub	sp, #16
 8035136:	af00      	add	r7, sp, #0
 8035138:	60f8      	str	r0, [r7, #12]
 803513a:	60b9      	str	r1, [r7, #8]
 803513c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803513e:	687b      	ldr	r3, [r7, #4]
 8035140:	68ba      	ldr	r2, [r7, #8]
 8035142:	2100      	movs	r1, #0
 8035144:	68f8      	ldr	r0, [r7, #12]
 8035146:	f7e5 f8c2 	bl	801a2ce <USBD_LL_Transmit>

  return USBD_OK;
 803514a:	2300      	movs	r3, #0
}
 803514c:	4618      	mov	r0, r3
 803514e:	3710      	adds	r7, #16
 8035150:	46bd      	mov	sp, r7
 8035152:	bd80      	pop	{r7, pc}

08035154 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8035154:	b580      	push	{r7, lr}
 8035156:	b084      	sub	sp, #16
 8035158:	af00      	add	r7, sp, #0
 803515a:	60f8      	str	r0, [r7, #12]
 803515c:	60b9      	str	r1, [r7, #8]
 803515e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8035160:	68fb      	ldr	r3, [r7, #12]
 8035162:	2203      	movs	r2, #3
 8035164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8035168:	68fb      	ldr	r3, [r7, #12]
 803516a:	687a      	ldr	r2, [r7, #4]
 803516c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8035170:	68fb      	ldr	r3, [r7, #12]
 8035172:	687a      	ldr	r2, [r7, #4]
 8035174:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8035178:	687b      	ldr	r3, [r7, #4]
 803517a:	68ba      	ldr	r2, [r7, #8]
 803517c:	2100      	movs	r1, #0
 803517e:	68f8      	ldr	r0, [r7, #12]
 8035180:	f7e5 f8c6 	bl	801a310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8035184:	2300      	movs	r3, #0
}
 8035186:	4618      	mov	r0, r3
 8035188:	3710      	adds	r7, #16
 803518a:	46bd      	mov	sp, r7
 803518c:	bd80      	pop	{r7, pc}

0803518e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803518e:	b580      	push	{r7, lr}
 8035190:	b084      	sub	sp, #16
 8035192:	af00      	add	r7, sp, #0
 8035194:	60f8      	str	r0, [r7, #12]
 8035196:	60b9      	str	r1, [r7, #8]
 8035198:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803519a:	687b      	ldr	r3, [r7, #4]
 803519c:	68ba      	ldr	r2, [r7, #8]
 803519e:	2100      	movs	r1, #0
 80351a0:	68f8      	ldr	r0, [r7, #12]
 80351a2:	f7e5 f8b5 	bl	801a310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80351a6:	2300      	movs	r3, #0
}
 80351a8:	4618      	mov	r0, r3
 80351aa:	3710      	adds	r7, #16
 80351ac:	46bd      	mov	sp, r7
 80351ae:	bd80      	pop	{r7, pc}

080351b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80351b0:	b580      	push	{r7, lr}
 80351b2:	b082      	sub	sp, #8
 80351b4:	af00      	add	r7, sp, #0
 80351b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80351b8:	687b      	ldr	r3, [r7, #4]
 80351ba:	2204      	movs	r2, #4
 80351bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80351c0:	2300      	movs	r3, #0
 80351c2:	2200      	movs	r2, #0
 80351c4:	2100      	movs	r1, #0
 80351c6:	6878      	ldr	r0, [r7, #4]
 80351c8:	f7e5 f881 	bl	801a2ce <USBD_LL_Transmit>

  return USBD_OK;
 80351cc:	2300      	movs	r3, #0
}
 80351ce:	4618      	mov	r0, r3
 80351d0:	3708      	adds	r7, #8
 80351d2:	46bd      	mov	sp, r7
 80351d4:	bd80      	pop	{r7, pc}

080351d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80351d6:	b580      	push	{r7, lr}
 80351d8:	b082      	sub	sp, #8
 80351da:	af00      	add	r7, sp, #0
 80351dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80351de:	687b      	ldr	r3, [r7, #4]
 80351e0:	2205      	movs	r2, #5
 80351e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80351e6:	2300      	movs	r3, #0
 80351e8:	2200      	movs	r2, #0
 80351ea:	2100      	movs	r1, #0
 80351ec:	6878      	ldr	r0, [r7, #4]
 80351ee:	f7e5 f88f 	bl	801a310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80351f2:	2300      	movs	r3, #0
}
 80351f4:	4618      	mov	r0, r3
 80351f6:	3708      	adds	r7, #8
 80351f8:	46bd      	mov	sp, r7
 80351fa:	bd80      	pop	{r7, pc}

080351fc <ffs>:
 80351fc:	2800      	cmp	r0, #0
 80351fe:	fa90 f3a0 	rbit	r3, r0
 8035202:	fab3 f383 	clz	r3, r3
 8035206:	bf08      	it	eq
 8035208:	f04f 33ff 	moveq.w	r3, #4294967295
 803520c:	1c58      	adds	r0, r3, #1
 803520e:	4770      	bx	lr

08035210 <malloc>:
 8035210:	4b02      	ldr	r3, [pc, #8]	; (803521c <malloc+0xc>)
 8035212:	4601      	mov	r1, r0
 8035214:	6818      	ldr	r0, [r3, #0]
 8035216:	f000 b8b7 	b.w	8035388 <_malloc_r>
 803521a:	bf00      	nop
 803521c:	20002a0c 	.word	0x20002a0c

08035220 <free>:
 8035220:	4b02      	ldr	r3, [pc, #8]	; (803522c <free+0xc>)
 8035222:	4601      	mov	r1, r0
 8035224:	6818      	ldr	r0, [r3, #0]
 8035226:	f000 b843 	b.w	80352b0 <_free_r>
 803522a:	bf00      	nop
 803522c:	20002a0c 	.word	0x20002a0c

08035230 <memcmp>:
 8035230:	b510      	push	{r4, lr}
 8035232:	3901      	subs	r1, #1
 8035234:	4402      	add	r2, r0
 8035236:	4290      	cmp	r0, r2
 8035238:	d101      	bne.n	803523e <memcmp+0xe>
 803523a:	2000      	movs	r0, #0
 803523c:	e005      	b.n	803524a <memcmp+0x1a>
 803523e:	7803      	ldrb	r3, [r0, #0]
 8035240:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8035244:	42a3      	cmp	r3, r4
 8035246:	d001      	beq.n	803524c <memcmp+0x1c>
 8035248:	1b18      	subs	r0, r3, r4
 803524a:	bd10      	pop	{r4, pc}
 803524c:	3001      	adds	r0, #1
 803524e:	e7f2      	b.n	8035236 <memcmp+0x6>

08035250 <memcpy>:
 8035250:	440a      	add	r2, r1
 8035252:	4291      	cmp	r1, r2
 8035254:	f100 33ff 	add.w	r3, r0, #4294967295
 8035258:	d100      	bne.n	803525c <memcpy+0xc>
 803525a:	4770      	bx	lr
 803525c:	b510      	push	{r4, lr}
 803525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8035266:	4291      	cmp	r1, r2
 8035268:	d1f9      	bne.n	803525e <memcpy+0xe>
 803526a:	bd10      	pop	{r4, pc}

0803526c <memmove>:
 803526c:	4288      	cmp	r0, r1
 803526e:	b510      	push	{r4, lr}
 8035270:	eb01 0402 	add.w	r4, r1, r2
 8035274:	d902      	bls.n	803527c <memmove+0x10>
 8035276:	4284      	cmp	r4, r0
 8035278:	4623      	mov	r3, r4
 803527a:	d807      	bhi.n	803528c <memmove+0x20>
 803527c:	1e43      	subs	r3, r0, #1
 803527e:	42a1      	cmp	r1, r4
 8035280:	d008      	beq.n	8035294 <memmove+0x28>
 8035282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8035286:	f803 2f01 	strb.w	r2, [r3, #1]!
 803528a:	e7f8      	b.n	803527e <memmove+0x12>
 803528c:	4402      	add	r2, r0
 803528e:	4601      	mov	r1, r0
 8035290:	428a      	cmp	r2, r1
 8035292:	d100      	bne.n	8035296 <memmove+0x2a>
 8035294:	bd10      	pop	{r4, pc}
 8035296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803529a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803529e:	e7f7      	b.n	8035290 <memmove+0x24>

080352a0 <memset>:
 80352a0:	4402      	add	r2, r0
 80352a2:	4603      	mov	r3, r0
 80352a4:	4293      	cmp	r3, r2
 80352a6:	d100      	bne.n	80352aa <memset+0xa>
 80352a8:	4770      	bx	lr
 80352aa:	f803 1b01 	strb.w	r1, [r3], #1
 80352ae:	e7f9      	b.n	80352a4 <memset+0x4>

080352b0 <_free_r>:
 80352b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80352b2:	2900      	cmp	r1, #0
 80352b4:	d044      	beq.n	8035340 <_free_r+0x90>
 80352b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80352ba:	9001      	str	r0, [sp, #4]
 80352bc:	2b00      	cmp	r3, #0
 80352be:	f1a1 0404 	sub.w	r4, r1, #4
 80352c2:	bfb8      	it	lt
 80352c4:	18e4      	addlt	r4, r4, r3
 80352c6:	f001 febb 	bl	8037040 <__malloc_lock>
 80352ca:	4a1e      	ldr	r2, [pc, #120]	; (8035344 <_free_r+0x94>)
 80352cc:	9801      	ldr	r0, [sp, #4]
 80352ce:	6813      	ldr	r3, [r2, #0]
 80352d0:	b933      	cbnz	r3, 80352e0 <_free_r+0x30>
 80352d2:	6063      	str	r3, [r4, #4]
 80352d4:	6014      	str	r4, [r2, #0]
 80352d6:	b003      	add	sp, #12
 80352d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80352dc:	f001 beb6 	b.w	803704c <__malloc_unlock>
 80352e0:	42a3      	cmp	r3, r4
 80352e2:	d908      	bls.n	80352f6 <_free_r+0x46>
 80352e4:	6825      	ldr	r5, [r4, #0]
 80352e6:	1961      	adds	r1, r4, r5
 80352e8:	428b      	cmp	r3, r1
 80352ea:	bf01      	itttt	eq
 80352ec:	6819      	ldreq	r1, [r3, #0]
 80352ee:	685b      	ldreq	r3, [r3, #4]
 80352f0:	1949      	addeq	r1, r1, r5
 80352f2:	6021      	streq	r1, [r4, #0]
 80352f4:	e7ed      	b.n	80352d2 <_free_r+0x22>
 80352f6:	461a      	mov	r2, r3
 80352f8:	685b      	ldr	r3, [r3, #4]
 80352fa:	b10b      	cbz	r3, 8035300 <_free_r+0x50>
 80352fc:	42a3      	cmp	r3, r4
 80352fe:	d9fa      	bls.n	80352f6 <_free_r+0x46>
 8035300:	6811      	ldr	r1, [r2, #0]
 8035302:	1855      	adds	r5, r2, r1
 8035304:	42a5      	cmp	r5, r4
 8035306:	d10b      	bne.n	8035320 <_free_r+0x70>
 8035308:	6824      	ldr	r4, [r4, #0]
 803530a:	4421      	add	r1, r4
 803530c:	1854      	adds	r4, r2, r1
 803530e:	42a3      	cmp	r3, r4
 8035310:	6011      	str	r1, [r2, #0]
 8035312:	d1e0      	bne.n	80352d6 <_free_r+0x26>
 8035314:	681c      	ldr	r4, [r3, #0]
 8035316:	685b      	ldr	r3, [r3, #4]
 8035318:	6053      	str	r3, [r2, #4]
 803531a:	4421      	add	r1, r4
 803531c:	6011      	str	r1, [r2, #0]
 803531e:	e7da      	b.n	80352d6 <_free_r+0x26>
 8035320:	d902      	bls.n	8035328 <_free_r+0x78>
 8035322:	230c      	movs	r3, #12
 8035324:	6003      	str	r3, [r0, #0]
 8035326:	e7d6      	b.n	80352d6 <_free_r+0x26>
 8035328:	6825      	ldr	r5, [r4, #0]
 803532a:	1961      	adds	r1, r4, r5
 803532c:	428b      	cmp	r3, r1
 803532e:	bf04      	itt	eq
 8035330:	6819      	ldreq	r1, [r3, #0]
 8035332:	685b      	ldreq	r3, [r3, #4]
 8035334:	6063      	str	r3, [r4, #4]
 8035336:	bf04      	itt	eq
 8035338:	1949      	addeq	r1, r1, r5
 803533a:	6021      	streq	r1, [r4, #0]
 803533c:	6054      	str	r4, [r2, #4]
 803533e:	e7ca      	b.n	80352d6 <_free_r+0x26>
 8035340:	b003      	add	sp, #12
 8035342:	bd30      	pop	{r4, r5, pc}
 8035344:	2000ce70 	.word	0x2000ce70

08035348 <sbrk_aligned>:
 8035348:	b570      	push	{r4, r5, r6, lr}
 803534a:	4e0e      	ldr	r6, [pc, #56]	; (8035384 <sbrk_aligned+0x3c>)
 803534c:	460c      	mov	r4, r1
 803534e:	6831      	ldr	r1, [r6, #0]
 8035350:	4605      	mov	r5, r0
 8035352:	b911      	cbnz	r1, 803535a <sbrk_aligned+0x12>
 8035354:	f000 fd5c 	bl	8035e10 <_sbrk_r>
 8035358:	6030      	str	r0, [r6, #0]
 803535a:	4621      	mov	r1, r4
 803535c:	4628      	mov	r0, r5
 803535e:	f000 fd57 	bl	8035e10 <_sbrk_r>
 8035362:	1c43      	adds	r3, r0, #1
 8035364:	d00a      	beq.n	803537c <sbrk_aligned+0x34>
 8035366:	1cc4      	adds	r4, r0, #3
 8035368:	f024 0403 	bic.w	r4, r4, #3
 803536c:	42a0      	cmp	r0, r4
 803536e:	d007      	beq.n	8035380 <sbrk_aligned+0x38>
 8035370:	1a21      	subs	r1, r4, r0
 8035372:	4628      	mov	r0, r5
 8035374:	f000 fd4c 	bl	8035e10 <_sbrk_r>
 8035378:	3001      	adds	r0, #1
 803537a:	d101      	bne.n	8035380 <sbrk_aligned+0x38>
 803537c:	f04f 34ff 	mov.w	r4, #4294967295
 8035380:	4620      	mov	r0, r4
 8035382:	bd70      	pop	{r4, r5, r6, pc}
 8035384:	2000ce74 	.word	0x2000ce74

08035388 <_malloc_r>:
 8035388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803538c:	1ccd      	adds	r5, r1, #3
 803538e:	f025 0503 	bic.w	r5, r5, #3
 8035392:	3508      	adds	r5, #8
 8035394:	2d0c      	cmp	r5, #12
 8035396:	bf38      	it	cc
 8035398:	250c      	movcc	r5, #12
 803539a:	2d00      	cmp	r5, #0
 803539c:	4607      	mov	r7, r0
 803539e:	db01      	blt.n	80353a4 <_malloc_r+0x1c>
 80353a0:	42a9      	cmp	r1, r5
 80353a2:	d905      	bls.n	80353b0 <_malloc_r+0x28>
 80353a4:	230c      	movs	r3, #12
 80353a6:	603b      	str	r3, [r7, #0]
 80353a8:	2600      	movs	r6, #0
 80353aa:	4630      	mov	r0, r6
 80353ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80353b0:	4e2e      	ldr	r6, [pc, #184]	; (803546c <_malloc_r+0xe4>)
 80353b2:	f001 fe45 	bl	8037040 <__malloc_lock>
 80353b6:	6833      	ldr	r3, [r6, #0]
 80353b8:	461c      	mov	r4, r3
 80353ba:	bb34      	cbnz	r4, 803540a <_malloc_r+0x82>
 80353bc:	4629      	mov	r1, r5
 80353be:	4638      	mov	r0, r7
 80353c0:	f7ff ffc2 	bl	8035348 <sbrk_aligned>
 80353c4:	1c43      	adds	r3, r0, #1
 80353c6:	4604      	mov	r4, r0
 80353c8:	d14d      	bne.n	8035466 <_malloc_r+0xde>
 80353ca:	6834      	ldr	r4, [r6, #0]
 80353cc:	4626      	mov	r6, r4
 80353ce:	2e00      	cmp	r6, #0
 80353d0:	d140      	bne.n	8035454 <_malloc_r+0xcc>
 80353d2:	6823      	ldr	r3, [r4, #0]
 80353d4:	4631      	mov	r1, r6
 80353d6:	4638      	mov	r0, r7
 80353d8:	eb04 0803 	add.w	r8, r4, r3
 80353dc:	f000 fd18 	bl	8035e10 <_sbrk_r>
 80353e0:	4580      	cmp	r8, r0
 80353e2:	d13a      	bne.n	803545a <_malloc_r+0xd2>
 80353e4:	6821      	ldr	r1, [r4, #0]
 80353e6:	3503      	adds	r5, #3
 80353e8:	1a6d      	subs	r5, r5, r1
 80353ea:	f025 0503 	bic.w	r5, r5, #3
 80353ee:	3508      	adds	r5, #8
 80353f0:	2d0c      	cmp	r5, #12
 80353f2:	bf38      	it	cc
 80353f4:	250c      	movcc	r5, #12
 80353f6:	4629      	mov	r1, r5
 80353f8:	4638      	mov	r0, r7
 80353fa:	f7ff ffa5 	bl	8035348 <sbrk_aligned>
 80353fe:	3001      	adds	r0, #1
 8035400:	d02b      	beq.n	803545a <_malloc_r+0xd2>
 8035402:	6823      	ldr	r3, [r4, #0]
 8035404:	442b      	add	r3, r5
 8035406:	6023      	str	r3, [r4, #0]
 8035408:	e00e      	b.n	8035428 <_malloc_r+0xa0>
 803540a:	6822      	ldr	r2, [r4, #0]
 803540c:	1b52      	subs	r2, r2, r5
 803540e:	d41e      	bmi.n	803544e <_malloc_r+0xc6>
 8035410:	2a0b      	cmp	r2, #11
 8035412:	d916      	bls.n	8035442 <_malloc_r+0xba>
 8035414:	1961      	adds	r1, r4, r5
 8035416:	42a3      	cmp	r3, r4
 8035418:	6025      	str	r5, [r4, #0]
 803541a:	bf18      	it	ne
 803541c:	6059      	strne	r1, [r3, #4]
 803541e:	6863      	ldr	r3, [r4, #4]
 8035420:	bf08      	it	eq
 8035422:	6031      	streq	r1, [r6, #0]
 8035424:	5162      	str	r2, [r4, r5]
 8035426:	604b      	str	r3, [r1, #4]
 8035428:	4638      	mov	r0, r7
 803542a:	f104 060b 	add.w	r6, r4, #11
 803542e:	f001 fe0d 	bl	803704c <__malloc_unlock>
 8035432:	f026 0607 	bic.w	r6, r6, #7
 8035436:	1d23      	adds	r3, r4, #4
 8035438:	1af2      	subs	r2, r6, r3
 803543a:	d0b6      	beq.n	80353aa <_malloc_r+0x22>
 803543c:	1b9b      	subs	r3, r3, r6
 803543e:	50a3      	str	r3, [r4, r2]
 8035440:	e7b3      	b.n	80353aa <_malloc_r+0x22>
 8035442:	6862      	ldr	r2, [r4, #4]
 8035444:	42a3      	cmp	r3, r4
 8035446:	bf0c      	ite	eq
 8035448:	6032      	streq	r2, [r6, #0]
 803544a:	605a      	strne	r2, [r3, #4]
 803544c:	e7ec      	b.n	8035428 <_malloc_r+0xa0>
 803544e:	4623      	mov	r3, r4
 8035450:	6864      	ldr	r4, [r4, #4]
 8035452:	e7b2      	b.n	80353ba <_malloc_r+0x32>
 8035454:	4634      	mov	r4, r6
 8035456:	6876      	ldr	r6, [r6, #4]
 8035458:	e7b9      	b.n	80353ce <_malloc_r+0x46>
 803545a:	230c      	movs	r3, #12
 803545c:	603b      	str	r3, [r7, #0]
 803545e:	4638      	mov	r0, r7
 8035460:	f001 fdf4 	bl	803704c <__malloc_unlock>
 8035464:	e7a1      	b.n	80353aa <_malloc_r+0x22>
 8035466:	6025      	str	r5, [r4, #0]
 8035468:	e7de      	b.n	8035428 <_malloc_r+0xa0>
 803546a:	bf00      	nop
 803546c:	2000ce70 	.word	0x2000ce70

08035470 <__cvt>:
 8035470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035472:	ed2d 8b02 	vpush	{d8}
 8035476:	eeb0 8b40 	vmov.f64	d8, d0
 803547a:	b085      	sub	sp, #20
 803547c:	4617      	mov	r7, r2
 803547e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8035480:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8035482:	ee18 2a90 	vmov	r2, s17
 8035486:	f025 0520 	bic.w	r5, r5, #32
 803548a:	2a00      	cmp	r2, #0
 803548c:	bfb6      	itet	lt
 803548e:	222d      	movlt	r2, #45	; 0x2d
 8035490:	2200      	movge	r2, #0
 8035492:	eeb1 8b40 	vneglt.f64	d8, d0
 8035496:	2d46      	cmp	r5, #70	; 0x46
 8035498:	460c      	mov	r4, r1
 803549a:	701a      	strb	r2, [r3, #0]
 803549c:	d004      	beq.n	80354a8 <__cvt+0x38>
 803549e:	2d45      	cmp	r5, #69	; 0x45
 80354a0:	d100      	bne.n	80354a4 <__cvt+0x34>
 80354a2:	3401      	adds	r4, #1
 80354a4:	2102      	movs	r1, #2
 80354a6:	e000      	b.n	80354aa <__cvt+0x3a>
 80354a8:	2103      	movs	r1, #3
 80354aa:	ab03      	add	r3, sp, #12
 80354ac:	9301      	str	r3, [sp, #4]
 80354ae:	ab02      	add	r3, sp, #8
 80354b0:	9300      	str	r3, [sp, #0]
 80354b2:	4622      	mov	r2, r4
 80354b4:	4633      	mov	r3, r6
 80354b6:	eeb0 0b48 	vmov.f64	d0, d8
 80354ba:	f000 fe29 	bl	8036110 <_dtoa_r>
 80354be:	2d47      	cmp	r5, #71	; 0x47
 80354c0:	d101      	bne.n	80354c6 <__cvt+0x56>
 80354c2:	07fb      	lsls	r3, r7, #31
 80354c4:	d51a      	bpl.n	80354fc <__cvt+0x8c>
 80354c6:	2d46      	cmp	r5, #70	; 0x46
 80354c8:	eb00 0204 	add.w	r2, r0, r4
 80354cc:	d10c      	bne.n	80354e8 <__cvt+0x78>
 80354ce:	7803      	ldrb	r3, [r0, #0]
 80354d0:	2b30      	cmp	r3, #48	; 0x30
 80354d2:	d107      	bne.n	80354e4 <__cvt+0x74>
 80354d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80354d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80354dc:	bf1c      	itt	ne
 80354de:	f1c4 0401 	rsbne	r4, r4, #1
 80354e2:	6034      	strne	r4, [r6, #0]
 80354e4:	6833      	ldr	r3, [r6, #0]
 80354e6:	441a      	add	r2, r3
 80354e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80354ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80354f0:	bf08      	it	eq
 80354f2:	9203      	streq	r2, [sp, #12]
 80354f4:	2130      	movs	r1, #48	; 0x30
 80354f6:	9b03      	ldr	r3, [sp, #12]
 80354f8:	4293      	cmp	r3, r2
 80354fa:	d307      	bcc.n	803550c <__cvt+0x9c>
 80354fc:	9b03      	ldr	r3, [sp, #12]
 80354fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8035500:	1a1b      	subs	r3, r3, r0
 8035502:	6013      	str	r3, [r2, #0]
 8035504:	b005      	add	sp, #20
 8035506:	ecbd 8b02 	vpop	{d8}
 803550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803550c:	1c5c      	adds	r4, r3, #1
 803550e:	9403      	str	r4, [sp, #12]
 8035510:	7019      	strb	r1, [r3, #0]
 8035512:	e7f0      	b.n	80354f6 <__cvt+0x86>

08035514 <__exponent>:
 8035514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8035516:	4603      	mov	r3, r0
 8035518:	2900      	cmp	r1, #0
 803551a:	bfb8      	it	lt
 803551c:	4249      	neglt	r1, r1
 803551e:	f803 2b02 	strb.w	r2, [r3], #2
 8035522:	bfb4      	ite	lt
 8035524:	222d      	movlt	r2, #45	; 0x2d
 8035526:	222b      	movge	r2, #43	; 0x2b
 8035528:	2909      	cmp	r1, #9
 803552a:	7042      	strb	r2, [r0, #1]
 803552c:	dd2a      	ble.n	8035584 <__exponent+0x70>
 803552e:	f10d 0407 	add.w	r4, sp, #7
 8035532:	46a4      	mov	ip, r4
 8035534:	270a      	movs	r7, #10
 8035536:	46a6      	mov	lr, r4
 8035538:	460a      	mov	r2, r1
 803553a:	fb91 f6f7 	sdiv	r6, r1, r7
 803553e:	fb07 1516 	mls	r5, r7, r6, r1
 8035542:	3530      	adds	r5, #48	; 0x30
 8035544:	2a63      	cmp	r2, #99	; 0x63
 8035546:	f104 34ff 	add.w	r4, r4, #4294967295
 803554a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 803554e:	4631      	mov	r1, r6
 8035550:	dcf1      	bgt.n	8035536 <__exponent+0x22>
 8035552:	3130      	adds	r1, #48	; 0x30
 8035554:	f1ae 0502 	sub.w	r5, lr, #2
 8035558:	f804 1c01 	strb.w	r1, [r4, #-1]
 803555c:	1c44      	adds	r4, r0, #1
 803555e:	4629      	mov	r1, r5
 8035560:	4561      	cmp	r1, ip
 8035562:	d30a      	bcc.n	803557a <__exponent+0x66>
 8035564:	f10d 0209 	add.w	r2, sp, #9
 8035568:	eba2 020e 	sub.w	r2, r2, lr
 803556c:	4565      	cmp	r5, ip
 803556e:	bf88      	it	hi
 8035570:	2200      	movhi	r2, #0
 8035572:	4413      	add	r3, r2
 8035574:	1a18      	subs	r0, r3, r0
 8035576:	b003      	add	sp, #12
 8035578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803557a:	f811 2b01 	ldrb.w	r2, [r1], #1
 803557e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8035582:	e7ed      	b.n	8035560 <__exponent+0x4c>
 8035584:	2330      	movs	r3, #48	; 0x30
 8035586:	3130      	adds	r1, #48	; 0x30
 8035588:	7083      	strb	r3, [r0, #2]
 803558a:	70c1      	strb	r1, [r0, #3]
 803558c:	1d03      	adds	r3, r0, #4
 803558e:	e7f1      	b.n	8035574 <__exponent+0x60>

08035590 <_printf_float>:
 8035590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035594:	b08b      	sub	sp, #44	; 0x2c
 8035596:	460c      	mov	r4, r1
 8035598:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 803559c:	4616      	mov	r6, r2
 803559e:	461f      	mov	r7, r3
 80355a0:	4605      	mov	r5, r0
 80355a2:	f001 fce1 	bl	8036f68 <_localeconv_r>
 80355a6:	f8d0 b000 	ldr.w	fp, [r0]
 80355aa:	4658      	mov	r0, fp
 80355ac:	f7da fd48 	bl	8010040 <strlen>
 80355b0:	2300      	movs	r3, #0
 80355b2:	9308      	str	r3, [sp, #32]
 80355b4:	f8d8 3000 	ldr.w	r3, [r8]
 80355b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80355bc:	6822      	ldr	r2, [r4, #0]
 80355be:	3307      	adds	r3, #7
 80355c0:	f023 0307 	bic.w	r3, r3, #7
 80355c4:	f103 0108 	add.w	r1, r3, #8
 80355c8:	f8c8 1000 	str.w	r1, [r8]
 80355cc:	4682      	mov	sl, r0
 80355ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80355d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80355d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8035838 <_printf_float+0x2a8>
 80355da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80355de:	eeb0 6bc0 	vabs.f64	d6, d0
 80355e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80355e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80355ea:	dd24      	ble.n	8035636 <_printf_float+0xa6>
 80355ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80355f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80355f4:	d502      	bpl.n	80355fc <_printf_float+0x6c>
 80355f6:	232d      	movs	r3, #45	; 0x2d
 80355f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80355fc:	4b90      	ldr	r3, [pc, #576]	; (8035840 <_printf_float+0x2b0>)
 80355fe:	4891      	ldr	r0, [pc, #580]	; (8035844 <_printf_float+0x2b4>)
 8035600:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8035604:	bf94      	ite	ls
 8035606:	4698      	movls	r8, r3
 8035608:	4680      	movhi	r8, r0
 803560a:	2303      	movs	r3, #3
 803560c:	6123      	str	r3, [r4, #16]
 803560e:	f022 0204 	bic.w	r2, r2, #4
 8035612:	2300      	movs	r3, #0
 8035614:	6022      	str	r2, [r4, #0]
 8035616:	9304      	str	r3, [sp, #16]
 8035618:	9700      	str	r7, [sp, #0]
 803561a:	4633      	mov	r3, r6
 803561c:	aa09      	add	r2, sp, #36	; 0x24
 803561e:	4621      	mov	r1, r4
 8035620:	4628      	mov	r0, r5
 8035622:	f000 f9d3 	bl	80359cc <_printf_common>
 8035626:	3001      	adds	r0, #1
 8035628:	f040 808a 	bne.w	8035740 <_printf_float+0x1b0>
 803562c:	f04f 30ff 	mov.w	r0, #4294967295
 8035630:	b00b      	add	sp, #44	; 0x2c
 8035632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035636:	eeb4 0b40 	vcmp.f64	d0, d0
 803563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803563e:	d709      	bvc.n	8035654 <_printf_float+0xc4>
 8035640:	ee10 3a90 	vmov	r3, s1
 8035644:	2b00      	cmp	r3, #0
 8035646:	bfbc      	itt	lt
 8035648:	232d      	movlt	r3, #45	; 0x2d
 803564a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 803564e:	487e      	ldr	r0, [pc, #504]	; (8035848 <_printf_float+0x2b8>)
 8035650:	4b7e      	ldr	r3, [pc, #504]	; (803584c <_printf_float+0x2bc>)
 8035652:	e7d5      	b.n	8035600 <_printf_float+0x70>
 8035654:	6863      	ldr	r3, [r4, #4]
 8035656:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 803565a:	9104      	str	r1, [sp, #16]
 803565c:	1c59      	adds	r1, r3, #1
 803565e:	d13c      	bne.n	80356da <_printf_float+0x14a>
 8035660:	2306      	movs	r3, #6
 8035662:	6063      	str	r3, [r4, #4]
 8035664:	2300      	movs	r3, #0
 8035666:	9303      	str	r3, [sp, #12]
 8035668:	ab08      	add	r3, sp, #32
 803566a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 803566e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8035672:	ab07      	add	r3, sp, #28
 8035674:	6861      	ldr	r1, [r4, #4]
 8035676:	9300      	str	r3, [sp, #0]
 8035678:	6022      	str	r2, [r4, #0]
 803567a:	f10d 031b 	add.w	r3, sp, #27
 803567e:	4628      	mov	r0, r5
 8035680:	f7ff fef6 	bl	8035470 <__cvt>
 8035684:	9b04      	ldr	r3, [sp, #16]
 8035686:	9907      	ldr	r1, [sp, #28]
 8035688:	2b47      	cmp	r3, #71	; 0x47
 803568a:	4680      	mov	r8, r0
 803568c:	d108      	bne.n	80356a0 <_printf_float+0x110>
 803568e:	1cc8      	adds	r0, r1, #3
 8035690:	db02      	blt.n	8035698 <_printf_float+0x108>
 8035692:	6863      	ldr	r3, [r4, #4]
 8035694:	4299      	cmp	r1, r3
 8035696:	dd41      	ble.n	803571c <_printf_float+0x18c>
 8035698:	f1a9 0902 	sub.w	r9, r9, #2
 803569c:	fa5f f989 	uxtb.w	r9, r9
 80356a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80356a4:	d820      	bhi.n	80356e8 <_printf_float+0x158>
 80356a6:	3901      	subs	r1, #1
 80356a8:	464a      	mov	r2, r9
 80356aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80356ae:	9107      	str	r1, [sp, #28]
 80356b0:	f7ff ff30 	bl	8035514 <__exponent>
 80356b4:	9a08      	ldr	r2, [sp, #32]
 80356b6:	9004      	str	r0, [sp, #16]
 80356b8:	1813      	adds	r3, r2, r0
 80356ba:	2a01      	cmp	r2, #1
 80356bc:	6123      	str	r3, [r4, #16]
 80356be:	dc02      	bgt.n	80356c6 <_printf_float+0x136>
 80356c0:	6822      	ldr	r2, [r4, #0]
 80356c2:	07d2      	lsls	r2, r2, #31
 80356c4:	d501      	bpl.n	80356ca <_printf_float+0x13a>
 80356c6:	3301      	adds	r3, #1
 80356c8:	6123      	str	r3, [r4, #16]
 80356ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80356ce:	2b00      	cmp	r3, #0
 80356d0:	d0a2      	beq.n	8035618 <_printf_float+0x88>
 80356d2:	232d      	movs	r3, #45	; 0x2d
 80356d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80356d8:	e79e      	b.n	8035618 <_printf_float+0x88>
 80356da:	9904      	ldr	r1, [sp, #16]
 80356dc:	2947      	cmp	r1, #71	; 0x47
 80356de:	d1c1      	bne.n	8035664 <_printf_float+0xd4>
 80356e0:	2b00      	cmp	r3, #0
 80356e2:	d1bf      	bne.n	8035664 <_printf_float+0xd4>
 80356e4:	2301      	movs	r3, #1
 80356e6:	e7bc      	b.n	8035662 <_printf_float+0xd2>
 80356e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80356ec:	d118      	bne.n	8035720 <_printf_float+0x190>
 80356ee:	2900      	cmp	r1, #0
 80356f0:	6863      	ldr	r3, [r4, #4]
 80356f2:	dd0b      	ble.n	803570c <_printf_float+0x17c>
 80356f4:	6121      	str	r1, [r4, #16]
 80356f6:	b913      	cbnz	r3, 80356fe <_printf_float+0x16e>
 80356f8:	6822      	ldr	r2, [r4, #0]
 80356fa:	07d0      	lsls	r0, r2, #31
 80356fc:	d502      	bpl.n	8035704 <_printf_float+0x174>
 80356fe:	3301      	adds	r3, #1
 8035700:	440b      	add	r3, r1
 8035702:	6123      	str	r3, [r4, #16]
 8035704:	2300      	movs	r3, #0
 8035706:	65a1      	str	r1, [r4, #88]	; 0x58
 8035708:	9304      	str	r3, [sp, #16]
 803570a:	e7de      	b.n	80356ca <_printf_float+0x13a>
 803570c:	b913      	cbnz	r3, 8035714 <_printf_float+0x184>
 803570e:	6822      	ldr	r2, [r4, #0]
 8035710:	07d2      	lsls	r2, r2, #31
 8035712:	d501      	bpl.n	8035718 <_printf_float+0x188>
 8035714:	3302      	adds	r3, #2
 8035716:	e7f4      	b.n	8035702 <_printf_float+0x172>
 8035718:	2301      	movs	r3, #1
 803571a:	e7f2      	b.n	8035702 <_printf_float+0x172>
 803571c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8035720:	9b08      	ldr	r3, [sp, #32]
 8035722:	4299      	cmp	r1, r3
 8035724:	db05      	blt.n	8035732 <_printf_float+0x1a2>
 8035726:	6823      	ldr	r3, [r4, #0]
 8035728:	6121      	str	r1, [r4, #16]
 803572a:	07d8      	lsls	r0, r3, #31
 803572c:	d5ea      	bpl.n	8035704 <_printf_float+0x174>
 803572e:	1c4b      	adds	r3, r1, #1
 8035730:	e7e7      	b.n	8035702 <_printf_float+0x172>
 8035732:	2900      	cmp	r1, #0
 8035734:	bfd4      	ite	le
 8035736:	f1c1 0202 	rsble	r2, r1, #2
 803573a:	2201      	movgt	r2, #1
 803573c:	4413      	add	r3, r2
 803573e:	e7e0      	b.n	8035702 <_printf_float+0x172>
 8035740:	6823      	ldr	r3, [r4, #0]
 8035742:	055a      	lsls	r2, r3, #21
 8035744:	d407      	bmi.n	8035756 <_printf_float+0x1c6>
 8035746:	6923      	ldr	r3, [r4, #16]
 8035748:	4642      	mov	r2, r8
 803574a:	4631      	mov	r1, r6
 803574c:	4628      	mov	r0, r5
 803574e:	47b8      	blx	r7
 8035750:	3001      	adds	r0, #1
 8035752:	d12a      	bne.n	80357aa <_printf_float+0x21a>
 8035754:	e76a      	b.n	803562c <_printf_float+0x9c>
 8035756:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 803575a:	f240 80e2 	bls.w	8035922 <_printf_float+0x392>
 803575e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8035762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8035766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803576a:	d133      	bne.n	80357d4 <_printf_float+0x244>
 803576c:	4a38      	ldr	r2, [pc, #224]	; (8035850 <_printf_float+0x2c0>)
 803576e:	2301      	movs	r3, #1
 8035770:	4631      	mov	r1, r6
 8035772:	4628      	mov	r0, r5
 8035774:	47b8      	blx	r7
 8035776:	3001      	adds	r0, #1
 8035778:	f43f af58 	beq.w	803562c <_printf_float+0x9c>
 803577c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8035780:	429a      	cmp	r2, r3
 8035782:	db02      	blt.n	803578a <_printf_float+0x1fa>
 8035784:	6823      	ldr	r3, [r4, #0]
 8035786:	07d8      	lsls	r0, r3, #31
 8035788:	d50f      	bpl.n	80357aa <_printf_float+0x21a>
 803578a:	4653      	mov	r3, sl
 803578c:	465a      	mov	r2, fp
 803578e:	4631      	mov	r1, r6
 8035790:	4628      	mov	r0, r5
 8035792:	47b8      	blx	r7
 8035794:	3001      	adds	r0, #1
 8035796:	f43f af49 	beq.w	803562c <_printf_float+0x9c>
 803579a:	f04f 0800 	mov.w	r8, #0
 803579e:	f104 091a 	add.w	r9, r4, #26
 80357a2:	9b08      	ldr	r3, [sp, #32]
 80357a4:	3b01      	subs	r3, #1
 80357a6:	4543      	cmp	r3, r8
 80357a8:	dc09      	bgt.n	80357be <_printf_float+0x22e>
 80357aa:	6823      	ldr	r3, [r4, #0]
 80357ac:	079b      	lsls	r3, r3, #30
 80357ae:	f100 8108 	bmi.w	80359c2 <_printf_float+0x432>
 80357b2:	68e0      	ldr	r0, [r4, #12]
 80357b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80357b6:	4298      	cmp	r0, r3
 80357b8:	bfb8      	it	lt
 80357ba:	4618      	movlt	r0, r3
 80357bc:	e738      	b.n	8035630 <_printf_float+0xa0>
 80357be:	2301      	movs	r3, #1
 80357c0:	464a      	mov	r2, r9
 80357c2:	4631      	mov	r1, r6
 80357c4:	4628      	mov	r0, r5
 80357c6:	47b8      	blx	r7
 80357c8:	3001      	adds	r0, #1
 80357ca:	f43f af2f 	beq.w	803562c <_printf_float+0x9c>
 80357ce:	f108 0801 	add.w	r8, r8, #1
 80357d2:	e7e6      	b.n	80357a2 <_printf_float+0x212>
 80357d4:	9b07      	ldr	r3, [sp, #28]
 80357d6:	2b00      	cmp	r3, #0
 80357d8:	dc3c      	bgt.n	8035854 <_printf_float+0x2c4>
 80357da:	4a1d      	ldr	r2, [pc, #116]	; (8035850 <_printf_float+0x2c0>)
 80357dc:	2301      	movs	r3, #1
 80357de:	4631      	mov	r1, r6
 80357e0:	4628      	mov	r0, r5
 80357e2:	47b8      	blx	r7
 80357e4:	3001      	adds	r0, #1
 80357e6:	f43f af21 	beq.w	803562c <_printf_float+0x9c>
 80357ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80357ee:	4313      	orrs	r3, r2
 80357f0:	d102      	bne.n	80357f8 <_printf_float+0x268>
 80357f2:	6823      	ldr	r3, [r4, #0]
 80357f4:	07d9      	lsls	r1, r3, #31
 80357f6:	d5d8      	bpl.n	80357aa <_printf_float+0x21a>
 80357f8:	4653      	mov	r3, sl
 80357fa:	465a      	mov	r2, fp
 80357fc:	4631      	mov	r1, r6
 80357fe:	4628      	mov	r0, r5
 8035800:	47b8      	blx	r7
 8035802:	3001      	adds	r0, #1
 8035804:	f43f af12 	beq.w	803562c <_printf_float+0x9c>
 8035808:	f04f 0900 	mov.w	r9, #0
 803580c:	f104 0a1a 	add.w	sl, r4, #26
 8035810:	9b07      	ldr	r3, [sp, #28]
 8035812:	425b      	negs	r3, r3
 8035814:	454b      	cmp	r3, r9
 8035816:	dc01      	bgt.n	803581c <_printf_float+0x28c>
 8035818:	9b08      	ldr	r3, [sp, #32]
 803581a:	e795      	b.n	8035748 <_printf_float+0x1b8>
 803581c:	2301      	movs	r3, #1
 803581e:	4652      	mov	r2, sl
 8035820:	4631      	mov	r1, r6
 8035822:	4628      	mov	r0, r5
 8035824:	47b8      	blx	r7
 8035826:	3001      	adds	r0, #1
 8035828:	f43f af00 	beq.w	803562c <_printf_float+0x9c>
 803582c:	f109 0901 	add.w	r9, r9, #1
 8035830:	e7ee      	b.n	8035810 <_printf_float+0x280>
 8035832:	bf00      	nop
 8035834:	f3af 8000 	nop.w
 8035838:	ffffffff 	.word	0xffffffff
 803583c:	7fefffff 	.word	0x7fefffff
 8035840:	0803c204 	.word	0x0803c204
 8035844:	0803c208 	.word	0x0803c208
 8035848:	0803c210 	.word	0x0803c210
 803584c:	0803c20c 	.word	0x0803c20c
 8035850:	0803c214 	.word	0x0803c214
 8035854:	9a08      	ldr	r2, [sp, #32]
 8035856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8035858:	429a      	cmp	r2, r3
 803585a:	bfa8      	it	ge
 803585c:	461a      	movge	r2, r3
 803585e:	2a00      	cmp	r2, #0
 8035860:	4691      	mov	r9, r2
 8035862:	dc38      	bgt.n	80358d6 <_printf_float+0x346>
 8035864:	2300      	movs	r3, #0
 8035866:	9305      	str	r3, [sp, #20]
 8035868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803586c:	f104 021a 	add.w	r2, r4, #26
 8035870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8035872:	9905      	ldr	r1, [sp, #20]
 8035874:	9304      	str	r3, [sp, #16]
 8035876:	eba3 0309 	sub.w	r3, r3, r9
 803587a:	428b      	cmp	r3, r1
 803587c:	dc33      	bgt.n	80358e6 <_printf_float+0x356>
 803587e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8035882:	429a      	cmp	r2, r3
 8035884:	db3c      	blt.n	8035900 <_printf_float+0x370>
 8035886:	6823      	ldr	r3, [r4, #0]
 8035888:	07da      	lsls	r2, r3, #31
 803588a:	d439      	bmi.n	8035900 <_printf_float+0x370>
 803588c:	9b08      	ldr	r3, [sp, #32]
 803588e:	9a04      	ldr	r2, [sp, #16]
 8035890:	9907      	ldr	r1, [sp, #28]
 8035892:	1a9a      	subs	r2, r3, r2
 8035894:	eba3 0901 	sub.w	r9, r3, r1
 8035898:	4591      	cmp	r9, r2
 803589a:	bfa8      	it	ge
 803589c:	4691      	movge	r9, r2
 803589e:	f1b9 0f00 	cmp.w	r9, #0
 80358a2:	dc35      	bgt.n	8035910 <_printf_float+0x380>
 80358a4:	f04f 0800 	mov.w	r8, #0
 80358a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80358ac:	f104 0a1a 	add.w	sl, r4, #26
 80358b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80358b4:	1a9b      	subs	r3, r3, r2
 80358b6:	eba3 0309 	sub.w	r3, r3, r9
 80358ba:	4543      	cmp	r3, r8
 80358bc:	f77f af75 	ble.w	80357aa <_printf_float+0x21a>
 80358c0:	2301      	movs	r3, #1
 80358c2:	4652      	mov	r2, sl
 80358c4:	4631      	mov	r1, r6
 80358c6:	4628      	mov	r0, r5
 80358c8:	47b8      	blx	r7
 80358ca:	3001      	adds	r0, #1
 80358cc:	f43f aeae 	beq.w	803562c <_printf_float+0x9c>
 80358d0:	f108 0801 	add.w	r8, r8, #1
 80358d4:	e7ec      	b.n	80358b0 <_printf_float+0x320>
 80358d6:	4613      	mov	r3, r2
 80358d8:	4631      	mov	r1, r6
 80358da:	4642      	mov	r2, r8
 80358dc:	4628      	mov	r0, r5
 80358de:	47b8      	blx	r7
 80358e0:	3001      	adds	r0, #1
 80358e2:	d1bf      	bne.n	8035864 <_printf_float+0x2d4>
 80358e4:	e6a2      	b.n	803562c <_printf_float+0x9c>
 80358e6:	2301      	movs	r3, #1
 80358e8:	4631      	mov	r1, r6
 80358ea:	4628      	mov	r0, r5
 80358ec:	9204      	str	r2, [sp, #16]
 80358ee:	47b8      	blx	r7
 80358f0:	3001      	adds	r0, #1
 80358f2:	f43f ae9b 	beq.w	803562c <_printf_float+0x9c>
 80358f6:	9b05      	ldr	r3, [sp, #20]
 80358f8:	9a04      	ldr	r2, [sp, #16]
 80358fa:	3301      	adds	r3, #1
 80358fc:	9305      	str	r3, [sp, #20]
 80358fe:	e7b7      	b.n	8035870 <_printf_float+0x2e0>
 8035900:	4653      	mov	r3, sl
 8035902:	465a      	mov	r2, fp
 8035904:	4631      	mov	r1, r6
 8035906:	4628      	mov	r0, r5
 8035908:	47b8      	blx	r7
 803590a:	3001      	adds	r0, #1
 803590c:	d1be      	bne.n	803588c <_printf_float+0x2fc>
 803590e:	e68d      	b.n	803562c <_printf_float+0x9c>
 8035910:	9a04      	ldr	r2, [sp, #16]
 8035912:	464b      	mov	r3, r9
 8035914:	4442      	add	r2, r8
 8035916:	4631      	mov	r1, r6
 8035918:	4628      	mov	r0, r5
 803591a:	47b8      	blx	r7
 803591c:	3001      	adds	r0, #1
 803591e:	d1c1      	bne.n	80358a4 <_printf_float+0x314>
 8035920:	e684      	b.n	803562c <_printf_float+0x9c>
 8035922:	9a08      	ldr	r2, [sp, #32]
 8035924:	2a01      	cmp	r2, #1
 8035926:	dc01      	bgt.n	803592c <_printf_float+0x39c>
 8035928:	07db      	lsls	r3, r3, #31
 803592a:	d537      	bpl.n	803599c <_printf_float+0x40c>
 803592c:	2301      	movs	r3, #1
 803592e:	4642      	mov	r2, r8
 8035930:	4631      	mov	r1, r6
 8035932:	4628      	mov	r0, r5
 8035934:	47b8      	blx	r7
 8035936:	3001      	adds	r0, #1
 8035938:	f43f ae78 	beq.w	803562c <_printf_float+0x9c>
 803593c:	4653      	mov	r3, sl
 803593e:	465a      	mov	r2, fp
 8035940:	4631      	mov	r1, r6
 8035942:	4628      	mov	r0, r5
 8035944:	47b8      	blx	r7
 8035946:	3001      	adds	r0, #1
 8035948:	f43f ae70 	beq.w	803562c <_printf_float+0x9c>
 803594c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8035950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8035954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035958:	d01b      	beq.n	8035992 <_printf_float+0x402>
 803595a:	9b08      	ldr	r3, [sp, #32]
 803595c:	f108 0201 	add.w	r2, r8, #1
 8035960:	3b01      	subs	r3, #1
 8035962:	4631      	mov	r1, r6
 8035964:	4628      	mov	r0, r5
 8035966:	47b8      	blx	r7
 8035968:	3001      	adds	r0, #1
 803596a:	d10e      	bne.n	803598a <_printf_float+0x3fa>
 803596c:	e65e      	b.n	803562c <_printf_float+0x9c>
 803596e:	2301      	movs	r3, #1
 8035970:	464a      	mov	r2, r9
 8035972:	4631      	mov	r1, r6
 8035974:	4628      	mov	r0, r5
 8035976:	47b8      	blx	r7
 8035978:	3001      	adds	r0, #1
 803597a:	f43f ae57 	beq.w	803562c <_printf_float+0x9c>
 803597e:	f108 0801 	add.w	r8, r8, #1
 8035982:	9b08      	ldr	r3, [sp, #32]
 8035984:	3b01      	subs	r3, #1
 8035986:	4543      	cmp	r3, r8
 8035988:	dcf1      	bgt.n	803596e <_printf_float+0x3de>
 803598a:	9b04      	ldr	r3, [sp, #16]
 803598c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8035990:	e6db      	b.n	803574a <_printf_float+0x1ba>
 8035992:	f04f 0800 	mov.w	r8, #0
 8035996:	f104 091a 	add.w	r9, r4, #26
 803599a:	e7f2      	b.n	8035982 <_printf_float+0x3f2>
 803599c:	2301      	movs	r3, #1
 803599e:	4642      	mov	r2, r8
 80359a0:	e7df      	b.n	8035962 <_printf_float+0x3d2>
 80359a2:	2301      	movs	r3, #1
 80359a4:	464a      	mov	r2, r9
 80359a6:	4631      	mov	r1, r6
 80359a8:	4628      	mov	r0, r5
 80359aa:	47b8      	blx	r7
 80359ac:	3001      	adds	r0, #1
 80359ae:	f43f ae3d 	beq.w	803562c <_printf_float+0x9c>
 80359b2:	f108 0801 	add.w	r8, r8, #1
 80359b6:	68e3      	ldr	r3, [r4, #12]
 80359b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80359ba:	1a5b      	subs	r3, r3, r1
 80359bc:	4543      	cmp	r3, r8
 80359be:	dcf0      	bgt.n	80359a2 <_printf_float+0x412>
 80359c0:	e6f7      	b.n	80357b2 <_printf_float+0x222>
 80359c2:	f04f 0800 	mov.w	r8, #0
 80359c6:	f104 0919 	add.w	r9, r4, #25
 80359ca:	e7f4      	b.n	80359b6 <_printf_float+0x426>

080359cc <_printf_common>:
 80359cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80359d0:	4616      	mov	r6, r2
 80359d2:	4699      	mov	r9, r3
 80359d4:	688a      	ldr	r2, [r1, #8]
 80359d6:	690b      	ldr	r3, [r1, #16]
 80359d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80359dc:	4293      	cmp	r3, r2
 80359de:	bfb8      	it	lt
 80359e0:	4613      	movlt	r3, r2
 80359e2:	6033      	str	r3, [r6, #0]
 80359e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80359e8:	4607      	mov	r7, r0
 80359ea:	460c      	mov	r4, r1
 80359ec:	b10a      	cbz	r2, 80359f2 <_printf_common+0x26>
 80359ee:	3301      	adds	r3, #1
 80359f0:	6033      	str	r3, [r6, #0]
 80359f2:	6823      	ldr	r3, [r4, #0]
 80359f4:	0699      	lsls	r1, r3, #26
 80359f6:	bf42      	ittt	mi
 80359f8:	6833      	ldrmi	r3, [r6, #0]
 80359fa:	3302      	addmi	r3, #2
 80359fc:	6033      	strmi	r3, [r6, #0]
 80359fe:	6825      	ldr	r5, [r4, #0]
 8035a00:	f015 0506 	ands.w	r5, r5, #6
 8035a04:	d106      	bne.n	8035a14 <_printf_common+0x48>
 8035a06:	f104 0a19 	add.w	sl, r4, #25
 8035a0a:	68e3      	ldr	r3, [r4, #12]
 8035a0c:	6832      	ldr	r2, [r6, #0]
 8035a0e:	1a9b      	subs	r3, r3, r2
 8035a10:	42ab      	cmp	r3, r5
 8035a12:	dc26      	bgt.n	8035a62 <_printf_common+0x96>
 8035a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8035a18:	1e13      	subs	r3, r2, #0
 8035a1a:	6822      	ldr	r2, [r4, #0]
 8035a1c:	bf18      	it	ne
 8035a1e:	2301      	movne	r3, #1
 8035a20:	0692      	lsls	r2, r2, #26
 8035a22:	d42b      	bmi.n	8035a7c <_printf_common+0xb0>
 8035a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8035a28:	4649      	mov	r1, r9
 8035a2a:	4638      	mov	r0, r7
 8035a2c:	47c0      	blx	r8
 8035a2e:	3001      	adds	r0, #1
 8035a30:	d01e      	beq.n	8035a70 <_printf_common+0xa4>
 8035a32:	6823      	ldr	r3, [r4, #0]
 8035a34:	68e5      	ldr	r5, [r4, #12]
 8035a36:	6832      	ldr	r2, [r6, #0]
 8035a38:	f003 0306 	and.w	r3, r3, #6
 8035a3c:	2b04      	cmp	r3, #4
 8035a3e:	bf08      	it	eq
 8035a40:	1aad      	subeq	r5, r5, r2
 8035a42:	68a3      	ldr	r3, [r4, #8]
 8035a44:	6922      	ldr	r2, [r4, #16]
 8035a46:	bf0c      	ite	eq
 8035a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8035a4c:	2500      	movne	r5, #0
 8035a4e:	4293      	cmp	r3, r2
 8035a50:	bfc4      	itt	gt
 8035a52:	1a9b      	subgt	r3, r3, r2
 8035a54:	18ed      	addgt	r5, r5, r3
 8035a56:	2600      	movs	r6, #0
 8035a58:	341a      	adds	r4, #26
 8035a5a:	42b5      	cmp	r5, r6
 8035a5c:	d11a      	bne.n	8035a94 <_printf_common+0xc8>
 8035a5e:	2000      	movs	r0, #0
 8035a60:	e008      	b.n	8035a74 <_printf_common+0xa8>
 8035a62:	2301      	movs	r3, #1
 8035a64:	4652      	mov	r2, sl
 8035a66:	4649      	mov	r1, r9
 8035a68:	4638      	mov	r0, r7
 8035a6a:	47c0      	blx	r8
 8035a6c:	3001      	adds	r0, #1
 8035a6e:	d103      	bne.n	8035a78 <_printf_common+0xac>
 8035a70:	f04f 30ff 	mov.w	r0, #4294967295
 8035a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035a78:	3501      	adds	r5, #1
 8035a7a:	e7c6      	b.n	8035a0a <_printf_common+0x3e>
 8035a7c:	18e1      	adds	r1, r4, r3
 8035a7e:	1c5a      	adds	r2, r3, #1
 8035a80:	2030      	movs	r0, #48	; 0x30
 8035a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8035a86:	4422      	add	r2, r4
 8035a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8035a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8035a90:	3302      	adds	r3, #2
 8035a92:	e7c7      	b.n	8035a24 <_printf_common+0x58>
 8035a94:	2301      	movs	r3, #1
 8035a96:	4622      	mov	r2, r4
 8035a98:	4649      	mov	r1, r9
 8035a9a:	4638      	mov	r0, r7
 8035a9c:	47c0      	blx	r8
 8035a9e:	3001      	adds	r0, #1
 8035aa0:	d0e6      	beq.n	8035a70 <_printf_common+0xa4>
 8035aa2:	3601      	adds	r6, #1
 8035aa4:	e7d9      	b.n	8035a5a <_printf_common+0x8e>
	...

08035aa8 <_printf_i>:
 8035aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8035aac:	7e0f      	ldrb	r7, [r1, #24]
 8035aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8035ab0:	2f78      	cmp	r7, #120	; 0x78
 8035ab2:	4691      	mov	r9, r2
 8035ab4:	4680      	mov	r8, r0
 8035ab6:	460c      	mov	r4, r1
 8035ab8:	469a      	mov	sl, r3
 8035aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8035abe:	d807      	bhi.n	8035ad0 <_printf_i+0x28>
 8035ac0:	2f62      	cmp	r7, #98	; 0x62
 8035ac2:	d80a      	bhi.n	8035ada <_printf_i+0x32>
 8035ac4:	2f00      	cmp	r7, #0
 8035ac6:	f000 80d8 	beq.w	8035c7a <_printf_i+0x1d2>
 8035aca:	2f58      	cmp	r7, #88	; 0x58
 8035acc:	f000 80a3 	beq.w	8035c16 <_printf_i+0x16e>
 8035ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8035ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8035ad8:	e03a      	b.n	8035b50 <_printf_i+0xa8>
 8035ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8035ade:	2b15      	cmp	r3, #21
 8035ae0:	d8f6      	bhi.n	8035ad0 <_printf_i+0x28>
 8035ae2:	a101      	add	r1, pc, #4	; (adr r1, 8035ae8 <_printf_i+0x40>)
 8035ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8035ae8:	08035b41 	.word	0x08035b41
 8035aec:	08035b55 	.word	0x08035b55
 8035af0:	08035ad1 	.word	0x08035ad1
 8035af4:	08035ad1 	.word	0x08035ad1
 8035af8:	08035ad1 	.word	0x08035ad1
 8035afc:	08035ad1 	.word	0x08035ad1
 8035b00:	08035b55 	.word	0x08035b55
 8035b04:	08035ad1 	.word	0x08035ad1
 8035b08:	08035ad1 	.word	0x08035ad1
 8035b0c:	08035ad1 	.word	0x08035ad1
 8035b10:	08035ad1 	.word	0x08035ad1
 8035b14:	08035c61 	.word	0x08035c61
 8035b18:	08035b85 	.word	0x08035b85
 8035b1c:	08035c43 	.word	0x08035c43
 8035b20:	08035ad1 	.word	0x08035ad1
 8035b24:	08035ad1 	.word	0x08035ad1
 8035b28:	08035c83 	.word	0x08035c83
 8035b2c:	08035ad1 	.word	0x08035ad1
 8035b30:	08035b85 	.word	0x08035b85
 8035b34:	08035ad1 	.word	0x08035ad1
 8035b38:	08035ad1 	.word	0x08035ad1
 8035b3c:	08035c4b 	.word	0x08035c4b
 8035b40:	682b      	ldr	r3, [r5, #0]
 8035b42:	1d1a      	adds	r2, r3, #4
 8035b44:	681b      	ldr	r3, [r3, #0]
 8035b46:	602a      	str	r2, [r5, #0]
 8035b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8035b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8035b50:	2301      	movs	r3, #1
 8035b52:	e0a3      	b.n	8035c9c <_printf_i+0x1f4>
 8035b54:	6820      	ldr	r0, [r4, #0]
 8035b56:	6829      	ldr	r1, [r5, #0]
 8035b58:	0606      	lsls	r6, r0, #24
 8035b5a:	f101 0304 	add.w	r3, r1, #4
 8035b5e:	d50a      	bpl.n	8035b76 <_printf_i+0xce>
 8035b60:	680e      	ldr	r6, [r1, #0]
 8035b62:	602b      	str	r3, [r5, #0]
 8035b64:	2e00      	cmp	r6, #0
 8035b66:	da03      	bge.n	8035b70 <_printf_i+0xc8>
 8035b68:	232d      	movs	r3, #45	; 0x2d
 8035b6a:	4276      	negs	r6, r6
 8035b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8035b70:	485e      	ldr	r0, [pc, #376]	; (8035cec <_printf_i+0x244>)
 8035b72:	230a      	movs	r3, #10
 8035b74:	e019      	b.n	8035baa <_printf_i+0x102>
 8035b76:	680e      	ldr	r6, [r1, #0]
 8035b78:	602b      	str	r3, [r5, #0]
 8035b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8035b7e:	bf18      	it	ne
 8035b80:	b236      	sxthne	r6, r6
 8035b82:	e7ef      	b.n	8035b64 <_printf_i+0xbc>
 8035b84:	682b      	ldr	r3, [r5, #0]
 8035b86:	6820      	ldr	r0, [r4, #0]
 8035b88:	1d19      	adds	r1, r3, #4
 8035b8a:	6029      	str	r1, [r5, #0]
 8035b8c:	0601      	lsls	r1, r0, #24
 8035b8e:	d501      	bpl.n	8035b94 <_printf_i+0xec>
 8035b90:	681e      	ldr	r6, [r3, #0]
 8035b92:	e002      	b.n	8035b9a <_printf_i+0xf2>
 8035b94:	0646      	lsls	r6, r0, #25
 8035b96:	d5fb      	bpl.n	8035b90 <_printf_i+0xe8>
 8035b98:	881e      	ldrh	r6, [r3, #0]
 8035b9a:	4854      	ldr	r0, [pc, #336]	; (8035cec <_printf_i+0x244>)
 8035b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8035b9e:	bf0c      	ite	eq
 8035ba0:	2308      	moveq	r3, #8
 8035ba2:	230a      	movne	r3, #10
 8035ba4:	2100      	movs	r1, #0
 8035ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8035baa:	6865      	ldr	r5, [r4, #4]
 8035bac:	60a5      	str	r5, [r4, #8]
 8035bae:	2d00      	cmp	r5, #0
 8035bb0:	bfa2      	ittt	ge
 8035bb2:	6821      	ldrge	r1, [r4, #0]
 8035bb4:	f021 0104 	bicge.w	r1, r1, #4
 8035bb8:	6021      	strge	r1, [r4, #0]
 8035bba:	b90e      	cbnz	r6, 8035bc0 <_printf_i+0x118>
 8035bbc:	2d00      	cmp	r5, #0
 8035bbe:	d04d      	beq.n	8035c5c <_printf_i+0x1b4>
 8035bc0:	4615      	mov	r5, r2
 8035bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8035bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8035bca:	5dc7      	ldrb	r7, [r0, r7]
 8035bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8035bd0:	4637      	mov	r7, r6
 8035bd2:	42bb      	cmp	r3, r7
 8035bd4:	460e      	mov	r6, r1
 8035bd6:	d9f4      	bls.n	8035bc2 <_printf_i+0x11a>
 8035bd8:	2b08      	cmp	r3, #8
 8035bda:	d10b      	bne.n	8035bf4 <_printf_i+0x14c>
 8035bdc:	6823      	ldr	r3, [r4, #0]
 8035bde:	07de      	lsls	r6, r3, #31
 8035be0:	d508      	bpl.n	8035bf4 <_printf_i+0x14c>
 8035be2:	6923      	ldr	r3, [r4, #16]
 8035be4:	6861      	ldr	r1, [r4, #4]
 8035be6:	4299      	cmp	r1, r3
 8035be8:	bfde      	ittt	le
 8035bea:	2330      	movle	r3, #48	; 0x30
 8035bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8035bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8035bf4:	1b52      	subs	r2, r2, r5
 8035bf6:	6122      	str	r2, [r4, #16]
 8035bf8:	f8cd a000 	str.w	sl, [sp]
 8035bfc:	464b      	mov	r3, r9
 8035bfe:	aa03      	add	r2, sp, #12
 8035c00:	4621      	mov	r1, r4
 8035c02:	4640      	mov	r0, r8
 8035c04:	f7ff fee2 	bl	80359cc <_printf_common>
 8035c08:	3001      	adds	r0, #1
 8035c0a:	d14c      	bne.n	8035ca6 <_printf_i+0x1fe>
 8035c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8035c10:	b004      	add	sp, #16
 8035c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035c16:	4835      	ldr	r0, [pc, #212]	; (8035cec <_printf_i+0x244>)
 8035c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8035c1c:	6829      	ldr	r1, [r5, #0]
 8035c1e:	6823      	ldr	r3, [r4, #0]
 8035c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8035c24:	6029      	str	r1, [r5, #0]
 8035c26:	061d      	lsls	r5, r3, #24
 8035c28:	d514      	bpl.n	8035c54 <_printf_i+0x1ac>
 8035c2a:	07df      	lsls	r7, r3, #31
 8035c2c:	bf44      	itt	mi
 8035c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8035c32:	6023      	strmi	r3, [r4, #0]
 8035c34:	b91e      	cbnz	r6, 8035c3e <_printf_i+0x196>
 8035c36:	6823      	ldr	r3, [r4, #0]
 8035c38:	f023 0320 	bic.w	r3, r3, #32
 8035c3c:	6023      	str	r3, [r4, #0]
 8035c3e:	2310      	movs	r3, #16
 8035c40:	e7b0      	b.n	8035ba4 <_printf_i+0xfc>
 8035c42:	6823      	ldr	r3, [r4, #0]
 8035c44:	f043 0320 	orr.w	r3, r3, #32
 8035c48:	6023      	str	r3, [r4, #0]
 8035c4a:	2378      	movs	r3, #120	; 0x78
 8035c4c:	4828      	ldr	r0, [pc, #160]	; (8035cf0 <_printf_i+0x248>)
 8035c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8035c52:	e7e3      	b.n	8035c1c <_printf_i+0x174>
 8035c54:	0659      	lsls	r1, r3, #25
 8035c56:	bf48      	it	mi
 8035c58:	b2b6      	uxthmi	r6, r6
 8035c5a:	e7e6      	b.n	8035c2a <_printf_i+0x182>
 8035c5c:	4615      	mov	r5, r2
 8035c5e:	e7bb      	b.n	8035bd8 <_printf_i+0x130>
 8035c60:	682b      	ldr	r3, [r5, #0]
 8035c62:	6826      	ldr	r6, [r4, #0]
 8035c64:	6961      	ldr	r1, [r4, #20]
 8035c66:	1d18      	adds	r0, r3, #4
 8035c68:	6028      	str	r0, [r5, #0]
 8035c6a:	0635      	lsls	r5, r6, #24
 8035c6c:	681b      	ldr	r3, [r3, #0]
 8035c6e:	d501      	bpl.n	8035c74 <_printf_i+0x1cc>
 8035c70:	6019      	str	r1, [r3, #0]
 8035c72:	e002      	b.n	8035c7a <_printf_i+0x1d2>
 8035c74:	0670      	lsls	r0, r6, #25
 8035c76:	d5fb      	bpl.n	8035c70 <_printf_i+0x1c8>
 8035c78:	8019      	strh	r1, [r3, #0]
 8035c7a:	2300      	movs	r3, #0
 8035c7c:	6123      	str	r3, [r4, #16]
 8035c7e:	4615      	mov	r5, r2
 8035c80:	e7ba      	b.n	8035bf8 <_printf_i+0x150>
 8035c82:	682b      	ldr	r3, [r5, #0]
 8035c84:	1d1a      	adds	r2, r3, #4
 8035c86:	602a      	str	r2, [r5, #0]
 8035c88:	681d      	ldr	r5, [r3, #0]
 8035c8a:	6862      	ldr	r2, [r4, #4]
 8035c8c:	2100      	movs	r1, #0
 8035c8e:	4628      	mov	r0, r5
 8035c90:	f7da f9de 	bl	8010050 <memchr>
 8035c94:	b108      	cbz	r0, 8035c9a <_printf_i+0x1f2>
 8035c96:	1b40      	subs	r0, r0, r5
 8035c98:	6060      	str	r0, [r4, #4]
 8035c9a:	6863      	ldr	r3, [r4, #4]
 8035c9c:	6123      	str	r3, [r4, #16]
 8035c9e:	2300      	movs	r3, #0
 8035ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8035ca4:	e7a8      	b.n	8035bf8 <_printf_i+0x150>
 8035ca6:	6923      	ldr	r3, [r4, #16]
 8035ca8:	462a      	mov	r2, r5
 8035caa:	4649      	mov	r1, r9
 8035cac:	4640      	mov	r0, r8
 8035cae:	47d0      	blx	sl
 8035cb0:	3001      	adds	r0, #1
 8035cb2:	d0ab      	beq.n	8035c0c <_printf_i+0x164>
 8035cb4:	6823      	ldr	r3, [r4, #0]
 8035cb6:	079b      	lsls	r3, r3, #30
 8035cb8:	d413      	bmi.n	8035ce2 <_printf_i+0x23a>
 8035cba:	68e0      	ldr	r0, [r4, #12]
 8035cbc:	9b03      	ldr	r3, [sp, #12]
 8035cbe:	4298      	cmp	r0, r3
 8035cc0:	bfb8      	it	lt
 8035cc2:	4618      	movlt	r0, r3
 8035cc4:	e7a4      	b.n	8035c10 <_printf_i+0x168>
 8035cc6:	2301      	movs	r3, #1
 8035cc8:	4632      	mov	r2, r6
 8035cca:	4649      	mov	r1, r9
 8035ccc:	4640      	mov	r0, r8
 8035cce:	47d0      	blx	sl
 8035cd0:	3001      	adds	r0, #1
 8035cd2:	d09b      	beq.n	8035c0c <_printf_i+0x164>
 8035cd4:	3501      	adds	r5, #1
 8035cd6:	68e3      	ldr	r3, [r4, #12]
 8035cd8:	9903      	ldr	r1, [sp, #12]
 8035cda:	1a5b      	subs	r3, r3, r1
 8035cdc:	42ab      	cmp	r3, r5
 8035cde:	dcf2      	bgt.n	8035cc6 <_printf_i+0x21e>
 8035ce0:	e7eb      	b.n	8035cba <_printf_i+0x212>
 8035ce2:	2500      	movs	r5, #0
 8035ce4:	f104 0619 	add.w	r6, r4, #25
 8035ce8:	e7f5      	b.n	8035cd6 <_printf_i+0x22e>
 8035cea:	bf00      	nop
 8035cec:	0803c216 	.word	0x0803c216
 8035cf0:	0803c227 	.word	0x0803c227

08035cf4 <iprintf>:
 8035cf4:	b40f      	push	{r0, r1, r2, r3}
 8035cf6:	4b0a      	ldr	r3, [pc, #40]	; (8035d20 <iprintf+0x2c>)
 8035cf8:	b513      	push	{r0, r1, r4, lr}
 8035cfa:	681c      	ldr	r4, [r3, #0]
 8035cfc:	b124      	cbz	r4, 8035d08 <iprintf+0x14>
 8035cfe:	69a3      	ldr	r3, [r4, #24]
 8035d00:	b913      	cbnz	r3, 8035d08 <iprintf+0x14>
 8035d02:	4620      	mov	r0, r4
 8035d04:	f001 f892 	bl	8036e2c <__sinit>
 8035d08:	ab05      	add	r3, sp, #20
 8035d0a:	9a04      	ldr	r2, [sp, #16]
 8035d0c:	68a1      	ldr	r1, [r4, #8]
 8035d0e:	9301      	str	r3, [sp, #4]
 8035d10:	4620      	mov	r0, r4
 8035d12:	f001 fd65 	bl	80377e0 <_vfiprintf_r>
 8035d16:	b002      	add	sp, #8
 8035d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035d1c:	b004      	add	sp, #16
 8035d1e:	4770      	bx	lr
 8035d20:	20002a0c 	.word	0x20002a0c

08035d24 <_puts_r>:
 8035d24:	b570      	push	{r4, r5, r6, lr}
 8035d26:	460e      	mov	r6, r1
 8035d28:	4605      	mov	r5, r0
 8035d2a:	b118      	cbz	r0, 8035d34 <_puts_r+0x10>
 8035d2c:	6983      	ldr	r3, [r0, #24]
 8035d2e:	b90b      	cbnz	r3, 8035d34 <_puts_r+0x10>
 8035d30:	f001 f87c 	bl	8036e2c <__sinit>
 8035d34:	69ab      	ldr	r3, [r5, #24]
 8035d36:	68ac      	ldr	r4, [r5, #8]
 8035d38:	b913      	cbnz	r3, 8035d40 <_puts_r+0x1c>
 8035d3a:	4628      	mov	r0, r5
 8035d3c:	f001 f876 	bl	8036e2c <__sinit>
 8035d40:	4b2c      	ldr	r3, [pc, #176]	; (8035df4 <_puts_r+0xd0>)
 8035d42:	429c      	cmp	r4, r3
 8035d44:	d120      	bne.n	8035d88 <_puts_r+0x64>
 8035d46:	686c      	ldr	r4, [r5, #4]
 8035d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8035d4a:	07db      	lsls	r3, r3, #31
 8035d4c:	d405      	bmi.n	8035d5a <_puts_r+0x36>
 8035d4e:	89a3      	ldrh	r3, [r4, #12]
 8035d50:	0598      	lsls	r0, r3, #22
 8035d52:	d402      	bmi.n	8035d5a <_puts_r+0x36>
 8035d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8035d56:	f001 f90c 	bl	8036f72 <__retarget_lock_acquire_recursive>
 8035d5a:	89a3      	ldrh	r3, [r4, #12]
 8035d5c:	0719      	lsls	r1, r3, #28
 8035d5e:	d51d      	bpl.n	8035d9c <_puts_r+0x78>
 8035d60:	6923      	ldr	r3, [r4, #16]
 8035d62:	b1db      	cbz	r3, 8035d9c <_puts_r+0x78>
 8035d64:	3e01      	subs	r6, #1
 8035d66:	68a3      	ldr	r3, [r4, #8]
 8035d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8035d6c:	3b01      	subs	r3, #1
 8035d6e:	60a3      	str	r3, [r4, #8]
 8035d70:	bb39      	cbnz	r1, 8035dc2 <_puts_r+0x9e>
 8035d72:	2b00      	cmp	r3, #0
 8035d74:	da38      	bge.n	8035de8 <_puts_r+0xc4>
 8035d76:	4622      	mov	r2, r4
 8035d78:	210a      	movs	r1, #10
 8035d7a:	4628      	mov	r0, r5
 8035d7c:	f000 f87a 	bl	8035e74 <__swbuf_r>
 8035d80:	3001      	adds	r0, #1
 8035d82:	d011      	beq.n	8035da8 <_puts_r+0x84>
 8035d84:	250a      	movs	r5, #10
 8035d86:	e011      	b.n	8035dac <_puts_r+0x88>
 8035d88:	4b1b      	ldr	r3, [pc, #108]	; (8035df8 <_puts_r+0xd4>)
 8035d8a:	429c      	cmp	r4, r3
 8035d8c:	d101      	bne.n	8035d92 <_puts_r+0x6e>
 8035d8e:	68ac      	ldr	r4, [r5, #8]
 8035d90:	e7da      	b.n	8035d48 <_puts_r+0x24>
 8035d92:	4b1a      	ldr	r3, [pc, #104]	; (8035dfc <_puts_r+0xd8>)
 8035d94:	429c      	cmp	r4, r3
 8035d96:	bf08      	it	eq
 8035d98:	68ec      	ldreq	r4, [r5, #12]
 8035d9a:	e7d5      	b.n	8035d48 <_puts_r+0x24>
 8035d9c:	4621      	mov	r1, r4
 8035d9e:	4628      	mov	r0, r5
 8035da0:	f000 f8ba 	bl	8035f18 <__swsetup_r>
 8035da4:	2800      	cmp	r0, #0
 8035da6:	d0dd      	beq.n	8035d64 <_puts_r+0x40>
 8035da8:	f04f 35ff 	mov.w	r5, #4294967295
 8035dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8035dae:	07da      	lsls	r2, r3, #31
 8035db0:	d405      	bmi.n	8035dbe <_puts_r+0x9a>
 8035db2:	89a3      	ldrh	r3, [r4, #12]
 8035db4:	059b      	lsls	r3, r3, #22
 8035db6:	d402      	bmi.n	8035dbe <_puts_r+0x9a>
 8035db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8035dba:	f001 f8db 	bl	8036f74 <__retarget_lock_release_recursive>
 8035dbe:	4628      	mov	r0, r5
 8035dc0:	bd70      	pop	{r4, r5, r6, pc}
 8035dc2:	2b00      	cmp	r3, #0
 8035dc4:	da04      	bge.n	8035dd0 <_puts_r+0xac>
 8035dc6:	69a2      	ldr	r2, [r4, #24]
 8035dc8:	429a      	cmp	r2, r3
 8035dca:	dc06      	bgt.n	8035dda <_puts_r+0xb6>
 8035dcc:	290a      	cmp	r1, #10
 8035dce:	d004      	beq.n	8035dda <_puts_r+0xb6>
 8035dd0:	6823      	ldr	r3, [r4, #0]
 8035dd2:	1c5a      	adds	r2, r3, #1
 8035dd4:	6022      	str	r2, [r4, #0]
 8035dd6:	7019      	strb	r1, [r3, #0]
 8035dd8:	e7c5      	b.n	8035d66 <_puts_r+0x42>
 8035dda:	4622      	mov	r2, r4
 8035ddc:	4628      	mov	r0, r5
 8035dde:	f000 f849 	bl	8035e74 <__swbuf_r>
 8035de2:	3001      	adds	r0, #1
 8035de4:	d1bf      	bne.n	8035d66 <_puts_r+0x42>
 8035de6:	e7df      	b.n	8035da8 <_puts_r+0x84>
 8035de8:	6823      	ldr	r3, [r4, #0]
 8035dea:	250a      	movs	r5, #10
 8035dec:	1c5a      	adds	r2, r3, #1
 8035dee:	6022      	str	r2, [r4, #0]
 8035df0:	701d      	strb	r5, [r3, #0]
 8035df2:	e7db      	b.n	8035dac <_puts_r+0x88>
 8035df4:	0803c2e8 	.word	0x0803c2e8
 8035df8:	0803c308 	.word	0x0803c308
 8035dfc:	0803c2c8 	.word	0x0803c2c8

08035e00 <puts>:
 8035e00:	4b02      	ldr	r3, [pc, #8]	; (8035e0c <puts+0xc>)
 8035e02:	4601      	mov	r1, r0
 8035e04:	6818      	ldr	r0, [r3, #0]
 8035e06:	f7ff bf8d 	b.w	8035d24 <_puts_r>
 8035e0a:	bf00      	nop
 8035e0c:	20002a0c 	.word	0x20002a0c

08035e10 <_sbrk_r>:
 8035e10:	b538      	push	{r3, r4, r5, lr}
 8035e12:	4d06      	ldr	r5, [pc, #24]	; (8035e2c <_sbrk_r+0x1c>)
 8035e14:	2300      	movs	r3, #0
 8035e16:	4604      	mov	r4, r0
 8035e18:	4608      	mov	r0, r1
 8035e1a:	602b      	str	r3, [r5, #0]
 8035e1c:	f002 f856 	bl	8037ecc <_sbrk>
 8035e20:	1c43      	adds	r3, r0, #1
 8035e22:	d102      	bne.n	8035e2a <_sbrk_r+0x1a>
 8035e24:	682b      	ldr	r3, [r5, #0]
 8035e26:	b103      	cbz	r3, 8035e2a <_sbrk_r+0x1a>
 8035e28:	6023      	str	r3, [r4, #0]
 8035e2a:	bd38      	pop	{r3, r4, r5, pc}
 8035e2c:	2000ce7c 	.word	0x2000ce7c

08035e30 <strncasecmp>:
 8035e30:	b570      	push	{r4, r5, r6, lr}
 8035e32:	4e0f      	ldr	r6, [pc, #60]	; (8035e70 <strncasecmp+0x40>)
 8035e34:	4604      	mov	r4, r0
 8035e36:	440a      	add	r2, r1
 8035e38:	428a      	cmp	r2, r1
 8035e3a:	d101      	bne.n	8035e40 <strncasecmp+0x10>
 8035e3c:	2000      	movs	r0, #0
 8035e3e:	e013      	b.n	8035e68 <strncasecmp+0x38>
 8035e40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8035e44:	5d98      	ldrb	r0, [r3, r6]
 8035e46:	f000 0003 	and.w	r0, r0, #3
 8035e4a:	2801      	cmp	r0, #1
 8035e4c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8035e50:	5c35      	ldrb	r5, [r6, r0]
 8035e52:	f005 0503 	and.w	r5, r5, #3
 8035e56:	bf08      	it	eq
 8035e58:	3320      	addeq	r3, #32
 8035e5a:	2d01      	cmp	r5, #1
 8035e5c:	bf08      	it	eq
 8035e5e:	3020      	addeq	r0, #32
 8035e60:	1a1b      	subs	r3, r3, r0
 8035e62:	d102      	bne.n	8035e6a <strncasecmp+0x3a>
 8035e64:	2800      	cmp	r0, #0
 8035e66:	d1e7      	bne.n	8035e38 <strncasecmp+0x8>
 8035e68:	bd70      	pop	{r4, r5, r6, pc}
 8035e6a:	4618      	mov	r0, r3
 8035e6c:	e7fc      	b.n	8035e68 <strncasecmp+0x38>
 8035e6e:	bf00      	nop
 8035e70:	0803c0fd 	.word	0x0803c0fd

08035e74 <__swbuf_r>:
 8035e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035e76:	460e      	mov	r6, r1
 8035e78:	4614      	mov	r4, r2
 8035e7a:	4605      	mov	r5, r0
 8035e7c:	b118      	cbz	r0, 8035e86 <__swbuf_r+0x12>
 8035e7e:	6983      	ldr	r3, [r0, #24]
 8035e80:	b90b      	cbnz	r3, 8035e86 <__swbuf_r+0x12>
 8035e82:	f000 ffd3 	bl	8036e2c <__sinit>
 8035e86:	4b21      	ldr	r3, [pc, #132]	; (8035f0c <__swbuf_r+0x98>)
 8035e88:	429c      	cmp	r4, r3
 8035e8a:	d12b      	bne.n	8035ee4 <__swbuf_r+0x70>
 8035e8c:	686c      	ldr	r4, [r5, #4]
 8035e8e:	69a3      	ldr	r3, [r4, #24]
 8035e90:	60a3      	str	r3, [r4, #8]
 8035e92:	89a3      	ldrh	r3, [r4, #12]
 8035e94:	071a      	lsls	r2, r3, #28
 8035e96:	d52f      	bpl.n	8035ef8 <__swbuf_r+0x84>
 8035e98:	6923      	ldr	r3, [r4, #16]
 8035e9a:	b36b      	cbz	r3, 8035ef8 <__swbuf_r+0x84>
 8035e9c:	6923      	ldr	r3, [r4, #16]
 8035e9e:	6820      	ldr	r0, [r4, #0]
 8035ea0:	1ac0      	subs	r0, r0, r3
 8035ea2:	6963      	ldr	r3, [r4, #20]
 8035ea4:	b2f6      	uxtb	r6, r6
 8035ea6:	4283      	cmp	r3, r0
 8035ea8:	4637      	mov	r7, r6
 8035eaa:	dc04      	bgt.n	8035eb6 <__swbuf_r+0x42>
 8035eac:	4621      	mov	r1, r4
 8035eae:	4628      	mov	r0, r5
 8035eb0:	f000 ff28 	bl	8036d04 <_fflush_r>
 8035eb4:	bb30      	cbnz	r0, 8035f04 <__swbuf_r+0x90>
 8035eb6:	68a3      	ldr	r3, [r4, #8]
 8035eb8:	3b01      	subs	r3, #1
 8035eba:	60a3      	str	r3, [r4, #8]
 8035ebc:	6823      	ldr	r3, [r4, #0]
 8035ebe:	1c5a      	adds	r2, r3, #1
 8035ec0:	6022      	str	r2, [r4, #0]
 8035ec2:	701e      	strb	r6, [r3, #0]
 8035ec4:	6963      	ldr	r3, [r4, #20]
 8035ec6:	3001      	adds	r0, #1
 8035ec8:	4283      	cmp	r3, r0
 8035eca:	d004      	beq.n	8035ed6 <__swbuf_r+0x62>
 8035ecc:	89a3      	ldrh	r3, [r4, #12]
 8035ece:	07db      	lsls	r3, r3, #31
 8035ed0:	d506      	bpl.n	8035ee0 <__swbuf_r+0x6c>
 8035ed2:	2e0a      	cmp	r6, #10
 8035ed4:	d104      	bne.n	8035ee0 <__swbuf_r+0x6c>
 8035ed6:	4621      	mov	r1, r4
 8035ed8:	4628      	mov	r0, r5
 8035eda:	f000 ff13 	bl	8036d04 <_fflush_r>
 8035ede:	b988      	cbnz	r0, 8035f04 <__swbuf_r+0x90>
 8035ee0:	4638      	mov	r0, r7
 8035ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035ee4:	4b0a      	ldr	r3, [pc, #40]	; (8035f10 <__swbuf_r+0x9c>)
 8035ee6:	429c      	cmp	r4, r3
 8035ee8:	d101      	bne.n	8035eee <__swbuf_r+0x7a>
 8035eea:	68ac      	ldr	r4, [r5, #8]
 8035eec:	e7cf      	b.n	8035e8e <__swbuf_r+0x1a>
 8035eee:	4b09      	ldr	r3, [pc, #36]	; (8035f14 <__swbuf_r+0xa0>)
 8035ef0:	429c      	cmp	r4, r3
 8035ef2:	bf08      	it	eq
 8035ef4:	68ec      	ldreq	r4, [r5, #12]
 8035ef6:	e7ca      	b.n	8035e8e <__swbuf_r+0x1a>
 8035ef8:	4621      	mov	r1, r4
 8035efa:	4628      	mov	r0, r5
 8035efc:	f000 f80c 	bl	8035f18 <__swsetup_r>
 8035f00:	2800      	cmp	r0, #0
 8035f02:	d0cb      	beq.n	8035e9c <__swbuf_r+0x28>
 8035f04:	f04f 37ff 	mov.w	r7, #4294967295
 8035f08:	e7ea      	b.n	8035ee0 <__swbuf_r+0x6c>
 8035f0a:	bf00      	nop
 8035f0c:	0803c2e8 	.word	0x0803c2e8
 8035f10:	0803c308 	.word	0x0803c308
 8035f14:	0803c2c8 	.word	0x0803c2c8

08035f18 <__swsetup_r>:
 8035f18:	4b32      	ldr	r3, [pc, #200]	; (8035fe4 <__swsetup_r+0xcc>)
 8035f1a:	b570      	push	{r4, r5, r6, lr}
 8035f1c:	681d      	ldr	r5, [r3, #0]
 8035f1e:	4606      	mov	r6, r0
 8035f20:	460c      	mov	r4, r1
 8035f22:	b125      	cbz	r5, 8035f2e <__swsetup_r+0x16>
 8035f24:	69ab      	ldr	r3, [r5, #24]
 8035f26:	b913      	cbnz	r3, 8035f2e <__swsetup_r+0x16>
 8035f28:	4628      	mov	r0, r5
 8035f2a:	f000 ff7f 	bl	8036e2c <__sinit>
 8035f2e:	4b2e      	ldr	r3, [pc, #184]	; (8035fe8 <__swsetup_r+0xd0>)
 8035f30:	429c      	cmp	r4, r3
 8035f32:	d10f      	bne.n	8035f54 <__swsetup_r+0x3c>
 8035f34:	686c      	ldr	r4, [r5, #4]
 8035f36:	89a3      	ldrh	r3, [r4, #12]
 8035f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8035f3c:	0719      	lsls	r1, r3, #28
 8035f3e:	d42c      	bmi.n	8035f9a <__swsetup_r+0x82>
 8035f40:	06dd      	lsls	r5, r3, #27
 8035f42:	d411      	bmi.n	8035f68 <__swsetup_r+0x50>
 8035f44:	2309      	movs	r3, #9
 8035f46:	6033      	str	r3, [r6, #0]
 8035f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8035f4c:	81a3      	strh	r3, [r4, #12]
 8035f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8035f52:	e03e      	b.n	8035fd2 <__swsetup_r+0xba>
 8035f54:	4b25      	ldr	r3, [pc, #148]	; (8035fec <__swsetup_r+0xd4>)
 8035f56:	429c      	cmp	r4, r3
 8035f58:	d101      	bne.n	8035f5e <__swsetup_r+0x46>
 8035f5a:	68ac      	ldr	r4, [r5, #8]
 8035f5c:	e7eb      	b.n	8035f36 <__swsetup_r+0x1e>
 8035f5e:	4b24      	ldr	r3, [pc, #144]	; (8035ff0 <__swsetup_r+0xd8>)
 8035f60:	429c      	cmp	r4, r3
 8035f62:	bf08      	it	eq
 8035f64:	68ec      	ldreq	r4, [r5, #12]
 8035f66:	e7e6      	b.n	8035f36 <__swsetup_r+0x1e>
 8035f68:	0758      	lsls	r0, r3, #29
 8035f6a:	d512      	bpl.n	8035f92 <__swsetup_r+0x7a>
 8035f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8035f6e:	b141      	cbz	r1, 8035f82 <__swsetup_r+0x6a>
 8035f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8035f74:	4299      	cmp	r1, r3
 8035f76:	d002      	beq.n	8035f7e <__swsetup_r+0x66>
 8035f78:	4630      	mov	r0, r6
 8035f7a:	f7ff f999 	bl	80352b0 <_free_r>
 8035f7e:	2300      	movs	r3, #0
 8035f80:	6363      	str	r3, [r4, #52]	; 0x34
 8035f82:	89a3      	ldrh	r3, [r4, #12]
 8035f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8035f88:	81a3      	strh	r3, [r4, #12]
 8035f8a:	2300      	movs	r3, #0
 8035f8c:	6063      	str	r3, [r4, #4]
 8035f8e:	6923      	ldr	r3, [r4, #16]
 8035f90:	6023      	str	r3, [r4, #0]
 8035f92:	89a3      	ldrh	r3, [r4, #12]
 8035f94:	f043 0308 	orr.w	r3, r3, #8
 8035f98:	81a3      	strh	r3, [r4, #12]
 8035f9a:	6923      	ldr	r3, [r4, #16]
 8035f9c:	b94b      	cbnz	r3, 8035fb2 <__swsetup_r+0x9a>
 8035f9e:	89a3      	ldrh	r3, [r4, #12]
 8035fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8035fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035fa8:	d003      	beq.n	8035fb2 <__swsetup_r+0x9a>
 8035faa:	4621      	mov	r1, r4
 8035fac:	4630      	mov	r0, r6
 8035fae:	f001 f807 	bl	8036fc0 <__smakebuf_r>
 8035fb2:	89a0      	ldrh	r0, [r4, #12]
 8035fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8035fb8:	f010 0301 	ands.w	r3, r0, #1
 8035fbc:	d00a      	beq.n	8035fd4 <__swsetup_r+0xbc>
 8035fbe:	2300      	movs	r3, #0
 8035fc0:	60a3      	str	r3, [r4, #8]
 8035fc2:	6963      	ldr	r3, [r4, #20]
 8035fc4:	425b      	negs	r3, r3
 8035fc6:	61a3      	str	r3, [r4, #24]
 8035fc8:	6923      	ldr	r3, [r4, #16]
 8035fca:	b943      	cbnz	r3, 8035fde <__swsetup_r+0xc6>
 8035fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8035fd0:	d1ba      	bne.n	8035f48 <__swsetup_r+0x30>
 8035fd2:	bd70      	pop	{r4, r5, r6, pc}
 8035fd4:	0781      	lsls	r1, r0, #30
 8035fd6:	bf58      	it	pl
 8035fd8:	6963      	ldrpl	r3, [r4, #20]
 8035fda:	60a3      	str	r3, [r4, #8]
 8035fdc:	e7f4      	b.n	8035fc8 <__swsetup_r+0xb0>
 8035fde:	2000      	movs	r0, #0
 8035fe0:	e7f7      	b.n	8035fd2 <__swsetup_r+0xba>
 8035fe2:	bf00      	nop
 8035fe4:	20002a0c 	.word	0x20002a0c
 8035fe8:	0803c2e8 	.word	0x0803c2e8
 8035fec:	0803c308 	.word	0x0803c308
 8035ff0:	0803c2c8 	.word	0x0803c2c8

08035ff4 <quorem>:
 8035ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035ff8:	6903      	ldr	r3, [r0, #16]
 8035ffa:	690c      	ldr	r4, [r1, #16]
 8035ffc:	42a3      	cmp	r3, r4
 8035ffe:	4607      	mov	r7, r0
 8036000:	f2c0 8081 	blt.w	8036106 <quorem+0x112>
 8036004:	3c01      	subs	r4, #1
 8036006:	f101 0814 	add.w	r8, r1, #20
 803600a:	f100 0514 	add.w	r5, r0, #20
 803600e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8036012:	9301      	str	r3, [sp, #4]
 8036014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8036018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803601c:	3301      	adds	r3, #1
 803601e:	429a      	cmp	r2, r3
 8036020:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8036024:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8036028:	fbb2 f6f3 	udiv	r6, r2, r3
 803602c:	d331      	bcc.n	8036092 <quorem+0x9e>
 803602e:	f04f 0e00 	mov.w	lr, #0
 8036032:	4640      	mov	r0, r8
 8036034:	46ac      	mov	ip, r5
 8036036:	46f2      	mov	sl, lr
 8036038:	f850 2b04 	ldr.w	r2, [r0], #4
 803603c:	b293      	uxth	r3, r2
 803603e:	fb06 e303 	mla	r3, r6, r3, lr
 8036042:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8036046:	b29b      	uxth	r3, r3
 8036048:	ebaa 0303 	sub.w	r3, sl, r3
 803604c:	f8dc a000 	ldr.w	sl, [ip]
 8036050:	0c12      	lsrs	r2, r2, #16
 8036052:	fa13 f38a 	uxtah	r3, r3, sl
 8036056:	fb06 e202 	mla	r2, r6, r2, lr
 803605a:	9300      	str	r3, [sp, #0]
 803605c:	9b00      	ldr	r3, [sp, #0]
 803605e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8036062:	b292      	uxth	r2, r2
 8036064:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8036068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803606c:	f8bd 3000 	ldrh.w	r3, [sp]
 8036070:	4581      	cmp	r9, r0
 8036072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8036076:	f84c 3b04 	str.w	r3, [ip], #4
 803607a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 803607e:	d2db      	bcs.n	8036038 <quorem+0x44>
 8036080:	f855 300b 	ldr.w	r3, [r5, fp]
 8036084:	b92b      	cbnz	r3, 8036092 <quorem+0x9e>
 8036086:	9b01      	ldr	r3, [sp, #4]
 8036088:	3b04      	subs	r3, #4
 803608a:	429d      	cmp	r5, r3
 803608c:	461a      	mov	r2, r3
 803608e:	d32e      	bcc.n	80360ee <quorem+0xfa>
 8036090:	613c      	str	r4, [r7, #16]
 8036092:	4638      	mov	r0, r7
 8036094:	f001 fa62 	bl	803755c <__mcmp>
 8036098:	2800      	cmp	r0, #0
 803609a:	db24      	blt.n	80360e6 <quorem+0xf2>
 803609c:	3601      	adds	r6, #1
 803609e:	4628      	mov	r0, r5
 80360a0:	f04f 0c00 	mov.w	ip, #0
 80360a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80360a8:	f8d0 e000 	ldr.w	lr, [r0]
 80360ac:	b293      	uxth	r3, r2
 80360ae:	ebac 0303 	sub.w	r3, ip, r3
 80360b2:	0c12      	lsrs	r2, r2, #16
 80360b4:	fa13 f38e 	uxtah	r3, r3, lr
 80360b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80360bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80360c0:	b29b      	uxth	r3, r3
 80360c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80360c6:	45c1      	cmp	r9, r8
 80360c8:	f840 3b04 	str.w	r3, [r0], #4
 80360cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80360d0:	d2e8      	bcs.n	80360a4 <quorem+0xb0>
 80360d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80360d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80360da:	b922      	cbnz	r2, 80360e6 <quorem+0xf2>
 80360dc:	3b04      	subs	r3, #4
 80360de:	429d      	cmp	r5, r3
 80360e0:	461a      	mov	r2, r3
 80360e2:	d30a      	bcc.n	80360fa <quorem+0x106>
 80360e4:	613c      	str	r4, [r7, #16]
 80360e6:	4630      	mov	r0, r6
 80360e8:	b003      	add	sp, #12
 80360ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80360ee:	6812      	ldr	r2, [r2, #0]
 80360f0:	3b04      	subs	r3, #4
 80360f2:	2a00      	cmp	r2, #0
 80360f4:	d1cc      	bne.n	8036090 <quorem+0x9c>
 80360f6:	3c01      	subs	r4, #1
 80360f8:	e7c7      	b.n	803608a <quorem+0x96>
 80360fa:	6812      	ldr	r2, [r2, #0]
 80360fc:	3b04      	subs	r3, #4
 80360fe:	2a00      	cmp	r2, #0
 8036100:	d1f0      	bne.n	80360e4 <quorem+0xf0>
 8036102:	3c01      	subs	r4, #1
 8036104:	e7eb      	b.n	80360de <quorem+0xea>
 8036106:	2000      	movs	r0, #0
 8036108:	e7ee      	b.n	80360e8 <quorem+0xf4>
 803610a:	0000      	movs	r0, r0
 803610c:	0000      	movs	r0, r0
	...

08036110 <_dtoa_r>:
 8036110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036114:	ed2d 8b02 	vpush	{d8}
 8036118:	6a45      	ldr	r5, [r0, #36]	; 0x24
 803611a:	b091      	sub	sp, #68	; 0x44
 803611c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8036120:	ec59 8b10 	vmov	r8, r9, d0
 8036124:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8036126:	9106      	str	r1, [sp, #24]
 8036128:	4606      	mov	r6, r0
 803612a:	9208      	str	r2, [sp, #32]
 803612c:	930c      	str	r3, [sp, #48]	; 0x30
 803612e:	b975      	cbnz	r5, 803614e <_dtoa_r+0x3e>
 8036130:	2010      	movs	r0, #16
 8036132:	f7ff f86d 	bl	8035210 <malloc>
 8036136:	4602      	mov	r2, r0
 8036138:	6270      	str	r0, [r6, #36]	; 0x24
 803613a:	b920      	cbnz	r0, 8036146 <_dtoa_r+0x36>
 803613c:	4baa      	ldr	r3, [pc, #680]	; (80363e8 <_dtoa_r+0x2d8>)
 803613e:	21ea      	movs	r1, #234	; 0xea
 8036140:	48aa      	ldr	r0, [pc, #680]	; (80363ec <_dtoa_r+0x2dc>)
 8036142:	f001 fcd3 	bl	8037aec <__assert_func>
 8036146:	e9c0 5501 	strd	r5, r5, [r0, #4]
 803614a:	6005      	str	r5, [r0, #0]
 803614c:	60c5      	str	r5, [r0, #12]
 803614e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8036150:	6819      	ldr	r1, [r3, #0]
 8036152:	b151      	cbz	r1, 803616a <_dtoa_r+0x5a>
 8036154:	685a      	ldr	r2, [r3, #4]
 8036156:	604a      	str	r2, [r1, #4]
 8036158:	2301      	movs	r3, #1
 803615a:	4093      	lsls	r3, r2
 803615c:	608b      	str	r3, [r1, #8]
 803615e:	4630      	mov	r0, r6
 8036160:	f000 ffba 	bl	80370d8 <_Bfree>
 8036164:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8036166:	2200      	movs	r2, #0
 8036168:	601a      	str	r2, [r3, #0]
 803616a:	f1b9 0300 	subs.w	r3, r9, #0
 803616e:	bfbb      	ittet	lt
 8036170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8036174:	9303      	strlt	r3, [sp, #12]
 8036176:	2300      	movge	r3, #0
 8036178:	2201      	movlt	r2, #1
 803617a:	bfac      	ite	ge
 803617c:	6023      	strge	r3, [r4, #0]
 803617e:	6022      	strlt	r2, [r4, #0]
 8036180:	4b9b      	ldr	r3, [pc, #620]	; (80363f0 <_dtoa_r+0x2e0>)
 8036182:	9c03      	ldr	r4, [sp, #12]
 8036184:	43a3      	bics	r3, r4
 8036186:	d11c      	bne.n	80361c2 <_dtoa_r+0xb2>
 8036188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 803618a:	f242 730f 	movw	r3, #9999	; 0x270f
 803618e:	6013      	str	r3, [r2, #0]
 8036190:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8036194:	ea53 0308 	orrs.w	r3, r3, r8
 8036198:	f000 84fd 	beq.w	8036b96 <_dtoa_r+0xa86>
 803619c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803619e:	b963      	cbnz	r3, 80361ba <_dtoa_r+0xaa>
 80361a0:	4b94      	ldr	r3, [pc, #592]	; (80363f4 <_dtoa_r+0x2e4>)
 80361a2:	e01f      	b.n	80361e4 <_dtoa_r+0xd4>
 80361a4:	4b94      	ldr	r3, [pc, #592]	; (80363f8 <_dtoa_r+0x2e8>)
 80361a6:	9301      	str	r3, [sp, #4]
 80361a8:	3308      	adds	r3, #8
 80361aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80361ac:	6013      	str	r3, [r2, #0]
 80361ae:	9801      	ldr	r0, [sp, #4]
 80361b0:	b011      	add	sp, #68	; 0x44
 80361b2:	ecbd 8b02 	vpop	{d8}
 80361b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80361ba:	4b8e      	ldr	r3, [pc, #568]	; (80363f4 <_dtoa_r+0x2e4>)
 80361bc:	9301      	str	r3, [sp, #4]
 80361be:	3303      	adds	r3, #3
 80361c0:	e7f3      	b.n	80361aa <_dtoa_r+0x9a>
 80361c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80361c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80361ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80361ce:	d10b      	bne.n	80361e8 <_dtoa_r+0xd8>
 80361d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80361d2:	2301      	movs	r3, #1
 80361d4:	6013      	str	r3, [r2, #0]
 80361d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80361d8:	2b00      	cmp	r3, #0
 80361da:	f000 84d9 	beq.w	8036b90 <_dtoa_r+0xa80>
 80361de:	4887      	ldr	r0, [pc, #540]	; (80363fc <_dtoa_r+0x2ec>)
 80361e0:	6018      	str	r0, [r3, #0]
 80361e2:	1e43      	subs	r3, r0, #1
 80361e4:	9301      	str	r3, [sp, #4]
 80361e6:	e7e2      	b.n	80361ae <_dtoa_r+0x9e>
 80361e8:	a90f      	add	r1, sp, #60	; 0x3c
 80361ea:	aa0e      	add	r2, sp, #56	; 0x38
 80361ec:	4630      	mov	r0, r6
 80361ee:	eeb0 0b48 	vmov.f64	d0, d8
 80361f2:	f001 fa59 	bl	80376a8 <__d2b>
 80361f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80361fa:	4605      	mov	r5, r0
 80361fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80361fe:	2900      	cmp	r1, #0
 8036200:	d046      	beq.n	8036290 <_dtoa_r+0x180>
 8036202:	ee18 4a90 	vmov	r4, s17
 8036206:	f3c4 0413 	ubfx	r4, r4, #0, #20
 803620a:	ec53 2b18 	vmov	r2, r3, d8
 803620e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8036212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8036216:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 803621a:	2400      	movs	r4, #0
 803621c:	ec43 2b16 	vmov	d6, r2, r3
 8036220:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8036224:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80363d0 <_dtoa_r+0x2c0>
 8036228:	ee36 7b47 	vsub.f64	d7, d6, d7
 803622c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80363d8 <_dtoa_r+0x2c8>
 8036230:	eea7 6b05 	vfma.f64	d6, d7, d5
 8036234:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80363e0 <_dtoa_r+0x2d0>
 8036238:	ee07 1a90 	vmov	s15, r1
 803623c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8036240:	eeb0 7b46 	vmov.f64	d7, d6
 8036244:	eea4 7b05 	vfma.f64	d7, d4, d5
 8036248:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 803624c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8036250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036254:	ee16 ba90 	vmov	fp, s13
 8036258:	940a      	str	r4, [sp, #40]	; 0x28
 803625a:	d508      	bpl.n	803626e <_dtoa_r+0x15e>
 803625c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8036260:	eeb4 6b47 	vcmp.f64	d6, d7
 8036264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036268:	bf18      	it	ne
 803626a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 803626e:	f1bb 0f16 	cmp.w	fp, #22
 8036272:	d82f      	bhi.n	80362d4 <_dtoa_r+0x1c4>
 8036274:	4b62      	ldr	r3, [pc, #392]	; (8036400 <_dtoa_r+0x2f0>)
 8036276:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 803627a:	ed93 7b00 	vldr	d7, [r3]
 803627e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8036282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036286:	d501      	bpl.n	803628c <_dtoa_r+0x17c>
 8036288:	f10b 3bff 	add.w	fp, fp, #4294967295
 803628c:	2300      	movs	r3, #0
 803628e:	e022      	b.n	80362d6 <_dtoa_r+0x1c6>
 8036290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8036292:	4401      	add	r1, r0
 8036294:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8036298:	2b20      	cmp	r3, #32
 803629a:	bfc1      	itttt	gt
 803629c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80362a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80362a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80362a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80362ac:	bfd6      	itet	le
 80362ae:	f1c3 0320 	rsble	r3, r3, #32
 80362b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80362b6:	fa08 f803 	lslle.w	r8, r8, r3
 80362ba:	ee07 8a90 	vmov	s15, r8
 80362be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80362c2:	3901      	subs	r1, #1
 80362c4:	ee17 4a90 	vmov	r4, s15
 80362c8:	ec53 2b17 	vmov	r2, r3, d7
 80362cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80362d0:	2401      	movs	r4, #1
 80362d2:	e7a3      	b.n	803621c <_dtoa_r+0x10c>
 80362d4:	2301      	movs	r3, #1
 80362d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80362d8:	1a43      	subs	r3, r0, r1
 80362da:	1e5a      	subs	r2, r3, #1
 80362dc:	bf45      	ittet	mi
 80362de:	f1c3 0301 	rsbmi	r3, r3, #1
 80362e2:	9304      	strmi	r3, [sp, #16]
 80362e4:	2300      	movpl	r3, #0
 80362e6:	2300      	movmi	r3, #0
 80362e8:	9205      	str	r2, [sp, #20]
 80362ea:	bf54      	ite	pl
 80362ec:	9304      	strpl	r3, [sp, #16]
 80362ee:	9305      	strmi	r3, [sp, #20]
 80362f0:	f1bb 0f00 	cmp.w	fp, #0
 80362f4:	db18      	blt.n	8036328 <_dtoa_r+0x218>
 80362f6:	9b05      	ldr	r3, [sp, #20]
 80362f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80362fc:	445b      	add	r3, fp
 80362fe:	9305      	str	r3, [sp, #20]
 8036300:	2300      	movs	r3, #0
 8036302:	9a06      	ldr	r2, [sp, #24]
 8036304:	2a09      	cmp	r2, #9
 8036306:	d849      	bhi.n	803639c <_dtoa_r+0x28c>
 8036308:	2a05      	cmp	r2, #5
 803630a:	bfc4      	itt	gt
 803630c:	3a04      	subgt	r2, #4
 803630e:	9206      	strgt	r2, [sp, #24]
 8036310:	9a06      	ldr	r2, [sp, #24]
 8036312:	f1a2 0202 	sub.w	r2, r2, #2
 8036316:	bfcc      	ite	gt
 8036318:	2400      	movgt	r4, #0
 803631a:	2401      	movle	r4, #1
 803631c:	2a03      	cmp	r2, #3
 803631e:	d848      	bhi.n	80363b2 <_dtoa_r+0x2a2>
 8036320:	e8df f002 	tbb	[pc, r2]
 8036324:	3a2c2e0b 	.word	0x3a2c2e0b
 8036328:	9b04      	ldr	r3, [sp, #16]
 803632a:	2200      	movs	r2, #0
 803632c:	eba3 030b 	sub.w	r3, r3, fp
 8036330:	9304      	str	r3, [sp, #16]
 8036332:	9209      	str	r2, [sp, #36]	; 0x24
 8036334:	f1cb 0300 	rsb	r3, fp, #0
 8036338:	e7e3      	b.n	8036302 <_dtoa_r+0x1f2>
 803633a:	2200      	movs	r2, #0
 803633c:	9207      	str	r2, [sp, #28]
 803633e:	9a08      	ldr	r2, [sp, #32]
 8036340:	2a00      	cmp	r2, #0
 8036342:	dc39      	bgt.n	80363b8 <_dtoa_r+0x2a8>
 8036344:	f04f 0a01 	mov.w	sl, #1
 8036348:	46d1      	mov	r9, sl
 803634a:	4652      	mov	r2, sl
 803634c:	f8cd a020 	str.w	sl, [sp, #32]
 8036350:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8036352:	2100      	movs	r1, #0
 8036354:	6079      	str	r1, [r7, #4]
 8036356:	2004      	movs	r0, #4
 8036358:	f100 0c14 	add.w	ip, r0, #20
 803635c:	4594      	cmp	ip, r2
 803635e:	6879      	ldr	r1, [r7, #4]
 8036360:	d92f      	bls.n	80363c2 <_dtoa_r+0x2b2>
 8036362:	4630      	mov	r0, r6
 8036364:	930d      	str	r3, [sp, #52]	; 0x34
 8036366:	f000 fe77 	bl	8037058 <_Balloc>
 803636a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803636c:	9001      	str	r0, [sp, #4]
 803636e:	4602      	mov	r2, r0
 8036370:	2800      	cmp	r0, #0
 8036372:	d149      	bne.n	8036408 <_dtoa_r+0x2f8>
 8036374:	4b23      	ldr	r3, [pc, #140]	; (8036404 <_dtoa_r+0x2f4>)
 8036376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 803637a:	e6e1      	b.n	8036140 <_dtoa_r+0x30>
 803637c:	2201      	movs	r2, #1
 803637e:	e7dd      	b.n	803633c <_dtoa_r+0x22c>
 8036380:	2200      	movs	r2, #0
 8036382:	9207      	str	r2, [sp, #28]
 8036384:	9a08      	ldr	r2, [sp, #32]
 8036386:	eb0b 0a02 	add.w	sl, fp, r2
 803638a:	f10a 0901 	add.w	r9, sl, #1
 803638e:	464a      	mov	r2, r9
 8036390:	2a01      	cmp	r2, #1
 8036392:	bfb8      	it	lt
 8036394:	2201      	movlt	r2, #1
 8036396:	e7db      	b.n	8036350 <_dtoa_r+0x240>
 8036398:	2201      	movs	r2, #1
 803639a:	e7f2      	b.n	8036382 <_dtoa_r+0x272>
 803639c:	2401      	movs	r4, #1
 803639e:	2200      	movs	r2, #0
 80363a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80363a4:	f04f 3aff 	mov.w	sl, #4294967295
 80363a8:	2100      	movs	r1, #0
 80363aa:	46d1      	mov	r9, sl
 80363ac:	2212      	movs	r2, #18
 80363ae:	9108      	str	r1, [sp, #32]
 80363b0:	e7ce      	b.n	8036350 <_dtoa_r+0x240>
 80363b2:	2201      	movs	r2, #1
 80363b4:	9207      	str	r2, [sp, #28]
 80363b6:	e7f5      	b.n	80363a4 <_dtoa_r+0x294>
 80363b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80363bc:	46d1      	mov	r9, sl
 80363be:	4652      	mov	r2, sl
 80363c0:	e7c6      	b.n	8036350 <_dtoa_r+0x240>
 80363c2:	3101      	adds	r1, #1
 80363c4:	6079      	str	r1, [r7, #4]
 80363c6:	0040      	lsls	r0, r0, #1
 80363c8:	e7c6      	b.n	8036358 <_dtoa_r+0x248>
 80363ca:	bf00      	nop
 80363cc:	f3af 8000 	nop.w
 80363d0:	636f4361 	.word	0x636f4361
 80363d4:	3fd287a7 	.word	0x3fd287a7
 80363d8:	8b60c8b3 	.word	0x8b60c8b3
 80363dc:	3fc68a28 	.word	0x3fc68a28
 80363e0:	509f79fb 	.word	0x509f79fb
 80363e4:	3fd34413 	.word	0x3fd34413
 80363e8:	0803c245 	.word	0x0803c245
 80363ec:	0803c25c 	.word	0x0803c25c
 80363f0:	7ff00000 	.word	0x7ff00000
 80363f4:	0803c241 	.word	0x0803c241
 80363f8:	0803c238 	.word	0x0803c238
 80363fc:	0803c215 	.word	0x0803c215
 8036400:	0803c3b0 	.word	0x0803c3b0
 8036404:	0803c2b7 	.word	0x0803c2b7
 8036408:	6a72      	ldr	r2, [r6, #36]	; 0x24
 803640a:	9901      	ldr	r1, [sp, #4]
 803640c:	6011      	str	r1, [r2, #0]
 803640e:	f1b9 0f0e 	cmp.w	r9, #14
 8036412:	d86c      	bhi.n	80364ee <_dtoa_r+0x3de>
 8036414:	2c00      	cmp	r4, #0
 8036416:	d06a      	beq.n	80364ee <_dtoa_r+0x3de>
 8036418:	f1bb 0f00 	cmp.w	fp, #0
 803641c:	f340 80a0 	ble.w	8036560 <_dtoa_r+0x450>
 8036420:	49c1      	ldr	r1, [pc, #772]	; (8036728 <_dtoa_r+0x618>)
 8036422:	f00b 020f 	and.w	r2, fp, #15
 8036426:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 803642a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 803642e:	ed92 7b00 	vldr	d7, [r2]
 8036432:	ea4f 112b 	mov.w	r1, fp, asr #4
 8036436:	f000 8087 	beq.w	8036548 <_dtoa_r+0x438>
 803643a:	4abc      	ldr	r2, [pc, #752]	; (803672c <_dtoa_r+0x61c>)
 803643c:	ed92 6b08 	vldr	d6, [r2, #32]
 8036440:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8036444:	ed8d 6b02 	vstr	d6, [sp, #8]
 8036448:	f001 010f 	and.w	r1, r1, #15
 803644c:	2203      	movs	r2, #3
 803644e:	48b7      	ldr	r0, [pc, #732]	; (803672c <_dtoa_r+0x61c>)
 8036450:	2900      	cmp	r1, #0
 8036452:	d17b      	bne.n	803654c <_dtoa_r+0x43c>
 8036454:	ed9d 6b02 	vldr	d6, [sp, #8]
 8036458:	ee86 7b07 	vdiv.f64	d7, d6, d7
 803645c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8036460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8036462:	2900      	cmp	r1, #0
 8036464:	f000 80a2 	beq.w	80365ac <_dtoa_r+0x49c>
 8036468:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 803646c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8036470:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8036474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036478:	f140 8098 	bpl.w	80365ac <_dtoa_r+0x49c>
 803647c:	f1b9 0f00 	cmp.w	r9, #0
 8036480:	f000 8094 	beq.w	80365ac <_dtoa_r+0x49c>
 8036484:	f1ba 0f00 	cmp.w	sl, #0
 8036488:	dd2f      	ble.n	80364ea <_dtoa_r+0x3da>
 803648a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 803648e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8036492:	ed8d 7b02 	vstr	d7, [sp, #8]
 8036496:	f10b 37ff 	add.w	r7, fp, #4294967295
 803649a:	3201      	adds	r2, #1
 803649c:	4650      	mov	r0, sl
 803649e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80364a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80364a6:	ee07 2a90 	vmov	s15, r2
 80364aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80364ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80364b2:	ee15 4a90 	vmov	r4, s11
 80364b6:	ec52 1b15 	vmov	r1, r2, d5
 80364ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80364be:	2800      	cmp	r0, #0
 80364c0:	d177      	bne.n	80365b2 <_dtoa_r+0x4a2>
 80364c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80364c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80364ca:	ec42 1b17 	vmov	d7, r1, r2
 80364ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80364d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80364d6:	f300 8263 	bgt.w	80369a0 <_dtoa_r+0x890>
 80364da:	eeb1 7b47 	vneg.f64	d7, d7
 80364de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80364e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80364e6:	f100 8258 	bmi.w	803699a <_dtoa_r+0x88a>
 80364ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80364ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80364f0:	2a00      	cmp	r2, #0
 80364f2:	f2c0 811d 	blt.w	8036730 <_dtoa_r+0x620>
 80364f6:	f1bb 0f0e 	cmp.w	fp, #14
 80364fa:	f300 8119 	bgt.w	8036730 <_dtoa_r+0x620>
 80364fe:	4b8a      	ldr	r3, [pc, #552]	; (8036728 <_dtoa_r+0x618>)
 8036500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8036504:	ed93 6b00 	vldr	d6, [r3]
 8036508:	9b08      	ldr	r3, [sp, #32]
 803650a:	2b00      	cmp	r3, #0
 803650c:	f280 80b7 	bge.w	803667e <_dtoa_r+0x56e>
 8036510:	f1b9 0f00 	cmp.w	r9, #0
 8036514:	f300 80b3 	bgt.w	803667e <_dtoa_r+0x56e>
 8036518:	f040 823f 	bne.w	803699a <_dtoa_r+0x88a>
 803651c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8036520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8036524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8036528:	eeb4 6bc7 	vcmpe.f64	d6, d7
 803652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036530:	464c      	mov	r4, r9
 8036532:	464f      	mov	r7, r9
 8036534:	f280 8215 	bge.w	8036962 <_dtoa_r+0x852>
 8036538:	f8dd 8004 	ldr.w	r8, [sp, #4]
 803653c:	2331      	movs	r3, #49	; 0x31
 803653e:	f808 3b01 	strb.w	r3, [r8], #1
 8036542:	f10b 0b01 	add.w	fp, fp, #1
 8036546:	e211      	b.n	803696c <_dtoa_r+0x85c>
 8036548:	2202      	movs	r2, #2
 803654a:	e780      	b.n	803644e <_dtoa_r+0x33e>
 803654c:	07cc      	lsls	r4, r1, #31
 803654e:	d504      	bpl.n	803655a <_dtoa_r+0x44a>
 8036550:	ed90 6b00 	vldr	d6, [r0]
 8036554:	3201      	adds	r2, #1
 8036556:	ee27 7b06 	vmul.f64	d7, d7, d6
 803655a:	1049      	asrs	r1, r1, #1
 803655c:	3008      	adds	r0, #8
 803655e:	e777      	b.n	8036450 <_dtoa_r+0x340>
 8036560:	d022      	beq.n	80365a8 <_dtoa_r+0x498>
 8036562:	f1cb 0100 	rsb	r1, fp, #0
 8036566:	4a70      	ldr	r2, [pc, #448]	; (8036728 <_dtoa_r+0x618>)
 8036568:	f001 000f 	and.w	r0, r1, #15
 803656c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8036570:	ed92 7b00 	vldr	d7, [r2]
 8036574:	ee28 7b07 	vmul.f64	d7, d8, d7
 8036578:	ed8d 7b02 	vstr	d7, [sp, #8]
 803657c:	486b      	ldr	r0, [pc, #428]	; (803672c <_dtoa_r+0x61c>)
 803657e:	1109      	asrs	r1, r1, #4
 8036580:	2400      	movs	r4, #0
 8036582:	2202      	movs	r2, #2
 8036584:	b929      	cbnz	r1, 8036592 <_dtoa_r+0x482>
 8036586:	2c00      	cmp	r4, #0
 8036588:	f43f af6a 	beq.w	8036460 <_dtoa_r+0x350>
 803658c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8036590:	e766      	b.n	8036460 <_dtoa_r+0x350>
 8036592:	07cf      	lsls	r7, r1, #31
 8036594:	d505      	bpl.n	80365a2 <_dtoa_r+0x492>
 8036596:	ed90 6b00 	vldr	d6, [r0]
 803659a:	3201      	adds	r2, #1
 803659c:	2401      	movs	r4, #1
 803659e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80365a2:	1049      	asrs	r1, r1, #1
 80365a4:	3008      	adds	r0, #8
 80365a6:	e7ed      	b.n	8036584 <_dtoa_r+0x474>
 80365a8:	2202      	movs	r2, #2
 80365aa:	e759      	b.n	8036460 <_dtoa_r+0x350>
 80365ac:	465f      	mov	r7, fp
 80365ae:	4648      	mov	r0, r9
 80365b0:	e775      	b.n	803649e <_dtoa_r+0x38e>
 80365b2:	ec42 1b17 	vmov	d7, r1, r2
 80365b6:	4a5c      	ldr	r2, [pc, #368]	; (8036728 <_dtoa_r+0x618>)
 80365b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80365bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80365c0:	9a01      	ldr	r2, [sp, #4]
 80365c2:	1814      	adds	r4, r2, r0
 80365c4:	9a07      	ldr	r2, [sp, #28]
 80365c6:	b352      	cbz	r2, 803661e <_dtoa_r+0x50e>
 80365c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80365cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80365d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80365d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80365d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80365dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80365e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80365e4:	ee14 2a90 	vmov	r2, s9
 80365e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80365ec:	3230      	adds	r2, #48	; 0x30
 80365ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80365f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80365f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80365fa:	f808 2b01 	strb.w	r2, [r8], #1
 80365fe:	d439      	bmi.n	8036674 <_dtoa_r+0x564>
 8036600:	ee32 5b46 	vsub.f64	d5, d2, d6
 8036604:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8036608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803660c:	d472      	bmi.n	80366f4 <_dtoa_r+0x5e4>
 803660e:	45a0      	cmp	r8, r4
 8036610:	f43f af6b 	beq.w	80364ea <_dtoa_r+0x3da>
 8036614:	ee27 7b03 	vmul.f64	d7, d7, d3
 8036618:	ee26 6b03 	vmul.f64	d6, d6, d3
 803661c:	e7e0      	b.n	80365e0 <_dtoa_r+0x4d0>
 803661e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8036622:	ee27 7b04 	vmul.f64	d7, d7, d4
 8036626:	4621      	mov	r1, r4
 8036628:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 803662c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8036630:	ee14 2a90 	vmov	r2, s9
 8036634:	3230      	adds	r2, #48	; 0x30
 8036636:	f808 2b01 	strb.w	r2, [r8], #1
 803663a:	45a0      	cmp	r8, r4
 803663c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8036640:	ee36 6b45 	vsub.f64	d6, d6, d5
 8036644:	d118      	bne.n	8036678 <_dtoa_r+0x568>
 8036646:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 803664a:	ee37 4b05 	vadd.f64	d4, d7, d5
 803664e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8036652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036656:	dc4d      	bgt.n	80366f4 <_dtoa_r+0x5e4>
 8036658:	ee35 7b47 	vsub.f64	d7, d5, d7
 803665c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8036660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036664:	f57f af41 	bpl.w	80364ea <_dtoa_r+0x3da>
 8036668:	4688      	mov	r8, r1
 803666a:	3901      	subs	r1, #1
 803666c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8036670:	2b30      	cmp	r3, #48	; 0x30
 8036672:	d0f9      	beq.n	8036668 <_dtoa_r+0x558>
 8036674:	46bb      	mov	fp, r7
 8036676:	e02a      	b.n	80366ce <_dtoa_r+0x5be>
 8036678:	ee26 6b03 	vmul.f64	d6, d6, d3
 803667c:	e7d6      	b.n	803662c <_dtoa_r+0x51c>
 803667e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8036682:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8036686:	f8dd 8004 	ldr.w	r8, [sp, #4]
 803668a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 803668e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8036692:	ee15 3a10 	vmov	r3, s10
 8036696:	3330      	adds	r3, #48	; 0x30
 8036698:	f808 3b01 	strb.w	r3, [r8], #1
 803669c:	9b01      	ldr	r3, [sp, #4]
 803669e:	eba8 0303 	sub.w	r3, r8, r3
 80366a2:	4599      	cmp	r9, r3
 80366a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80366a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80366ac:	d133      	bne.n	8036716 <_dtoa_r+0x606>
 80366ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80366b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80366b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80366ba:	dc1a      	bgt.n	80366f2 <_dtoa_r+0x5e2>
 80366bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80366c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80366c4:	d103      	bne.n	80366ce <_dtoa_r+0x5be>
 80366c6:	ee15 3a10 	vmov	r3, s10
 80366ca:	07d9      	lsls	r1, r3, #31
 80366cc:	d411      	bmi.n	80366f2 <_dtoa_r+0x5e2>
 80366ce:	4629      	mov	r1, r5
 80366d0:	4630      	mov	r0, r6
 80366d2:	f000 fd01 	bl	80370d8 <_Bfree>
 80366d6:	2300      	movs	r3, #0
 80366d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80366da:	f888 3000 	strb.w	r3, [r8]
 80366de:	f10b 0301 	add.w	r3, fp, #1
 80366e2:	6013      	str	r3, [r2, #0]
 80366e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80366e6:	2b00      	cmp	r3, #0
 80366e8:	f43f ad61 	beq.w	80361ae <_dtoa_r+0x9e>
 80366ec:	f8c3 8000 	str.w	r8, [r3]
 80366f0:	e55d      	b.n	80361ae <_dtoa_r+0x9e>
 80366f2:	465f      	mov	r7, fp
 80366f4:	4643      	mov	r3, r8
 80366f6:	4698      	mov	r8, r3
 80366f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80366fc:	2a39      	cmp	r2, #57	; 0x39
 80366fe:	d106      	bne.n	803670e <_dtoa_r+0x5fe>
 8036700:	9a01      	ldr	r2, [sp, #4]
 8036702:	429a      	cmp	r2, r3
 8036704:	d1f7      	bne.n	80366f6 <_dtoa_r+0x5e6>
 8036706:	9901      	ldr	r1, [sp, #4]
 8036708:	2230      	movs	r2, #48	; 0x30
 803670a:	3701      	adds	r7, #1
 803670c:	700a      	strb	r2, [r1, #0]
 803670e:	781a      	ldrb	r2, [r3, #0]
 8036710:	3201      	adds	r2, #1
 8036712:	701a      	strb	r2, [r3, #0]
 8036714:	e7ae      	b.n	8036674 <_dtoa_r+0x564>
 8036716:	ee27 7b04 	vmul.f64	d7, d7, d4
 803671a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 803671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036722:	d1b2      	bne.n	803668a <_dtoa_r+0x57a>
 8036724:	e7d3      	b.n	80366ce <_dtoa_r+0x5be>
 8036726:	bf00      	nop
 8036728:	0803c3b0 	.word	0x0803c3b0
 803672c:	0803c388 	.word	0x0803c388
 8036730:	9907      	ldr	r1, [sp, #28]
 8036732:	2900      	cmp	r1, #0
 8036734:	f000 80d0 	beq.w	80368d8 <_dtoa_r+0x7c8>
 8036738:	9906      	ldr	r1, [sp, #24]
 803673a:	2901      	cmp	r1, #1
 803673c:	f300 80b4 	bgt.w	80368a8 <_dtoa_r+0x798>
 8036740:	990a      	ldr	r1, [sp, #40]	; 0x28
 8036742:	2900      	cmp	r1, #0
 8036744:	f000 80ac 	beq.w	80368a0 <_dtoa_r+0x790>
 8036748:	f202 4233 	addw	r2, r2, #1075	; 0x433
 803674c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8036750:	461c      	mov	r4, r3
 8036752:	930a      	str	r3, [sp, #40]	; 0x28
 8036754:	9b04      	ldr	r3, [sp, #16]
 8036756:	4413      	add	r3, r2
 8036758:	9304      	str	r3, [sp, #16]
 803675a:	9b05      	ldr	r3, [sp, #20]
 803675c:	2101      	movs	r1, #1
 803675e:	4413      	add	r3, r2
 8036760:	4630      	mov	r0, r6
 8036762:	9305      	str	r3, [sp, #20]
 8036764:	f000 fd70 	bl	8037248 <__i2b>
 8036768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803676a:	4607      	mov	r7, r0
 803676c:	f1b8 0f00 	cmp.w	r8, #0
 8036770:	dd0d      	ble.n	803678e <_dtoa_r+0x67e>
 8036772:	9a05      	ldr	r2, [sp, #20]
 8036774:	2a00      	cmp	r2, #0
 8036776:	dd0a      	ble.n	803678e <_dtoa_r+0x67e>
 8036778:	4542      	cmp	r2, r8
 803677a:	9904      	ldr	r1, [sp, #16]
 803677c:	bfa8      	it	ge
 803677e:	4642      	movge	r2, r8
 8036780:	1a89      	subs	r1, r1, r2
 8036782:	9104      	str	r1, [sp, #16]
 8036784:	9905      	ldr	r1, [sp, #20]
 8036786:	eba8 0802 	sub.w	r8, r8, r2
 803678a:	1a8a      	subs	r2, r1, r2
 803678c:	9205      	str	r2, [sp, #20]
 803678e:	b303      	cbz	r3, 80367d2 <_dtoa_r+0x6c2>
 8036790:	9a07      	ldr	r2, [sp, #28]
 8036792:	2a00      	cmp	r2, #0
 8036794:	f000 80a5 	beq.w	80368e2 <_dtoa_r+0x7d2>
 8036798:	2c00      	cmp	r4, #0
 803679a:	dd13      	ble.n	80367c4 <_dtoa_r+0x6b4>
 803679c:	4639      	mov	r1, r7
 803679e:	4622      	mov	r2, r4
 80367a0:	4630      	mov	r0, r6
 80367a2:	930d      	str	r3, [sp, #52]	; 0x34
 80367a4:	f000 fe10 	bl	80373c8 <__pow5mult>
 80367a8:	462a      	mov	r2, r5
 80367aa:	4601      	mov	r1, r0
 80367ac:	4607      	mov	r7, r0
 80367ae:	4630      	mov	r0, r6
 80367b0:	f000 fd60 	bl	8037274 <__multiply>
 80367b4:	4629      	mov	r1, r5
 80367b6:	900a      	str	r0, [sp, #40]	; 0x28
 80367b8:	4630      	mov	r0, r6
 80367ba:	f000 fc8d 	bl	80370d8 <_Bfree>
 80367be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80367c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80367c2:	4615      	mov	r5, r2
 80367c4:	1b1a      	subs	r2, r3, r4
 80367c6:	d004      	beq.n	80367d2 <_dtoa_r+0x6c2>
 80367c8:	4629      	mov	r1, r5
 80367ca:	4630      	mov	r0, r6
 80367cc:	f000 fdfc 	bl	80373c8 <__pow5mult>
 80367d0:	4605      	mov	r5, r0
 80367d2:	2101      	movs	r1, #1
 80367d4:	4630      	mov	r0, r6
 80367d6:	f000 fd37 	bl	8037248 <__i2b>
 80367da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80367dc:	2b00      	cmp	r3, #0
 80367de:	4604      	mov	r4, r0
 80367e0:	f340 8081 	ble.w	80368e6 <_dtoa_r+0x7d6>
 80367e4:	461a      	mov	r2, r3
 80367e6:	4601      	mov	r1, r0
 80367e8:	4630      	mov	r0, r6
 80367ea:	f000 fded 	bl	80373c8 <__pow5mult>
 80367ee:	9b06      	ldr	r3, [sp, #24]
 80367f0:	2b01      	cmp	r3, #1
 80367f2:	4604      	mov	r4, r0
 80367f4:	dd7a      	ble.n	80368ec <_dtoa_r+0x7dc>
 80367f6:	2300      	movs	r3, #0
 80367f8:	930a      	str	r3, [sp, #40]	; 0x28
 80367fa:	6922      	ldr	r2, [r4, #16]
 80367fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8036800:	6910      	ldr	r0, [r2, #16]
 8036802:	f000 fcd1 	bl	80371a8 <__hi0bits>
 8036806:	f1c0 0020 	rsb	r0, r0, #32
 803680a:	9b05      	ldr	r3, [sp, #20]
 803680c:	4418      	add	r0, r3
 803680e:	f010 001f 	ands.w	r0, r0, #31
 8036812:	f000 808c 	beq.w	803692e <_dtoa_r+0x81e>
 8036816:	f1c0 0220 	rsb	r2, r0, #32
 803681a:	2a04      	cmp	r2, #4
 803681c:	f340 8085 	ble.w	803692a <_dtoa_r+0x81a>
 8036820:	f1c0 001c 	rsb	r0, r0, #28
 8036824:	9b04      	ldr	r3, [sp, #16]
 8036826:	4403      	add	r3, r0
 8036828:	9304      	str	r3, [sp, #16]
 803682a:	9b05      	ldr	r3, [sp, #20]
 803682c:	4403      	add	r3, r0
 803682e:	4480      	add	r8, r0
 8036830:	9305      	str	r3, [sp, #20]
 8036832:	9b04      	ldr	r3, [sp, #16]
 8036834:	2b00      	cmp	r3, #0
 8036836:	dd05      	ble.n	8036844 <_dtoa_r+0x734>
 8036838:	4629      	mov	r1, r5
 803683a:	461a      	mov	r2, r3
 803683c:	4630      	mov	r0, r6
 803683e:	f000 fe1d 	bl	803747c <__lshift>
 8036842:	4605      	mov	r5, r0
 8036844:	9b05      	ldr	r3, [sp, #20]
 8036846:	2b00      	cmp	r3, #0
 8036848:	dd05      	ble.n	8036856 <_dtoa_r+0x746>
 803684a:	4621      	mov	r1, r4
 803684c:	461a      	mov	r2, r3
 803684e:	4630      	mov	r0, r6
 8036850:	f000 fe14 	bl	803747c <__lshift>
 8036854:	4604      	mov	r4, r0
 8036856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036858:	2b00      	cmp	r3, #0
 803685a:	d06a      	beq.n	8036932 <_dtoa_r+0x822>
 803685c:	4621      	mov	r1, r4
 803685e:	4628      	mov	r0, r5
 8036860:	f000 fe7c 	bl	803755c <__mcmp>
 8036864:	2800      	cmp	r0, #0
 8036866:	da64      	bge.n	8036932 <_dtoa_r+0x822>
 8036868:	2300      	movs	r3, #0
 803686a:	4629      	mov	r1, r5
 803686c:	220a      	movs	r2, #10
 803686e:	4630      	mov	r0, r6
 8036870:	f000 fc54 	bl	803711c <__multadd>
 8036874:	9b07      	ldr	r3, [sp, #28]
 8036876:	f10b 3bff 	add.w	fp, fp, #4294967295
 803687a:	4605      	mov	r5, r0
 803687c:	2b00      	cmp	r3, #0
 803687e:	f000 8191 	beq.w	8036ba4 <_dtoa_r+0xa94>
 8036882:	4639      	mov	r1, r7
 8036884:	2300      	movs	r3, #0
 8036886:	220a      	movs	r2, #10
 8036888:	4630      	mov	r0, r6
 803688a:	f000 fc47 	bl	803711c <__multadd>
 803688e:	f1ba 0f00 	cmp.w	sl, #0
 8036892:	4607      	mov	r7, r0
 8036894:	f300 808d 	bgt.w	80369b2 <_dtoa_r+0x8a2>
 8036898:	9b06      	ldr	r3, [sp, #24]
 803689a:	2b02      	cmp	r3, #2
 803689c:	dc50      	bgt.n	8036940 <_dtoa_r+0x830>
 803689e:	e088      	b.n	80369b2 <_dtoa_r+0x8a2>
 80368a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80368a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80368a6:	e751      	b.n	803674c <_dtoa_r+0x63c>
 80368a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80368ac:	42a3      	cmp	r3, r4
 80368ae:	bfbf      	itttt	lt
 80368b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80368b2:	1ae3      	sublt	r3, r4, r3
 80368b4:	18d2      	addlt	r2, r2, r3
 80368b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80368b8:	bfb6      	itet	lt
 80368ba:	4623      	movlt	r3, r4
 80368bc:	1b1c      	subge	r4, r3, r4
 80368be:	2400      	movlt	r4, #0
 80368c0:	f1b9 0f00 	cmp.w	r9, #0
 80368c4:	bfb5      	itete	lt
 80368c6:	9a04      	ldrlt	r2, [sp, #16]
 80368c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80368cc:	eba2 0809 	sublt.w	r8, r2, r9
 80368d0:	464a      	movge	r2, r9
 80368d2:	bfb8      	it	lt
 80368d4:	2200      	movlt	r2, #0
 80368d6:	e73c      	b.n	8036752 <_dtoa_r+0x642>
 80368d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80368dc:	9f07      	ldr	r7, [sp, #28]
 80368de:	461c      	mov	r4, r3
 80368e0:	e744      	b.n	803676c <_dtoa_r+0x65c>
 80368e2:	461a      	mov	r2, r3
 80368e4:	e770      	b.n	80367c8 <_dtoa_r+0x6b8>
 80368e6:	9b06      	ldr	r3, [sp, #24]
 80368e8:	2b01      	cmp	r3, #1
 80368ea:	dc18      	bgt.n	803691e <_dtoa_r+0x80e>
 80368ec:	9b02      	ldr	r3, [sp, #8]
 80368ee:	b9b3      	cbnz	r3, 803691e <_dtoa_r+0x80e>
 80368f0:	9b03      	ldr	r3, [sp, #12]
 80368f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80368f6:	b9a2      	cbnz	r2, 8036922 <_dtoa_r+0x812>
 80368f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80368fc:	0d12      	lsrs	r2, r2, #20
 80368fe:	0512      	lsls	r2, r2, #20
 8036900:	b18a      	cbz	r2, 8036926 <_dtoa_r+0x816>
 8036902:	9b04      	ldr	r3, [sp, #16]
 8036904:	3301      	adds	r3, #1
 8036906:	9304      	str	r3, [sp, #16]
 8036908:	9b05      	ldr	r3, [sp, #20]
 803690a:	3301      	adds	r3, #1
 803690c:	9305      	str	r3, [sp, #20]
 803690e:	2301      	movs	r3, #1
 8036910:	930a      	str	r3, [sp, #40]	; 0x28
 8036912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036914:	2b00      	cmp	r3, #0
 8036916:	f47f af70 	bne.w	80367fa <_dtoa_r+0x6ea>
 803691a:	2001      	movs	r0, #1
 803691c:	e775      	b.n	803680a <_dtoa_r+0x6fa>
 803691e:	2300      	movs	r3, #0
 8036920:	e7f6      	b.n	8036910 <_dtoa_r+0x800>
 8036922:	9b02      	ldr	r3, [sp, #8]
 8036924:	e7f4      	b.n	8036910 <_dtoa_r+0x800>
 8036926:	920a      	str	r2, [sp, #40]	; 0x28
 8036928:	e7f3      	b.n	8036912 <_dtoa_r+0x802>
 803692a:	d082      	beq.n	8036832 <_dtoa_r+0x722>
 803692c:	4610      	mov	r0, r2
 803692e:	301c      	adds	r0, #28
 8036930:	e778      	b.n	8036824 <_dtoa_r+0x714>
 8036932:	f1b9 0f00 	cmp.w	r9, #0
 8036936:	dc37      	bgt.n	80369a8 <_dtoa_r+0x898>
 8036938:	9b06      	ldr	r3, [sp, #24]
 803693a:	2b02      	cmp	r3, #2
 803693c:	dd34      	ble.n	80369a8 <_dtoa_r+0x898>
 803693e:	46ca      	mov	sl, r9
 8036940:	f1ba 0f00 	cmp.w	sl, #0
 8036944:	d10d      	bne.n	8036962 <_dtoa_r+0x852>
 8036946:	4621      	mov	r1, r4
 8036948:	4653      	mov	r3, sl
 803694a:	2205      	movs	r2, #5
 803694c:	4630      	mov	r0, r6
 803694e:	f000 fbe5 	bl	803711c <__multadd>
 8036952:	4601      	mov	r1, r0
 8036954:	4604      	mov	r4, r0
 8036956:	4628      	mov	r0, r5
 8036958:	f000 fe00 	bl	803755c <__mcmp>
 803695c:	2800      	cmp	r0, #0
 803695e:	f73f adeb 	bgt.w	8036538 <_dtoa_r+0x428>
 8036962:	9b08      	ldr	r3, [sp, #32]
 8036964:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8036968:	ea6f 0b03 	mvn.w	fp, r3
 803696c:	f04f 0900 	mov.w	r9, #0
 8036970:	4621      	mov	r1, r4
 8036972:	4630      	mov	r0, r6
 8036974:	f000 fbb0 	bl	80370d8 <_Bfree>
 8036978:	2f00      	cmp	r7, #0
 803697a:	f43f aea8 	beq.w	80366ce <_dtoa_r+0x5be>
 803697e:	f1b9 0f00 	cmp.w	r9, #0
 8036982:	d005      	beq.n	8036990 <_dtoa_r+0x880>
 8036984:	45b9      	cmp	r9, r7
 8036986:	d003      	beq.n	8036990 <_dtoa_r+0x880>
 8036988:	4649      	mov	r1, r9
 803698a:	4630      	mov	r0, r6
 803698c:	f000 fba4 	bl	80370d8 <_Bfree>
 8036990:	4639      	mov	r1, r7
 8036992:	4630      	mov	r0, r6
 8036994:	f000 fba0 	bl	80370d8 <_Bfree>
 8036998:	e699      	b.n	80366ce <_dtoa_r+0x5be>
 803699a:	2400      	movs	r4, #0
 803699c:	4627      	mov	r7, r4
 803699e:	e7e0      	b.n	8036962 <_dtoa_r+0x852>
 80369a0:	46bb      	mov	fp, r7
 80369a2:	4604      	mov	r4, r0
 80369a4:	4607      	mov	r7, r0
 80369a6:	e5c7      	b.n	8036538 <_dtoa_r+0x428>
 80369a8:	9b07      	ldr	r3, [sp, #28]
 80369aa:	46ca      	mov	sl, r9
 80369ac:	2b00      	cmp	r3, #0
 80369ae:	f000 8100 	beq.w	8036bb2 <_dtoa_r+0xaa2>
 80369b2:	f1b8 0f00 	cmp.w	r8, #0
 80369b6:	dd05      	ble.n	80369c4 <_dtoa_r+0x8b4>
 80369b8:	4639      	mov	r1, r7
 80369ba:	4642      	mov	r2, r8
 80369bc:	4630      	mov	r0, r6
 80369be:	f000 fd5d 	bl	803747c <__lshift>
 80369c2:	4607      	mov	r7, r0
 80369c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80369c6:	2b00      	cmp	r3, #0
 80369c8:	d05d      	beq.n	8036a86 <_dtoa_r+0x976>
 80369ca:	6879      	ldr	r1, [r7, #4]
 80369cc:	4630      	mov	r0, r6
 80369ce:	f000 fb43 	bl	8037058 <_Balloc>
 80369d2:	4680      	mov	r8, r0
 80369d4:	b928      	cbnz	r0, 80369e2 <_dtoa_r+0x8d2>
 80369d6:	4b82      	ldr	r3, [pc, #520]	; (8036be0 <_dtoa_r+0xad0>)
 80369d8:	4602      	mov	r2, r0
 80369da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80369de:	f7ff bbaf 	b.w	8036140 <_dtoa_r+0x30>
 80369e2:	693a      	ldr	r2, [r7, #16]
 80369e4:	3202      	adds	r2, #2
 80369e6:	0092      	lsls	r2, r2, #2
 80369e8:	f107 010c 	add.w	r1, r7, #12
 80369ec:	300c      	adds	r0, #12
 80369ee:	f7fe fc2f 	bl	8035250 <memcpy>
 80369f2:	2201      	movs	r2, #1
 80369f4:	4641      	mov	r1, r8
 80369f6:	4630      	mov	r0, r6
 80369f8:	f000 fd40 	bl	803747c <__lshift>
 80369fc:	9b01      	ldr	r3, [sp, #4]
 80369fe:	3301      	adds	r3, #1
 8036a00:	9304      	str	r3, [sp, #16]
 8036a02:	9b01      	ldr	r3, [sp, #4]
 8036a04:	4453      	add	r3, sl
 8036a06:	9308      	str	r3, [sp, #32]
 8036a08:	9b02      	ldr	r3, [sp, #8]
 8036a0a:	f003 0301 	and.w	r3, r3, #1
 8036a0e:	46b9      	mov	r9, r7
 8036a10:	9307      	str	r3, [sp, #28]
 8036a12:	4607      	mov	r7, r0
 8036a14:	9b04      	ldr	r3, [sp, #16]
 8036a16:	4621      	mov	r1, r4
 8036a18:	3b01      	subs	r3, #1
 8036a1a:	4628      	mov	r0, r5
 8036a1c:	9302      	str	r3, [sp, #8]
 8036a1e:	f7ff fae9 	bl	8035ff4 <quorem>
 8036a22:	4603      	mov	r3, r0
 8036a24:	3330      	adds	r3, #48	; 0x30
 8036a26:	9005      	str	r0, [sp, #20]
 8036a28:	4649      	mov	r1, r9
 8036a2a:	4628      	mov	r0, r5
 8036a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8036a2e:	f000 fd95 	bl	803755c <__mcmp>
 8036a32:	463a      	mov	r2, r7
 8036a34:	4682      	mov	sl, r0
 8036a36:	4621      	mov	r1, r4
 8036a38:	4630      	mov	r0, r6
 8036a3a:	f000 fdab 	bl	8037594 <__mdiff>
 8036a3e:	68c2      	ldr	r2, [r0, #12]
 8036a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036a42:	4680      	mov	r8, r0
 8036a44:	bb0a      	cbnz	r2, 8036a8a <_dtoa_r+0x97a>
 8036a46:	4601      	mov	r1, r0
 8036a48:	4628      	mov	r0, r5
 8036a4a:	f000 fd87 	bl	803755c <__mcmp>
 8036a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036a50:	4602      	mov	r2, r0
 8036a52:	4641      	mov	r1, r8
 8036a54:	4630      	mov	r0, r6
 8036a56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8036a5a:	f000 fb3d 	bl	80370d8 <_Bfree>
 8036a5e:	9b06      	ldr	r3, [sp, #24]
 8036a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8036a62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8036a66:	ea43 0102 	orr.w	r1, r3, r2
 8036a6a:	9b07      	ldr	r3, [sp, #28]
 8036a6c:	430b      	orrs	r3, r1
 8036a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036a70:	d10d      	bne.n	8036a8e <_dtoa_r+0x97e>
 8036a72:	2b39      	cmp	r3, #57	; 0x39
 8036a74:	d029      	beq.n	8036aca <_dtoa_r+0x9ba>
 8036a76:	f1ba 0f00 	cmp.w	sl, #0
 8036a7a:	dd01      	ble.n	8036a80 <_dtoa_r+0x970>
 8036a7c:	9b05      	ldr	r3, [sp, #20]
 8036a7e:	3331      	adds	r3, #49	; 0x31
 8036a80:	9a02      	ldr	r2, [sp, #8]
 8036a82:	7013      	strb	r3, [r2, #0]
 8036a84:	e774      	b.n	8036970 <_dtoa_r+0x860>
 8036a86:	4638      	mov	r0, r7
 8036a88:	e7b8      	b.n	80369fc <_dtoa_r+0x8ec>
 8036a8a:	2201      	movs	r2, #1
 8036a8c:	e7e1      	b.n	8036a52 <_dtoa_r+0x942>
 8036a8e:	f1ba 0f00 	cmp.w	sl, #0
 8036a92:	db06      	blt.n	8036aa2 <_dtoa_r+0x992>
 8036a94:	9906      	ldr	r1, [sp, #24]
 8036a96:	ea41 0a0a 	orr.w	sl, r1, sl
 8036a9a:	9907      	ldr	r1, [sp, #28]
 8036a9c:	ea5a 0101 	orrs.w	r1, sl, r1
 8036aa0:	d120      	bne.n	8036ae4 <_dtoa_r+0x9d4>
 8036aa2:	2a00      	cmp	r2, #0
 8036aa4:	ddec      	ble.n	8036a80 <_dtoa_r+0x970>
 8036aa6:	4629      	mov	r1, r5
 8036aa8:	2201      	movs	r2, #1
 8036aaa:	4630      	mov	r0, r6
 8036aac:	9304      	str	r3, [sp, #16]
 8036aae:	f000 fce5 	bl	803747c <__lshift>
 8036ab2:	4621      	mov	r1, r4
 8036ab4:	4605      	mov	r5, r0
 8036ab6:	f000 fd51 	bl	803755c <__mcmp>
 8036aba:	2800      	cmp	r0, #0
 8036abc:	9b04      	ldr	r3, [sp, #16]
 8036abe:	dc02      	bgt.n	8036ac6 <_dtoa_r+0x9b6>
 8036ac0:	d1de      	bne.n	8036a80 <_dtoa_r+0x970>
 8036ac2:	07da      	lsls	r2, r3, #31
 8036ac4:	d5dc      	bpl.n	8036a80 <_dtoa_r+0x970>
 8036ac6:	2b39      	cmp	r3, #57	; 0x39
 8036ac8:	d1d8      	bne.n	8036a7c <_dtoa_r+0x96c>
 8036aca:	9a02      	ldr	r2, [sp, #8]
 8036acc:	2339      	movs	r3, #57	; 0x39
 8036ace:	7013      	strb	r3, [r2, #0]
 8036ad0:	4643      	mov	r3, r8
 8036ad2:	4698      	mov	r8, r3
 8036ad4:	3b01      	subs	r3, #1
 8036ad6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8036ada:	2a39      	cmp	r2, #57	; 0x39
 8036adc:	d051      	beq.n	8036b82 <_dtoa_r+0xa72>
 8036ade:	3201      	adds	r2, #1
 8036ae0:	701a      	strb	r2, [r3, #0]
 8036ae2:	e745      	b.n	8036970 <_dtoa_r+0x860>
 8036ae4:	2a00      	cmp	r2, #0
 8036ae6:	dd03      	ble.n	8036af0 <_dtoa_r+0x9e0>
 8036ae8:	2b39      	cmp	r3, #57	; 0x39
 8036aea:	d0ee      	beq.n	8036aca <_dtoa_r+0x9ba>
 8036aec:	3301      	adds	r3, #1
 8036aee:	e7c7      	b.n	8036a80 <_dtoa_r+0x970>
 8036af0:	9a04      	ldr	r2, [sp, #16]
 8036af2:	9908      	ldr	r1, [sp, #32]
 8036af4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8036af8:	428a      	cmp	r2, r1
 8036afa:	d02b      	beq.n	8036b54 <_dtoa_r+0xa44>
 8036afc:	4629      	mov	r1, r5
 8036afe:	2300      	movs	r3, #0
 8036b00:	220a      	movs	r2, #10
 8036b02:	4630      	mov	r0, r6
 8036b04:	f000 fb0a 	bl	803711c <__multadd>
 8036b08:	45b9      	cmp	r9, r7
 8036b0a:	4605      	mov	r5, r0
 8036b0c:	f04f 0300 	mov.w	r3, #0
 8036b10:	f04f 020a 	mov.w	r2, #10
 8036b14:	4649      	mov	r1, r9
 8036b16:	4630      	mov	r0, r6
 8036b18:	d107      	bne.n	8036b2a <_dtoa_r+0xa1a>
 8036b1a:	f000 faff 	bl	803711c <__multadd>
 8036b1e:	4681      	mov	r9, r0
 8036b20:	4607      	mov	r7, r0
 8036b22:	9b04      	ldr	r3, [sp, #16]
 8036b24:	3301      	adds	r3, #1
 8036b26:	9304      	str	r3, [sp, #16]
 8036b28:	e774      	b.n	8036a14 <_dtoa_r+0x904>
 8036b2a:	f000 faf7 	bl	803711c <__multadd>
 8036b2e:	4639      	mov	r1, r7
 8036b30:	4681      	mov	r9, r0
 8036b32:	2300      	movs	r3, #0
 8036b34:	220a      	movs	r2, #10
 8036b36:	4630      	mov	r0, r6
 8036b38:	f000 faf0 	bl	803711c <__multadd>
 8036b3c:	4607      	mov	r7, r0
 8036b3e:	e7f0      	b.n	8036b22 <_dtoa_r+0xa12>
 8036b40:	f1ba 0f00 	cmp.w	sl, #0
 8036b44:	9a01      	ldr	r2, [sp, #4]
 8036b46:	bfcc      	ite	gt
 8036b48:	46d0      	movgt	r8, sl
 8036b4a:	f04f 0801 	movle.w	r8, #1
 8036b4e:	4490      	add	r8, r2
 8036b50:	f04f 0900 	mov.w	r9, #0
 8036b54:	4629      	mov	r1, r5
 8036b56:	2201      	movs	r2, #1
 8036b58:	4630      	mov	r0, r6
 8036b5a:	9302      	str	r3, [sp, #8]
 8036b5c:	f000 fc8e 	bl	803747c <__lshift>
 8036b60:	4621      	mov	r1, r4
 8036b62:	4605      	mov	r5, r0
 8036b64:	f000 fcfa 	bl	803755c <__mcmp>
 8036b68:	2800      	cmp	r0, #0
 8036b6a:	dcb1      	bgt.n	8036ad0 <_dtoa_r+0x9c0>
 8036b6c:	d102      	bne.n	8036b74 <_dtoa_r+0xa64>
 8036b6e:	9b02      	ldr	r3, [sp, #8]
 8036b70:	07db      	lsls	r3, r3, #31
 8036b72:	d4ad      	bmi.n	8036ad0 <_dtoa_r+0x9c0>
 8036b74:	4643      	mov	r3, r8
 8036b76:	4698      	mov	r8, r3
 8036b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8036b7c:	2a30      	cmp	r2, #48	; 0x30
 8036b7e:	d0fa      	beq.n	8036b76 <_dtoa_r+0xa66>
 8036b80:	e6f6      	b.n	8036970 <_dtoa_r+0x860>
 8036b82:	9a01      	ldr	r2, [sp, #4]
 8036b84:	429a      	cmp	r2, r3
 8036b86:	d1a4      	bne.n	8036ad2 <_dtoa_r+0x9c2>
 8036b88:	f10b 0b01 	add.w	fp, fp, #1
 8036b8c:	2331      	movs	r3, #49	; 0x31
 8036b8e:	e778      	b.n	8036a82 <_dtoa_r+0x972>
 8036b90:	4b14      	ldr	r3, [pc, #80]	; (8036be4 <_dtoa_r+0xad4>)
 8036b92:	f7ff bb27 	b.w	80361e4 <_dtoa_r+0xd4>
 8036b96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8036b98:	2b00      	cmp	r3, #0
 8036b9a:	f47f ab03 	bne.w	80361a4 <_dtoa_r+0x94>
 8036b9e:	4b12      	ldr	r3, [pc, #72]	; (8036be8 <_dtoa_r+0xad8>)
 8036ba0:	f7ff bb20 	b.w	80361e4 <_dtoa_r+0xd4>
 8036ba4:	f1ba 0f00 	cmp.w	sl, #0
 8036ba8:	dc03      	bgt.n	8036bb2 <_dtoa_r+0xaa2>
 8036baa:	9b06      	ldr	r3, [sp, #24]
 8036bac:	2b02      	cmp	r3, #2
 8036bae:	f73f aec7 	bgt.w	8036940 <_dtoa_r+0x830>
 8036bb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8036bb6:	4621      	mov	r1, r4
 8036bb8:	4628      	mov	r0, r5
 8036bba:	f7ff fa1b 	bl	8035ff4 <quorem>
 8036bbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8036bc2:	f808 3b01 	strb.w	r3, [r8], #1
 8036bc6:	9a01      	ldr	r2, [sp, #4]
 8036bc8:	eba8 0202 	sub.w	r2, r8, r2
 8036bcc:	4592      	cmp	sl, r2
 8036bce:	ddb7      	ble.n	8036b40 <_dtoa_r+0xa30>
 8036bd0:	4629      	mov	r1, r5
 8036bd2:	2300      	movs	r3, #0
 8036bd4:	220a      	movs	r2, #10
 8036bd6:	4630      	mov	r0, r6
 8036bd8:	f000 faa0 	bl	803711c <__multadd>
 8036bdc:	4605      	mov	r5, r0
 8036bde:	e7ea      	b.n	8036bb6 <_dtoa_r+0xaa6>
 8036be0:	0803c2b7 	.word	0x0803c2b7
 8036be4:	0803c214 	.word	0x0803c214
 8036be8:	0803c238 	.word	0x0803c238

08036bec <__errno>:
 8036bec:	4b01      	ldr	r3, [pc, #4]	; (8036bf4 <__errno+0x8>)
 8036bee:	6818      	ldr	r0, [r3, #0]
 8036bf0:	4770      	bx	lr
 8036bf2:	bf00      	nop
 8036bf4:	20002a0c 	.word	0x20002a0c

08036bf8 <__sflush_r>:
 8036bf8:	898a      	ldrh	r2, [r1, #12]
 8036bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036bfe:	4605      	mov	r5, r0
 8036c00:	0710      	lsls	r0, r2, #28
 8036c02:	460c      	mov	r4, r1
 8036c04:	d458      	bmi.n	8036cb8 <__sflush_r+0xc0>
 8036c06:	684b      	ldr	r3, [r1, #4]
 8036c08:	2b00      	cmp	r3, #0
 8036c0a:	dc05      	bgt.n	8036c18 <__sflush_r+0x20>
 8036c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8036c0e:	2b00      	cmp	r3, #0
 8036c10:	dc02      	bgt.n	8036c18 <__sflush_r+0x20>
 8036c12:	2000      	movs	r0, #0
 8036c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8036c1a:	2e00      	cmp	r6, #0
 8036c1c:	d0f9      	beq.n	8036c12 <__sflush_r+0x1a>
 8036c1e:	2300      	movs	r3, #0
 8036c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8036c24:	682f      	ldr	r7, [r5, #0]
 8036c26:	602b      	str	r3, [r5, #0]
 8036c28:	d032      	beq.n	8036c90 <__sflush_r+0x98>
 8036c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8036c2c:	89a3      	ldrh	r3, [r4, #12]
 8036c2e:	075a      	lsls	r2, r3, #29
 8036c30:	d505      	bpl.n	8036c3e <__sflush_r+0x46>
 8036c32:	6863      	ldr	r3, [r4, #4]
 8036c34:	1ac0      	subs	r0, r0, r3
 8036c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8036c38:	b10b      	cbz	r3, 8036c3e <__sflush_r+0x46>
 8036c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8036c3c:	1ac0      	subs	r0, r0, r3
 8036c3e:	2300      	movs	r3, #0
 8036c40:	4602      	mov	r2, r0
 8036c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8036c44:	6a21      	ldr	r1, [r4, #32]
 8036c46:	4628      	mov	r0, r5
 8036c48:	47b0      	blx	r6
 8036c4a:	1c43      	adds	r3, r0, #1
 8036c4c:	89a3      	ldrh	r3, [r4, #12]
 8036c4e:	d106      	bne.n	8036c5e <__sflush_r+0x66>
 8036c50:	6829      	ldr	r1, [r5, #0]
 8036c52:	291d      	cmp	r1, #29
 8036c54:	d82c      	bhi.n	8036cb0 <__sflush_r+0xb8>
 8036c56:	4a2a      	ldr	r2, [pc, #168]	; (8036d00 <__sflush_r+0x108>)
 8036c58:	40ca      	lsrs	r2, r1
 8036c5a:	07d6      	lsls	r6, r2, #31
 8036c5c:	d528      	bpl.n	8036cb0 <__sflush_r+0xb8>
 8036c5e:	2200      	movs	r2, #0
 8036c60:	6062      	str	r2, [r4, #4]
 8036c62:	04d9      	lsls	r1, r3, #19
 8036c64:	6922      	ldr	r2, [r4, #16]
 8036c66:	6022      	str	r2, [r4, #0]
 8036c68:	d504      	bpl.n	8036c74 <__sflush_r+0x7c>
 8036c6a:	1c42      	adds	r2, r0, #1
 8036c6c:	d101      	bne.n	8036c72 <__sflush_r+0x7a>
 8036c6e:	682b      	ldr	r3, [r5, #0]
 8036c70:	b903      	cbnz	r3, 8036c74 <__sflush_r+0x7c>
 8036c72:	6560      	str	r0, [r4, #84]	; 0x54
 8036c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8036c76:	602f      	str	r7, [r5, #0]
 8036c78:	2900      	cmp	r1, #0
 8036c7a:	d0ca      	beq.n	8036c12 <__sflush_r+0x1a>
 8036c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8036c80:	4299      	cmp	r1, r3
 8036c82:	d002      	beq.n	8036c8a <__sflush_r+0x92>
 8036c84:	4628      	mov	r0, r5
 8036c86:	f7fe fb13 	bl	80352b0 <_free_r>
 8036c8a:	2000      	movs	r0, #0
 8036c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8036c8e:	e7c1      	b.n	8036c14 <__sflush_r+0x1c>
 8036c90:	6a21      	ldr	r1, [r4, #32]
 8036c92:	2301      	movs	r3, #1
 8036c94:	4628      	mov	r0, r5
 8036c96:	47b0      	blx	r6
 8036c98:	1c41      	adds	r1, r0, #1
 8036c9a:	d1c7      	bne.n	8036c2c <__sflush_r+0x34>
 8036c9c:	682b      	ldr	r3, [r5, #0]
 8036c9e:	2b00      	cmp	r3, #0
 8036ca0:	d0c4      	beq.n	8036c2c <__sflush_r+0x34>
 8036ca2:	2b1d      	cmp	r3, #29
 8036ca4:	d001      	beq.n	8036caa <__sflush_r+0xb2>
 8036ca6:	2b16      	cmp	r3, #22
 8036ca8:	d101      	bne.n	8036cae <__sflush_r+0xb6>
 8036caa:	602f      	str	r7, [r5, #0]
 8036cac:	e7b1      	b.n	8036c12 <__sflush_r+0x1a>
 8036cae:	89a3      	ldrh	r3, [r4, #12]
 8036cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036cb4:	81a3      	strh	r3, [r4, #12]
 8036cb6:	e7ad      	b.n	8036c14 <__sflush_r+0x1c>
 8036cb8:	690f      	ldr	r7, [r1, #16]
 8036cba:	2f00      	cmp	r7, #0
 8036cbc:	d0a9      	beq.n	8036c12 <__sflush_r+0x1a>
 8036cbe:	0793      	lsls	r3, r2, #30
 8036cc0:	680e      	ldr	r6, [r1, #0]
 8036cc2:	bf08      	it	eq
 8036cc4:	694b      	ldreq	r3, [r1, #20]
 8036cc6:	600f      	str	r7, [r1, #0]
 8036cc8:	bf18      	it	ne
 8036cca:	2300      	movne	r3, #0
 8036ccc:	eba6 0807 	sub.w	r8, r6, r7
 8036cd0:	608b      	str	r3, [r1, #8]
 8036cd2:	f1b8 0f00 	cmp.w	r8, #0
 8036cd6:	dd9c      	ble.n	8036c12 <__sflush_r+0x1a>
 8036cd8:	6a21      	ldr	r1, [r4, #32]
 8036cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8036cdc:	4643      	mov	r3, r8
 8036cde:	463a      	mov	r2, r7
 8036ce0:	4628      	mov	r0, r5
 8036ce2:	47b0      	blx	r6
 8036ce4:	2800      	cmp	r0, #0
 8036ce6:	dc06      	bgt.n	8036cf6 <__sflush_r+0xfe>
 8036ce8:	89a3      	ldrh	r3, [r4, #12]
 8036cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036cee:	81a3      	strh	r3, [r4, #12]
 8036cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8036cf4:	e78e      	b.n	8036c14 <__sflush_r+0x1c>
 8036cf6:	4407      	add	r7, r0
 8036cf8:	eba8 0800 	sub.w	r8, r8, r0
 8036cfc:	e7e9      	b.n	8036cd2 <__sflush_r+0xda>
 8036cfe:	bf00      	nop
 8036d00:	20400001 	.word	0x20400001

08036d04 <_fflush_r>:
 8036d04:	b538      	push	{r3, r4, r5, lr}
 8036d06:	690b      	ldr	r3, [r1, #16]
 8036d08:	4605      	mov	r5, r0
 8036d0a:	460c      	mov	r4, r1
 8036d0c:	b913      	cbnz	r3, 8036d14 <_fflush_r+0x10>
 8036d0e:	2500      	movs	r5, #0
 8036d10:	4628      	mov	r0, r5
 8036d12:	bd38      	pop	{r3, r4, r5, pc}
 8036d14:	b118      	cbz	r0, 8036d1e <_fflush_r+0x1a>
 8036d16:	6983      	ldr	r3, [r0, #24]
 8036d18:	b90b      	cbnz	r3, 8036d1e <_fflush_r+0x1a>
 8036d1a:	f000 f887 	bl	8036e2c <__sinit>
 8036d1e:	4b14      	ldr	r3, [pc, #80]	; (8036d70 <_fflush_r+0x6c>)
 8036d20:	429c      	cmp	r4, r3
 8036d22:	d11b      	bne.n	8036d5c <_fflush_r+0x58>
 8036d24:	686c      	ldr	r4, [r5, #4]
 8036d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036d2a:	2b00      	cmp	r3, #0
 8036d2c:	d0ef      	beq.n	8036d0e <_fflush_r+0xa>
 8036d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8036d30:	07d0      	lsls	r0, r2, #31
 8036d32:	d404      	bmi.n	8036d3e <_fflush_r+0x3a>
 8036d34:	0599      	lsls	r1, r3, #22
 8036d36:	d402      	bmi.n	8036d3e <_fflush_r+0x3a>
 8036d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8036d3a:	f000 f91a 	bl	8036f72 <__retarget_lock_acquire_recursive>
 8036d3e:	4628      	mov	r0, r5
 8036d40:	4621      	mov	r1, r4
 8036d42:	f7ff ff59 	bl	8036bf8 <__sflush_r>
 8036d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8036d48:	07da      	lsls	r2, r3, #31
 8036d4a:	4605      	mov	r5, r0
 8036d4c:	d4e0      	bmi.n	8036d10 <_fflush_r+0xc>
 8036d4e:	89a3      	ldrh	r3, [r4, #12]
 8036d50:	059b      	lsls	r3, r3, #22
 8036d52:	d4dd      	bmi.n	8036d10 <_fflush_r+0xc>
 8036d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8036d56:	f000 f90d 	bl	8036f74 <__retarget_lock_release_recursive>
 8036d5a:	e7d9      	b.n	8036d10 <_fflush_r+0xc>
 8036d5c:	4b05      	ldr	r3, [pc, #20]	; (8036d74 <_fflush_r+0x70>)
 8036d5e:	429c      	cmp	r4, r3
 8036d60:	d101      	bne.n	8036d66 <_fflush_r+0x62>
 8036d62:	68ac      	ldr	r4, [r5, #8]
 8036d64:	e7df      	b.n	8036d26 <_fflush_r+0x22>
 8036d66:	4b04      	ldr	r3, [pc, #16]	; (8036d78 <_fflush_r+0x74>)
 8036d68:	429c      	cmp	r4, r3
 8036d6a:	bf08      	it	eq
 8036d6c:	68ec      	ldreq	r4, [r5, #12]
 8036d6e:	e7da      	b.n	8036d26 <_fflush_r+0x22>
 8036d70:	0803c2e8 	.word	0x0803c2e8
 8036d74:	0803c308 	.word	0x0803c308
 8036d78:	0803c2c8 	.word	0x0803c2c8

08036d7c <std>:
 8036d7c:	2300      	movs	r3, #0
 8036d7e:	b510      	push	{r4, lr}
 8036d80:	4604      	mov	r4, r0
 8036d82:	e9c0 3300 	strd	r3, r3, [r0]
 8036d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8036d8a:	6083      	str	r3, [r0, #8]
 8036d8c:	8181      	strh	r1, [r0, #12]
 8036d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8036d90:	81c2      	strh	r2, [r0, #14]
 8036d92:	6183      	str	r3, [r0, #24]
 8036d94:	4619      	mov	r1, r3
 8036d96:	2208      	movs	r2, #8
 8036d98:	305c      	adds	r0, #92	; 0x5c
 8036d9a:	f7fe fa81 	bl	80352a0 <memset>
 8036d9e:	4b05      	ldr	r3, [pc, #20]	; (8036db4 <std+0x38>)
 8036da0:	6263      	str	r3, [r4, #36]	; 0x24
 8036da2:	4b05      	ldr	r3, [pc, #20]	; (8036db8 <std+0x3c>)
 8036da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8036da6:	4b05      	ldr	r3, [pc, #20]	; (8036dbc <std+0x40>)
 8036da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8036daa:	4b05      	ldr	r3, [pc, #20]	; (8036dc0 <std+0x44>)
 8036dac:	6224      	str	r4, [r4, #32]
 8036dae:	6323      	str	r3, [r4, #48]	; 0x30
 8036db0:	bd10      	pop	{r4, pc}
 8036db2:	bf00      	nop
 8036db4:	08037a41 	.word	0x08037a41
 8036db8:	08037a63 	.word	0x08037a63
 8036dbc:	08037a9b 	.word	0x08037a9b
 8036dc0:	08037abf 	.word	0x08037abf

08036dc4 <_cleanup_r>:
 8036dc4:	4901      	ldr	r1, [pc, #4]	; (8036dcc <_cleanup_r+0x8>)
 8036dc6:	f000 b8af 	b.w	8036f28 <_fwalk_reent>
 8036dca:	bf00      	nop
 8036dcc:	08036d05 	.word	0x08036d05

08036dd0 <__sfmoreglue>:
 8036dd0:	b570      	push	{r4, r5, r6, lr}
 8036dd2:	2268      	movs	r2, #104	; 0x68
 8036dd4:	1e4d      	subs	r5, r1, #1
 8036dd6:	4355      	muls	r5, r2
 8036dd8:	460e      	mov	r6, r1
 8036dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8036dde:	f7fe fad3 	bl	8035388 <_malloc_r>
 8036de2:	4604      	mov	r4, r0
 8036de4:	b140      	cbz	r0, 8036df8 <__sfmoreglue+0x28>
 8036de6:	2100      	movs	r1, #0
 8036de8:	e9c0 1600 	strd	r1, r6, [r0]
 8036dec:	300c      	adds	r0, #12
 8036dee:	60a0      	str	r0, [r4, #8]
 8036df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8036df4:	f7fe fa54 	bl	80352a0 <memset>
 8036df8:	4620      	mov	r0, r4
 8036dfa:	bd70      	pop	{r4, r5, r6, pc}

08036dfc <__sfp_lock_acquire>:
 8036dfc:	4801      	ldr	r0, [pc, #4]	; (8036e04 <__sfp_lock_acquire+0x8>)
 8036dfe:	f000 b8b8 	b.w	8036f72 <__retarget_lock_acquire_recursive>
 8036e02:	bf00      	nop
 8036e04:	2000ce79 	.word	0x2000ce79

08036e08 <__sfp_lock_release>:
 8036e08:	4801      	ldr	r0, [pc, #4]	; (8036e10 <__sfp_lock_release+0x8>)
 8036e0a:	f000 b8b3 	b.w	8036f74 <__retarget_lock_release_recursive>
 8036e0e:	bf00      	nop
 8036e10:	2000ce79 	.word	0x2000ce79

08036e14 <__sinit_lock_acquire>:
 8036e14:	4801      	ldr	r0, [pc, #4]	; (8036e1c <__sinit_lock_acquire+0x8>)
 8036e16:	f000 b8ac 	b.w	8036f72 <__retarget_lock_acquire_recursive>
 8036e1a:	bf00      	nop
 8036e1c:	2000ce7a 	.word	0x2000ce7a

08036e20 <__sinit_lock_release>:
 8036e20:	4801      	ldr	r0, [pc, #4]	; (8036e28 <__sinit_lock_release+0x8>)
 8036e22:	f000 b8a7 	b.w	8036f74 <__retarget_lock_release_recursive>
 8036e26:	bf00      	nop
 8036e28:	2000ce7a 	.word	0x2000ce7a

08036e2c <__sinit>:
 8036e2c:	b510      	push	{r4, lr}
 8036e2e:	4604      	mov	r4, r0
 8036e30:	f7ff fff0 	bl	8036e14 <__sinit_lock_acquire>
 8036e34:	69a3      	ldr	r3, [r4, #24]
 8036e36:	b11b      	cbz	r3, 8036e40 <__sinit+0x14>
 8036e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8036e3c:	f7ff bff0 	b.w	8036e20 <__sinit_lock_release>
 8036e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8036e44:	6523      	str	r3, [r4, #80]	; 0x50
 8036e46:	4b13      	ldr	r3, [pc, #76]	; (8036e94 <__sinit+0x68>)
 8036e48:	4a13      	ldr	r2, [pc, #76]	; (8036e98 <__sinit+0x6c>)
 8036e4a:	681b      	ldr	r3, [r3, #0]
 8036e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8036e4e:	42a3      	cmp	r3, r4
 8036e50:	bf04      	itt	eq
 8036e52:	2301      	moveq	r3, #1
 8036e54:	61a3      	streq	r3, [r4, #24]
 8036e56:	4620      	mov	r0, r4
 8036e58:	f000 f820 	bl	8036e9c <__sfp>
 8036e5c:	6060      	str	r0, [r4, #4]
 8036e5e:	4620      	mov	r0, r4
 8036e60:	f000 f81c 	bl	8036e9c <__sfp>
 8036e64:	60a0      	str	r0, [r4, #8]
 8036e66:	4620      	mov	r0, r4
 8036e68:	f000 f818 	bl	8036e9c <__sfp>
 8036e6c:	2200      	movs	r2, #0
 8036e6e:	60e0      	str	r0, [r4, #12]
 8036e70:	2104      	movs	r1, #4
 8036e72:	6860      	ldr	r0, [r4, #4]
 8036e74:	f7ff ff82 	bl	8036d7c <std>
 8036e78:	68a0      	ldr	r0, [r4, #8]
 8036e7a:	2201      	movs	r2, #1
 8036e7c:	2109      	movs	r1, #9
 8036e7e:	f7ff ff7d 	bl	8036d7c <std>
 8036e82:	68e0      	ldr	r0, [r4, #12]
 8036e84:	2202      	movs	r2, #2
 8036e86:	2112      	movs	r1, #18
 8036e88:	f7ff ff78 	bl	8036d7c <std>
 8036e8c:	2301      	movs	r3, #1
 8036e8e:	61a3      	str	r3, [r4, #24]
 8036e90:	e7d2      	b.n	8036e38 <__sinit+0xc>
 8036e92:	bf00      	nop
 8036e94:	0803c200 	.word	0x0803c200
 8036e98:	08036dc5 	.word	0x08036dc5

08036e9c <__sfp>:
 8036e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036e9e:	4607      	mov	r7, r0
 8036ea0:	f7ff ffac 	bl	8036dfc <__sfp_lock_acquire>
 8036ea4:	4b1e      	ldr	r3, [pc, #120]	; (8036f20 <__sfp+0x84>)
 8036ea6:	681e      	ldr	r6, [r3, #0]
 8036ea8:	69b3      	ldr	r3, [r6, #24]
 8036eaa:	b913      	cbnz	r3, 8036eb2 <__sfp+0x16>
 8036eac:	4630      	mov	r0, r6
 8036eae:	f7ff ffbd 	bl	8036e2c <__sinit>
 8036eb2:	3648      	adds	r6, #72	; 0x48
 8036eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8036eb8:	3b01      	subs	r3, #1
 8036eba:	d503      	bpl.n	8036ec4 <__sfp+0x28>
 8036ebc:	6833      	ldr	r3, [r6, #0]
 8036ebe:	b30b      	cbz	r3, 8036f04 <__sfp+0x68>
 8036ec0:	6836      	ldr	r6, [r6, #0]
 8036ec2:	e7f7      	b.n	8036eb4 <__sfp+0x18>
 8036ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8036ec8:	b9d5      	cbnz	r5, 8036f00 <__sfp+0x64>
 8036eca:	4b16      	ldr	r3, [pc, #88]	; (8036f24 <__sfp+0x88>)
 8036ecc:	60e3      	str	r3, [r4, #12]
 8036ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8036ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8036ed4:	f000 f84c 	bl	8036f70 <__retarget_lock_init_recursive>
 8036ed8:	f7ff ff96 	bl	8036e08 <__sfp_lock_release>
 8036edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8036ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8036ee4:	6025      	str	r5, [r4, #0]
 8036ee6:	61a5      	str	r5, [r4, #24]
 8036ee8:	2208      	movs	r2, #8
 8036eea:	4629      	mov	r1, r5
 8036eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8036ef0:	f7fe f9d6 	bl	80352a0 <memset>
 8036ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8036ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8036efc:	4620      	mov	r0, r4
 8036efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8036f00:	3468      	adds	r4, #104	; 0x68
 8036f02:	e7d9      	b.n	8036eb8 <__sfp+0x1c>
 8036f04:	2104      	movs	r1, #4
 8036f06:	4638      	mov	r0, r7
 8036f08:	f7ff ff62 	bl	8036dd0 <__sfmoreglue>
 8036f0c:	4604      	mov	r4, r0
 8036f0e:	6030      	str	r0, [r6, #0]
 8036f10:	2800      	cmp	r0, #0
 8036f12:	d1d5      	bne.n	8036ec0 <__sfp+0x24>
 8036f14:	f7ff ff78 	bl	8036e08 <__sfp_lock_release>
 8036f18:	230c      	movs	r3, #12
 8036f1a:	603b      	str	r3, [r7, #0]
 8036f1c:	e7ee      	b.n	8036efc <__sfp+0x60>
 8036f1e:	bf00      	nop
 8036f20:	0803c200 	.word	0x0803c200
 8036f24:	ffff0001 	.word	0xffff0001

08036f28 <_fwalk_reent>:
 8036f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8036f2c:	4606      	mov	r6, r0
 8036f2e:	4688      	mov	r8, r1
 8036f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8036f34:	2700      	movs	r7, #0
 8036f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8036f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8036f3e:	d505      	bpl.n	8036f4c <_fwalk_reent+0x24>
 8036f40:	6824      	ldr	r4, [r4, #0]
 8036f42:	2c00      	cmp	r4, #0
 8036f44:	d1f7      	bne.n	8036f36 <_fwalk_reent+0xe>
 8036f46:	4638      	mov	r0, r7
 8036f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8036f4c:	89ab      	ldrh	r3, [r5, #12]
 8036f4e:	2b01      	cmp	r3, #1
 8036f50:	d907      	bls.n	8036f62 <_fwalk_reent+0x3a>
 8036f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8036f56:	3301      	adds	r3, #1
 8036f58:	d003      	beq.n	8036f62 <_fwalk_reent+0x3a>
 8036f5a:	4629      	mov	r1, r5
 8036f5c:	4630      	mov	r0, r6
 8036f5e:	47c0      	blx	r8
 8036f60:	4307      	orrs	r7, r0
 8036f62:	3568      	adds	r5, #104	; 0x68
 8036f64:	e7e9      	b.n	8036f3a <_fwalk_reent+0x12>
	...

08036f68 <_localeconv_r>:
 8036f68:	4800      	ldr	r0, [pc, #0]	; (8036f6c <_localeconv_r+0x4>)
 8036f6a:	4770      	bx	lr
 8036f6c:	20002b60 	.word	0x20002b60

08036f70 <__retarget_lock_init_recursive>:
 8036f70:	4770      	bx	lr

08036f72 <__retarget_lock_acquire_recursive>:
 8036f72:	4770      	bx	lr

08036f74 <__retarget_lock_release_recursive>:
 8036f74:	4770      	bx	lr

08036f76 <__swhatbuf_r>:
 8036f76:	b570      	push	{r4, r5, r6, lr}
 8036f78:	460e      	mov	r6, r1
 8036f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8036f7e:	2900      	cmp	r1, #0
 8036f80:	b096      	sub	sp, #88	; 0x58
 8036f82:	4614      	mov	r4, r2
 8036f84:	461d      	mov	r5, r3
 8036f86:	da08      	bge.n	8036f9a <__swhatbuf_r+0x24>
 8036f88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8036f8c:	2200      	movs	r2, #0
 8036f8e:	602a      	str	r2, [r5, #0]
 8036f90:	061a      	lsls	r2, r3, #24
 8036f92:	d410      	bmi.n	8036fb6 <__swhatbuf_r+0x40>
 8036f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8036f98:	e00e      	b.n	8036fb8 <__swhatbuf_r+0x42>
 8036f9a:	466a      	mov	r2, sp
 8036f9c:	f000 fde6 	bl	8037b6c <_fstat_r>
 8036fa0:	2800      	cmp	r0, #0
 8036fa2:	dbf1      	blt.n	8036f88 <__swhatbuf_r+0x12>
 8036fa4:	9a01      	ldr	r2, [sp, #4]
 8036fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8036faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8036fae:	425a      	negs	r2, r3
 8036fb0:	415a      	adcs	r2, r3
 8036fb2:	602a      	str	r2, [r5, #0]
 8036fb4:	e7ee      	b.n	8036f94 <__swhatbuf_r+0x1e>
 8036fb6:	2340      	movs	r3, #64	; 0x40
 8036fb8:	2000      	movs	r0, #0
 8036fba:	6023      	str	r3, [r4, #0]
 8036fbc:	b016      	add	sp, #88	; 0x58
 8036fbe:	bd70      	pop	{r4, r5, r6, pc}

08036fc0 <__smakebuf_r>:
 8036fc0:	898b      	ldrh	r3, [r1, #12]
 8036fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8036fc4:	079d      	lsls	r5, r3, #30
 8036fc6:	4606      	mov	r6, r0
 8036fc8:	460c      	mov	r4, r1
 8036fca:	d507      	bpl.n	8036fdc <__smakebuf_r+0x1c>
 8036fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8036fd0:	6023      	str	r3, [r4, #0]
 8036fd2:	6123      	str	r3, [r4, #16]
 8036fd4:	2301      	movs	r3, #1
 8036fd6:	6163      	str	r3, [r4, #20]
 8036fd8:	b002      	add	sp, #8
 8036fda:	bd70      	pop	{r4, r5, r6, pc}
 8036fdc:	ab01      	add	r3, sp, #4
 8036fde:	466a      	mov	r2, sp
 8036fe0:	f7ff ffc9 	bl	8036f76 <__swhatbuf_r>
 8036fe4:	9900      	ldr	r1, [sp, #0]
 8036fe6:	4605      	mov	r5, r0
 8036fe8:	4630      	mov	r0, r6
 8036fea:	f7fe f9cd 	bl	8035388 <_malloc_r>
 8036fee:	b948      	cbnz	r0, 8037004 <__smakebuf_r+0x44>
 8036ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036ff4:	059a      	lsls	r2, r3, #22
 8036ff6:	d4ef      	bmi.n	8036fd8 <__smakebuf_r+0x18>
 8036ff8:	f023 0303 	bic.w	r3, r3, #3
 8036ffc:	f043 0302 	orr.w	r3, r3, #2
 8037000:	81a3      	strh	r3, [r4, #12]
 8037002:	e7e3      	b.n	8036fcc <__smakebuf_r+0xc>
 8037004:	4b0d      	ldr	r3, [pc, #52]	; (803703c <__smakebuf_r+0x7c>)
 8037006:	62b3      	str	r3, [r6, #40]	; 0x28
 8037008:	89a3      	ldrh	r3, [r4, #12]
 803700a:	6020      	str	r0, [r4, #0]
 803700c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8037010:	81a3      	strh	r3, [r4, #12]
 8037012:	9b00      	ldr	r3, [sp, #0]
 8037014:	6163      	str	r3, [r4, #20]
 8037016:	9b01      	ldr	r3, [sp, #4]
 8037018:	6120      	str	r0, [r4, #16]
 803701a:	b15b      	cbz	r3, 8037034 <__smakebuf_r+0x74>
 803701c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8037020:	4630      	mov	r0, r6
 8037022:	f000 fdb5 	bl	8037b90 <_isatty_r>
 8037026:	b128      	cbz	r0, 8037034 <__smakebuf_r+0x74>
 8037028:	89a3      	ldrh	r3, [r4, #12]
 803702a:	f023 0303 	bic.w	r3, r3, #3
 803702e:	f043 0301 	orr.w	r3, r3, #1
 8037032:	81a3      	strh	r3, [r4, #12]
 8037034:	89a0      	ldrh	r0, [r4, #12]
 8037036:	4305      	orrs	r5, r0
 8037038:	81a5      	strh	r5, [r4, #12]
 803703a:	e7cd      	b.n	8036fd8 <__smakebuf_r+0x18>
 803703c:	08036dc5 	.word	0x08036dc5

08037040 <__malloc_lock>:
 8037040:	4801      	ldr	r0, [pc, #4]	; (8037048 <__malloc_lock+0x8>)
 8037042:	f7ff bf96 	b.w	8036f72 <__retarget_lock_acquire_recursive>
 8037046:	bf00      	nop
 8037048:	2000ce78 	.word	0x2000ce78

0803704c <__malloc_unlock>:
 803704c:	4801      	ldr	r0, [pc, #4]	; (8037054 <__malloc_unlock+0x8>)
 803704e:	f7ff bf91 	b.w	8036f74 <__retarget_lock_release_recursive>
 8037052:	bf00      	nop
 8037054:	2000ce78 	.word	0x2000ce78

08037058 <_Balloc>:
 8037058:	b570      	push	{r4, r5, r6, lr}
 803705a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 803705c:	4604      	mov	r4, r0
 803705e:	460d      	mov	r5, r1
 8037060:	b976      	cbnz	r6, 8037080 <_Balloc+0x28>
 8037062:	2010      	movs	r0, #16
 8037064:	f7fe f8d4 	bl	8035210 <malloc>
 8037068:	4602      	mov	r2, r0
 803706a:	6260      	str	r0, [r4, #36]	; 0x24
 803706c:	b920      	cbnz	r0, 8037078 <_Balloc+0x20>
 803706e:	4b18      	ldr	r3, [pc, #96]	; (80370d0 <_Balloc+0x78>)
 8037070:	4818      	ldr	r0, [pc, #96]	; (80370d4 <_Balloc+0x7c>)
 8037072:	2166      	movs	r1, #102	; 0x66
 8037074:	f000 fd3a 	bl	8037aec <__assert_func>
 8037078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803707c:	6006      	str	r6, [r0, #0]
 803707e:	60c6      	str	r6, [r0, #12]
 8037080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8037082:	68f3      	ldr	r3, [r6, #12]
 8037084:	b183      	cbz	r3, 80370a8 <_Balloc+0x50>
 8037086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8037088:	68db      	ldr	r3, [r3, #12]
 803708a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803708e:	b9b8      	cbnz	r0, 80370c0 <_Balloc+0x68>
 8037090:	2101      	movs	r1, #1
 8037092:	fa01 f605 	lsl.w	r6, r1, r5
 8037096:	1d72      	adds	r2, r6, #5
 8037098:	0092      	lsls	r2, r2, #2
 803709a:	4620      	mov	r0, r4
 803709c:	f000 fb60 	bl	8037760 <_calloc_r>
 80370a0:	b160      	cbz	r0, 80370bc <_Balloc+0x64>
 80370a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80370a6:	e00e      	b.n	80370c6 <_Balloc+0x6e>
 80370a8:	2221      	movs	r2, #33	; 0x21
 80370aa:	2104      	movs	r1, #4
 80370ac:	4620      	mov	r0, r4
 80370ae:	f000 fb57 	bl	8037760 <_calloc_r>
 80370b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80370b4:	60f0      	str	r0, [r6, #12]
 80370b6:	68db      	ldr	r3, [r3, #12]
 80370b8:	2b00      	cmp	r3, #0
 80370ba:	d1e4      	bne.n	8037086 <_Balloc+0x2e>
 80370bc:	2000      	movs	r0, #0
 80370be:	bd70      	pop	{r4, r5, r6, pc}
 80370c0:	6802      	ldr	r2, [r0, #0]
 80370c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80370c6:	2300      	movs	r3, #0
 80370c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80370cc:	e7f7      	b.n	80370be <_Balloc+0x66>
 80370ce:	bf00      	nop
 80370d0:	0803c245 	.word	0x0803c245
 80370d4:	0803c328 	.word	0x0803c328

080370d8 <_Bfree>:
 80370d8:	b570      	push	{r4, r5, r6, lr}
 80370da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80370dc:	4605      	mov	r5, r0
 80370de:	460c      	mov	r4, r1
 80370e0:	b976      	cbnz	r6, 8037100 <_Bfree+0x28>
 80370e2:	2010      	movs	r0, #16
 80370e4:	f7fe f894 	bl	8035210 <malloc>
 80370e8:	4602      	mov	r2, r0
 80370ea:	6268      	str	r0, [r5, #36]	; 0x24
 80370ec:	b920      	cbnz	r0, 80370f8 <_Bfree+0x20>
 80370ee:	4b09      	ldr	r3, [pc, #36]	; (8037114 <_Bfree+0x3c>)
 80370f0:	4809      	ldr	r0, [pc, #36]	; (8037118 <_Bfree+0x40>)
 80370f2:	218a      	movs	r1, #138	; 0x8a
 80370f4:	f000 fcfa 	bl	8037aec <__assert_func>
 80370f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80370fc:	6006      	str	r6, [r0, #0]
 80370fe:	60c6      	str	r6, [r0, #12]
 8037100:	b13c      	cbz	r4, 8037112 <_Bfree+0x3a>
 8037102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8037104:	6862      	ldr	r2, [r4, #4]
 8037106:	68db      	ldr	r3, [r3, #12]
 8037108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803710c:	6021      	str	r1, [r4, #0]
 803710e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8037112:	bd70      	pop	{r4, r5, r6, pc}
 8037114:	0803c245 	.word	0x0803c245
 8037118:	0803c328 	.word	0x0803c328

0803711c <__multadd>:
 803711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037120:	690d      	ldr	r5, [r1, #16]
 8037122:	4607      	mov	r7, r0
 8037124:	460c      	mov	r4, r1
 8037126:	461e      	mov	r6, r3
 8037128:	f101 0c14 	add.w	ip, r1, #20
 803712c:	2000      	movs	r0, #0
 803712e:	f8dc 3000 	ldr.w	r3, [ip]
 8037132:	b299      	uxth	r1, r3
 8037134:	fb02 6101 	mla	r1, r2, r1, r6
 8037138:	0c1e      	lsrs	r6, r3, #16
 803713a:	0c0b      	lsrs	r3, r1, #16
 803713c:	fb02 3306 	mla	r3, r2, r6, r3
 8037140:	b289      	uxth	r1, r1
 8037142:	3001      	adds	r0, #1
 8037144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8037148:	4285      	cmp	r5, r0
 803714a:	f84c 1b04 	str.w	r1, [ip], #4
 803714e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8037152:	dcec      	bgt.n	803712e <__multadd+0x12>
 8037154:	b30e      	cbz	r6, 803719a <__multadd+0x7e>
 8037156:	68a3      	ldr	r3, [r4, #8]
 8037158:	42ab      	cmp	r3, r5
 803715a:	dc19      	bgt.n	8037190 <__multadd+0x74>
 803715c:	6861      	ldr	r1, [r4, #4]
 803715e:	4638      	mov	r0, r7
 8037160:	3101      	adds	r1, #1
 8037162:	f7ff ff79 	bl	8037058 <_Balloc>
 8037166:	4680      	mov	r8, r0
 8037168:	b928      	cbnz	r0, 8037176 <__multadd+0x5a>
 803716a:	4602      	mov	r2, r0
 803716c:	4b0c      	ldr	r3, [pc, #48]	; (80371a0 <__multadd+0x84>)
 803716e:	480d      	ldr	r0, [pc, #52]	; (80371a4 <__multadd+0x88>)
 8037170:	21b5      	movs	r1, #181	; 0xb5
 8037172:	f000 fcbb 	bl	8037aec <__assert_func>
 8037176:	6922      	ldr	r2, [r4, #16]
 8037178:	3202      	adds	r2, #2
 803717a:	f104 010c 	add.w	r1, r4, #12
 803717e:	0092      	lsls	r2, r2, #2
 8037180:	300c      	adds	r0, #12
 8037182:	f7fe f865 	bl	8035250 <memcpy>
 8037186:	4621      	mov	r1, r4
 8037188:	4638      	mov	r0, r7
 803718a:	f7ff ffa5 	bl	80370d8 <_Bfree>
 803718e:	4644      	mov	r4, r8
 8037190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8037194:	3501      	adds	r5, #1
 8037196:	615e      	str	r6, [r3, #20]
 8037198:	6125      	str	r5, [r4, #16]
 803719a:	4620      	mov	r0, r4
 803719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80371a0:	0803c2b7 	.word	0x0803c2b7
 80371a4:	0803c328 	.word	0x0803c328

080371a8 <__hi0bits>:
 80371a8:	0c03      	lsrs	r3, r0, #16
 80371aa:	041b      	lsls	r3, r3, #16
 80371ac:	b9d3      	cbnz	r3, 80371e4 <__hi0bits+0x3c>
 80371ae:	0400      	lsls	r0, r0, #16
 80371b0:	2310      	movs	r3, #16
 80371b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80371b6:	bf04      	itt	eq
 80371b8:	0200      	lsleq	r0, r0, #8
 80371ba:	3308      	addeq	r3, #8
 80371bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80371c0:	bf04      	itt	eq
 80371c2:	0100      	lsleq	r0, r0, #4
 80371c4:	3304      	addeq	r3, #4
 80371c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80371ca:	bf04      	itt	eq
 80371cc:	0080      	lsleq	r0, r0, #2
 80371ce:	3302      	addeq	r3, #2
 80371d0:	2800      	cmp	r0, #0
 80371d2:	db05      	blt.n	80371e0 <__hi0bits+0x38>
 80371d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80371d8:	f103 0301 	add.w	r3, r3, #1
 80371dc:	bf08      	it	eq
 80371de:	2320      	moveq	r3, #32
 80371e0:	4618      	mov	r0, r3
 80371e2:	4770      	bx	lr
 80371e4:	2300      	movs	r3, #0
 80371e6:	e7e4      	b.n	80371b2 <__hi0bits+0xa>

080371e8 <__lo0bits>:
 80371e8:	6803      	ldr	r3, [r0, #0]
 80371ea:	f013 0207 	ands.w	r2, r3, #7
 80371ee:	4601      	mov	r1, r0
 80371f0:	d00b      	beq.n	803720a <__lo0bits+0x22>
 80371f2:	07da      	lsls	r2, r3, #31
 80371f4:	d423      	bmi.n	803723e <__lo0bits+0x56>
 80371f6:	0798      	lsls	r0, r3, #30
 80371f8:	bf49      	itett	mi
 80371fa:	085b      	lsrmi	r3, r3, #1
 80371fc:	089b      	lsrpl	r3, r3, #2
 80371fe:	2001      	movmi	r0, #1
 8037200:	600b      	strmi	r3, [r1, #0]
 8037202:	bf5c      	itt	pl
 8037204:	600b      	strpl	r3, [r1, #0]
 8037206:	2002      	movpl	r0, #2
 8037208:	4770      	bx	lr
 803720a:	b298      	uxth	r0, r3
 803720c:	b9a8      	cbnz	r0, 803723a <__lo0bits+0x52>
 803720e:	0c1b      	lsrs	r3, r3, #16
 8037210:	2010      	movs	r0, #16
 8037212:	b2da      	uxtb	r2, r3
 8037214:	b90a      	cbnz	r2, 803721a <__lo0bits+0x32>
 8037216:	3008      	adds	r0, #8
 8037218:	0a1b      	lsrs	r3, r3, #8
 803721a:	071a      	lsls	r2, r3, #28
 803721c:	bf04      	itt	eq
 803721e:	091b      	lsreq	r3, r3, #4
 8037220:	3004      	addeq	r0, #4
 8037222:	079a      	lsls	r2, r3, #30
 8037224:	bf04      	itt	eq
 8037226:	089b      	lsreq	r3, r3, #2
 8037228:	3002      	addeq	r0, #2
 803722a:	07da      	lsls	r2, r3, #31
 803722c:	d403      	bmi.n	8037236 <__lo0bits+0x4e>
 803722e:	085b      	lsrs	r3, r3, #1
 8037230:	f100 0001 	add.w	r0, r0, #1
 8037234:	d005      	beq.n	8037242 <__lo0bits+0x5a>
 8037236:	600b      	str	r3, [r1, #0]
 8037238:	4770      	bx	lr
 803723a:	4610      	mov	r0, r2
 803723c:	e7e9      	b.n	8037212 <__lo0bits+0x2a>
 803723e:	2000      	movs	r0, #0
 8037240:	4770      	bx	lr
 8037242:	2020      	movs	r0, #32
 8037244:	4770      	bx	lr
	...

08037248 <__i2b>:
 8037248:	b510      	push	{r4, lr}
 803724a:	460c      	mov	r4, r1
 803724c:	2101      	movs	r1, #1
 803724e:	f7ff ff03 	bl	8037058 <_Balloc>
 8037252:	4602      	mov	r2, r0
 8037254:	b928      	cbnz	r0, 8037262 <__i2b+0x1a>
 8037256:	4b05      	ldr	r3, [pc, #20]	; (803726c <__i2b+0x24>)
 8037258:	4805      	ldr	r0, [pc, #20]	; (8037270 <__i2b+0x28>)
 803725a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 803725e:	f000 fc45 	bl	8037aec <__assert_func>
 8037262:	2301      	movs	r3, #1
 8037264:	6144      	str	r4, [r0, #20]
 8037266:	6103      	str	r3, [r0, #16]
 8037268:	bd10      	pop	{r4, pc}
 803726a:	bf00      	nop
 803726c:	0803c2b7 	.word	0x0803c2b7
 8037270:	0803c328 	.word	0x0803c328

08037274 <__multiply>:
 8037274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037278:	4691      	mov	r9, r2
 803727a:	690a      	ldr	r2, [r1, #16]
 803727c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8037280:	429a      	cmp	r2, r3
 8037282:	bfb8      	it	lt
 8037284:	460b      	movlt	r3, r1
 8037286:	460c      	mov	r4, r1
 8037288:	bfbc      	itt	lt
 803728a:	464c      	movlt	r4, r9
 803728c:	4699      	movlt	r9, r3
 803728e:	6927      	ldr	r7, [r4, #16]
 8037290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8037294:	68a3      	ldr	r3, [r4, #8]
 8037296:	6861      	ldr	r1, [r4, #4]
 8037298:	eb07 060a 	add.w	r6, r7, sl
 803729c:	42b3      	cmp	r3, r6
 803729e:	b085      	sub	sp, #20
 80372a0:	bfb8      	it	lt
 80372a2:	3101      	addlt	r1, #1
 80372a4:	f7ff fed8 	bl	8037058 <_Balloc>
 80372a8:	b930      	cbnz	r0, 80372b8 <__multiply+0x44>
 80372aa:	4602      	mov	r2, r0
 80372ac:	4b44      	ldr	r3, [pc, #272]	; (80373c0 <__multiply+0x14c>)
 80372ae:	4845      	ldr	r0, [pc, #276]	; (80373c4 <__multiply+0x150>)
 80372b0:	f240 115d 	movw	r1, #349	; 0x15d
 80372b4:	f000 fc1a 	bl	8037aec <__assert_func>
 80372b8:	f100 0514 	add.w	r5, r0, #20
 80372bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80372c0:	462b      	mov	r3, r5
 80372c2:	2200      	movs	r2, #0
 80372c4:	4543      	cmp	r3, r8
 80372c6:	d321      	bcc.n	803730c <__multiply+0x98>
 80372c8:	f104 0314 	add.w	r3, r4, #20
 80372cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80372d0:	f109 0314 	add.w	r3, r9, #20
 80372d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80372d8:	9202      	str	r2, [sp, #8]
 80372da:	1b3a      	subs	r2, r7, r4
 80372dc:	3a15      	subs	r2, #21
 80372de:	f022 0203 	bic.w	r2, r2, #3
 80372e2:	3204      	adds	r2, #4
 80372e4:	f104 0115 	add.w	r1, r4, #21
 80372e8:	428f      	cmp	r7, r1
 80372ea:	bf38      	it	cc
 80372ec:	2204      	movcc	r2, #4
 80372ee:	9201      	str	r2, [sp, #4]
 80372f0:	9a02      	ldr	r2, [sp, #8]
 80372f2:	9303      	str	r3, [sp, #12]
 80372f4:	429a      	cmp	r2, r3
 80372f6:	d80c      	bhi.n	8037312 <__multiply+0x9e>
 80372f8:	2e00      	cmp	r6, #0
 80372fa:	dd03      	ble.n	8037304 <__multiply+0x90>
 80372fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8037300:	2b00      	cmp	r3, #0
 8037302:	d05a      	beq.n	80373ba <__multiply+0x146>
 8037304:	6106      	str	r6, [r0, #16]
 8037306:	b005      	add	sp, #20
 8037308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803730c:	f843 2b04 	str.w	r2, [r3], #4
 8037310:	e7d8      	b.n	80372c4 <__multiply+0x50>
 8037312:	f8b3 a000 	ldrh.w	sl, [r3]
 8037316:	f1ba 0f00 	cmp.w	sl, #0
 803731a:	d024      	beq.n	8037366 <__multiply+0xf2>
 803731c:	f104 0e14 	add.w	lr, r4, #20
 8037320:	46a9      	mov	r9, r5
 8037322:	f04f 0c00 	mov.w	ip, #0
 8037326:	f85e 2b04 	ldr.w	r2, [lr], #4
 803732a:	f8d9 1000 	ldr.w	r1, [r9]
 803732e:	fa1f fb82 	uxth.w	fp, r2
 8037332:	b289      	uxth	r1, r1
 8037334:	fb0a 110b 	mla	r1, sl, fp, r1
 8037338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 803733c:	f8d9 2000 	ldr.w	r2, [r9]
 8037340:	4461      	add	r1, ip
 8037342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8037346:	fb0a c20b 	mla	r2, sl, fp, ip
 803734a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 803734e:	b289      	uxth	r1, r1
 8037350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8037354:	4577      	cmp	r7, lr
 8037356:	f849 1b04 	str.w	r1, [r9], #4
 803735a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 803735e:	d8e2      	bhi.n	8037326 <__multiply+0xb2>
 8037360:	9a01      	ldr	r2, [sp, #4]
 8037362:	f845 c002 	str.w	ip, [r5, r2]
 8037366:	9a03      	ldr	r2, [sp, #12]
 8037368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 803736c:	3304      	adds	r3, #4
 803736e:	f1b9 0f00 	cmp.w	r9, #0
 8037372:	d020      	beq.n	80373b6 <__multiply+0x142>
 8037374:	6829      	ldr	r1, [r5, #0]
 8037376:	f104 0c14 	add.w	ip, r4, #20
 803737a:	46ae      	mov	lr, r5
 803737c:	f04f 0a00 	mov.w	sl, #0
 8037380:	f8bc b000 	ldrh.w	fp, [ip]
 8037384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8037388:	fb09 220b 	mla	r2, r9, fp, r2
 803738c:	4492      	add	sl, r2
 803738e:	b289      	uxth	r1, r1
 8037390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8037394:	f84e 1b04 	str.w	r1, [lr], #4
 8037398:	f85c 2b04 	ldr.w	r2, [ip], #4
 803739c:	f8be 1000 	ldrh.w	r1, [lr]
 80373a0:	0c12      	lsrs	r2, r2, #16
 80373a2:	fb09 1102 	mla	r1, r9, r2, r1
 80373a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80373aa:	4567      	cmp	r7, ip
 80373ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80373b0:	d8e6      	bhi.n	8037380 <__multiply+0x10c>
 80373b2:	9a01      	ldr	r2, [sp, #4]
 80373b4:	50a9      	str	r1, [r5, r2]
 80373b6:	3504      	adds	r5, #4
 80373b8:	e79a      	b.n	80372f0 <__multiply+0x7c>
 80373ba:	3e01      	subs	r6, #1
 80373bc:	e79c      	b.n	80372f8 <__multiply+0x84>
 80373be:	bf00      	nop
 80373c0:	0803c2b7 	.word	0x0803c2b7
 80373c4:	0803c328 	.word	0x0803c328

080373c8 <__pow5mult>:
 80373c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80373cc:	4615      	mov	r5, r2
 80373ce:	f012 0203 	ands.w	r2, r2, #3
 80373d2:	4606      	mov	r6, r0
 80373d4:	460f      	mov	r7, r1
 80373d6:	d007      	beq.n	80373e8 <__pow5mult+0x20>
 80373d8:	4c25      	ldr	r4, [pc, #148]	; (8037470 <__pow5mult+0xa8>)
 80373da:	3a01      	subs	r2, #1
 80373dc:	2300      	movs	r3, #0
 80373de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80373e2:	f7ff fe9b 	bl	803711c <__multadd>
 80373e6:	4607      	mov	r7, r0
 80373e8:	10ad      	asrs	r5, r5, #2
 80373ea:	d03d      	beq.n	8037468 <__pow5mult+0xa0>
 80373ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80373ee:	b97c      	cbnz	r4, 8037410 <__pow5mult+0x48>
 80373f0:	2010      	movs	r0, #16
 80373f2:	f7fd ff0d 	bl	8035210 <malloc>
 80373f6:	4602      	mov	r2, r0
 80373f8:	6270      	str	r0, [r6, #36]	; 0x24
 80373fa:	b928      	cbnz	r0, 8037408 <__pow5mult+0x40>
 80373fc:	4b1d      	ldr	r3, [pc, #116]	; (8037474 <__pow5mult+0xac>)
 80373fe:	481e      	ldr	r0, [pc, #120]	; (8037478 <__pow5mult+0xb0>)
 8037400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8037404:	f000 fb72 	bl	8037aec <__assert_func>
 8037408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803740c:	6004      	str	r4, [r0, #0]
 803740e:	60c4      	str	r4, [r0, #12]
 8037410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8037414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8037418:	b94c      	cbnz	r4, 803742e <__pow5mult+0x66>
 803741a:	f240 2171 	movw	r1, #625	; 0x271
 803741e:	4630      	mov	r0, r6
 8037420:	f7ff ff12 	bl	8037248 <__i2b>
 8037424:	2300      	movs	r3, #0
 8037426:	f8c8 0008 	str.w	r0, [r8, #8]
 803742a:	4604      	mov	r4, r0
 803742c:	6003      	str	r3, [r0, #0]
 803742e:	f04f 0900 	mov.w	r9, #0
 8037432:	07eb      	lsls	r3, r5, #31
 8037434:	d50a      	bpl.n	803744c <__pow5mult+0x84>
 8037436:	4639      	mov	r1, r7
 8037438:	4622      	mov	r2, r4
 803743a:	4630      	mov	r0, r6
 803743c:	f7ff ff1a 	bl	8037274 <__multiply>
 8037440:	4639      	mov	r1, r7
 8037442:	4680      	mov	r8, r0
 8037444:	4630      	mov	r0, r6
 8037446:	f7ff fe47 	bl	80370d8 <_Bfree>
 803744a:	4647      	mov	r7, r8
 803744c:	106d      	asrs	r5, r5, #1
 803744e:	d00b      	beq.n	8037468 <__pow5mult+0xa0>
 8037450:	6820      	ldr	r0, [r4, #0]
 8037452:	b938      	cbnz	r0, 8037464 <__pow5mult+0x9c>
 8037454:	4622      	mov	r2, r4
 8037456:	4621      	mov	r1, r4
 8037458:	4630      	mov	r0, r6
 803745a:	f7ff ff0b 	bl	8037274 <__multiply>
 803745e:	6020      	str	r0, [r4, #0]
 8037460:	f8c0 9000 	str.w	r9, [r0]
 8037464:	4604      	mov	r4, r0
 8037466:	e7e4      	b.n	8037432 <__pow5mult+0x6a>
 8037468:	4638      	mov	r0, r7
 803746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803746e:	bf00      	nop
 8037470:	0803c478 	.word	0x0803c478
 8037474:	0803c245 	.word	0x0803c245
 8037478:	0803c328 	.word	0x0803c328

0803747c <__lshift>:
 803747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037480:	460c      	mov	r4, r1
 8037482:	6849      	ldr	r1, [r1, #4]
 8037484:	6923      	ldr	r3, [r4, #16]
 8037486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803748a:	68a3      	ldr	r3, [r4, #8]
 803748c:	4607      	mov	r7, r0
 803748e:	4691      	mov	r9, r2
 8037490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8037494:	f108 0601 	add.w	r6, r8, #1
 8037498:	42b3      	cmp	r3, r6
 803749a:	db0b      	blt.n	80374b4 <__lshift+0x38>
 803749c:	4638      	mov	r0, r7
 803749e:	f7ff fddb 	bl	8037058 <_Balloc>
 80374a2:	4605      	mov	r5, r0
 80374a4:	b948      	cbnz	r0, 80374ba <__lshift+0x3e>
 80374a6:	4602      	mov	r2, r0
 80374a8:	4b2a      	ldr	r3, [pc, #168]	; (8037554 <__lshift+0xd8>)
 80374aa:	482b      	ldr	r0, [pc, #172]	; (8037558 <__lshift+0xdc>)
 80374ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80374b0:	f000 fb1c 	bl	8037aec <__assert_func>
 80374b4:	3101      	adds	r1, #1
 80374b6:	005b      	lsls	r3, r3, #1
 80374b8:	e7ee      	b.n	8037498 <__lshift+0x1c>
 80374ba:	2300      	movs	r3, #0
 80374bc:	f100 0114 	add.w	r1, r0, #20
 80374c0:	f100 0210 	add.w	r2, r0, #16
 80374c4:	4618      	mov	r0, r3
 80374c6:	4553      	cmp	r3, sl
 80374c8:	db37      	blt.n	803753a <__lshift+0xbe>
 80374ca:	6920      	ldr	r0, [r4, #16]
 80374cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80374d0:	f104 0314 	add.w	r3, r4, #20
 80374d4:	f019 091f 	ands.w	r9, r9, #31
 80374d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80374dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80374e0:	d02f      	beq.n	8037542 <__lshift+0xc6>
 80374e2:	f1c9 0e20 	rsb	lr, r9, #32
 80374e6:	468a      	mov	sl, r1
 80374e8:	f04f 0c00 	mov.w	ip, #0
 80374ec:	681a      	ldr	r2, [r3, #0]
 80374ee:	fa02 f209 	lsl.w	r2, r2, r9
 80374f2:	ea42 020c 	orr.w	r2, r2, ip
 80374f6:	f84a 2b04 	str.w	r2, [sl], #4
 80374fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80374fe:	4298      	cmp	r0, r3
 8037500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8037504:	d8f2      	bhi.n	80374ec <__lshift+0x70>
 8037506:	1b03      	subs	r3, r0, r4
 8037508:	3b15      	subs	r3, #21
 803750a:	f023 0303 	bic.w	r3, r3, #3
 803750e:	3304      	adds	r3, #4
 8037510:	f104 0215 	add.w	r2, r4, #21
 8037514:	4290      	cmp	r0, r2
 8037516:	bf38      	it	cc
 8037518:	2304      	movcc	r3, #4
 803751a:	f841 c003 	str.w	ip, [r1, r3]
 803751e:	f1bc 0f00 	cmp.w	ip, #0
 8037522:	d001      	beq.n	8037528 <__lshift+0xac>
 8037524:	f108 0602 	add.w	r6, r8, #2
 8037528:	3e01      	subs	r6, #1
 803752a:	4638      	mov	r0, r7
 803752c:	612e      	str	r6, [r5, #16]
 803752e:	4621      	mov	r1, r4
 8037530:	f7ff fdd2 	bl	80370d8 <_Bfree>
 8037534:	4628      	mov	r0, r5
 8037536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803753a:	f842 0f04 	str.w	r0, [r2, #4]!
 803753e:	3301      	adds	r3, #1
 8037540:	e7c1      	b.n	80374c6 <__lshift+0x4a>
 8037542:	3904      	subs	r1, #4
 8037544:	f853 2b04 	ldr.w	r2, [r3], #4
 8037548:	f841 2f04 	str.w	r2, [r1, #4]!
 803754c:	4298      	cmp	r0, r3
 803754e:	d8f9      	bhi.n	8037544 <__lshift+0xc8>
 8037550:	e7ea      	b.n	8037528 <__lshift+0xac>
 8037552:	bf00      	nop
 8037554:	0803c2b7 	.word	0x0803c2b7
 8037558:	0803c328 	.word	0x0803c328

0803755c <__mcmp>:
 803755c:	b530      	push	{r4, r5, lr}
 803755e:	6902      	ldr	r2, [r0, #16]
 8037560:	690c      	ldr	r4, [r1, #16]
 8037562:	1b12      	subs	r2, r2, r4
 8037564:	d10e      	bne.n	8037584 <__mcmp+0x28>
 8037566:	f100 0314 	add.w	r3, r0, #20
 803756a:	3114      	adds	r1, #20
 803756c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8037570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8037574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8037578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 803757c:	42a5      	cmp	r5, r4
 803757e:	d003      	beq.n	8037588 <__mcmp+0x2c>
 8037580:	d305      	bcc.n	803758e <__mcmp+0x32>
 8037582:	2201      	movs	r2, #1
 8037584:	4610      	mov	r0, r2
 8037586:	bd30      	pop	{r4, r5, pc}
 8037588:	4283      	cmp	r3, r0
 803758a:	d3f3      	bcc.n	8037574 <__mcmp+0x18>
 803758c:	e7fa      	b.n	8037584 <__mcmp+0x28>
 803758e:	f04f 32ff 	mov.w	r2, #4294967295
 8037592:	e7f7      	b.n	8037584 <__mcmp+0x28>

08037594 <__mdiff>:
 8037594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037598:	460c      	mov	r4, r1
 803759a:	4606      	mov	r6, r0
 803759c:	4611      	mov	r1, r2
 803759e:	4620      	mov	r0, r4
 80375a0:	4690      	mov	r8, r2
 80375a2:	f7ff ffdb 	bl	803755c <__mcmp>
 80375a6:	1e05      	subs	r5, r0, #0
 80375a8:	d110      	bne.n	80375cc <__mdiff+0x38>
 80375aa:	4629      	mov	r1, r5
 80375ac:	4630      	mov	r0, r6
 80375ae:	f7ff fd53 	bl	8037058 <_Balloc>
 80375b2:	b930      	cbnz	r0, 80375c2 <__mdiff+0x2e>
 80375b4:	4b3a      	ldr	r3, [pc, #232]	; (80376a0 <__mdiff+0x10c>)
 80375b6:	4602      	mov	r2, r0
 80375b8:	f240 2132 	movw	r1, #562	; 0x232
 80375bc:	4839      	ldr	r0, [pc, #228]	; (80376a4 <__mdiff+0x110>)
 80375be:	f000 fa95 	bl	8037aec <__assert_func>
 80375c2:	2301      	movs	r3, #1
 80375c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80375c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80375cc:	bfa4      	itt	ge
 80375ce:	4643      	movge	r3, r8
 80375d0:	46a0      	movge	r8, r4
 80375d2:	4630      	mov	r0, r6
 80375d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80375d8:	bfa6      	itte	ge
 80375da:	461c      	movge	r4, r3
 80375dc:	2500      	movge	r5, #0
 80375de:	2501      	movlt	r5, #1
 80375e0:	f7ff fd3a 	bl	8037058 <_Balloc>
 80375e4:	b920      	cbnz	r0, 80375f0 <__mdiff+0x5c>
 80375e6:	4b2e      	ldr	r3, [pc, #184]	; (80376a0 <__mdiff+0x10c>)
 80375e8:	4602      	mov	r2, r0
 80375ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80375ee:	e7e5      	b.n	80375bc <__mdiff+0x28>
 80375f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80375f4:	6926      	ldr	r6, [r4, #16]
 80375f6:	60c5      	str	r5, [r0, #12]
 80375f8:	f104 0914 	add.w	r9, r4, #20
 80375fc:	f108 0514 	add.w	r5, r8, #20
 8037600:	f100 0e14 	add.w	lr, r0, #20
 8037604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8037608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 803760c:	f108 0210 	add.w	r2, r8, #16
 8037610:	46f2      	mov	sl, lr
 8037612:	2100      	movs	r1, #0
 8037614:	f859 3b04 	ldr.w	r3, [r9], #4
 8037618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 803761c:	fa1f f883 	uxth.w	r8, r3
 8037620:	fa11 f18b 	uxtah	r1, r1, fp
 8037624:	0c1b      	lsrs	r3, r3, #16
 8037626:	eba1 0808 	sub.w	r8, r1, r8
 803762a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 803762e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8037632:	fa1f f888 	uxth.w	r8, r8
 8037636:	1419      	asrs	r1, r3, #16
 8037638:	454e      	cmp	r6, r9
 803763a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 803763e:	f84a 3b04 	str.w	r3, [sl], #4
 8037642:	d8e7      	bhi.n	8037614 <__mdiff+0x80>
 8037644:	1b33      	subs	r3, r6, r4
 8037646:	3b15      	subs	r3, #21
 8037648:	f023 0303 	bic.w	r3, r3, #3
 803764c:	3304      	adds	r3, #4
 803764e:	3415      	adds	r4, #21
 8037650:	42a6      	cmp	r6, r4
 8037652:	bf38      	it	cc
 8037654:	2304      	movcc	r3, #4
 8037656:	441d      	add	r5, r3
 8037658:	4473      	add	r3, lr
 803765a:	469e      	mov	lr, r3
 803765c:	462e      	mov	r6, r5
 803765e:	4566      	cmp	r6, ip
 8037660:	d30e      	bcc.n	8037680 <__mdiff+0xec>
 8037662:	f10c 0203 	add.w	r2, ip, #3
 8037666:	1b52      	subs	r2, r2, r5
 8037668:	f022 0203 	bic.w	r2, r2, #3
 803766c:	3d03      	subs	r5, #3
 803766e:	45ac      	cmp	ip, r5
 8037670:	bf38      	it	cc
 8037672:	2200      	movcc	r2, #0
 8037674:	441a      	add	r2, r3
 8037676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 803767a:	b17b      	cbz	r3, 803769c <__mdiff+0x108>
 803767c:	6107      	str	r7, [r0, #16]
 803767e:	e7a3      	b.n	80375c8 <__mdiff+0x34>
 8037680:	f856 8b04 	ldr.w	r8, [r6], #4
 8037684:	fa11 f288 	uxtah	r2, r1, r8
 8037688:	1414      	asrs	r4, r2, #16
 803768a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 803768e:	b292      	uxth	r2, r2
 8037690:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8037694:	f84e 2b04 	str.w	r2, [lr], #4
 8037698:	1421      	asrs	r1, r4, #16
 803769a:	e7e0      	b.n	803765e <__mdiff+0xca>
 803769c:	3f01      	subs	r7, #1
 803769e:	e7ea      	b.n	8037676 <__mdiff+0xe2>
 80376a0:	0803c2b7 	.word	0x0803c2b7
 80376a4:	0803c328 	.word	0x0803c328

080376a8 <__d2b>:
 80376a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80376ac:	4689      	mov	r9, r1
 80376ae:	2101      	movs	r1, #1
 80376b0:	ec57 6b10 	vmov	r6, r7, d0
 80376b4:	4690      	mov	r8, r2
 80376b6:	f7ff fccf 	bl	8037058 <_Balloc>
 80376ba:	4604      	mov	r4, r0
 80376bc:	b930      	cbnz	r0, 80376cc <__d2b+0x24>
 80376be:	4602      	mov	r2, r0
 80376c0:	4b25      	ldr	r3, [pc, #148]	; (8037758 <__d2b+0xb0>)
 80376c2:	4826      	ldr	r0, [pc, #152]	; (803775c <__d2b+0xb4>)
 80376c4:	f240 310a 	movw	r1, #778	; 0x30a
 80376c8:	f000 fa10 	bl	8037aec <__assert_func>
 80376cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80376d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80376d4:	bb35      	cbnz	r5, 8037724 <__d2b+0x7c>
 80376d6:	2e00      	cmp	r6, #0
 80376d8:	9301      	str	r3, [sp, #4]
 80376da:	d028      	beq.n	803772e <__d2b+0x86>
 80376dc:	4668      	mov	r0, sp
 80376de:	9600      	str	r6, [sp, #0]
 80376e0:	f7ff fd82 	bl	80371e8 <__lo0bits>
 80376e4:	9900      	ldr	r1, [sp, #0]
 80376e6:	b300      	cbz	r0, 803772a <__d2b+0x82>
 80376e8:	9a01      	ldr	r2, [sp, #4]
 80376ea:	f1c0 0320 	rsb	r3, r0, #32
 80376ee:	fa02 f303 	lsl.w	r3, r2, r3
 80376f2:	430b      	orrs	r3, r1
 80376f4:	40c2      	lsrs	r2, r0
 80376f6:	6163      	str	r3, [r4, #20]
 80376f8:	9201      	str	r2, [sp, #4]
 80376fa:	9b01      	ldr	r3, [sp, #4]
 80376fc:	61a3      	str	r3, [r4, #24]
 80376fe:	2b00      	cmp	r3, #0
 8037700:	bf14      	ite	ne
 8037702:	2202      	movne	r2, #2
 8037704:	2201      	moveq	r2, #1
 8037706:	6122      	str	r2, [r4, #16]
 8037708:	b1d5      	cbz	r5, 8037740 <__d2b+0x98>
 803770a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 803770e:	4405      	add	r5, r0
 8037710:	f8c9 5000 	str.w	r5, [r9]
 8037714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8037718:	f8c8 0000 	str.w	r0, [r8]
 803771c:	4620      	mov	r0, r4
 803771e:	b003      	add	sp, #12
 8037720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8037724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8037728:	e7d5      	b.n	80376d6 <__d2b+0x2e>
 803772a:	6161      	str	r1, [r4, #20]
 803772c:	e7e5      	b.n	80376fa <__d2b+0x52>
 803772e:	a801      	add	r0, sp, #4
 8037730:	f7ff fd5a 	bl	80371e8 <__lo0bits>
 8037734:	9b01      	ldr	r3, [sp, #4]
 8037736:	6163      	str	r3, [r4, #20]
 8037738:	2201      	movs	r2, #1
 803773a:	6122      	str	r2, [r4, #16]
 803773c:	3020      	adds	r0, #32
 803773e:	e7e3      	b.n	8037708 <__d2b+0x60>
 8037740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8037744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8037748:	f8c9 0000 	str.w	r0, [r9]
 803774c:	6918      	ldr	r0, [r3, #16]
 803774e:	f7ff fd2b 	bl	80371a8 <__hi0bits>
 8037752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8037756:	e7df      	b.n	8037718 <__d2b+0x70>
 8037758:	0803c2b7 	.word	0x0803c2b7
 803775c:	0803c328 	.word	0x0803c328

08037760 <_calloc_r>:
 8037760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8037762:	fba1 2402 	umull	r2, r4, r1, r2
 8037766:	b94c      	cbnz	r4, 803777c <_calloc_r+0x1c>
 8037768:	4611      	mov	r1, r2
 803776a:	9201      	str	r2, [sp, #4]
 803776c:	f7fd fe0c 	bl	8035388 <_malloc_r>
 8037770:	9a01      	ldr	r2, [sp, #4]
 8037772:	4605      	mov	r5, r0
 8037774:	b930      	cbnz	r0, 8037784 <_calloc_r+0x24>
 8037776:	4628      	mov	r0, r5
 8037778:	b003      	add	sp, #12
 803777a:	bd30      	pop	{r4, r5, pc}
 803777c:	220c      	movs	r2, #12
 803777e:	6002      	str	r2, [r0, #0]
 8037780:	2500      	movs	r5, #0
 8037782:	e7f8      	b.n	8037776 <_calloc_r+0x16>
 8037784:	4621      	mov	r1, r4
 8037786:	f7fd fd8b 	bl	80352a0 <memset>
 803778a:	e7f4      	b.n	8037776 <_calloc_r+0x16>

0803778c <__sfputc_r>:
 803778c:	6893      	ldr	r3, [r2, #8]
 803778e:	3b01      	subs	r3, #1
 8037790:	2b00      	cmp	r3, #0
 8037792:	b410      	push	{r4}
 8037794:	6093      	str	r3, [r2, #8]
 8037796:	da08      	bge.n	80377aa <__sfputc_r+0x1e>
 8037798:	6994      	ldr	r4, [r2, #24]
 803779a:	42a3      	cmp	r3, r4
 803779c:	db01      	blt.n	80377a2 <__sfputc_r+0x16>
 803779e:	290a      	cmp	r1, #10
 80377a0:	d103      	bne.n	80377aa <__sfputc_r+0x1e>
 80377a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80377a6:	f7fe bb65 	b.w	8035e74 <__swbuf_r>
 80377aa:	6813      	ldr	r3, [r2, #0]
 80377ac:	1c58      	adds	r0, r3, #1
 80377ae:	6010      	str	r0, [r2, #0]
 80377b0:	7019      	strb	r1, [r3, #0]
 80377b2:	4608      	mov	r0, r1
 80377b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80377b8:	4770      	bx	lr

080377ba <__sfputs_r>:
 80377ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80377bc:	4606      	mov	r6, r0
 80377be:	460f      	mov	r7, r1
 80377c0:	4614      	mov	r4, r2
 80377c2:	18d5      	adds	r5, r2, r3
 80377c4:	42ac      	cmp	r4, r5
 80377c6:	d101      	bne.n	80377cc <__sfputs_r+0x12>
 80377c8:	2000      	movs	r0, #0
 80377ca:	e007      	b.n	80377dc <__sfputs_r+0x22>
 80377cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80377d0:	463a      	mov	r2, r7
 80377d2:	4630      	mov	r0, r6
 80377d4:	f7ff ffda 	bl	803778c <__sfputc_r>
 80377d8:	1c43      	adds	r3, r0, #1
 80377da:	d1f3      	bne.n	80377c4 <__sfputs_r+0xa>
 80377dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080377e0 <_vfiprintf_r>:
 80377e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80377e4:	460d      	mov	r5, r1
 80377e6:	b09d      	sub	sp, #116	; 0x74
 80377e8:	4614      	mov	r4, r2
 80377ea:	4698      	mov	r8, r3
 80377ec:	4606      	mov	r6, r0
 80377ee:	b118      	cbz	r0, 80377f8 <_vfiprintf_r+0x18>
 80377f0:	6983      	ldr	r3, [r0, #24]
 80377f2:	b90b      	cbnz	r3, 80377f8 <_vfiprintf_r+0x18>
 80377f4:	f7ff fb1a 	bl	8036e2c <__sinit>
 80377f8:	4b89      	ldr	r3, [pc, #548]	; (8037a20 <_vfiprintf_r+0x240>)
 80377fa:	429d      	cmp	r5, r3
 80377fc:	d11b      	bne.n	8037836 <_vfiprintf_r+0x56>
 80377fe:	6875      	ldr	r5, [r6, #4]
 8037800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8037802:	07d9      	lsls	r1, r3, #31
 8037804:	d405      	bmi.n	8037812 <_vfiprintf_r+0x32>
 8037806:	89ab      	ldrh	r3, [r5, #12]
 8037808:	059a      	lsls	r2, r3, #22
 803780a:	d402      	bmi.n	8037812 <_vfiprintf_r+0x32>
 803780c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803780e:	f7ff fbb0 	bl	8036f72 <__retarget_lock_acquire_recursive>
 8037812:	89ab      	ldrh	r3, [r5, #12]
 8037814:	071b      	lsls	r3, r3, #28
 8037816:	d501      	bpl.n	803781c <_vfiprintf_r+0x3c>
 8037818:	692b      	ldr	r3, [r5, #16]
 803781a:	b9eb      	cbnz	r3, 8037858 <_vfiprintf_r+0x78>
 803781c:	4629      	mov	r1, r5
 803781e:	4630      	mov	r0, r6
 8037820:	f7fe fb7a 	bl	8035f18 <__swsetup_r>
 8037824:	b1c0      	cbz	r0, 8037858 <_vfiprintf_r+0x78>
 8037826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8037828:	07dc      	lsls	r4, r3, #31
 803782a:	d50e      	bpl.n	803784a <_vfiprintf_r+0x6a>
 803782c:	f04f 30ff 	mov.w	r0, #4294967295
 8037830:	b01d      	add	sp, #116	; 0x74
 8037832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037836:	4b7b      	ldr	r3, [pc, #492]	; (8037a24 <_vfiprintf_r+0x244>)
 8037838:	429d      	cmp	r5, r3
 803783a:	d101      	bne.n	8037840 <_vfiprintf_r+0x60>
 803783c:	68b5      	ldr	r5, [r6, #8]
 803783e:	e7df      	b.n	8037800 <_vfiprintf_r+0x20>
 8037840:	4b79      	ldr	r3, [pc, #484]	; (8037a28 <_vfiprintf_r+0x248>)
 8037842:	429d      	cmp	r5, r3
 8037844:	bf08      	it	eq
 8037846:	68f5      	ldreq	r5, [r6, #12]
 8037848:	e7da      	b.n	8037800 <_vfiprintf_r+0x20>
 803784a:	89ab      	ldrh	r3, [r5, #12]
 803784c:	0598      	lsls	r0, r3, #22
 803784e:	d4ed      	bmi.n	803782c <_vfiprintf_r+0x4c>
 8037850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8037852:	f7ff fb8f 	bl	8036f74 <__retarget_lock_release_recursive>
 8037856:	e7e9      	b.n	803782c <_vfiprintf_r+0x4c>
 8037858:	2300      	movs	r3, #0
 803785a:	9309      	str	r3, [sp, #36]	; 0x24
 803785c:	2320      	movs	r3, #32
 803785e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8037862:	f8cd 800c 	str.w	r8, [sp, #12]
 8037866:	2330      	movs	r3, #48	; 0x30
 8037868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8037a2c <_vfiprintf_r+0x24c>
 803786c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8037870:	f04f 0901 	mov.w	r9, #1
 8037874:	4623      	mov	r3, r4
 8037876:	469a      	mov	sl, r3
 8037878:	f813 2b01 	ldrb.w	r2, [r3], #1
 803787c:	b10a      	cbz	r2, 8037882 <_vfiprintf_r+0xa2>
 803787e:	2a25      	cmp	r2, #37	; 0x25
 8037880:	d1f9      	bne.n	8037876 <_vfiprintf_r+0x96>
 8037882:	ebba 0b04 	subs.w	fp, sl, r4
 8037886:	d00b      	beq.n	80378a0 <_vfiprintf_r+0xc0>
 8037888:	465b      	mov	r3, fp
 803788a:	4622      	mov	r2, r4
 803788c:	4629      	mov	r1, r5
 803788e:	4630      	mov	r0, r6
 8037890:	f7ff ff93 	bl	80377ba <__sfputs_r>
 8037894:	3001      	adds	r0, #1
 8037896:	f000 80aa 	beq.w	80379ee <_vfiprintf_r+0x20e>
 803789a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803789c:	445a      	add	r2, fp
 803789e:	9209      	str	r2, [sp, #36]	; 0x24
 80378a0:	f89a 3000 	ldrb.w	r3, [sl]
 80378a4:	2b00      	cmp	r3, #0
 80378a6:	f000 80a2 	beq.w	80379ee <_vfiprintf_r+0x20e>
 80378aa:	2300      	movs	r3, #0
 80378ac:	f04f 32ff 	mov.w	r2, #4294967295
 80378b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80378b4:	f10a 0a01 	add.w	sl, sl, #1
 80378b8:	9304      	str	r3, [sp, #16]
 80378ba:	9307      	str	r3, [sp, #28]
 80378bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80378c0:	931a      	str	r3, [sp, #104]	; 0x68
 80378c2:	4654      	mov	r4, sl
 80378c4:	2205      	movs	r2, #5
 80378c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80378ca:	4858      	ldr	r0, [pc, #352]	; (8037a2c <_vfiprintf_r+0x24c>)
 80378cc:	f7d8 fbc0 	bl	8010050 <memchr>
 80378d0:	9a04      	ldr	r2, [sp, #16]
 80378d2:	b9d8      	cbnz	r0, 803790c <_vfiprintf_r+0x12c>
 80378d4:	06d1      	lsls	r1, r2, #27
 80378d6:	bf44      	itt	mi
 80378d8:	2320      	movmi	r3, #32
 80378da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80378de:	0713      	lsls	r3, r2, #28
 80378e0:	bf44      	itt	mi
 80378e2:	232b      	movmi	r3, #43	; 0x2b
 80378e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80378e8:	f89a 3000 	ldrb.w	r3, [sl]
 80378ec:	2b2a      	cmp	r3, #42	; 0x2a
 80378ee:	d015      	beq.n	803791c <_vfiprintf_r+0x13c>
 80378f0:	9a07      	ldr	r2, [sp, #28]
 80378f2:	4654      	mov	r4, sl
 80378f4:	2000      	movs	r0, #0
 80378f6:	f04f 0c0a 	mov.w	ip, #10
 80378fa:	4621      	mov	r1, r4
 80378fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8037900:	3b30      	subs	r3, #48	; 0x30
 8037902:	2b09      	cmp	r3, #9
 8037904:	d94e      	bls.n	80379a4 <_vfiprintf_r+0x1c4>
 8037906:	b1b0      	cbz	r0, 8037936 <_vfiprintf_r+0x156>
 8037908:	9207      	str	r2, [sp, #28]
 803790a:	e014      	b.n	8037936 <_vfiprintf_r+0x156>
 803790c:	eba0 0308 	sub.w	r3, r0, r8
 8037910:	fa09 f303 	lsl.w	r3, r9, r3
 8037914:	4313      	orrs	r3, r2
 8037916:	9304      	str	r3, [sp, #16]
 8037918:	46a2      	mov	sl, r4
 803791a:	e7d2      	b.n	80378c2 <_vfiprintf_r+0xe2>
 803791c:	9b03      	ldr	r3, [sp, #12]
 803791e:	1d19      	adds	r1, r3, #4
 8037920:	681b      	ldr	r3, [r3, #0]
 8037922:	9103      	str	r1, [sp, #12]
 8037924:	2b00      	cmp	r3, #0
 8037926:	bfbb      	ittet	lt
 8037928:	425b      	neglt	r3, r3
 803792a:	f042 0202 	orrlt.w	r2, r2, #2
 803792e:	9307      	strge	r3, [sp, #28]
 8037930:	9307      	strlt	r3, [sp, #28]
 8037932:	bfb8      	it	lt
 8037934:	9204      	strlt	r2, [sp, #16]
 8037936:	7823      	ldrb	r3, [r4, #0]
 8037938:	2b2e      	cmp	r3, #46	; 0x2e
 803793a:	d10c      	bne.n	8037956 <_vfiprintf_r+0x176>
 803793c:	7863      	ldrb	r3, [r4, #1]
 803793e:	2b2a      	cmp	r3, #42	; 0x2a
 8037940:	d135      	bne.n	80379ae <_vfiprintf_r+0x1ce>
 8037942:	9b03      	ldr	r3, [sp, #12]
 8037944:	1d1a      	adds	r2, r3, #4
 8037946:	681b      	ldr	r3, [r3, #0]
 8037948:	9203      	str	r2, [sp, #12]
 803794a:	2b00      	cmp	r3, #0
 803794c:	bfb8      	it	lt
 803794e:	f04f 33ff 	movlt.w	r3, #4294967295
 8037952:	3402      	adds	r4, #2
 8037954:	9305      	str	r3, [sp, #20]
 8037956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8037a3c <_vfiprintf_r+0x25c>
 803795a:	7821      	ldrb	r1, [r4, #0]
 803795c:	2203      	movs	r2, #3
 803795e:	4650      	mov	r0, sl
 8037960:	f7d8 fb76 	bl	8010050 <memchr>
 8037964:	b140      	cbz	r0, 8037978 <_vfiprintf_r+0x198>
 8037966:	2340      	movs	r3, #64	; 0x40
 8037968:	eba0 000a 	sub.w	r0, r0, sl
 803796c:	fa03 f000 	lsl.w	r0, r3, r0
 8037970:	9b04      	ldr	r3, [sp, #16]
 8037972:	4303      	orrs	r3, r0
 8037974:	3401      	adds	r4, #1
 8037976:	9304      	str	r3, [sp, #16]
 8037978:	f814 1b01 	ldrb.w	r1, [r4], #1
 803797c:	482c      	ldr	r0, [pc, #176]	; (8037a30 <_vfiprintf_r+0x250>)
 803797e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8037982:	2206      	movs	r2, #6
 8037984:	f7d8 fb64 	bl	8010050 <memchr>
 8037988:	2800      	cmp	r0, #0
 803798a:	d03f      	beq.n	8037a0c <_vfiprintf_r+0x22c>
 803798c:	4b29      	ldr	r3, [pc, #164]	; (8037a34 <_vfiprintf_r+0x254>)
 803798e:	bb1b      	cbnz	r3, 80379d8 <_vfiprintf_r+0x1f8>
 8037990:	9b03      	ldr	r3, [sp, #12]
 8037992:	3307      	adds	r3, #7
 8037994:	f023 0307 	bic.w	r3, r3, #7
 8037998:	3308      	adds	r3, #8
 803799a:	9303      	str	r3, [sp, #12]
 803799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803799e:	443b      	add	r3, r7
 80379a0:	9309      	str	r3, [sp, #36]	; 0x24
 80379a2:	e767      	b.n	8037874 <_vfiprintf_r+0x94>
 80379a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80379a8:	460c      	mov	r4, r1
 80379aa:	2001      	movs	r0, #1
 80379ac:	e7a5      	b.n	80378fa <_vfiprintf_r+0x11a>
 80379ae:	2300      	movs	r3, #0
 80379b0:	3401      	adds	r4, #1
 80379b2:	9305      	str	r3, [sp, #20]
 80379b4:	4619      	mov	r1, r3
 80379b6:	f04f 0c0a 	mov.w	ip, #10
 80379ba:	4620      	mov	r0, r4
 80379bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80379c0:	3a30      	subs	r2, #48	; 0x30
 80379c2:	2a09      	cmp	r2, #9
 80379c4:	d903      	bls.n	80379ce <_vfiprintf_r+0x1ee>
 80379c6:	2b00      	cmp	r3, #0
 80379c8:	d0c5      	beq.n	8037956 <_vfiprintf_r+0x176>
 80379ca:	9105      	str	r1, [sp, #20]
 80379cc:	e7c3      	b.n	8037956 <_vfiprintf_r+0x176>
 80379ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80379d2:	4604      	mov	r4, r0
 80379d4:	2301      	movs	r3, #1
 80379d6:	e7f0      	b.n	80379ba <_vfiprintf_r+0x1da>
 80379d8:	ab03      	add	r3, sp, #12
 80379da:	9300      	str	r3, [sp, #0]
 80379dc:	462a      	mov	r2, r5
 80379de:	4b16      	ldr	r3, [pc, #88]	; (8037a38 <_vfiprintf_r+0x258>)
 80379e0:	a904      	add	r1, sp, #16
 80379e2:	4630      	mov	r0, r6
 80379e4:	f7fd fdd4 	bl	8035590 <_printf_float>
 80379e8:	4607      	mov	r7, r0
 80379ea:	1c78      	adds	r0, r7, #1
 80379ec:	d1d6      	bne.n	803799c <_vfiprintf_r+0x1bc>
 80379ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80379f0:	07d9      	lsls	r1, r3, #31
 80379f2:	d405      	bmi.n	8037a00 <_vfiprintf_r+0x220>
 80379f4:	89ab      	ldrh	r3, [r5, #12]
 80379f6:	059a      	lsls	r2, r3, #22
 80379f8:	d402      	bmi.n	8037a00 <_vfiprintf_r+0x220>
 80379fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80379fc:	f7ff faba 	bl	8036f74 <__retarget_lock_release_recursive>
 8037a00:	89ab      	ldrh	r3, [r5, #12]
 8037a02:	065b      	lsls	r3, r3, #25
 8037a04:	f53f af12 	bmi.w	803782c <_vfiprintf_r+0x4c>
 8037a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8037a0a:	e711      	b.n	8037830 <_vfiprintf_r+0x50>
 8037a0c:	ab03      	add	r3, sp, #12
 8037a0e:	9300      	str	r3, [sp, #0]
 8037a10:	462a      	mov	r2, r5
 8037a12:	4b09      	ldr	r3, [pc, #36]	; (8037a38 <_vfiprintf_r+0x258>)
 8037a14:	a904      	add	r1, sp, #16
 8037a16:	4630      	mov	r0, r6
 8037a18:	f7fe f846 	bl	8035aa8 <_printf_i>
 8037a1c:	e7e4      	b.n	80379e8 <_vfiprintf_r+0x208>
 8037a1e:	bf00      	nop
 8037a20:	0803c2e8 	.word	0x0803c2e8
 8037a24:	0803c308 	.word	0x0803c308
 8037a28:	0803c2c8 	.word	0x0803c2c8
 8037a2c:	0803c484 	.word	0x0803c484
 8037a30:	0803c48e 	.word	0x0803c48e
 8037a34:	08035591 	.word	0x08035591
 8037a38:	080377bb 	.word	0x080377bb
 8037a3c:	0803c48a 	.word	0x0803c48a

08037a40 <__sread>:
 8037a40:	b510      	push	{r4, lr}
 8037a42:	460c      	mov	r4, r1
 8037a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037a48:	f000 f8d6 	bl	8037bf8 <_read_r>
 8037a4c:	2800      	cmp	r0, #0
 8037a4e:	bfab      	itete	ge
 8037a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8037a52:	89a3      	ldrhlt	r3, [r4, #12]
 8037a54:	181b      	addge	r3, r3, r0
 8037a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8037a5a:	bfac      	ite	ge
 8037a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8037a5e:	81a3      	strhlt	r3, [r4, #12]
 8037a60:	bd10      	pop	{r4, pc}

08037a62 <__swrite>:
 8037a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037a66:	461f      	mov	r7, r3
 8037a68:	898b      	ldrh	r3, [r1, #12]
 8037a6a:	05db      	lsls	r3, r3, #23
 8037a6c:	4605      	mov	r5, r0
 8037a6e:	460c      	mov	r4, r1
 8037a70:	4616      	mov	r6, r2
 8037a72:	d505      	bpl.n	8037a80 <__swrite+0x1e>
 8037a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037a78:	2302      	movs	r3, #2
 8037a7a:	2200      	movs	r2, #0
 8037a7c:	f000 f898 	bl	8037bb0 <_lseek_r>
 8037a80:	89a3      	ldrh	r3, [r4, #12]
 8037a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8037a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8037a8a:	81a3      	strh	r3, [r4, #12]
 8037a8c:	4632      	mov	r2, r6
 8037a8e:	463b      	mov	r3, r7
 8037a90:	4628      	mov	r0, r5
 8037a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8037a96:	f000 b817 	b.w	8037ac8 <_write_r>

08037a9a <__sseek>:
 8037a9a:	b510      	push	{r4, lr}
 8037a9c:	460c      	mov	r4, r1
 8037a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037aa2:	f000 f885 	bl	8037bb0 <_lseek_r>
 8037aa6:	1c43      	adds	r3, r0, #1
 8037aa8:	89a3      	ldrh	r3, [r4, #12]
 8037aaa:	bf15      	itete	ne
 8037aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8037aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8037ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8037ab6:	81a3      	strheq	r3, [r4, #12]
 8037ab8:	bf18      	it	ne
 8037aba:	81a3      	strhne	r3, [r4, #12]
 8037abc:	bd10      	pop	{r4, pc}

08037abe <__sclose>:
 8037abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037ac2:	f000 b831 	b.w	8037b28 <_close_r>
	...

08037ac8 <_write_r>:
 8037ac8:	b538      	push	{r3, r4, r5, lr}
 8037aca:	4d07      	ldr	r5, [pc, #28]	; (8037ae8 <_write_r+0x20>)
 8037acc:	4604      	mov	r4, r0
 8037ace:	4608      	mov	r0, r1
 8037ad0:	4611      	mov	r1, r2
 8037ad2:	2200      	movs	r2, #0
 8037ad4:	602a      	str	r2, [r5, #0]
 8037ad6:	461a      	mov	r2, r3
 8037ad8:	f000 f99f 	bl	8037e1a <_write>
 8037adc:	1c43      	adds	r3, r0, #1
 8037ade:	d102      	bne.n	8037ae6 <_write_r+0x1e>
 8037ae0:	682b      	ldr	r3, [r5, #0]
 8037ae2:	b103      	cbz	r3, 8037ae6 <_write_r+0x1e>
 8037ae4:	6023      	str	r3, [r4, #0]
 8037ae6:	bd38      	pop	{r3, r4, r5, pc}
 8037ae8:	2000ce7c 	.word	0x2000ce7c

08037aec <__assert_func>:
 8037aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8037aee:	4614      	mov	r4, r2
 8037af0:	461a      	mov	r2, r3
 8037af2:	4b09      	ldr	r3, [pc, #36]	; (8037b18 <__assert_func+0x2c>)
 8037af4:	681b      	ldr	r3, [r3, #0]
 8037af6:	4605      	mov	r5, r0
 8037af8:	68d8      	ldr	r0, [r3, #12]
 8037afa:	b14c      	cbz	r4, 8037b10 <__assert_func+0x24>
 8037afc:	4b07      	ldr	r3, [pc, #28]	; (8037b1c <__assert_func+0x30>)
 8037afe:	9100      	str	r1, [sp, #0]
 8037b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8037b04:	4906      	ldr	r1, [pc, #24]	; (8037b20 <__assert_func+0x34>)
 8037b06:	462b      	mov	r3, r5
 8037b08:	f000 f81e 	bl	8037b48 <fiprintf>
 8037b0c:	f000 f893 	bl	8037c36 <abort>
 8037b10:	4b04      	ldr	r3, [pc, #16]	; (8037b24 <__assert_func+0x38>)
 8037b12:	461c      	mov	r4, r3
 8037b14:	e7f3      	b.n	8037afe <__assert_func+0x12>
 8037b16:	bf00      	nop
 8037b18:	20002a0c 	.word	0x20002a0c
 8037b1c:	0803c495 	.word	0x0803c495
 8037b20:	0803c4a2 	.word	0x0803c4a2
 8037b24:	0803c4d0 	.word	0x0803c4d0

08037b28 <_close_r>:
 8037b28:	b538      	push	{r3, r4, r5, lr}
 8037b2a:	4d06      	ldr	r5, [pc, #24]	; (8037b44 <_close_r+0x1c>)
 8037b2c:	2300      	movs	r3, #0
 8037b2e:	4604      	mov	r4, r0
 8037b30:	4608      	mov	r0, r1
 8037b32:	602b      	str	r3, [r5, #0]
 8037b34:	f000 f9a2 	bl	8037e7c <_close>
 8037b38:	1c43      	adds	r3, r0, #1
 8037b3a:	d102      	bne.n	8037b42 <_close_r+0x1a>
 8037b3c:	682b      	ldr	r3, [r5, #0]
 8037b3e:	b103      	cbz	r3, 8037b42 <_close_r+0x1a>
 8037b40:	6023      	str	r3, [r4, #0]
 8037b42:	bd38      	pop	{r3, r4, r5, pc}
 8037b44:	2000ce7c 	.word	0x2000ce7c

08037b48 <fiprintf>:
 8037b48:	b40e      	push	{r1, r2, r3}
 8037b4a:	b503      	push	{r0, r1, lr}
 8037b4c:	4601      	mov	r1, r0
 8037b4e:	ab03      	add	r3, sp, #12
 8037b50:	4805      	ldr	r0, [pc, #20]	; (8037b68 <fiprintf+0x20>)
 8037b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8037b56:	6800      	ldr	r0, [r0, #0]
 8037b58:	9301      	str	r3, [sp, #4]
 8037b5a:	f7ff fe41 	bl	80377e0 <_vfiprintf_r>
 8037b5e:	b002      	add	sp, #8
 8037b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8037b64:	b003      	add	sp, #12
 8037b66:	4770      	bx	lr
 8037b68:	20002a0c 	.word	0x20002a0c

08037b6c <_fstat_r>:
 8037b6c:	b538      	push	{r3, r4, r5, lr}
 8037b6e:	4d07      	ldr	r5, [pc, #28]	; (8037b8c <_fstat_r+0x20>)
 8037b70:	2300      	movs	r3, #0
 8037b72:	4604      	mov	r4, r0
 8037b74:	4608      	mov	r0, r1
 8037b76:	4611      	mov	r1, r2
 8037b78:	602b      	str	r3, [r5, #0]
 8037b7a:	f000 f9ec 	bl	8037f56 <_fstat>
 8037b7e:	1c43      	adds	r3, r0, #1
 8037b80:	d102      	bne.n	8037b88 <_fstat_r+0x1c>
 8037b82:	682b      	ldr	r3, [r5, #0]
 8037b84:	b103      	cbz	r3, 8037b88 <_fstat_r+0x1c>
 8037b86:	6023      	str	r3, [r4, #0]
 8037b88:	bd38      	pop	{r3, r4, r5, pc}
 8037b8a:	bf00      	nop
 8037b8c:	2000ce7c 	.word	0x2000ce7c

08037b90 <_isatty_r>:
 8037b90:	b538      	push	{r3, r4, r5, lr}
 8037b92:	4d06      	ldr	r5, [pc, #24]	; (8037bac <_isatty_r+0x1c>)
 8037b94:	2300      	movs	r3, #0
 8037b96:	4604      	mov	r4, r0
 8037b98:	4608      	mov	r0, r1
 8037b9a:	602b      	str	r3, [r5, #0]
 8037b9c:	f000 fb4e 	bl	803823c <_isatty>
 8037ba0:	1c43      	adds	r3, r0, #1
 8037ba2:	d102      	bne.n	8037baa <_isatty_r+0x1a>
 8037ba4:	682b      	ldr	r3, [r5, #0]
 8037ba6:	b103      	cbz	r3, 8037baa <_isatty_r+0x1a>
 8037ba8:	6023      	str	r3, [r4, #0]
 8037baa:	bd38      	pop	{r3, r4, r5, pc}
 8037bac:	2000ce7c 	.word	0x2000ce7c

08037bb0 <_lseek_r>:
 8037bb0:	b538      	push	{r3, r4, r5, lr}
 8037bb2:	4d07      	ldr	r5, [pc, #28]	; (8037bd0 <_lseek_r+0x20>)
 8037bb4:	4604      	mov	r4, r0
 8037bb6:	4608      	mov	r0, r1
 8037bb8:	4611      	mov	r1, r2
 8037bba:	2200      	movs	r2, #0
 8037bbc:	602a      	str	r2, [r5, #0]
 8037bbe:	461a      	mov	r2, r3
 8037bc0:	f000 f919 	bl	8037df6 <_lseek>
 8037bc4:	1c43      	adds	r3, r0, #1
 8037bc6:	d102      	bne.n	8037bce <_lseek_r+0x1e>
 8037bc8:	682b      	ldr	r3, [r5, #0]
 8037bca:	b103      	cbz	r3, 8037bce <_lseek_r+0x1e>
 8037bcc:	6023      	str	r3, [r4, #0]
 8037bce:	bd38      	pop	{r3, r4, r5, pc}
 8037bd0:	2000ce7c 	.word	0x2000ce7c

08037bd4 <__ascii_mbtowc>:
 8037bd4:	b082      	sub	sp, #8
 8037bd6:	b901      	cbnz	r1, 8037bda <__ascii_mbtowc+0x6>
 8037bd8:	a901      	add	r1, sp, #4
 8037bda:	b142      	cbz	r2, 8037bee <__ascii_mbtowc+0x1a>
 8037bdc:	b14b      	cbz	r3, 8037bf2 <__ascii_mbtowc+0x1e>
 8037bde:	7813      	ldrb	r3, [r2, #0]
 8037be0:	600b      	str	r3, [r1, #0]
 8037be2:	7812      	ldrb	r2, [r2, #0]
 8037be4:	1e10      	subs	r0, r2, #0
 8037be6:	bf18      	it	ne
 8037be8:	2001      	movne	r0, #1
 8037bea:	b002      	add	sp, #8
 8037bec:	4770      	bx	lr
 8037bee:	4610      	mov	r0, r2
 8037bf0:	e7fb      	b.n	8037bea <__ascii_mbtowc+0x16>
 8037bf2:	f06f 0001 	mvn.w	r0, #1
 8037bf6:	e7f8      	b.n	8037bea <__ascii_mbtowc+0x16>

08037bf8 <_read_r>:
 8037bf8:	b538      	push	{r3, r4, r5, lr}
 8037bfa:	4d07      	ldr	r5, [pc, #28]	; (8037c18 <_read_r+0x20>)
 8037bfc:	4604      	mov	r4, r0
 8037bfe:	4608      	mov	r0, r1
 8037c00:	4611      	mov	r1, r2
 8037c02:	2200      	movs	r2, #0
 8037c04:	602a      	str	r2, [r5, #0]
 8037c06:	461a      	mov	r2, r3
 8037c08:	f000 f89d 	bl	8037d46 <_read>
 8037c0c:	1c43      	adds	r3, r0, #1
 8037c0e:	d102      	bne.n	8037c16 <_read_r+0x1e>
 8037c10:	682b      	ldr	r3, [r5, #0]
 8037c12:	b103      	cbz	r3, 8037c16 <_read_r+0x1e>
 8037c14:	6023      	str	r3, [r4, #0]
 8037c16:	bd38      	pop	{r3, r4, r5, pc}
 8037c18:	2000ce7c 	.word	0x2000ce7c

08037c1c <__ascii_wctomb>:
 8037c1c:	b149      	cbz	r1, 8037c32 <__ascii_wctomb+0x16>
 8037c1e:	2aff      	cmp	r2, #255	; 0xff
 8037c20:	bf85      	ittet	hi
 8037c22:	238a      	movhi	r3, #138	; 0x8a
 8037c24:	6003      	strhi	r3, [r0, #0]
 8037c26:	700a      	strbls	r2, [r1, #0]
 8037c28:	f04f 30ff 	movhi.w	r0, #4294967295
 8037c2c:	bf98      	it	ls
 8037c2e:	2001      	movls	r0, #1
 8037c30:	4770      	bx	lr
 8037c32:	4608      	mov	r0, r1
 8037c34:	4770      	bx	lr

08037c36 <abort>:
 8037c36:	b508      	push	{r3, lr}
 8037c38:	2006      	movs	r0, #6
 8037c3a:	f000 f82b 	bl	8037c94 <raise>
 8037c3e:	2001      	movs	r0, #1
 8037c40:	f000 fb18 	bl	8038274 <_exit>

08037c44 <_raise_r>:
 8037c44:	291f      	cmp	r1, #31
 8037c46:	b538      	push	{r3, r4, r5, lr}
 8037c48:	4604      	mov	r4, r0
 8037c4a:	460d      	mov	r5, r1
 8037c4c:	d904      	bls.n	8037c58 <_raise_r+0x14>
 8037c4e:	2316      	movs	r3, #22
 8037c50:	6003      	str	r3, [r0, #0]
 8037c52:	f04f 30ff 	mov.w	r0, #4294967295
 8037c56:	bd38      	pop	{r3, r4, r5, pc}
 8037c58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8037c5a:	b112      	cbz	r2, 8037c62 <_raise_r+0x1e>
 8037c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8037c60:	b94b      	cbnz	r3, 8037c76 <_raise_r+0x32>
 8037c62:	4620      	mov	r0, r4
 8037c64:	f000 f830 	bl	8037cc8 <_getpid_r>
 8037c68:	462a      	mov	r2, r5
 8037c6a:	4601      	mov	r1, r0
 8037c6c:	4620      	mov	r0, r4
 8037c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8037c72:	f000 b817 	b.w	8037ca4 <_kill_r>
 8037c76:	2b01      	cmp	r3, #1
 8037c78:	d00a      	beq.n	8037c90 <_raise_r+0x4c>
 8037c7a:	1c59      	adds	r1, r3, #1
 8037c7c:	d103      	bne.n	8037c86 <_raise_r+0x42>
 8037c7e:	2316      	movs	r3, #22
 8037c80:	6003      	str	r3, [r0, #0]
 8037c82:	2001      	movs	r0, #1
 8037c84:	e7e7      	b.n	8037c56 <_raise_r+0x12>
 8037c86:	2400      	movs	r4, #0
 8037c88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8037c8c:	4628      	mov	r0, r5
 8037c8e:	4798      	blx	r3
 8037c90:	2000      	movs	r0, #0
 8037c92:	e7e0      	b.n	8037c56 <_raise_r+0x12>

08037c94 <raise>:
 8037c94:	4b02      	ldr	r3, [pc, #8]	; (8037ca0 <raise+0xc>)
 8037c96:	4601      	mov	r1, r0
 8037c98:	6818      	ldr	r0, [r3, #0]
 8037c9a:	f7ff bfd3 	b.w	8037c44 <_raise_r>
 8037c9e:	bf00      	nop
 8037ca0:	20002a0c 	.word	0x20002a0c

08037ca4 <_kill_r>:
 8037ca4:	b538      	push	{r3, r4, r5, lr}
 8037ca6:	4d07      	ldr	r5, [pc, #28]	; (8037cc4 <_kill_r+0x20>)
 8037ca8:	2300      	movs	r3, #0
 8037caa:	4604      	mov	r4, r0
 8037cac:	4608      	mov	r0, r1
 8037cae:	4611      	mov	r1, r2
 8037cb0:	602b      	str	r3, [r5, #0]
 8037cb2:	f000 fafd 	bl	80382b0 <_kill>
 8037cb6:	1c43      	adds	r3, r0, #1
 8037cb8:	d102      	bne.n	8037cc0 <_kill_r+0x1c>
 8037cba:	682b      	ldr	r3, [r5, #0]
 8037cbc:	b103      	cbz	r3, 8037cc0 <_kill_r+0x1c>
 8037cbe:	6023      	str	r3, [r4, #0]
 8037cc0:	bd38      	pop	{r3, r4, r5, pc}
 8037cc2:	bf00      	nop
 8037cc4:	2000ce7c 	.word	0x2000ce7c

08037cc8 <_getpid_r>:
 8037cc8:	f000 b8fe 	b.w	8037ec8 <_getpid>

08037ccc <findslot>:
 8037ccc:	4b0a      	ldr	r3, [pc, #40]	; (8037cf8 <findslot+0x2c>)
 8037cce:	b510      	push	{r4, lr}
 8037cd0:	4604      	mov	r4, r0
 8037cd2:	6818      	ldr	r0, [r3, #0]
 8037cd4:	b118      	cbz	r0, 8037cde <findslot+0x12>
 8037cd6:	6983      	ldr	r3, [r0, #24]
 8037cd8:	b90b      	cbnz	r3, 8037cde <findslot+0x12>
 8037cda:	f7ff f8a7 	bl	8036e2c <__sinit>
 8037cde:	2c13      	cmp	r4, #19
 8037ce0:	d807      	bhi.n	8037cf2 <findslot+0x26>
 8037ce2:	4806      	ldr	r0, [pc, #24]	; (8037cfc <findslot+0x30>)
 8037ce4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8037ce8:	3201      	adds	r2, #1
 8037cea:	d002      	beq.n	8037cf2 <findslot+0x26>
 8037cec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8037cf0:	bd10      	pop	{r4, pc}
 8037cf2:	2000      	movs	r0, #0
 8037cf4:	e7fc      	b.n	8037cf0 <findslot+0x24>
 8037cf6:	bf00      	nop
 8037cf8:	20002a0c 	.word	0x20002a0c
 8037cfc:	2000ce90 	.word	0x2000ce90

08037d00 <error>:
 8037d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037d02:	4604      	mov	r4, r0
 8037d04:	f7fe ff72 	bl	8036bec <__errno>
 8037d08:	2613      	movs	r6, #19
 8037d0a:	4605      	mov	r5, r0
 8037d0c:	2700      	movs	r7, #0
 8037d0e:	4630      	mov	r0, r6
 8037d10:	4639      	mov	r1, r7
 8037d12:	beab      	bkpt	0x00ab
 8037d14:	4606      	mov	r6, r0
 8037d16:	602e      	str	r6, [r5, #0]
 8037d18:	4620      	mov	r0, r4
 8037d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08037d1c <checkerror>:
 8037d1c:	1c43      	adds	r3, r0, #1
 8037d1e:	d101      	bne.n	8037d24 <checkerror+0x8>
 8037d20:	f7ff bfee 	b.w	8037d00 <error>
 8037d24:	4770      	bx	lr

08037d26 <_swiread>:
 8037d26:	b530      	push	{r4, r5, lr}
 8037d28:	b085      	sub	sp, #20
 8037d2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8037d2e:	9203      	str	r2, [sp, #12]
 8037d30:	2406      	movs	r4, #6
 8037d32:	ad01      	add	r5, sp, #4
 8037d34:	4620      	mov	r0, r4
 8037d36:	4629      	mov	r1, r5
 8037d38:	beab      	bkpt	0x00ab
 8037d3a:	4604      	mov	r4, r0
 8037d3c:	4620      	mov	r0, r4
 8037d3e:	f7ff ffed 	bl	8037d1c <checkerror>
 8037d42:	b005      	add	sp, #20
 8037d44:	bd30      	pop	{r4, r5, pc}

08037d46 <_read>:
 8037d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8037d48:	4615      	mov	r5, r2
 8037d4a:	9101      	str	r1, [sp, #4]
 8037d4c:	f7ff ffbe 	bl	8037ccc <findslot>
 8037d50:	9901      	ldr	r1, [sp, #4]
 8037d52:	4604      	mov	r4, r0
 8037d54:	b938      	cbnz	r0, 8037d66 <_read+0x20>
 8037d56:	f7fe ff49 	bl	8036bec <__errno>
 8037d5a:	2309      	movs	r3, #9
 8037d5c:	6003      	str	r3, [r0, #0]
 8037d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8037d62:	b003      	add	sp, #12
 8037d64:	bd30      	pop	{r4, r5, pc}
 8037d66:	6800      	ldr	r0, [r0, #0]
 8037d68:	462a      	mov	r2, r5
 8037d6a:	f7ff ffdc 	bl	8037d26 <_swiread>
 8037d6e:	1c43      	adds	r3, r0, #1
 8037d70:	d0f7      	beq.n	8037d62 <_read+0x1c>
 8037d72:	6863      	ldr	r3, [r4, #4]
 8037d74:	1a2a      	subs	r2, r5, r0
 8037d76:	4413      	add	r3, r2
 8037d78:	6063      	str	r3, [r4, #4]
 8037d7a:	4610      	mov	r0, r2
 8037d7c:	e7f1      	b.n	8037d62 <_read+0x1c>

08037d7e <_swilseek>:
 8037d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8037d80:	460c      	mov	r4, r1
 8037d82:	4616      	mov	r6, r2
 8037d84:	f7ff ffa2 	bl	8037ccc <findslot>
 8037d88:	4605      	mov	r5, r0
 8037d8a:	b940      	cbnz	r0, 8037d9e <_swilseek+0x20>
 8037d8c:	f7fe ff2e 	bl	8036bec <__errno>
 8037d90:	2309      	movs	r3, #9
 8037d92:	6003      	str	r3, [r0, #0]
 8037d94:	f04f 34ff 	mov.w	r4, #4294967295
 8037d98:	4620      	mov	r0, r4
 8037d9a:	b003      	add	sp, #12
 8037d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037d9e:	2e02      	cmp	r6, #2
 8037da0:	d903      	bls.n	8037daa <_swilseek+0x2c>
 8037da2:	f7fe ff23 	bl	8036bec <__errno>
 8037da6:	2316      	movs	r3, #22
 8037da8:	e7f3      	b.n	8037d92 <_swilseek+0x14>
 8037daa:	2e01      	cmp	r6, #1
 8037dac:	d112      	bne.n	8037dd4 <_swilseek+0x56>
 8037dae:	6843      	ldr	r3, [r0, #4]
 8037db0:	18e4      	adds	r4, r4, r3
 8037db2:	d4f6      	bmi.n	8037da2 <_swilseek+0x24>
 8037db4:	682b      	ldr	r3, [r5, #0]
 8037db6:	260a      	movs	r6, #10
 8037db8:	e9cd 3400 	strd	r3, r4, [sp]
 8037dbc:	466f      	mov	r7, sp
 8037dbe:	4630      	mov	r0, r6
 8037dc0:	4639      	mov	r1, r7
 8037dc2:	beab      	bkpt	0x00ab
 8037dc4:	4606      	mov	r6, r0
 8037dc6:	4630      	mov	r0, r6
 8037dc8:	f7ff ffa8 	bl	8037d1c <checkerror>
 8037dcc:	2800      	cmp	r0, #0
 8037dce:	dbe1      	blt.n	8037d94 <_swilseek+0x16>
 8037dd0:	606c      	str	r4, [r5, #4]
 8037dd2:	e7e1      	b.n	8037d98 <_swilseek+0x1a>
 8037dd4:	2e02      	cmp	r6, #2
 8037dd6:	d1ed      	bne.n	8037db4 <_swilseek+0x36>
 8037dd8:	6803      	ldr	r3, [r0, #0]
 8037dda:	9300      	str	r3, [sp, #0]
 8037ddc:	260c      	movs	r6, #12
 8037dde:	466f      	mov	r7, sp
 8037de0:	4630      	mov	r0, r6
 8037de2:	4639      	mov	r1, r7
 8037de4:	beab      	bkpt	0x00ab
 8037de6:	4606      	mov	r6, r0
 8037de8:	4630      	mov	r0, r6
 8037dea:	f7ff ff97 	bl	8037d1c <checkerror>
 8037dee:	1c43      	adds	r3, r0, #1
 8037df0:	d0d0      	beq.n	8037d94 <_swilseek+0x16>
 8037df2:	4404      	add	r4, r0
 8037df4:	e7de      	b.n	8037db4 <_swilseek+0x36>

08037df6 <_lseek>:
 8037df6:	f7ff bfc2 	b.w	8037d7e <_swilseek>

08037dfa <_swiwrite>:
 8037dfa:	b530      	push	{r4, r5, lr}
 8037dfc:	b085      	sub	sp, #20
 8037dfe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8037e02:	9203      	str	r2, [sp, #12]
 8037e04:	2405      	movs	r4, #5
 8037e06:	ad01      	add	r5, sp, #4
 8037e08:	4620      	mov	r0, r4
 8037e0a:	4629      	mov	r1, r5
 8037e0c:	beab      	bkpt	0x00ab
 8037e0e:	4604      	mov	r4, r0
 8037e10:	4620      	mov	r0, r4
 8037e12:	f7ff ff83 	bl	8037d1c <checkerror>
 8037e16:	b005      	add	sp, #20
 8037e18:	bd30      	pop	{r4, r5, pc}

08037e1a <_write>:
 8037e1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8037e1c:	4615      	mov	r5, r2
 8037e1e:	9101      	str	r1, [sp, #4]
 8037e20:	f7ff ff54 	bl	8037ccc <findslot>
 8037e24:	9901      	ldr	r1, [sp, #4]
 8037e26:	4604      	mov	r4, r0
 8037e28:	b930      	cbnz	r0, 8037e38 <_write+0x1e>
 8037e2a:	f7fe fedf 	bl	8036bec <__errno>
 8037e2e:	2309      	movs	r3, #9
 8037e30:	6003      	str	r3, [r0, #0]
 8037e32:	f04f 30ff 	mov.w	r0, #4294967295
 8037e36:	e012      	b.n	8037e5e <_write+0x44>
 8037e38:	6800      	ldr	r0, [r0, #0]
 8037e3a:	462a      	mov	r2, r5
 8037e3c:	f7ff ffdd 	bl	8037dfa <_swiwrite>
 8037e40:	2800      	cmp	r0, #0
 8037e42:	dbf6      	blt.n	8037e32 <_write+0x18>
 8037e44:	6862      	ldr	r2, [r4, #4]
 8037e46:	1a2b      	subs	r3, r5, r0
 8037e48:	441a      	add	r2, r3
 8037e4a:	42a8      	cmp	r0, r5
 8037e4c:	6062      	str	r2, [r4, #4]
 8037e4e:	d105      	bne.n	8037e5c <_write+0x42>
 8037e50:	2000      	movs	r0, #0
 8037e52:	b003      	add	sp, #12
 8037e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8037e58:	f7ff bf52 	b.w	8037d00 <error>
 8037e5c:	4618      	mov	r0, r3
 8037e5e:	b003      	add	sp, #12
 8037e60:	bd30      	pop	{r4, r5, pc}

08037e62 <_swiclose>:
 8037e62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8037e64:	2402      	movs	r4, #2
 8037e66:	9001      	str	r0, [sp, #4]
 8037e68:	ad01      	add	r5, sp, #4
 8037e6a:	4620      	mov	r0, r4
 8037e6c:	4629      	mov	r1, r5
 8037e6e:	beab      	bkpt	0x00ab
 8037e70:	4604      	mov	r4, r0
 8037e72:	4620      	mov	r0, r4
 8037e74:	f7ff ff52 	bl	8037d1c <checkerror>
 8037e78:	b003      	add	sp, #12
 8037e7a:	bd30      	pop	{r4, r5, pc}

08037e7c <_close>:
 8037e7c:	b538      	push	{r3, r4, r5, lr}
 8037e7e:	4605      	mov	r5, r0
 8037e80:	f7ff ff24 	bl	8037ccc <findslot>
 8037e84:	4604      	mov	r4, r0
 8037e86:	b930      	cbnz	r0, 8037e96 <_close+0x1a>
 8037e88:	f7fe feb0 	bl	8036bec <__errno>
 8037e8c:	2309      	movs	r3, #9
 8037e8e:	6003      	str	r3, [r0, #0]
 8037e90:	f04f 30ff 	mov.w	r0, #4294967295
 8037e94:	bd38      	pop	{r3, r4, r5, pc}
 8037e96:	3d01      	subs	r5, #1
 8037e98:	2d01      	cmp	r5, #1
 8037e9a:	d809      	bhi.n	8037eb0 <_close+0x34>
 8037e9c:	4b09      	ldr	r3, [pc, #36]	; (8037ec4 <_close+0x48>)
 8037e9e:	689a      	ldr	r2, [r3, #8]
 8037ea0:	691b      	ldr	r3, [r3, #16]
 8037ea2:	429a      	cmp	r2, r3
 8037ea4:	d104      	bne.n	8037eb0 <_close+0x34>
 8037ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8037eaa:	6003      	str	r3, [r0, #0]
 8037eac:	2000      	movs	r0, #0
 8037eae:	e7f1      	b.n	8037e94 <_close+0x18>
 8037eb0:	6820      	ldr	r0, [r4, #0]
 8037eb2:	f7ff ffd6 	bl	8037e62 <_swiclose>
 8037eb6:	2800      	cmp	r0, #0
 8037eb8:	d1ec      	bne.n	8037e94 <_close+0x18>
 8037eba:	f04f 33ff 	mov.w	r3, #4294967295
 8037ebe:	6023      	str	r3, [r4, #0]
 8037ec0:	e7e8      	b.n	8037e94 <_close+0x18>
 8037ec2:	bf00      	nop
 8037ec4:	2000ce90 	.word	0x2000ce90

08037ec8 <_getpid>:
 8037ec8:	2001      	movs	r0, #1
 8037eca:	4770      	bx	lr

08037ecc <_sbrk>:
 8037ecc:	4a0d      	ldr	r2, [pc, #52]	; (8037f04 <_sbrk+0x38>)
 8037ece:	6811      	ldr	r1, [r2, #0]
 8037ed0:	b510      	push	{r4, lr}
 8037ed2:	4603      	mov	r3, r0
 8037ed4:	b909      	cbnz	r1, 8037eda <_sbrk+0xe>
 8037ed6:	490c      	ldr	r1, [pc, #48]	; (8037f08 <_sbrk+0x3c>)
 8037ed8:	6011      	str	r1, [r2, #0]
 8037eda:	6810      	ldr	r0, [r2, #0]
 8037edc:	4669      	mov	r1, sp
 8037ede:	4403      	add	r3, r0
 8037ee0:	428b      	cmp	r3, r1
 8037ee2:	d806      	bhi.n	8037ef2 <_sbrk+0x26>
 8037ee4:	4909      	ldr	r1, [pc, #36]	; (8037f0c <_sbrk+0x40>)
 8037ee6:	4c0a      	ldr	r4, [pc, #40]	; (8037f10 <_sbrk+0x44>)
 8037ee8:	6809      	ldr	r1, [r1, #0]
 8037eea:	42a1      	cmp	r1, r4
 8037eec:	d008      	beq.n	8037f00 <_sbrk+0x34>
 8037eee:	428b      	cmp	r3, r1
 8037ef0:	d906      	bls.n	8037f00 <_sbrk+0x34>
 8037ef2:	f7fe fe7b 	bl	8036bec <__errno>
 8037ef6:	230c      	movs	r3, #12
 8037ef8:	6003      	str	r3, [r0, #0]
 8037efa:	f04f 30ff 	mov.w	r0, #4294967295
 8037efe:	bd10      	pop	{r4, pc}
 8037f00:	6013      	str	r3, [r2, #0]
 8037f02:	e7fc      	b.n	8037efe <_sbrk+0x32>
 8037f04:	2000ce80 	.word	0x2000ce80
 8037f08:	2000cfa4 	.word	0x2000cfa4
 8037f0c:	20002bdc 	.word	0x20002bdc
 8037f10:	cafedead 	.word	0xcafedead

08037f14 <_swistat>:
 8037f14:	b570      	push	{r4, r5, r6, lr}
 8037f16:	460c      	mov	r4, r1
 8037f18:	f7ff fed8 	bl	8037ccc <findslot>
 8037f1c:	4605      	mov	r5, r0
 8037f1e:	b930      	cbnz	r0, 8037f2e <_swistat+0x1a>
 8037f20:	f7fe fe64 	bl	8036bec <__errno>
 8037f24:	2309      	movs	r3, #9
 8037f26:	6003      	str	r3, [r0, #0]
 8037f28:	f04f 30ff 	mov.w	r0, #4294967295
 8037f2c:	bd70      	pop	{r4, r5, r6, pc}
 8037f2e:	6863      	ldr	r3, [r4, #4]
 8037f30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8037f34:	6063      	str	r3, [r4, #4]
 8037f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037f3a:	64a3      	str	r3, [r4, #72]	; 0x48
 8037f3c:	260c      	movs	r6, #12
 8037f3e:	4630      	mov	r0, r6
 8037f40:	4629      	mov	r1, r5
 8037f42:	beab      	bkpt	0x00ab
 8037f44:	4605      	mov	r5, r0
 8037f46:	4628      	mov	r0, r5
 8037f48:	f7ff fee8 	bl	8037d1c <checkerror>
 8037f4c:	1c43      	adds	r3, r0, #1
 8037f4e:	bf1c      	itt	ne
 8037f50:	6120      	strne	r0, [r4, #16]
 8037f52:	2000      	movne	r0, #0
 8037f54:	e7ea      	b.n	8037f2c <_swistat+0x18>

08037f56 <_fstat>:
 8037f56:	460b      	mov	r3, r1
 8037f58:	b510      	push	{r4, lr}
 8037f5a:	2100      	movs	r1, #0
 8037f5c:	4604      	mov	r4, r0
 8037f5e:	2258      	movs	r2, #88	; 0x58
 8037f60:	4618      	mov	r0, r3
 8037f62:	f7fd f99d 	bl	80352a0 <memset>
 8037f66:	4601      	mov	r1, r0
 8037f68:	4620      	mov	r0, r4
 8037f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037f6e:	f7ff bfd1 	b.w	8037f14 <_swistat>

08037f72 <_stat>:
 8037f72:	b538      	push	{r3, r4, r5, lr}
 8037f74:	460d      	mov	r5, r1
 8037f76:	4604      	mov	r4, r0
 8037f78:	2258      	movs	r2, #88	; 0x58
 8037f7a:	2100      	movs	r1, #0
 8037f7c:	4628      	mov	r0, r5
 8037f7e:	f7fd f98f 	bl	80352a0 <memset>
 8037f82:	4620      	mov	r0, r4
 8037f84:	2100      	movs	r1, #0
 8037f86:	f000 f811 	bl	8037fac <_swiopen>
 8037f8a:	1c43      	adds	r3, r0, #1
 8037f8c:	4604      	mov	r4, r0
 8037f8e:	d00b      	beq.n	8037fa8 <_stat+0x36>
 8037f90:	686b      	ldr	r3, [r5, #4]
 8037f92:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8037f96:	606b      	str	r3, [r5, #4]
 8037f98:	4629      	mov	r1, r5
 8037f9a:	f7ff ffbb 	bl	8037f14 <_swistat>
 8037f9e:	4605      	mov	r5, r0
 8037fa0:	4620      	mov	r0, r4
 8037fa2:	f7ff ff6b 	bl	8037e7c <_close>
 8037fa6:	462c      	mov	r4, r5
 8037fa8:	4620      	mov	r0, r4
 8037faa:	bd38      	pop	{r3, r4, r5, pc}

08037fac <_swiopen>:
 8037fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8037fb0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 803805c <_swiopen+0xb0>
 8037fb4:	b097      	sub	sp, #92	; 0x5c
 8037fb6:	4607      	mov	r7, r0
 8037fb8:	460e      	mov	r6, r1
 8037fba:	2500      	movs	r5, #0
 8037fbc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8037fc0:	1c61      	adds	r1, r4, #1
 8037fc2:	d037      	beq.n	8038034 <_swiopen+0x88>
 8037fc4:	3501      	adds	r5, #1
 8037fc6:	2d14      	cmp	r5, #20
 8037fc8:	d1f8      	bne.n	8037fbc <_swiopen+0x10>
 8037fca:	f7fe fe0f 	bl	8036bec <__errno>
 8037fce:	2318      	movs	r3, #24
 8037fd0:	6003      	str	r3, [r0, #0]
 8037fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8037fd6:	e03d      	b.n	8038054 <_swiopen+0xa8>
 8037fd8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8037fdc:	f240 6301 	movw	r3, #1537	; 0x601
 8037fe0:	07b2      	lsls	r2, r6, #30
 8037fe2:	bf48      	it	mi
 8037fe4:	f044 0402 	orrmi.w	r4, r4, #2
 8037fe8:	421e      	tst	r6, r3
 8037fea:	bf18      	it	ne
 8037fec:	f044 0404 	orrne.w	r4, r4, #4
 8037ff0:	0733      	lsls	r3, r6, #28
 8037ff2:	bf48      	it	mi
 8037ff4:	f024 0404 	bicmi.w	r4, r4, #4
 8037ff8:	4638      	mov	r0, r7
 8037ffa:	bf48      	it	mi
 8037ffc:	f044 0408 	orrmi.w	r4, r4, #8
 8038000:	9700      	str	r7, [sp, #0]
 8038002:	f7d8 f81d 	bl	8010040 <strlen>
 8038006:	e9cd 4001 	strd	r4, r0, [sp, #4]
 803800a:	2401      	movs	r4, #1
 803800c:	4620      	mov	r0, r4
 803800e:	4649      	mov	r1, r9
 8038010:	beab      	bkpt	0x00ab
 8038012:	4604      	mov	r4, r0
 8038014:	2c00      	cmp	r4, #0
 8038016:	db08      	blt.n	803802a <_swiopen+0x7e>
 8038018:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 803801c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8038020:	2300      	movs	r3, #0
 8038022:	f8c8 3004 	str.w	r3, [r8, #4]
 8038026:	462c      	mov	r4, r5
 8038028:	e014      	b.n	8038054 <_swiopen+0xa8>
 803802a:	4620      	mov	r0, r4
 803802c:	f7ff fe68 	bl	8037d00 <error>
 8038030:	4604      	mov	r4, r0
 8038032:	e00f      	b.n	8038054 <_swiopen+0xa8>
 8038034:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8038038:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 803803c:	46e9      	mov	r9, sp
 803803e:	d1cb      	bne.n	8037fd8 <_swiopen+0x2c>
 8038040:	4649      	mov	r1, r9
 8038042:	4638      	mov	r0, r7
 8038044:	f7ff ff95 	bl	8037f72 <_stat>
 8038048:	3001      	adds	r0, #1
 803804a:	d0c5      	beq.n	8037fd8 <_swiopen+0x2c>
 803804c:	f7fe fdce 	bl	8036bec <__errno>
 8038050:	2311      	movs	r3, #17
 8038052:	6003      	str	r3, [r0, #0]
 8038054:	4620      	mov	r0, r4
 8038056:	b017      	add	sp, #92	; 0x5c
 8038058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803805c:	2000ce90 	.word	0x2000ce90

08038060 <_get_semihosting_exts>:
 8038060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8038064:	4606      	mov	r6, r0
 8038066:	460f      	mov	r7, r1
 8038068:	482a      	ldr	r0, [pc, #168]	; (8038114 <_get_semihosting_exts+0xb4>)
 803806a:	2100      	movs	r1, #0
 803806c:	4615      	mov	r5, r2
 803806e:	f7ff ff9d 	bl	8037fac <_swiopen>
 8038072:	462a      	mov	r2, r5
 8038074:	4604      	mov	r4, r0
 8038076:	2100      	movs	r1, #0
 8038078:	4630      	mov	r0, r6
 803807a:	f7fd f911 	bl	80352a0 <memset>
 803807e:	1c63      	adds	r3, r4, #1
 8038080:	d016      	beq.n	80380b0 <_get_semihosting_exts+0x50>
 8038082:	4620      	mov	r0, r4
 8038084:	f7ff fe22 	bl	8037ccc <findslot>
 8038088:	f04f 090c 	mov.w	r9, #12
 803808c:	4680      	mov	r8, r0
 803808e:	4648      	mov	r0, r9
 8038090:	4641      	mov	r1, r8
 8038092:	beab      	bkpt	0x00ab
 8038094:	4680      	mov	r8, r0
 8038096:	4640      	mov	r0, r8
 8038098:	f7ff fe40 	bl	8037d1c <checkerror>
 803809c:	2803      	cmp	r0, #3
 803809e:	dd02      	ble.n	80380a6 <_get_semihosting_exts+0x46>
 80380a0:	1ec3      	subs	r3, r0, #3
 80380a2:	42ab      	cmp	r3, r5
 80380a4:	dc08      	bgt.n	80380b8 <_get_semihosting_exts+0x58>
 80380a6:	4620      	mov	r0, r4
 80380a8:	f7ff fee8 	bl	8037e7c <_close>
 80380ac:	f04f 34ff 	mov.w	r4, #4294967295
 80380b0:	4620      	mov	r0, r4
 80380b2:	b003      	add	sp, #12
 80380b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80380b8:	2204      	movs	r2, #4
 80380ba:	eb0d 0102 	add.w	r1, sp, r2
 80380be:	4620      	mov	r0, r4
 80380c0:	f7ff fe41 	bl	8037d46 <_read>
 80380c4:	2803      	cmp	r0, #3
 80380c6:	ddee      	ble.n	80380a6 <_get_semihosting_exts+0x46>
 80380c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80380cc:	2b53      	cmp	r3, #83	; 0x53
 80380ce:	d1ea      	bne.n	80380a6 <_get_semihosting_exts+0x46>
 80380d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80380d4:	2b48      	cmp	r3, #72	; 0x48
 80380d6:	d1e6      	bne.n	80380a6 <_get_semihosting_exts+0x46>
 80380d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80380dc:	2b46      	cmp	r3, #70	; 0x46
 80380de:	d1e2      	bne.n	80380a6 <_get_semihosting_exts+0x46>
 80380e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80380e4:	2b42      	cmp	r3, #66	; 0x42
 80380e6:	d1de      	bne.n	80380a6 <_get_semihosting_exts+0x46>
 80380e8:	2201      	movs	r2, #1
 80380ea:	4639      	mov	r1, r7
 80380ec:	4620      	mov	r0, r4
 80380ee:	f7ff fe46 	bl	8037d7e <_swilseek>
 80380f2:	2800      	cmp	r0, #0
 80380f4:	dbd7      	blt.n	80380a6 <_get_semihosting_exts+0x46>
 80380f6:	462a      	mov	r2, r5
 80380f8:	4631      	mov	r1, r6
 80380fa:	4620      	mov	r0, r4
 80380fc:	f7ff fe23 	bl	8037d46 <_read>
 8038100:	4605      	mov	r5, r0
 8038102:	4620      	mov	r0, r4
 8038104:	f7ff feba 	bl	8037e7c <_close>
 8038108:	4628      	mov	r0, r5
 803810a:	f7ff fe07 	bl	8037d1c <checkerror>
 803810e:	4604      	mov	r4, r0
 8038110:	e7ce      	b.n	80380b0 <_get_semihosting_exts+0x50>
 8038112:	bf00      	nop
 8038114:	0803c4db 	.word	0x0803c4db

08038118 <initialise_semihosting_exts>:
 8038118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803811a:	4d0a      	ldr	r5, [pc, #40]	; (8038144 <initialise_semihosting_exts+0x2c>)
 803811c:	4c0a      	ldr	r4, [pc, #40]	; (8038148 <initialise_semihosting_exts+0x30>)
 803811e:	2100      	movs	r1, #0
 8038120:	2201      	movs	r2, #1
 8038122:	a801      	add	r0, sp, #4
 8038124:	6029      	str	r1, [r5, #0]
 8038126:	6022      	str	r2, [r4, #0]
 8038128:	f7ff ff9a 	bl	8038060 <_get_semihosting_exts>
 803812c:	2800      	cmp	r0, #0
 803812e:	dd07      	ble.n	8038140 <initialise_semihosting_exts+0x28>
 8038130:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8038134:	f003 0201 	and.w	r2, r3, #1
 8038138:	f003 0302 	and.w	r3, r3, #2
 803813c:	602a      	str	r2, [r5, #0]
 803813e:	6023      	str	r3, [r4, #0]
 8038140:	b003      	add	sp, #12
 8038142:	bd30      	pop	{r4, r5, pc}
 8038144:	20002be0 	.word	0x20002be0
 8038148:	20002be4 	.word	0x20002be4

0803814c <_has_ext_exit_extended>:
 803814c:	b510      	push	{r4, lr}
 803814e:	4c04      	ldr	r4, [pc, #16]	; (8038160 <_has_ext_exit_extended+0x14>)
 8038150:	6823      	ldr	r3, [r4, #0]
 8038152:	2b00      	cmp	r3, #0
 8038154:	da01      	bge.n	803815a <_has_ext_exit_extended+0xe>
 8038156:	f7ff ffdf 	bl	8038118 <initialise_semihosting_exts>
 803815a:	6820      	ldr	r0, [r4, #0]
 803815c:	bd10      	pop	{r4, pc}
 803815e:	bf00      	nop
 8038160:	20002be0 	.word	0x20002be0

08038164 <_has_ext_stdout_stderr>:
 8038164:	b510      	push	{r4, lr}
 8038166:	4c04      	ldr	r4, [pc, #16]	; (8038178 <_has_ext_stdout_stderr+0x14>)
 8038168:	6823      	ldr	r3, [r4, #0]
 803816a:	2b00      	cmp	r3, #0
 803816c:	da01      	bge.n	8038172 <_has_ext_stdout_stderr+0xe>
 803816e:	f7ff ffd3 	bl	8038118 <initialise_semihosting_exts>
 8038172:	6820      	ldr	r0, [r4, #0]
 8038174:	bd10      	pop	{r4, pc}
 8038176:	bf00      	nop
 8038178:	20002be4 	.word	0x20002be4

0803817c <initialise_monitor_handles>:
 803817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038180:	b085      	sub	sp, #20
 8038182:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8038234 <initialise_monitor_handles+0xb8>
 8038186:	f8cd 9004 	str.w	r9, [sp, #4]
 803818a:	2303      	movs	r3, #3
 803818c:	2400      	movs	r4, #0
 803818e:	9303      	str	r3, [sp, #12]
 8038190:	af01      	add	r7, sp, #4
 8038192:	9402      	str	r4, [sp, #8]
 8038194:	2501      	movs	r5, #1
 8038196:	4628      	mov	r0, r5
 8038198:	4639      	mov	r1, r7
 803819a:	beab      	bkpt	0x00ab
 803819c:	4605      	mov	r5, r0
 803819e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8038238 <initialise_monitor_handles+0xbc>
 80381a2:	4623      	mov	r3, r4
 80381a4:	4c20      	ldr	r4, [pc, #128]	; (8038228 <initialise_monitor_handles+0xac>)
 80381a6:	f8c8 5000 	str.w	r5, [r8]
 80381aa:	f04f 32ff 	mov.w	r2, #4294967295
 80381ae:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80381b2:	3301      	adds	r3, #1
 80381b4:	2b14      	cmp	r3, #20
 80381b6:	d1fa      	bne.n	80381ae <initialise_monitor_handles+0x32>
 80381b8:	f7ff ffd4 	bl	8038164 <_has_ext_stdout_stderr>
 80381bc:	4d1b      	ldr	r5, [pc, #108]	; (803822c <initialise_monitor_handles+0xb0>)
 80381be:	b1d0      	cbz	r0, 80381f6 <initialise_monitor_handles+0x7a>
 80381c0:	f04f 0a03 	mov.w	sl, #3
 80381c4:	2304      	movs	r3, #4
 80381c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80381ca:	2601      	movs	r6, #1
 80381cc:	f8cd a00c 	str.w	sl, [sp, #12]
 80381d0:	9302      	str	r3, [sp, #8]
 80381d2:	4630      	mov	r0, r6
 80381d4:	4639      	mov	r1, r7
 80381d6:	beab      	bkpt	0x00ab
 80381d8:	4683      	mov	fp, r0
 80381da:	4b15      	ldr	r3, [pc, #84]	; (8038230 <initialise_monitor_handles+0xb4>)
 80381dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80381e0:	f8c3 b000 	str.w	fp, [r3]
 80381e4:	2308      	movs	r3, #8
 80381e6:	f8cd a00c 	str.w	sl, [sp, #12]
 80381ea:	9302      	str	r3, [sp, #8]
 80381ec:	4630      	mov	r0, r6
 80381ee:	4639      	mov	r1, r7
 80381f0:	beab      	bkpt	0x00ab
 80381f2:	4606      	mov	r6, r0
 80381f4:	602e      	str	r6, [r5, #0]
 80381f6:	682b      	ldr	r3, [r5, #0]
 80381f8:	3301      	adds	r3, #1
 80381fa:	bf02      	ittt	eq
 80381fc:	4b0c      	ldreq	r3, [pc, #48]	; (8038230 <initialise_monitor_handles+0xb4>)
 80381fe:	681b      	ldreq	r3, [r3, #0]
 8038200:	602b      	streq	r3, [r5, #0]
 8038202:	2600      	movs	r6, #0
 8038204:	f8d8 3000 	ldr.w	r3, [r8]
 8038208:	6023      	str	r3, [r4, #0]
 803820a:	6066      	str	r6, [r4, #4]
 803820c:	f7ff ffaa 	bl	8038164 <_has_ext_stdout_stderr>
 8038210:	b130      	cbz	r0, 8038220 <initialise_monitor_handles+0xa4>
 8038212:	4b07      	ldr	r3, [pc, #28]	; (8038230 <initialise_monitor_handles+0xb4>)
 8038214:	681b      	ldr	r3, [r3, #0]
 8038216:	e9c4 3602 	strd	r3, r6, [r4, #8]
 803821a:	682b      	ldr	r3, [r5, #0]
 803821c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8038220:	b005      	add	sp, #20
 8038222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038226:	bf00      	nop
 8038228:	2000ce90 	.word	0x2000ce90
 803822c:	2000ce84 	.word	0x2000ce84
 8038230:	2000ce8c 	.word	0x2000ce8c
 8038234:	0803c4f1 	.word	0x0803c4f1
 8038238:	2000ce88 	.word	0x2000ce88

0803823c <_isatty>:
 803823c:	b570      	push	{r4, r5, r6, lr}
 803823e:	f7ff fd45 	bl	8037ccc <findslot>
 8038242:	2509      	movs	r5, #9
 8038244:	4604      	mov	r4, r0
 8038246:	b920      	cbnz	r0, 8038252 <_isatty+0x16>
 8038248:	f7fe fcd0 	bl	8036bec <__errno>
 803824c:	6005      	str	r5, [r0, #0]
 803824e:	4620      	mov	r0, r4
 8038250:	bd70      	pop	{r4, r5, r6, pc}
 8038252:	4628      	mov	r0, r5
 8038254:	4621      	mov	r1, r4
 8038256:	beab      	bkpt	0x00ab
 8038258:	4604      	mov	r4, r0
 803825a:	2c01      	cmp	r4, #1
 803825c:	d0f7      	beq.n	803824e <_isatty+0x12>
 803825e:	f7fe fcc5 	bl	8036bec <__errno>
 8038262:	2400      	movs	r4, #0
 8038264:	4605      	mov	r5, r0
 8038266:	2613      	movs	r6, #19
 8038268:	4630      	mov	r0, r6
 803826a:	4621      	mov	r1, r4
 803826c:	beab      	bkpt	0x00ab
 803826e:	4606      	mov	r6, r0
 8038270:	602e      	str	r6, [r5, #0]
 8038272:	e7ec      	b.n	803824e <_isatty+0x12>

08038274 <_exit>:
 8038274:	4601      	mov	r1, r0
 8038276:	b508      	push	{r3, lr}
 8038278:	4a02      	ldr	r2, [pc, #8]	; (8038284 <_exit+0x10>)
 803827a:	f04f 30ff 	mov.w	r0, #4294967295
 803827e:	f000 f803 	bl	8038288 <_kill_shared>
 8038282:	bf00      	nop
 8038284:	00020026 	.word	0x00020026

08038288 <_kill_shared>:
 8038288:	b507      	push	{r0, r1, r2, lr}
 803828a:	e9cd 2100 	strd	r2, r1, [sp]
 803828e:	f7ff ff5d 	bl	803814c <_has_ext_exit_extended>
 8038292:	2800      	cmp	r0, #0
 8038294:	bf14      	ite	ne
 8038296:	2420      	movne	r4, #32
 8038298:	2418      	moveq	r4, #24
 803829a:	f7ff ff57 	bl	803814c <_has_ext_exit_extended>
 803829e:	b120      	cbz	r0, 80382aa <_kill_shared+0x22>
 80382a0:	466d      	mov	r5, sp
 80382a2:	4620      	mov	r0, r4
 80382a4:	4629      	mov	r1, r5
 80382a6:	beab      	bkpt	0x00ab
 80382a8:	4604      	mov	r4, r0
 80382aa:	9d00      	ldr	r5, [sp, #0]
 80382ac:	e7f9      	b.n	80382a2 <_kill_shared+0x1a>
	...

080382b0 <_kill>:
 80382b0:	2906      	cmp	r1, #6
 80382b2:	b508      	push	{r3, lr}
 80382b4:	bf0c      	ite	eq
 80382b6:	4a02      	ldreq	r2, [pc, #8]	; (80382c0 <_kill+0x10>)
 80382b8:	4a02      	ldrne	r2, [pc, #8]	; (80382c4 <_kill+0x14>)
 80382ba:	f7ff ffe5 	bl	8038288 <_kill_shared>
 80382be:	bf00      	nop
 80382c0:	00020023 	.word	0x00020023
 80382c4:	00020026 	.word	0x00020026

080382c8 <sinf_poly>:
 80382c8:	07cb      	lsls	r3, r1, #31
 80382ca:	d412      	bmi.n	80382f2 <sinf_poly+0x2a>
 80382cc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80382d0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80382d4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80382d8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80382dc:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80382e0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80382e4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80382e8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80382ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80382f0:	4770      	bx	lr
 80382f2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80382f6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80382fa:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80382fe:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8038302:	eea1 7b06 	vfma.f64	d7, d1, d6
 8038306:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 803830a:	eea1 0b06 	vfma.f64	d0, d1, d6
 803830e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8038312:	ee21 1b05 	vmul.f64	d1, d1, d5
 8038316:	eea5 0b06 	vfma.f64	d0, d5, d6
 803831a:	e7e5      	b.n	80382e8 <sinf_poly+0x20>
 803831c:	0000      	movs	r0, r0
	...

08038320 <cosf>:
 8038320:	b538      	push	{r3, r4, r5, lr}
 8038322:	ee10 4a10 	vmov	r4, s0
 8038326:	f3c4 530a 	ubfx	r3, r4, #20, #11
 803832a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 803832e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8038332:	d21f      	bcs.n	8038374 <cosf+0x54>
 8038334:	ee27 0b07 	vmul.f64	d0, d7, d7
 8038338:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 803833c:	f0c0 8088 	bcc.w	8038450 <cosf+0x130>
 8038340:	ee20 4b00 	vmul.f64	d4, d0, d0
 8038344:	4b46      	ldr	r3, [pc, #280]	; (8038460 <cosf+0x140>)
 8038346:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 803834a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 803834e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8038352:	eea0 6b05 	vfma.f64	d6, d0, d5
 8038356:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 803835a:	eea0 7b05 	vfma.f64	d7, d0, d5
 803835e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8038362:	ee20 0b04 	vmul.f64	d0, d0, d4
 8038366:	eea4 7b05 	vfma.f64	d7, d4, d5
 803836a:	eea6 7b00 	vfma.f64	d7, d6, d0
 803836e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8038372:	bd38      	pop	{r3, r4, r5, pc}
 8038374:	f240 422e 	movw	r2, #1070	; 0x42e
 8038378:	4293      	cmp	r3, r2
 803837a:	d82b      	bhi.n	80383d4 <cosf+0xb4>
 803837c:	4b38      	ldr	r3, [pc, #224]	; (8038460 <cosf+0x140>)
 803837e:	ed93 6b08 	vldr	d6, [r3, #32]
 8038382:	ee27 6b06 	vmul.f64	d6, d7, d6
 8038386:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 803838a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 803838e:	ee16 1a90 	vmov	r1, s13
 8038392:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8038396:	1609      	asrs	r1, r1, #24
 8038398:	ee06 1a90 	vmov	s13, r1
 803839c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80383a0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80383a4:	f001 0203 	and.w	r2, r1, #3
 80383a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80383ac:	eea5 7b46 	vfms.f64	d7, d5, d6
 80383b0:	eeb0 0b47 	vmov.f64	d0, d7
 80383b4:	ed92 7b00 	vldr	d7, [r2]
 80383b8:	ee20 1b00 	vmul.f64	d1, d0, d0
 80383bc:	f011 0f02 	tst.w	r1, #2
 80383c0:	bf08      	it	eq
 80383c2:	4618      	moveq	r0, r3
 80383c4:	f081 0101 	eor.w	r1, r1, #1
 80383c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80383cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80383d0:	f7ff bf7a 	b.w	80382c8 <sinf_poly>
 80383d4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80383d8:	d236      	bcs.n	8038448 <cosf+0x128>
 80383da:	4a22      	ldr	r2, [pc, #136]	; (8038464 <cosf+0x144>)
 80383dc:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80383e0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80383e4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80383e8:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80383ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80383f0:	4083      	lsls	r3, r0
 80383f2:	6a28      	ldr	r0, [r5, #32]
 80383f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80383f8:	fba3 1000 	umull	r1, r0, r3, r0
 80383fc:	6929      	ldr	r1, [r5, #16]
 80383fe:	435a      	muls	r2, r3
 8038400:	fbe3 0201 	umlal	r0, r2, r3, r1
 8038404:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8038408:	0f8d      	lsrs	r5, r1, #30
 803840a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 803840e:	1a51      	subs	r1, r2, r1
 8038410:	f7d7 fffc 	bl	801040c <__aeabi_l2d>
 8038414:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8038418:	4b11      	ldr	r3, [pc, #68]	; (8038460 <cosf+0x140>)
 803841a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8038458 <cosf+0x138>
 803841e:	ec41 0b16 	vmov	d6, r0, r1
 8038422:	f004 0203 	and.w	r2, r4, #3
 8038426:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 803842a:	f014 0f02 	tst.w	r4, #2
 803842e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8038432:	ee26 7b07 	vmul.f64	d7, d6, d7
 8038436:	ed92 0b00 	vldr	d0, [r2]
 803843a:	ee27 1b07 	vmul.f64	d1, d7, d7
 803843e:	f085 0101 	eor.w	r1, r5, #1
 8038442:	bf08      	it	eq
 8038444:	4618      	moveq	r0, r3
 8038446:	e7bf      	b.n	80383c8 <cosf+0xa8>
 8038448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803844c:	f000 b844 	b.w	80384d8 <__math_invalidf>
 8038450:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8038454:	e78d      	b.n	8038372 <cosf+0x52>
 8038456:	bf00      	nop
 8038458:	54442d18 	.word	0x54442d18
 803845c:	3c1921fb 	.word	0x3c1921fb
 8038460:	0803d938 	.word	0x0803d938
 8038464:	0803d8d8 	.word	0x0803d8d8

08038468 <with_errnof>:
 8038468:	b513      	push	{r0, r1, r4, lr}
 803846a:	4604      	mov	r4, r0
 803846c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8038470:	f7fe fbbc 	bl	8036bec <__errno>
 8038474:	ed9d 0a01 	vldr	s0, [sp, #4]
 8038478:	6004      	str	r4, [r0, #0]
 803847a:	b002      	add	sp, #8
 803847c:	bd10      	pop	{r4, pc}

0803847e <xflowf>:
 803847e:	b130      	cbz	r0, 803848e <xflowf+0x10>
 8038480:	eef1 7a40 	vneg.f32	s15, s0
 8038484:	ee27 0a80 	vmul.f32	s0, s15, s0
 8038488:	2022      	movs	r0, #34	; 0x22
 803848a:	f7ff bfed 	b.w	8038468 <with_errnof>
 803848e:	eef0 7a40 	vmov.f32	s15, s0
 8038492:	e7f7      	b.n	8038484 <xflowf+0x6>

08038494 <__math_uflowf>:
 8038494:	ed9f 0a01 	vldr	s0, [pc, #4]	; 803849c <__math_uflowf+0x8>
 8038498:	f7ff bff1 	b.w	803847e <xflowf>
 803849c:	10000000 	.word	0x10000000

080384a0 <__math_may_uflowf>:
 80384a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80384a8 <__math_may_uflowf+0x8>
 80384a4:	f7ff bfeb 	b.w	803847e <xflowf>
 80384a8:	1a200000 	.word	0x1a200000

080384ac <__math_oflowf>:
 80384ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80384b4 <__math_oflowf+0x8>
 80384b0:	f7ff bfe5 	b.w	803847e <xflowf>
 80384b4:	70000000 	.word	0x70000000

080384b8 <__math_divzerof>:
 80384b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80384bc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80384c0:	2800      	cmp	r0, #0
 80384c2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80384c6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80384d4 <__math_divzerof+0x1c>
 80384ca:	2022      	movs	r0, #34	; 0x22
 80384cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80384d0:	f7ff bfca 	b.w	8038468 <with_errnof>
 80384d4:	00000000 	.word	0x00000000

080384d8 <__math_invalidf>:
 80384d8:	eef0 7a40 	vmov.f32	s15, s0
 80384dc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80384e0:	eef4 7a67 	vcmp.f32	s15, s15
 80384e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80384e8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80384ec:	d602      	bvs.n	80384f4 <__math_invalidf+0x1c>
 80384ee:	2021      	movs	r0, #33	; 0x21
 80384f0:	f7ff bfba 	b.w	8038468 <with_errnof>
 80384f4:	4770      	bx	lr

080384f6 <checkint>:
 80384f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80384fa:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80384fe:	429a      	cmp	r2, r3
 8038500:	b570      	push	{r4, r5, r6, lr}
 8038502:	dd2a      	ble.n	803855a <checkint+0x64>
 8038504:	f240 4333 	movw	r3, #1075	; 0x433
 8038508:	429a      	cmp	r2, r3
 803850a:	dc24      	bgt.n	8038556 <checkint+0x60>
 803850c:	1a9b      	subs	r3, r3, r2
 803850e:	f1a3 0620 	sub.w	r6, r3, #32
 8038512:	f04f 32ff 	mov.w	r2, #4294967295
 8038516:	fa02 f403 	lsl.w	r4, r2, r3
 803851a:	fa02 f606 	lsl.w	r6, r2, r6
 803851e:	f1c3 0520 	rsb	r5, r3, #32
 8038522:	fa22 f505 	lsr.w	r5, r2, r5
 8038526:	4334      	orrs	r4, r6
 8038528:	432c      	orrs	r4, r5
 803852a:	409a      	lsls	r2, r3
 803852c:	ea20 0202 	bic.w	r2, r0, r2
 8038530:	ea21 0404 	bic.w	r4, r1, r4
 8038534:	4322      	orrs	r2, r4
 8038536:	f1a3 0420 	sub.w	r4, r3, #32
 803853a:	f1c3 0220 	rsb	r2, r3, #32
 803853e:	d10c      	bne.n	803855a <checkint+0x64>
 8038540:	40d8      	lsrs	r0, r3
 8038542:	fa01 f302 	lsl.w	r3, r1, r2
 8038546:	4318      	orrs	r0, r3
 8038548:	40e1      	lsrs	r1, r4
 803854a:	4308      	orrs	r0, r1
 803854c:	f000 0001 	and.w	r0, r0, #1
 8038550:	f1d0 0002 	rsbs	r0, r0, #2
 8038554:	bd70      	pop	{r4, r5, r6, pc}
 8038556:	2002      	movs	r0, #2
 8038558:	e7fc      	b.n	8038554 <checkint+0x5e>
 803855a:	2000      	movs	r0, #0
 803855c:	e7fa      	b.n	8038554 <checkint+0x5e>
	...

08038560 <pow>:
 8038560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8038564:	ee10 4a90 	vmov	r4, s1
 8038568:	ed2d 8b0a 	vpush	{d8-d12}
 803856c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8038570:	ee11 7a90 	vmov	r7, s3
 8038574:	f10a 32ff 	add.w	r2, sl, #4294967295
 8038578:	f240 73fd 	movw	r3, #2045	; 0x7fd
 803857c:	429a      	cmp	r2, r3
 803857e:	ee10 6a10 	vmov	r6, s0
 8038582:	ee11 0a10 	vmov	r0, s2
 8038586:	b086      	sub	sp, #24
 8038588:	46d4      	mov	ip, sl
 803858a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 803858e:	d806      	bhi.n	803859e <pow+0x3e>
 8038590:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8038594:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8038598:	2b7f      	cmp	r3, #127	; 0x7f
 803859a:	f240 8156 	bls.w	803884a <pow+0x2ea>
 803859e:	1802      	adds	r2, r0, r0
 80385a0:	eb47 0107 	adc.w	r1, r7, r7
 80385a4:	f06f 0e01 	mvn.w	lr, #1
 80385a8:	f112 39ff 	adds.w	r9, r2, #4294967295
 80385ac:	f141 38ff 	adc.w	r8, r1, #4294967295
 80385b0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80385b4:	45ce      	cmp	lr, r9
 80385b6:	eb73 0808 	sbcs.w	r8, r3, r8
 80385ba:	d23f      	bcs.n	803863c <pow+0xdc>
 80385bc:	ea52 0301 	orrs.w	r3, r2, r1
 80385c0:	f04f 0300 	mov.w	r3, #0
 80385c4:	d10c      	bne.n	80385e0 <pow+0x80>
 80385c6:	19b6      	adds	r6, r6, r6
 80385c8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80385cc:	4164      	adcs	r4, r4
 80385ce:	42b3      	cmp	r3, r6
 80385d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80385d4:	41a3      	sbcs	r3, r4
 80385d6:	f0c0 808c 	bcc.w	80386f2 <pow+0x192>
 80385da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80385de:	e028      	b.n	8038632 <pow+0xd2>
 80385e0:	4da3      	ldr	r5, [pc, #652]	; (8038870 <pow+0x310>)
 80385e2:	42ac      	cmp	r4, r5
 80385e4:	bf08      	it	eq
 80385e6:	429e      	cmpeq	r6, r3
 80385e8:	d107      	bne.n	80385fa <pow+0x9a>
 80385ea:	1800      	adds	r0, r0, r0
 80385ec:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80385f0:	417f      	adcs	r7, r7
 80385f2:	4283      	cmp	r3, r0
 80385f4:	4b9f      	ldr	r3, [pc, #636]	; (8038874 <pow+0x314>)
 80385f6:	41bb      	sbcs	r3, r7
 80385f8:	e7ed      	b.n	80385d6 <pow+0x76>
 80385fa:	19b6      	adds	r6, r6, r6
 80385fc:	489e      	ldr	r0, [pc, #632]	; (8038878 <pow+0x318>)
 80385fe:	4164      	adcs	r4, r4
 8038600:	42b3      	cmp	r3, r6
 8038602:	eb70 0504 	sbcs.w	r5, r0, r4
 8038606:	d374      	bcc.n	80386f2 <pow+0x192>
 8038608:	4281      	cmp	r1, r0
 803860a:	bf08      	it	eq
 803860c:	429a      	cmpeq	r2, r3
 803860e:	d170      	bne.n	80386f2 <pow+0x192>
 8038610:	4a9a      	ldr	r2, [pc, #616]	; (803887c <pow+0x31c>)
 8038612:	4294      	cmp	r4, r2
 8038614:	bf08      	it	eq
 8038616:	429e      	cmpeq	r6, r3
 8038618:	d0df      	beq.n	80385da <pow+0x7a>
 803861a:	4294      	cmp	r4, r2
 803861c:	ea6f 0707 	mvn.w	r7, r7
 8038620:	bf34      	ite	cc
 8038622:	2400      	movcc	r4, #0
 8038624:	2401      	movcs	r4, #1
 8038626:	0fff      	lsrs	r7, r7, #31
 8038628:	42bc      	cmp	r4, r7
 803862a:	f040 81d9 	bne.w	80389e0 <pow+0x480>
 803862e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8038632:	b006      	add	sp, #24
 8038634:	ecbd 8b0a 	vpop	{d8-d12}
 8038638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803863c:	eb16 0806 	adds.w	r8, r6, r6
 8038640:	eb44 0904 	adc.w	r9, r4, r4
 8038644:	f118 31ff 	adds.w	r1, r8, #4294967295
 8038648:	f169 0200 	sbc.w	r2, r9, #0
 803864c:	458e      	cmp	lr, r1
 803864e:	4193      	sbcs	r3, r2
 8038650:	d223      	bcs.n	803869a <pow+0x13a>
 8038652:	ee20 0b00 	vmul.f64	d0, d0, d0
 8038656:	2c00      	cmp	r4, #0
 8038658:	da12      	bge.n	8038680 <pow+0x120>
 803865a:	4639      	mov	r1, r7
 803865c:	f7ff ff4b 	bl	80384f6 <checkint>
 8038660:	2801      	cmp	r0, #1
 8038662:	d10d      	bne.n	8038680 <pow+0x120>
 8038664:	eeb1 0b40 	vneg.f64	d0, d0
 8038668:	ea58 0309 	orrs.w	r3, r8, r9
 803866c:	d10a      	bne.n	8038684 <pow+0x124>
 803866e:	2f00      	cmp	r7, #0
 8038670:	dadf      	bge.n	8038632 <pow+0xd2>
 8038672:	b006      	add	sp, #24
 8038674:	ecbd 8b0a 	vpop	{d8-d12}
 8038678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803867c:	f001 bce0 	b.w	803a040 <__math_divzero>
 8038680:	2000      	movs	r0, #0
 8038682:	e7f1      	b.n	8038668 <pow+0x108>
 8038684:	2f00      	cmp	r7, #0
 8038686:	dad4      	bge.n	8038632 <pow+0xd2>
 8038688:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 803868c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8038690:	ed8d 7b00 	vstr	d7, [sp]
 8038694:	ed9d 0b00 	vldr	d0, [sp]
 8038698:	e7cb      	b.n	8038632 <pow+0xd2>
 803869a:	2c00      	cmp	r4, #0
 803869c:	da2c      	bge.n	80386f8 <pow+0x198>
 803869e:	4639      	mov	r1, r7
 80386a0:	f7ff ff29 	bl	80384f6 <checkint>
 80386a4:	b930      	cbnz	r0, 80386b4 <pow+0x154>
 80386a6:	b006      	add	sp, #24
 80386a8:	ecbd 8b0a 	vpop	{d8-d12}
 80386ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80386b0:	f001 bcde 	b.w	803a070 <__math_invalid>
 80386b4:	2801      	cmp	r0, #1
 80386b6:	bf14      	ite	ne
 80386b8:	2000      	movne	r0, #0
 80386ba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80386be:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80386c2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80386c6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80386ca:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80386ce:	2b7f      	cmp	r3, #127	; 0x7f
 80386d0:	d92d      	bls.n	803872e <pow+0x1ce>
 80386d2:	4b67      	ldr	r3, [pc, #412]	; (8038870 <pow+0x310>)
 80386d4:	2000      	movs	r0, #0
 80386d6:	429c      	cmp	r4, r3
 80386d8:	bf08      	it	eq
 80386da:	4286      	cmpeq	r6, r0
 80386dc:	f43f af7d 	beq.w	80385da <pow+0x7a>
 80386e0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80386e4:	428a      	cmp	r2, r1
 80386e6:	d80c      	bhi.n	8038702 <pow+0x1a2>
 80386e8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80386ec:	42b0      	cmp	r0, r6
 80386ee:	41a3      	sbcs	r3, r4
 80386f0:	d204      	bcs.n	80386fc <pow+0x19c>
 80386f2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80386f6:	e79c      	b.n	8038632 <pow+0xd2>
 80386f8:	2000      	movs	r0, #0
 80386fa:	e7e4      	b.n	80386c6 <pow+0x166>
 80386fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8038700:	e797      	b.n	8038632 <pow+0xd2>
 8038702:	2e01      	cmp	r6, #1
 8038704:	eb74 0303 	sbcs.w	r3, r4, r3
 8038708:	f240 72ff 	movw	r2, #2047	; 0x7ff
 803870c:	bf34      	ite	cc
 803870e:	2301      	movcc	r3, #1
 8038710:	2300      	movcs	r3, #0
 8038712:	4295      	cmp	r5, r2
 8038714:	bf8c      	ite	hi
 8038716:	2500      	movhi	r5, #0
 8038718:	2501      	movls	r5, #1
 803871a:	42ab      	cmp	r3, r5
 803871c:	f000 809d 	beq.w	803885a <pow+0x2fa>
 8038720:	b006      	add	sp, #24
 8038722:	ecbd 8b0a 	vpop	{d8-d12}
 8038726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803872a:	f001 bc81 	b.w	803a030 <__math_oflow>
 803872e:	f1bc 0f00 	cmp.w	ip, #0
 8038732:	d10b      	bne.n	803874c <pow+0x1ec>
 8038734:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8038868 <pow+0x308>
 8038738:	ee20 7b07 	vmul.f64	d7, d0, d7
 803873c:	ec53 2b17 	vmov	r2, r3, d7
 8038740:	ee17 6a10 	vmov	r6, s14
 8038744:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8038748:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 803874c:	4b4c      	ldr	r3, [pc, #304]	; (8038880 <pow+0x320>)
 803874e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8038752:	4423      	add	r3, r4
 8038754:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8038758:	1519      	asrs	r1, r3, #20
 803875a:	0d1b      	lsrs	r3, r3, #20
 803875c:	051b      	lsls	r3, r3, #20
 803875e:	eba4 0903 	sub.w	r9, r4, r3
 8038762:	4b48      	ldr	r3, [pc, #288]	; (8038884 <pow+0x324>)
 8038764:	ee04 1a10 	vmov	s8, r1
 8038768:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 803876c:	f1b6 0800 	subs.w	r8, r6, #0
 8038770:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8038774:	ec49 8b15 	vmov	d5, r8, r9
 8038778:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 803877c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8038780:	ed93 7b00 	vldr	d7, [r3]
 8038784:	ed93 5b02 	vldr	d5, [r3, #8]
 8038788:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 803878c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8038790:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8038794:	ee36 ab02 	vadd.f64	d10, d6, d2
 8038798:	ee32 2b4a 	vsub.f64	d2, d2, d10
 803879c:	eea4 7b05 	vfma.f64	d7, d4, d5
 80387a0:	ed93 5b04 	vldr	d5, [r3, #16]
 80387a4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80387a8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80387ac:	ee26 5b05 	vmul.f64	d5, d6, d5
 80387b0:	ed93 4b08 	vldr	d4, [r3, #32]
 80387b4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80387b8:	eeb0 9b40 	vmov.f64	d9, d0
 80387bc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80387c0:	ed93 5b06 	vldr	d5, [r3, #24]
 80387c4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80387c8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80387cc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80387d0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80387d4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80387d8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80387dc:	ee37 9b09 	vadd.f64	d9, d7, d9
 80387e0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80387e4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80387e8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80387ec:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80387f0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80387f4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80387f8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80387fc:	eea0 5b04 	vfma.f64	d5, d0, d4
 8038800:	eeab ab05 	vfma.f64	d10, d11, d5
 8038804:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8038808:	ee21 7b06 	vmul.f64	d7, d1, d6
 803880c:	ee17 3a90 	vmov	r3, s15
 8038810:	eeb0 5b47 	vmov.f64	d5, d7
 8038814:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8038818:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 803881c:	18b2      	adds	r2, r6, r2
 803881e:	2a3e      	cmp	r2, #62	; 0x3e
 8038820:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8038824:	ee38 8b46 	vsub.f64	d8, d8, d6
 8038828:	ee38 ab0a 	vadd.f64	d10, d8, d10
 803882c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8038830:	d92b      	bls.n	803888a <pow+0x32a>
 8038832:	2a00      	cmp	r2, #0
 8038834:	da0b      	bge.n	803884e <pow+0x2ee>
 8038836:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 803883a:	ee37 0b00 	vadd.f64	d0, d7, d0
 803883e:	2800      	cmp	r0, #0
 8038840:	f43f aef7 	beq.w	8038632 <pow+0xd2>
 8038844:	eeb1 0b40 	vneg.f64	d0, d0
 8038848:	e6f3      	b.n	8038632 <pow+0xd2>
 803884a:	2000      	movs	r0, #0
 803884c:	e77e      	b.n	803874c <pow+0x1ec>
 803884e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8038852:	d919      	bls.n	8038888 <pow+0x328>
 8038854:	2b00      	cmp	r3, #0
 8038856:	f6bf af63 	bge.w	8038720 <pow+0x1c0>
 803885a:	b006      	add	sp, #24
 803885c:	ecbd 8b0a 	vpop	{d8-d12}
 8038860:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8038864:	f001 bbdc 	b.w	803a020 <__math_uflow>
 8038868:	00000000 	.word	0x00000000
 803886c:	43300000 	.word	0x43300000
 8038870:	3ff00000 	.word	0x3ff00000
 8038874:	fff00000 	.word	0xfff00000
 8038878:	ffe00000 	.word	0xffe00000
 803887c:	7fe00000 	.word	0x7fe00000
 8038880:	c0196aab 	.word	0xc0196aab
 8038884:	0803c4f8 	.word	0x0803c4f8
 8038888:	2600      	movs	r6, #0
 803888a:	495d      	ldr	r1, [pc, #372]	; (8038a00 <pow+0x4a0>)
 803888c:	ed91 4b02 	vldr	d4, [r1, #8]
 8038890:	ed91 3b00 	vldr	d3, [r1]
 8038894:	eeb0 6b44 	vmov.f64	d6, d4
 8038898:	eea7 6b03 	vfma.f64	d6, d7, d3
 803889c:	ee16 5a10 	vmov	r5, s12
 80388a0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80388a4:	ed91 4b04 	vldr	d4, [r1, #16]
 80388a8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80388ac:	eea6 7b04 	vfma.f64	d7, d6, d4
 80388b0:	eeb0 0b47 	vmov.f64	d0, d7
 80388b4:	ed91 7b06 	vldr	d7, [r1, #24]
 80388b8:	18dc      	adds	r4, r3, r3
 80388ba:	f104 030f 	add.w	r3, r4, #15
 80388be:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80388c2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80388c6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80388ca:	ee35 0b00 	vadd.f64	d0, d5, d0
 80388ce:	ee20 6b00 	vmul.f64	d6, d0, d0
 80388d2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80388d6:	ed91 5b08 	vldr	d5, [r1, #32]
 80388da:	ee30 7b07 	vadd.f64	d7, d0, d7
 80388de:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80388e2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80388e6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80388ea:	eea6 7b05 	vfma.f64	d7, d6, d5
 80388ee:	ee26 6b06 	vmul.f64	d6, d6, d6
 80388f2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80388f6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80388fa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80388fe:	eea0 5b04 	vfma.f64	d5, d0, d4
 8038902:	1940      	adds	r0, r0, r5
 8038904:	2700      	movs	r7, #0
 8038906:	eb17 020c 	adds.w	r2, r7, ip
 803890a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 803890e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8038912:	2e00      	cmp	r6, #0
 8038914:	d15f      	bne.n	80389d6 <pow+0x476>
 8038916:	42bd      	cmp	r5, r7
 8038918:	db13      	blt.n	8038942 <pow+0x3e2>
 803891a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 803891e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8038922:	4610      	mov	r0, r2
 8038924:	ec41 0b10 	vmov	d0, r0, r1
 8038928:	eea7 0b00 	vfma.f64	d0, d7, d0
 803892c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80389e8 <pow+0x488>
 8038930:	ee20 0b07 	vmul.f64	d0, d0, d7
 8038934:	b006      	add	sp, #24
 8038936:	ecbd 8b0a 	vpop	{d8-d12}
 803893a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803893e:	f001 bbaf 	b.w	803a0a0 <__math_check_oflow>
 8038942:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8038946:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 803894a:	4610      	mov	r0, r2
 803894c:	ec41 0b15 	vmov	d5, r0, r1
 8038950:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8038954:	ee27 6b05 	vmul.f64	d6, d7, d5
 8038958:	ee35 7b06 	vadd.f64	d7, d5, d6
 803895c:	eeb0 3bc7 	vabs.f64	d3, d7
 8038960:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8038964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038968:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80389f0 <pow+0x490>
 803896c:	d52a      	bpl.n	80389c4 <pow+0x464>
 803896e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8038972:	ee35 5b47 	vsub.f64	d5, d5, d7
 8038976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803897a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 803897e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8038982:	bf48      	it	mi
 8038984:	eeb0 4b43 	vmovmi.f64	d4, d3
 8038988:	ee37 3b04 	vadd.f64	d3, d7, d4
 803898c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8038990:	ee35 7b07 	vadd.f64	d7, d5, d7
 8038994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8038998:	ee37 7b03 	vadd.f64	d7, d7, d3
 803899c:	ee37 7b44 	vsub.f64	d7, d7, d4
 80389a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80389a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80389a8:	d104      	bne.n	80389b4 <pow+0x454>
 80389aa:	4632      	mov	r2, r6
 80389ac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80389b0:	ec43 2b17 	vmov	d7, r2, r3
 80389b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80389b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80389bc:	ee26 6b00 	vmul.f64	d6, d6, d0
 80389c0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80389c4:	ee27 0b00 	vmul.f64	d0, d7, d0
 80389c8:	b006      	add	sp, #24
 80389ca:	ecbd 8b0a 	vpop	{d8-d12}
 80389ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80389d2:	f001 bb5c 	b.w	803a08e <__math_check_uflow>
 80389d6:	ec43 2b10 	vmov	d0, r2, r3
 80389da:	eea7 0b00 	vfma.f64	d0, d7, d0
 80389de:	e628      	b.n	8038632 <pow+0xd2>
 80389e0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80389f8 <pow+0x498>
 80389e4:	e625      	b.n	8038632 <pow+0xd2>
 80389e6:	bf00      	nop
 80389e8:	00000000 	.word	0x00000000
 80389ec:	7f000000 	.word	0x7f000000
 80389f0:	00000000 	.word	0x00000000
 80389f4:	00100000 	.word	0x00100000
	...
 8038a00:	0803ddd0 	.word	0x0803ddd0

08038a04 <ceilf>:
 8038a04:	ee10 3a10 	vmov	r3, s0
 8038a08:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8038a0c:	3a7f      	subs	r2, #127	; 0x7f
 8038a0e:	2a16      	cmp	r2, #22
 8038a10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8038a14:	dc2a      	bgt.n	8038a6c <ceilf+0x68>
 8038a16:	2a00      	cmp	r2, #0
 8038a18:	da11      	bge.n	8038a3e <ceilf+0x3a>
 8038a1a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8038a80 <ceilf+0x7c>
 8038a1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8038a22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8038a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038a2a:	dd05      	ble.n	8038a38 <ceilf+0x34>
 8038a2c:	2b00      	cmp	r3, #0
 8038a2e:	db23      	blt.n	8038a78 <ceilf+0x74>
 8038a30:	2900      	cmp	r1, #0
 8038a32:	bf18      	it	ne
 8038a34:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8038a38:	ee00 3a10 	vmov	s0, r3
 8038a3c:	4770      	bx	lr
 8038a3e:	4911      	ldr	r1, [pc, #68]	; (8038a84 <ceilf+0x80>)
 8038a40:	4111      	asrs	r1, r2
 8038a42:	420b      	tst	r3, r1
 8038a44:	d0fa      	beq.n	8038a3c <ceilf+0x38>
 8038a46:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8038a80 <ceilf+0x7c>
 8038a4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8038a4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8038a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038a56:	ddef      	ble.n	8038a38 <ceilf+0x34>
 8038a58:	2b00      	cmp	r3, #0
 8038a5a:	bfc2      	ittt	gt
 8038a5c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8038a60:	fa40 f202 	asrgt.w	r2, r0, r2
 8038a64:	189b      	addgt	r3, r3, r2
 8038a66:	ea23 0301 	bic.w	r3, r3, r1
 8038a6a:	e7e5      	b.n	8038a38 <ceilf+0x34>
 8038a6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8038a70:	d3e4      	bcc.n	8038a3c <ceilf+0x38>
 8038a72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8038a76:	4770      	bx	lr
 8038a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8038a7c:	e7dc      	b.n	8038a38 <ceilf+0x34>
 8038a7e:	bf00      	nop
 8038a80:	7149f2ca 	.word	0x7149f2ca
 8038a84:	007fffff 	.word	0x007fffff

08038a88 <expf>:
 8038a88:	ee10 2a10 	vmov	r2, s0
 8038a8c:	f240 412a 	movw	r1, #1066	; 0x42a
 8038a90:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8038a94:	428b      	cmp	r3, r1
 8038a96:	b430      	push	{r4, r5}
 8038a98:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8038a9c:	d92a      	bls.n	8038af4 <expf+0x6c>
 8038a9e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8038aa2:	d058      	beq.n	8038b56 <expf+0xce>
 8038aa4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8038aa8:	d303      	bcc.n	8038ab2 <expf+0x2a>
 8038aaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8038aae:	bc30      	pop	{r4, r5}
 8038ab0:	4770      	bx	lr
 8038ab2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8038b5c <expf+0xd4>
 8038ab6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8038aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038abe:	dd03      	ble.n	8038ac8 <expf+0x40>
 8038ac0:	bc30      	pop	{r4, r5}
 8038ac2:	2000      	movs	r0, #0
 8038ac4:	f7ff bcf2 	b.w	80384ac <__math_oflowf>
 8038ac8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8038b60 <expf+0xd8>
 8038acc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8038ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038ad4:	d503      	bpl.n	8038ade <expf+0x56>
 8038ad6:	bc30      	pop	{r4, r5}
 8038ad8:	2000      	movs	r0, #0
 8038ada:	f7ff bcdb 	b.w	8038494 <__math_uflowf>
 8038ade:	eddf 7a21 	vldr	s15, [pc, #132]	; 8038b64 <expf+0xdc>
 8038ae2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8038ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038aea:	d503      	bpl.n	8038af4 <expf+0x6c>
 8038aec:	bc30      	pop	{r4, r5}
 8038aee:	2000      	movs	r0, #0
 8038af0:	f7ff bcd6 	b.w	80384a0 <__math_may_uflowf>
 8038af4:	4b1c      	ldr	r3, [pc, #112]	; (8038b68 <expf+0xe0>)
 8038af6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8038afa:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8038afe:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8038b02:	eeb0 7b44 	vmov.f64	d7, d4
 8038b06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8038b0a:	ee17 0a10 	vmov	r0, s14
 8038b0e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8038b12:	f000 021f 	and.w	r2, r0, #31
 8038b16:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8038b1a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8038b1e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8038b22:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8038b26:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8038b2a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8038b2e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8038b32:	684d      	ldr	r5, [r1, #4]
 8038b34:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8038b38:	2100      	movs	r1, #0
 8038b3a:	190a      	adds	r2, r1, r4
 8038b3c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8038b40:	eea5 0b07 	vfma.f64	d0, d5, d7
 8038b44:	ec43 2b17 	vmov	d7, r2, r3
 8038b48:	eea6 0b04 	vfma.f64	d0, d6, d4
 8038b4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8038b50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8038b54:	e7ab      	b.n	8038aae <expf+0x26>
 8038b56:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8038b6c <expf+0xe4>
 8038b5a:	e7a8      	b.n	8038aae <expf+0x26>
 8038b5c:	42b17217 	.word	0x42b17217
 8038b60:	c2cff1b4 	.word	0xc2cff1b4
 8038b64:	c2ce8ecf 	.word	0xc2ce8ecf
 8038b68:	0803d540 	.word	0x0803d540
 8038b6c:	00000000 	.word	0x00000000

08038b70 <logf>:
 8038b70:	ee10 3a10 	vmov	r3, s0
 8038b74:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8038b78:	b410      	push	{r4}
 8038b7a:	d055      	beq.n	8038c28 <logf+0xb8>
 8038b7c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8038b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8038b84:	d31a      	bcc.n	8038bbc <logf+0x4c>
 8038b86:	005a      	lsls	r2, r3, #1
 8038b88:	d104      	bne.n	8038b94 <logf+0x24>
 8038b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8038b8e:	2001      	movs	r0, #1
 8038b90:	f7ff bc92 	b.w	80384b8 <__math_divzerof>
 8038b94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8038b98:	d043      	beq.n	8038c22 <logf+0xb2>
 8038b9a:	2b00      	cmp	r3, #0
 8038b9c:	db02      	blt.n	8038ba4 <logf+0x34>
 8038b9e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8038ba2:	d303      	bcc.n	8038bac <logf+0x3c>
 8038ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8038ba8:	f7ff bc96 	b.w	80384d8 <__math_invalidf>
 8038bac:	eddf 7a20 	vldr	s15, [pc, #128]	; 8038c30 <logf+0xc0>
 8038bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8038bb4:	ee10 3a10 	vmov	r3, s0
 8038bb8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8038bbc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8038bc0:	491c      	ldr	r1, [pc, #112]	; (8038c34 <logf+0xc4>)
 8038bc2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8038bc6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8038bca:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8038bce:	0dd4      	lsrs	r4, r2, #23
 8038bd0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8038bd4:	05e4      	lsls	r4, r4, #23
 8038bd6:	ed90 6b00 	vldr	d6, [r0]
 8038bda:	1b1b      	subs	r3, r3, r4
 8038bdc:	ee07 3a90 	vmov	s15, r3
 8038be0:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8038be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8038be8:	15d2      	asrs	r2, r2, #23
 8038bea:	eea6 0b07 	vfma.f64	d0, d6, d7
 8038bee:	ed90 6b02 	vldr	d6, [r0, #8]
 8038bf2:	ee20 4b00 	vmul.f64	d4, d0, d0
 8038bf6:	ee07 2a90 	vmov	s15, r2
 8038bfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8038bfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8038c02:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8038c06:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8038c0a:	eea5 7b00 	vfma.f64	d7, d5, d0
 8038c0e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8038c12:	ee30 0b06 	vadd.f64	d0, d0, d6
 8038c16:	eea5 7b04 	vfma.f64	d7, d5, d4
 8038c1a:	eea4 0b07 	vfma.f64	d0, d4, d7
 8038c1e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8038c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8038c26:	4770      	bx	lr
 8038c28:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8038c38 <logf+0xc8>
 8038c2c:	e7f9      	b.n	8038c22 <logf+0xb2>
 8038c2e:	bf00      	nop
 8038c30:	4b000000 	.word	0x4b000000
 8038c34:	0803d688 	.word	0x0803d688
 8038c38:	00000000 	.word	0x00000000

08038c3c <lrintf>:
 8038c3c:	ee10 3a10 	vmov	r3, s0
 8038c40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8038c44:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8038c48:	281e      	cmp	r0, #30
 8038c4a:	b082      	sub	sp, #8
 8038c4c:	dc2e      	bgt.n	8038cac <lrintf+0x70>
 8038c4e:	1c41      	adds	r1, r0, #1
 8038c50:	da02      	bge.n	8038c58 <lrintf+0x1c>
 8038c52:	2000      	movs	r0, #0
 8038c54:	b002      	add	sp, #8
 8038c56:	4770      	bx	lr
 8038c58:	2816      	cmp	r0, #22
 8038c5a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8038c5e:	dd09      	ble.n	8038c74 <lrintf+0x38>
 8038c60:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8038c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8038c68:	3a96      	subs	r2, #150	; 0x96
 8038c6a:	4090      	lsls	r0, r2
 8038c6c:	2900      	cmp	r1, #0
 8038c6e:	d0f1      	beq.n	8038c54 <lrintf+0x18>
 8038c70:	4240      	negs	r0, r0
 8038c72:	e7ef      	b.n	8038c54 <lrintf+0x18>
 8038c74:	4b10      	ldr	r3, [pc, #64]	; (8038cb8 <lrintf+0x7c>)
 8038c76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8038c7a:	ed93 7a00 	vldr	s14, [r3]
 8038c7e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8038c82:	ed8d 0a01 	vstr	s0, [sp, #4]
 8038c86:	eddd 7a01 	vldr	s15, [sp, #4]
 8038c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8038c8e:	ee17 3a90 	vmov	r3, s15
 8038c92:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8038c96:	d0dc      	beq.n	8038c52 <lrintf+0x16>
 8038c98:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8038c9c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8038ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8038ca4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8038ca8:	40d8      	lsrs	r0, r3
 8038caa:	e7df      	b.n	8038c6c <lrintf+0x30>
 8038cac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8038cb0:	ee17 0a90 	vmov	r0, s15
 8038cb4:	e7ce      	b.n	8038c54 <lrintf+0x18>
 8038cb6:	bf00      	nop
 8038cb8:	0803d7a8 	.word	0x0803d7a8

08038cbc <checkint>:
 8038cbc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8038cc0:	2b7e      	cmp	r3, #126	; 0x7e
 8038cc2:	dd10      	ble.n	8038ce6 <checkint+0x2a>
 8038cc4:	2b96      	cmp	r3, #150	; 0x96
 8038cc6:	dc0c      	bgt.n	8038ce2 <checkint+0x26>
 8038cc8:	2201      	movs	r2, #1
 8038cca:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8038cce:	fa02 f303 	lsl.w	r3, r2, r3
 8038cd2:	1e5a      	subs	r2, r3, #1
 8038cd4:	4202      	tst	r2, r0
 8038cd6:	d106      	bne.n	8038ce6 <checkint+0x2a>
 8038cd8:	4203      	tst	r3, r0
 8038cda:	bf0c      	ite	eq
 8038cdc:	2002      	moveq	r0, #2
 8038cde:	2001      	movne	r0, #1
 8038ce0:	4770      	bx	lr
 8038ce2:	2002      	movs	r0, #2
 8038ce4:	4770      	bx	lr
 8038ce6:	2000      	movs	r0, #0
 8038ce8:	4770      	bx	lr
 8038cea:	0000      	movs	r0, r0
 8038cec:	0000      	movs	r0, r0
	...

08038cf0 <powf>:
 8038cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8038cf2:	ee10 1a10 	vmov	r1, s0
 8038cf6:	ee10 4a90 	vmov	r4, s1
 8038cfa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8038cfe:	0062      	lsls	r2, r4, #1
 8038d00:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8038d04:	eef0 7a40 	vmov.f32	s15, s0
 8038d08:	f102 30ff 	add.w	r0, r2, #4294967295
 8038d0c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8038d10:	d252      	bcs.n	8038db8 <powf+0xc8>
 8038d12:	4298      	cmp	r0, r3
 8038d14:	d252      	bcs.n	8038dbc <powf+0xcc>
 8038d16:	2000      	movs	r0, #0
 8038d18:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8038d1c:	4ca0      	ldr	r4, [pc, #640]	; (8038fa0 <powf+0x2b0>)
 8038d1e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8038d22:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8038d26:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8038d2a:	0dd2      	lsrs	r2, r2, #23
 8038d2c:	05d2      	lsls	r2, r2, #23
 8038d2e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8038d32:	1a8b      	subs	r3, r1, r2
 8038d34:	ed95 6b00 	vldr	d6, [r5]
 8038d38:	ee07 3a90 	vmov	s15, r3
 8038d3c:	15d2      	asrs	r2, r2, #23
 8038d3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8038d42:	eea6 5b07 	vfma.f64	d5, d6, d7
 8038d46:	ed95 6b02 	vldr	d6, [r5, #8]
 8038d4a:	ee25 2b05 	vmul.f64	d2, d5, d5
 8038d4e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8038d52:	ee07 2a90 	vmov	s15, r2
 8038d56:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8038d5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8038d5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8038d62:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8038d66:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8038d6a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8038d6e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8038d72:	eea5 6b04 	vfma.f64	d6, d5, d4
 8038d76:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8038d7a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8038d7e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8038d82:	eea2 7b06 	vfma.f64	d7, d2, d6
 8038d86:	eea3 7b01 	vfma.f64	d7, d3, d1
 8038d8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8038d8e:	ee10 3a90 	vmov	r3, s1
 8038d92:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8038d96:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8038d9a:	429a      	cmp	r2, r3
 8038d9c:	f0c0 80b1 	bcc.w	8038f02 <powf+0x212>
 8038da0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8038f80 <powf+0x290>
 8038da4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8038da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038dac:	dd79      	ble.n	8038ea2 <powf+0x1b2>
 8038dae:	b003      	add	sp, #12
 8038db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038db4:	f7ff bb7a 	b.w	80384ac <__math_oflowf>
 8038db8:	4298      	cmp	r0, r3
 8038dba:	d32d      	bcc.n	8038e18 <powf+0x128>
 8038dbc:	b952      	cbnz	r2, 8038dd4 <powf+0xe4>
 8038dbe:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8038dc2:	005b      	lsls	r3, r3, #1
 8038dc4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8038dc8:	f240 80c9 	bls.w	8038f5e <powf+0x26e>
 8038dcc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8038dd0:	b003      	add	sp, #12
 8038dd2:	bd30      	pop	{r4, r5, pc}
 8038dd4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8038dd8:	d105      	bne.n	8038de6 <powf+0xf6>
 8038dda:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8038dde:	0064      	lsls	r4, r4, #1
 8038de0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8038de4:	e7f0      	b.n	8038dc8 <powf+0xd8>
 8038de6:	004b      	lsls	r3, r1, #1
 8038de8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8038dec:	d8ee      	bhi.n	8038dcc <powf+0xdc>
 8038dee:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8038df2:	d1eb      	bne.n	8038dcc <powf+0xdc>
 8038df4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8038df8:	f000 80b1 	beq.w	8038f5e <powf+0x26e>
 8038dfc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8038e00:	ea6f 0404 	mvn.w	r4, r4
 8038e04:	bf34      	ite	cc
 8038e06:	2300      	movcc	r3, #0
 8038e08:	2301      	movcs	r3, #1
 8038e0a:	0fe4      	lsrs	r4, r4, #31
 8038e0c:	42a3      	cmp	r3, r4
 8038e0e:	f040 80a9 	bne.w	8038f64 <powf+0x274>
 8038e12:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8038e16:	e7db      	b.n	8038dd0 <powf+0xe0>
 8038e18:	004d      	lsls	r5, r1, #1
 8038e1a:	1e6a      	subs	r2, r5, #1
 8038e1c:	429a      	cmp	r2, r3
 8038e1e:	d31c      	bcc.n	8038e5a <powf+0x16a>
 8038e20:	2900      	cmp	r1, #0
 8038e22:	ee20 0a00 	vmul.f32	s0, s0, s0
 8038e26:	da0f      	bge.n	8038e48 <powf+0x158>
 8038e28:	ee10 0a90 	vmov	r0, s1
 8038e2c:	f7ff ff46 	bl	8038cbc <checkint>
 8038e30:	2801      	cmp	r0, #1
 8038e32:	d109      	bne.n	8038e48 <powf+0x158>
 8038e34:	eeb1 0a40 	vneg.f32	s0, s0
 8038e38:	b945      	cbnz	r5, 8038e4c <powf+0x15c>
 8038e3a:	2c00      	cmp	r4, #0
 8038e3c:	dac8      	bge.n	8038dd0 <powf+0xe0>
 8038e3e:	b003      	add	sp, #12
 8038e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038e44:	f7ff bb38 	b.w	80384b8 <__math_divzerof>
 8038e48:	2000      	movs	r0, #0
 8038e4a:	e7f5      	b.n	8038e38 <powf+0x148>
 8038e4c:	2c00      	cmp	r4, #0
 8038e4e:	dabf      	bge.n	8038dd0 <powf+0xe0>
 8038e50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8038e54:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8038e58:	e7ba      	b.n	8038dd0 <powf+0xe0>
 8038e5a:	2900      	cmp	r1, #0
 8038e5c:	da1f      	bge.n	8038e9e <powf+0x1ae>
 8038e5e:	ee10 0a90 	vmov	r0, s1
 8038e62:	f7ff ff2b 	bl	8038cbc <checkint>
 8038e66:	b920      	cbnz	r0, 8038e72 <powf+0x182>
 8038e68:	b003      	add	sp, #12
 8038e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038e6e:	f7ff bb33 	b.w	80384d8 <__math_invalidf>
 8038e72:	2801      	cmp	r0, #1
 8038e74:	bf14      	ite	ne
 8038e76:	2000      	movne	r0, #0
 8038e78:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8038e7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8038e80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8038e84:	f4bf af48 	bcs.w	8038d18 <powf+0x28>
 8038e88:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8038fa4 <powf+0x2b4>
 8038e8c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8038e90:	ee10 3a10 	vmov	r3, s0
 8038e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8038e98:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8038e9c:	e73c      	b.n	8038d18 <powf+0x28>
 8038e9e:	2000      	movs	r0, #0
 8038ea0:	e7ee      	b.n	8038e80 <powf+0x190>
 8038ea2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8038f88 <powf+0x298>
 8038ea6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8038eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038eae:	dd10      	ble.n	8038ed2 <powf+0x1e2>
 8038eb0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8038eb4:	2800      	cmp	r0, #0
 8038eb6:	d158      	bne.n	8038f6a <powf+0x27a>
 8038eb8:	9300      	str	r3, [sp, #0]
 8038eba:	eddd 7a00 	vldr	s15, [sp]
 8038ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8038ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8038ec6:	eef4 7a47 	vcmp.f32	s15, s14
 8038eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038ece:	f47f af6e 	bne.w	8038dae <powf+0xbe>
 8038ed2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8038f90 <powf+0x2a0>
 8038ed6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8038eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038ede:	d804      	bhi.n	8038eea <powf+0x1fa>
 8038ee0:	b003      	add	sp, #12
 8038ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038ee6:	f7ff bad5 	b.w	8038494 <__math_uflowf>
 8038eea:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8038f98 <powf+0x2a8>
 8038eee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8038ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8038ef6:	d504      	bpl.n	8038f02 <powf+0x212>
 8038ef8:	b003      	add	sp, #12
 8038efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038efe:	f7ff bacf 	b.w	80384a0 <__math_may_uflowf>
 8038f02:	4b29      	ldr	r3, [pc, #164]	; (8038fa8 <powf+0x2b8>)
 8038f04:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8038f08:	ee30 6b07 	vadd.f64	d6, d0, d7
 8038f0c:	ee16 2a10 	vmov	r2, s12
 8038f10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8038f14:	f002 011f 	and.w	r1, r2, #31
 8038f18:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8038f1c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8038f20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8038f24:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8038f28:	ee27 4b07 	vmul.f64	d4, d7, d7
 8038f2c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8038f30:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8038f34:	eea7 6b05 	vfma.f64	d6, d7, d5
 8038f38:	686d      	ldr	r5, [r5, #4]
 8038f3a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8038f3e:	1882      	adds	r2, r0, r2
 8038f40:	2300      	movs	r3, #0
 8038f42:	1918      	adds	r0, r3, r4
 8038f44:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8038f48:	eea7 0b05 	vfma.f64	d0, d7, d5
 8038f4c:	ec41 0b17 	vmov	d7, r0, r1
 8038f50:	eea6 0b04 	vfma.f64	d0, d6, d4
 8038f54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8038f58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8038f5c:	e738      	b.n	8038dd0 <powf+0xe0>
 8038f5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8038f62:	e735      	b.n	8038dd0 <powf+0xe0>
 8038f64:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8038fac <powf+0x2bc>
 8038f68:	e732      	b.n	8038dd0 <powf+0xe0>
 8038f6a:	9301      	str	r3, [sp, #4]
 8038f6c:	eddd 7a01 	vldr	s15, [sp, #4]
 8038f70:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8038f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8038f78:	e7a5      	b.n	8038ec6 <powf+0x1d6>
 8038f7a:	bf00      	nop
 8038f7c:	f3af 8000 	nop.w
 8038f80:	ffd1d571 	.word	0xffd1d571
 8038f84:	405fffff 	.word	0x405fffff
 8038f88:	ffa3aae2 	.word	0xffa3aae2
 8038f8c:	405fffff 	.word	0x405fffff
 8038f90:	00000000 	.word	0x00000000
 8038f94:	c062c000 	.word	0xc062c000
 8038f98:	00000000 	.word	0x00000000
 8038f9c:	c062a000 	.word	0xc062a000
 8038fa0:	0803d7b0 	.word	0x0803d7b0
 8038fa4:	4b000000 	.word	0x4b000000
 8038fa8:	0803d540 	.word	0x0803d540
 8038fac:	00000000 	.word	0x00000000

08038fb0 <tanf>:
 8038fb0:	ee10 3a10 	vmov	r3, s0
 8038fb4:	b507      	push	{r0, r1, r2, lr}
 8038fb6:	4a12      	ldr	r2, [pc, #72]	; (8039000 <tanf+0x50>)
 8038fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8038fbc:	4293      	cmp	r3, r2
 8038fbe:	dc07      	bgt.n	8038fd0 <tanf+0x20>
 8038fc0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8039004 <tanf+0x54>
 8038fc4:	2001      	movs	r0, #1
 8038fc6:	b003      	add	sp, #12
 8038fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8038fcc:	f000 bf2c 	b.w	8039e28 <__kernel_tanf>
 8038fd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8038fd4:	db04      	blt.n	8038fe0 <tanf+0x30>
 8038fd6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8038fda:	b003      	add	sp, #12
 8038fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8038fe0:	4668      	mov	r0, sp
 8038fe2:	f000 fb6b 	bl	80396bc <__ieee754_rem_pio2f>
 8038fe6:	0040      	lsls	r0, r0, #1
 8038fe8:	f000 0002 	and.w	r0, r0, #2
 8038fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8038ff0:	ed9d 0a00 	vldr	s0, [sp]
 8038ff4:	f1c0 0001 	rsb	r0, r0, #1
 8038ff8:	f000 ff16 	bl	8039e28 <__kernel_tanf>
 8038ffc:	e7ed      	b.n	8038fda <tanf+0x2a>
 8038ffe:	bf00      	nop
 8039000:	3f490fda 	.word	0x3f490fda
 8039004:	00000000 	.word	0x00000000

08039008 <sinf_poly>:
 8039008:	07cb      	lsls	r3, r1, #31
 803900a:	d412      	bmi.n	8039032 <sinf_poly+0x2a>
 803900c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8039010:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8039014:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8039018:	eea6 7b01 	vfma.f64	d7, d6, d1
 803901c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8039020:	ee21 1b05 	vmul.f64	d1, d1, d5
 8039024:	eea6 0b05 	vfma.f64	d0, d6, d5
 8039028:	eea7 0b01 	vfma.f64	d0, d7, d1
 803902c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8039030:	4770      	bx	lr
 8039032:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8039036:	ee21 5b01 	vmul.f64	d5, d1, d1
 803903a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 803903e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8039042:	eea1 7b06 	vfma.f64	d7, d1, d6
 8039046:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 803904a:	eea1 0b06 	vfma.f64	d0, d1, d6
 803904e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8039052:	ee21 1b05 	vmul.f64	d1, d1, d5
 8039056:	eea5 0b06 	vfma.f64	d0, d5, d6
 803905a:	e7e5      	b.n	8039028 <sinf_poly+0x20>
 803905c:	0000      	movs	r0, r0
	...

08039060 <sinf>:
 8039060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8039062:	ee10 4a10 	vmov	r4, s0
 8039066:	f3c4 530a 	ubfx	r3, r4, #20, #11
 803906a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 803906e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8039072:	eef0 7a40 	vmov.f32	s15, s0
 8039076:	ea4f 5214 	mov.w	r2, r4, lsr #20
 803907a:	d218      	bcs.n	80390ae <sinf+0x4e>
 803907c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8039080:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8039084:	d20a      	bcs.n	803909c <sinf+0x3c>
 8039086:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 803908a:	d103      	bne.n	8039094 <sinf+0x34>
 803908c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8039090:	ed8d 1a01 	vstr	s2, [sp, #4]
 8039094:	eeb0 0a67 	vmov.f32	s0, s15
 8039098:	b003      	add	sp, #12
 803909a:	bd30      	pop	{r4, r5, pc}
 803909c:	483a      	ldr	r0, [pc, #232]	; (8039188 <sinf+0x128>)
 803909e:	eeb0 0b46 	vmov.f64	d0, d6
 80390a2:	2100      	movs	r1, #0
 80390a4:	b003      	add	sp, #12
 80390a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80390aa:	f7ff bfad 	b.w	8039008 <sinf_poly>
 80390ae:	f240 422e 	movw	r2, #1070	; 0x42e
 80390b2:	4293      	cmp	r3, r2
 80390b4:	d824      	bhi.n	8039100 <sinf+0xa0>
 80390b6:	4b34      	ldr	r3, [pc, #208]	; (8039188 <sinf+0x128>)
 80390b8:	ed93 7b08 	vldr	d7, [r3, #32]
 80390bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80390c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80390c4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80390c8:	ee17 1a90 	vmov	r1, s15
 80390cc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80390d0:	1609      	asrs	r1, r1, #24
 80390d2:	ee07 1a90 	vmov	s15, r1
 80390d6:	f001 0203 	and.w	r2, r1, #3
 80390da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80390de:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80390e2:	ed92 0b00 	vldr	d0, [r2]
 80390e6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80390ea:	f011 0f02 	tst.w	r1, #2
 80390ee:	eea5 6b47 	vfms.f64	d6, d5, d7
 80390f2:	bf08      	it	eq
 80390f4:	4618      	moveq	r0, r3
 80390f6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80390fa:	ee20 0b06 	vmul.f64	d0, d0, d6
 80390fe:	e7d1      	b.n	80390a4 <sinf+0x44>
 8039100:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8039104:	d237      	bcs.n	8039176 <sinf+0x116>
 8039106:	4a21      	ldr	r2, [pc, #132]	; (803918c <sinf+0x12c>)
 8039108:	f3c4 6183 	ubfx	r1, r4, #26, #4
 803910c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8039110:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8039114:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8039118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 803911c:	4083      	lsls	r3, r0
 803911e:	6a28      	ldr	r0, [r5, #32]
 8039120:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8039124:	fba3 1000 	umull	r1, r0, r3, r0
 8039128:	6929      	ldr	r1, [r5, #16]
 803912a:	435a      	muls	r2, r3
 803912c:	fbe3 0201 	umlal	r0, r2, r3, r1
 8039130:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8039134:	0f8d      	lsrs	r5, r1, #30
 8039136:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 803913a:	1a51      	subs	r1, r2, r1
 803913c:	f7d7 f966 	bl	801040c <__aeabi_l2d>
 8039140:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8039144:	4b10      	ldr	r3, [pc, #64]	; (8039188 <sinf+0x128>)
 8039146:	f004 0203 	and.w	r2, r4, #3
 803914a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 803914e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8039180 <sinf+0x120>
 8039152:	ed92 0b00 	vldr	d0, [r2]
 8039156:	ec41 0b16 	vmov	d6, r0, r1
 803915a:	f014 0f02 	tst.w	r4, #2
 803915e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8039162:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8039166:	4629      	mov	r1, r5
 8039168:	bf08      	it	eq
 803916a:	4618      	moveq	r0, r3
 803916c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8039170:	ee20 0b07 	vmul.f64	d0, d0, d7
 8039174:	e796      	b.n	80390a4 <sinf+0x44>
 8039176:	b003      	add	sp, #12
 8039178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803917c:	f7ff b9ac 	b.w	80384d8 <__math_invalidf>
 8039180:	54442d18 	.word	0x54442d18
 8039184:	3c1921fb 	.word	0x3c1921fb
 8039188:	0803d938 	.word	0x0803d938
 803918c:	0803d8d8 	.word	0x0803d8d8

08039190 <sqrt>:
 8039190:	b508      	push	{r3, lr}
 8039192:	ed2d 8b04 	vpush	{d8-d9}
 8039196:	eeb0 8b40 	vmov.f64	d8, d0
 803919a:	f000 f885 	bl	80392a8 <__ieee754_sqrt>
 803919e:	eeb4 8b48 	vcmp.f64	d8, d8
 80391a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80391a6:	d60c      	bvs.n	80391c2 <sqrt+0x32>
 80391a8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80391c8 <sqrt+0x38>
 80391ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80391b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80391b4:	d505      	bpl.n	80391c2 <sqrt+0x32>
 80391b6:	f7fd fd19 	bl	8036bec <__errno>
 80391ba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80391be:	2321      	movs	r3, #33	; 0x21
 80391c0:	6003      	str	r3, [r0, #0]
 80391c2:	ecbd 8b04 	vpop	{d8-d9}
 80391c6:	bd08      	pop	{r3, pc}
	...

080391d0 <asinf>:
 80391d0:	b508      	push	{r3, lr}
 80391d2:	ed2d 8b02 	vpush	{d8}
 80391d6:	eeb0 8a40 	vmov.f32	s16, s0
 80391da:	f000 f869 	bl	80392b0 <__ieee754_asinf>
 80391de:	eeb4 8a48 	vcmp.f32	s16, s16
 80391e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80391e6:	eef0 8a40 	vmov.f32	s17, s0
 80391ea:	d615      	bvs.n	8039218 <asinf+0x48>
 80391ec:	eeb0 0a48 	vmov.f32	s0, s16
 80391f0:	f001 f83e 	bl	803a270 <fabsf>
 80391f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80391f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80391fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039200:	dd0a      	ble.n	8039218 <asinf+0x48>
 8039202:	f7fd fcf3 	bl	8036bec <__errno>
 8039206:	ecbd 8b02 	vpop	{d8}
 803920a:	2321      	movs	r3, #33	; 0x21
 803920c:	6003      	str	r3, [r0, #0]
 803920e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8039212:	4804      	ldr	r0, [pc, #16]	; (8039224 <asinf+0x54>)
 8039214:	f001 b876 	b.w	803a304 <nanf>
 8039218:	eeb0 0a68 	vmov.f32	s0, s17
 803921c:	ecbd 8b02 	vpop	{d8}
 8039220:	bd08      	pop	{r3, pc}
 8039222:	bf00      	nop
 8039224:	0803c4d0 	.word	0x0803c4d0

08039228 <atan2f>:
 8039228:	f000 b928 	b.w	803947c <__ieee754_atan2f>

0803922c <fmodf>:
 803922c:	b508      	push	{r3, lr}
 803922e:	ed2d 8b02 	vpush	{d8}
 8039232:	eef0 8a40 	vmov.f32	s17, s0
 8039236:	eeb0 8a60 	vmov.f32	s16, s1
 803923a:	f000 f9bd 	bl	80395b8 <__ieee754_fmodf>
 803923e:	eef4 8a48 	vcmp.f32	s17, s16
 8039242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039246:	d60c      	bvs.n	8039262 <fmodf+0x36>
 8039248:	eddf 8a07 	vldr	s17, [pc, #28]	; 8039268 <fmodf+0x3c>
 803924c:	eeb4 8a68 	vcmp.f32	s16, s17
 8039250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039254:	d105      	bne.n	8039262 <fmodf+0x36>
 8039256:	f7fd fcc9 	bl	8036bec <__errno>
 803925a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 803925e:	2321      	movs	r3, #33	; 0x21
 8039260:	6003      	str	r3, [r0, #0]
 8039262:	ecbd 8b02 	vpop	{d8}
 8039266:	bd08      	pop	{r3, pc}
 8039268:	00000000 	.word	0x00000000

0803926c <sqrtf>:
 803926c:	b508      	push	{r3, lr}
 803926e:	ed2d 8b02 	vpush	{d8}
 8039272:	eeb0 8a40 	vmov.f32	s16, s0
 8039276:	f000 fb5d 	bl	8039934 <__ieee754_sqrtf>
 803927a:	eeb4 8a48 	vcmp.f32	s16, s16
 803927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039282:	d60c      	bvs.n	803929e <sqrtf+0x32>
 8039284:	eddf 8a07 	vldr	s17, [pc, #28]	; 80392a4 <sqrtf+0x38>
 8039288:	eeb4 8ae8 	vcmpe.f32	s16, s17
 803928c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039290:	d505      	bpl.n	803929e <sqrtf+0x32>
 8039292:	f7fd fcab 	bl	8036bec <__errno>
 8039296:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 803929a:	2321      	movs	r3, #33	; 0x21
 803929c:	6003      	str	r3, [r0, #0]
 803929e:	ecbd 8b02 	vpop	{d8}
 80392a2:	bd08      	pop	{r3, pc}
 80392a4:	00000000 	.word	0x00000000

080392a8 <__ieee754_sqrt>:
 80392a8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80392ac:	4770      	bx	lr
	...

080392b0 <__ieee754_asinf>:
 80392b0:	b538      	push	{r3, r4, r5, lr}
 80392b2:	ee10 5a10 	vmov	r5, s0
 80392b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80392ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80392be:	ed2d 8b04 	vpush	{d8-d9}
 80392c2:	d10c      	bne.n	80392de <__ieee754_asinf+0x2e>
 80392c4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 803943c <__ieee754_asinf+0x18c>
 80392c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8039440 <__ieee754_asinf+0x190>
 80392cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80392d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80392d4:	eeb0 0a67 	vmov.f32	s0, s15
 80392d8:	ecbd 8b04 	vpop	{d8-d9}
 80392dc:	bd38      	pop	{r3, r4, r5, pc}
 80392de:	dd04      	ble.n	80392ea <__ieee754_asinf+0x3a>
 80392e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80392e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80392e8:	e7f6      	b.n	80392d8 <__ieee754_asinf+0x28>
 80392ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80392ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80392f2:	da0b      	bge.n	803930c <__ieee754_asinf+0x5c>
 80392f4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80392f8:	da52      	bge.n	80393a0 <__ieee754_asinf+0xf0>
 80392fa:	eddf 7a52 	vldr	s15, [pc, #328]	; 8039444 <__ieee754_asinf+0x194>
 80392fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8039302:	eef4 7ae8 	vcmpe.f32	s15, s17
 8039306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803930a:	dce5      	bgt.n	80392d8 <__ieee754_asinf+0x28>
 803930c:	f000 ffb0 	bl	803a270 <fabsf>
 8039310:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8039314:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8039318:	ee20 8a08 	vmul.f32	s16, s0, s16
 803931c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8039448 <__ieee754_asinf+0x198>
 8039320:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 803944c <__ieee754_asinf+0x19c>
 8039324:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8039450 <__ieee754_asinf+0x1a0>
 8039328:	eea8 7a27 	vfma.f32	s14, s16, s15
 803932c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8039454 <__ieee754_asinf+0x1a4>
 8039330:	eee7 7a08 	vfma.f32	s15, s14, s16
 8039334:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8039458 <__ieee754_asinf+0x1a8>
 8039338:	eea7 7a88 	vfma.f32	s14, s15, s16
 803933c:	eddf 7a47 	vldr	s15, [pc, #284]	; 803945c <__ieee754_asinf+0x1ac>
 8039340:	eee7 7a08 	vfma.f32	s15, s14, s16
 8039344:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8039460 <__ieee754_asinf+0x1b0>
 8039348:	eea7 9a88 	vfma.f32	s18, s15, s16
 803934c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8039464 <__ieee754_asinf+0x1b4>
 8039350:	eee8 7a07 	vfma.f32	s15, s16, s14
 8039354:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8039468 <__ieee754_asinf+0x1b8>
 8039358:	eea7 7a88 	vfma.f32	s14, s15, s16
 803935c:	eddf 7a43 	vldr	s15, [pc, #268]	; 803946c <__ieee754_asinf+0x1bc>
 8039360:	eee7 7a08 	vfma.f32	s15, s14, s16
 8039364:	eeb0 0a48 	vmov.f32	s0, s16
 8039368:	eee7 8a88 	vfma.f32	s17, s15, s16
 803936c:	f000 fae2 	bl	8039934 <__ieee754_sqrtf>
 8039370:	4b3f      	ldr	r3, [pc, #252]	; (8039470 <__ieee754_asinf+0x1c0>)
 8039372:	ee29 9a08 	vmul.f32	s18, s18, s16
 8039376:	429c      	cmp	r4, r3
 8039378:	ee89 6a28 	vdiv.f32	s12, s18, s17
 803937c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8039380:	dd3d      	ble.n	80393fe <__ieee754_asinf+0x14e>
 8039382:	eea0 0a06 	vfma.f32	s0, s0, s12
 8039386:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8039474 <__ieee754_asinf+0x1c4>
 803938a:	eee0 7a26 	vfma.f32	s15, s0, s13
 803938e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8039440 <__ieee754_asinf+0x190>
 8039392:	ee30 0a67 	vsub.f32	s0, s0, s15
 8039396:	2d00      	cmp	r5, #0
 8039398:	bfd8      	it	le
 803939a:	eeb1 0a40 	vnegle.f32	s0, s0
 803939e:	e79b      	b.n	80392d8 <__ieee754_asinf+0x28>
 80393a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80393a4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8039448 <__ieee754_asinf+0x198>
 80393a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 803944c <__ieee754_asinf+0x19c>
 80393ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8039460 <__ieee754_asinf+0x1b0>
 80393b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80393b4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8039454 <__ieee754_asinf+0x1a4>
 80393b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80393bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8039458 <__ieee754_asinf+0x1a8>
 80393c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80393c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 803945c <__ieee754_asinf+0x1ac>
 80393c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80393cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8039450 <__ieee754_asinf+0x1a0>
 80393d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80393d4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8039464 <__ieee754_asinf+0x1b4>
 80393d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80393dc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8039468 <__ieee754_asinf+0x1b8>
 80393e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80393e4:	eddf 6a21 	vldr	s13, [pc, #132]	; 803946c <__ieee754_asinf+0x1bc>
 80393e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80393ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80393f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80393f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80393f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80393fc:	e76c      	b.n	80392d8 <__ieee754_asinf+0x28>
 80393fe:	ee10 3a10 	vmov	r3, s0
 8039402:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8039406:	f023 030f 	bic.w	r3, r3, #15
 803940a:	ee07 3a10 	vmov	s14, r3
 803940e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8039412:	ee70 7a07 	vadd.f32	s15, s0, s14
 8039416:	ee30 0a00 	vadd.f32	s0, s0, s0
 803941a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 803941e:	eddf 7a07 	vldr	s15, [pc, #28]	; 803943c <__ieee754_asinf+0x18c>
 8039422:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8039426:	eed0 7a06 	vfnms.f32	s15, s0, s12
 803942a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8039478 <__ieee754_asinf+0x1c8>
 803942e:	eeb0 6a40 	vmov.f32	s12, s0
 8039432:	eea7 6a66 	vfms.f32	s12, s14, s13
 8039436:	ee77 7ac6 	vsub.f32	s15, s15, s12
 803943a:	e7aa      	b.n	8039392 <__ieee754_asinf+0xe2>
 803943c:	b33bbd2e 	.word	0xb33bbd2e
 8039440:	3fc90fdb 	.word	0x3fc90fdb
 8039444:	7149f2ca 	.word	0x7149f2ca
 8039448:	3811ef08 	.word	0x3811ef08
 803944c:	3a4f7f04 	.word	0x3a4f7f04
 8039450:	3e2aaaab 	.word	0x3e2aaaab
 8039454:	bd241146 	.word	0xbd241146
 8039458:	3e4e0aa8 	.word	0x3e4e0aa8
 803945c:	bea6b090 	.word	0xbea6b090
 8039460:	3d9dc62e 	.word	0x3d9dc62e
 8039464:	bf303361 	.word	0xbf303361
 8039468:	4001572d 	.word	0x4001572d
 803946c:	c019d139 	.word	0xc019d139
 8039470:	3f799999 	.word	0x3f799999
 8039474:	333bbd2e 	.word	0x333bbd2e
 8039478:	3f490fdb 	.word	0x3f490fdb

0803947c <__ieee754_atan2f>:
 803947c:	ee10 2a90 	vmov	r2, s1
 8039480:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8039484:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8039488:	b510      	push	{r4, lr}
 803948a:	eef0 7a40 	vmov.f32	s15, s0
 803948e:	dc06      	bgt.n	803949e <__ieee754_atan2f+0x22>
 8039490:	ee10 0a10 	vmov	r0, s0
 8039494:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8039498:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 803949c:	dd04      	ble.n	80394a8 <__ieee754_atan2f+0x2c>
 803949e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80394a2:	eeb0 0a67 	vmov.f32	s0, s15
 80394a6:	bd10      	pop	{r4, pc}
 80394a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80394ac:	d103      	bne.n	80394b6 <__ieee754_atan2f+0x3a>
 80394ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80394b2:	f000 be09 	b.w	803a0c8 <atanf>
 80394b6:	1794      	asrs	r4, r2, #30
 80394b8:	f004 0402 	and.w	r4, r4, #2
 80394bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80394c0:	b93b      	cbnz	r3, 80394d2 <__ieee754_atan2f+0x56>
 80394c2:	2c02      	cmp	r4, #2
 80394c4:	d05c      	beq.n	8039580 <__ieee754_atan2f+0x104>
 80394c6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8039594 <__ieee754_atan2f+0x118>
 80394ca:	2c03      	cmp	r4, #3
 80394cc:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80394d0:	e7e7      	b.n	80394a2 <__ieee754_atan2f+0x26>
 80394d2:	b939      	cbnz	r1, 80394e4 <__ieee754_atan2f+0x68>
 80394d4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8039598 <__ieee754_atan2f+0x11c>
 80394d8:	ed9f 0a30 	vldr	s0, [pc, #192]	; 803959c <__ieee754_atan2f+0x120>
 80394dc:	2800      	cmp	r0, #0
 80394de:	fe67 7a80 	vselge.f32	s15, s15, s0
 80394e2:	e7de      	b.n	80394a2 <__ieee754_atan2f+0x26>
 80394e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80394e8:	d110      	bne.n	803950c <__ieee754_atan2f+0x90>
 80394ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80394ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80394f2:	d107      	bne.n	8039504 <__ieee754_atan2f+0x88>
 80394f4:	2c02      	cmp	r4, #2
 80394f6:	d846      	bhi.n	8039586 <__ieee754_atan2f+0x10a>
 80394f8:	4b29      	ldr	r3, [pc, #164]	; (80395a0 <__ieee754_atan2f+0x124>)
 80394fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80394fe:	edd4 7a00 	vldr	s15, [r4]
 8039502:	e7ce      	b.n	80394a2 <__ieee754_atan2f+0x26>
 8039504:	2c02      	cmp	r4, #2
 8039506:	d841      	bhi.n	803958c <__ieee754_atan2f+0x110>
 8039508:	4b26      	ldr	r3, [pc, #152]	; (80395a4 <__ieee754_atan2f+0x128>)
 803950a:	e7f6      	b.n	80394fa <__ieee754_atan2f+0x7e>
 803950c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8039510:	d0e0      	beq.n	80394d4 <__ieee754_atan2f+0x58>
 8039512:	1a5b      	subs	r3, r3, r1
 8039514:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8039518:	ea4f 51e3 	mov.w	r1, r3, asr #23
 803951c:	da1a      	bge.n	8039554 <__ieee754_atan2f+0xd8>
 803951e:	2a00      	cmp	r2, #0
 8039520:	da01      	bge.n	8039526 <__ieee754_atan2f+0xaa>
 8039522:	313c      	adds	r1, #60	; 0x3c
 8039524:	db19      	blt.n	803955a <__ieee754_atan2f+0xde>
 8039526:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 803952a:	f000 fea1 	bl	803a270 <fabsf>
 803952e:	f000 fdcb 	bl	803a0c8 <atanf>
 8039532:	eef0 7a40 	vmov.f32	s15, s0
 8039536:	2c01      	cmp	r4, #1
 8039538:	d012      	beq.n	8039560 <__ieee754_atan2f+0xe4>
 803953a:	2c02      	cmp	r4, #2
 803953c:	d017      	beq.n	803956e <__ieee754_atan2f+0xf2>
 803953e:	2c00      	cmp	r4, #0
 8039540:	d0af      	beq.n	80394a2 <__ieee754_atan2f+0x26>
 8039542:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80395a8 <__ieee754_atan2f+0x12c>
 8039546:	ee77 7a80 	vadd.f32	s15, s15, s0
 803954a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80395ac <__ieee754_atan2f+0x130>
 803954e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8039552:	e7a6      	b.n	80394a2 <__ieee754_atan2f+0x26>
 8039554:	eddf 7a10 	vldr	s15, [pc, #64]	; 8039598 <__ieee754_atan2f+0x11c>
 8039558:	e7ed      	b.n	8039536 <__ieee754_atan2f+0xba>
 803955a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80395b0 <__ieee754_atan2f+0x134>
 803955e:	e7ea      	b.n	8039536 <__ieee754_atan2f+0xba>
 8039560:	ee17 3a90 	vmov	r3, s15
 8039564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8039568:	ee07 3a90 	vmov	s15, r3
 803956c:	e799      	b.n	80394a2 <__ieee754_atan2f+0x26>
 803956e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80395a8 <__ieee754_atan2f+0x12c>
 8039572:	ee77 7a80 	vadd.f32	s15, s15, s0
 8039576:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80395ac <__ieee754_atan2f+0x130>
 803957a:	ee70 7a67 	vsub.f32	s15, s0, s15
 803957e:	e790      	b.n	80394a2 <__ieee754_atan2f+0x26>
 8039580:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80395ac <__ieee754_atan2f+0x130>
 8039584:	e78d      	b.n	80394a2 <__ieee754_atan2f+0x26>
 8039586:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80395b4 <__ieee754_atan2f+0x138>
 803958a:	e78a      	b.n	80394a2 <__ieee754_atan2f+0x26>
 803958c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80395b0 <__ieee754_atan2f+0x134>
 8039590:	e787      	b.n	80394a2 <__ieee754_atan2f+0x26>
 8039592:	bf00      	nop
 8039594:	c0490fdb 	.word	0xc0490fdb
 8039598:	3fc90fdb 	.word	0x3fc90fdb
 803959c:	bfc90fdb 	.word	0xbfc90fdb
 80395a0:	0803da18 	.word	0x0803da18
 80395a4:	0803da24 	.word	0x0803da24
 80395a8:	33bbbd2e 	.word	0x33bbbd2e
 80395ac:	40490fdb 	.word	0x40490fdb
 80395b0:	00000000 	.word	0x00000000
 80395b4:	3f490fdb 	.word	0x3f490fdb

080395b8 <__ieee754_fmodf>:
 80395b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80395ba:	ee10 5a90 	vmov	r5, s1
 80395be:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80395c2:	d009      	beq.n	80395d8 <__ieee754_fmodf+0x20>
 80395c4:	ee10 2a10 	vmov	r2, s0
 80395c8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80395cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80395d0:	da02      	bge.n	80395d8 <__ieee754_fmodf+0x20>
 80395d2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80395d6:	dd04      	ble.n	80395e2 <__ieee754_fmodf+0x2a>
 80395d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80395dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80395e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80395e2:	42a3      	cmp	r3, r4
 80395e4:	dbfc      	blt.n	80395e0 <__ieee754_fmodf+0x28>
 80395e6:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80395ea:	d105      	bne.n	80395f8 <__ieee754_fmodf+0x40>
 80395ec:	4b32      	ldr	r3, [pc, #200]	; (80396b8 <__ieee754_fmodf+0x100>)
 80395ee:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80395f2:	ed93 0a00 	vldr	s0, [r3]
 80395f6:	e7f3      	b.n	80395e0 <__ieee754_fmodf+0x28>
 80395f8:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80395fc:	d13f      	bne.n	803967e <__ieee754_fmodf+0xc6>
 80395fe:	0219      	lsls	r1, r3, #8
 8039600:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8039604:	2900      	cmp	r1, #0
 8039606:	dc37      	bgt.n	8039678 <__ieee754_fmodf+0xc0>
 8039608:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 803960c:	d13d      	bne.n	803968a <__ieee754_fmodf+0xd2>
 803960e:	0227      	lsls	r7, r4, #8
 8039610:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8039614:	2f00      	cmp	r7, #0
 8039616:	da35      	bge.n	8039684 <__ieee754_fmodf+0xcc>
 8039618:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 803961c:	bfbb      	ittet	lt
 803961e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8039622:	1a12      	sublt	r2, r2, r0
 8039624:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8039628:	4093      	lsllt	r3, r2
 803962a:	bfa8      	it	ge
 803962c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8039630:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8039634:	bfb5      	itete	lt
 8039636:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 803963a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 803963e:	1a52      	sublt	r2, r2, r1
 8039640:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8039644:	bfb8      	it	lt
 8039646:	4094      	lsllt	r4, r2
 8039648:	1a40      	subs	r0, r0, r1
 803964a:	1b1a      	subs	r2, r3, r4
 803964c:	bb00      	cbnz	r0, 8039690 <__ieee754_fmodf+0xd8>
 803964e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8039652:	bf38      	it	cc
 8039654:	4613      	movcc	r3, r2
 8039656:	2b00      	cmp	r3, #0
 8039658:	d0c8      	beq.n	80395ec <__ieee754_fmodf+0x34>
 803965a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 803965e:	db1f      	blt.n	80396a0 <__ieee754_fmodf+0xe8>
 8039660:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8039664:	db1f      	blt.n	80396a6 <__ieee754_fmodf+0xee>
 8039666:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 803966a:	317f      	adds	r1, #127	; 0x7f
 803966c:	4333      	orrs	r3, r6
 803966e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8039672:	ee00 3a10 	vmov	s0, r3
 8039676:	e7b3      	b.n	80395e0 <__ieee754_fmodf+0x28>
 8039678:	3801      	subs	r0, #1
 803967a:	0049      	lsls	r1, r1, #1
 803967c:	e7c2      	b.n	8039604 <__ieee754_fmodf+0x4c>
 803967e:	15d8      	asrs	r0, r3, #23
 8039680:	387f      	subs	r0, #127	; 0x7f
 8039682:	e7c1      	b.n	8039608 <__ieee754_fmodf+0x50>
 8039684:	3901      	subs	r1, #1
 8039686:	007f      	lsls	r7, r7, #1
 8039688:	e7c4      	b.n	8039614 <__ieee754_fmodf+0x5c>
 803968a:	15e1      	asrs	r1, r4, #23
 803968c:	397f      	subs	r1, #127	; 0x7f
 803968e:	e7c3      	b.n	8039618 <__ieee754_fmodf+0x60>
 8039690:	2a00      	cmp	r2, #0
 8039692:	da02      	bge.n	803969a <__ieee754_fmodf+0xe2>
 8039694:	005b      	lsls	r3, r3, #1
 8039696:	3801      	subs	r0, #1
 8039698:	e7d7      	b.n	803964a <__ieee754_fmodf+0x92>
 803969a:	d0a7      	beq.n	80395ec <__ieee754_fmodf+0x34>
 803969c:	0053      	lsls	r3, r2, #1
 803969e:	e7fa      	b.n	8039696 <__ieee754_fmodf+0xde>
 80396a0:	005b      	lsls	r3, r3, #1
 80396a2:	3901      	subs	r1, #1
 80396a4:	e7d9      	b.n	803965a <__ieee754_fmodf+0xa2>
 80396a6:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80396aa:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80396ae:	3182      	adds	r1, #130	; 0x82
 80396b0:	410b      	asrs	r3, r1
 80396b2:	4333      	orrs	r3, r6
 80396b4:	e7dd      	b.n	8039672 <__ieee754_fmodf+0xba>
 80396b6:	bf00      	nop
 80396b8:	0803da30 	.word	0x0803da30

080396bc <__ieee754_rem_pio2f>:
 80396bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80396be:	ee10 6a10 	vmov	r6, s0
 80396c2:	4b8e      	ldr	r3, [pc, #568]	; (80398fc <__ieee754_rem_pio2f+0x240>)
 80396c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80396c8:	429d      	cmp	r5, r3
 80396ca:	b087      	sub	sp, #28
 80396cc:	eef0 7a40 	vmov.f32	s15, s0
 80396d0:	4604      	mov	r4, r0
 80396d2:	dc05      	bgt.n	80396e0 <__ieee754_rem_pio2f+0x24>
 80396d4:	2300      	movs	r3, #0
 80396d6:	ed80 0a00 	vstr	s0, [r0]
 80396da:	6043      	str	r3, [r0, #4]
 80396dc:	2000      	movs	r0, #0
 80396de:	e01a      	b.n	8039716 <__ieee754_rem_pio2f+0x5a>
 80396e0:	4b87      	ldr	r3, [pc, #540]	; (8039900 <__ieee754_rem_pio2f+0x244>)
 80396e2:	429d      	cmp	r5, r3
 80396e4:	dc46      	bgt.n	8039774 <__ieee754_rem_pio2f+0xb8>
 80396e6:	2e00      	cmp	r6, #0
 80396e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8039904 <__ieee754_rem_pio2f+0x248>
 80396ec:	4b86      	ldr	r3, [pc, #536]	; (8039908 <__ieee754_rem_pio2f+0x24c>)
 80396ee:	f025 050f 	bic.w	r5, r5, #15
 80396f2:	dd1f      	ble.n	8039734 <__ieee754_rem_pio2f+0x78>
 80396f4:	429d      	cmp	r5, r3
 80396f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80396fa:	d00e      	beq.n	803971a <__ieee754_rem_pio2f+0x5e>
 80396fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 803990c <__ieee754_rem_pio2f+0x250>
 8039700:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8039704:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8039708:	ed80 0a00 	vstr	s0, [r0]
 803970c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8039710:	2001      	movs	r0, #1
 8039712:	edc4 7a01 	vstr	s15, [r4, #4]
 8039716:	b007      	add	sp, #28
 8039718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803971a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8039910 <__ieee754_rem_pio2f+0x254>
 803971e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8039914 <__ieee754_rem_pio2f+0x258>
 8039722:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8039726:	ee77 6ac7 	vsub.f32	s13, s15, s14
 803972a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 803972e:	edc0 6a00 	vstr	s13, [r0]
 8039732:	e7eb      	b.n	803970c <__ieee754_rem_pio2f+0x50>
 8039734:	429d      	cmp	r5, r3
 8039736:	ee77 7a80 	vadd.f32	s15, s15, s0
 803973a:	d00e      	beq.n	803975a <__ieee754_rem_pio2f+0x9e>
 803973c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 803990c <__ieee754_rem_pio2f+0x250>
 8039740:	ee37 0a87 	vadd.f32	s0, s15, s14
 8039744:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8039748:	ed80 0a00 	vstr	s0, [r0]
 803974c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8039750:	f04f 30ff 	mov.w	r0, #4294967295
 8039754:	edc4 7a01 	vstr	s15, [r4, #4]
 8039758:	e7dd      	b.n	8039716 <__ieee754_rem_pio2f+0x5a>
 803975a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8039910 <__ieee754_rem_pio2f+0x254>
 803975e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8039914 <__ieee754_rem_pio2f+0x258>
 8039762:	ee77 7a80 	vadd.f32	s15, s15, s0
 8039766:	ee77 6a87 	vadd.f32	s13, s15, s14
 803976a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 803976e:	edc0 6a00 	vstr	s13, [r0]
 8039772:	e7eb      	b.n	803974c <__ieee754_rem_pio2f+0x90>
 8039774:	4b68      	ldr	r3, [pc, #416]	; (8039918 <__ieee754_rem_pio2f+0x25c>)
 8039776:	429d      	cmp	r5, r3
 8039778:	dc72      	bgt.n	8039860 <__ieee754_rem_pio2f+0x1a4>
 803977a:	f000 fd79 	bl	803a270 <fabsf>
 803977e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 803991c <__ieee754_rem_pio2f+0x260>
 8039782:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8039786:	eee0 7a07 	vfma.f32	s15, s0, s14
 803978a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 803978e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8039792:	ee17 0a90 	vmov	r0, s15
 8039796:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8039904 <__ieee754_rem_pio2f+0x248>
 803979a:	eea7 0a67 	vfms.f32	s0, s14, s15
 803979e:	281f      	cmp	r0, #31
 80397a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 803990c <__ieee754_rem_pio2f+0x250>
 80397a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80397a8:	eeb1 6a47 	vneg.f32	s12, s14
 80397ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80397b0:	ee16 2a90 	vmov	r2, s13
 80397b4:	dc1c      	bgt.n	80397f0 <__ieee754_rem_pio2f+0x134>
 80397b6:	495a      	ldr	r1, [pc, #360]	; (8039920 <__ieee754_rem_pio2f+0x264>)
 80397b8:	1e47      	subs	r7, r0, #1
 80397ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80397be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80397c2:	428b      	cmp	r3, r1
 80397c4:	d014      	beq.n	80397f0 <__ieee754_rem_pio2f+0x134>
 80397c6:	6022      	str	r2, [r4, #0]
 80397c8:	ed94 7a00 	vldr	s14, [r4]
 80397cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80397d0:	2e00      	cmp	r6, #0
 80397d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80397d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80397da:	da9c      	bge.n	8039716 <__ieee754_rem_pio2f+0x5a>
 80397dc:	eeb1 7a47 	vneg.f32	s14, s14
 80397e0:	eeb1 0a40 	vneg.f32	s0, s0
 80397e4:	ed84 7a00 	vstr	s14, [r4]
 80397e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80397ec:	4240      	negs	r0, r0
 80397ee:	e792      	b.n	8039716 <__ieee754_rem_pio2f+0x5a>
 80397f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80397f4:	15eb      	asrs	r3, r5, #23
 80397f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80397fa:	2d08      	cmp	r5, #8
 80397fc:	dde3      	ble.n	80397c6 <__ieee754_rem_pio2f+0x10a>
 80397fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8039910 <__ieee754_rem_pio2f+0x254>
 8039802:	eddf 5a44 	vldr	s11, [pc, #272]	; 8039914 <__ieee754_rem_pio2f+0x258>
 8039806:	eef0 6a40 	vmov.f32	s13, s0
 803980a:	eee6 6a27 	vfma.f32	s13, s12, s15
 803980e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8039812:	eea6 0a27 	vfma.f32	s0, s12, s15
 8039816:	eef0 7a40 	vmov.f32	s15, s0
 803981a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 803981e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8039822:	ee15 2a90 	vmov	r2, s11
 8039826:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 803982a:	1a5b      	subs	r3, r3, r1
 803982c:	2b19      	cmp	r3, #25
 803982e:	dc04      	bgt.n	803983a <__ieee754_rem_pio2f+0x17e>
 8039830:	edc4 5a00 	vstr	s11, [r4]
 8039834:	eeb0 0a66 	vmov.f32	s0, s13
 8039838:	e7c6      	b.n	80397c8 <__ieee754_rem_pio2f+0x10c>
 803983a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8039924 <__ieee754_rem_pio2f+0x268>
 803983e:	eeb0 0a66 	vmov.f32	s0, s13
 8039842:	eea6 0a25 	vfma.f32	s0, s12, s11
 8039846:	ee76 7ac0 	vsub.f32	s15, s13, s0
 803984a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8039928 <__ieee754_rem_pio2f+0x26c>
 803984e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8039852:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8039856:	ee30 7a67 	vsub.f32	s14, s0, s15
 803985a:	ed84 7a00 	vstr	s14, [r4]
 803985e:	e7b3      	b.n	80397c8 <__ieee754_rem_pio2f+0x10c>
 8039860:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8039864:	db06      	blt.n	8039874 <__ieee754_rem_pio2f+0x1b8>
 8039866:	ee70 7a40 	vsub.f32	s15, s0, s0
 803986a:	edc0 7a01 	vstr	s15, [r0, #4]
 803986e:	edc0 7a00 	vstr	s15, [r0]
 8039872:	e733      	b.n	80396dc <__ieee754_rem_pio2f+0x20>
 8039874:	15ea      	asrs	r2, r5, #23
 8039876:	3a86      	subs	r2, #134	; 0x86
 8039878:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 803987c:	ee07 3a90 	vmov	s15, r3
 8039880:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8039884:	eddf 6a29 	vldr	s13, [pc, #164]	; 803992c <__ieee754_rem_pio2f+0x270>
 8039888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 803988c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8039890:	ed8d 7a03 	vstr	s14, [sp, #12]
 8039894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8039898:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 803989c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80398a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80398a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80398a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80398ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80398b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80398b4:	edcd 7a05 	vstr	s15, [sp, #20]
 80398b8:	d11e      	bne.n	80398f8 <__ieee754_rem_pio2f+0x23c>
 80398ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80398be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80398c2:	bf14      	ite	ne
 80398c4:	2302      	movne	r3, #2
 80398c6:	2301      	moveq	r3, #1
 80398c8:	4919      	ldr	r1, [pc, #100]	; (8039930 <__ieee754_rem_pio2f+0x274>)
 80398ca:	9101      	str	r1, [sp, #4]
 80398cc:	2102      	movs	r1, #2
 80398ce:	9100      	str	r1, [sp, #0]
 80398d0:	a803      	add	r0, sp, #12
 80398d2:	4621      	mov	r1, r4
 80398d4:	f000 f832 	bl	803993c <__kernel_rem_pio2f>
 80398d8:	2e00      	cmp	r6, #0
 80398da:	f6bf af1c 	bge.w	8039716 <__ieee754_rem_pio2f+0x5a>
 80398de:	edd4 7a00 	vldr	s15, [r4]
 80398e2:	eef1 7a67 	vneg.f32	s15, s15
 80398e6:	edc4 7a00 	vstr	s15, [r4]
 80398ea:	edd4 7a01 	vldr	s15, [r4, #4]
 80398ee:	eef1 7a67 	vneg.f32	s15, s15
 80398f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80398f6:	e779      	b.n	80397ec <__ieee754_rem_pio2f+0x130>
 80398f8:	2303      	movs	r3, #3
 80398fa:	e7e5      	b.n	80398c8 <__ieee754_rem_pio2f+0x20c>
 80398fc:	3f490fd8 	.word	0x3f490fd8
 8039900:	4016cbe3 	.word	0x4016cbe3
 8039904:	3fc90f80 	.word	0x3fc90f80
 8039908:	3fc90fd0 	.word	0x3fc90fd0
 803990c:	37354443 	.word	0x37354443
 8039910:	37354400 	.word	0x37354400
 8039914:	2e85a308 	.word	0x2e85a308
 8039918:	43490f80 	.word	0x43490f80
 803991c:	3f22f984 	.word	0x3f22f984
 8039920:	0803da38 	.word	0x0803da38
 8039924:	2e85a300 	.word	0x2e85a300
 8039928:	248d3132 	.word	0x248d3132
 803992c:	43800000 	.word	0x43800000
 8039930:	0803dab8 	.word	0x0803dab8

08039934 <__ieee754_sqrtf>:
 8039934:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8039938:	4770      	bx	lr
	...

0803993c <__kernel_rem_pio2f>:
 803993c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039940:	ed2d 8b04 	vpush	{d8-d9}
 8039944:	b0d9      	sub	sp, #356	; 0x164
 8039946:	4688      	mov	r8, r1
 8039948:	9002      	str	r0, [sp, #8]
 803994a:	49bb      	ldr	r1, [pc, #748]	; (8039c38 <__kernel_rem_pio2f+0x2fc>)
 803994c:	9866      	ldr	r0, [sp, #408]	; 0x198
 803994e:	9301      	str	r3, [sp, #4]
 8039950:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8039954:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8039958:	1e59      	subs	r1, r3, #1
 803995a:	1d13      	adds	r3, r2, #4
 803995c:	db27      	blt.n	80399ae <__kernel_rem_pio2f+0x72>
 803995e:	f1b2 0b03 	subs.w	fp, r2, #3
 8039962:	bf48      	it	mi
 8039964:	f102 0b04 	addmi.w	fp, r2, #4
 8039968:	ea4f 00eb 	mov.w	r0, fp, asr #3
 803996c:	1c45      	adds	r5, r0, #1
 803996e:	00ec      	lsls	r4, r5, #3
 8039970:	1a47      	subs	r7, r0, r1
 8039972:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039976:	9403      	str	r4, [sp, #12]
 8039978:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 803997c:	eb0a 0c01 	add.w	ip, sl, r1
 8039980:	ae1c      	add	r6, sp, #112	; 0x70
 8039982:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8039986:	2400      	movs	r4, #0
 8039988:	4564      	cmp	r4, ip
 803998a:	dd12      	ble.n	80399b2 <__kernel_rem_pio2f+0x76>
 803998c:	9b01      	ldr	r3, [sp, #4]
 803998e:	ac1c      	add	r4, sp, #112	; 0x70
 8039990:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8039994:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8039998:	f04f 0c00 	mov.w	ip, #0
 803999c:	45d4      	cmp	ip, sl
 803999e:	dc27      	bgt.n	80399f0 <__kernel_rem_pio2f+0xb4>
 80399a0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80399a4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 80399a8:	4627      	mov	r7, r4
 80399aa:	2600      	movs	r6, #0
 80399ac:	e016      	b.n	80399dc <__kernel_rem_pio2f+0xa0>
 80399ae:	2000      	movs	r0, #0
 80399b0:	e7dc      	b.n	803996c <__kernel_rem_pio2f+0x30>
 80399b2:	42e7      	cmn	r7, r4
 80399b4:	bf5d      	ittte	pl
 80399b6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80399ba:	ee07 3a90 	vmovpl	s15, r3
 80399be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80399c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80399c6:	ece6 7a01 	vstmia	r6!, {s15}
 80399ca:	3401      	adds	r4, #1
 80399cc:	e7dc      	b.n	8039988 <__kernel_rem_pio2f+0x4c>
 80399ce:	ecf9 6a01 	vldmia	r9!, {s13}
 80399d2:	ed97 7a00 	vldr	s14, [r7]
 80399d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80399da:	3601      	adds	r6, #1
 80399dc:	428e      	cmp	r6, r1
 80399de:	f1a7 0704 	sub.w	r7, r7, #4
 80399e2:	ddf4      	ble.n	80399ce <__kernel_rem_pio2f+0x92>
 80399e4:	eceb 7a01 	vstmia	fp!, {s15}
 80399e8:	f10c 0c01 	add.w	ip, ip, #1
 80399ec:	3404      	adds	r4, #4
 80399ee:	e7d5      	b.n	803999c <__kernel_rem_pio2f+0x60>
 80399f0:	ab08      	add	r3, sp, #32
 80399f2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80399f6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8039c44 <__kernel_rem_pio2f+0x308>
 80399fa:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8039c40 <__kernel_rem_pio2f+0x304>
 80399fe:	9304      	str	r3, [sp, #16]
 8039a00:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8039a04:	4656      	mov	r6, sl
 8039a06:	00b3      	lsls	r3, r6, #2
 8039a08:	9305      	str	r3, [sp, #20]
 8039a0a:	ab58      	add	r3, sp, #352	; 0x160
 8039a0c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8039a10:	ac08      	add	r4, sp, #32
 8039a12:	ab44      	add	r3, sp, #272	; 0x110
 8039a14:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8039a18:	46a4      	mov	ip, r4
 8039a1a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8039a1e:	4637      	mov	r7, r6
 8039a20:	2f00      	cmp	r7, #0
 8039a22:	f1a0 0004 	sub.w	r0, r0, #4
 8039a26:	dc4f      	bgt.n	8039ac8 <__kernel_rem_pio2f+0x18c>
 8039a28:	4628      	mov	r0, r5
 8039a2a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8039a2e:	f000 fc6f 	bl	803a310 <scalbnf>
 8039a32:	eeb0 8a40 	vmov.f32	s16, s0
 8039a36:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8039a3a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8039a3e:	f000 fc1f 	bl	803a280 <floorf>
 8039a42:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8039a46:	eea0 8a67 	vfms.f32	s16, s0, s15
 8039a4a:	2d00      	cmp	r5, #0
 8039a4c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8039a50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8039a54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8039a58:	ee17 9a90 	vmov	r9, s15
 8039a5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8039a60:	dd44      	ble.n	8039aec <__kernel_rem_pio2f+0x1b0>
 8039a62:	f106 3cff 	add.w	ip, r6, #4294967295
 8039a66:	ab08      	add	r3, sp, #32
 8039a68:	f1c5 0e08 	rsb	lr, r5, #8
 8039a6c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8039a70:	fa47 f00e 	asr.w	r0, r7, lr
 8039a74:	4481      	add	r9, r0
 8039a76:	fa00 f00e 	lsl.w	r0, r0, lr
 8039a7a:	1a3f      	subs	r7, r7, r0
 8039a7c:	f1c5 0007 	rsb	r0, r5, #7
 8039a80:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8039a84:	4107      	asrs	r7, r0
 8039a86:	2f00      	cmp	r7, #0
 8039a88:	dd3f      	ble.n	8039b0a <__kernel_rem_pio2f+0x1ce>
 8039a8a:	f04f 0e00 	mov.w	lr, #0
 8039a8e:	f109 0901 	add.w	r9, r9, #1
 8039a92:	4673      	mov	r3, lr
 8039a94:	4576      	cmp	r6, lr
 8039a96:	dc6b      	bgt.n	8039b70 <__kernel_rem_pio2f+0x234>
 8039a98:	2d00      	cmp	r5, #0
 8039a9a:	dd04      	ble.n	8039aa6 <__kernel_rem_pio2f+0x16a>
 8039a9c:	2d01      	cmp	r5, #1
 8039a9e:	d078      	beq.n	8039b92 <__kernel_rem_pio2f+0x256>
 8039aa0:	2d02      	cmp	r5, #2
 8039aa2:	f000 8081 	beq.w	8039ba8 <__kernel_rem_pio2f+0x26c>
 8039aa6:	2f02      	cmp	r7, #2
 8039aa8:	d12f      	bne.n	8039b0a <__kernel_rem_pio2f+0x1ce>
 8039aaa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8039aae:	ee30 8a48 	vsub.f32	s16, s0, s16
 8039ab2:	b353      	cbz	r3, 8039b0a <__kernel_rem_pio2f+0x1ce>
 8039ab4:	4628      	mov	r0, r5
 8039ab6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8039aba:	f000 fc29 	bl	803a310 <scalbnf>
 8039abe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8039ac2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8039ac6:	e020      	b.n	8039b0a <__kernel_rem_pio2f+0x1ce>
 8039ac8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8039acc:	3f01      	subs	r7, #1
 8039ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8039ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8039ad6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8039ada:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8039ade:	ecac 0a01 	vstmia	ip!, {s0}
 8039ae2:	ed90 0a00 	vldr	s0, [r0]
 8039ae6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8039aea:	e799      	b.n	8039a20 <__kernel_rem_pio2f+0xe4>
 8039aec:	d105      	bne.n	8039afa <__kernel_rem_pio2f+0x1be>
 8039aee:	1e70      	subs	r0, r6, #1
 8039af0:	ab08      	add	r3, sp, #32
 8039af2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8039af6:	11ff      	asrs	r7, r7, #7
 8039af8:	e7c5      	b.n	8039a86 <__kernel_rem_pio2f+0x14a>
 8039afa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8039afe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8039b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039b06:	da31      	bge.n	8039b6c <__kernel_rem_pio2f+0x230>
 8039b08:	2700      	movs	r7, #0
 8039b0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8039b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039b12:	f040 809b 	bne.w	8039c4c <__kernel_rem_pio2f+0x310>
 8039b16:	1e74      	subs	r4, r6, #1
 8039b18:	46a4      	mov	ip, r4
 8039b1a:	2000      	movs	r0, #0
 8039b1c:	45d4      	cmp	ip, sl
 8039b1e:	da4a      	bge.n	8039bb6 <__kernel_rem_pio2f+0x27a>
 8039b20:	2800      	cmp	r0, #0
 8039b22:	d07a      	beq.n	8039c1a <__kernel_rem_pio2f+0x2de>
 8039b24:	ab08      	add	r3, sp, #32
 8039b26:	3d08      	subs	r5, #8
 8039b28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8039b2c:	2b00      	cmp	r3, #0
 8039b2e:	f000 8081 	beq.w	8039c34 <__kernel_rem_pio2f+0x2f8>
 8039b32:	4628      	mov	r0, r5
 8039b34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8039b38:	00a5      	lsls	r5, r4, #2
 8039b3a:	f000 fbe9 	bl	803a310 <scalbnf>
 8039b3e:	aa44      	add	r2, sp, #272	; 0x110
 8039b40:	1d2b      	adds	r3, r5, #4
 8039b42:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8039c44 <__kernel_rem_pio2f+0x308>
 8039b46:	18d1      	adds	r1, r2, r3
 8039b48:	4622      	mov	r2, r4
 8039b4a:	2a00      	cmp	r2, #0
 8039b4c:	f280 80ae 	bge.w	8039cac <__kernel_rem_pio2f+0x370>
 8039b50:	4622      	mov	r2, r4
 8039b52:	2a00      	cmp	r2, #0
 8039b54:	f2c0 80cc 	blt.w	8039cf0 <__kernel_rem_pio2f+0x3b4>
 8039b58:	a944      	add	r1, sp, #272	; 0x110
 8039b5a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8039b5e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8039c3c <__kernel_rem_pio2f+0x300>
 8039b62:	eddf 7a39 	vldr	s15, [pc, #228]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039b66:	2000      	movs	r0, #0
 8039b68:	1aa1      	subs	r1, r4, r2
 8039b6a:	e0b6      	b.n	8039cda <__kernel_rem_pio2f+0x39e>
 8039b6c:	2702      	movs	r7, #2
 8039b6e:	e78c      	b.n	8039a8a <__kernel_rem_pio2f+0x14e>
 8039b70:	6820      	ldr	r0, [r4, #0]
 8039b72:	b94b      	cbnz	r3, 8039b88 <__kernel_rem_pio2f+0x24c>
 8039b74:	b118      	cbz	r0, 8039b7e <__kernel_rem_pio2f+0x242>
 8039b76:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8039b7a:	6020      	str	r0, [r4, #0]
 8039b7c:	2001      	movs	r0, #1
 8039b7e:	f10e 0e01 	add.w	lr, lr, #1
 8039b82:	3404      	adds	r4, #4
 8039b84:	4603      	mov	r3, r0
 8039b86:	e785      	b.n	8039a94 <__kernel_rem_pio2f+0x158>
 8039b88:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8039b8c:	6020      	str	r0, [r4, #0]
 8039b8e:	4618      	mov	r0, r3
 8039b90:	e7f5      	b.n	8039b7e <__kernel_rem_pio2f+0x242>
 8039b92:	1e74      	subs	r4, r6, #1
 8039b94:	a808      	add	r0, sp, #32
 8039b96:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8039b9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8039b9e:	f10d 0c20 	add.w	ip, sp, #32
 8039ba2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8039ba6:	e77e      	b.n	8039aa6 <__kernel_rem_pio2f+0x16a>
 8039ba8:	1e74      	subs	r4, r6, #1
 8039baa:	a808      	add	r0, sp, #32
 8039bac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8039bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8039bb4:	e7f3      	b.n	8039b9e <__kernel_rem_pio2f+0x262>
 8039bb6:	ab08      	add	r3, sp, #32
 8039bb8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8039bbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8039bc0:	4318      	orrs	r0, r3
 8039bc2:	e7ab      	b.n	8039b1c <__kernel_rem_pio2f+0x1e0>
 8039bc4:	f10c 0c01 	add.w	ip, ip, #1
 8039bc8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8039bcc:	2c00      	cmp	r4, #0
 8039bce:	d0f9      	beq.n	8039bc4 <__kernel_rem_pio2f+0x288>
 8039bd0:	9b05      	ldr	r3, [sp, #20]
 8039bd2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8039bd6:	eb0d 0003 	add.w	r0, sp, r3
 8039bda:	9b01      	ldr	r3, [sp, #4]
 8039bdc:	18f4      	adds	r4, r6, r3
 8039bde:	ab1c      	add	r3, sp, #112	; 0x70
 8039be0:	1c77      	adds	r7, r6, #1
 8039be2:	384c      	subs	r0, #76	; 0x4c
 8039be4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8039be8:	4466      	add	r6, ip
 8039bea:	42be      	cmp	r6, r7
 8039bec:	f6ff af0b 	blt.w	8039a06 <__kernel_rem_pio2f+0xca>
 8039bf0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8039bf4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8039bf8:	ee07 3a90 	vmov	s15, r3
 8039bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8039c00:	f04f 0c00 	mov.w	ip, #0
 8039c04:	ece4 7a01 	vstmia	r4!, {s15}
 8039c08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039c0c:	46a1      	mov	r9, r4
 8039c0e:	458c      	cmp	ip, r1
 8039c10:	dd07      	ble.n	8039c22 <__kernel_rem_pio2f+0x2e6>
 8039c12:	ece0 7a01 	vstmia	r0!, {s15}
 8039c16:	3701      	adds	r7, #1
 8039c18:	e7e7      	b.n	8039bea <__kernel_rem_pio2f+0x2ae>
 8039c1a:	9804      	ldr	r0, [sp, #16]
 8039c1c:	f04f 0c01 	mov.w	ip, #1
 8039c20:	e7d2      	b.n	8039bc8 <__kernel_rem_pio2f+0x28c>
 8039c22:	ecfe 6a01 	vldmia	lr!, {s13}
 8039c26:	ed39 7a01 	vldmdb	r9!, {s14}
 8039c2a:	f10c 0c01 	add.w	ip, ip, #1
 8039c2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8039c32:	e7ec      	b.n	8039c0e <__kernel_rem_pio2f+0x2d2>
 8039c34:	3c01      	subs	r4, #1
 8039c36:	e775      	b.n	8039b24 <__kernel_rem_pio2f+0x1e8>
 8039c38:	0803e66c 	.word	0x0803e66c
 8039c3c:	0803e640 	.word	0x0803e640
 8039c40:	43800000 	.word	0x43800000
 8039c44:	3b800000 	.word	0x3b800000
 8039c48:	00000000 	.word	0x00000000
 8039c4c:	9b03      	ldr	r3, [sp, #12]
 8039c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8039c52:	1a98      	subs	r0, r3, r2
 8039c54:	f000 fb5c 	bl	803a310 <scalbnf>
 8039c58:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8039c40 <__kernel_rem_pio2f+0x304>
 8039c5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8039c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8039c64:	db19      	blt.n	8039c9a <__kernel_rem_pio2f+0x35e>
 8039c66:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8039c44 <__kernel_rem_pio2f+0x308>
 8039c6a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8039c6e:	aa08      	add	r2, sp, #32
 8039c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8039c74:	1c74      	adds	r4, r6, #1
 8039c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8039c7a:	3508      	adds	r5, #8
 8039c7c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8039c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8039c84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8039c88:	ee10 3a10 	vmov	r3, s0
 8039c8c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8039c90:	ee17 3a90 	vmov	r3, s15
 8039c94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8039c98:	e74b      	b.n	8039b32 <__kernel_rem_pio2f+0x1f6>
 8039c9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8039c9e:	aa08      	add	r2, sp, #32
 8039ca0:	ee10 3a10 	vmov	r3, s0
 8039ca4:	4634      	mov	r4, r6
 8039ca6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8039caa:	e742      	b.n	8039b32 <__kernel_rem_pio2f+0x1f6>
 8039cac:	a808      	add	r0, sp, #32
 8039cae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8039cb2:	9001      	str	r0, [sp, #4]
 8039cb4:	ee07 0a90 	vmov	s15, r0
 8039cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8039cbc:	3a01      	subs	r2, #1
 8039cbe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8039cc2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8039cc6:	ed61 7a01 	vstmdb	r1!, {s15}
 8039cca:	e73e      	b.n	8039b4a <__kernel_rem_pio2f+0x20e>
 8039ccc:	ecfc 6a01 	vldmia	ip!, {s13}
 8039cd0:	ecb6 7a01 	vldmia	r6!, {s14}
 8039cd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8039cd8:	3001      	adds	r0, #1
 8039cda:	4550      	cmp	r0, sl
 8039cdc:	dc01      	bgt.n	8039ce2 <__kernel_rem_pio2f+0x3a6>
 8039cde:	4288      	cmp	r0, r1
 8039ce0:	ddf4      	ble.n	8039ccc <__kernel_rem_pio2f+0x390>
 8039ce2:	a858      	add	r0, sp, #352	; 0x160
 8039ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8039ce8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8039cec:	3a01      	subs	r2, #1
 8039cee:	e730      	b.n	8039b52 <__kernel_rem_pio2f+0x216>
 8039cf0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8039cf2:	2a02      	cmp	r2, #2
 8039cf4:	dc09      	bgt.n	8039d0a <__kernel_rem_pio2f+0x3ce>
 8039cf6:	2a00      	cmp	r2, #0
 8039cf8:	dc2a      	bgt.n	8039d50 <__kernel_rem_pio2f+0x414>
 8039cfa:	d043      	beq.n	8039d84 <__kernel_rem_pio2f+0x448>
 8039cfc:	f009 0007 	and.w	r0, r9, #7
 8039d00:	b059      	add	sp, #356	; 0x164
 8039d02:	ecbd 8b04 	vpop	{d8-d9}
 8039d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039d0a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8039d0c:	2b03      	cmp	r3, #3
 8039d0e:	d1f5      	bne.n	8039cfc <__kernel_rem_pio2f+0x3c0>
 8039d10:	ab30      	add	r3, sp, #192	; 0xc0
 8039d12:	442b      	add	r3, r5
 8039d14:	461a      	mov	r2, r3
 8039d16:	4619      	mov	r1, r3
 8039d18:	4620      	mov	r0, r4
 8039d1a:	2800      	cmp	r0, #0
 8039d1c:	f1a1 0104 	sub.w	r1, r1, #4
 8039d20:	dc51      	bgt.n	8039dc6 <__kernel_rem_pio2f+0x48a>
 8039d22:	4621      	mov	r1, r4
 8039d24:	2901      	cmp	r1, #1
 8039d26:	f1a2 0204 	sub.w	r2, r2, #4
 8039d2a:	dc5c      	bgt.n	8039de6 <__kernel_rem_pio2f+0x4aa>
 8039d2c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039d30:	3304      	adds	r3, #4
 8039d32:	2c01      	cmp	r4, #1
 8039d34:	dc67      	bgt.n	8039e06 <__kernel_rem_pio2f+0x4ca>
 8039d36:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8039d3a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8039d3e:	2f00      	cmp	r7, #0
 8039d40:	d167      	bne.n	8039e12 <__kernel_rem_pio2f+0x4d6>
 8039d42:	edc8 6a00 	vstr	s13, [r8]
 8039d46:	ed88 7a01 	vstr	s14, [r8, #4]
 8039d4a:	edc8 7a02 	vstr	s15, [r8, #8]
 8039d4e:	e7d5      	b.n	8039cfc <__kernel_rem_pio2f+0x3c0>
 8039d50:	aa30      	add	r2, sp, #192	; 0xc0
 8039d52:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039d56:	4413      	add	r3, r2
 8039d58:	4622      	mov	r2, r4
 8039d5a:	2a00      	cmp	r2, #0
 8039d5c:	da24      	bge.n	8039da8 <__kernel_rem_pio2f+0x46c>
 8039d5e:	b34f      	cbz	r7, 8039db4 <__kernel_rem_pio2f+0x478>
 8039d60:	eef1 7a47 	vneg.f32	s15, s14
 8039d64:	edc8 7a00 	vstr	s15, [r8]
 8039d68:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8039d6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8039d70:	aa31      	add	r2, sp, #196	; 0xc4
 8039d72:	2301      	movs	r3, #1
 8039d74:	429c      	cmp	r4, r3
 8039d76:	da20      	bge.n	8039dba <__kernel_rem_pio2f+0x47e>
 8039d78:	b10f      	cbz	r7, 8039d7e <__kernel_rem_pio2f+0x442>
 8039d7a:	eef1 7a67 	vneg.f32	s15, s15
 8039d7e:	edc8 7a01 	vstr	s15, [r8, #4]
 8039d82:	e7bb      	b.n	8039cfc <__kernel_rem_pio2f+0x3c0>
 8039d84:	aa30      	add	r2, sp, #192	; 0xc0
 8039d86:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8039c48 <__kernel_rem_pio2f+0x30c>
 8039d8a:	4413      	add	r3, r2
 8039d8c:	2c00      	cmp	r4, #0
 8039d8e:	da05      	bge.n	8039d9c <__kernel_rem_pio2f+0x460>
 8039d90:	b10f      	cbz	r7, 8039d96 <__kernel_rem_pio2f+0x45a>
 8039d92:	eef1 7a67 	vneg.f32	s15, s15
 8039d96:	edc8 7a00 	vstr	s15, [r8]
 8039d9a:	e7af      	b.n	8039cfc <__kernel_rem_pio2f+0x3c0>
 8039d9c:	ed33 7a01 	vldmdb	r3!, {s14}
 8039da0:	3c01      	subs	r4, #1
 8039da2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8039da6:	e7f1      	b.n	8039d8c <__kernel_rem_pio2f+0x450>
 8039da8:	ed73 7a01 	vldmdb	r3!, {s15}
 8039dac:	3a01      	subs	r2, #1
 8039dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8039db2:	e7d2      	b.n	8039d5a <__kernel_rem_pio2f+0x41e>
 8039db4:	eef0 7a47 	vmov.f32	s15, s14
 8039db8:	e7d4      	b.n	8039d64 <__kernel_rem_pio2f+0x428>
 8039dba:	ecb2 7a01 	vldmia	r2!, {s14}
 8039dbe:	3301      	adds	r3, #1
 8039dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8039dc4:	e7d6      	b.n	8039d74 <__kernel_rem_pio2f+0x438>
 8039dc6:	edd1 7a00 	vldr	s15, [r1]
 8039dca:	edd1 6a01 	vldr	s13, [r1, #4]
 8039dce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8039dd2:	3801      	subs	r0, #1
 8039dd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8039dd8:	ed81 7a00 	vstr	s14, [r1]
 8039ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8039de0:	edc1 7a01 	vstr	s15, [r1, #4]
 8039de4:	e799      	b.n	8039d1a <__kernel_rem_pio2f+0x3de>
 8039de6:	edd2 7a00 	vldr	s15, [r2]
 8039dea:	edd2 6a01 	vldr	s13, [r2, #4]
 8039dee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8039df2:	3901      	subs	r1, #1
 8039df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8039df8:	ed82 7a00 	vstr	s14, [r2]
 8039dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8039e00:	edc2 7a01 	vstr	s15, [r2, #4]
 8039e04:	e78e      	b.n	8039d24 <__kernel_rem_pio2f+0x3e8>
 8039e06:	ed33 7a01 	vldmdb	r3!, {s14}
 8039e0a:	3c01      	subs	r4, #1
 8039e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8039e10:	e78f      	b.n	8039d32 <__kernel_rem_pio2f+0x3f6>
 8039e12:	eef1 6a66 	vneg.f32	s13, s13
 8039e16:	eeb1 7a47 	vneg.f32	s14, s14
 8039e1a:	edc8 6a00 	vstr	s13, [r8]
 8039e1e:	ed88 7a01 	vstr	s14, [r8, #4]
 8039e22:	eef1 7a67 	vneg.f32	s15, s15
 8039e26:	e790      	b.n	8039d4a <__kernel_rem_pio2f+0x40e>

08039e28 <__kernel_tanf>:
 8039e28:	b508      	push	{r3, lr}
 8039e2a:	ee10 3a10 	vmov	r3, s0
 8039e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8039e32:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8039e36:	eef0 7a40 	vmov.f32	s15, s0
 8039e3a:	da17      	bge.n	8039e6c <__kernel_tanf+0x44>
 8039e3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8039e40:	ee17 1a10 	vmov	r1, s14
 8039e44:	bb41      	cbnz	r1, 8039e98 <__kernel_tanf+0x70>
 8039e46:	1c43      	adds	r3, r0, #1
 8039e48:	4313      	orrs	r3, r2
 8039e4a:	d108      	bne.n	8039e5e <__kernel_tanf+0x36>
 8039e4c:	f000 fa10 	bl	803a270 <fabsf>
 8039e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8039e54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8039e58:	eeb0 0a67 	vmov.f32	s0, s15
 8039e5c:	bd08      	pop	{r3, pc}
 8039e5e:	2801      	cmp	r0, #1
 8039e60:	d0fa      	beq.n	8039e58 <__kernel_tanf+0x30>
 8039e62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8039e66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8039e6a:	e7f5      	b.n	8039e58 <__kernel_tanf+0x30>
 8039e6c:	494c      	ldr	r1, [pc, #304]	; (8039fa0 <__kernel_tanf+0x178>)
 8039e6e:	428a      	cmp	r2, r1
 8039e70:	db12      	blt.n	8039e98 <__kernel_tanf+0x70>
 8039e72:	2b00      	cmp	r3, #0
 8039e74:	bfb8      	it	lt
 8039e76:	eef1 7a40 	vneglt.f32	s15, s0
 8039e7a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8039fa4 <__kernel_tanf+0x17c>
 8039e7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8039e82:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8039fa8 <__kernel_tanf+0x180>
 8039e86:	bfb8      	it	lt
 8039e88:	eef1 0a60 	vneglt.f32	s1, s1
 8039e8c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8039e90:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8039e94:	eddf 0a45 	vldr	s1, [pc, #276]	; 8039fac <__kernel_tanf+0x184>
 8039e98:	eddf 5a45 	vldr	s11, [pc, #276]	; 8039fb0 <__kernel_tanf+0x188>
 8039e9c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8039fb4 <__kernel_tanf+0x18c>
 8039ea0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8039fb8 <__kernel_tanf+0x190>
 8039ea4:	493e      	ldr	r1, [pc, #248]	; (8039fa0 <__kernel_tanf+0x178>)
 8039ea6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8039eaa:	428a      	cmp	r2, r1
 8039eac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8039eb0:	eea7 6a25 	vfma.f32	s12, s14, s11
 8039eb4:	eddf 5a41 	vldr	s11, [pc, #260]	; 8039fbc <__kernel_tanf+0x194>
 8039eb8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8039ebc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8039fc0 <__kernel_tanf+0x198>
 8039ec0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8039ec4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8039fc4 <__kernel_tanf+0x19c>
 8039ec8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8039ecc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8039fc8 <__kernel_tanf+0x1a0>
 8039ed0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8039ed4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8039fcc <__kernel_tanf+0x1a4>
 8039ed8:	eee7 5a05 	vfma.f32	s11, s14, s10
 8039edc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8039fd0 <__kernel_tanf+0x1a8>
 8039ee0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8039ee4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8039fd4 <__kernel_tanf+0x1ac>
 8039ee8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8039eec:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8039fd8 <__kernel_tanf+0x1b0>
 8039ef0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8039ef4:	eddf 5a39 	vldr	s11, [pc, #228]	; 8039fdc <__kernel_tanf+0x1b4>
 8039ef8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8039efc:	eeb0 7a46 	vmov.f32	s14, s12
 8039f00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8039f04:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8039f08:	eeb0 6a60 	vmov.f32	s12, s1
 8039f0c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8039f10:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8039fe0 <__kernel_tanf+0x1b8>
 8039f14:	eee6 0a26 	vfma.f32	s1, s12, s13
 8039f18:	eee5 0a07 	vfma.f32	s1, s10, s14
 8039f1c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8039f20:	db1d      	blt.n	8039f5e <__kernel_tanf+0x136>
 8039f22:	ee06 0a90 	vmov	s13, r0
 8039f26:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8039f2a:	ee27 6a07 	vmul.f32	s12, s14, s14
 8039f2e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8039f32:	179b      	asrs	r3, r3, #30
 8039f34:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8039f38:	f003 0302 	and.w	r3, r3, #2
 8039f3c:	f1c3 0301 	rsb	r3, r3, #1
 8039f40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8039f44:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8039f48:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8039f4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8039f50:	ee07 3a90 	vmov	s15, r3
 8039f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8039f58:	ee67 7a80 	vmul.f32	s15, s15, s0
 8039f5c:	e77c      	b.n	8039e58 <__kernel_tanf+0x30>
 8039f5e:	2801      	cmp	r0, #1
 8039f60:	d01b      	beq.n	8039f9a <__kernel_tanf+0x172>
 8039f62:	4b20      	ldr	r3, [pc, #128]	; (8039fe4 <__kernel_tanf+0x1bc>)
 8039f64:	ee17 2a10 	vmov	r2, s14
 8039f68:	401a      	ands	r2, r3
 8039f6a:	ee06 2a10 	vmov	s12, r2
 8039f6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8039f72:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8039f76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8039f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8039f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8039f82:	ee16 2a90 	vmov	r2, s13
 8039f86:	4013      	ands	r3, r2
 8039f88:	ee07 3a90 	vmov	s15, r3
 8039f8c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8039f90:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8039f94:	eee7 7a26 	vfma.f32	s15, s14, s13
 8039f98:	e75e      	b.n	8039e58 <__kernel_tanf+0x30>
 8039f9a:	eef0 7a47 	vmov.f32	s15, s14
 8039f9e:	e75b      	b.n	8039e58 <__kernel_tanf+0x30>
 8039fa0:	3f2ca140 	.word	0x3f2ca140
 8039fa4:	3f490fda 	.word	0x3f490fda
 8039fa8:	33222168 	.word	0x33222168
 8039fac:	00000000 	.word	0x00000000
 8039fb0:	b79bae5f 	.word	0xb79bae5f
 8039fb4:	38a3f445 	.word	0x38a3f445
 8039fb8:	37d95384 	.word	0x37d95384
 8039fbc:	3a1a26c8 	.word	0x3a1a26c8
 8039fc0:	3b6b6916 	.word	0x3b6b6916
 8039fc4:	3cb327a4 	.word	0x3cb327a4
 8039fc8:	3e088889 	.word	0x3e088889
 8039fcc:	3895c07a 	.word	0x3895c07a
 8039fd0:	398137b9 	.word	0x398137b9
 8039fd4:	3abede48 	.word	0x3abede48
 8039fd8:	3c11371f 	.word	0x3c11371f
 8039fdc:	3d5d0dd1 	.word	0x3d5d0dd1
 8039fe0:	3eaaaaab 	.word	0x3eaaaaab
 8039fe4:	fffff000 	.word	0xfffff000

08039fe8 <with_errno>:
 8039fe8:	b513      	push	{r0, r1, r4, lr}
 8039fea:	4604      	mov	r4, r0
 8039fec:	ed8d 0b00 	vstr	d0, [sp]
 8039ff0:	f7fc fdfc 	bl	8036bec <__errno>
 8039ff4:	ed9d 0b00 	vldr	d0, [sp]
 8039ff8:	6004      	str	r4, [r0, #0]
 8039ffa:	b002      	add	sp, #8
 8039ffc:	bd10      	pop	{r4, pc}

08039ffe <xflow>:
 8039ffe:	b082      	sub	sp, #8
 803a000:	b158      	cbz	r0, 803a01a <xflow+0x1c>
 803a002:	eeb1 7b40 	vneg.f64	d7, d0
 803a006:	ed8d 7b00 	vstr	d7, [sp]
 803a00a:	ed9d 7b00 	vldr	d7, [sp]
 803a00e:	2022      	movs	r0, #34	; 0x22
 803a010:	ee20 0b07 	vmul.f64	d0, d0, d7
 803a014:	b002      	add	sp, #8
 803a016:	f7ff bfe7 	b.w	8039fe8 <with_errno>
 803a01a:	eeb0 7b40 	vmov.f64	d7, d0
 803a01e:	e7f2      	b.n	803a006 <xflow+0x8>

0803a020 <__math_uflow>:
 803a020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 803a028 <__math_uflow+0x8>
 803a024:	f7ff bfeb 	b.w	8039ffe <xflow>
 803a028:	00000000 	.word	0x00000000
 803a02c:	10000000 	.word	0x10000000

0803a030 <__math_oflow>:
 803a030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 803a038 <__math_oflow+0x8>
 803a034:	f7ff bfe3 	b.w	8039ffe <xflow>
 803a038:	00000000 	.word	0x00000000
 803a03c:	70000000 	.word	0x70000000

0803a040 <__math_divzero>:
 803a040:	b082      	sub	sp, #8
 803a042:	2800      	cmp	r0, #0
 803a044:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 803a048:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 803a04c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 803a050:	ed8d 7b00 	vstr	d7, [sp]
 803a054:	ed9d 0b00 	vldr	d0, [sp]
 803a058:	ed9f 7b03 	vldr	d7, [pc, #12]	; 803a068 <__math_divzero+0x28>
 803a05c:	2022      	movs	r0, #34	; 0x22
 803a05e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 803a062:	b002      	add	sp, #8
 803a064:	f7ff bfc0 	b.w	8039fe8 <with_errno>
	...

0803a070 <__math_invalid>:
 803a070:	eeb0 7b40 	vmov.f64	d7, d0
 803a074:	eeb4 7b47 	vcmp.f64	d7, d7
 803a078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a07c:	ee30 6b40 	vsub.f64	d6, d0, d0
 803a080:	ee86 0b06 	vdiv.f64	d0, d6, d6
 803a084:	d602      	bvs.n	803a08c <__math_invalid+0x1c>
 803a086:	2021      	movs	r0, #33	; 0x21
 803a088:	f7ff bfae 	b.w	8039fe8 <with_errno>
 803a08c:	4770      	bx	lr

0803a08e <__math_check_uflow>:
 803a08e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 803a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a096:	d102      	bne.n	803a09e <__math_check_uflow+0x10>
 803a098:	2022      	movs	r0, #34	; 0x22
 803a09a:	f7ff bfa5 	b.w	8039fe8 <with_errno>
 803a09e:	4770      	bx	lr

0803a0a0 <__math_check_oflow>:
 803a0a0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 803a0c0 <__math_check_oflow+0x20>
 803a0a4:	eeb0 7bc0 	vabs.f64	d7, d0
 803a0a8:	eeb4 7b46 	vcmp.f64	d7, d6
 803a0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a0b0:	dd02      	ble.n	803a0b8 <__math_check_oflow+0x18>
 803a0b2:	2022      	movs	r0, #34	; 0x22
 803a0b4:	f7ff bf98 	b.w	8039fe8 <with_errno>
 803a0b8:	4770      	bx	lr
 803a0ba:	bf00      	nop
 803a0bc:	f3af 8000 	nop.w
 803a0c0:	ffffffff 	.word	0xffffffff
 803a0c4:	7fefffff 	.word	0x7fefffff

0803a0c8 <atanf>:
 803a0c8:	b538      	push	{r3, r4, r5, lr}
 803a0ca:	ee10 5a10 	vmov	r5, s0
 803a0ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 803a0d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 803a0d6:	eef0 7a40 	vmov.f32	s15, s0
 803a0da:	db0f      	blt.n	803a0fc <atanf+0x34>
 803a0dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 803a0e0:	dd04      	ble.n	803a0ec <atanf+0x24>
 803a0e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 803a0e6:	eeb0 0a67 	vmov.f32	s0, s15
 803a0ea:	bd38      	pop	{r3, r4, r5, pc}
 803a0ec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 803a224 <atanf+0x15c>
 803a0f0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 803a228 <atanf+0x160>
 803a0f4:	2d00      	cmp	r5, #0
 803a0f6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 803a0fa:	e7f4      	b.n	803a0e6 <atanf+0x1e>
 803a0fc:	4b4b      	ldr	r3, [pc, #300]	; (803a22c <atanf+0x164>)
 803a0fe:	429c      	cmp	r4, r3
 803a100:	dc10      	bgt.n	803a124 <atanf+0x5c>
 803a102:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 803a106:	da0a      	bge.n	803a11e <atanf+0x56>
 803a108:	ed9f 7a49 	vldr	s14, [pc, #292]	; 803a230 <atanf+0x168>
 803a10c:	ee30 7a07 	vadd.f32	s14, s0, s14
 803a110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803a114:	eeb4 7ae6 	vcmpe.f32	s14, s13
 803a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a11c:	dce3      	bgt.n	803a0e6 <atanf+0x1e>
 803a11e:	f04f 33ff 	mov.w	r3, #4294967295
 803a122:	e013      	b.n	803a14c <atanf+0x84>
 803a124:	f000 f8a4 	bl	803a270 <fabsf>
 803a128:	4b42      	ldr	r3, [pc, #264]	; (803a234 <atanf+0x16c>)
 803a12a:	429c      	cmp	r4, r3
 803a12c:	dc4f      	bgt.n	803a1ce <atanf+0x106>
 803a12e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 803a132:	429c      	cmp	r4, r3
 803a134:	dc41      	bgt.n	803a1ba <atanf+0xf2>
 803a136:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 803a13a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 803a13e:	eea0 7a27 	vfma.f32	s14, s0, s15
 803a142:	2300      	movs	r3, #0
 803a144:	ee30 0a27 	vadd.f32	s0, s0, s15
 803a148:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803a14c:	1c5a      	adds	r2, r3, #1
 803a14e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 803a152:	ed9f 7a39 	vldr	s14, [pc, #228]	; 803a238 <atanf+0x170>
 803a156:	eddf 5a39 	vldr	s11, [pc, #228]	; 803a23c <atanf+0x174>
 803a15a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 803a240 <atanf+0x178>
 803a15e:	ee66 6a06 	vmul.f32	s13, s12, s12
 803a162:	eee6 5a87 	vfma.f32	s11, s13, s14
 803a166:	ed9f 7a37 	vldr	s14, [pc, #220]	; 803a244 <atanf+0x17c>
 803a16a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 803a16e:	eddf 5a36 	vldr	s11, [pc, #216]	; 803a248 <atanf+0x180>
 803a172:	eee7 5a26 	vfma.f32	s11, s14, s13
 803a176:	ed9f 7a35 	vldr	s14, [pc, #212]	; 803a24c <atanf+0x184>
 803a17a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 803a17e:	eddf 5a34 	vldr	s11, [pc, #208]	; 803a250 <atanf+0x188>
 803a182:	eee7 5a26 	vfma.f32	s11, s14, s13
 803a186:	ed9f 7a33 	vldr	s14, [pc, #204]	; 803a254 <atanf+0x18c>
 803a18a:	eea6 5a87 	vfma.f32	s10, s13, s14
 803a18e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 803a258 <atanf+0x190>
 803a192:	eea5 7a26 	vfma.f32	s14, s10, s13
 803a196:	ed9f 5a31 	vldr	s10, [pc, #196]	; 803a25c <atanf+0x194>
 803a19a:	eea7 5a26 	vfma.f32	s10, s14, s13
 803a19e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 803a260 <atanf+0x198>
 803a1a2:	eea5 7a26 	vfma.f32	s14, s10, s13
 803a1a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 803a1aa:	eea5 7a86 	vfma.f32	s14, s11, s12
 803a1ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 803a1b2:	d121      	bne.n	803a1f8 <atanf+0x130>
 803a1b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 803a1b8:	e795      	b.n	803a0e6 <atanf+0x1e>
 803a1ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 803a1be:	ee30 7a67 	vsub.f32	s14, s0, s15
 803a1c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 803a1c6:	2301      	movs	r3, #1
 803a1c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803a1cc:	e7be      	b.n	803a14c <atanf+0x84>
 803a1ce:	4b25      	ldr	r3, [pc, #148]	; (803a264 <atanf+0x19c>)
 803a1d0:	429c      	cmp	r4, r3
 803a1d2:	dc0b      	bgt.n	803a1ec <atanf+0x124>
 803a1d4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 803a1d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803a1dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 803a1e0:	2302      	movs	r3, #2
 803a1e2:	ee70 6a67 	vsub.f32	s13, s0, s15
 803a1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803a1ea:	e7af      	b.n	803a14c <atanf+0x84>
 803a1ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 803a1f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803a1f4:	2303      	movs	r3, #3
 803a1f6:	e7a9      	b.n	803a14c <atanf+0x84>
 803a1f8:	4a1b      	ldr	r2, [pc, #108]	; (803a268 <atanf+0x1a0>)
 803a1fa:	491c      	ldr	r1, [pc, #112]	; (803a26c <atanf+0x1a4>)
 803a1fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 803a200:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 803a204:	ed93 0a00 	vldr	s0, [r3]
 803a208:	ee37 7a40 	vsub.f32	s14, s14, s0
 803a20c:	ed92 0a00 	vldr	s0, [r2]
 803a210:	ee77 7a67 	vsub.f32	s15, s14, s15
 803a214:	2d00      	cmp	r5, #0
 803a216:	ee70 7a67 	vsub.f32	s15, s0, s15
 803a21a:	bfb8      	it	lt
 803a21c:	eef1 7a67 	vneglt.f32	s15, s15
 803a220:	e761      	b.n	803a0e6 <atanf+0x1e>
 803a222:	bf00      	nop
 803a224:	3fc90fdb 	.word	0x3fc90fdb
 803a228:	bfc90fdb 	.word	0xbfc90fdb
 803a22c:	3edfffff 	.word	0x3edfffff
 803a230:	7149f2ca 	.word	0x7149f2ca
 803a234:	3f97ffff 	.word	0x3f97ffff
 803a238:	3c8569d7 	.word	0x3c8569d7
 803a23c:	3d4bda59 	.word	0x3d4bda59
 803a240:	bd6ef16b 	.word	0xbd6ef16b
 803a244:	3d886b35 	.word	0x3d886b35
 803a248:	3dba2e6e 	.word	0x3dba2e6e
 803a24c:	3e124925 	.word	0x3e124925
 803a250:	3eaaaaab 	.word	0x3eaaaaab
 803a254:	bd15a221 	.word	0xbd15a221
 803a258:	bd9d8795 	.word	0xbd9d8795
 803a25c:	bde38e38 	.word	0xbde38e38
 803a260:	be4ccccd 	.word	0xbe4ccccd
 803a264:	401bffff 	.word	0x401bffff
 803a268:	0803e678 	.word	0x0803e678
 803a26c:	0803e688 	.word	0x0803e688

0803a270 <fabsf>:
 803a270:	ee10 3a10 	vmov	r3, s0
 803a274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803a278:	ee00 3a10 	vmov	s0, r3
 803a27c:	4770      	bx	lr
	...

0803a280 <floorf>:
 803a280:	ee10 3a10 	vmov	r3, s0
 803a284:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 803a288:	3a7f      	subs	r2, #127	; 0x7f
 803a28a:	2a16      	cmp	r2, #22
 803a28c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 803a290:	dc2a      	bgt.n	803a2e8 <floorf+0x68>
 803a292:	2a00      	cmp	r2, #0
 803a294:	da11      	bge.n	803a2ba <floorf+0x3a>
 803a296:	eddf 7a18 	vldr	s15, [pc, #96]	; 803a2f8 <floorf+0x78>
 803a29a:	ee30 0a27 	vadd.f32	s0, s0, s15
 803a29e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 803a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a2a6:	dd05      	ble.n	803a2b4 <floorf+0x34>
 803a2a8:	2b00      	cmp	r3, #0
 803a2aa:	da23      	bge.n	803a2f4 <floorf+0x74>
 803a2ac:	4a13      	ldr	r2, [pc, #76]	; (803a2fc <floorf+0x7c>)
 803a2ae:	2900      	cmp	r1, #0
 803a2b0:	bf18      	it	ne
 803a2b2:	4613      	movne	r3, r2
 803a2b4:	ee00 3a10 	vmov	s0, r3
 803a2b8:	4770      	bx	lr
 803a2ba:	4911      	ldr	r1, [pc, #68]	; (803a300 <floorf+0x80>)
 803a2bc:	4111      	asrs	r1, r2
 803a2be:	420b      	tst	r3, r1
 803a2c0:	d0fa      	beq.n	803a2b8 <floorf+0x38>
 803a2c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 803a2f8 <floorf+0x78>
 803a2c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 803a2ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 803a2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803a2d2:	ddef      	ble.n	803a2b4 <floorf+0x34>
 803a2d4:	2b00      	cmp	r3, #0
 803a2d6:	bfbe      	ittt	lt
 803a2d8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 803a2dc:	fa40 f202 	asrlt.w	r2, r0, r2
 803a2e0:	189b      	addlt	r3, r3, r2
 803a2e2:	ea23 0301 	bic.w	r3, r3, r1
 803a2e6:	e7e5      	b.n	803a2b4 <floorf+0x34>
 803a2e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 803a2ec:	d3e4      	bcc.n	803a2b8 <floorf+0x38>
 803a2ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 803a2f2:	4770      	bx	lr
 803a2f4:	2300      	movs	r3, #0
 803a2f6:	e7dd      	b.n	803a2b4 <floorf+0x34>
 803a2f8:	7149f2ca 	.word	0x7149f2ca
 803a2fc:	bf800000 	.word	0xbf800000
 803a300:	007fffff 	.word	0x007fffff

0803a304 <nanf>:
 803a304:	ed9f 0a01 	vldr	s0, [pc, #4]	; 803a30c <nanf+0x8>
 803a308:	4770      	bx	lr
 803a30a:	bf00      	nop
 803a30c:	7fc00000 	.word	0x7fc00000

0803a310 <scalbnf>:
 803a310:	ee10 3a10 	vmov	r3, s0
 803a314:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 803a318:	d024      	beq.n	803a364 <scalbnf+0x54>
 803a31a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 803a31e:	d302      	bcc.n	803a326 <scalbnf+0x16>
 803a320:	ee30 0a00 	vadd.f32	s0, s0, s0
 803a324:	4770      	bx	lr
 803a326:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 803a32a:	d121      	bne.n	803a370 <scalbnf+0x60>
 803a32c:	4b29      	ldr	r3, [pc, #164]	; (803a3d4 <scalbnf+0xc4>)
 803a32e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 803a3d8 <scalbnf+0xc8>
 803a332:	4298      	cmp	r0, r3
 803a334:	ee20 0a27 	vmul.f32	s0, s0, s15
 803a338:	db15      	blt.n	803a366 <scalbnf+0x56>
 803a33a:	ee10 3a10 	vmov	r3, s0
 803a33e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 803a342:	3a19      	subs	r2, #25
 803a344:	4402      	add	r2, r0
 803a346:	2afe      	cmp	r2, #254	; 0xfe
 803a348:	dd14      	ble.n	803a374 <scalbnf+0x64>
 803a34a:	eddf 7a24 	vldr	s15, [pc, #144]	; 803a3dc <scalbnf+0xcc>
 803a34e:	eddf 6a24 	vldr	s13, [pc, #144]	; 803a3e0 <scalbnf+0xd0>
 803a352:	ee10 3a10 	vmov	r3, s0
 803a356:	eeb0 7a67 	vmov.f32	s14, s15
 803a35a:	2b00      	cmp	r3, #0
 803a35c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 803a360:	ee27 0a27 	vmul.f32	s0, s14, s15
 803a364:	4770      	bx	lr
 803a366:	eddf 7a1f 	vldr	s15, [pc, #124]	; 803a3e4 <scalbnf+0xd4>
 803a36a:	ee20 0a27 	vmul.f32	s0, s0, s15
 803a36e:	4770      	bx	lr
 803a370:	0dd2      	lsrs	r2, r2, #23
 803a372:	e7e7      	b.n	803a344 <scalbnf+0x34>
 803a374:	2a00      	cmp	r2, #0
 803a376:	dd06      	ble.n	803a386 <scalbnf+0x76>
 803a378:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 803a37c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 803a380:	ee00 3a10 	vmov	s0, r3
 803a384:	4770      	bx	lr
 803a386:	f112 0f16 	cmn.w	r2, #22
 803a38a:	da19      	bge.n	803a3c0 <scalbnf+0xb0>
 803a38c:	f24c 3350 	movw	r3, #50000	; 0xc350
 803a390:	4298      	cmp	r0, r3
 803a392:	ee10 3a10 	vmov	r3, s0
 803a396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a39a:	dd09      	ble.n	803a3b0 <scalbnf+0xa0>
 803a39c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 803a3dc <scalbnf+0xcc>
 803a3a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 803a3e0 <scalbnf+0xd0>
 803a3a4:	eef0 7a40 	vmov.f32	s15, s0
 803a3a8:	2b00      	cmp	r3, #0
 803a3aa:	fe00 0a07 	vseleq.f32	s0, s0, s14
 803a3ae:	e7dc      	b.n	803a36a <scalbnf+0x5a>
 803a3b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 803a3e4 <scalbnf+0xd4>
 803a3b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 803a3e8 <scalbnf+0xd8>
 803a3b8:	eef0 7a40 	vmov.f32	s15, s0
 803a3bc:	2b00      	cmp	r3, #0
 803a3be:	e7f4      	b.n	803a3aa <scalbnf+0x9a>
 803a3c0:	3219      	adds	r2, #25
 803a3c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 803a3c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 803a3ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 803a3ec <scalbnf+0xdc>
 803a3ce:	ee07 3a10 	vmov	s14, r3
 803a3d2:	e7c5      	b.n	803a360 <scalbnf+0x50>
 803a3d4:	ffff3cb0 	.word	0xffff3cb0
 803a3d8:	4c000000 	.word	0x4c000000
 803a3dc:	7149f2ca 	.word	0x7149f2ca
 803a3e0:	f149f2ca 	.word	0xf149f2ca
 803a3e4:	0da24260 	.word	0x0da24260
 803a3e8:	8da24260 	.word	0x8da24260
 803a3ec:	33000000 	.word	0x33000000
 803a3f0:	6e656942 	.word	0x6e656942
 803a3f4:	696e6576 	.word	0x696e6576
 803a3f8:	61206f64 	.word	0x61206f64
 803a3fc:	6f6d206c 	.word	0x6f6d206c
 803a400:	64206f64 	.word	0x64206f64
 803a404:	67756265 	.word	0x67756265
 803a408:	20656420 	.word	0x20656420
 803a40c:	69705255 	.word	0x69705255
 803a410:	00746f6c 	.word	0x00746f6c
 803a414:	46505255 	.word	0x46505255
 803a418:	00000037 	.word	0x00000037
 803a41c:	74737953 	.word	0x74737953
 803a420:	63206d65 	.word	0x63206d65
 803a424:	6b636f6c 	.word	0x6b636f6c
 803a428:	756a6120 	.word	0x756a6120
 803a42c:	64617473 	.word	0x64617473
 803a430:	3a61206f 	.word	0x3a61206f
 803a434:	756c2520 	.word	0x756c2520
 803a438:	0a7a4820 	.word	0x0a7a4820
 803a43c:	00000000 	.word	0x00000000
 803a440:	6c6c6146 	.word	0x6c6c6146
 803a444:	6c61206f 	.word	0x6c61206f
 803a448:	696e6920 	.word	0x696e6920
 803a44c:	72616963 	.word	0x72616963
 803a450:	206c6520 	.word	0x206c6520
 803a454:	636c6163 	.word	0x636c6163
 803a458:	206f6c75 	.word	0x206f6c75
 803a45c:	6c206564 	.word	0x6c206564
 803a460:	65762061 	.word	0x65762061
 803a464:	6f697372 	.word	0x6f697372
 803a468:	5748206e 	.word	0x5748206e
 803a46c:	00000000 	.word	0x00000000
 803a470:	74736953 	.word	0x74736953
 803a474:	20616d65 	.word	0x20616d65
 803a478:	61727261 	.word	0x61727261
 803a47c:	6461636e 	.word	0x6461636e
 803a480:	0000006f 	.word	0x0000006f
 803a484:	6c6c6146 	.word	0x6c6c6146
 803a488:	6e65206f 	.word	0x6e65206f
 803a48c:	20616c20 	.word	0x20616c20
 803a490:	63696e69 	.word	0x63696e69
 803a494:	696c6169 	.word	0x696c6169
 803a498:	6963617a 	.word	0x6963617a
 803a49c:	64206e6f 	.word	0x64206e6f
 803a4a0:	41206c65 	.word	0x41206c65
 803a4a4:	25204344 	.word	0x25204344
 803a4a8:	00000a75 	.word	0x00000a75
 803a4ac:	6c6c6146 	.word	0x6c6c6146
 803a4b0:	6e65206f 	.word	0x6e65206f
 803a4b4:	20616c20 	.word	0x20616c20
 803a4b8:	63696e69 	.word	0x63696e69
 803a4bc:	696c6169 	.word	0x696c6169
 803a4c0:	6963617a 	.word	0x6963617a
 803a4c4:	64206e6f 	.word	0x64206e6f
 803a4c8:	41206c65 	.word	0x41206c65
 803a4cc:	69204344 	.word	0x69204344
 803a4d0:	7265746e 	.word	0x7265746e
 803a4d4:	00006f6e 	.word	0x00006f6e
 803a4d8:	6c6c6146 	.word	0x6c6c6146
 803a4dc:	6e65206f 	.word	0x6e65206f
 803a4e0:	20616c20 	.word	0x20616c20
 803a4e4:	69666564 	.word	0x69666564
 803a4e8:	6963696e 	.word	0x6963696e
 803a4ec:	64206e6f 	.word	0x64206e6f
 803a4f0:	69206c65 	.word	0x69206c65
 803a4f4:	00006332 	.word	0x00006332
 803a4f8:	6c6c6146 	.word	0x6c6c6146
 803a4fc:	6e65206f 	.word	0x6e65206f
 803a500:	20616c20 	.word	0x20616c20
 803a504:	63696e69 	.word	0x63696e69
 803a508:	696c6169 	.word	0x696c6169
 803a50c:	6963617a 	.word	0x6963617a
 803a510:	64206e6f 	.word	0x64206e6f
 803a514:	62206c65 	.word	0x62206c65
 803a518:	49207375 	.word	0x49207375
 803a51c:	25204332 	.word	0x25204332
 803a520:	00000a75 	.word	0x00000a75
 803a524:	65746e49 	.word	0x65746e49
 803a528:	70757272 	.word	0x70757272
 803a52c:	6e6f6963 	.word	0x6e6f6963
 803a530:	494d4e20 	.word	0x494d4e20
 803a534:	00000000 	.word	0x00000000
 803a538:	65746e49 	.word	0x65746e49
 803a53c:	70757272 	.word	0x70757272
 803a540:	6e6f6963 	.word	0x6e6f6963
 803a544:	72614820 	.word	0x72614820
 803a548:	75614664 	.word	0x75614664
 803a54c:	0000746c 	.word	0x0000746c
 803a550:	65746e49 	.word	0x65746e49
 803a554:	70757272 	.word	0x70757272
 803a558:	6e6f6963 	.word	0x6e6f6963
 803a55c:	6d654d20 	.word	0x6d654d20
 803a560:	616e614d 	.word	0x616e614d
 803a564:	00006567 	.word	0x00006567
 803a568:	65746e49 	.word	0x65746e49
 803a56c:	70757272 	.word	0x70757272
 803a570:	6e6f6963 	.word	0x6e6f6963
 803a574:	73754220 	.word	0x73754220
 803a578:	6c756146 	.word	0x6c756146
 803a57c:	00000074 	.word	0x00000074
 803a580:	65746e49 	.word	0x65746e49
 803a584:	70757272 	.word	0x70757272
 803a588:	6e6f6963 	.word	0x6e6f6963
 803a58c:	61735520 	.word	0x61735520
 803a590:	61466567 	.word	0x61466567
 803a594:	00746c75 	.word	0x00746c75
 803a598:	6c6c6146 	.word	0x6c6c6146
 803a59c:	6e65206f 	.word	0x6e65206f
 803a5a0:	20616c20 	.word	0x20616c20
 803a5a4:	63696e69 	.word	0x63696e69
 803a5a8:	696c6169 	.word	0x696c6169
 803a5ac:	6963617a 	.word	0x6963617a
 803a5b0:	64206e6f 	.word	0x64206e6f
 803a5b4:	52206c65 	.word	0x52206c65
 803a5b8:	68204354 	.word	0x68204354
 803a5bc:	77647261 	.word	0x77647261
 803a5c0:	00657261 	.word	0x00657261
 803a5c4:	6c6c6146 	.word	0x6c6c6146
 803a5c8:	6e65206f 	.word	0x6e65206f
 803a5cc:	20616c20 	.word	0x20616c20
 803a5d0:	69666564 	.word	0x69666564
 803a5d4:	6963696e 	.word	0x6963696e
 803a5d8:	64206e6f 	.word	0x64206e6f
 803a5dc:	6f206c65 	.word	0x6f206c65
 803a5e0:	65736666 	.word	0x65736666
 803a5e4:	54552074 	.word	0x54552074
 803a5e8:	65642043 	.word	0x65642043
 803a5ec:	5452206c 	.word	0x5452206c
 803a5f0:	00000043 	.word	0x00000043
 803a5f4:	75343025 	.word	0x75343025
 803a5f8:	3230252d 	.word	0x3230252d
 803a5fc:	30252d75 	.word	0x30252d75
 803a600:	25207532 	.word	0x25207532
 803a604:	3a753230 	.word	0x3a753230
 803a608:	75323025 	.word	0x75323025
 803a60c:	3230253a 	.word	0x3230253a
 803a610:	00000075 	.word	0x00000075
 803a614:	75343025 	.word	0x75343025
 803a618:	3230252d 	.word	0x3230252d
 803a61c:	30252d75 	.word	0x30252d75
 803a620:	25547532 	.word	0x25547532
 803a624:	3a753230 	.word	0x3a753230
 803a628:	75323025 	.word	0x75323025
 803a62c:	3230253a 	.word	0x3230253a
 803a630:	30252e75 	.word	0x30252e75
 803a634:	63257533 	.word	0x63257533
 803a638:	64323025 	.word	0x64323025
 803a63c:	3230253a 	.word	0x3230253a
 803a640:	00000064 	.word	0x00000064
 803a644:	6c6c6146 	.word	0x6c6c6146
 803a648:	6e65206f 	.word	0x6e65206f
 803a64c:	20616c20 	.word	0x20616c20
 803a650:	69666564 	.word	0x69666564
 803a654:	6963696e 	.word	0x6963696e
 803a658:	64206e6f 	.word	0x64206e6f
 803a65c:	53206c65 	.word	0x53206c65
 803a660:	00004950 	.word	0x00004950
 803a664:	6c6c6146 	.word	0x6c6c6146
 803a668:	6e65206f 	.word	0x6e65206f
 803a66c:	20616c20 	.word	0x20616c20
 803a670:	63696e69 	.word	0x63696e69
 803a674:	696c6169 	.word	0x696c6169
 803a678:	6963617a 	.word	0x6963617a
 803a67c:	64206e6f 	.word	0x64206e6f
 803a680:	62206c65 	.word	0x62206c65
 803a684:	53207375 	.word	0x53207375
 803a688:	25204950 	.word	0x25204950
 803a68c:	00000a75 	.word	0x00000a75
 803a690:	6c6c6146 	.word	0x6c6c6146
 803a694:	6e65206f 	.word	0x6e65206f
 803a698:	20616c20 	.word	0x20616c20
 803a69c:	69666564 	.word	0x69666564
 803a6a0:	6963696e 	.word	0x6963696e
 803a6a4:	64206e6f 	.word	0x64206e6f
 803a6a8:	74206c65 	.word	0x74206c65
 803a6ac:	72656d69 	.word	0x72656d69
 803a6b0:	00000000 	.word	0x00000000
 803a6b4:	656d6954 	.word	0x656d6954
 803a6b8:	61792072 	.word	0x61792072
 803a6bc:	61737520 	.word	0x61737520
 803a6c0:	00006f64 	.word	0x00006f64
 803a6c4:	6c6c6146 	.word	0x6c6c6146
 803a6c8:	6e65206f 	.word	0x6e65206f
 803a6cc:	20616c20 	.word	0x20616c20
 803a6d0:	63696e69 	.word	0x63696e69
 803a6d4:	696c6169 	.word	0x696c6169
 803a6d8:	6963617a 	.word	0x6963617a
 803a6dc:	64206e6f 	.word	0x64206e6f
 803a6e0:	69542065 	.word	0x69542065
 803a6e4:	7525206d 	.word	0x7525206d
 803a6e8:	0000000a 	.word	0x0000000a
 803a6ec:	6c6c6146 	.word	0x6c6c6146
 803a6f0:	6e65206f 	.word	0x6e65206f
 803a6f4:	20616c20 	.word	0x20616c20
 803a6f8:	63696e69 	.word	0x63696e69
 803a6fc:	696c6169 	.word	0x696c6169
 803a700:	6963617a 	.word	0x6963617a
 803a704:	64206e6f 	.word	0x64206e6f
 803a708:	69542065 	.word	0x69542065
 803a70c:	2072656d 	.word	0x2072656d
 803a710:	000a7525 	.word	0x000a7525
 803a714:	6c6c6146 	.word	0x6c6c6146
 803a718:	6e65206f 	.word	0x6e65206f
 803a71c:	20616c20 	.word	0x20616c20
 803a720:	69666564 	.word	0x69666564
 803a724:	6963696e 	.word	0x6963696e
 803a728:	64206e6f 	.word	0x64206e6f
 803a72c:	616c2065 	.word	0x616c2065
 803a730:	52415520 	.word	0x52415520
 803a734:	00000054 	.word	0x00000054
 803a738:	6c6c6146 	.word	0x6c6c6146
 803a73c:	6e65206f 	.word	0x6e65206f
 803a740:	20616c20 	.word	0x20616c20
 803a744:	63696e69 	.word	0x63696e69
 803a748:	696c6169 	.word	0x696c6169
 803a74c:	6963617a 	.word	0x6963617a
 803a750:	64206e6f 	.word	0x64206e6f
 803a754:	616c2065 	.word	0x616c2065
 803a758:	52415520 	.word	0x52415520
 803a75c:	75252054 	.word	0x75252054
 803a760:	0000000a 	.word	0x0000000a
 803a764:	6c6c6146 	.word	0x6c6c6146
 803a768:	6e65206f 	.word	0x6e65206f
 803a76c:	20616c20 	.word	0x20616c20
 803a770:	63696e69 	.word	0x63696e69
 803a774:	696c6169 	.word	0x696c6169
 803a778:	6963617a 	.word	0x6963617a
 803a77c:	64206e6f 	.word	0x64206e6f
 803a780:	55206c65 	.word	0x55206c65
 803a784:	00004253 	.word	0x00004253
 803a788:	69705255 	.word	0x69705255
 803a78c:	00746f6c 	.word	0x00746f6c
 803a790:	334d5453 	.word	0x334d5453
 803a794:	69562032 	.word	0x69562032
 803a798:	61757472 	.word	0x61757472
 803a79c:	6f43206c 	.word	0x6f43206c
 803a7a0:	726f506d 	.word	0x726f506d
 803a7a4:	00000074 	.word	0x00000074
 803a7a8:	20434443 	.word	0x20434443
 803a7ac:	666e6f43 	.word	0x666e6f43
 803a7b0:	00006769 	.word	0x00006769
 803a7b4:	20434443 	.word	0x20434443
 803a7b8:	65746e49 	.word	0x65746e49
 803a7bc:	63616672 	.word	0x63616672
 803a7c0:	00000065 	.word	0x00000065
	...
 803a7cc:	6f646f4d 	.word	0x6f646f4d
 803a7d0:	20656420 	.word	0x20656420
 803a7d4:	6c657576 	.word	0x6c657576
 803a7d8:	6573206f 	.word	0x6573206f
 803a7dc:	6363656c 	.word	0x6363656c
 803a7e0:	616e6f69 	.word	0x616e6f69
 803a7e4:	203a6f64 	.word	0x203a6f64
 803a7e8:	000a7525 	.word	0x000a7525
 803a7ec:	6f646f4d 	.word	0x6f646f4d
 803a7f0:	74534520 	.word	0x74534520
 803a7f4:	6520706f 	.word	0x6520706f
 803a7f8:	72657478 	.word	0x72657478
 803a7fc:	61206f6e 	.word	0x61206f6e
 803a800:	76697463 	.word	0x76697463
 803a804:	006f6461 	.word	0x006f6461
 803a808:	6f646f4d 	.word	0x6f646f4d
 803a80c:	74534520 	.word	0x74534520
 803a810:	6520706f 	.word	0x6520706f
 803a814:	72657478 	.word	0x72657478
 803a818:	64206f6e 	.word	0x64206f6e
 803a81c:	63617365 	.word	0x63617365
 803a820:	61766974 	.word	0x61766974
 803a824:	00006f64 	.word	0x00006f64
 803a828:	0000be01 	.word	0x0000be01
 803a82c:	6c6c6146 	.word	0x6c6c6146
 803a830:	6e65206f 	.word	0x6e65206f
 803a834:	20616c20 	.word	0x20616c20
 803a838:	69666564 	.word	0x69666564
 803a83c:	6963696e 	.word	0x6963696e
 803a840:	64206e6f 	.word	0x64206e6f
 803a844:	70206c65 	.word	0x70206c65
 803a848:	6f746f72 	.word	0x6f746f72
 803a84c:	6f6c6f63 	.word	0x6f6c6f63
 803a850:	20656420 	.word	0x20656420
 803a854:	5220616c 	.word	0x5220616c
 803a858:	6f696461 	.word	0x6f696461
 803a85c:	00000000 	.word	0x00000000
 803a860:	6c6c6146 	.word	0x6c6c6146
 803a864:	6e65206f 	.word	0x6e65206f
 803a868:	20616c20 	.word	0x20616c20
 803a86c:	63696e69 	.word	0x63696e69
 803a870:	696c6169 	.word	0x696c6169
 803a874:	6963617a 	.word	0x6963617a
 803a878:	64206e6f 	.word	0x64206e6f
 803a87c:	616c2065 	.word	0x616c2065
 803a880:	64615220 	.word	0x64615220
 803a884:	00006f69 	.word	0x00006f69
 803a888:	45484353 	.word	0x45484353
 803a88c:	454c5544 	.word	0x454c5544
 803a890:	00000052 	.word	0x00000052
 803a894:	47524143 	.word	0x47524143
 803a898:	00000041 	.word	0x00000041
 803a89c:	43415453 	.word	0x43415453
 803a8a0:	0000004b 	.word	0x0000004b
 803a8a4:	00000000 	.word	0x00000000
 803a8a8:	5f434441 	.word	0x5f434441
 803a8ac:	45544e49 	.word	0x45544e49
 803a8b0:	004f4e52 	.word	0x004f4e52
 803a8b4:	00434441 	.word	0x00434441
 803a8b8:	5245454c 	.word	0x5245454c
 803a8bc:	574f505f 	.word	0x574f505f
 803a8c0:	4d5f5245 	.word	0x4d5f5245
 803a8c4:	4c55444f 	.word	0x4c55444f
 803a8c8:	00000045 	.word	0x00000045
 803a8cc:	55544341 	.word	0x55544341
 803a8d0:	5a494c41 	.word	0x5a494c41
 803a8d4:	505f5241 	.word	0x505f5241
 803a8d8:	5245574f 	.word	0x5245574f
 803a8dc:	444f4d5f 	.word	0x444f4d5f
 803a8e0:	00454c55 	.word	0x00454c55
 803a8e4:	55544341 	.word	0x55544341
 803a8e8:	5a494c41 	.word	0x5a494c41
 803a8ec:	42205241 	.word	0x42205241
 803a8f0:	004f5241 	.word	0x004f5241
 803a8f4:	534e4553 	.word	0x534e4553
 803a8f8:	5345524f 	.word	0x5345524f
 803a8fc:	00000000 	.word	0x00000000
 803a900:	5245454c 	.word	0x5245454c
 803a904:	52414220 	.word	0x52414220
 803a908:	0000004f 	.word	0x0000004f
 803a90c:	55544341 	.word	0x55544341
 803a910:	5a494c41 	.word	0x5a494c41
 803a914:	4d205241 	.word	0x4d205241
 803a918:	00004741 	.word	0x00004741
 803a91c:	5245454c 	.word	0x5245454c
 803a920:	47414d20 	.word	0x47414d20
 803a924:	00000000 	.word	0x00000000
 803a928:	55544341 	.word	0x55544341
 803a92c:	5a494c41 	.word	0x5a494c41
 803a930:	43205241 	.word	0x43205241
 803a934:	42494c41 	.word	0x42494c41
 803a938:	4f444152 	.word	0x4f444152
 803a93c:	414d2052 	.word	0x414d2052
 803a940:	54454e47 	.word	0x54454e47
 803a944:	54454d4f 	.word	0x54454d4f
 803a948:	00004f52 	.word	0x00004f52
 803a94c:	494c4143 	.word	0x494c4143
 803a950:	44415242 	.word	0x44415242
 803a954:	4d20524f 	.word	0x4d20524f
 803a958:	454e4741 	.word	0x454e4741
 803a95c:	454d4f54 	.word	0x454d4f54
 803a960:	004f5254 	.word	0x004f5254
 803a964:	55544341 	.word	0x55544341
 803a968:	5a494c41 	.word	0x5a494c41
 803a96c:	49205241 	.word	0x49205241
 803a970:	0000554d 	.word	0x0000554d
 803a974:	5245454c 	.word	0x5245454c
 803a978:	554d4920 	.word	0x554d4920
 803a97c:	00000000 	.word	0x00000000
 803a980:	55544341 	.word	0x55544341
 803a984:	5a494c41 	.word	0x5a494c41
 803a988:	43205241 	.word	0x43205241
 803a98c:	42494c41 	.word	0x42494c41
 803a990:	4f444152 	.word	0x4f444152
 803a994:	43412052 	.word	0x43412052
 803a998:	52454c45 	.word	0x52454c45
 803a99c:	54454d4f 	.word	0x54454d4f
 803a9a0:	00004f52 	.word	0x00004f52
 803a9a4:	494c4143 	.word	0x494c4143
 803a9a8:	44415242 	.word	0x44415242
 803a9ac:	4120524f 	.word	0x4120524f
 803a9b0:	454c4543 	.word	0x454c4543
 803a9b4:	454d4f52 	.word	0x454d4f52
 803a9b8:	004f5254 	.word	0x004f5254
 803a9bc:	55544341 	.word	0x55544341
 803a9c0:	5a494c41 	.word	0x5a494c41
 803a9c4:	43205241 	.word	0x43205241
 803a9c8:	42494c41 	.word	0x42494c41
 803a9cc:	4f444152 	.word	0x4f444152
 803a9d0:	49472052 	.word	0x49472052
 803a9d4:	43534f52 	.word	0x43534f52
 803a9d8:	4f49504f 	.word	0x4f49504f
 803a9dc:	00000000 	.word	0x00000000
 803a9e0:	494c4143 	.word	0x494c4143
 803a9e4:	44415242 	.word	0x44415242
 803a9e8:	4720524f 	.word	0x4720524f
 803a9ec:	534f5249 	.word	0x534f5249
 803a9f0:	49504f43 	.word	0x49504f43
 803a9f4:	0000004f 	.word	0x0000004f
 803a9f8:	5245454c 	.word	0x5245454c
 803a9fc:	53504720 	.word	0x53504720
 803aa00:	00000000 	.word	0x00000000
 803aa04:	5245454c 	.word	0x5245454c
 803aa08:	44415220 	.word	0x44415220
 803aa0c:	00004f49 	.word	0x00004f49
 803aa10:	49444152 	.word	0x49444152
 803aa14:	0000004f 	.word	0x0000004f
 803aa18:	55544341 	.word	0x55544341
 803aa1c:	5a494c41 	.word	0x5a494c41
 803aa20:	52205241 	.word	0x52205241
 803aa24:	00000043 	.word	0x00000043
 803aa28:	00004352 	.word	0x00004352
 803aa2c:	55544341 	.word	0x55544341
 803aa30:	5a494c41 	.word	0x5a494c41
 803aa34:	56205241 	.word	0x56205241
 803aa38:	41204c45 	.word	0x41204c45
 803aa3c:	4c55474e 	.word	0x4c55474e
 803aa40:	46205241 	.word	0x46205241
 803aa44:	00000043 	.word	0x00000043
 803aa48:	00004346 	.word	0x00004346
 803aa4c:	55544341 	.word	0x55544341
 803aa50:	5a494c41 	.word	0x5a494c41
 803aa54:	41205241 	.word	0x41205241
 803aa58:	54495443 	.word	0x54495443
 803aa5c:	46204455 	.word	0x46204455
 803aa60:	00000043 	.word	0x00000043
 803aa64:	55544341 	.word	0x55544341
 803aa68:	5a494c41 	.word	0x5a494c41
 803aa6c:	50205241 	.word	0x50205241
 803aa70:	4349534f 	.word	0x4349534f
 803aa74:	204e4f49 	.word	0x204e4f49
 803aa78:	00004346 	.word	0x00004346
 803aa7c:	55544341 	.word	0x55544341
 803aa80:	5a494c41 	.word	0x5a494c41
 803aa84:	54205241 	.word	0x54205241
 803aa88:	4d454c45 	.word	0x4d454c45
 803aa8c:	49525445 	.word	0x49525445
 803aa90:	00000041 	.word	0x00000041
 803aa94:	454c4554 	.word	0x454c4554
 803aa98:	5254454d 	.word	0x5254454d
 803aa9c:	00004149 	.word	0x00004149
 803aaa0:	6c6c6146 	.word	0x6c6c6146
 803aaa4:	6e65206f 	.word	0x6e65206f
 803aaa8:	20616c20 	.word	0x20616c20
 803aaac:	69666564 	.word	0x69666564
 803aab0:	6963696e 	.word	0x6963696e
 803aab4:	64206e6f 	.word	0x64206e6f
 803aab8:	62206c65 	.word	0x62206c65
 803aabc:	64207375 	.word	0x64207375
 803aac0:	42206c65 	.word	0x42206c65
 803aac4:	6d6f7261 	.word	0x6d6f7261
 803aac8:	6f727465 	.word	0x6f727465
 803aacc:	0a752520 	.word	0x0a752520
 803aad0:	00000000 	.word	0x00000000
 803aad4:	6c6c6146 	.word	0x6c6c6146
 803aad8:	6e65206f 	.word	0x6e65206f
 803aadc:	20616c20 	.word	0x20616c20
 803aae0:	69666564 	.word	0x69666564
 803aae4:	6963696e 	.word	0x6963696e
 803aae8:	64206e6f 	.word	0x64206e6f
 803aaec:	42206c65 	.word	0x42206c65
 803aaf0:	6d6f7261 	.word	0x6d6f7261
 803aaf4:	6f727465 	.word	0x6f727465
 803aaf8:	0a752520 	.word	0x0a752520
 803aafc:	00000000 	.word	0x00000000
 803ab00:	6c6c6146 	.word	0x6c6c6146
 803ab04:	6e65206f 	.word	0x6e65206f
 803ab08:	20616c20 	.word	0x20616c20
 803ab0c:	696c6163 	.word	0x696c6163
 803ab10:	63617262 	.word	0x63617262
 803ab14:	206e6f69 	.word	0x206e6f69
 803ab18:	206c6564 	.word	0x206c6564
 803ab1c:	6f726142 	.word	0x6f726142
 803ab20:	7274656d 	.word	0x7274656d
 803ab24:	7525206f 	.word	0x7525206f
 803ab28:	0000000a 	.word	0x0000000a
 803ab2c:	6c6c6146 	.word	0x6c6c6146
 803ab30:	6e65206f 	.word	0x6e65206f
 803ab34:	20616c20 	.word	0x20616c20
 803ab38:	63696e69 	.word	0x63696e69
 803ab3c:	696c6169 	.word	0x696c6169
 803ab40:	6963617a 	.word	0x6963617a
 803ab44:	64206e6f 	.word	0x64206e6f
 803ab48:	42206c65 	.word	0x42206c65
 803ab4c:	6d6f7261 	.word	0x6d6f7261
 803ab50:	6f727465 	.word	0x6f727465
 803ab54:	0a752520 	.word	0x0a752520
 803ab58:	00000000 	.word	0x00000000
 803ab5c:	20535047 	.word	0x20535047
 803ab60:	65746564 	.word	0x65746564
 803ab64:	64617463 	.word	0x64617463
 803ab68:	c26e206f 	.word	0xc26e206f
 803ab6c:	25203aba 	.word	0x25203aba
 803ab70:	00000a75 	.word	0x00000a75
 803ab74:	6c6c6146 	.word	0x6c6c6146
 803ab78:	6e65206f 	.word	0x6e65206f
 803ab7c:	20616c20 	.word	0x20616c20
 803ab80:	69666564 	.word	0x69666564
 803ab84:	6963696e 	.word	0x6963696e
 803ab88:	64206e6f 	.word	0x64206e6f
 803ab8c:	62206c65 	.word	0x62206c65
 803ab90:	64207375 	.word	0x64207375
 803ab94:	616c2065 	.word	0x616c2065
 803ab98:	554d4920 	.word	0x554d4920
 803ab9c:	0a752520 	.word	0x0a752520
 803aba0:	00000000 	.word	0x00000000
 803aba4:	6c6c6146 	.word	0x6c6c6146
 803aba8:	6e65206f 	.word	0x6e65206f
 803abac:	20616c20 	.word	0x20616c20
 803abb0:	69666564 	.word	0x69666564
 803abb4:	6963696e 	.word	0x6963696e
 803abb8:	64206e6f 	.word	0x64206e6f
 803abbc:	616c2065 	.word	0x616c2065
 803abc0:	554d4920 	.word	0x554d4920
 803abc4:	0a752520 	.word	0x0a752520
 803abc8:	00000000 	.word	0x00000000
 803abcc:	6c6c6146 	.word	0x6c6c6146
 803abd0:	6e65206f 	.word	0x6e65206f
 803abd4:	20616c20 	.word	0x20616c20
 803abd8:	63696e69 	.word	0x63696e69
 803abdc:	696c6169 	.word	0x696c6169
 803abe0:	6963617a 	.word	0x6963617a
 803abe4:	64206e6f 	.word	0x64206e6f
 803abe8:	616c2065 	.word	0x616c2065
 803abec:	554d4920 	.word	0x554d4920
 803abf0:	0a752520 	.word	0x0a752520
 803abf4:	00000000 	.word	0x00000000
 803abf8:	449e0ccd 	.word	0x449e0ccd
 803abfc:	44932666 	.word	0x44932666
 803ac00:	449e0ccd 	.word	0x449e0ccd
 803ac04:	6c6c6146 	.word	0x6c6c6146
 803ac08:	6e65206f 	.word	0x6e65206f
 803ac0c:	20616c20 	.word	0x20616c20
 803ac10:	69666564 	.word	0x69666564
 803ac14:	6963696e 	.word	0x6963696e
 803ac18:	64206e6f 	.word	0x64206e6f
 803ac1c:	62206c65 	.word	0x62206c65
 803ac20:	64207375 	.word	0x64207375
 803ac24:	4d206c65 	.word	0x4d206c65
 803ac28:	656e6761 	.word	0x656e6761
 803ac2c:	656d6f74 	.word	0x656d6f74
 803ac30:	206f7274 	.word	0x206f7274
 803ac34:	000a7525 	.word	0x000a7525
 803ac38:	6c6c6146 	.word	0x6c6c6146
 803ac3c:	6e65206f 	.word	0x6e65206f
 803ac40:	20616c20 	.word	0x20616c20
 803ac44:	69666564 	.word	0x69666564
 803ac48:	6963696e 	.word	0x6963696e
 803ac4c:	64206e6f 	.word	0x64206e6f
 803ac50:	4d206c65 	.word	0x4d206c65
 803ac54:	656e6761 	.word	0x656e6761
 803ac58:	656d6f74 	.word	0x656d6f74
 803ac5c:	206f7274 	.word	0x206f7274
 803ac60:	000a7525 	.word	0x000a7525
 803ac64:	6c6c6146 	.word	0x6c6c6146
 803ac68:	6e65206f 	.word	0x6e65206f
 803ac6c:	20616c20 	.word	0x20616c20
 803ac70:	696c6163 	.word	0x696c6163
 803ac74:	63617262 	.word	0x63617262
 803ac78:	206e6f69 	.word	0x206e6f69
 803ac7c:	206c6564 	.word	0x206c6564
 803ac80:	6e67614d 	.word	0x6e67614d
 803ac84:	6d6f7465 	.word	0x6d6f7465
 803ac88:	6f727465 	.word	0x6f727465
 803ac8c:	0a752520 	.word	0x0a752520
 803ac90:	00000000 	.word	0x00000000
 803ac94:	6c6c6146 	.word	0x6c6c6146
 803ac98:	6e65206f 	.word	0x6e65206f
 803ac9c:	20616c20 	.word	0x20616c20
 803aca0:	63696e69 	.word	0x63696e69
 803aca4:	696c6169 	.word	0x696c6169
 803aca8:	6963617a 	.word	0x6963617a
 803acac:	64206e6f 	.word	0x64206e6f
 803acb0:	4d206c65 	.word	0x4d206c65
 803acb4:	656e6761 	.word	0x656e6761
 803acb8:	656d6f74 	.word	0x656d6f74
 803acbc:	206f7274 	.word	0x206f7274
 803acc0:	000a7525 	.word	0x000a7525
 803acc4:	6c6c6146 	.word	0x6c6c6146
 803acc8:	6e65206f 	.word	0x6e65206f
 803accc:	20616c20 	.word	0x20616c20
 803acd0:	69666564 	.word	0x69666564
 803acd4:	6963696e 	.word	0x6963696e
 803acd8:	64206e6f 	.word	0x64206e6f
 803acdc:	50206c65 	.word	0x50206c65
 803ace0:	7265776f 	.word	0x7265776f
 803ace4:	646f4d20 	.word	0x646f4d20
 803ace8:	20656c75 	.word	0x20656c75
 803acec:	000a7525 	.word	0x000a7525
 803acf0:	6c6c6146 	.word	0x6c6c6146
 803acf4:	6e65206f 	.word	0x6e65206f
 803acf8:	20616c20 	.word	0x20616c20
 803acfc:	63696e69 	.word	0x63696e69
 803ad00:	696c6169 	.word	0x696c6169
 803ad04:	6963617a 	.word	0x6963617a
 803ad08:	64206e6f 	.word	0x64206e6f
 803ad0c:	50206c65 	.word	0x50206c65
 803ad10:	7265776f 	.word	0x7265776f
 803ad14:	646f4d20 	.word	0x646f4d20
 803ad18:	20656c75 	.word	0x20656c75
 803ad1c:	000a7525 	.word	0x000a7525
 803ad20:	46505255 	.word	0x46505255
 803ad24:	00000037 	.word	0x00000037
 803ad28:	20766f4e 	.word	0x20766f4e
 803ad2c:	32203232 	.word	0x32203232
 803ad30:	00333230 	.word	0x00333230
 803ad34:	353a3931 	.word	0x353a3931
 803ad38:	35323a30 	.word	0x35323a30
 803ad3c:	00000000 	.word	0x00000000
 803ad40:	6c6c6146 	.word	0x6c6c6146
 803ad44:	6c61206f 	.word	0x6c61206f
 803ad48:	6c616320 	.word	0x6c616320
 803ad4c:	616c7563 	.word	0x616c7563
 803ad50:	616c2072 	.word	0x616c2072
 803ad54:	72657620 	.word	0x72657620
 803ad58:	6e6f6973 	.word	0x6e6f6973
 803ad5c:	00574820 	.word	0x00574820

0803ad60 <hardwareADC>:
 803ad60:	00000000 40012000 01110010 03130212     ..... .@........
 803ad70:	05150414 07170616 09210820 0b310a30     ........ .!.0.1.
 803ad80:	0d330c32 0f350e34 40026410 00000000     2.3.4.5..d.@....
 803ad90:	40026470 00000000 00000001 40012100     pd.@.........!.@
 803ada0:	01110010 03130212 05150414 07170616     ................
 803adb0:	09210820 0b310a30 0d330c32 0f350e34      .!.0.1.2.3.4.5.
 803adc0:	40026440 02000000 40026458 02000000     @d.@....Xd.@....
 803add0:	00000002 40012200 01110010 03130212     .....".@........
 803ade0:	05670466 07690668 0963086a 0b310a30     f.g.h.i.j.c.0.1.
 803adf0:	0d330c32 0f650e64 40026410 04000000     2.3.d.e..d.@....
 803ae00:	40026428 04000000                       (d.@....

0803ae08 <puertosHWadc>:
 803ae08:	33302021 00003534 00000000 00000000     ! 0345..........

0803ae18 <hardwareI2C>:
 803ae18:	00000000 40005400 04280426 04270000     .....T.@&.(...'.
 803ae28:	00000429 00000001 40005800 0461042a     )........X.@*.a.
 803ae38:	042b0000 00000460 00000002 40005c00     ..+.`........\.@
 803ae48:	00000418 04390000 00000000 00000003     ......9.........
 803ae58:	40006000 01280b26 0b27046e 044d0129     .`.@&.(.n.'.).M.

0803ae68 <dias>:
 803ae68:	001f0000 005b003c 00980079 00d500b6     ....<.[.y.......
 803ae78:	011200f4 014f0131 018d016e 01c801a9     ....1.O.n.......
 803ae88:	020501e6 02420223 027f0261 02bc029e     ....#.B.a.......
 803ae98:	02fa02db 03350316 03720353 03af0390     ......5.S.r.....
 803aea8:	03ec03ce 0429040b 04670448 04a20483     ......).H.g.....
 803aeb8:	04df04c0 051c04fd 0559053b 05960578     ........;.Y.x...

0803aec8 <hardwareSPI>:
 803aec8:	00000000 40013000 05230515 0000057b     .....0.@..#.{...
 803aed8:	05160000 05790524 00000000 05250517     ....$.y.......%.
 803aee8:	00000547 00000000 00000001 40003800     G............8.@
 803aef8:	051c0519 052d052a 052e0543 00000532     ....*.-.C...2...
 803af08:	00000000 0531052f 00000533 00000000     ..../.1.3.......
 803af18:	00000002 40003c00 063a0623 00000000     .....<.@#.:.....
 803af28:	06240000 0000063b 00000000 06250722     ..$.;.......".%.
 803af38:	0546063c 00000000 00000003 40013400     <.F..........4.@
 803af48:	055c0552 00000000 05550000 0000055d     R.\.......U.]...
 803af58:	00000000 055e0556 00000000 00000000     ....V.^.........
 803af68:	00000004 40015000 00000567 00000000     .....P.@g.......
 803af78:	05680000 00000000 00000000 056b0569     ..h.........i.k.
	...
 803af90:	00000005 40015400 08230815 0000057d     .....T.@..#.}...
 803afa0:	08160000 057c0824 00000000 08250817     ....$.|.......%.
 803afb0:	0000057e 00000000                       ~.......

0803afb8 <hardwareTimer>:
 803afb8:	00000000 40010000 00010018 00010059     .......@....Y...
 803afc8:	00010117 0001012d 00010158 04010019     ....-...X.......
 803afd8:	0401005b 04010120 0401012e 0401015a     [... .......Z...
 803afe8:	0801001a 0801005d 08010121 0801012f     ....]...!.../...
 803aff8:	0801015c 0c01001b 0c01005e 0000501b     \.......^....P..
 803b008:	00000001 40000000 00010010 00010015     .......@........
 803b018:	04010011 04010023 08010012 0801002a     ....#.......*...
 803b028:	0c010013 0c01002b 00000000 00000000     ....+...........
	...
 803b054:	0000501c 00000002 40000400 00020016     .P.........@....
 803b064:	00020024 00020036 04020017 04020025     $...6.......%...
 803b074:	04020037 08020020 08020038 0c020021     7... ...8...!...
 803b084:	0c020039 00000000 00000000 00000000     9...............
	...
 803b0a4:	0000501d 00000003 40000800 00020026     .P.........@&...
 803b0b4:	0002004c 04020027 0402004d 08020028     L...'...M...(...
 803b0c4:	0802004e 0c020029 0c02004f 00000000     N...)...O.......
	...
 803b0f4:	0000501e 00000004 40000c00 00020010     .P.........@....
 803b104:	04020011 08020012 0c020013 00000000     ................
	...
 803b144:	00005032 00000005 40001000 00000000     2P.........@....
	...
 803b194:	00008036 00000006 40001400 00000000     6..........@....
	...
 803b1e4:	00008037 00000007 40010400 00030036     7..........@6...
 803b1f4:	00030115 00030117 04030037 04030120     ........7... ...
 803b204:	0403012e 08030038 08030121 0803012f     ....8...!.../...
 803b214:	0c030039 00000000 00000000 00000000     9...............
	...
 803b234:	0000502e 00000008 40014000 00030012     .P.......@.@....
 803b244:	00030055 04030013 04030056 00000000     U.......V.......
	...
 803b284:	00005018 00000009 40014400 00030028     .P.......D.@(...
 803b294:	00030066 00000000 00000000 00000000     f...............
	...
 803b2d4:	00005019 0000000a 40014800 00030029     .P.......H.@)...
 803b2e4:	00030067 00000000 00000000 00000000     g...............
	...
 803b324:	0000501a 0000000b 40001800 0009002e     .P.........@....
 803b334:	0409002f 00000000 00000000 00000000     /...............
	...
 803b374:	0000502b 0000000c 40001c00 00090016     +P.........@....
 803b384:	00090068 00000000 00000000 00000000     h...............
	...
 803b3c4:	0000502c 0000000d 40002000 00090017     ,P....... .@....
 803b3d4:	00090069 00000000 00000000 00000000     i...............
	...
 803b414:	0000502d                                -P..

0803b418 <hardwareDMAcanalTimer>:
 803b418:	40010000 00000000 400264a0 00000000     ...@.....d.@....
 803b428:	0000000f 40010000 00000004 40026440     .......@....@d.@
 803b438:	0c000000 0000000b 40010000 00000008     ...........@....
 803b448:	400264a0 0c000000 0000000f 40010000     .d.@...........@
 803b458:	0000000c 40026470 0c000000 0000000d     ....pd.@........
 803b468:	40000000 00000000 40026088 06000000     ...@.....`.@....
 803b478:	00000006 40000000 00000004 400260a0     .......@.....`.@
 803b488:	06000000 00000007 40000000 00000008     ...........@....
 803b498:	40026028 06000000 00000002 40000000     (`.@...........@
 803b4a8:	0000000c 400260a0 06000000 00000007     .....`.@........
 803b4b8:	40000400 00000000 40026070 0a000000     ...@....p`.@....
 803b4c8:	00000005 40000400 00000004 40026088     .......@.....`.@
 803b4d8:	0a000000 00000006 40000400 00000008     ...........@....
 803b4e8:	400260b8 0a000000 00000008 40000400     .`.@...........@
 803b4f8:	0000000c 40026040 0a000000 00000003     ....@`.@........
 803b508:	40000800 00000000 40026010 04000000     ...@.....`.@....
 803b518:	00000001 40000800 00000004 40026058     .......@....X`.@
 803b528:	04000000 00000004 40000800 00000008     ...........@....
 803b538:	400260b8 04000000 00000008 40000c00     .`.@...........@
 803b548:	00000000 40026040 0c000000 00000003     ....@`.@........
 803b558:	40000c00 00000004 40026070 0c000000     ...@....p`.@....
 803b568:	00000005 40000c00 00000008 40026010     .......@.....`.@
 803b578:	0c000000 00000001 40000c00 0000000c     ...........@....
 803b588:	40026028 0c000000 0000000a 40010400     (`.@...........@
 803b598:	00000000 40026440 0e000000 0000000b     ....@d.@........
 803b5a8:	40010400 00000004 40026458 0e000000     ...@....Xd.@....
 803b5b8:	0000000c 40010400 00000008 40026470     .......@....pd.@
 803b5c8:	0e000000 0000000d 40010400 0000000c     ...........@....
 803b5d8:	400264b8 0e000000 00000010              .d.@........

0803b5e4 <hardwareDMAtimerUP>:
 803b5e4:	40010000 40026488 0c000000 0000000e     ...@.d.@........
 803b5f4:	40000000 400260b8 06000000 00000008     ...@.`.@........
 803b604:	40000400 40026040 0a000000 00000003     ...@@`.@........
 803b614:	40000800 400260a0 04000000 00000007     ...@.`.@........
 803b624:	40000c00 400260a0 0c000000 00000007     ...@.`.@........
 803b634:	40001000 40026028 0e000000 00000002     ...@(`.@........
 803b644:	40001400 40026040 02000000 00000003     ...@@`.@........
 803b654:	40010400 40026428 0e000000 0000000a     ...@(d.@........

0803b664 <hardwareUART>:
 803b664:	00000000 40011000 00000000 00000000     .......@........
 803b674:	00000000 0727071a 0000042f 07260719     ......'./.....&.
 803b684:	0000042e 400264b8 08000000 00000000     .....d.@........
 803b694:	00000000 40026440 08000000 40026488     ....@d.@.....d.@
 803b6a4:	08000000 00006025 00000001 40004400     ....%`.......D.@
	...
 803b6c0:	07460713 00000000 07450712 00000000     ..F.......E.....
 803b6d0:	400260a0 08000000 00000000 00000000     .`.@............
 803b6e0:	40026088 08000000 00000000 00000000     .`.@............
 803b6f0:	00006026 00000002 40004800 00000000     &`.......H.@....
	...
 803b708:	073b072b 00000749 073a072a 00000748     +.;.I...*.:.H...
 803b718:	40026058 08000000 40026070 0e000000     X`.@....p`.@....
 803b728:	40026028 08000000 00000000 00000000     (`.@............
 803b738:	00006027 00000003 40004c00 00000000     '`.......L.@....
	...
 803b750:	083b0811 0840061b 083a0810 0841061c     ..;...@...:...A.
 803b760:	40026070 08000000 00000000 00000000     p`.@............
 803b770:	40026040 08000000 00000000 00000000     @`.@............
 803b780:	00006034 00000004 40005000 00000000     4`.......P.@....
	...
 803b798:	01250842 082c0728 0126083c 082d0729     B.%.(.,.<.&.).-.
 803b7a8:	400260b8 08000000 00000000 00000000     .`.@............
 803b7b8:	40026010 08000000 00000000 00000000     .`.@............
 803b7c8:	00006035 00000005 40011400 00000000     5`.........@....
	...
 803b7e0:	08790837 00000000 087e0836 00000000     7.y.....6.~.....
 803b7f0:	400264a0 0a000000 400264b8 0a000000     .d.@.....d.@....
 803b800:	40026428 0a000000 40026440 0a000000     (d.@....@d.@....
 803b810:	00006047 00000006 40007800 00000000     G`.......x.@....
	...
 803b828:	08660857 0c230c18 08670858 0c240c1f     W.f...#.X.g...$.
 803b838:	40026028 0a000000 00000000 00000000     (`.@............
 803b848:	40026058 0a000000 00000000 00000000     X`.@............
 803b858:	00006052 00000007 40007c00 00000000     R`.......|.@....
	...
 803b870:	00000850 00000000 00000851 00000000     P.......Q.......
 803b880:	40026010 0a000000 00000000 00000000     .`.@............
 803b890:	400260a0 0a000000 00000000 00000000     .`.@............
 803b8a0:	00006053                                S`..

0803b8a4 <hardwareUSB>:
 803b8a4:	50000000 0a1b0a1c 00008043              ...P....C...

0803b8b0 <mixerQuadX>:
 803b8b0:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803b8c0:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....
 803b8d0:	3f800000 3f800000 bf800000 3f800000     ...?...?.......?
 803b8e0:	3f800000 bf800000 bf800000 bf800000     ...?............

0803b8f0 <mixerQuadP>:
 803b8f0:	3f800000 00000000 3f800000 3f800000     ...?.......?...?
 803b900:	3f800000 bf800000 00000000 bf800000     ...?............
 803b910:	3f800000 00000000 bf800000 3f800000     ...?...........?
 803b920:	3f800000 3f800000 00000000 bf800000     ...?...?........

0803b930 <mixerHexaX>:
 803b930:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803b940:	3f800000 bf800000 00000000 bf800000     ...?............
 803b950:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803b960:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803b970:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803b980:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803b990 <mixerHexaH>:
 803b990:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803b9a0:	3f800000 bf800000 00000000 bf800000     ...?............
 803b9b0:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803b9c0:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803b9d0:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803b9e0:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803b9f0 <mixerOctoX>:
 803b9f0:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803ba00:	3f800000 bf800000 3f800000 bf800000     ...?.......?....
 803ba10:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803ba20:	3f800000 bf800000 bf800000 bf800000     ...?............
 803ba30:	3f800000 3f800000 bf800000 3f800000     ...?...?.......?
 803ba40:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803ba50:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
 803ba60:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803ba70 <mixerOctoH>:
 803ba70:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803ba80:	3f800000 bf800000 3f800000 bf800000     ...?.......?....
 803ba90:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803baa0:	3f800000 bf800000 bf800000 bf800000     ...?............
 803bab0:	3f800000 3f800000 bf800000 3f800000     ...?...?.......?
 803bac0:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803bad0:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
 803bae0:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803baf0 <mixerQuad2X>:
 803baf0:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bb00:	3f800000 bf800000 bf800000 bf800000     ...?............
 803bb10:	3f800000 3f800000 bf800000 3f800000     ...?...?.......?
 803bb20:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....
 803bb30:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bb40:	3f800000 bf800000 bf800000 bf800000     ...?............
 803bb50:	3f800000 3f800000 bf800000 3f800000     ...?...?.......?
 803bb60:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803bb70 <mixerQuad2P>:
 803bb70:	3f800000 00000000 3f800000 3f800000     ...?.......?...?
 803bb80:	3f800000 bf800000 00000000 bf800000     ...?............
 803bb90:	3f800000 00000000 bf800000 3f800000     ...?...........?
 803bba0:	3f800000 3f800000 00000000 bf800000     ...?...?........
 803bbb0:	3f800000 00000000 3f800000 3f800000     ...?.......?...?
 803bbc0:	3f800000 bf800000 00000000 bf800000     ...?............
 803bbd0:	3f800000 00000000 bf800000 3f800000     ...?...........?
 803bbe0:	3f800000 3f800000 00000000 bf800000     ...?...?........

0803bbf0 <mixerHexa2X>:
 803bbf0:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bc00:	3f800000 bf800000 00000000 bf800000     ...?............
 803bc10:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803bc20:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803bc30:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803bc40:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....
 803bc50:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bc60:	3f800000 bf800000 00000000 bf800000     ...?............
 803bc70:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803bc80:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803bc90:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803bca0:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803bcb0 <mixerHexa2H>:
 803bcb0:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bcc0:	3f800000 bf800000 00000000 bf800000     ...?............
 803bcd0:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803bce0:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803bcf0:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803bd00:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....
 803bd10:	3f800000 bf800000 3f800000 3f800000     ...?.......?...?
 803bd20:	3f800000 bf800000 00000000 bf800000     ...?............
 803bd30:	3f800000 bf800000 bf800000 3f800000     ...?...........?
 803bd40:	3f800000 3f800000 bf800000 bf800000     ...?...?........
 803bd50:	3f800000 3f800000 00000000 3f800000     ...?...?.......?
 803bd60:	3f800000 3f800000 3f800000 bf800000     ...?...?...?....

0803bd70 <tablaMixer>:
 803bd70:	00000004 0803b8b0 00000004 0803b8f0     ................
 803bd80:	00000006 0803b930 00000006 0803b990     ....0...........
 803bd90:	00000008 0803b9f0 00000008 0803ba70     ............p...
 803bda0:	00000008 0803baf0 00000008 0803bb70     ............p...
 803bdb0:	0000000c 0803bbf0 0000000c 0803bcb0     ................

0803bdc0 <configADCdefecto>:
 803bdc0:	33302021 00003534 00000000 00000000     ! 0345..........
 803bdd0:	40026410 00000000 00000000 00000000     .d.@............
 803bde0:	00000000 40026440 00000000 00000000     ....@d.@........
	...
 803bdf8:	40026428                                (d.@

0803bdfc <configBaroDefecto>:
 803bdfc:	00010000 0000004a 00320064 01010000     ....J...d.2.....
 803be0c:	00000044 00320064 03010000 0000003d     D...d.2.....=...
 803be1c:	00320064 ffff00ff 00000000 00320064     d.2.........d.2.
 803be2c:	ffff00ff 00000000 00320064              ........d.2.

0803be38 <configGPSdefecto>:
 803be38:	01010000 00009c07 003200c8 01040000     ..........2.....
 803be48:	00009c07 003200c8 01020000 00009c07     ......2.........
 803be58:	003200c8                                ..2.

0803be5c <configI2Cdefecto>:
 803be5c:	00002726 00002b2a 00000000 00002928     &'..*+......()..

0803be6c <configIMUdefecto>:
 803be6c:	00010003 0047004b 42480000 42480000     ....K.G...HB..HB
 803be7c:	00000000 01f403e8 01010003 005f005c     ............\._.
 803be8c:	42480000 42480000 00000000 01f403e8     ..HB..HB........
 803be9c:	01010002 00540014 42480000 42480000     ......T...HB..HB
 803beac:	00000000 01f403e8 01010000 00530011     ..............S.
 803bebc:	42480000 42480000 00000000 01f403e8     ..HB..HB........
 803becc:	00ff00ff 00000000 42480000 42480000     ..........HB..HB
 803bedc:	00000000 01f403e8                       ........

0803bee4 <configMagDefecto>:
 803bee4:	00000102 00000e00 00000000 00320064     ............d.2.
 803bef4:	01000102 00000e00 00000000 00320064     ............d.2.
 803bf04:	03000000 00001e00 00010000 00320064     ............d.2.
 803bf14:	00000000 00001e00 00010000 00320064     ............d.2.
 803bf24:	01000000 00001e00 00010000 00320064     ............d.2.

0803bf34 <configPowerModuleDefecto>:
 803bf34:	ff141500 000a0000 15000032 0000ff14     ........2.......
 803bf44:	0032000a                                ..2.

0803bf48 <configSPIdefecto>:
 803bf48:	00171615 00313243 00000000 00565552     ....C21.....RUV.
	...

0803bf60 <configUARTdefecto>:
 803bf60:	00012f2e 00000000 00000000 00014645     ./..........EF..
	...
 803bf78:	00014948 00000000 00000000 00010000     HI..............
	...
 803bf90:	00012c2d 00000000 00000000 00010000     -,..............
	...
 803bfa8:	00015758 00000000 00000000 00015051     XW..........QP..
	...

0803bfc0 <decodificadorSBUS>:
 803bfc0:	00ff0000 08070001 00000000 001f0301     ................
 803bfd0:	053f0002 00000000 00030602 02ff0003     ..?.............
 803bfe0:	0a010004 007f0104 070f0005 00000000     ................
 803bff0:	000f0405 047f0006 00000000 00010706     ................
 803c000:	01ff0007 09030008 003f0208 061f0009     ..........?.....
 803c010:	00000000 00070509 03ff000a 00000000     ................
 803c020:	00ff000b 0807000c 00000000 001f030c     ................
 803c030:	053f000d 00000000 0003060d 02ff000e     ..?.............
 803c040:	0a01000f 007f010f 070f0010 00000000     ................
 803c050:	000f0410 047f0011 00000000 00010711     ................
 803c060:	01ff0012 09030013 003f0213 061f0014     ..........?.....
 803c070:	00000000 00070514 03ff0015 00000000     ................

0803c080 <gpsBaudrates>:
 803c080:	0000e100 00002580 0001c200              .....%......

0803c08c <gpsBloqueConfig>:
 803c08c:	010662b5 06010003 244f1201 58425550     .b........O$PUBX
 803c09c:	2c31342c 30302c31 302c3332 2c313030     ,41,1,0023,0001,
 803c0ac:	32353131 302c3030 0d43312a 0000000a     115200,0*1C.....

0803c0bc <AHBPrescTable>:
	...
 803c0c4:	04030201 09080706                       ........

0803c0cc <APBPrescTable>:
 803c0cc:	00000000 04030201                       ........

0803c0d4 <nivelesOverclock>:
 803c0d4:	000000d8 00000002 00000009 00000002     ................
 803c0e4:	000000f0 00000002 0000000a 00000002     ................

0803c0f4 <flagBitshiftOffset.0>:
 803c0f4:	16100600 16100600                       ........

0803c0fc <_ctype_>:
 803c0fc:	20202000 20202020 28282020 20282828     .         ((((( 
 803c10c:	20202020 20202020 20202020 20202020                     
 803c11c:	10108820 10101010 10101010 10101010      ...............
 803c12c:	04040410 04040404 10040404 10101010     ................
 803c13c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 803c14c:	01010101 01010101 01010101 10101010     ................
 803c15c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 803c16c:	02020202 02020202 02020202 10101010     ................
 803c17c:	00000020 00000000 00000000 00000000      ...............
	...

0803c200 <_global_impure_ptr>:
 803c200:	20002a10 00464e49 00666e69 004e414e     .*. INF.inf.NAN.
 803c210:	006e616e 31300030 35343332 39383736     nan.0.0123456789
 803c220:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 803c230:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
 803c240:	4e614e00 45455200 6d20544e 6f6c6c61     .NaN.REENT mallo
 803c250:	75732063 65656363 00646564 6975622f     c succeeded./bui
 803c260:	672f646c 742d756e 736c6f6f 726f662d     ld/gnu-tools-for
 803c270:	6d74732d 315f3233 2d332e30 31323032     -stm32_10.3-2021
 803c280:	2e30312e 31323032 35303131 3031312d     .10.20211105-110
 803c290:	72732f30 656e2f63 62696c77 77656e2f     0/src/newlib/new
 803c2a0:	2f62696c 6362696c 6474732f 2f62696c     lib/libc/stdlib/
 803c2b0:	616f7464 4200632e 6f6c6c61 75732063     dtoa.c.Balloc su
 803c2c0:	65656363 00646564                       cceeded.

0803c2c8 <__sf_fake_stderr>:
	...

0803c2e8 <__sf_fake_stdin>:
	...

0803c308 <__sf_fake_stdout>:
	...
 803c328:	6975622f 672f646c 742d756e 736c6f6f     /build/gnu-tools
 803c338:	726f662d 6d74732d 315f3233 2d332e30     -for-stm32_10.3-
 803c348:	31323032 2e30312e 31323032 35303131     2021.10.20211105
 803c358:	3031312d 72732f30 656e2f63 62696c77     -1100/src/newlib
 803c368:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 803c378:	2f62696c 6572706d 00632e63 00000000     lib/mprec.c.....

0803c388 <__mprec_bigtens>:
 803c388:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 803c398:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 803c3a8:	7f73bf3c 75154fdd                       <.s..O.u

0803c3b0 <__mprec_tens>:
 803c3b0:	00000000 3ff00000 00000000 40240000     .......?......$@
 803c3c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 803c3d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 803c3e0:	00000000 412e8480 00000000 416312d0     .......A......cA
 803c3f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 803c400:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 803c410:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 803c420:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 803c430:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 803c440:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 803c450:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 803c460:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 803c470:	79d99db4 44ea7843                       ...yCx.D

0803c478 <p05.0>:
 803c478:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
 803c488:	6c680020 6665004c 47464567 66202c00      .hlL.efgEFG., f
 803c498:	74636e75 3a6e6f69 73610020 74726573     unction: .assert
 803c4a8:	206e6f69 22732522 69616620 3a64656c     ion "%s" failed:
 803c4b8:	6c696620 25222065 202c2273 656e696c      file "%s", line
 803c4c8:	25642520 0a732573 50004300 5849534f      %d%s%s..C.POSIX
 803c4d8:	3a002e00 696d6573 74736f68 2d676e69     ...:semihosting-
 803c4e8:	74616566 73657275 74743a00 00000000     features.:tt....

0803c4f8 <__pow_log_data>:
 803c4f8:	fefa3800 3fe62e42 93c76730 3d2ef357     .8..B..?0g..W..=
 803c508:	00000000 bfe00000 55555560 bfe55555     ........`UUUUU..
 803c518:	00000006 3fe00000 9959554e 3fe99999     .......?NUY....?
 803c528:	5529a47a bfe55555 9b4845e9 bff2495b     z.)UUU...EH.[I..
 803c538:	8b263fc3 3ff0002b 00000000 3ff6a000     .?&.+..?.......?
	...
 803c550:	f2b9c800 bfd62c82 28375680 3cfab424     .....,...V7($..<
 803c560:	00000000 3ff68000 00000000 00000000     .......?........
 803c570:	bf580800 bfd5d1bd d8e0f720 bd1ca508     ..X..... .......
 803c580:	00000000 3ff66000 00000000 00000000     .....`.?........
 803c590:	17455800 bfd57677 d5b6506d bd2362a4     .XE.wv..mP...b#.
 803c5a0:	00000000 3ff64000 00000000 00000000     .....@.?........
 803c5b0:	872df800 bfd51aad 9eb067d5 bce684e4     ..-......g......
 803c5c0:	00000000 3ff62000 00000000 00000000     ..... .?........
 803c5d0:	95777800 bfd4be5f 93293ee0 bd041b69     .xw._....>).i...
 803c5e0:	00000000 3ff60000 00000000 00000000     .......?........
 803c5f0:	c21c6000 bfd4618b 484c84cc 3d13d82f     .`...a....LH/..=
 803c600:	00000000 3ff5e000 00000000 00000000     .......?........
 803c610:	8686a800 bfd40430 ed820b3a 3cdc42f3     ....0...:....B.<
 803c620:	00000000 3ff5c000 00000000 00000000     .......?........
 803c630:	55694800 bfd3a64c 86519460 3d20b1c6     .HiUL...`.Q... =
 803c640:	00000000 3ff5a000 00000000 00000000     .......?........
 803c650:	9a988000 bfd347dd d4c58092 3d25594d     .....G......MY%=
 803c660:	00000000 3ff58000 00000000 00000000     .......?........
 803c670:	bae12000 bfd2e8e2 99b72bd8 3d267b1e     . .......+...{&=
 803c680:	00000000 3ff56000 00000000 00000000     .....`.?........
 803c690:	13de8800 bfd2895a b6cfb03f 3d15ca14     ....Z...?......=
 803c6a0:	00000000 3ff56000 00000000 00000000     .....`.?........
 803c6b0:	13de8800 bfd2895a b6cfb03f 3d15ca14     ....Z...?......=
 803c6c0:	00000000 3ff54000 00000000 00000000     .....@.?........
 803c6d0:	fbcf7800 bfd22941 2853da76 bd165a24     .x..A)..v.S($Z..
 803c6e0:	00000000 3ff52000 00000000 00000000     ..... .?........
 803c6f0:	c1699800 bfd1c898 68e75404 bd1fafbc     ..i......T.h....
 803c700:	00000000 3ff50000 00000000 00000000     .......?........
 803c710:	ababa800 bfd1675c 3382a8f0 3d1f1fc6     ....\g.....3...=
 803c720:	00000000 3ff4e000 00000000 00000000     .......?........
 803c730:	f9ae4800 bfd1058b fd055a66 bd26a8c4     .H......fZ....&.
 803c740:	00000000 3ff4c000 00000000 00000000     .......?........
 803c750:	e2739000 bfd0a324 7ef4030e bd0c6bee     ..s.$......~.k..
 803c760:	00000000 3ff4a000 00000000 00000000     .......?........
 803c770:	94b4d000 bfd04025 9ef42d7f bcf036b8     ....%@...-...6..
 803c780:	00000000 3ff4a000 00000000 00000000     .......?........
 803c790:	94b4d000 bfd04025 9ef42d7f bcf036b8     ....%@...-...6..
 803c7a0:	00000000 3ff48000 00000000 00000000     .......?........
 803c7b0:	6d5e4000 bfcfb918 ab993c87 3d0d572a     .@^m.....<..*W.=
 803c7c0:	00000000 3ff46000 00000000 00000000     .....`.?........
 803c7d0:	cbdc6000 bfcef0ad 9c86af24 3d2b26b7     .`......$....&+=
 803c7e0:	00000000 3ff44000 00000000 00000000     .....@.?........
 803c7f0:	6e2af000 bfce2707 543fff10 bd172f4f     ..*n.'....?TO/..
 803c800:	00000000 3ff42000 00000000 00000000     ..... .?........
 803c810:	6b4fc000 bfcd5c21 bbca681b 3d21ba91     ..Ok!\...h....!=
 803c820:	00000000 3ff40000 00000000 00000000     .......?........
 803c830:	c79aa000 bfcc8ff7 689f8434 3d27794f     ........4..hOy'=
 803c840:	00000000 3ff40000 00000000 00000000     .......?........
 803c850:	c79aa000 bfcc8ff7 689f8434 3d27794f     ........4..hOy'=
 803c860:	00000000 3ff3e000 00000000 00000000     .......?........
 803c870:	742d9000 bfcbc286 318bb78f 3d194eb0     ..-t.......1.N.=
 803c880:	00000000 3ff3c000 00000000 00000000     .......?........
 803c890:	4e80c000 bfcaf3c9 3fcd9066 3cba4e63     ...N....f..?cN.<
 803c8a0:	00000000 3ff3a000 00000000 00000000     .......?........
 803c8b0:	1fe2b000 bfca23bc dc46c1ea bd258c64     .....#....F.d.%.
 803c8c0:	00000000 3ff3a000 00000000 00000000     .......?........
 803c8d0:	1fe2b000 bfca23bc dc46c1ea bd258c64     .....#....F.d.%.
 803c8e0:	00000000 3ff38000 00000000 00000000     .......?........
 803c8f0:	9cf45000 bfc9525a 04c1d4e3 bd2ad1d9     .P..ZR........*.
 803c900:	00000000 3ff36000 00000000 00000000     .....`.?........
 803c910:	6520d000 bfc87fa0 7fdbfa09 3d2bbdbf     .. e..........+=
 803c920:	00000000 3ff34000 00000000 00000000     .....@.?........
 803c930:	0210e000 bfc7ab89 72534a58 3d2bdb90     ........XJSr..+=
 803c940:	00000000 3ff34000 00000000 00000000     .....@.?........
 803c950:	0210e000 bfc7ab89 72534a58 3d2bdb90     ........XJSr..+=
 803c960:	00000000 3ff32000 00000000 00000000     ..... .?........
 803c970:	e719d000 bfc6d60f a3b2e266 bd10e46a     ........f...j...
 803c980:	00000000 3ff30000 00000000 00000000     .......?........
 803c990:	70a79000 bfc5ff30 9f105039 bd1e9e43     ...p0...9P..C...
 803c9a0:	00000000 3ff30000 00000000 00000000     .......?........
 803c9b0:	70a79000 bfc5ff30 9f105039 bd1e9e43     ...p0...9P..C...
 803c9c0:	00000000 3ff2e000 00000000 00000000     .......?........
 803c9d0:	e3a1b000 bfc526e5 90075b8f bd20de8b     .....&...[.... .
 803c9e0:	00000000 3ff2c000 00000000 00000000     .......?........
 803c9f0:	6ccb8000 bfc44d2b 6135783c 3d170cc1     ...l+M..<x5a...=
 803ca00:	00000000 3ff2c000 00000000 00000000     .......?........
 803ca10:	6ccb8000 bfc44d2b 6135783c 3d170cc1     ...l+M..<x5a...=
 803ca20:	00000000 3ff2a000 00000000 00000000     .......?........
 803ca30:	201e9000 bfc371fc 4d27543a 3cf17886     ... .q..:T'M.x.<
 803ca40:	00000000 3ff28000 00000000 00000000     .......?........
 803ca50:	f81ff000 bfc29552 1771c408 bd248d30     ....R.....q.0.$.
 803ca60:	00000000 3ff26000 00000000 00000000     .....`.?........
 803ca70:	d52f6000 bfc1b72a 1811a396 bd2e80a4     .`/.*...........
 803ca80:	00000000 3ff26000 00000000 00000000     .....`.?........
 803ca90:	d52f6000 bfc1b72a 1811a396 bd2e80a4     .`/.*...........
 803caa0:	00000000 3ff24000 00000000 00000000     .....@.?........
 803cab0:	7cd09000 bfc0d77e 88e85bf4 3d0a6996     ...|~....[...i.=
 803cac0:	00000000 3ff24000 00000000 00000000     .....@.?........
 803cad0:	7cd09000 bfc0d77e 88e85bf4 3d0a6996     ...|~....[...i.=
 803cae0:	00000000 3ff22000 00000000 00000000     ..... .?........
 803caf0:	31dbe000 bfbfec91 5ca333f2 bd257554     ...1.....3.\Tu%.
 803cb00:	00000000 3ff20000 00000000 00000000     .......?........
 803cb10:	6e2b0000 bfbe2707 2af0003c 3d2a342c     ..+n.'..<..*,4*=
 803cb20:	00000000 3ff20000 00000000 00000000     .......?........
 803cb30:	6e2b0000 bfbe2707 2af0003c 3d2a342c     ..+n.'..<..*,4*=
 803cb40:	00000000 3ff1e000 00000000 00000000     .......?........
 803cb50:	8f5bc000 bfbc5e54 585fbe06 bd1d0c57     ..[.T^...._XW...
 803cb60:	00000000 3ff1c000 00000000 00000000     .......?........
 803cb70:	3a4ae000 bfba926d e85baac8 3d253935     ..J:m.....[.59%=
 803cb80:	00000000 3ff1c000 00000000 00000000     .......?........
 803cb90:	3a4ae000 bfba926d e85baac8 3d253935     ..J:m.....[.59%=
 803cba0:	00000000 3ff1a000 00000000 00000000     .......?........
 803cbb0:	d631a000 bfb8c345 4d2f5668 3d137c29     ..1.E...hV/M)|.=
 803cbc0:	00000000 3ff1a000 00000000 00000000     .......?........
 803cbd0:	d631a000 bfb8c345 4d2f5668 3d137c29     ..1.E...hV/M)|.=
 803cbe0:	00000000 3ff18000 00000000 00000000     .......?........
 803cbf0:	8ae56000 bfb6f0d2 c93373da bd269737     .`.......s3.7.&.
 803cc00:	00000000 3ff16000 00000000 00000000     .....`.?........
 803cc10:	3f062000 bfb51b07 61c65e57 3d1f025b     . .?....W^.a[..=
 803cc20:	00000000 3ff16000 00000000 00000000     .....`.?........
 803cc30:	3f062000 bfb51b07 61c65e57 3d1f025b     . .?....W^.a[..=
 803cc40:	00000000 3ff14000 00000000 00000000     .....@.?........
 803cc50:	961be000 bfb341d7 ccf913df 3d2c5eda     .....A.......^,=
 803cc60:	00000000 3ff14000 00000000 00000000     .....@.?........
 803cc70:	961be000 bfb341d7 ccf913df 3d2c5eda     .....A.......^,=
 803cc80:	00000000 3ff12000 00000000 00000000     ..... .?........
 803cc90:	eea38000 bfb16536 768fa309 3d147c5e     ....6e.....v^|.=
 803cca0:	00000000 3ff10000 00000000 00000000     .......?........
 803ccb0:	c0118000 bfaf0a30 83368e91 3d2d599e     ....0.....6..Y-=
 803ccc0:	00000000 3ff10000 00000000 00000000     .......?........
 803ccd0:	c0118000 bfaf0a30 83368e91 3d2d599e     ....0.....6..Y-=
 803cce0:	00000000 3ff0e000 00000000 00000000     .......?........
 803ccf0:	71198000 bfab42dd e5d6704c 3d1c827a     ...q.B..Lp..z..=
 803cd00:	00000000 3ff0e000 00000000 00000000     .......?........
 803cd10:	71198000 bfab42dd e5d6704c 3d1c827a     ...q.B..Lp..z..=
 803cd20:	00000000 3ff0c000 00000000 00000000     .......?........
 803cd30:	f632c000 bfa77458 34f2a1ee bd2cfc46     ..2.Xt.....4F.,.
 803cd40:	00000000 3ff0c000 00000000 00000000     .......?........
 803cd50:	f632c000 bfa77458 34f2a1ee bd2cfc46     ..2.Xt.....4F.,.
 803cd60:	00000000 3ff0a000 00000000 00000000     .......?........
 803cd70:	b9fec000 bfa39e87 f526feaa 3cf502b7     ..........&....<
 803cd80:	00000000 3ff0a000 00000000 00000000     .......?........
 803cd90:	b9fec000 bfa39e87 f526feaa 3cf502b7     ..........&....<
 803cda0:	00000000 3ff08000 00000000 00000000     .......?........
 803cdb0:	0e780000 bf9f829b 7c7e09e4 bd298026     ..x.......~|&.).
 803cdc0:	00000000 3ff08000 00000000 00000000     .......?........
 803cdd0:	0e780000 bf9f829b 7c7e09e4 bd298026     ..x.......~|&.).
 803cde0:	00000000 3ff06000 00000000 00000000     .....`.?........
 803cdf0:	07d58000 bf97b91b 93faa639 bd288d54     ........9...T.(.
 803ce00:	00000000 3ff04000 00000000 00000000     .....@.?........
 803ce10:	b0fc0000 bf8fc0a8 f6d3a69c bcdf1e7c     ............|...
 803ce20:	00000000 3ff04000 00000000 00000000     .....@.?........
 803ce30:	b0fc0000 bf8fc0a8 f6d3a69c bcdf1e7c     ............|...
 803ce40:	00000000 3ff02000 00000000 00000000     ..... .?........
 803ce50:	6b100000 bf7fe02a 0dda40e4 bd19e23f     ...k*....@..?...
 803ce60:	00000000 3ff02000 00000000 00000000     ..... .?........
 803ce70:	6b100000 bf7fe02a 0dda40e4 bd19e23f     ...k*....@..?...
 803ce80:	00000000 3ff00000 00000000 00000000     .......?........
	...
 803cea4:	3ff00000 00000000 00000000 00000000     ...?............
	...
 803cec4:	3fefc000 00000000 00000000 75890000     ...?...........u
 803ced4:	3f801015 999d2be8 bd10c76b 00000000     ...?.+..k.......
 803cee4:	3fef8000 00000000 00000000 58938000     ...?...........X
 803cef4:	3f902056 06e2f7d2 bd23dc5b 00000000     V .?....[.#.....
 803cf04:	3fef4000 00000000 00000000 28c90000     .@.?...........(
 803cf14:	3f984925 325a0c34 bd2aa0ba 00000000     %I.?4.Z2..*.....
 803cf24:	3fef0000 00000000 00000000 89e74000     ...?.........@..
 803cf34:	3fa0415d 5cf1d753 3d0111c0 00000000     ]A.?S..\...=....
 803cf44:	3feec000 00000000 00000000 d42e0000     ...?............
 803cf54:	3fa466ae 75bdfd28 bd2c1673 00000000     .f.?(..us.,.....
 803cf64:	3fee8000 00000000 00000000 149fc000     ...?............
 803cf74:	3fa894aa d05a267d bd197995 00000000     ...?}&Z..y......
 803cf84:	3fee4000 00000000 00000000 cdddc000     .@.?............
 803cf94:	3faccb73 47d82807 bd1a68f2 00000000     s..?.(.G.h......
 803cfa4:	3fee2000 00000000 00000000 c006c000     . .?............
 803cfb4:	3faeea31 4fc93b7b bd0e113e 00000000     1..?{;.O>.......
 803cfc4:	3fede000 00000000 00000000 d1466000     ...?.........`F.
 803cfd4:	3fb1973b 560d9e9b bd25325d 00000000     ;..?...V]2%.....
 803cfe4:	3feda000 00000000 00000000 a7d1e000     ...?............
 803cff4:	3fb3bdf5 a5db4ed7 3d2cc85e 00000000     ...?.N..^.,=....
 803d004:	3fed6000 00000000 00000000 4d97a000     .`.?...........M
 803d014:	3fb5e95a 3c5d1d1e bd2c6906 00000000     Z..?..]<.i,.....
 803d024:	3fed4000 00000000 00000000 0aeac000     .@.?............
 803d034:	3fb700d3 a99ded32 3cec1e8d 00000000     ...?2......<....
 803d044:	3fed0000 00000000 00000000 5d594000     ...?.........@Y]
 803d054:	3fb9335e 3abd47da 3d23115c 00000000     ^3.?.G.:\.#=....
 803d064:	3fecc000 00000000 00000000 8dad6000     ...?.........`..
 803d074:	3fbb6ac8 2bf768e5 bd139080 00000000     .j.?.h.+........
 803d084:	3feca000 00000000 00000000 01bc4000     ...?.........@..
 803d094:	3fbc8858 c65aacd3 3d2646d1 00000000     X..?..Z..F&=....
 803d0a4:	3fec6000 00000000 00000000 830a2000     .`.?......... ..
 803d0b4:	3fbec739 afe645e0 bd2dc068 00000000     9..?.E..h.-.....
 803d0c4:	3fec4000 00000000 00000000 39dbe000     .@.?...........9
 803d0d4:	3fbfe891 4fa10afd bd2534d6 00000000     ...?...O.4%.....
 803d0e4:	3fec0000 00000000 00000000 8227e000     ...?..........'.
 803d0f4:	3fc1178e ce2d07f2 3d21ef78 00000000     ...?..-.x.!=....
 803d104:	3febe000 00000000 00000000 7e23f000     ...?..........#~
 803d114:	3fc1aa2b 44389934 3d2ca78e 00000000     +..?4.8D..,=....
 803d124:	3feba000 00000000 00000000 0c868000     ...?............
 803d134:	3fc2d161 cb81b4a1 3d039d6c 00000000     a..?....l..=....
 803d144:	3feb8000 00000000 00000000 b0159000     ...?............
 803d154:	3fc365fc 234b7289 3cc62fa8 00000000     .e.?.rK#./.<....
 803d164:	3feb4000 00000000 00000000 8333b000     .@.?..........3.
 803d174:	3fc4913d 54fdb678 3d258379 00000000     =..?x..Ty.%=....
 803d184:	3feb2000 00000000 00000000 e4a1b000     . .?............
 803d194:	3fc527e5 e5697dc7 3d2633e8 00000000     .'.?.}i..3&=....
 803d1a4:	3feae000 00000000 00000000 be8c1000     ...?............
 803d1b4:	3fc6574e 2c3c2e78 3d19cf8b 00000000     NW.?x.<,...=....
 803d1c4:	3feac000 00000000 00000000 8b757000     ...?.........pu.
 803d1d4:	3fc6f012 e59c21e1 bd25118d 00000000     ...?.!....%.....
 803d1e4:	3feaa000 00000000 00000000 85445000     ...?.........PD.
 803d1f4:	3fc7898d 70914305 bd1c6610 00000000     ...?.C.p.f......
 803d204:	3fea6000 00000000 00000000 eb390000     .`.?..........9.
 803d214:	3fc8beaf aae92cd1 bd073d54 00000000     ...?.,..T=......
 803d224:	3fea4000 00000000 00000000 dcf70000     .@.?............
 803d234:	3fc95a5a 58a0ff6f 3d07f228 00000000     ZZ.?o..X(..=....
 803d244:	3fea0000 00000000 00000000 3c8ae000     ...?...........<
 803d254:	3fca93ed 50562169 bd287243 00000000     ...?i!VPCr(.....
 803d264:	3fe9e000 00000000 00000000 575bd000     ...?..........[W
 803d274:	3fcb31d8 4eace1aa bd0c358d 00000000     .1.?...N.5......
 803d284:	3fe9c000 00000000 00000000 383be000     ...?..........;8
 803d294:	3fcbd087 595412b6 bd2d4bc4 00000000     ...?..TY.K-.....
 803d2a4:	3fe9a000 00000000 00000000 c6f01000     ...?............
 803d2b4:	3fcc6ffb c5962bd2 bcf1ec72 00000000     .o.?.+..r.......
 803d2c4:	3fe96000 00000000 00000000 b0d49000     .`.?............
 803d2d4:	3fcdb13d f715b035 bd2aff2a 00000000     =..?5...*.*.....
 803d2e4:	3fe94000 00000000 00000000 ffe71000     .@.?............
 803d2f4:	3fce530e 6041f430 3cc21227 00000000     .S.?0.A`'..<....
 803d304:	3fe92000 00000000 00000000 e4dd0000     . .?............
 803d314:	3fcef5ad 65bb8e11 bcca2115 00000000     ...?...e.!......
 803d324:	3fe90000 00000000 00000000 6cb3b000     ...?...........l
 803d334:	3fcf991c ca0cdf30 3d1bcbec 00000000     ...?0......=....
 803d344:	3fe8c000 00000000 00000000 604d5800     ...?.........XM`
 803d354:	3fd07138 16ed4e91 3cf89cdb 00000000     8q.?.N.....<....
 803d364:	3fe8a000 00000000 00000000 67616000     ...?.........`ag
 803d374:	3fd0c42d 163ceae9 3d27188b 00000000     -..?..<...'=....
 803d384:	3fe88000 00000000 00000000 8227e800     ...?..........'.
 803d394:	3fd1178e 63a5f01c bd2c210e 00000000     ...?...c.!,.....
 803d3a4:	3fe86000 00000000 00000000 cbacf800     .`.?............
 803d3b4:	3fd16b5c f7a51681 3d2b9acd 00000000     \k.?......+=....
 803d3c4:	3fe84000 00000000 00000000 635a6800     .@.?.........hZc
 803d3d4:	3fd1bf99 5147bdb7 3d2ca6ed 00000000     ...?..GQ..,=....
 803d3e4:	3fe82000 00000000 00000000 6d0eb800     . .?...........m
 803d3f4:	3fd21445 ba46baea 3d0a87de 00000000     E..?..F....=....
 803d404:	3fe7e000 00000000 00000000 7cdc9000     ...?...........|
 803d414:	3fd2bef0 4a5004f4 3d2a9cfa 00000000     ...?..PJ..*=....
 803d424:	3fe7c000 00000000 00000000 e1d36000     ...?.........`..
 803d434:	3fd314f1 d3213cb8 bd28e27a 00000000     ...?.<!.z.(.....
 803d444:	3fe7a000 00000000 00000000 76be1000     ...?...........v
 803d454:	3fd36b67 b0f177c8 3d116ecd 00000000     gk.?.w...n.=....
 803d464:	3fe78000 00000000 00000000 77333000     ...?.........03w
 803d474:	3fd3c252 b606bd5c 3d183b54 00000000     R..?\...T;.=....
 803d484:	3fe76000 00000000 00000000 23d5e800     .`.?...........#
 803d494:	3fd419b4 ec90e09d 3d08e436 00000000     ...?....6..=....
 803d4a4:	3fe74000 00000000 00000000 c271c800     .@.?..........q.
 803d4b4:	3fd4718d 0967d675 bd2f27ce 00000000     .q.?u.g..'/.....
 803d4c4:	3fe72000 00000000 00000000 9e173000     . .?.........0..
 803d4d4:	3fd4c9e0 1b0ad8a4 bd2e2089 00000000     ...?..... ......
 803d4e4:	3fe70000 00000000 00000000 0738a000     ...?..........8.
 803d4f4:	3fd522ae 8164c759 3d2ebe70 00000000     .".?Y.d.p..=....
 803d504:	3fe6e000 00000000 00000000 53c8d000     ...?...........S
 803d514:	3fd57bf7 ee5d40ef 3d1faded 00000000     .{.?.@]....=....
 803d524:	3fe6c000 00000000 00000000 df596000     ...?.........`Y.
 803d534:	3fd5d5bd 08a465dc bd0a0b2a              ...?.e..*...

0803d540 <__exp2f_data>:
 803d540:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 803d550:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 803d560:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 803d570:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 803d580:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 803d590:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 803d5a0:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 803d5b0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 803d5c0:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 803d5d0:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 803d5e0:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 803d5f0:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 803d600:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 803d610:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 803d620:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 803d630:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 803d640:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 803d650:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 803d660:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 803d670:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 803d680:	ff0c52d6 3f962e42                       .R..B..?

0803d688 <__logf_data>:
 803d688:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 803d698:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 803d6a8:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 803d6b8:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 803d6c8:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 803d6d8:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 803d6e8:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 803d6f8:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 803d708:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 803d718:	00000000 3ff00000 00000000 00000000     .......?........
 803d728:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 803d738:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 803d748:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 803d758:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 803d768:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 803d778:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 803d788:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 803d798:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

0803d7a8 <TWO23>:
 803d7a8:	4b000000 cb000000                       ...K....

0803d7b0 <__powf_log2_data>:
 803d7b0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
 803d7c0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
 803d7d0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
 803d7e0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
 803d7f0:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
 803d800:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
 803d810:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
 803d820:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
 803d830:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
 803d840:	00000000 3ff00000 00000000 00000000     .......?........
 803d850:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
 803d860:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
 803d870:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
 803d880:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
 803d890:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
 803d8a0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
 803d8b0:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
 803d8c0:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
 803d8d0:	652ab82b 3ff71547                       +.*eG..?

0803d8d8 <__inv_pio4>:
 803d8d8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 803d8e8:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 803d8f8:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 803d908:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 803d918:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 803d928:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

0803d938 <__sincosf_table>:
 803d938:	00000000 3ff00000 00000000 bff00000     .......?........
 803d948:	00000000 bff00000 00000000 3ff00000     ...............?
 803d958:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 803d968:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 803d978:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 803d988:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 803d998:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 803d9a8:	00000000 3ff00000 00000000 bff00000     .......?........
 803d9b8:	00000000 bff00000 00000000 3ff00000     ...............?
 803d9c8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 803d9d8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 803d9e8:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 803d9f8:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 803da08:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

0803da18 <CSWTCH.8>:
 803da18:	bf490fdb 4016cbe4 c016cbe4              ..I....@....

0803da24 <CSWTCH.9>:
 803da24:	80000000 40490fdb c0490fdb              ......I@..I.

0803da30 <Zero>:
 803da30:	00000000 80000000                       ........

0803da38 <npio2_hw>:
 803da38:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 803da48:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 803da58:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 803da68:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 803da78:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 803da88:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 803da98:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 803daa8:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0803dab8 <two_over_pi>:
 803dab8:	000000a2 000000f9 00000083 0000006e     ............n...
 803dac8:	0000004e 00000044 00000015 00000029     N...D.......)...
 803dad8:	000000fc 00000027 00000057 000000d1     ....'...W.......
 803dae8:	000000f5 00000034 000000dd 000000c0     ....4...........
 803daf8:	000000db 00000062 00000095 00000099     ....b...........
 803db08:	0000003c 00000043 00000090 00000041     <...C.......A...
 803db18:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 803db28:	000000de 000000bb 000000c5 00000061     ............a...
 803db38:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 803db48:	00000042 0000004d 000000d2 000000e0     B...M...........
 803db58:	00000006 00000049 0000002e 000000ea     ....I...........
 803db68:	00000009 000000d1 00000092 0000001c     ................
 803db78:	000000fe 0000001d 000000eb 0000001c     ................
 803db88:	000000b1 00000029 000000a7 0000003e     ....).......>...
 803db98:	000000e8 00000082 00000035 000000f5     ........5.......
 803dba8:	0000002e 000000bb 00000044 00000084     ........D.......
 803dbb8:	000000e9 0000009c 00000070 00000026     ........p...&...
 803dbc8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 803dbd8:	00000039 00000091 000000d6 00000039     9...........9...
 803dbe8:	00000083 00000053 00000039 000000f4     ....S...9.......
 803dbf8:	0000009c 00000084 0000005f 0000008b     ........_.......
 803dc08:	000000bd 000000f9 00000028 0000003b     ........(...;...
 803dc18:	0000001f 000000f8 00000097 000000ff     ................
 803dc28:	000000de 00000005 00000098 0000000f     ................
 803dc38:	000000ef 0000002f 00000011 0000008b     ..../...........
 803dc48:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 803dc58:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 803dc68:	00000027 000000cb 00000009 000000b7     '...............
 803dc78:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 803dc88:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 803dc98:	00000075 00000027 000000ba 000000c7     u...'...........
 803dca8:	000000eb 000000e5 000000f1 0000007b     ............{...
 803dcb8:	0000003d 00000007 00000039 000000f7     =.......9.......
 803dcc8:	0000008a 00000052 00000092 000000ea     ....R...........
 803dcd8:	0000006b 000000fb 0000005f 000000b1     k......._.......
 803dce8:	0000001f 0000008d 0000005d 00000008     ........].......
 803dcf8:	00000056 00000003 00000030 00000046     V.......0...F...
 803dd08:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 803dd18:	000000f0 000000cf 000000bc 00000020     ............ ...
 803dd28:	0000009a 000000f4 00000036 0000001d     ........6.......
 803dd38:	000000a9 000000e3 00000091 00000061     ............a...
 803dd48:	0000005e 000000e6 0000001b 00000008     ^...............
 803dd58:	00000065 00000099 00000085 0000005f     e..........._...
 803dd68:	00000014 000000a0 00000068 00000040     ........h...@...
 803dd78:	0000008d 000000ff 000000d8 00000080     ................
 803dd88:	0000004d 00000073 00000027 00000031     M...s...'...1...
 803dd98:	00000006 00000006 00000015 00000056     ............V...
 803dda8:	000000ca 00000073 000000a8 000000c9     ....s...........
 803ddb8:	00000060 000000e2 0000007b 000000c0     `.......{.......
 803ddc8:	0000008c 0000006b                       ....k...

0803ddd0 <__exp_data>:
 803ddd0:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
 803dde0:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
 803ddf0:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
 803de00:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
 803de10:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
 803de20:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
 803de30:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
 803de4c:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
 803de5c:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
 803de6c:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
 803de7c:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
 803de8c:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
 803de9c:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
 803deac:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
 803debc:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
 803decc:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
 803dedc:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
 803deec:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
 803defc:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
 803df0c:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
 803df1c:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
 803df2c:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
 803df3c:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
 803df4c:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
 803df5c:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
 803df6c:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
 803df7c:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
 803df8c:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
 803df9c:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
 803dfac:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
 803dfbc:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
 803dfcc:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
 803dfdc:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
 803dfec:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
 803dffc:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
 803e00c:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
 803e01c:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
 803e02c:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
 803e03c:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
 803e04c:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
 803e05c:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
 803e06c:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
 803e07c:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
 803e08c:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
 803e09c:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
 803e0ac:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
 803e0bc:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
 803e0cc:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
 803e0dc:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
 803e0ec:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
 803e0fc:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
 803e10c:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
 803e11c:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
 803e12c:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
 803e13c:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
 803e14c:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
 803e15c:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
 803e16c:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
 803e17c:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
 803e18c:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
 803e19c:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
 803e1ac:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
 803e1bc:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
 803e1cc:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
 803e1dc:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
 803e1ec:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
 803e1fc:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
 803e20c:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
 803e21c:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
 803e22c:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
 803e23c:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
 803e24c:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
 803e25c:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
 803e26c:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
 803e27c:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
 803e28c:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
 803e29c:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
 803e2ac:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
 803e2bc:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
 803e2cc:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
 803e2dc:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
 803e2ec:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
 803e2fc:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
 803e30c:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
 803e31c:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
 803e32c:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
 803e33c:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
 803e34c:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
 803e35c:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
 803e36c:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
 803e37c:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
 803e38c:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
 803e39c:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
 803e3ac:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
 803e3bc:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
 803e3cc:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
 803e3dc:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
 803e3ec:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
 803e3fc:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
 803e40c:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
 803e41c:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
 803e42c:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
 803e43c:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
 803e44c:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
 803e45c:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
 803e46c:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
 803e47c:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
 803e48c:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
 803e49c:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
 803e4ac:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
 803e4bc:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
 803e4cc:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
 803e4dc:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
 803e4ec:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
 803e4fc:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
 803e50c:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
 803e51c:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
 803e52c:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
 803e53c:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
 803e54c:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
 803e55c:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
 803e56c:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
 803e57c:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
 803e58c:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
 803e59c:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
 803e5ac:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
 803e5bc:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
 803e5cc:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
 803e5dc:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
 803e5ec:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
 803e5fc:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
 803e60c:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
 803e61c:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
 803e62c:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
 803e63c:	3feff3c2                                ...?

0803e640 <PIo2>:
 803e640:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 803e650:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 803e660:	1fc40000 1bc60000 17440000              ..........D.

0803e66c <init_jk>:
 803e66c:	00000004 00000007 00000009              ............

0803e678 <atanhi>:
 803e678:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0803e688 <atanlo>:
 803e688:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0803e698 <_init>:
 803e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e69a:	bf00      	nop
 803e69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e69e:	bc08      	pop	{r3}
 803e6a0:	469e      	mov	lr, r3
 803e6a2:	4770      	bx	lr

0803e6a4 <_fini>:
 803e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e6a6:	bf00      	nop
 803e6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e6aa:	bc08      	pop	{r3}
 803e6ac:	469e      	mov	lr, r3
 803e6ae:	4770      	bx	lr
